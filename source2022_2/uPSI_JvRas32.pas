unit uPSI_JvRas32;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvRas32 = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJvRas32(CL: TPSPascalCompiler);
procedure SIRegister_JvRas32(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvRas32(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvRas32(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Controls
  ,Forms
  //,Ras32
  ,JvComponent
  ,JvTypes
  ,JvRas32
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvRas32]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvRas32(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvComponent', 'TJvRas32') do
  with CL.AddClassN(CL.FindClass('TJvComponent'),'TJvRas32') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure RefreshPhoneBook');
    RegisterProperty('DeviceType', 'string', iptr);
    RegisterProperty('DeviceName', 'string', iptr);
    RegisterProperty('PhoneNumber', 'string', iptrw);
    RegisterProperty('Domain', 'string', iptrw);
    RegisterProperty('CallBackNumber', 'string', iptrw);
    RegisterProperty('PhoneBook', 'TStrings', iptr);
    RegisterProperty('KeepConnected', 'Boolean', iptrw);
    RegisterProperty('EntryIndex', 'Integer', iptrw);
    RegisterProperty('PhoneBookPath', 'TFileName', iptrw);
    RegisterProperty('Entry', 'string', iptrw);
    RegisterProperty('Username', 'string', iptrw);
    RegisterProperty('Password', 'string', iptrw);
    RegisterProperty('Connected', 'Boolean', iptrw);
    RegisterProperty('OnOpenPort', 'TNotifyEvent', iptrw);
    RegisterProperty('OnPortOpened', 'TNotifyEvent', iptrw);
    RegisterProperty('OnConnectDevice', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDeviceConnected', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAllDevicesConnected', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthenticate', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthNotify', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthRetry', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthCallback', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthChangePassword', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthProject', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthLinkSpeed', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthAck', 'TNotifyEvent', iptrw);
    RegisterProperty('OnReAuthenticate', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAuthenticated', 'TNotifyEvent', iptrw);
    RegisterProperty('OnPrepareForCallback', 'TNotifyEvent', iptrw);
    RegisterProperty('OnWaitForModemReset', 'TNotifyEvent', iptrw);
    RegisterProperty('OnInteractive', 'TNotifyEvent', iptrw);
    RegisterProperty('OnRetryAuthentication', 'TNotifyEvent', iptrw);
    RegisterProperty('OnPasswordExpired', 'TNotifyEvent', iptrw);
    RegisterProperty('OnConnected', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDisConnected', 'TNotifyEvent', iptrw);
    RegisterProperty('OnWaitForCallBack', 'TNotifyEvent', iptrw);
    RegisterMethod('Function Dial( Index : Integer) : Boolean');
    RegisterMethod('Function HangUp : Boolean');
    RegisterMethod('Function CreateNewConnection : Boolean');
    RegisterMethod('Function EditConnection( Index : Integer) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvRas32(CL: TPSPascalCompiler);
begin
  SIRegister_TJvRas32(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJvRasError');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvRas32OnWaitForCallBack_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnWaitForCallBack := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnWaitForCallBack_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnWaitForCallBack; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnDisConnected_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnDisConnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnDisConnected_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnDisConnected; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnConnected_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnConnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnConnected_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnConnected; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnPasswordExpired_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnPasswordExpired := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnPasswordExpired_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnPasswordExpired; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnRetryAuthentication_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnRetryAuthentication := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnRetryAuthentication_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnRetryAuthentication; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnInteractive_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnInteractive := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnInteractive_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnInteractive; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnWaitForModemReset_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnWaitForModemReset := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnWaitForModemReset_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnWaitForModemReset; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnPrepareForCallback_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnPrepareForCallback := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnPrepareForCallback_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnPrepareForCallback; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthenticated_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthenticated := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthenticated_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthenticated; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnReAuthenticate_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnReAuthenticate := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnReAuthenticate_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnReAuthenticate; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthAck_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthAck := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthAck_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthAck; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthLinkSpeed_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthLinkSpeed := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthLinkSpeed_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthLinkSpeed; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthProject_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthProject := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthProject_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthProject; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthChangePassword_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthChangePassword := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthChangePassword_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthChangePassword; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthCallback_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthCallback := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthCallback_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthCallback; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthRetry_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthRetry := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthRetry_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthRetry; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthNotify_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthNotify := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthNotify_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthNotify; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthenticate_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAuthenticate := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAuthenticate_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAuthenticate; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAllDevicesConnected_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnAllDevicesConnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnAllDevicesConnected_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnAllDevicesConnected; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnDeviceConnected_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnDeviceConnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnDeviceConnected_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnDeviceConnected; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnConnectDevice_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnConnectDevice := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnConnectDevice_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnConnectDevice; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnPortOpened_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnPortOpened := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnPortOpened_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnPortOpened; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnOpenPort_W(Self: TJvRas32; const T: TNotifyEvent);
begin Self.OnOpenPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32OnOpenPort_R(Self: TJvRas32; var T: TNotifyEvent);
begin T := Self.OnOpenPort; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Connected_W(Self: TJvRas32; const T: Boolean);
begin Self.Connected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Connected_R(Self: TJvRas32; var T: Boolean);
begin T := Self.Connected; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Password_W(Self: TJvRas32; const T: string);
begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Password_R(Self: TJvRas32; var T: string);
begin T := Self.Password; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Username_W(Self: TJvRas32; const T: string);
begin Self.Username := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Username_R(Self: TJvRas32; var T: string);
begin T := Self.Username; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Entry_W(Self: TJvRas32; const T: string);
begin Self.Entry := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Entry_R(Self: TJvRas32; var T: string);
begin T := Self.Entry; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32PhoneBookPath_W(Self: TJvRas32; const T: TFileName);
begin Self.PhoneBookPath := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32PhoneBookPath_R(Self: TJvRas32; var T: TFileName);
begin T := Self.PhoneBookPath; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32EntryIndex_W(Self: TJvRas32; const T: Integer);
begin Self.EntryIndex := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32EntryIndex_R(Self: TJvRas32; var T: Integer);
begin T := Self.EntryIndex; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32KeepConnected_W(Self: TJvRas32; const T: Boolean);
begin Self.KeepConnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32KeepConnected_R(Self: TJvRas32; var T: Boolean);
begin T := Self.KeepConnected; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32PhoneBook_R(Self: TJvRas32; var T: TStrings);
begin T := Self.PhoneBook; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32CallBackNumber_W(Self: TJvRas32; const T: string);
begin Self.CallBackNumber := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32CallBackNumber_R(Self: TJvRas32; var T: string);
begin T := Self.CallBackNumber; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Domain_W(Self: TJvRas32; const T: string);
begin Self.Domain := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32Domain_R(Self: TJvRas32; var T: string);
begin T := Self.Domain; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32PhoneNumber_W(Self: TJvRas32; const T: string);
begin Self.PhoneNumber := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32PhoneNumber_R(Self: TJvRas32; var T: string);
begin T := Self.PhoneNumber; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32DeviceName_R(Self: TJvRas32; var T: string);
begin T := Self.DeviceName; end;

(*----------------------------------------------------------------------------*)
procedure TJvRas32DeviceType_R(Self: TJvRas32; var T: string);
begin T := Self.DeviceType; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvRas32(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvRas32) do
  begin
    RegisterConstructor(@TJvRas32.Create, 'Create');
    RegisterMethod(@TJvRas32.RefreshPhoneBook, 'RefreshPhoneBook');
    RegisterPropertyHelper(@TJvRas32DeviceType_R,nil,'DeviceType');
    RegisterPropertyHelper(@TJvRas32DeviceName_R,nil,'DeviceName');
    RegisterPropertyHelper(@TJvRas32PhoneNumber_R,@TJvRas32PhoneNumber_W,'PhoneNumber');
    RegisterPropertyHelper(@TJvRas32Domain_R,@TJvRas32Domain_W,'Domain');
    RegisterPropertyHelper(@TJvRas32CallBackNumber_R,@TJvRas32CallBackNumber_W,'CallBackNumber');
    RegisterPropertyHelper(@TJvRas32PhoneBook_R,nil,'PhoneBook');
    RegisterPropertyHelper(@TJvRas32KeepConnected_R,@TJvRas32KeepConnected_W,'KeepConnected');
    RegisterPropertyHelper(@TJvRas32EntryIndex_R,@TJvRas32EntryIndex_W,'EntryIndex');
    RegisterPropertyHelper(@TJvRas32PhoneBookPath_R,@TJvRas32PhoneBookPath_W,'PhoneBookPath');
    RegisterPropertyHelper(@TJvRas32Entry_R,@TJvRas32Entry_W,'Entry');
    RegisterPropertyHelper(@TJvRas32Username_R,@TJvRas32Username_W,'Username');
    RegisterPropertyHelper(@TJvRas32Password_R,@TJvRas32Password_W,'Password');
    RegisterPropertyHelper(@TJvRas32Connected_R,@TJvRas32Connected_W,'Connected');
    RegisterPropertyHelper(@TJvRas32OnOpenPort_R,@TJvRas32OnOpenPort_W,'OnOpenPort');
    RegisterPropertyHelper(@TJvRas32OnPortOpened_R,@TJvRas32OnPortOpened_W,'OnPortOpened');
    RegisterPropertyHelper(@TJvRas32OnConnectDevice_R,@TJvRas32OnConnectDevice_W,'OnConnectDevice');
    RegisterPropertyHelper(@TJvRas32OnDeviceConnected_R,@TJvRas32OnDeviceConnected_W,'OnDeviceConnected');
    RegisterPropertyHelper(@TJvRas32OnAllDevicesConnected_R,@TJvRas32OnAllDevicesConnected_W,'OnAllDevicesConnected');
    RegisterPropertyHelper(@TJvRas32OnAuthenticate_R,@TJvRas32OnAuthenticate_W,'OnAuthenticate');
    RegisterPropertyHelper(@TJvRas32OnAuthNotify_R,@TJvRas32OnAuthNotify_W,'OnAuthNotify');
    RegisterPropertyHelper(@TJvRas32OnAuthRetry_R,@TJvRas32OnAuthRetry_W,'OnAuthRetry');
    RegisterPropertyHelper(@TJvRas32OnAuthCallback_R,@TJvRas32OnAuthCallback_W,'OnAuthCallback');
    RegisterPropertyHelper(@TJvRas32OnAuthChangePassword_R,@TJvRas32OnAuthChangePassword_W,'OnAuthChangePassword');
    RegisterPropertyHelper(@TJvRas32OnAuthProject_R,@TJvRas32OnAuthProject_W,'OnAuthProject');
    RegisterPropertyHelper(@TJvRas32OnAuthLinkSpeed_R,@TJvRas32OnAuthLinkSpeed_W,'OnAuthLinkSpeed');
    RegisterPropertyHelper(@TJvRas32OnAuthAck_R,@TJvRas32OnAuthAck_W,'OnAuthAck');
    RegisterPropertyHelper(@TJvRas32OnReAuthenticate_R,@TJvRas32OnReAuthenticate_W,'OnReAuthenticate');
    RegisterPropertyHelper(@TJvRas32OnAuthenticated_R,@TJvRas32OnAuthenticated_W,'OnAuthenticated');
    RegisterPropertyHelper(@TJvRas32OnPrepareForCallback_R,@TJvRas32OnPrepareForCallback_W,'OnPrepareForCallback');
    RegisterPropertyHelper(@TJvRas32OnWaitForModemReset_R,@TJvRas32OnWaitForModemReset_W,'OnWaitForModemReset');
    RegisterPropertyHelper(@TJvRas32OnInteractive_R,@TJvRas32OnInteractive_W,'OnInteractive');
    RegisterPropertyHelper(@TJvRas32OnRetryAuthentication_R,@TJvRas32OnRetryAuthentication_W,'OnRetryAuthentication');
    RegisterPropertyHelper(@TJvRas32OnPasswordExpired_R,@TJvRas32OnPasswordExpired_W,'OnPasswordExpired');
    RegisterPropertyHelper(@TJvRas32OnConnected_R,@TJvRas32OnConnected_W,'OnConnected');
    RegisterPropertyHelper(@TJvRas32OnDisConnected_R,@TJvRas32OnDisConnected_W,'OnDisConnected');
    RegisterPropertyHelper(@TJvRas32OnWaitForCallBack_R,@TJvRas32OnWaitForCallBack_W,'OnWaitForCallBack');
    RegisterMethod(@TJvRas32.Dial, 'Dial');
    RegisterMethod(@TJvRas32.HangUp, 'HangUp');
    RegisterMethod(@TJvRas32.CreateNewConnection, 'CreateNewConnection');
    RegisterMethod(@TJvRas32.EditConnection, 'EditConnection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvRas32(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TJvRas32(CL);
  with CL.Add(EJvRasError) do
end;

 
 
{ TPSImport_JvRas32 }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvRas32.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvRas32(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvRas32.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvRas32(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
