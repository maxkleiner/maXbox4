unit uPSI_xrtl_net_NamedPipe;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_xrtl_net_NamedPipe = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TXRTLNamedPipeClient(CL: TPSPascalCompiler);
procedure SIRegister_TXRTLNamedPipeServer(CL: TPSPascalCompiler);
procedure SIRegister_TXRTLNamedPipe(CL: TPSPascalCompiler);
procedure SIRegister_xrtl_net_NamedPipe(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TXRTLNamedPipeClient(CL: TPSRuntimeClassImporter);
procedure RIRegister_TXRTLNamedPipeServer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TXRTLNamedPipe(CL: TPSRuntimeClassImporter);
procedure RIRegister_xrtl_net_NamedPipe(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,xrtl_io_Stream
  ,xrtl_net_NamedPipe
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_xrtl_net_NamedPipe]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TXRTLNamedPipeClient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TXRTLNamedPipe', 'TXRTLNamedPipeClient') do
  with CL.AddClassN(CL.FindClass('TXRTLNamedPipe'),'TXRTLNamedPipeClient') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TXRTLNamedPipeServer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TXRTLNamedPipe', 'TXRTLNamedPipeServer') do
  with CL.AddClassN(CL.FindClass('TXRTLNamedPipe'),'TXRTLNamedPipeServer') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TXRTLNamedPipe(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TXRTLNamedPipe') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TXRTLNamedPipe') do
  begin
    RegisterMethod('Constructor Create( AHandle : THandle)');
    RegisterProperty('Handle', 'THandle', iptr);
    RegisterProperty('InputStream', 'TXRTLInputStream', iptr);
    RegisterProperty('OutputStream', 'TXRTLOutputStream', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_xrtl_net_NamedPipe(CL: TPSPascalCompiler);
begin
  SIRegister_TXRTLNamedPipe(CL);
  CL.AddTypeS('TXRTLNamedPipeInstanceCount', 'Integer');
  SIRegister_TXRTLNamedPipeServer(CL);
  SIRegister_TXRTLNamedPipeClient(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TXRTLNamedPipeOutputStream_R(Self: TXRTLNamedPipe; var T: TXRTLOutputStream);
begin T := Self.OutputStream; end;

(*----------------------------------------------------------------------------*)
procedure TXRTLNamedPipeInputStream_R(Self: TXRTLNamedPipe; var T: TXRTLInputStream);
begin T := Self.InputStream; end;

(*----------------------------------------------------------------------------*)
procedure TXRTLNamedPipeHandle_R(Self: TXRTLNamedPipe; var T: THandle);
begin T := Self.Handle; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TXRTLNamedPipeClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TXRTLNamedPipeClient) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TXRTLNamedPipeServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TXRTLNamedPipeServer) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TXRTLNamedPipe(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TXRTLNamedPipe) do
  begin
    RegisterConstructor(@TXRTLNamedPipe.Create, 'Create');
    RegisterPropertyHelper(@TXRTLNamedPipeHandle_R,nil,'Handle');
    RegisterPropertyHelper(@TXRTLNamedPipeInputStream_R,nil,'InputStream');
    RegisterPropertyHelper(@TXRTLNamedPipeOutputStream_R,nil,'OutputStream');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_xrtl_net_NamedPipe(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TXRTLNamedPipe(CL);
  RIRegister_TXRTLNamedPipeServer(CL);
  RIRegister_TXRTLNamedPipeClient(CL);
end;

 
 
{ TPSImport_xrtl_net_NamedPipe }
(*----------------------------------------------------------------------------*)
procedure TPSImport_xrtl_net_NamedPipe.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_xrtl_net_NamedPipe(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_xrtl_net_NamedPipe.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_xrtl_net_NamedPipe(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
