unit uPSI_PppLexer;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_PppLexer = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPppLexer(CL: TPSPascalCompiler);
procedure SIRegister_PppLexer(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TPppLexer(CL: TPSRuntimeClassImporter);
procedure RIRegister_PppLexer(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   JclStrHashMap
  ,PCharUtils
  ,PppLexer
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_PppLexer]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPppLexer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TPppLexer') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TPppLexer') do begin
    RegisterMethod('Constructor Create( AStream : TStream)');
      RegisterMethod('Procedure Free');
      RegisterMethod('Procedure Error( const AMsg : string)');
    RegisterMethod('Procedure NextTok');
    RegisterMethod('Procedure Reset');
    RegisterProperty('CurrTok', 'TPppToken', iptr);
    RegisterProperty('IsFirstToken', 'Boolean', iptr);
    RegisterProperty('PrevToken', 'TPppToken', iptr);
    RegisterProperty('TokenAsString', 'string', iptr);
    RegisterProperty('RawComment', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_PppLexer(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TPppToken', '( ptEof, ptComment, ptText, ptDefine, ptUndef, ptIf'
   +'def, ptIfndef, ptIfopt, ptInclude, ptElse, ptEndif, ptOtherDirective )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPppLexerError');
  SIRegister_TPppLexer(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TPppLexerRawComment_R(Self: TPppLexer; var T: string);
begin T := Self.RawComment; end;

(*----------------------------------------------------------------------------*)
procedure TPppLexerTokenAsString_R(Self: TPppLexer; var T: string);
begin T := Self.TokenAsString; end;

(*----------------------------------------------------------------------------*)
procedure TPppLexerPrevToken_R(Self: TPppLexer; var T: TPppToken);
begin T := Self.PrevToken; end;

(*----------------------------------------------------------------------------*)
procedure TPppLexerIsFirstToken_R(Self: TPppLexer; var T: Boolean);
begin T := Self.IsFirstToken; end;

(*----------------------------------------------------------------------------*)
procedure TPppLexerCurrTok_R(Self: TPppLexer; var T: TPppToken);
begin T := Self.CurrTok; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPppLexer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPppLexer) do begin
    RegisterConstructor(@TPppLexer.Create, 'Create');
    RegisterMethod(@TPppLexer.Destroy, 'Free');
    RegisterMethod(@TPppLexer.Error, 'Error');
    RegisterMethod(@TPppLexer.NextTok, 'NextTok');
    RegisterMethod(@TPppLexer.Reset, 'Reset');
    RegisterPropertyHelper(@TPppLexerCurrTok_R,nil,'CurrTok');
    RegisterPropertyHelper(@TPppLexerIsFirstToken_R,nil,'IsFirstToken');
    RegisterPropertyHelper(@TPppLexerPrevToken_R,nil,'PrevToken');
    RegisterPropertyHelper(@TPppLexerTokenAsString_R,nil,'TokenAsString');
    RegisterPropertyHelper(@TPppLexerRawComment_R,nil,'RawComment');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_PppLexer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EPppLexerError) do
  RIRegister_TPppLexer(CL);
end;

 
 
{ TPSImport_PppLexer }
(*----------------------------------------------------------------------------*)
procedure TPSImport_PppLexer.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_PppLexer(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_PppLexer.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_PppLexer(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
