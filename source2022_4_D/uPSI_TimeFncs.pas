unit uPSI_TimeFncs;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_TimeFncs = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TimeFncs(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TimeFncs_Routines(S: TPSExec);

procedure Register;

implementation


uses
   ib_externals
  ,ibase
  ,TimeFncs
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_TimeFncs]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TimeFncs(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Function AddMonth( ib_date : PISC_QUAD; var months_to_add : Integer) : PISC_QUAD');
 CL.AddDelphiFunction('Function AddYear( ib_date : PISC_QUAD; var years_to_add : Integer) : PISC_QUAD');
 CL.AddDelphiFunction('Function AgeInDays( ib_date, ib_date_reference : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function AgeInDaysThreshold( ib_date, ib_date_reference : PISC_QUAD; var Min, UseMin, Max, UseMax : Integer) : integer');
 CL.AddDelphiFunction('Function AgeInMonths( ib_date, ib_date_reference : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function AgeInMonthsThreshold( ib_date, ib_date_reference : PISC_QUAD; var Min, UseMin, Max, UseMax : Integer) : integer');
 CL.AddDelphiFunction('Function AgeInWeeks( ib_date, ib_date_reference : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function AgeInWeeksThreshold( ib_date, ib_date_reference : PISC_QUAD; var Min, UseMin, Max, UseMax : Integer) : integer');
 CL.AddDelphiFunction('Function CDOWLong( ib_date : PISC_QUAD) : PChar');
 CL.AddDelphiFunction('Function CDOWShort( ib_date : PISC_QUAD) : PChar');
 CL.AddDelphiFunction('Function CMonthLong( ib_date : PISC_QUAD) : PChar');
 CL.AddDelphiFunction('Function CMonthShort( ib_date : PISC_QUAD) : PChar');
 CL.AddDelphiFunction('Function DayOfMonth( ib_date : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function DayOfWeek( ib_date : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function DayOfYear( ib_date : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Procedure InternalWeekOfYear( ib_date : PISC_QUAD; var Week, Year : Integer)');
 CL.AddDelphiFunction('Function IsLeapYear( year : Integer) : integer');
 CL.AddDelphiFunction('Function MaxDate( ib_d1, ib_d2 : PISC_QUAD) : PISC_QUAD');
 CL.AddDelphiFunction('Function MinDate( ib_d1, ib_d2 : PISC_QUAD) : PISC_QUAD');
 CL.AddDelphiFunction('Function Month( ib_date : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function Quarter( ib_date : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function StripDate( ib_date : PISC_QUAD) : PISC_QUAD');
 CL.AddDelphiFunction('Function StripTime( ib_date : PISC_QUAD) : PISC_QUAD');
 CL.AddDelphiFunction('Function WeekOfYear( ib_date : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function WOY( ib_date : PISC_QUAD) : PChar');
 CL.AddDelphiFunction('Function Year( ib_date : PISC_QUAD) : integer');
 CL.AddDelphiFunction('Function YearOfYear( ib_date : PISC_QUAD) : integer');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TimeFncs_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@AddMonth, 'AddMonth', CdCdecl);
 S.RegisterDelphiFunction(@AddYear, 'AddYear', CdCdecl);
 S.RegisterDelphiFunction(@AgeInDays, 'AgeInDays', CdCdecl);
 S.RegisterDelphiFunction(@AgeInDaysThreshold, 'AgeInDaysThreshold', CdCdecl);
 S.RegisterDelphiFunction(@AgeInMonths, 'AgeInMonths', CdCdecl);
 S.RegisterDelphiFunction(@AgeInMonthsThreshold, 'AgeInMonthsThreshold', CdCdecl);
 S.RegisterDelphiFunction(@AgeInWeeks, 'AgeInWeeks', CdCdecl);
 S.RegisterDelphiFunction(@AgeInWeeksThreshold, 'AgeInWeeksThreshold', CdCdecl);
 S.RegisterDelphiFunction(@CDOWLong, 'CDOWLong', CdCdecl);
 S.RegisterDelphiFunction(@CDOWShort, 'CDOWShort', CdCdecl);
 S.RegisterDelphiFunction(@CMonthLong, 'CMonthLong', CdCdecl);
 S.RegisterDelphiFunction(@CMonthShort, 'CMonthShort', CdCdecl);
 S.RegisterDelphiFunction(@DayOfMonth, 'DayOfMonth', CdCdecl);
 S.RegisterDelphiFunction(@DayOfWeek, 'DayOfWeek', CdCdecl);
 S.RegisterDelphiFunction(@DayOfYear, 'DayOfYear', CdCdecl);
 S.RegisterDelphiFunction(@InternalWeekOfYear, 'InternalWeekOfYear', cdRegister);
 S.RegisterDelphiFunction(@IsLeapYear, 'IsLeapYear', CdCdecl);
 S.RegisterDelphiFunction(@MaxDate, 'MaxDate', CdCdecl);
 S.RegisterDelphiFunction(@MinDate, 'MinDate', CdCdecl);
 S.RegisterDelphiFunction(@Month, 'Month', CdCdecl);
 S.RegisterDelphiFunction(@Quarter, 'Quarter', CdCdecl);
 S.RegisterDelphiFunction(@StripDate, 'StripDate', CdCdecl);
 S.RegisterDelphiFunction(@StripTime, 'StripTime', CdCdecl);
 S.RegisterDelphiFunction(@WeekOfYear, 'WeekOfYear', CdCdecl);
 S.RegisterDelphiFunction(@WOY, 'WOY', CdCdecl);
 S.RegisterDelphiFunction(@Year, 'Year', CdCdecl);
 S.RegisterDelphiFunction(@YearOfYear, 'YearOfYear', CdCdecl);
end;

 
 
{ TPSImport_TimeFncs }
(*----------------------------------------------------------------------------*)
procedure TPSImport_TimeFncs.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_TimeFncs(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_TimeFncs.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_TimeFncs(ri);
  RIRegister_TimeFncs_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
