unit uPSI_ADODB;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ADODB = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TADOBlobStream(CL: TPSPascalCompiler);
procedure SIRegister_TADOStoredProc(CL: TPSPascalCompiler);
procedure SIRegister_TADOQuery(CL: TPSPascalCompiler);
procedure SIRegister_TADOTable(CL: TPSPascalCompiler);
procedure SIRegister_TADODataSet(CL: TPSPascalCompiler);
procedure SIRegister_TCustomADODataSet(CL: TPSPascalCompiler);
procedure SIRegister_TADOCommand(CL: TPSPascalCompiler);
procedure SIRegister_TParameters(CL: TPSPascalCompiler);
procedure SIRegister_TParameter(CL: TPSPascalCompiler);
procedure SIRegister_TRDSConnection(CL: TPSPascalCompiler);
procedure SIRegister_TADOConnection(CL: TPSPascalCompiler);
procedure SIRegister_ADODB(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_ADODB_Routines(S: TPSExec);
procedure RIRegister_TADOBlobStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TADOStoredProc(CL: TPSRuntimeClassImporter);
procedure RIRegister_TADOQuery(CL: TPSRuntimeClassImporter);
procedure RIRegister_TADOTable(CL: TPSRuntimeClassImporter);
procedure RIRegister_TADODataSet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomADODataSet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TADOCommand(CL: TPSRuntimeClassImporter);
procedure RIRegister_TParameters(CL: TPSRuntimeClassImporter);
procedure RIRegister_TParameter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRDSConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TADOConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADODB(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Variants
  ,ActiveX
  ,TypInfo
  ,DB
  ,OleDB
  ,ADOInt
  ,WideStrings
  ,ADODB
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ADODB]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TADOBlobStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMemoryStream', 'TADOBlobStream') do
  with CL.AddClassN(CL.FindClass('TMemoryStream'),'TADOBlobStream') do
  begin
    RegisterMethod('Constructor Create( Field : TBlobField; Mode : TBlobStreamMode)');
    RegisterMethod('Procedure Truncate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TADOStoredProc(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomADODataSet', 'TADOStoredProc') do
  with CL.AddClassN(CL.FindClass('TCustomADODataSet'),'TADOStoredProc') do
  begin
    RegisterMethod('Procedure ExecProc');
    RegisterProperty('ProcedureName', 'WideString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TADOQuery(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomADODataSet', 'TADOQuery') do
  with CL.AddClassN(CL.FindClass('TCustomADODataSet'),'TADOQuery') do
  begin
    RegisterMethod('Function ExecSQL : Integer');
    RegisterProperty('RowsAffected', 'Integer', iptr);
    RegisterProperty('SQL', 'TWideStrings', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TADOTable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomADODataSet', 'TADOTable') do
  with CL.AddClassN(CL.FindClass('TCustomADODataSet'),'TADOTable') do
  begin
    RegisterMethod('Procedure GetIndexNames( List : TStrings)');
    RegisterProperty('MasterSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('TableDirect', 'Boolean', iptrw);
    RegisterProperty('TableName', 'WideString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TADODataSet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomADODataSet', 'TADODataSet') do
  with CL.AddClassN(CL.FindClass('TCustomADODataSet'),'TADODataSet') do
  begin
    RegisterMethod('Procedure CreateDataSet');
    RegisterMethod('Procedure GetIndexNames( List : TStrings)');
    RegisterProperty('RDSConnection', 'TRDSConnection', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomADODataSet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWideDataSet', 'TCustomADODataSet') do
  with CL.AddClassN(CL.FindClass('TWideDataSet'),'TCustomADODataSet') do
  begin
    RegisterMethod('Procedure CancelBatch( AffectRecords : TAffectRecords)');
    RegisterMethod('Procedure CancelUpdates');
    RegisterMethod('Procedure Clone( Source : TCustomADODataSet; LockType : TADOLockType)');
    RegisterMethod('Procedure DeleteRecords( AffectRecords : TAffectRecords)');
    RegisterProperty('EnableBCD', 'Boolean', iptrw);
    RegisterMethod('Procedure FilterOnBookmarks( Bookmarks : array of const)');
    RegisterMethod('Procedure LoadFromFile( const FileName : WideString)');
    RegisterMethod('Function NextRecordset( var RecordsAffected : Integer) : _Recordset');
    RegisterMethod('Procedure Requery( Options : TExecuteOptions)');
    RegisterMethod('Procedure SaveToFile( const FileName : WideString; Format : TPersistFormat)');
    RegisterMethod('Function Seek( const KeyValues : Variant; SeekOption : TSeekOption) : Boolean');
    RegisterMethod('Function Supports( CursorOptions : TCursorOptions) : Boolean');
    RegisterMethod('Procedure UpdateBatch( AffectRecords : TAffectRecords)');
    RegisterProperty('DesignerData', 'string', iptrw);
    RegisterProperty('IndexName', 'WideString', iptrw);
    RegisterProperty('IndexFieldCount', 'Integer', iptr);
    RegisterProperty('IndexFields', 'TField Integer', iptrw);
    RegisterProperty('FilterGroup', 'TFilterGroup', iptrw);
    RegisterProperty('Properties', 'Properties', iptr);
    RegisterProperty('Recordset', '_Recordset', iptrw);
    RegisterProperty('RecordsetState', 'TObjectStates', iptr);
    RegisterProperty('RecordStatus', 'TRecordStatusSet', iptr);
    RegisterProperty('Sort', 'WideString', iptrw);
    RegisterProperty('MasterDataLink', 'TMasterDataLink', iptr);
    RegisterProperty('Command', 'TADOCommand', iptr);
    RegisterProperty('CommandText', 'WideString', iptrw);
    RegisterProperty('CommandTimeout', 'Integer', iptrw);
    RegisterProperty('CommandType', 'TCommandType', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('IndexDefs', 'TIndexDefs', iptrw);
    RegisterProperty('IndexFieldNames', 'string', iptrw);
    RegisterProperty('MasterFields', 'WideString', iptrw);
    RegisterProperty('ParamCheck', 'Boolean', iptrw);
    RegisterProperty('Parameters', 'TParameters', iptrw);
    RegisterProperty('Prepared', 'Boolean', iptrw);
    RegisterProperty('StoreDefs', 'Boolean', iptrw);
    RegisterProperty('CacheSize', 'Integer', iptrw);
    RegisterProperty('Connection', 'TADOConnection', iptrw);
    RegisterProperty('ConnectionString', 'WideString', iptrw);
    RegisterProperty('CursorLocation', 'TCursorLocation', iptrw);
    RegisterProperty('CursorType', 'TCursorType', iptrw);
    RegisterProperty('ExecuteOptions', 'TExecuteOptions', iptrw);
    RegisterProperty('LockType', 'TADOLockType', iptrw);
    RegisterProperty('MarshalOptions', 'TMarshalOption', iptrw);
    RegisterProperty('MaxRecords', 'Integer', iptrw);
    RegisterProperty('OnWillChangeField', 'TWillChangeFieldEvent', iptrw);
    RegisterProperty('OnFieldChangeComplete', 'TFieldChangeCompleteEvent', iptrw);
    RegisterProperty('OnWillChangeRecord', 'TWillChangeRecordEvent', iptrw);
    RegisterProperty('OnRecordChangeComplete', 'TRecordChangeCompleteEvent', iptrw);
    RegisterProperty('OnWillChangeRecordset', 'TRecordsetReasonEvent', iptrw);
    RegisterProperty('OnRecordsetChangeComplete', 'TRecordsetErrorEvent', iptrw);
    RegisterProperty('OnWillMove', 'TRecordsetReasonEvent', iptrw);
    RegisterProperty('OnMoveComplete', 'TRecordsetErrorEvent', iptrw);
    RegisterProperty('OnEndOfRecordset', 'TEndOfRecordsetEvent', iptrw);
    RegisterProperty('OnFetchComplete', 'TRecordsetEvent', iptrw);
    RegisterProperty('OnFetchProgress', 'TFetchProgressEvent', iptrw);
    RegisterProperty('OnRecordsetCreate', 'TRecordsetCreate', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TADOCommand(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TADOCommand') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TADOCommand') do
  begin
    RegisterMethod('Procedure Cancel');
    RegisterMethod('Function Execute9 : _Recordset;');
    RegisterMethod('Function Execute10( const Parameters : OleVariant) : _Recordset;');
    RegisterMethod('Function Execute11( var RecordsAffected : Integer; const Parameters : OleVariant) : _Recordset;');
    RegisterProperty('CommandObject', '_Command', iptr);
    RegisterProperty('Properties', 'Properties', iptr);
    RegisterProperty('States', 'TObjectStates', iptr);
    RegisterProperty('CommandText', 'WideString', iptrw);
    RegisterProperty('CommandTimeout', 'Integer', iptrw);
    RegisterProperty('CommandType', 'TCommandType', iptrw);
    RegisterProperty('Connection', 'TADOConnection', iptrw);
    RegisterProperty('ConnectionString', 'WideString', iptrw);
    RegisterProperty('ExecuteOptions', 'TExecuteOptions', iptrw);
    RegisterProperty('Prepared', 'WordBool', iptrw);
    RegisterProperty('Parameters', 'TParameters', iptrw);
    RegisterProperty('ParamCheck', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TParameters(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOwnedCollection', 'TParameters') do
  with CL.AddClassN(CL.FindClass('TOwnedCollection'),'TParameters') do
  begin
    RegisterMethod('Function AddParameter : TParameter');
    RegisterMethod('Procedure AssignValues( Value : TParameters)');
    RegisterMethod('Function CreateParameter( const Name : WideString; DataType : TDataType; Direction : TParameterDirection; Size : Integer; Value : OleVariant) : TParameter');
    RegisterMethod('Function FindParam( const Value : WideString) : TParameter');
    RegisterMethod('Procedure GetParamList( List : TList; const ParamNames : WideString)');
    RegisterMethod('Function IsEqual( Value : TParameters) : Boolean');
    RegisterMethod('Function ParamByName( const Value : WideString) : TParameter');
    RegisterMethod('Function ParseSQL( SQL : WideString; DoCreate : Boolean) : WideString');
    RegisterMethod('Function Refresh : Boolean');
    RegisterProperty('ParamValues', 'Variant WideString', iptrw);
    RegisterProperty('Command', 'TADOCommand', iptr);
    RegisterProperty('Items', 'TParameter Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterProperty('ParameterCollection', 'Parameters', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TParameter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TParameter') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TParameter') do
  begin
    RegisterMethod('Procedure AppendChunk( Val : OleVariant)');
    RegisterMethod('Procedure LoadFromFile( const FileName : string; DataType : TDataType)');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream; DataType : TDataType)');
    RegisterProperty('ParameterObject', '_Parameter', iptr);
    RegisterProperty('Parameters', 'TParameters', iptr);
    RegisterProperty('Properties', 'Properties', iptr);
    RegisterProperty('Name', 'WideString', iptrw);
    RegisterProperty('Attributes', 'TParameterAttributes', iptrw);
    RegisterProperty('DataType', 'TDataType', iptrw);
    RegisterProperty('Direction', 'TParameterDirection', iptrw);
    RegisterProperty('NumericScale', 'Byte', iptrw);
    RegisterProperty('Precision', 'Byte', iptrw);
    RegisterProperty('Size', 'Integer', iptrw);
    RegisterProperty('Value', 'Variant', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRDSConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomConnection', 'TRDSConnection') do
  with CL.AddClassN(CL.FindClass('TCustomConnection'),'TRDSConnection') do
  begin
    RegisterMethod('Function GetRecordset( const CommandText : WideString; ConnectionString : WideString) : _Recordset');
    RegisterProperty('AppServer', 'OleVariant', iptr);
    RegisterProperty('DataSpaceObject', 'DataSpace', iptr);
    RegisterProperty('ComputerName', 'WideString', iptrw);
    RegisterProperty('InternetTimeout', 'Integer', iptrw);
    RegisterProperty('ServerName', 'WideString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TADOConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomConnection', 'TADOConnection') do
  with CL.AddClassN(CL.FindClass('TCustomConnection'),'TADOConnection') do
  begin
    RegisterMethod('Function BeginTrans : Integer');
    RegisterMethod('Procedure Cancel');
    RegisterMethod('Procedure CommitTrans');
    RegisterMethod('Procedure Execute0( const CommandText : WideString; var RecordsAffected : Integer; const ExecuteOptions : TExecuteOptions);');
    RegisterMethod('Function Execute1( const CommandText : WideString; const CommandType : TCommandType; const ExecuteOptions : TExecuteOptions) : _Recordset;');
    RegisterMethod('Procedure GetProcedureNames2( List : TWideStrings);');
    RegisterMethod('Procedure GetProcedureNames3( List : TStrings);');
    RegisterMethod('Procedure GetFieldNames4( const TableName : WideString; List : TWideStrings);');
    RegisterMethod('Procedure GetFieldNames5( const TableName : string; List : TStrings);');
    RegisterMethod('Procedure GetTableNames6( List : TWideStrings; SystemTables : Boolean);');
    RegisterMethod('Procedure GetTableNames7( List : TStrings; SystemTables : Boolean);');
    RegisterMethod('Procedure Open8( const UserID : WideString; const Password : WideString);');
    RegisterMethod('Procedure OpenSchema( const Schema : TSchemaInfo; const Restrictions : OleVariant; const SchemaID : OleVariant; DataSet : TADODataSet)');
    RegisterMethod('Procedure RollbackTrans');
    RegisterProperty('ConnectionObject', '_Connection', iptrw);
    RegisterProperty('CommandCount', 'Integer', iptr);
    RegisterProperty('Commands', 'TADOCommand Integer', iptr);
    RegisterProperty('DataSets', 'TCustomADODataSet Integer', iptr);
    RegisterProperty('Errors', 'Errors', iptr);
    RegisterProperty('InTransaction', 'Boolean', iptr);
    RegisterProperty('Properties', 'Properties', iptr);
    RegisterProperty('State', 'TObjectStates', iptr);
    RegisterProperty('Version', 'WideString', iptr);
    RegisterProperty('Attributes', 'TXactAttributes', iptrw);
    RegisterProperty('CommandTimeout', 'Integer', iptrw);
    RegisterProperty('ConnectionString', 'WideString', iptrw);
    RegisterProperty('ConnectionTimeout', 'Integer', iptrw);
    RegisterProperty('ConnectOptions', 'TConnectOption', iptrw);
    RegisterProperty('CursorLocation', 'TCursorLocation', iptrw);
    RegisterProperty('DefaultDatabase', 'WideString', iptrw);
    RegisterProperty('IsolationLevel', 'TIsolationLevel', iptrw);
    RegisterProperty('KeepConnection', 'Boolean', iptrw);
    RegisterProperty('Mode', 'TConnectMode', iptrw);
    RegisterProperty('Provider', 'WideString', iptrw);
    RegisterProperty('OnDisconnect', 'TDisconnectEvent', iptrw);
    RegisterProperty('OnInfoMessage', 'TInfoMessageEvent', iptrw);
    RegisterProperty('OnBeginTransComplete', 'TBeginTransCompleteEvent', iptrw);
    RegisterProperty('OnCommitTransComplete', 'TConnectErrorEvent', iptrw);
    RegisterProperty('OnRollbackTransComplete', 'TConnectErrorEvent', iptrw);
    RegisterProperty('OnConnectComplete', 'TConnectErrorEvent', iptrw);
    RegisterProperty('OnWillConnect', 'TWillConnectEvent', iptrw);
    RegisterProperty('OnExecuteComplete', 'TExecuteCompleteEvent', iptrw);
    RegisterProperty('OnWillExecute', 'TWillExecuteEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADODB(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TADOCommand');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomADODataSet');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TADODataSet');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TParameters');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TADOConnection');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EADOError');
  CL.AddTypeS('TConnectMode', '( cmUnknown, cmRead, cmWrite, cmReadWrite, cmSha'
   +'reDenyRead, cmShareDenyWrite, cmShareExclusive, cmShareDenyNone )');
  CL.AddTypeS('TConnectOption', '( coConnectUnspecified, coAsyncConnect )');
  CL.AddTypeS('TCursorLocation', '( clUseServer, clUseClient )');
  CL.AddTypeS('TCursorType', '( ctUnspecified, ctOpenForwardOnly, ctKeyset, ctD'
   +'ynamic, ctStatic )');
  CL.AddTypeS('TEventStatus', '( esOK, esErrorsOccured, esCantDeny, esCancel, e'
   +'sUnwantedEvent )');
  CL.AddTypeS('TExecuteOption', '( eoAsyncExecute, eoAsyncFetch, eoAsyncFetchNo'
   +'nBlocking, eoExecuteNoRecords )');
  CL.AddTypeS('TExecuteOptions', 'set of TExecuteOption');
  CL.AddTypeS('TIsolationLevel', '( ilUnspecified, ilChaos, ilReadUncommitted, '
   +'ilBrowse, ilCursorStability, ilReadCommitted, ilRepeatableRead, ilSerializ'
   +'able, ilIsolated )');
  CL.AddTypeS('TADOLockType', '( ltUnspecified, ltReadOnly, ltPessimistic, ltOp'
   +'timistic, ltBatchOptimistic )');
  CL.AddTypeS('TObjectState', '( stClosed, stOpen, stConnecting, stExecuting, s'
   +'tFetching )');
  CL.AddTypeS('TObjectStates', 'set of TObjectState');
  CL.AddTypeS('TSchemaInfo', '( siAsserts, siCatalogs, siCharacterSets, siColla'
   +'tions, siColumns, siCheckConstraints, siConstraintColumnUsage, siConstrain'
   +'tTableUsage, siKeyColumnUsage, siReferentialConstraints, siTableConstraint'
   +'s, siColumnsDomainUsage, siIndexes, siColumnPrivileges, siTablePrivileges,'
   +' siUsagePrivileges, siProcedures, siSchemata, siSQLLanguages, siStatistics'
   +', siTables, siTranslations, siProviderTypes, siViews, siViewColumnUsage, s'
   +'iViewTableUsage, siProcedureParameters, siForeignKeys, siPrimaryKeys, siPr'
   +'ocedureColumns, siDBInfoKeywords, siDBInfoLiterals, siCubes, siDimensions,'
   +' siHierarchies, siLevels, siMeasures, siProperties, siMembers, siProviderS'
   +'pecific )');
  CL.AddTypeS('TXactAttribute', '( xaCommitRetaining, xaAbortRetaining )');
  CL.AddTypeS('TXactAttributes', 'set of TXactAttribute');
  CL.AddTypeS('TBeginTransCompleteEvent', 'Procedure ( Connection : TADOConnect'
   +'ion; TransactionLevel : Integer; const Error : Error; var EventStatus : TE'
   +'ventStatus)');
  CL.AddTypeS('TCommandType', '( cmdUnknown, cmdText, cmdTable, cmdStoredProc, '
   +'cmdFile, cmdTableDirect )');
  CL.AddTypeS('TConnectErrorEvent', 'Procedure ( Connection : TADOConnection; c'
   +'onst Error : Error; var EventStatus : TEventStatus)');
  CL.AddTypeS('TDisconnectEvent', 'Procedure ( Connection : TADOConnection; var'
   +' EventStatus : TEventStatus)');
  CL.AddTypeS('TExecuteCompleteEvent', 'Procedure ( Connection : TADOConnection'
   +'; RecordsAffected : Integer; const Error : Error; var EventStatus : TEvent'
   +'Status; const Command : _Command; const Recordset : _Recordset)');
  CL.AddTypeS('TWillConnectEvent', 'Procedure ( Connection : TADOConnection; va'
   +'r ConnectionString, UserID, Password : WideString; var ConnectOptions : TC'
   +'onnectOption; var EventStatus : TEventStatus)');
  CL.AddTypeS('TWillExecuteEvent', 'Procedure ( Connection : TADOConnection; va'
   +'r CommandText : WideString; var CursorType : TCursorType; var LockType : T'
   +'ADOLockType; var CommandType : TCommandType; var ExecuteOptions : TExecute'
   +'Options; var EventStatus : TEventStatus; const Command : _Command; const R'
   +'ecordset : _Recordset)');
  CL.AddTypeS('TInfoMessageEvent', 'Procedure ( Connection : TADOConnection; co'
   +'nst Error : Error; var EventStatus : TEventStatus)');
  SIRegister_TADOConnection(CL);
  SIRegister_TRDSConnection(CL);
  CL.AddTypeS('TDataType', 'TFieldType');
  CL.AddTypeS('TParameterAttribute', '( paSigned, paNullable, paLong )');
  CL.AddTypeS('TParameterAttributes', 'set of TParameterAttribute');
  CL.AddTypeS('TParameterDirection', '( pdUnknown, pdInput, pdOutput, pdInputOu'
   +'tput, pdReturnValue )');
  SIRegister_TParameter(CL);
  CL.AddTypeS('TPropList', 'array of PPropInfo');
  SIRegister_TParameters(CL);
  SIRegister_TADOCommand(CL);
  CL.AddTypeS('TCursorOption', '( coHoldRecords, coMovePrevious, coAddNew, coDe'
   +'lete, coUpdate, coBookmark, coApproxPosition, coUpdateBatch, coResync, coN'
   +'otify, coFind, coSeek, coIndex )');
  CL.AddTypeS('TCursorOptions', 'set of TCursorOption');
  CL.AddTypeS('TEventReason', '( erAddNew, erDelete, erUpdate, erUndoUpdate, er'
   +'UndoAddNew, erUndoDelete, erRequery, erResynch, erClose, erMove, erFirstCh'
   +'ange, erMoveFirst, erMoveNext, erMovePrevious, erMoveLast )');
  CL.AddTypeS('TFilterGroup', '( fgUnassigned, fgNone, fgPendingRecords, fgAffe'
   +'ctedRecords, fgFetchedRecords, fgPredicate, fgConflictingRecords )');
  CL.AddTypeS('TMarshalOption', '( moMarshalAll, moMarshalModifiedOnly )');
  CL.AddTypeS('TRecordStatus', '( rsOK, rsNew, rsModified, rsDeleted, rsUnmodif'
   +'ied, rsInvalid, rsMultipleChanges, rsPendingChanges, rsCanceled, rsCantRel'
   +'ease, rsConcurrencyViolation, rsIntegrityViolation, rsMaxChangesExceeded, '
   +'rsObjectOpen, rsOutOfMemory, rsPermissionDenied, rsSchemaViolation, rsDBDe'
   +'leted )');
  CL.AddTypeS('TRecordStatusSet', 'set of TRecordStatus');
  CL.AddTypeS('TAffectRecords', '( arCurrent, arFiltered, arAll, arAllChapters '
   +')');
  CL.AddTypeS('TPersistFormat', '( pfADTG, pfXML )');
  CL.AddTypeS('TSeekOption', '( soFirstEQ, soLastEQ, soAfterEQ, soAfter, soBefo'
   +'reEQ, soBefore )');
  CL.AddTypeS('PVariantList', '^TVariantList // will not work');
  CL.AddTypeS('TWillChangeFieldEvent', 'Procedure ( DataSet : TCustomADODataSet'
   +'; const FieldCount : Integer; const Fields : OleVariant; var EventStatus :'
   +' TEventStatus)');
  CL.AddTypeS('TFieldChangeCompleteEvent', 'Procedure ( DataSet : TCustomADODat'
   +'aSet; const FieldCount : Integer; const Fields : OleVariant; const Error :'
   +' Error; var EventStatus : TEventStatus)');
  CL.AddTypeS('TWillChangeRecordEvent', 'Procedure ( DataSet : TCustomADODataSe'
   +'t; const Reason : TEventReason; const RecordCount : Integer; var EventStat'
   +'us : TEventStatus)');
  CL.AddTypeS('TRecordChangeCompleteEvent', 'Procedure ( DataSet : TCustomADODa'
   +'taSet; const Reason : TEventReason; const RecordCount : Integer; const Err'
   +'or : Error; var EventStatus : TEventStatus)');
  CL.AddTypeS('TEndOfRecordsetEvent', 'Procedure ( DataSet : TCustomADODataSet;'
   +' var MoreData : WordBool; var EventStatus : TEventStatus)');
  CL.AddTypeS('TFetchProgressEvent', 'Procedure ( DataSet : TCustomADODataSet; '
   +'Progress, MaxProgress : Integer; var EventStatus : TEventStatus)');
  CL.AddTypeS('TRecordsetErrorEvent', 'Procedure ( DataSet : TCustomADODataSet;'
   +' const Reason : TEventReason; const Error : Error; var EventStatus : TEven'
   +'tStatus)');
  CL.AddTypeS('TRecordsetReasonEvent', 'Procedure ( DataSet : TCustomADODataSet'
   +'; const Reason : TEventReason; var EventStatus : TEventStatus)');
  CL.AddTypeS('TRecordsetEvent', 'Procedure ( DataSet : TCustomADODataSet; cons'
   +'t Error : Error; var EventStatus : TEventStatus)');
  CL.AddTypeS('TRecordsetCreate', 'Procedure ( DataSet : TCustomADODataSet; con'
   +'st Recordset : _Recordset)');
  SIRegister_TCustomADODataSet(CL);
  SIRegister_TADODataSet(CL);
  SIRegister_TADOTable(CL);
  SIRegister_TADOQuery(CL);
  SIRegister_TADOStoredProc(CL);
  SIRegister_TADOBlobStream(CL);
 CL.AddDelphiFunction('Procedure CreateUDLFile( const FileName, ProviderName, DataSourceName : WideString)');
 CL.AddDelphiFunction('Function DataLinkDir : string');
 CL.AddDelphiFunction('Procedure GetProviderNames13( Names : TWideStrings);');
 CL.AddDelphiFunction('Procedure GetProviderNames14( Names : TStrings);');
 CL.AddDelphiFunction('Function PromptDataSource( ParentHandle : THandle; InitialString : WideString) : WideString');
 CL.AddDelphiFunction('Function PromptDataLinkFile( ParentHandle : THandle; InitialFile : WideString) : WideString');
 CL.AddDelphiFunction('Function GetDataLinkFiles15( FileNames : TWideStrings; Directory : string) : Integer;');
 CL.AddDelphiFunction('Function GetDataLinkFiles16( FileNames : TStrings; Directory : string) : Integer;');
 
 CL.AddDelphiFunction('Function CreateADOObject( const ClassID : TGUID) : IUnknown');
 CL.AddDelphiFunction('Function ADOTypeToFieldType( const ADOType : DataTypeEnum; EnableBCD : Boolean) : TFieldType');
 CL.AddDelphiFunction('Function FieldTypeToADOType( const FieldType : TFieldType) : DataTypeEnum');
 CL.AddDelphiFunction('Function StringToVarArray( const Value : string) : OleVariant');
 CL.AddDelphiFunction('Function VarDataSize( const Value : OleVariant) : Integer');
 CL.AddDelphiFunction('Function OleEnumToOrd( OleEnumArray : array of TOleEnum; Value : TOleEnum) : Integer');
 CL.AddDelphiFunction('Function GetStates( State : Integer) : TObjectStates');
 CL.AddDelphiFunction('Function ExecuteOptionsToOrd( ExecuteOptions : TExecuteOptions) : Integer');
 CL.AddDelphiFunction('Function OrdToExecuteOptions( Options : Integer) : TExecuteOptions');
 CL.AddDelphiFunction('Function ExtractFieldName( const Fields : WideString; var Pos : Integer) : WideString');
 CL.AddDelphiFunction('Function GetFilterStr( Field : TField; Value : Variant; Partial : Boolean) : WideString');
 CL.AddDelphiFunction('Function FieldListCheckSum( DataSet : TDataset) : Integer');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function GetDataLinkFiles16_P( FileNames : TStrings; Directory : string) : Integer;
Begin Result := ADODB.GetDataLinkFiles(FileNames, Directory); END;

(*----------------------------------------------------------------------------*)
Function GetDataLinkFiles15_P( FileNames : TWideStrings; Directory : string) : Integer;
Begin Result := ADODB.GetDataLinkFiles(FileNames, Directory); END;

(*----------------------------------------------------------------------------*)
Procedure GetProviderNames14_P( Names : TStrings);
Begin ADODB.GetProviderNames(Names); END;

(*----------------------------------------------------------------------------*)
Procedure GetProviderNames13_P( Names : TWideStrings);
Begin ADODB.GetProviderNames(Names); END;

(*----------------------------------------------------------------------------*)
procedure TADOStoredProcProcedureName_W(Self: TADOStoredProc; const T: WideString);
begin Self.ProcedureName := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOStoredProcProcedureName_R(Self: TADOStoredProc; var T: WideString);
begin T := Self.ProcedureName; end;

(*----------------------------------------------------------------------------*)
procedure TADOQuerySQL_W(Self: TADOQuery; const T: TWideStrings);
begin Self.SQL := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOQuerySQL_R(Self: TADOQuery; var T: TWideStrings);
begin T := Self.SQL; end;

(*----------------------------------------------------------------------------*)
procedure TADOQueryRowsAffected_R(Self: TADOQuery; var T: Integer);
begin T := Self.RowsAffected; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableTableName_W(Self: TADOTable; const T: WideString);
begin Self.TableName := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableTableName_R(Self: TADOTable; var T: WideString);
begin T := Self.TableName; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableTableDirect_W(Self: TADOTable; const T: Boolean);
begin Self.TableDirect := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableTableDirect_R(Self: TADOTable; var T: Boolean);
begin T := Self.TableDirect; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableReadOnly_W(Self: TADOTable; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableReadOnly_R(Self: TADOTable; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableMasterSource_W(Self: TADOTable; const T: TDataSource);
begin Self.MasterSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOTableMasterSource_R(Self: TADOTable; var T: TDataSource);
begin T := Self.MasterSource; end;

(*----------------------------------------------------------------------------*)
procedure TADODataSetRDSConnection_W(Self: TADODataSet; const T: TRDSConnection);
begin Self.RDSConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TADODataSetRDSConnection_R(Self: TADODataSet; var T: TRDSConnection);
begin T := Self.RDSConnection; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnRecordsetCreate_W(Self: TCustomADODataSet; const T: TRecordsetCreate);
begin Self.OnRecordsetCreate := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnRecordsetCreate_R(Self: TCustomADODataSet; var T: TRecordsetCreate);
begin T := Self.OnRecordsetCreate; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnFetchProgress_W(Self: TCustomADODataSet; const T: TFetchProgressEvent);
begin Self.OnFetchProgress := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnFetchProgress_R(Self: TCustomADODataSet; var T: TFetchProgressEvent);
begin T := Self.OnFetchProgress; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnFetchComplete_W(Self: TCustomADODataSet; const T: TRecordsetEvent);
begin Self.OnFetchComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnFetchComplete_R(Self: TCustomADODataSet; var T: TRecordsetEvent);
begin T := Self.OnFetchComplete; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnEndOfRecordset_W(Self: TCustomADODataSet; const T: TEndOfRecordsetEvent);
begin Self.OnEndOfRecordset := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnEndOfRecordset_R(Self: TCustomADODataSet; var T: TEndOfRecordsetEvent);
begin T := Self.OnEndOfRecordset; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnMoveComplete_W(Self: TCustomADODataSet; const T: TRecordsetErrorEvent);
begin Self.OnMoveComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnMoveComplete_R(Self: TCustomADODataSet; var T: TRecordsetErrorEvent);
begin T := Self.OnMoveComplete; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillMove_W(Self: TCustomADODataSet; const T: TRecordsetReasonEvent);
begin Self.OnWillMove := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillMove_R(Self: TCustomADODataSet; var T: TRecordsetReasonEvent);
begin T := Self.OnWillMove; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnRecordsetChangeComplete_W(Self: TCustomADODataSet; const T: TRecordsetErrorEvent);
begin Self.OnRecordsetChangeComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnRecordsetChangeComplete_R(Self: TCustomADODataSet; var T: TRecordsetErrorEvent);
begin T := Self.OnRecordsetChangeComplete; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillChangeRecordset_W(Self: TCustomADODataSet; const T: TRecordsetReasonEvent);
begin Self.OnWillChangeRecordset := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillChangeRecordset_R(Self: TCustomADODataSet; var T: TRecordsetReasonEvent);
begin T := Self.OnWillChangeRecordset; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnRecordChangeComplete_W(Self: TCustomADODataSet; const T: TRecordChangeCompleteEvent);
begin Self.OnRecordChangeComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnRecordChangeComplete_R(Self: TCustomADODataSet; var T: TRecordChangeCompleteEvent);
begin T := Self.OnRecordChangeComplete; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillChangeRecord_W(Self: TCustomADODataSet; const T: TWillChangeRecordEvent);
begin Self.OnWillChangeRecord := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillChangeRecord_R(Self: TCustomADODataSet; var T: TWillChangeRecordEvent);
begin T := Self.OnWillChangeRecord; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnFieldChangeComplete_W(Self: TCustomADODataSet; const T: TFieldChangeCompleteEvent);
begin Self.OnFieldChangeComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnFieldChangeComplete_R(Self: TCustomADODataSet; var T: TFieldChangeCompleteEvent);
begin T := Self.OnFieldChangeComplete; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillChangeField_W(Self: TCustomADODataSet; const T: TWillChangeFieldEvent);
begin Self.OnWillChangeField := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetOnWillChangeField_R(Self: TCustomADODataSet; var T: TWillChangeFieldEvent);
begin T := Self.OnWillChangeField; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetMaxRecords_W(Self: TCustomADODataSet; const T: Integer);
begin Self.MaxRecords := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetMaxRecords_R(Self: TCustomADODataSet; var T: Integer);
begin T := Self.MaxRecords; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetMarshalOptions_W(Self: TCustomADODataSet; const T: TMarshalOption);
begin Self.MarshalOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetMarshalOptions_R(Self: TCustomADODataSet; var T: TMarshalOption);
begin T := Self.MarshalOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetLockType_W(Self: TCustomADODataSet; const T: TADOLockType);
begin Self.LockType := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetLockType_R(Self: TCustomADODataSet; var T: TADOLockType);
begin T := Self.LockType; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetExecuteOptions_W(Self: TCustomADODataSet; const T: TExecuteOptions);
begin Self.ExecuteOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetExecuteOptions_R(Self: TCustomADODataSet; var T: TExecuteOptions);
begin T := Self.ExecuteOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCursorType_W(Self: TCustomADODataSet; const T: TCursorType);
begin Self.CursorType := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCursorType_R(Self: TCustomADODataSet; var T: TCursorType);
begin T := Self.CursorType; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCursorLocation_W(Self: TCustomADODataSet; const T: TCursorLocation);
begin Self.CursorLocation := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCursorLocation_R(Self: TCustomADODataSet; var T: TCursorLocation);
begin T := Self.CursorLocation; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetConnectionString_W(Self: TCustomADODataSet; const T: WideString);
begin Self.ConnectionString := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetConnectionString_R(Self: TCustomADODataSet; var T: WideString);
begin T := Self.ConnectionString; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetConnection_W(Self: TCustomADODataSet; const T: TADOConnection);
begin Self.Connection := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetConnection_R(Self: TCustomADODataSet; var T: TADOConnection);
begin T := Self.Connection; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCacheSize_W(Self: TCustomADODataSet; const T: Integer);
begin Self.CacheSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCacheSize_R(Self: TCustomADODataSet; var T: Integer);
begin T := Self.CacheSize; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetStoreDefs_W(Self: TCustomADODataSet; const T: Boolean);
begin Self.StoreDefs := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetStoreDefs_R(Self: TCustomADODataSet; var T: Boolean);
begin T := Self.StoreDefs; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetPrepared_W(Self: TCustomADODataSet; const T: Boolean);
begin Self.Prepared := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetPrepared_R(Self: TCustomADODataSet; var T: Boolean);
begin T := Self.Prepared; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetParameters_W(Self: TCustomADODataSet; const T: TParameters);
begin Self.Parameters := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetParameters_R(Self: TCustomADODataSet; var T: TParameters);
begin T := Self.Parameters; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetParamCheck_W(Self: TCustomADODataSet; const T: Boolean);
begin Self.ParamCheck := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetParamCheck_R(Self: TCustomADODataSet; var T: Boolean);
begin T := Self.ParamCheck; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetMasterFields_W(Self: TCustomADODataSet; const T: WideString);
begin Self.MasterFields := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetMasterFields_R(Self: TCustomADODataSet; var T: WideString);
begin T := Self.MasterFields; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexFieldNames_W(Self: TCustomADODataSet; const T: string);
begin Self.IndexFieldNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexFieldNames_R(Self: TCustomADODataSet; var T: string);
begin T := Self.IndexFieldNames; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexDefs_W(Self: TCustomADODataSet; const T: TIndexDefs);
begin Self.IndexDefs := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexDefs_R(Self: TCustomADODataSet; var T: TIndexDefs);
begin T := Self.IndexDefs; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetDataSource_W(Self: TCustomADODataSet; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetDataSource_R(Self: TCustomADODataSet; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCommandType_W(Self: TCustomADODataSet; const T: TCommandType);
begin Self.CommandType := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCommandType_R(Self: TCustomADODataSet; var T: TCommandType);
begin T := Self.CommandType; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCommandTimeout_W(Self: TCustomADODataSet; const T: Integer);
begin Self.CommandTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCommandTimeout_R(Self: TCustomADODataSet; var T: Integer);
begin T := Self.CommandTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCommandText_W(Self: TCustomADODataSet; const T: WideString);
begin Self.CommandText := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCommandText_R(Self: TCustomADODataSet; var T: WideString);
begin T := Self.CommandText; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetCommand_R(Self: TCustomADODataSet; var T: TADOCommand);
begin T := Self.Command; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetMasterDataLink_R(Self: TCustomADODataSet; var T: TMasterDataLink);
begin T := Self.MasterDataLink; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetSort_W(Self: TCustomADODataSet; const T: WideString);
begin Self.Sort := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetSort_R(Self: TCustomADODataSet; var T: WideString);
begin T := Self.Sort; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetRecordStatus_R(Self: TCustomADODataSet; var T: TRecordStatusSet);
begin T := Self.RecordStatus; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetRecordsetState_R(Self: TCustomADODataSet; var T: TObjectStates);
begin T := Self.RecordsetState; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetRecordset_W(Self: TCustomADODataSet; const T: _Recordset);
begin Self.Recordset := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetRecordset_R(Self: TCustomADODataSet; var T: _Recordset);
begin T := Self.Recordset; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetProperties_R(Self: TCustomADODataSet; var T: Properties);
begin T := Self.Properties; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetFilterGroup_W(Self: TCustomADODataSet; const T: TFilterGroup);
begin Self.FilterGroup := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetFilterGroup_R(Self: TCustomADODataSet; var T: TFilterGroup);
begin T := Self.FilterGroup; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexFields_W(Self: TCustomADODataSet; const T: TField; const t1: Integer);
begin Self.IndexFields[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexFields_R(Self: TCustomADODataSet; var T: TField; const t1: Integer);
begin T := Self.IndexFields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexFieldCount_R(Self: TCustomADODataSet; var T: Integer);
begin T := Self.IndexFieldCount; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexName_W(Self: TCustomADODataSet; const T: WideString);
begin Self.IndexName := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetIndexName_R(Self: TCustomADODataSet; var T: WideString);
begin T := Self.IndexName; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetDesignerData_W(Self: TCustomADODataSet; const T: string);
begin Self.DesignerData := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetDesignerData_R(Self: TCustomADODataSet; var T: string);
begin T := Self.DesignerData; end;

(*----------------------------------------------------------------------------*)
Function TCustomADODataSetGetFieldData12_P(Self: TCustomADODataSet;  FieldNo : Integer; Buffer : Pointer) : Boolean;
Begin Result := Self.GetFieldData(FieldNo, Buffer); END;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetEnableBCD_W(Self: TCustomADODataSet; const T: Boolean);
begin Self.EnableBCD := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomADODataSetEnableBCD_R(Self: TCustomADODataSet; var T: Boolean);
begin T := Self.EnableBCD; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandParamCheck_W(Self: TADOCommand; const T: Boolean);
begin Self.ParamCheck := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandParamCheck_R(Self: TADOCommand; var T: Boolean);
begin T := Self.ParamCheck; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandParameters_W(Self: TADOCommand; const T: TParameters);
begin Self.Parameters := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandParameters_R(Self: TADOCommand; var T: TParameters);
begin T := Self.Parameters; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandPrepared_W(Self: TADOCommand; const T: WordBool);
begin Self.Prepared := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandPrepared_R(Self: TADOCommand; var T: WordBool);
begin T := Self.Prepared; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandExecuteOptions_W(Self: TADOCommand; const T: TExecuteOptions);
begin Self.ExecuteOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandExecuteOptions_R(Self: TADOCommand; var T: TExecuteOptions);
begin T := Self.ExecuteOptions; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandConnectionString_W(Self: TADOCommand; const T: WideString);
begin Self.ConnectionString := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandConnectionString_R(Self: TADOCommand; var T: WideString);
begin T := Self.ConnectionString; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandConnection_W(Self: TADOCommand; const T: TADOConnection);
begin Self.Connection := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandConnection_R(Self: TADOCommand; var T: TADOConnection);
begin T := Self.Connection; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandCommandType_W(Self: TADOCommand; const T: TCommandType);
begin Self.CommandType := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandCommandType_R(Self: TADOCommand; var T: TCommandType);
begin T := Self.CommandType; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandCommandTimeout_W(Self: TADOCommand; const T: Integer);
begin Self.CommandTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandCommandTimeout_R(Self: TADOCommand; var T: Integer);
begin T := Self.CommandTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandCommandText_W(Self: TADOCommand; const T: WideString);
begin Self.CommandText := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandCommandText_R(Self: TADOCommand; var T: WideString);
begin T := Self.CommandText; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandStates_R(Self: TADOCommand; var T: TObjectStates);
begin T := Self.States; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandProperties_R(Self: TADOCommand; var T: Properties);
begin T := Self.Properties; end;

(*----------------------------------------------------------------------------*)
procedure TADOCommandCommandObject_R(Self: TADOCommand; var T: _Command);
begin T := Self.CommandObject; end;

(*----------------------------------------------------------------------------*)
Function TADOCommandExecute11_P(Self: TADOCommand;  var RecordsAffected : Integer; const Parameters : OleVariant) : _Recordset;
Begin Result := Self.Execute(RecordsAffected, Parameters); END;

(*----------------------------------------------------------------------------*)
Function TADOCommandExecute10_P(Self: TADOCommand;  const Parameters : OleVariant) : _Recordset;
Begin Result := Self.Execute(Parameters); END;

(*----------------------------------------------------------------------------*)
Function TADOCommandExecute9_P(Self: TADOCommand) : _Recordset;
Begin Result := Self.Execute; END;

(*----------------------------------------------------------------------------*)
procedure TParametersParameterCollection_R(Self: TParameters; var T: Parameters);
begin T := Self.ParameterCollection; end;

(*----------------------------------------------------------------------------*)
procedure TParametersItems_W(Self: TParameters; const T: TParameter; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TParametersItems_R(Self: TParameters; var T: TParameter; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TParametersCommand_R(Self: TParameters; var T: TADOCommand);
begin T := Self.Command; end;

(*----------------------------------------------------------------------------*)
procedure TParametersParamValues_W(Self: TParameters; const T: Variant; const t1: WideString);
begin Self.ParamValues[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TParametersParamValues_R(Self: TParameters; var T: Variant; const t1: WideString);
begin T := Self.ParamValues[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TParameterValue_W(Self: TParameter; const T: Variant);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterValue_R(Self: TParameter; var T: Variant);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TParameterSize_W(Self: TParameter; const T: Integer);
begin Self.Size := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterSize_R(Self: TParameter; var T: Integer);
begin T := Self.Size; end;

(*----------------------------------------------------------------------------*)
procedure TParameterPrecision_W(Self: TParameter; const T: Byte);
begin Self.Precision := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterPrecision_R(Self: TParameter; var T: Byte);
begin T := Self.Precision; end;

(*----------------------------------------------------------------------------*)
procedure TParameterNumericScale_W(Self: TParameter; const T: Byte);
begin Self.NumericScale := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterNumericScale_R(Self: TParameter; var T: Byte);
begin T := Self.NumericScale; end;

(*----------------------------------------------------------------------------*)
procedure TParameterDirection_W(Self: TParameter; const T: TParameterDirection);
begin Self.Direction := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterDirection_R(Self: TParameter; var T: TParameterDirection);
begin T := Self.Direction; end;

(*----------------------------------------------------------------------------*)
procedure TParameterDataType_W(Self: TParameter; const T: TDataType);
begin Self.DataType := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterDataType_R(Self: TParameter; var T: TDataType);
begin T := Self.DataType; end;

(*----------------------------------------------------------------------------*)
procedure TParameterAttributes_W(Self: TParameter; const T: TParameterAttributes);
begin Self.Attributes := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterAttributes_R(Self: TParameter; var T: TParameterAttributes);
begin T := Self.Attributes; end;

(*----------------------------------------------------------------------------*)
procedure TParameterName_W(Self: TParameter; const T: WideString);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TParameterName_R(Self: TParameter; var T: WideString);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TParameterProperties_R(Self: TParameter; var T: Properties);
begin T := Self.Properties; end;

(*----------------------------------------------------------------------------*)
procedure TParameterParameters_R(Self: TParameter; var T: TParameters);
begin T := Self.Parameters; end;

(*----------------------------------------------------------------------------*)
procedure TParameterParameterObject_R(Self: TParameter; var T: _Parameter);
begin T := Self.ParameterObject; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionServerName_W(Self: TRDSConnection; const T: WideString);
begin Self.ServerName := T; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionServerName_R(Self: TRDSConnection; var T: WideString);
begin T := Self.ServerName; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionInternetTimeout_W(Self: TRDSConnection; const T: Integer);
begin Self.InternetTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionInternetTimeout_R(Self: TRDSConnection; var T: Integer);
begin T := Self.InternetTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionComputerName_W(Self: TRDSConnection; const T: WideString);
begin Self.ComputerName := T; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionComputerName_R(Self: TRDSConnection; var T: WideString);
begin T := Self.ComputerName; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionDataSpaceObject_R(Self: TRDSConnection; var T: DataSpace);
begin T := Self.DataSpaceObject; end;

(*----------------------------------------------------------------------------*)
procedure TRDSConnectionAppServer_R(Self: TRDSConnection; var T: OleVariant);
begin T := Self.AppServer; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnWillExecute_W(Self: TADOConnection; const T: TWillExecuteEvent);
begin Self.OnWillExecute := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnWillExecute_R(Self: TADOConnection; var T: TWillExecuteEvent);
begin T := Self.OnWillExecute; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnExecuteComplete_W(Self: TADOConnection; const T: TExecuteCompleteEvent);
begin Self.OnExecuteComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnExecuteComplete_R(Self: TADOConnection; var T: TExecuteCompleteEvent);
begin T := Self.OnExecuteComplete; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnWillConnect_W(Self: TADOConnection; const T: TWillConnectEvent);
begin Self.OnWillConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnWillConnect_R(Self: TADOConnection; var T: TWillConnectEvent);
begin T := Self.OnWillConnect; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnConnectComplete_W(Self: TADOConnection; const T: TConnectErrorEvent);
begin Self.OnConnectComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnConnectComplete_R(Self: TADOConnection; var T: TConnectErrorEvent);
begin T := Self.OnConnectComplete; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnRollbackTransComplete_W(Self: TADOConnection; const T: TConnectErrorEvent);
begin Self.OnRollbackTransComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnRollbackTransComplete_R(Self: TADOConnection; var T: TConnectErrorEvent);
begin T := Self.OnRollbackTransComplete; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnCommitTransComplete_W(Self: TADOConnection; const T: TConnectErrorEvent);
begin Self.OnCommitTransComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnCommitTransComplete_R(Self: TADOConnection; var T: TConnectErrorEvent);
begin T := Self.OnCommitTransComplete; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnBeginTransComplete_W(Self: TADOConnection; const T: TBeginTransCompleteEvent);
begin Self.OnBeginTransComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnBeginTransComplete_R(Self: TADOConnection; var T: TBeginTransCompleteEvent);
begin T := Self.OnBeginTransComplete; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnInfoMessage_W(Self: TADOConnection; const T: TInfoMessageEvent);
begin Self.OnInfoMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnInfoMessage_R(Self: TADOConnection; var T: TInfoMessageEvent);
begin T := Self.OnInfoMessage; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnDisconnect_W(Self: TADOConnection; const T: TDisconnectEvent);
begin Self.OnDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionOnDisconnect_R(Self: TADOConnection; var T: TDisconnectEvent);
begin T := Self.OnDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionProvider_W(Self: TADOConnection; const T: WideString);
begin Self.Provider := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionProvider_R(Self: TADOConnection; var T: WideString);
begin T := Self.Provider; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionMode_W(Self: TADOConnection; const T: TConnectMode);
begin Self.Mode := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionMode_R(Self: TADOConnection; var T: TConnectMode);
begin T := Self.Mode; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionKeepConnection_W(Self: TADOConnection; const T: Boolean);
begin Self.KeepConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionKeepConnection_R(Self: TADOConnection; var T: Boolean);
begin T := Self.KeepConnection; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionIsolationLevel_W(Self: TADOConnection; const T: TIsolationLevel);
begin Self.IsolationLevel := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionIsolationLevel_R(Self: TADOConnection; var T: TIsolationLevel);
begin T := Self.IsolationLevel; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionDefaultDatabase_W(Self: TADOConnection; const T: WideString);
begin Self.DefaultDatabase := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionDefaultDatabase_R(Self: TADOConnection; var T: WideString);
begin T := Self.DefaultDatabase; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionCursorLocation_W(Self: TADOConnection; const T: TCursorLocation);
begin Self.CursorLocation := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionCursorLocation_R(Self: TADOConnection; var T: TCursorLocation);
begin T := Self.CursorLocation; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectOptions_W(Self: TADOConnection; const T: TConnectOption);
begin Self.ConnectOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectOptions_R(Self: TADOConnection; var T: TConnectOption);
begin T := Self.ConnectOptions; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectionTimeout_W(Self: TADOConnection; const T: Integer);
begin Self.ConnectionTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectionTimeout_R(Self: TADOConnection; var T: Integer);
begin T := Self.ConnectionTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectionString_W(Self: TADOConnection; const T: WideString);
begin Self.ConnectionString := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectionString_R(Self: TADOConnection; var T: WideString);
begin T := Self.ConnectionString; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionCommandTimeout_W(Self: TADOConnection; const T: Integer);
begin Self.CommandTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionCommandTimeout_R(Self: TADOConnection; var T: Integer);
begin T := Self.CommandTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionAttributes_W(Self: TADOConnection; const T: TXactAttributes);
begin Self.Attributes := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionAttributes_R(Self: TADOConnection; var T: TXactAttributes);
begin T := Self.Attributes; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionVersion_R(Self: TADOConnection; var T: WideString);
begin T := Self.Version; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionState_R(Self: TADOConnection; var T: TObjectStates);
begin T := Self.State; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionProperties_R(Self: TADOConnection; var T: Properties);
begin T := Self.Properties; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionInTransaction_R(Self: TADOConnection; var T: Boolean);
begin T := Self.InTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionErrors_R(Self: TADOConnection; var T: Errors);
begin T := Self.Errors; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionDataSets_R(Self: TADOConnection; var T: TCustomADODataSet; const t1: Integer);
begin T := Self.DataSets[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionCommands_R(Self: TADOConnection; var T: TADOCommand; const t1: Integer);
begin T := Self.Commands[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionCommandCount_R(Self: TADOConnection; var T: Integer);
begin T := Self.CommandCount; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectionObject_W(Self: TADOConnection; const T: _Connection);
begin Self.ConnectionObject := T; end;

(*----------------------------------------------------------------------------*)
procedure TADOConnectionConnectionObject_R(Self: TADOConnection; var T: _Connection);
begin T := Self.ConnectionObject; end;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionOpen8_P(Self: TADOConnection;  const UserID : WideString; const Password : WideString);
Begin Self.Open(UserID, Password); END;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionGetTableNames7_P(Self: TADOConnection;  List : TStrings; SystemTables : Boolean);
Begin Self.GetTableNames(List, SystemTables); END;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionGetTableNames6_P(Self: TADOConnection;  List : TWideStrings; SystemTables : Boolean);
Begin Self.GetTableNames(List, SystemTables); END;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionGetFieldNames5_P(Self: TADOConnection;  const TableName : string; List : TStrings);
Begin Self.GetFieldNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionGetFieldNames4_P(Self: TADOConnection;  const TableName : WideString; List : TWideStrings);
Begin Self.GetFieldNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionGetProcedureNames3_P(Self: TADOConnection;  List : TStrings);
Begin Self.GetProcedureNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionGetProcedureNames2_P(Self: TADOConnection;  List : TWideStrings);
Begin Self.GetProcedureNames(List); END;

(*----------------------------------------------------------------------------*)
Function TADOConnectionExecute1_P(Self: TADOConnection;  const CommandText : WideString; const CommandType : TCommandType; const ExecuteOptions : TExecuteOptions) : _Recordset;
Begin Result := Self.Execute(CommandText, CommandType, ExecuteOptions); END;

(*----------------------------------------------------------------------------*)
Procedure TADOConnectionExecute0_P(Self: TADOConnection;  const CommandText : WideString; var RecordsAffected : Integer; const ExecuteOptions : TExecuteOptions);
Begin Self.Execute(CommandText, RecordsAffected, ExecuteOptions); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADODB_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CreateUDLFile, 'CreateUDLFile', cdRegister);
 S.RegisterDelphiFunction(@DataLinkDir, 'DataLinkDir', cdRegister);
 S.RegisterDelphiFunction(@GetProviderNames13, 'GetProviderNames13', cdRegister);
 S.RegisterDelphiFunction(@GetProviderNames14, 'GetProviderNames14', cdRegister);
 S.RegisterDelphiFunction(@PromptDataSource, 'PromptDataSource', cdRegister);
 S.RegisterDelphiFunction(@PromptDataLinkFile, 'PromptDataLinkFile', cdRegister);
 S.RegisterDelphiFunction(@GetDataLinkFiles15, 'GetDataLinkFiles15', cdRegister);
 S.RegisterDelphiFunction(@GetDataLinkFiles16, 'GetDataLinkFiles16', cdRegister);
 S.RegisterDelphiFunction(@CreateADOObject, 'CreateADOObject', cdRegister);
 S.RegisterDelphiFunction(@ADOTypeToFieldType, 'ADOTypeToFieldType', cdRegister);
 S.RegisterDelphiFunction(@FieldTypeToADOType, 'FieldTypeToADOType', cdRegister);
 S.RegisterDelphiFunction(@StringToVarArray, 'StringToVarArray', cdRegister);
 S.RegisterDelphiFunction(@VarDataSize, 'VarDataSize', cdRegister);
 S.RegisterDelphiFunction(@OleEnumToOrd, 'OleEnumToOrd', cdRegister);
 S.RegisterDelphiFunction(@GetStates, 'GetStates', cdRegister);
 S.RegisterDelphiFunction(@ExecuteOptionsToOrd, 'ExecuteOptionsToOrd', cdRegister);
 S.RegisterDelphiFunction(@OrdToExecuteOptions, 'OrdToExecuteOptions', cdRegister);
 S.RegisterDelphiFunction(@ExtractFieldName, 'ExtractFieldName', cdRegister);
 S.RegisterDelphiFunction(@GetFilterStr, 'GetFilterStr', cdRegister);
 S.RegisterDelphiFunction(@FieldListCheckSum, 'FieldListCheckSum', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TADOBlobStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADOBlobStream) do
  begin
    RegisterConstructor(@TADOBlobStream.Create, 'Create');
    RegisterMethod(@TADOBlobStream.Truncate, 'Truncate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TADOStoredProc(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADOStoredProc) do
  begin
    RegisterMethod(@TADOStoredProc.ExecProc, 'ExecProc');
    RegisterPropertyHelper(@TADOStoredProcProcedureName_R,@TADOStoredProcProcedureName_W,'ProcedureName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TADOQuery(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADOQuery) do
  begin
    RegisterMethod(@TADOQuery.ExecSQL, 'ExecSQL');
    RegisterPropertyHelper(@TADOQueryRowsAffected_R,nil,'RowsAffected');
    RegisterPropertyHelper(@TADOQuerySQL_R,@TADOQuerySQL_W,'SQL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TADOTable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADOTable) do
  begin
    RegisterMethod(@TADOTable.GetIndexNames, 'GetIndexNames');
    RegisterPropertyHelper(@TADOTableMasterSource_R,@TADOTableMasterSource_W,'MasterSource');
    RegisterPropertyHelper(@TADOTableReadOnly_R,@TADOTableReadOnly_W,'ReadOnly');
    RegisterPropertyHelper(@TADOTableTableDirect_R,@TADOTableTableDirect_W,'TableDirect');
    RegisterPropertyHelper(@TADOTableTableName_R,@TADOTableTableName_W,'TableName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TADODataSet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADODataSet) do
  begin
    RegisterMethod(@TADODataSet.CreateDataSet, 'CreateDataSet');
    RegisterMethod(@TADODataSet.GetIndexNames, 'GetIndexNames');
    RegisterPropertyHelper(@TADODataSetRDSConnection_R,@TADODataSetRDSConnection_W,'RDSConnection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomADODataSet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomADODataSet) do
  begin
    RegisterMethod(@TCustomADODataSet.CancelBatch, 'CancelBatch');
    RegisterMethod(@TCustomADODataSet.CancelUpdates, 'CancelUpdates');
    RegisterMethod(@TCustomADODataSet.Clone, 'Clone');
    RegisterMethod(@TCustomADODataSet.DeleteRecords, 'DeleteRecords');
    RegisterPropertyHelper(@TCustomADODataSetEnableBCD_R,@TCustomADODataSetEnableBCD_W,'EnableBCD');
    RegisterMethod(@TCustomADODataSet.FilterOnBookmarks, 'FilterOnBookmarks');
    RegisterMethod(@TCustomADODataSet.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TCustomADODataSet.NextRecordset, 'NextRecordset');
    RegisterMethod(@TCustomADODataSet.Requery, 'Requery');
    RegisterMethod(@TCustomADODataSet.SaveToFile, 'SaveToFile');
    RegisterMethod(@TCustomADODataSet.Seek, 'Seek');
    RegisterMethod(@TCustomADODataSet.Supports, 'Supports');
    RegisterMethod(@TCustomADODataSet.UpdateBatch, 'UpdateBatch');
    RegisterPropertyHelper(@TCustomADODataSetDesignerData_R,@TCustomADODataSetDesignerData_W,'DesignerData');
    RegisterPropertyHelper(@TCustomADODataSetIndexName_R,@TCustomADODataSetIndexName_W,'IndexName');
    RegisterPropertyHelper(@TCustomADODataSetIndexFieldCount_R,nil,'IndexFieldCount');
    RegisterPropertyHelper(@TCustomADODataSetIndexFields_R,@TCustomADODataSetIndexFields_W,'IndexFields');
    RegisterPropertyHelper(@TCustomADODataSetFilterGroup_R,@TCustomADODataSetFilterGroup_W,'FilterGroup');
    RegisterPropertyHelper(@TCustomADODataSetProperties_R,nil,'Properties');
    RegisterPropertyHelper(@TCustomADODataSetRecordset_R,@TCustomADODataSetRecordset_W,'Recordset');
    RegisterPropertyHelper(@TCustomADODataSetRecordsetState_R,nil,'RecordsetState');
    RegisterPropertyHelper(@TCustomADODataSetRecordStatus_R,nil,'RecordStatus');
    RegisterPropertyHelper(@TCustomADODataSetSort_R,@TCustomADODataSetSort_W,'Sort');
    RegisterPropertyHelper(@TCustomADODataSetMasterDataLink_R,nil,'MasterDataLink');
    RegisterPropertyHelper(@TCustomADODataSetCommand_R,nil,'Command');
    RegisterPropertyHelper(@TCustomADODataSetCommandText_R,@TCustomADODataSetCommandText_W,'CommandText');
    RegisterPropertyHelper(@TCustomADODataSetCommandTimeout_R,@TCustomADODataSetCommandTimeout_W,'CommandTimeout');
    RegisterPropertyHelper(@TCustomADODataSetCommandType_R,@TCustomADODataSetCommandType_W,'CommandType');
    RegisterPropertyHelper(@TCustomADODataSetDataSource_R,@TCustomADODataSetDataSource_W,'DataSource');
    RegisterPropertyHelper(@TCustomADODataSetIndexDefs_R,@TCustomADODataSetIndexDefs_W,'IndexDefs');
    RegisterPropertyHelper(@TCustomADODataSetIndexFieldNames_R,@TCustomADODataSetIndexFieldNames_W,'IndexFieldNames');
    RegisterPropertyHelper(@TCustomADODataSetMasterFields_R,@TCustomADODataSetMasterFields_W,'MasterFields');
    RegisterPropertyHelper(@TCustomADODataSetParamCheck_R,@TCustomADODataSetParamCheck_W,'ParamCheck');
    RegisterPropertyHelper(@TCustomADODataSetParameters_R,@TCustomADODataSetParameters_W,'Parameters');
    RegisterPropertyHelper(@TCustomADODataSetPrepared_R,@TCustomADODataSetPrepared_W,'Prepared');
    RegisterPropertyHelper(@TCustomADODataSetStoreDefs_R,@TCustomADODataSetStoreDefs_W,'StoreDefs');
    RegisterPropertyHelper(@TCustomADODataSetCacheSize_R,@TCustomADODataSetCacheSize_W,'CacheSize');
    RegisterPropertyHelper(@TCustomADODataSetConnection_R,@TCustomADODataSetConnection_W,'Connection');
    RegisterPropertyHelper(@TCustomADODataSetConnectionString_R,@TCustomADODataSetConnectionString_W,'ConnectionString');
    RegisterPropertyHelper(@TCustomADODataSetCursorLocation_R,@TCustomADODataSetCursorLocation_W,'CursorLocation');
    RegisterPropertyHelper(@TCustomADODataSetCursorType_R,@TCustomADODataSetCursorType_W,'CursorType');
    RegisterPropertyHelper(@TCustomADODataSetExecuteOptions_R,@TCustomADODataSetExecuteOptions_W,'ExecuteOptions');
    RegisterPropertyHelper(@TCustomADODataSetLockType_R,@TCustomADODataSetLockType_W,'LockType');
    RegisterPropertyHelper(@TCustomADODataSetMarshalOptions_R,@TCustomADODataSetMarshalOptions_W,'MarshalOptions');
    RegisterPropertyHelper(@TCustomADODataSetMaxRecords_R,@TCustomADODataSetMaxRecords_W,'MaxRecords');
    RegisterPropertyHelper(@TCustomADODataSetOnWillChangeField_R,@TCustomADODataSetOnWillChangeField_W,'OnWillChangeField');
    RegisterPropertyHelper(@TCustomADODataSetOnFieldChangeComplete_R,@TCustomADODataSetOnFieldChangeComplete_W,'OnFieldChangeComplete');
    RegisterPropertyHelper(@TCustomADODataSetOnWillChangeRecord_R,@TCustomADODataSetOnWillChangeRecord_W,'OnWillChangeRecord');
    RegisterPropertyHelper(@TCustomADODataSetOnRecordChangeComplete_R,@TCustomADODataSetOnRecordChangeComplete_W,'OnRecordChangeComplete');
    RegisterPropertyHelper(@TCustomADODataSetOnWillChangeRecordset_R,@TCustomADODataSetOnWillChangeRecordset_W,'OnWillChangeRecordset');
    RegisterPropertyHelper(@TCustomADODataSetOnRecordsetChangeComplete_R,@TCustomADODataSetOnRecordsetChangeComplete_W,'OnRecordsetChangeComplete');
    RegisterPropertyHelper(@TCustomADODataSetOnWillMove_R,@TCustomADODataSetOnWillMove_W,'OnWillMove');
    RegisterPropertyHelper(@TCustomADODataSetOnMoveComplete_R,@TCustomADODataSetOnMoveComplete_W,'OnMoveComplete');
    RegisterPropertyHelper(@TCustomADODataSetOnEndOfRecordset_R,@TCustomADODataSetOnEndOfRecordset_W,'OnEndOfRecordset');
    RegisterPropertyHelper(@TCustomADODataSetOnFetchComplete_R,@TCustomADODataSetOnFetchComplete_W,'OnFetchComplete');
    RegisterPropertyHelper(@TCustomADODataSetOnFetchProgress_R,@TCustomADODataSetOnFetchProgress_W,'OnFetchProgress');
    RegisterPropertyHelper(@TCustomADODataSetOnRecordsetCreate_R,@TCustomADODataSetOnRecordsetCreate_W,'OnRecordsetCreate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TADOCommand(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADOCommand) do
  begin
    RegisterMethod(@TADOCommand.Cancel, 'Cancel');
    RegisterMethod(@TADOCommandExecute9_P, 'Execute9');
    RegisterMethod(@TADOCommandExecute10_P, 'Execute10');
    RegisterMethod(@TADOCommandExecute11_P, 'Execute11');
    RegisterPropertyHelper(@TADOCommandCommandObject_R,nil,'CommandObject');
    RegisterPropertyHelper(@TADOCommandProperties_R,nil,'Properties');
    RegisterPropertyHelper(@TADOCommandStates_R,nil,'States');
    RegisterPropertyHelper(@TADOCommandCommandText_R,@TADOCommandCommandText_W,'CommandText');
    RegisterPropertyHelper(@TADOCommandCommandTimeout_R,@TADOCommandCommandTimeout_W,'CommandTimeout');
    RegisterPropertyHelper(@TADOCommandCommandType_R,@TADOCommandCommandType_W,'CommandType');
    RegisterPropertyHelper(@TADOCommandConnection_R,@TADOCommandConnection_W,'Connection');
    RegisterPropertyHelper(@TADOCommandConnectionString_R,@TADOCommandConnectionString_W,'ConnectionString');
    RegisterPropertyHelper(@TADOCommandExecuteOptions_R,@TADOCommandExecuteOptions_W,'ExecuteOptions');
    RegisterPropertyHelper(@TADOCommandPrepared_R,@TADOCommandPrepared_W,'Prepared');
    RegisterPropertyHelper(@TADOCommandParameters_R,@TADOCommandParameters_W,'Parameters');
    RegisterPropertyHelper(@TADOCommandParamCheck_R,@TADOCommandParamCheck_W,'ParamCheck');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TParameters(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TParameters) do
  begin
    RegisterMethod(@TParameters.AddParameter, 'AddParameter');
    RegisterMethod(@TParameters.AssignValues, 'AssignValues');
    RegisterMethod(@TParameters.CreateParameter, 'CreateParameter');
    RegisterMethod(@TParameters.FindParam, 'FindParam');
    RegisterMethod(@TParameters.GetParamList, 'GetParamList');
    RegisterMethod(@TParameters.IsEqual, 'IsEqual');
    RegisterMethod(@TParameters.ParamByName, 'ParamByName');
    RegisterMethod(@TParameters.ParseSQL, 'ParseSQL');
    RegisterMethod(@TParameters.Refresh, 'Refresh');
    RegisterPropertyHelper(@TParametersParamValues_R,@TParametersParamValues_W,'ParamValues');
    RegisterPropertyHelper(@TParametersCommand_R,nil,'Command');
    RegisterPropertyHelper(@TParametersItems_R,@TParametersItems_W,'Items');
    RegisterPropertyHelper(@TParametersParameterCollection_R,nil,'ParameterCollection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TParameter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TParameter) do
  begin
    RegisterMethod(@TParameter.AppendChunk, 'AppendChunk');
    RegisterMethod(@TParameter.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TParameter.LoadFromStream, 'LoadFromStream');
    RegisterPropertyHelper(@TParameterParameterObject_R,nil,'ParameterObject');
    RegisterPropertyHelper(@TParameterParameters_R,nil,'Parameters');
    RegisterPropertyHelper(@TParameterProperties_R,nil,'Properties');
    RegisterPropertyHelper(@TParameterName_R,@TParameterName_W,'Name');
    RegisterPropertyHelper(@TParameterAttributes_R,@TParameterAttributes_W,'Attributes');
    RegisterPropertyHelper(@TParameterDataType_R,@TParameterDataType_W,'DataType');
    RegisterPropertyHelper(@TParameterDirection_R,@TParameterDirection_W,'Direction');
    RegisterPropertyHelper(@TParameterNumericScale_R,@TParameterNumericScale_W,'NumericScale');
    RegisterPropertyHelper(@TParameterPrecision_R,@TParameterPrecision_W,'Precision');
    RegisterPropertyHelper(@TParameterSize_R,@TParameterSize_W,'Size');
    RegisterPropertyHelper(@TParameterValue_R,@TParameterValue_W,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRDSConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRDSConnection) do
  begin
    RegisterMethod(@TRDSConnection.GetRecordset, 'GetRecordset');
    RegisterPropertyHelper(@TRDSConnectionAppServer_R,nil,'AppServer');
    RegisterPropertyHelper(@TRDSConnectionDataSpaceObject_R,nil,'DataSpaceObject');
    RegisterPropertyHelper(@TRDSConnectionComputerName_R,@TRDSConnectionComputerName_W,'ComputerName');
    RegisterPropertyHelper(@TRDSConnectionInternetTimeout_R,@TRDSConnectionInternetTimeout_W,'InternetTimeout');
    RegisterPropertyHelper(@TRDSConnectionServerName_R,@TRDSConnectionServerName_W,'ServerName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TADOConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADOConnection) do
  begin
    RegisterMethod(@TADOConnection.BeginTrans, 'BeginTrans');
    RegisterMethod(@TADOConnection.Cancel, 'Cancel');
    RegisterMethod(@TADOConnection.CommitTrans, 'CommitTrans');
    RegisterMethod(@TADOConnectionExecute0_P, 'Execute0');
    RegisterMethod(@TADOConnectionExecute1_P, 'Execute1');
    RegisterMethod(@TADOConnectionGetProcedureNames2_P, 'GetProcedureNames2');
    RegisterMethod(@TADOConnectionGetProcedureNames3_P, 'GetProcedureNames3');
    RegisterMethod(@TADOConnectionGetFieldNames4_P, 'GetFieldNames4');
    RegisterMethod(@TADOConnectionGetFieldNames5_P, 'GetFieldNames5');
    RegisterMethod(@TADOConnectionGetTableNames6_P, 'GetTableNames6');
    RegisterMethod(@TADOConnectionGetTableNames7_P, 'GetTableNames7');
    RegisterMethod(@TADOConnectionOpen8_P, 'Open8');
    RegisterMethod(@TADOConnection.OpenSchema, 'OpenSchema');
    RegisterMethod(@TADOConnection.RollbackTrans, 'RollbackTrans');
    RegisterPropertyHelper(@TADOConnectionConnectionObject_R,@TADOConnectionConnectionObject_W,'ConnectionObject');
    RegisterPropertyHelper(@TADOConnectionCommandCount_R,nil,'CommandCount');
    RegisterPropertyHelper(@TADOConnectionCommands_R,nil,'Commands');
    RegisterPropertyHelper(@TADOConnectionDataSets_R,nil,'DataSets');
    RegisterPropertyHelper(@TADOConnectionErrors_R,nil,'Errors');
    RegisterPropertyHelper(@TADOConnectionInTransaction_R,nil,'InTransaction');
    RegisterPropertyHelper(@TADOConnectionProperties_R,nil,'Properties');
    RegisterPropertyHelper(@TADOConnectionState_R,nil,'State');
    RegisterPropertyHelper(@TADOConnectionVersion_R,nil,'Version');
    RegisterPropertyHelper(@TADOConnectionAttributes_R,@TADOConnectionAttributes_W,'Attributes');
    RegisterPropertyHelper(@TADOConnectionCommandTimeout_R,@TADOConnectionCommandTimeout_W,'CommandTimeout');
    RegisterPropertyHelper(@TADOConnectionConnectionString_R,@TADOConnectionConnectionString_W,'ConnectionString');
    RegisterPropertyHelper(@TADOConnectionConnectionTimeout_R,@TADOConnectionConnectionTimeout_W,'ConnectionTimeout');
    RegisterPropertyHelper(@TADOConnectionConnectOptions_R,@TADOConnectionConnectOptions_W,'ConnectOptions');
    RegisterPropertyHelper(@TADOConnectionCursorLocation_R,@TADOConnectionCursorLocation_W,'CursorLocation');
    RegisterPropertyHelper(@TADOConnectionDefaultDatabase_R,@TADOConnectionDefaultDatabase_W,'DefaultDatabase');
    RegisterPropertyHelper(@TADOConnectionIsolationLevel_R,@TADOConnectionIsolationLevel_W,'IsolationLevel');
    RegisterPropertyHelper(@TADOConnectionKeepConnection_R,@TADOConnectionKeepConnection_W,'KeepConnection');
    RegisterPropertyHelper(@TADOConnectionMode_R,@TADOConnectionMode_W,'Mode');
    RegisterPropertyHelper(@TADOConnectionProvider_R,@TADOConnectionProvider_W,'Provider');
    RegisterPropertyHelper(@TADOConnectionOnDisconnect_R,@TADOConnectionOnDisconnect_W,'OnDisconnect');
    RegisterPropertyHelper(@TADOConnectionOnInfoMessage_R,@TADOConnectionOnInfoMessage_W,'OnInfoMessage');
    RegisterPropertyHelper(@TADOConnectionOnBeginTransComplete_R,@TADOConnectionOnBeginTransComplete_W,'OnBeginTransComplete');
    RegisterPropertyHelper(@TADOConnectionOnCommitTransComplete_R,@TADOConnectionOnCommitTransComplete_W,'OnCommitTransComplete');
    RegisterPropertyHelper(@TADOConnectionOnRollbackTransComplete_R,@TADOConnectionOnRollbackTransComplete_W,'OnRollbackTransComplete');
    RegisterPropertyHelper(@TADOConnectionOnConnectComplete_R,@TADOConnectionOnConnectComplete_W,'OnConnectComplete');
    RegisterPropertyHelper(@TADOConnectionOnWillConnect_R,@TADOConnectionOnWillConnect_W,'OnWillConnect');
    RegisterPropertyHelper(@TADOConnectionOnExecuteComplete_R,@TADOConnectionOnExecuteComplete_W,'OnExecuteComplete');
    RegisterPropertyHelper(@TADOConnectionOnWillExecute_R,@TADOConnectionOnWillExecute_W,'OnWillExecute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADODB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TADOCommand) do
  with CL.Add(TCustomADODataSet) do
  with CL.Add(TADODataSet) do
  with CL.Add(TParameters) do
  with CL.Add(TADOConnection) do
  with CL.Add(EADOError) do
  RIRegister_TADOConnection(CL);
  RIRegister_TRDSConnection(CL);
  RIRegister_TParameter(CL);
  RIRegister_TParameters(CL);
  RIRegister_TADOCommand(CL);
  RIRegister_TCustomADODataSet(CL);
  RIRegister_TADODataSet(CL);
  RIRegister_TADOTable(CL);
  RIRegister_TADOQuery(CL);
  RIRegister_TADOStoredProc(CL);
  RIRegister_TADOBlobStream(CL);
end;

 
 
{ TPSImport_ADODB }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ADODB.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ADODB(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ADODB.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ADODB(ri);
  RIRegister_ADODB_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
