unit uPSI_IdLogEvent;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdLogEvent = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdLogEvent(CL: TPSPascalCompiler);
procedure SIRegister_IdLogEvent(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdLogEvent(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdLogEvent(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdLogBase
  ,IdLogEvent
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdLogEvent]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdLogEvent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdLogBase', 'TIdLogEvent') do
  with CL.AddClassN(CL.FindClass('TIdLogBase'),'TIdLogEvent') do
  begin
    RegisterProperty('OnReceived', 'TLogItemDataEvent', iptrw);
    RegisterProperty('OnSent', 'TLogItemDataEvent', iptrw);
    RegisterProperty('OnStatus', 'TLogItemStatusEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdLogEvent(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TLogItemStatusEvent', 'Procedure ( ASender : TComponent; const A'
   +'Text : string)');
  CL.AddTypeS('TLogItemDataEvent', 'Procedure ( ASender : TComponent; const ATe'
   +'xt : string; const AData : string)');
  SIRegister_TIdLogEvent(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdLogEventOnStatus_W(Self: TIdLogEvent; const T: TLogItemStatusEvent);
begin Self.OnStatus := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdLogEventOnStatus_R(Self: TIdLogEvent; var T: TLogItemStatusEvent);
begin T := Self.OnStatus; end;

(*----------------------------------------------------------------------------*)
procedure TIdLogEventOnSent_W(Self: TIdLogEvent; const T: TLogItemDataEvent);
begin Self.OnSent := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdLogEventOnSent_R(Self: TIdLogEvent; var T: TLogItemDataEvent);
begin T := Self.OnSent; end;

(*----------------------------------------------------------------------------*)
procedure TIdLogEventOnReceived_W(Self: TIdLogEvent; const T: TLogItemDataEvent);
begin Self.OnReceived := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdLogEventOnReceived_R(Self: TIdLogEvent; var T: TLogItemDataEvent);
begin T := Self.OnReceived; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdLogEvent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdLogEvent) do
  begin
    RegisterPropertyHelper(@TIdLogEventOnReceived_R,@TIdLogEventOnReceived_W,'OnReceived');
    RegisterPropertyHelper(@TIdLogEventOnSent_R,@TIdLogEventOnSent_W,'OnSent');
    RegisterPropertyHelper(@TIdLogEventOnStatus_R,@TIdLogEventOnStatus_W,'OnStatus');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdLogEvent(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdLogEvent(CL);
end;

 
 
{ TPSImport_IdLogEvent }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdLogEvent.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdLogEvent(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdLogEvent.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdLogEvent(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
