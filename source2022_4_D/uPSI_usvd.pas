unit uPSI_usvd;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_usvd = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_usvd(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_usvd_Routines(S: TPSExec);

procedure Register;

implementation


uses
   utypes
  ,uminmax
  ,utrigo
  ,usvd
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_usvd]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_usvd(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Procedure SV_Decomp( A : TMatrix; Lb, Ub1, Ub2 : Integer; S : TVector; V : TMatrix)');
 CL.AddDelphiFunction('Procedure SV_SetZero( S : TVector; Lb, Ub : Integer; Tol : Float)');
 CL.AddDelphiFunction('Procedure SV_Solve( U : TMatrix; S : TVector; V : TMatrix; B : TVector; Lb, Ub1, Ub2 : Integer; X : TVector)');
 CL.AddDelphiFunction('Procedure SV_Approx( U : TMatrix; S : TVector; V : TMatrix; Lb, Ub1, Ub2 : Integer; A : TMatrix)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_usvd_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@SV_Decomp, 'SV_Decomp', cdRegister);
 S.RegisterDelphiFunction(@SV_SetZero, 'SV_SetZero', cdRegister);
 S.RegisterDelphiFunction(@SV_Solve, 'SV_Solve', cdRegister);
 S.RegisterDelphiFunction(@SV_Approx, 'SV_Approx', cdRegister);
end;

 
 
{ TPSImport_usvd }
(*----------------------------------------------------------------------------*)
procedure TPSImport_usvd.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_usvd(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_usvd.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_usvd(ri);
  RIRegister_usvd_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
