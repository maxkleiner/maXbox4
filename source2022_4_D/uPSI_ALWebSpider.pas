unit uPSI_ALWebSpider;
{
This file has been generated by UnitParser v0.7, written by M. Knight Max
and updated by NP. v/d Spek and George Birbilis.  Max Kleiner
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
    add free and httpclient!
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ALWebSpider = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode(CL: TPSPascalCompiler);
procedure SIRegister_TAlTrivialWebSpider_PageDownloadedBinTreeNode(CL: TPSPascalCompiler);
procedure SIRegister_TPageNotYetDownloadedBinTreeNode(CL: TPSPascalCompiler);
procedure SIRegister_TPageDownloadedBinTreeNode(CL: TPSPascalCompiler);
procedure SIRegister_TAlTrivialWebSpider(CL: TPSPascalCompiler);
procedure SIRegister_TAlWebSpider(CL: TPSPascalCompiler);
procedure SIRegister_ALWebSpider(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAlTrivialWebSpider_PageDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPageNotYetDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPageDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAlTrivialWebSpider(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAlWebSpider(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALWebSpider(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAlTrivialWebSpider_Routines(S: TPSExec);

procedure Register;

implementation


uses
   AlAvlBinaryTree
  ,AlHTTPCommon
  ,AlHTTPClient
  ,AlStringList
  ,ALWebSpider
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ALWebSpider]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TALStringKeyAVLBinaryTreeNode', 'TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode') do
  with CL.AddClassN(CL.FindClass('TALStringKeyAVLBinaryTreeNode'),'TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode') do
  begin
    RegisterProperty('DeepLevel', 'Integer', iptrw);
    RegisterProperty('ChildNodes','array[0..255] of TALBaseAVLBinaryTreeNode',iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAlTrivialWebSpider_PageDownloadedBinTreeNode(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TALStringKeyAVLBinaryTreeNode', 'TAlTrivialWebSpider_PageDownloadedBinTreeNode') do
  with CL.AddClassN(CL.FindClass('TALStringKeyAVLBinaryTreeNode'),'TAlTrivialWebSpider_PageDownloadedBinTreeNode') do
  begin
    RegisterProperty('Data', 'AnsiString', iptrw);
     RegisterProperty('ChildNodes','array[0..255] of TALBaseAVLBinaryTreeNode',iptrw);

    //Data: AnsiString;
  end;
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPageNotYetDownloadedBinTreeNode(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TALStringKeyAVLBinaryTreeNode', 'TPageNotYetDownloadedBinTreeNode') do
  with CL.AddClassN(CL.FindClass('TALStringKeyAVLBinaryTreeNode'),'TPageNotYetDownloadedBinTreeNode') do
  begin
    RegisterProperty('DeepLevel', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPageDownloadedBinTreeNode(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TALStringKeyAVLBinaryTreeNode', 'TPageDownloadedBinTreeNode') do
  with CL.AddClassN(CL.FindClass('TALStringKeyAVLBinaryTreeNode'),'TPageDownloadedBinTreeNode') do
  begin
    RegisterProperty('Data', 'AnsiString', iptrw);
  end;
end;



type
{---------------------------------------------------------------}
  TPageDownloadedBinTreeNode = Class(TALStringKeyAVLBinaryTreeNode)
  Private
  Protected
  Public
    Data: AnsiString;
  end;

  {---------------------------------------------------------------------}
  TPageNotYetDownloadedBinTreeNode = Class(TALStringKeyAVLBinaryTreeNode)
  Private
  Protected
  Public
    DeepLevel: Integer;
  end;

{-----------------------------------------------------------------------------}
    function InternalfindNextUrlToDownload(aNode: TPageNotYetDownloadedBinTreeNode;
                                           alowDeepLevel: Integer): TPageNotYetDownloadedBinTreeNode;
    Var aTmpNode1, aTmpNode2: TPageNotYetDownloadedBinTreeNode;
    Begin
      If (not assigned(Anode)) or (aNode.DeepLevel <= alowDeepLevel) then result := aNode
      else begin

        if aNode.ChildNodes[true] <> nil then begin
          aTmpNode1 := InternalfindNextUrlToDownload(TPageNotYetDownloadedBinTreeNode(aNode.ChildNodes[true]), alowDeepLevel);
          If (assigned(aTmpNode1)) and (aTmpNode1.DeepLevel <= alowDeepLevel) then begin
            result := aTmpNode1;
            exit;
          end;
        end
        else aTmpNode1 := nil;

        if aNode.ChildNodes[false] <> nil then begin
          aTmpNode2 := InternalfindNextUrlToDownload(TPageNotYetDownloadedBinTreeNode(aNode.ChildNodes[false]), alowDeepLevel);
          If (assigned(aTmpNode2)) and (aTmpNode2.DeepLevel <= alowDeepLevel) then begin
            result := aTmpNode2;
            exit;
          end;
        end
        else aTmpNode2 := nil;

        result := aNode;
        If assigned(aTmpNode1) and (result.deepLevel > aTmpNode1.deeplevel) then result := aTmpNode1;
        If assigned(aTmpNode2) and (result.deepLevel > aTmpNode2.deeplevel) then result := aTmpNode2;

      end;
    end;


(*----------------------------------------------------------------------------*)
procedure SIRegister_TAlTrivialWebSpider(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Tobject', 'TAlTrivialWebSpider') do
  with CL.AddClassN(CL.FindClass('Tobject'),'TAlTrivialWebSpider') do begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Crawl( aUrl : AnsiString);');
    RegisterMethod('Procedure Crawl1( aUrl : AnsiString; LstUrlCrawled : TALStrings; LstErrorEncountered : TALStrings);');
    RegisterProperty('HttpClient', 'TalHttpClient', iptrw);
    RegisterProperty('DownloadImage', 'Boolean', iptrw);
    RegisterProperty('StayInStartDomain', 'Boolean', iptrw);
    RegisterProperty('UpdateLinkToLocalPath', 'boolean', iptrw);
    RegisterProperty('MaxDeepLevel', 'Integer', iptrw);
    RegisterProperty('ExcludeMask', 'AnsiString', iptrw);
    RegisterProperty('IncludeMask', 'AnsiString', iptrw);
    RegisterProperty('SaveDirectory', 'AnsiString', iptrw);
    RegisterProperty('SplitDirectoryAmount', 'integer', iptrw);
    RegisterProperty('OnCrawlBeforeDownload', 'TAlWebSpiderCrawlBeforeDownloadEvent', iptrw);
    RegisterProperty('OnCrawlAfterDownload', 'TAlWebSpiderCrawlAfterDownloadEvent', iptrw);
    RegisterProperty('OnCrawlFindLink', 'TAlTrivialWebSpiderCrawlFindLinkEvent', iptrw);
    RegisterProperty('OnCrawlProgress', 'TAlTrivialWebSpiderCrawlProgressEvent', iptrw);
    RegisterProperty('OnUpdateLinkToLocalPathProgress', 'TAlTrivialWebSpiderUpdateLinkToLocalPathProgressEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAlWebSpider(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAlWebSpider') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAlWebSpider') do begin
    RegisterMethod('Procedure Crawl');
    RegisterMethod('Procedure UpdateLinkToLocalPath');
    RegisterProperty('OnCrawlBeforeDownload', 'TAlWebSpiderCrawlBeforeDownloadEvent', iptrw);
    RegisterProperty('OnCrawlAfterDownload', 'TAlWebSpiderCrawlAfterDownloadEvent', iptrw);
    RegisterProperty('OnCrawlDownloadSuccess', 'TAlWebSpiderCrawlDownloadSuccessEvent', iptrw);
    RegisterProperty('OnCrawlDownloadRedirect', 'TAlWebSpiderCrawlDownloadRedirectEvent', iptrw);
    RegisterProperty('OnCrawlDownloadError', 'TAlWebSpiderCrawlDownloadErrorEvent', iptrw);
    RegisterProperty('OnCrawlGetNextLink', 'TAlWebSpiderCrawlGetNextLinkEvent', iptrw);
    RegisterProperty('OnCrawlFindLink', 'TAlWebSpiderCrawlFindLinkEvent', iptrw);
    RegisterProperty('OnCrawlEnd', 'TAlWebSpiderCrawlEndEvent', iptrw);
    RegisterProperty('OnUpdateLinkToLocalPathGetNextFile', 'TAlWebSpiderUpdateLinkToLocalPathGetNextFileEvent', iptrw);
    RegisterProperty('OnUpdateLinkToLocalPathFindLink', 'TAlWebSpiderUpdateLinkToLocalPathFindLinkEvent', iptrw);
    RegisterProperty('OnUpdateLinkToLocalPathEnd', 'TAlWebSpiderUpdateLinkToLocalPathEndEvent', iptrw);
    RegisterProperty('HttpClient', 'TalHttpClient', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALWebSpider(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TAlWebSpiderCrawlDownloadSuccessEvent', 'Procedure ( Sender : TO'
   +'bject; Url : AnsiString; HTTPResponseHeader : TALHTTPResponseHeader; HttpR'
   +'esponseContent : TStream; var StopCrawling : Boolean)');
  CL.AddTypeS('TAlWebSpiderCrawlDownloadRedirectEvent', 'Procedure ( Sender : T'
   +'Object; Url : AnsiString; RedirectedTo : AnsiString; HTTPResponseHeader : '
   +'TALHTTPResponseHeader; var StopCrawling : Boolean)');
  CL.AddTypeS('TAlWebSpiderCrawlDownloadErrorEvent', 'Procedure ( Sender : TObj'
   +'ect; URL : AnsiString; ErrorMessage : AnsiString; HTTPResponseHeader : TAL'
   +'HTTPResponseHeader; var StopCrawling : Boolean)');
  CL.AddTypeS('TAlWebSpiderCrawlGetNextLinkEvent', 'Procedure ( Sender : TObjec'
   +'t; var Url : AnsiString)');
  CL.AddTypeS('TAlWebSpiderCrawlFindLinkEvent', 'Procedure ( Sender : TObject; '
   +'HtmlTagString : AnsiString; HtmlTagParams : TALStrings; URL : AnsiString)');
  CL.AddTypeS('TAlWebSpiderCrawlEndEvent', 'Procedure ( Sender : TObject)');
  CL.AddTypeS('TAlWebSpiderCrawlBeforeDownloadEvent', 'Procedure ( Sender : TOb'
   +'ject; Url : AnsiString)');
  CL.AddTypeS('TAlWebSpiderCrawlAfterDownloadEvent', 'Procedure ( Sender : TObj'
   +'ect; Url : AnsiString; HTTPResponseHeader : TALHTTPResponseHeader; HttpRes'
   +'ponseContent : TStream; var StopCrawling : Boolean)');
  CL.AddTypeS('TAlWebSpiderUpdateLinkToLocalPathGetNextFileEvent', 'Procedure ('
   +' Sender : TObject; var FileName : AnsiString; var BaseHref : AnsiString)');
  CL.AddTypeS('TAlWebSpiderUpdateLinkToLocalPathFindLinkEvent', 'Procedure ( Se'
   +'nder : TObject; HtmlTagString : AnsiString; HtmlTagParams : TALStrings; UR'
   +'L : AnsiString; var LocalPath : AnsiString)');
  CL.AddTypeS('TAlWebSpiderUpdateLinkToLocalPathEndEvent', 'Procedure ( Sender: TObject)');
  SIRegister_TAlWebSpider(CL);
  CL.AddTypeS('TAlTrivialWebSpiderCrawlProgressEvent', 'Procedure ( Sender : TO'
   +'bject; UrltoDownload, UrlDownloaded : Integer; CurrentUrl : AnsiString)');
  CL.AddTypeS('TAlTrivialWebSpiderUpdateLinkToLocalPathProgressEvent', 'Procedu'
   +'re ( Sender : TObject; aFileName : AnsiString)');
  CL.AddTypeS('TAlTrivialWebSpiderCrawlFindLinkEvent', 'Procedure ( Sender : TO'
   +'bject; HtmlTagString : AnsiString; HtmlTagParams : TALStrings; URL : AnsiS'
   +'tring; var Ignore : Boolean)');
  CL.AddClassN(CL.FindClass('TObject'),'TALHTTPClient');
  SIRegister_TAlTrivialWebSpider(CL);
  SIRegister_TAlTrivialWebSpider_PageDownloadedBinTreeNode(CL);
  SIRegister_TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode(CL);
  SIRegister_TPageDownloadedBinTreeNode(CL);
  SIRegister_TPageNotYetDownloadedBinTreeNode(CL);

   CL.AddDelphiFunction(' function InternalfindNextUrlToDownload(aNode: TPageNotYetDownloadedBinTreeNode; '+
                                      'alowDeepLevel: Integer): TPageNotYetDownloadedBinTreeNode;');

end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNodeDeepLevel_W(Self: TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode; const T: Integer);
Begin Self.DeepLevel := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNodeDeepLevel_R(Self: TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode; var T: Integer);
Begin T := Self.DeepLevel; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpider_PageDownloadedBinTreeNodeData_W(Self: TAlTrivialWebSpider_PageDownloadedBinTreeNode; const T: AnsiString);
Begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpider_PageDownloadedBinTreeNodeData_R(Self: TAlTrivialWebSpider_PageDownloadedBinTreeNode; var T: AnsiString);
Begin T := Self.Data; end;

procedure TAlTrivialWebSpider_PageDownloadedBinTreeNodeChildnodes_R(Self: TALBaseAVLBinaryTreeNode; var T: AnsiString);
Begin //T := Self.childnodes;
end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnUpdateLinkToLocalPathProgress_W(Self: TAlTrivialWebSpider; const T: TAlTrivialWebSpiderUpdateLinkToLocalPathProgressEvent);
begin Self.OnUpdateLinkToLocalPathProgress := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnUpdateLinkToLocalPathProgress_R(Self: TAlTrivialWebSpider; var T: TAlTrivialWebSpiderUpdateLinkToLocalPathProgressEvent);
begin T := Self.OnUpdateLinkToLocalPathProgress; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlProgress_W(Self: TAlTrivialWebSpider; const T: TAlTrivialWebSpiderCrawlProgressEvent);
begin Self.OnCrawlProgress := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlProgress_R(Self: TAlTrivialWebSpider; var T: TAlTrivialWebSpiderCrawlProgressEvent);
begin T := Self.OnCrawlProgress; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlFindLink_W(Self: TAlTrivialWebSpider; const T: TAlTrivialWebSpiderCrawlFindLinkEvent);
begin Self.OnCrawlFindLink := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlFindLink_R(Self: TAlTrivialWebSpider; var T: TAlTrivialWebSpiderCrawlFindLinkEvent);
begin T := Self.OnCrawlFindLink; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlAfterDownload_W(Self: TAlTrivialWebSpider; const T: TAlWebSpiderCrawlAfterDownloadEvent);
begin Self.OnCrawlAfterDownload := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlAfterDownload_R(Self: TAlTrivialWebSpider; var T: TAlWebSpiderCrawlAfterDownloadEvent);
begin T := Self.OnCrawlAfterDownload; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlBeforeDownload_W(Self: TAlTrivialWebSpider; const T: TAlWebSpiderCrawlBeforeDownloadEvent);
begin Self.OnCrawlBeforeDownload := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderOnCrawlBeforeDownload_R(Self: TAlTrivialWebSpider; var T: TAlWebSpiderCrawlBeforeDownloadEvent);
begin T := Self.OnCrawlBeforeDownload; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderSplitDirectoryAmount_W(Self: TAlTrivialWebSpider; const T: integer);
begin Self.SplitDirectoryAmount := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderSplitDirectoryAmount_R(Self: TAlTrivialWebSpider; var T: integer);
begin T := Self.SplitDirectoryAmount; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderSaveDirectory_W(Self: TAlTrivialWebSpider; const T: AnsiString);
begin Self.SaveDirectory := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderSaveDirectory_R(Self: TAlTrivialWebSpider; var T: AnsiString);
begin T := Self.SaveDirectory; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderIncludeMask_W(Self: TAlTrivialWebSpider; const T: AnsiString);
begin Self.IncludeMask := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderIncludeMask_R(Self: TAlTrivialWebSpider; var T: AnsiString);
begin T := Self.IncludeMask; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderExcludeMask_W(Self: TAlTrivialWebSpider; const T: AnsiString);
begin Self.ExcludeMask := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderExcludeMask_R(Self: TAlTrivialWebSpider; var T: AnsiString);
begin T := Self.ExcludeMask; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderMaxDeepLevel_W(Self: TAlTrivialWebSpider; const T: Integer);
begin Self.MaxDeepLevel := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderMaxDeepLevel_R(Self: TAlTrivialWebSpider; var T: Integer);
begin T := Self.MaxDeepLevel; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderUpdateLinkToLocalPath_W(Self: TAlTrivialWebSpider; const T: boolean);
begin Self.UpdateLinkToLocalPath := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderUpdateLinkToLocalPath_R(Self: TAlTrivialWebSpider; var T: boolean);
begin T := Self.UpdateLinkToLocalPath; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderStayInStartDomain_W(Self: TAlTrivialWebSpider; const T: Boolean);
begin Self.StayInStartDomain := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderStayInStartDomain_R(Self: TAlTrivialWebSpider; var T: Boolean);
begin T := Self.StayInStartDomain; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderDownloadImage_W(Self: TAlTrivialWebSpider; const T: Boolean);
begin Self.DownloadImage := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderDownloadImage_R(Self: TAlTrivialWebSpider; var T: Boolean);
begin T := Self.DownloadImage; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderHttpClient_W(Self: TAlTrivialWebSpider; const T: TalHttpClient);
begin Self.HttpClient := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlTrivialWebSpiderHttpClient_R(Self: TAlTrivialWebSpider; var T: TalHttpClient);
begin T := Self.HttpClient; end;

(*----------------------------------------------------------------------------*)
Procedure TAlTrivialWebSpiderCrawl1_P(Self: TAlTrivialWebSpider;  aUrl : AnsiString; LstUrlCrawled : TALStrings; LstErrorEncountered : TALStrings);
Begin Self.Crawl(aUrl, LstUrlCrawled, LstErrorEncountered); END;

(*----------------------------------------------------------------------------*)
Procedure TAlTrivialWebSpiderCrawl_P(Self: TAlTrivialWebSpider;  aUrl : AnsiString);
Begin Self.Crawl(aUrl); END;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderHttpClient_W(Self: TAlWebSpider; const T: TalHttpClient);
begin Self.HttpClient := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderHttpClient_R(Self: TAlWebSpider; var T: TalHttpClient);
begin T := Self.HttpClient; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnUpdateLinkToLocalPathEnd_W(Self: TAlWebSpider; const T: TAlWebSpiderUpdateLinkToLocalPathEndEvent);
begin Self.OnUpdateLinkToLocalPathEnd := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnUpdateLinkToLocalPathEnd_R(Self: TAlWebSpider; var T: TAlWebSpiderUpdateLinkToLocalPathEndEvent);
begin T := Self.OnUpdateLinkToLocalPathEnd; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnUpdateLinkToLocalPathFindLink_W(Self: TAlWebSpider; const T: TAlWebSpiderUpdateLinkToLocalPathFindLinkEvent);
begin Self.OnUpdateLinkToLocalPathFindLink := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnUpdateLinkToLocalPathFindLink_R(Self: TAlWebSpider; var T: TAlWebSpiderUpdateLinkToLocalPathFindLinkEvent);
begin T := Self.OnUpdateLinkToLocalPathFindLink; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnUpdateLinkToLocalPathGetNextFile_W(Self: TAlWebSpider; const T: TAlWebSpiderUpdateLinkToLocalPathGetNextFileEvent);
begin Self.OnUpdateLinkToLocalPathGetNextFile := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnUpdateLinkToLocalPathGetNextFile_R(Self: TAlWebSpider; var T: TAlWebSpiderUpdateLinkToLocalPathGetNextFileEvent);
begin T := Self.OnUpdateLinkToLocalPathGetNextFile; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlEnd_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlEndEvent);
begin Self.OnCrawlEnd := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlEnd_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlEndEvent);
begin T := Self.OnCrawlEnd; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlFindLink_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlFindLinkEvent);
begin Self.OnCrawlFindLink := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlFindLink_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlFindLinkEvent);
begin T := Self.OnCrawlFindLink; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlGetNextLink_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlGetNextLinkEvent);
begin Self.OnCrawlGetNextLink := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlGetNextLink_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlGetNextLinkEvent);
begin T := Self.OnCrawlGetNextLink; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlDownloadError_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlDownloadErrorEvent);
begin Self.OnCrawlDownloadError := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlDownloadError_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlDownloadErrorEvent);
begin T := Self.OnCrawlDownloadError; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlDownloadRedirect_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlDownloadRedirectEvent);
begin Self.OnCrawlDownloadRedirect := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlDownloadRedirect_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlDownloadRedirectEvent);
begin T := Self.OnCrawlDownloadRedirect; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlDownloadSuccess_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlDownloadSuccessEvent);
begin Self.OnCrawlDownloadSuccess := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlDownloadSuccess_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlDownloadSuccessEvent);
begin T := Self.OnCrawlDownloadSuccess; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlAfterDownload_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlAfterDownloadEvent);
begin Self.OnCrawlAfterDownload := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlAfterDownload_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlAfterDownloadEvent);
begin T := Self.OnCrawlAfterDownload; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlBeforeDownload_W(Self: TAlWebSpider; const T: TAlWebSpiderCrawlBeforeDownloadEvent);
begin Self.OnCrawlBeforeDownload := T; end;

(*----------------------------------------------------------------------------*)
procedure TAlWebSpiderOnCrawlBeforeDownload_R(Self: TAlWebSpider; var T: TAlWebSpiderCrawlBeforeDownloadEvent);
begin T := Self.OnCrawlBeforeDownload; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode) do
  begin
    RegisterPropertyHelper(@TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNodeDeepLevel_R,@TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNodeDeepLevel_W,'DeepLevel');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAlTrivialWebSpider_PageDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAlTrivialWebSpider_PageDownloadedBinTreeNode) do
  begin
    RegisterPropertyHelper(@TAlTrivialWebSpider_PageDownloadedBinTreeNodeData_R,@TAlTrivialWebSpider_PageDownloadedBinTreeNodeData_W,'Data');
  end;
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TPageNotYetDownloadedBinTreeNodeDeepLevel_W(Self: TPageNotYetDownloadedBinTreeNode; const T: Integer);
Begin Self.DeepLevel := T; end;

(*----------------------------------------------------------------------------*)
procedure TPageNotYetDownloadedBinTreeNodeDeepLevel_R(Self: TPageNotYetDownloadedBinTreeNode; var T: Integer);
Begin T := Self.DeepLevel; end;

(*----------------------------------------------------------------------------*)
procedure TPageDownloadedBinTreeNodeData_W(Self: TPageDownloadedBinTreeNode; const T: AnsiString);
Begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TPageDownloadedBinTreeNodeData_R(Self: TPageDownloadedBinTreeNode; var T: AnsiString);
Begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPageNotYetDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPageNotYetDownloadedBinTreeNode) do
  begin
    RegisterPropertyHelper(@TPageNotYetDownloadedBinTreeNodeDeepLevel_R,@TPageNotYetDownloadedBinTreeNodeDeepLevel_W,'DeepLevel');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPageDownloadedBinTreeNode(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPageDownloadedBinTreeNode) do
  begin
    RegisterPropertyHelper(@TPageDownloadedBinTreeNodeData_R,@TPageDownloadedBinTreeNodeData_W,'Data');
  end;
end;


(*----------------------------------------------------------------------------*)
procedure RIRegister_TAlTrivialWebSpider(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAlTrivialWebSpider) do begin
    RegisterConstructor(@TAlTrivialWebSpider.Create, 'Create');
    RegisterMethod(@TAlTrivialWebSpider.Destroy, 'Free');
    RegisterMethod(@TAlTrivialWebSpiderCrawl_P, 'Crawl');
    RegisterMethod(@TAlTrivialWebSpiderCrawl1_P, 'Crawl1');
    RegisterPropertyHelper(@TAlTrivialWebSpiderHttpClient_R,@TAlTrivialWebSpiderHttpClient_W,'HttpClient');
    RegisterPropertyHelper(@TAlTrivialWebSpiderDownloadImage_R,@TAlTrivialWebSpiderDownloadImage_W,'DownloadImage');
    RegisterPropertyHelper(@TAlTrivialWebSpiderStayInStartDomain_R,@TAlTrivialWebSpiderStayInStartDomain_W,'StayInStartDomain');
    RegisterPropertyHelper(@TAlTrivialWebSpiderUpdateLinkToLocalPath_R,@TAlTrivialWebSpiderUpdateLinkToLocalPath_W,'UpdateLinkToLocalPath');
    RegisterPropertyHelper(@TAlTrivialWebSpiderMaxDeepLevel_R,@TAlTrivialWebSpiderMaxDeepLevel_W,'MaxDeepLevel');
    RegisterPropertyHelper(@TAlTrivialWebSpiderExcludeMask_R,@TAlTrivialWebSpiderExcludeMask_W,'ExcludeMask');
    RegisterPropertyHelper(@TAlTrivialWebSpiderIncludeMask_R,@TAlTrivialWebSpiderIncludeMask_W,'IncludeMask');
    RegisterPropertyHelper(@TAlTrivialWebSpiderSaveDirectory_R,@TAlTrivialWebSpiderSaveDirectory_W,'SaveDirectory');
    RegisterPropertyHelper(@TAlTrivialWebSpiderSplitDirectoryAmount_R,@TAlTrivialWebSpiderSplitDirectoryAmount_W,'SplitDirectoryAmount');
    RegisterPropertyHelper(@TAlTrivialWebSpiderOnCrawlBeforeDownload_R,@TAlTrivialWebSpiderOnCrawlBeforeDownload_W,'OnCrawlBeforeDownload');
    RegisterPropertyHelper(@TAlTrivialWebSpiderOnCrawlAfterDownload_R,@TAlTrivialWebSpiderOnCrawlAfterDownload_W,'OnCrawlAfterDownload');
    RegisterPropertyHelper(@TAlTrivialWebSpiderOnCrawlFindLink_R,@TAlTrivialWebSpiderOnCrawlFindLink_W,'OnCrawlFindLink');
    RegisterPropertyHelper(@TAlTrivialWebSpiderOnCrawlProgress_R,@TAlTrivialWebSpiderOnCrawlProgress_W,'OnCrawlProgress');
    RegisterPropertyHelper(@TAlTrivialWebSpiderOnUpdateLinkToLocalPathProgress_R,@TAlTrivialWebSpiderOnUpdateLinkToLocalPathProgress_W,'OnUpdateLinkToLocalPathProgress');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAlWebSpider(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAlWebSpider) do
  begin
    RegisterMethod(@TAlWebSpider.Crawl, 'Crawl');
    RegisterMethod(@TAlWebSpider.UpdateLinkToLocalPath, 'UpdateLinkToLocalPath');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlBeforeDownload_R,@TAlWebSpiderOnCrawlBeforeDownload_W,'OnCrawlBeforeDownload');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlAfterDownload_R,@TAlWebSpiderOnCrawlAfterDownload_W,'OnCrawlAfterDownload');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlDownloadSuccess_R,@TAlWebSpiderOnCrawlDownloadSuccess_W,'OnCrawlDownloadSuccess');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlDownloadRedirect_R,@TAlWebSpiderOnCrawlDownloadRedirect_W,'OnCrawlDownloadRedirect');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlDownloadError_R,@TAlWebSpiderOnCrawlDownloadError_W,'OnCrawlDownloadError');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlGetNextLink_R,@TAlWebSpiderOnCrawlGetNextLink_W,'OnCrawlGetNextLink');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlFindLink_R,@TAlWebSpiderOnCrawlFindLink_W,'OnCrawlFindLink');
    RegisterPropertyHelper(@TAlWebSpiderOnCrawlEnd_R,@TAlWebSpiderOnCrawlEnd_W,'OnCrawlEnd');
    RegisterPropertyHelper(@TAlWebSpiderOnUpdateLinkToLocalPathGetNextFile_R,@TAlWebSpiderOnUpdateLinkToLocalPathGetNextFile_W,'OnUpdateLinkToLocalPathGetNextFile');
    RegisterPropertyHelper(@TAlWebSpiderOnUpdateLinkToLocalPathFindLink_R,@TAlWebSpiderOnUpdateLinkToLocalPathFindLink_W,'OnUpdateLinkToLocalPathFindLink');
    RegisterPropertyHelper(@TAlWebSpiderOnUpdateLinkToLocalPathEnd_R,@TAlWebSpiderOnUpdateLinkToLocalPathEnd_W,'OnUpdateLinkToLocalPathEnd');
    RegisterPropertyHelper(@TAlWebSpiderHttpClient_R,@TAlWebSpiderHttpClient_W,'HttpClient');
  end;
end;

procedure RIRegister_TAlTrivialWebSpider_Routines(S: TPSExec);
begin
S.RegisterDelphiFunction(@InternalfindNextUrlToDownload, 'InternalfindNextUrlToDownload', cdRegister);

//function InternalfindNextUrlToDownload(aNode: TPageNotYetDownloadedBinTreeNode;
  //                                         alowDeepLevel: Integer): TPageNotYetDownloadedBinTreeNode;

end;


(*----------------------------------------------------------------------------*)
procedure RIRegister_ALWebSpider(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAlWebSpider(CL);
  RIRegister_TAlTrivialWebSpider(CL);
  RIRegister_TAlTrivialWebSpider_PageDownloadedBinTreeNode(CL);
  RIRegister_TAlTrivialWebSpider_PageNotYetDownloadedBinTreeNode(CL);
  RIRegister_TPageDownloadedBinTreeNode(CL);
  RIRegister_TPageNotYetDownloadedBinTreeNode(CL);
end;

 
 
{ TPSImport_ALWebSpider }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ALWebSpider.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ALWebSpider(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ALWebSpider.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ALWebSpider(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
