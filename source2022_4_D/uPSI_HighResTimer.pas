unit uPSI_HighResTimer;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
     fix free of hirestimer
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_HighResTimer = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMMTimerThread(CL: TPSPascalCompiler);
procedure SIRegister_THighResTimer(CL: TPSPascalCompiler);
procedure SIRegister_HighResTimer(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_HighResTimer_Routines(S: TPSExec);
procedure RIRegister_TMMTimerThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_THighResTimer(CL: TPSRuntimeClassImporter);
procedure RIRegister_HighResTimer(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Graphics
  ,Controls
  ,Forms
  ,Dialogs
  ,MMSystem
  ,HighResTimer
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_HighResTimer]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMMTimerThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'TMMTimerThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'TMMTimerThread') do begin
    RegisterMethod('Constructor Create( CreateSuspended : Boolean)');
        RegisterMethod('Procedure Free');
     RegisterMethod('Procedure WaitNextTick');
    RegisterProperty('Accuracy', 'Cardinal', iptrw);
    RegisterProperty('CountValue', 'Int64', iptr);
    RegisterProperty('Resolution', 'Cardinal', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THighResTimer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'THighResTimer') do
  with CL.AddClassN(CL.FindClass('TComponent'),'THighResTimer') do begin
    RegisterMethod('Constructor Create( aOwner : TComponent)');
        RegisterMethod('Procedure Free');
     RegisterMethod('Procedure Calibrate( msCalibrateTime : Cardinal)');
    RegisterMethod('Function GetTSCValue : Int64');
    RegisterMethod('Function GetHPValue : Int64');
    RegisterMethod('Function GetCountValue : Int64');
    RegisterMethod('Function GetCounterTicks( usTime : Cardinal) : Int64');
    RegisterMethod('Procedure Wait( usTime : Cardinal)');
    RegisterMethod('Procedure StartTimeMeasure');
    RegisterMethod('Procedure StopTimeMeasure');
    RegisterMethod('Function GetTimeDifference : Double');
    RegisterProperty('Accuracy', 'Cardinal', iptrw);
    RegisterProperty('CountSpeed', 'Double', iptrw);
    RegisterProperty('Enabled', 'Boolean', iptrw);
    RegisterProperty('MinAccuracy', 'Cardinal', iptrw);
    RegisterProperty('MinResolution', 'Cardinal', iptrw);
    RegisterProperty('Resolution', 'Cardinal', iptrw);
    RegisterProperty('ThreadClass', 'TThreadClass', iptrw);
    RegisterProperty('ThreadPriority', 'TThreadPriority', iptrw);
    RegisterProperty('TSC', 'Boolean', iptr);
    RegisterProperty('UseTSC', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_HighResTimer(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TThreadClass', '( tcIdle, tcNormal, tcHigh, tcRealTime )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TMMTimerThread');
  CL.AddTypeS('TGetCounterValue', 'Function  : Int64');
  SIRegister_THighResTimer(CL);
  SIRegister_TMMTimerThread(CL);
 CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TMMTimerThreadResolution_W(Self: TMMTimerThread; const T: Cardinal);
begin Self.Resolution := T; end;

(*----------------------------------------------------------------------------*)
procedure TMMTimerThreadResolution_R(Self: TMMTimerThread; var T: Cardinal);
begin T := Self.Resolution; end;

(*----------------------------------------------------------------------------*)
procedure TMMTimerThreadCountValue_R(Self: TMMTimerThread; var T: Int64);
begin T := Self.CountValue; end;

(*----------------------------------------------------------------------------*)
procedure TMMTimerThreadAccuracy_W(Self: TMMTimerThread; const T: Cardinal);
begin Self.Accuracy := T; end;

(*----------------------------------------------------------------------------*)
procedure TMMTimerThreadAccuracy_R(Self: TMMTimerThread; var T: Cardinal);
begin T := Self.Accuracy; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerUseTSC_W(Self: THighResTimer; const T: Boolean);
begin Self.UseTSC := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerUseTSC_R(Self: THighResTimer; var T: Boolean);
begin T := Self.UseTSC; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerTSC_R(Self: THighResTimer; var T: Boolean);
begin T := Self.TSC; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerThreadPriority_W(Self: THighResTimer; const T: TThreadPriority);
begin Self.ThreadPriority := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerThreadPriority_R(Self: THighResTimer; var T: TThreadPriority);
begin T := Self.ThreadPriority; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerThreadClass_W(Self: THighResTimer; const T: TThreadClass);
begin Self.ThreadClass := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerThreadClass_R(Self: THighResTimer; var T: TThreadClass);
begin T := Self.ThreadClass; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerResolution_W(Self: THighResTimer; const T: Cardinal);
begin Self.Resolution := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerResolution_R(Self: THighResTimer; var T: Cardinal);
begin T := Self.Resolution; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerMinResolution_W(Self: THighResTimer; const T: Cardinal);
begin Self.MinResolution := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerMinResolution_R(Self: THighResTimer; var T: Cardinal);
begin T := Self.MinResolution; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerMinAccuracy_W(Self: THighResTimer; const T: Cardinal);
begin Self.MinAccuracy := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerMinAccuracy_R(Self: THighResTimer; var T: Cardinal);
begin T := Self.MinAccuracy; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerEnabled_W(Self: THighResTimer; const T: Boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerEnabled_R(Self: THighResTimer; var T: Boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerCountSpeed_W(Self: THighResTimer; const T: Double);
begin Self.CountSpeed := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerCountSpeed_R(Self: THighResTimer; var T: Double);
begin T := Self.CountSpeed; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerAccuracy_W(Self: THighResTimer; const T: Cardinal);
begin Self.Accuracy := T; end;

(*----------------------------------------------------------------------------*)
procedure THighResTimerAccuracy_R(Self: THighResTimer; var T: Cardinal);
begin T := Self.Accuracy; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_HighResTimer_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMMTimerThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMMTimerThread) do begin
    RegisterConstructor(@TMMTimerThread.Create, 'Create');
     RegisterMethod(@TMMTimerThread.Destroy, 'Free');
      RegisterMethod(@TMMTimerThread.WaitNextTick, 'WaitNextTick');
    RegisterPropertyHelper(@TMMTimerThreadAccuracy_R,@TMMTimerThreadAccuracy_W,'Accuracy');
    RegisterPropertyHelper(@TMMTimerThreadCountValue_R,nil,'CountValue');
    RegisterPropertyHelper(@TMMTimerThreadResolution_R,@TMMTimerThreadResolution_W,'Resolution');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THighResTimer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THighResTimer) do begin
    RegisterConstructor(@THighResTimer.Create, 'Create');
    //RegisterMethod(@TMMTimerThread.Destroy, 'Free');
    RegisterMethod(@THighResTimer.Destroy, 'Free');
        RegisterMethod(@THighResTimer.Calibrate, 'Calibrate');
    RegisterMethod(@THighResTimer.GetTSCValue, 'GetTSCValue');
    RegisterMethod(@THighResTimer.GetHPValue, 'GetHPValue');
    RegisterMethod(@THighResTimer.GetCountValue, 'GetCountValue');
    RegisterMethod(@THighResTimer.GetCounterTicks, 'GetCounterTicks');
    RegisterMethod(@THighResTimer.Wait, 'Wait');
    RegisterMethod(@THighResTimer.StartTimeMeasure, 'StartTimeMeasure');
    RegisterMethod(@THighResTimer.StopTimeMeasure, 'StopTimeMeasure');
    RegisterMethod(@THighResTimer.GetTimeDifference, 'GetTimeDifference');
    RegisterPropertyHelper(@THighResTimerAccuracy_R,@THighResTimerAccuracy_W,'Accuracy');
    RegisterPropertyHelper(@THighResTimerCountSpeed_R,@THighResTimerCountSpeed_W,'CountSpeed');
    RegisterPropertyHelper(@THighResTimerEnabled_R,@THighResTimerEnabled_W,'Enabled');
    RegisterPropertyHelper(@THighResTimerMinAccuracy_R,@THighResTimerMinAccuracy_W,'MinAccuracy');
    RegisterPropertyHelper(@THighResTimerMinResolution_R,@THighResTimerMinResolution_W,'MinResolution');
    RegisterPropertyHelper(@THighResTimerResolution_R,@THighResTimerResolution_W,'Resolution');
    RegisterPropertyHelper(@THighResTimerThreadClass_R,@THighResTimerThreadClass_W,'ThreadClass');
    RegisterPropertyHelper(@THighResTimerThreadPriority_R,@THighResTimerThreadPriority_W,'ThreadPriority');
    RegisterPropertyHelper(@THighResTimerTSC_R,nil,'TSC');
    RegisterPropertyHelper(@THighResTimerUseTSC_R,@THighResTimerUseTSC_W,'UseTSC');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_HighResTimer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMMTimerThread) do
  RIRegister_THighResTimer(CL);
  RIRegister_TMMTimerThread(CL);
end;

 
 
{ TPSImport_HighResTimer }
(*----------------------------------------------------------------------------*)
procedure TPSImport_HighResTimer.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_HighResTimer(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_HighResTimer.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_HighResTimer(ri);
  RIRegister_HighResTimer_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
