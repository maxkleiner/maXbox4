unit uPSI_rfc1213ip;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_rfc1213ip = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_Tip(CL: TPSPascalCompiler);
procedure SIRegister_TipNetToMediaTable(CL: TPSPascalCompiler);
procedure SIRegister_TipRouteTable(CL: TPSPascalCompiler);
procedure SIRegister_TipAddrTable(CL: TPSPascalCompiler);
procedure SIRegister_rfc1213ip(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Tip(CL: TPSRuntimeClassImporter);
procedure RIRegister_TipNetToMediaTable(CL: TPSRuntimeClassImporter);
procedure RIRegister_TipRouteTable(CL: TPSRuntimeClassImporter);
procedure RIRegister_TipAddrTable(CL: TPSRuntimeClassImporter);
procedure RIRegister_rfc1213ip(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   rfc1213const
  ,rfc1213util
  ,asn1util
  ,snmpsend
  ,rfc1213ip
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_rfc1213ip]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_Tip(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'Tip') do
  with CL.AddClassN(CL.FindClass('TObject'),'Tip') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function Get : boolean');
    RegisterMethod('Procedure Bind( const BHostAddress, BReadCommunity, BWriteCommunity : string)');
    RegisterMethod('Function IpNetMaskForIfIndex( const ifIndex : string) : string');
    RegisterProperty('HostAddress', 'string', iptr);
    RegisterProperty('ReadCommunity', 'string', iptr);
    RegisterProperty('WriteCommunity', 'string', iptr);
    RegisterProperty('ipForwarding', 'string', iptrw);
    RegisterProperty('ipDefaultTTL', 'string', iptr);
    RegisterProperty('ipInReceives', 'string', iptr);
    RegisterProperty('ipInHdrErrors', 'string', iptr);
    RegisterProperty('ipInAddrErrors', 'string', iptr);
    RegisterProperty('ipForwDatagrams', 'string', iptr);
    RegisterProperty('ipInUnknownProtos', 'string', iptr);
    RegisterProperty('ipInDiscards', 'string', iptr);
    RegisterProperty('ipInDelivers', 'string', iptr);
    RegisterProperty('ipOutRequests', 'string', iptr);
    RegisterProperty('ipOutDiscards', 'string', iptr);
    RegisterProperty('ipOutNoRoutes', 'string', iptr);
    RegisterProperty('ipReasmTimeout', 'string', iptr);
    RegisterProperty('ipReasmReqds', 'string', iptr);
    RegisterProperty('ipReasmOKs', 'string', iptr);
    RegisterProperty('ipReasmFails', 'string', iptr);
    RegisterProperty('ipFragOKs', 'string', iptr);
    RegisterProperty('ipFragFails', 'string', iptr);
    RegisterProperty('ipFragCreates', 'string', iptr);
    RegisterProperty('ipAddrTable', 'TipAddrTable', iptrw);
    RegisterProperty('ipRouteTable', 'TipRouteTable', iptrw);
    RegisterProperty('ipNetToMediaTable', 'TipNetToMediaTable', iptrw);
    RegisterProperty('ipRoutingDiscards', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TipNetToMediaTable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TipNetToMediaTable') do
  with CL.AddClassN(CL.FindClass('TObject'),'TipNetToMediaTable') do
  begin
    RegisterProperty('ipNetToMediaEntry', 'array of TipNetToMediaEntry', iptrw);
    RegisterMethod('Constructor Create( AOwner : Tip)');
    RegisterMethod('Function Get : boolean');
    RegisterProperty('Count', 'integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TipRouteTable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TipRouteTable') do
  with CL.AddClassN(CL.FindClass('TObject'),'TipRouteTable') do
  begin
    RegisterProperty('ipRouteEntry', 'array of TipRouteEntry', iptrw);
    RegisterMethod('Constructor Create( AOwner : Tip)');
    RegisterMethod('Function Get : boolean');
    RegisterProperty('Count', 'integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TipAddrTable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TipAddrTable') do
  with CL.AddClassN(CL.FindClass('TObject'),'TipAddrTable') do
  begin
    RegisterProperty('ipAddrEntry', 'array of TipAddrEntry', iptrw);
    RegisterMethod('Constructor Create( AOwner : Tip)');
    RegisterMethod('Function Get : boolean');
    RegisterMethod('Function IpAddrForIfIndex( const ifIndex : string) : string');
    RegisterProperty('Count', 'integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_rfc1213ip(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('version','String').SetString( 'rfc1213ip v.0.2.2');
  CL.AddClassN(CL.FindClass('TOBJECT'),'Tip');
  CL.AddTypeS('TipAddrEntry', 'record ipAdEntAddr : string; ipAdEntIfIndex : st'
   +'ring; ipAdEntNetMask : string; ipAdEntBcastAddr : string; ipAdEntReasmMaxS'
   +'ize : string; end');
  SIRegister_TipAddrTable(CL);
  CL.AddTypeS('TipRouteEntry', 'record ipRouteDest : string; ipRouteIfIndex : s'
   +'tring; ipRouteMetric1 : string; ipRouteMetric2 : string; ipRouteMetric3 : '
   +'string; ipRouteMetric4 : string; ipRouteNextHop : string; ipRouteType : st'
   +'ring; ipRouteProto : string; ipRouteAge : string; ipRouteMask : string; ip'
   +'RouteMetric5 : string; ipRouteInfo : string; end');
  SIRegister_TipRouteTable(CL);
  CL.AddTypeS('TipNetToMediaEntry', 'record ipNetToMediaIfIndex : string; ipNet'
   +'ToMediaPhysAddress : string; ipNetToMediaNetAddress : string; ipNetToMedia'
   +'Type : string; end');
  SIRegister_TipNetToMediaTable(CL);
  SIRegister_Tip(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TipipRoutingDiscards_R(Self: Tip; var T: string);
begin T := Self.ipRoutingDiscards; end;

(*----------------------------------------------------------------------------*)
procedure TipipNetToMediaTable_W(Self: Tip; const T: TipNetToMediaTable);
Begin Self.ipNetToMediaTable := T; end;

(*----------------------------------------------------------------------------*)
procedure TipipNetToMediaTable_R(Self: Tip; var T: TipNetToMediaTable);
Begin T := Self.ipNetToMediaTable; end;

(*----------------------------------------------------------------------------*)
procedure TipipRouteTable_W(Self: Tip; const T: TipRouteTable);
Begin Self.ipRouteTable := T; end;

(*----------------------------------------------------------------------------*)
procedure TipipRouteTable_R(Self: Tip; var T: TipRouteTable);
Begin T := Self.ipRouteTable; end;

(*----------------------------------------------------------------------------*)
procedure TipipAddrTable_W(Self: Tip; const T: TipAddrTable);
Begin Self.ipAddrTable := T; end;

(*----------------------------------------------------------------------------*)
procedure TipipAddrTable_R(Self: Tip; var T: TipAddrTable);
Begin T := Self.ipAddrTable; end;

(*----------------------------------------------------------------------------*)
procedure TipipFragCreates_R(Self: Tip; var T: string);
begin T := Self.ipFragCreates; end;

(*----------------------------------------------------------------------------*)
procedure TipipFragFails_R(Self: Tip; var T: string);
begin T := Self.ipFragFails; end;

(*----------------------------------------------------------------------------*)
procedure TipipFragOKs_R(Self: Tip; var T: string);
begin T := Self.ipFragOKs; end;

(*----------------------------------------------------------------------------*)
procedure TipipReasmFails_R(Self: Tip; var T: string);
begin T := Self.ipReasmFails; end;

(*----------------------------------------------------------------------------*)
procedure TipipReasmOKs_R(Self: Tip; var T: string);
begin T := Self.ipReasmOKs; end;

(*----------------------------------------------------------------------------*)
procedure TipipReasmReqds_R(Self: Tip; var T: string);
begin T := Self.ipReasmReqds; end;

(*----------------------------------------------------------------------------*)
procedure TipipReasmTimeout_R(Self: Tip; var T: string);
begin T := Self.ipReasmTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TipipOutNoRoutes_R(Self: Tip; var T: string);
begin T := Self.ipOutNoRoutes; end;

(*----------------------------------------------------------------------------*)
procedure TipipOutDiscards_R(Self: Tip; var T: string);
begin T := Self.ipOutDiscards; end;

(*----------------------------------------------------------------------------*)
procedure TipipOutRequests_R(Self: Tip; var T: string);
begin T := Self.ipOutRequests; end;

(*----------------------------------------------------------------------------*)
procedure TipipInDelivers_R(Self: Tip; var T: string);
begin T := Self.ipInDelivers; end;

(*----------------------------------------------------------------------------*)
procedure TipipInDiscards_R(Self: Tip; var T: string);
begin T := Self.ipInDiscards; end;

(*----------------------------------------------------------------------------*)
procedure TipipInUnknownProtos_R(Self: Tip; var T: string);
begin T := Self.ipInUnknownProtos; end;

(*----------------------------------------------------------------------------*)
procedure TipipForwDatagrams_R(Self: Tip; var T: string);
begin T := Self.ipForwDatagrams; end;

(*----------------------------------------------------------------------------*)
procedure TipipInAddrErrors_R(Self: Tip; var T: string);
begin T := Self.ipInAddrErrors; end;

(*----------------------------------------------------------------------------*)
procedure TipipInHdrErrors_R(Self: Tip; var T: string);
begin T := Self.ipInHdrErrors; end;

(*----------------------------------------------------------------------------*)
procedure TipipInReceives_R(Self: Tip; var T: string);
begin T := Self.ipInReceives; end;

(*----------------------------------------------------------------------------*)
procedure TipipDefaultTTL_R(Self: Tip; var T: string);
begin T := Self.ipDefaultTTL; end;

(*----------------------------------------------------------------------------*)
procedure TipipForwarding_W(Self: Tip; const T: string);
begin Self.ipForwarding := T; end;

(*----------------------------------------------------------------------------*)
procedure TipipForwarding_R(Self: Tip; var T: string);
begin T := Self.ipForwarding; end;

(*----------------------------------------------------------------------------*)
procedure TipWriteCommunity_R(Self: Tip; var T: string);
begin T := Self.WriteCommunity; end;

(*----------------------------------------------------------------------------*)
procedure TipReadCommunity_R(Self: Tip; var T: string);
begin T := Self.ReadCommunity; end;

(*----------------------------------------------------------------------------*)
procedure TipHostAddress_R(Self: Tip; var T: string);
begin T := Self.HostAddress; end;

(*----------------------------------------------------------------------------*)
procedure TipNetToMediaTableCount_R(Self: TipNetToMediaTable; var T: integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TipNetToMediaTableipNetToMediaEntry_W(Self: TipNetToMediaTable; const T: array of TipNetToMediaEntry);
Begin Self.ipNetToMediaEntry := T; end;

(*----------------------------------------------------------------------------*)
procedure TipNetToMediaTableipNetToMediaEntry_R(Self: TipNetToMediaTable; var T: array of TipNetToMediaEntry);
Begin T := Self.ipNetToMediaEntry; end;

(*----------------------------------------------------------------------------*)
procedure TipRouteTableCount_R(Self: TipRouteTable; var T: integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TipRouteTableipRouteEntry_W(Self: TipRouteTable; const T: array of TipRouteEntry);
Begin Self.ipRouteEntry := T; end;

(*----------------------------------------------------------------------------*)
procedure TipRouteTableipRouteEntry_R(Self: TipRouteTable; var T: array of TipRouteEntry);
Begin T := Self.ipRouteEntry; end;

(*----------------------------------------------------------------------------*)
procedure TipAddrTableCount_R(Self: TipAddrTable; var T: integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TipAddrTableipAddrEntry_W(Self: TipAddrTable; const T: array of TipAddrEntry);
Begin Self.ipAddrEntry := T; end;

(*----------------------------------------------------------------------------*)
procedure TipAddrTableipAddrEntry_R(Self: TipAddrTable; var T: array of TipAddrEntry);
Begin T := Self.ipAddrEntry; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Tip(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(Tip) do
  begin
    RegisterConstructor(@Tip.Create, 'Create');
    RegisterMethod(@Tip.Get, 'Get');
    RegisterMethod(@Tip.Bind, 'Bind');
    RegisterMethod(@Tip.IpNetMaskForIfIndex, 'IpNetMaskForIfIndex');
    RegisterPropertyHelper(@TipHostAddress_R,nil,'HostAddress');
    RegisterPropertyHelper(@TipReadCommunity_R,nil,'ReadCommunity');
    RegisterPropertyHelper(@TipWriteCommunity_R,nil,'WriteCommunity');
    RegisterPropertyHelper(@TipipForwarding_R,@TipipForwarding_W,'ipForwarding');
    RegisterPropertyHelper(@TipipDefaultTTL_R,nil,'ipDefaultTTL');
    RegisterPropertyHelper(@TipipInReceives_R,nil,'ipInReceives');
    RegisterPropertyHelper(@TipipInHdrErrors_R,nil,'ipInHdrErrors');
    RegisterPropertyHelper(@TipipInAddrErrors_R,nil,'ipInAddrErrors');
    RegisterPropertyHelper(@TipipForwDatagrams_R,nil,'ipForwDatagrams');
    RegisterPropertyHelper(@TipipInUnknownProtos_R,nil,'ipInUnknownProtos');
    RegisterPropertyHelper(@TipipInDiscards_R,nil,'ipInDiscards');
    RegisterPropertyHelper(@TipipInDelivers_R,nil,'ipInDelivers');
    RegisterPropertyHelper(@TipipOutRequests_R,nil,'ipOutRequests');
    RegisterPropertyHelper(@TipipOutDiscards_R,nil,'ipOutDiscards');
    RegisterPropertyHelper(@TipipOutNoRoutes_R,nil,'ipOutNoRoutes');
    RegisterPropertyHelper(@TipipReasmTimeout_R,nil,'ipReasmTimeout');
    RegisterPropertyHelper(@TipipReasmReqds_R,nil,'ipReasmReqds');
    RegisterPropertyHelper(@TipipReasmOKs_R,nil,'ipReasmOKs');
    RegisterPropertyHelper(@TipipReasmFails_R,nil,'ipReasmFails');
    RegisterPropertyHelper(@TipipFragOKs_R,nil,'ipFragOKs');
    RegisterPropertyHelper(@TipipFragFails_R,nil,'ipFragFails');
    RegisterPropertyHelper(@TipipFragCreates_R,nil,'ipFragCreates');
    RegisterPropertyHelper(@TipipAddrTable_R,@TipipAddrTable_W,'ipAddrTable');
    RegisterPropertyHelper(@TipipRouteTable_R,@TipipRouteTable_W,'ipRouteTable');
    RegisterPropertyHelper(@TipipNetToMediaTable_R,@TipipNetToMediaTable_W,'ipNetToMediaTable');
    RegisterPropertyHelper(@TipipRoutingDiscards_R,nil,'ipRoutingDiscards');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TipNetToMediaTable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TipNetToMediaTable) do
  begin
    RegisterPropertyHelper(@TipNetToMediaTableipNetToMediaEntry_R,@TipNetToMediaTableipNetToMediaEntry_W,'ipNetToMediaEntry');
    RegisterConstructor(@TipNetToMediaTable.Create, 'Create');
    RegisterMethod(@TipNetToMediaTable.Get, 'Get');
    RegisterPropertyHelper(@TipNetToMediaTableCount_R,nil,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TipRouteTable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TipRouteTable) do
  begin
    RegisterPropertyHelper(@TipRouteTableipRouteEntry_R,@TipRouteTableipRouteEntry_W,'ipRouteEntry');
    RegisterConstructor(@TipRouteTable.Create, 'Create');
    RegisterMethod(@TipRouteTable.Get, 'Get');
    RegisterPropertyHelper(@TipRouteTableCount_R,nil,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TipAddrTable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TipAddrTable) do
  begin
    RegisterPropertyHelper(@TipAddrTableipAddrEntry_R,@TipAddrTableipAddrEntry_W,'ipAddrEntry');
    RegisterConstructor(@TipAddrTable.Create, 'Create');
    RegisterMethod(@TipAddrTable.Get, 'Get');
    RegisterMethod(@TipAddrTable.IpAddrForIfIndex, 'IpAddrForIfIndex');
    RegisterPropertyHelper(@TipAddrTableCount_R,nil,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_rfc1213ip(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(Tip) do
  RIRegister_TipAddrTable(CL);
  RIRegister_TipRouteTable(CL);
  RIRegister_TipNetToMediaTable(CL);
  RIRegister_Tip(CL);
end;

 
 
{ TPSImport_rfc1213ip }
(*----------------------------------------------------------------------------*)
procedure TPSImport_rfc1213ip.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_rfc1213ip(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_rfc1213ip.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_rfc1213ip(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
