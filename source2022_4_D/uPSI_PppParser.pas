unit uPSI_PppParser;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_PppParser = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPppParser(CL: TPSPascalCompiler);
procedure SIRegister_PppParser(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TPppParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_PppParser(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   PppState
  ,PppLexer
  ,JclStrHashMap
  ,PppParser
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_PppParser]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPppParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TPppParser') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TPppParser') do begin
    RegisterMethod('Constructor Create( AStream : TStream; APppState : TPppState)');
        RegisterMethod('Procedure Free');
      RegisterMethod('Function Parse : string');
    RegisterProperty('Statistics', 'TStringList', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_PppParser(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPppParserError');
  SIRegister_TPppParser(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TPppParserStatistics_R(Self: TPppParser; var T: TStringList);
begin T := Self.Statistics; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPppParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPppParser) do begin
    RegisterConstructor(@TPppParser.Create, 'Create');
        RegisterMethod(@TPppParser.Destroy, 'Free');
    RegisterMethod(@TPppParser.Parse, 'Parse');
    RegisterPropertyHelper(@TPppParserStatistics_R,nil,'Statistics');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_PppParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EPppParserError) do
  RIRegister_TPppParser(CL);
end;

 
 
{ TPSImport_PppParser }
(*----------------------------------------------------------------------------*)
procedure TPSImport_PppParser.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_PppParser(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_PppParser.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_PppParser(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
