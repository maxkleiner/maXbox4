unit uPSI_SendMail_For_Ewb;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SendMail_For_Ewb = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TEwbMapiMail(CL: TPSPascalCompiler);
procedure SIRegister_TSendMailThread(CL: TPSPascalCompiler);
procedure SIRegister_SendMail_For_Ewb(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_SendMail_For_Ewb_Routines(S: TPSExec);
procedure RIRegister_TEwbMapiMail(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSendMailThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_SendMail_For_Ewb(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Dialogs
  ,Controls
  ,Messages
  ,MAPI
  ,SendMail_For_Ewb
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SendMail_For_Ewb]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TEwbMapiMail(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TEwbMapiMail') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TEwbMapiMail') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
     RegisterMethod('Procedure Free');
    RegisterMethod('Function Send : Boolean');
    RegisterProperty('LastError', 'Integer', iptr);
    RegisterProperty('Subject', 'string', iptrw);
    RegisterProperty('Body', 'string', iptrw);
    RegisterProperty('Recipients', 'TStrings', iptrw);
    RegisterProperty('Attachments', 'TStrings', iptrw);
    RegisterProperty('AttachmentNames', 'TStrings', iptrw);
    RegisterProperty('EditDialog', 'Boolean', iptrw);
    RegisterProperty('ResolveNames', 'Boolean', iptrw);
    RegisterProperty('RequestReceipt', 'Boolean', iptrw);
    RegisterProperty('SenderName', 'string', iptrw);
    RegisterProperty('SenderAddress', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSendMailThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'TSendMailThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'TSendMailThread') do
  begin
    RegisterMethod('Constructor Create( AMapiMail : TEwbMapiMail)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SendMail_For_Ewb(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TEwbMapiMail');
  SIRegister_TSendMailThread(CL);
  SIRegister_TEwbMapiMail(CL);
 CL.AddDelphiFunction('Function SendEMailByMAPI( SenderName, SenderAddress, Subject, Body : string; Recipients, Attachments, AttachmentNames : TStrings; WithOpenMessage, ResolveNames, NeedReceipt : Boolean; intMAPISession : Integer) : Integer;');
 CL.AddDelphiFunction('Function SendEMailByMAPI1( SenderName, SenderAddress, Subject, Body : Ansistring; Recipients, Attachments, AttachmentNames : TStrings; WithOpenMessage, ResolveNames, NeedReceipt : Boolean; intMAPISession : Integer) : Integer;');
 CL.AddDelphiFunction('Function MAPIErrorDescription( intErrorCode : Integer) : string');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function SendEMailByMAPI1_P( SenderName, SenderAddress, Subject, Body : Ansistring; Recipients, Attachments, AttachmentNames : TStrings; WithOpenMessage, ResolveNames, NeedReceipt : Boolean; intMAPISession : Integer) : Integer;
Begin Result := SendMail_For_Ewb.SendEMailByMAPI(SenderName, SenderAddress, Subject, Body, Recipients, Attachments, AttachmentNames, WithOpenMessage, ResolveNames, NeedReceipt, intMAPISession); END;

(*----------------------------------------------------------------------------*)
Function SendEMailByMAPI_P( SenderName, SenderAddress, Subject, Body : string; Recipients, Attachments, AttachmentNames : TStrings; WithOpenMessage, ResolveNames, NeedReceipt : Boolean; intMAPISession : Integer) : Integer;
Begin Result := SendMail_For_Ewb.SendEMailByMAPI(SenderName, SenderAddress, Subject, Body, Recipients, Attachments, AttachmentNames, WithOpenMessage, ResolveNames, NeedReceipt, intMAPISession); END;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailSenderAddress_W(Self: TEwbMapiMail; const T: string);
begin Self.SenderAddress := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailSenderAddress_R(Self: TEwbMapiMail; var T: string);
begin T := Self.SenderAddress; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailSenderName_W(Self: TEwbMapiMail; const T: string);
begin Self.SenderName := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailSenderName_R(Self: TEwbMapiMail; var T: string);
begin T := Self.SenderName; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailRequestReceipt_W(Self: TEwbMapiMail; const T: Boolean);
begin Self.RequestReceipt := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailRequestReceipt_R(Self: TEwbMapiMail; var T: Boolean);
begin T := Self.RequestReceipt; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailResolveNames_W(Self: TEwbMapiMail; const T: Boolean);
begin Self.ResolveNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailResolveNames_R(Self: TEwbMapiMail; var T: Boolean);
begin T := Self.ResolveNames; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailEditDialog_W(Self: TEwbMapiMail; const T: Boolean);
begin Self.EditDialog := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailEditDialog_R(Self: TEwbMapiMail; var T: Boolean);
begin T := Self.EditDialog; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailAttachmentNames_W(Self: TEwbMapiMail; const T: TStrings);
begin Self.AttachmentNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailAttachmentNames_R(Self: TEwbMapiMail; var T: TStrings);
begin T := Self.AttachmentNames; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailAttachments_W(Self: TEwbMapiMail; const T: TStrings);
begin Self.Attachments := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailAttachments_R(Self: TEwbMapiMail; var T: TStrings);
begin T := Self.Attachments; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailRecipients_W(Self: TEwbMapiMail; const T: TStrings);
begin Self.Recipients := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailRecipients_R(Self: TEwbMapiMail; var T: TStrings);
begin T := Self.Recipients; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailBody_W(Self: TEwbMapiMail; const T: string);
begin Self.Body := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailBody_R(Self: TEwbMapiMail; var T: string);
begin T := Self.Body; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailSubject_W(Self: TEwbMapiMail; const T: string);
begin Self.Subject := T; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailSubject_R(Self: TEwbMapiMail; var T: string);
begin T := Self.Subject; end;

(*----------------------------------------------------------------------------*)
procedure TEwbMapiMailLastError_R(Self: TEwbMapiMail; var T: Integer);
begin T := Self.LastError; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SendMail_For_Ewb_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@SendEMailByMAPI, 'SendEMailByMAPI', cdRegister);
 S.RegisterDelphiFunction(@SendEMailByMAPI1_P, 'SendEMailByMAPI1', cdRegister);
 S.RegisterDelphiFunction(@MAPIErrorDescription, 'MAPIErrorDescription', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEwbMapiMail(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEwbMapiMail) do begin
    RegisterConstructor(@TEwbMapiMail.Create, 'Create');
    RegisterMethod(@TEwbMapiMail.Destroy, 'Free');
    RegisterMethod(@TEwbMapiMail.Send, 'Send');
    RegisterPropertyHelper(@TEwbMapiMailLastError_R,nil,'LastError');
    RegisterPropertyHelper(@TEwbMapiMailSubject_R,@TEwbMapiMailSubject_W,'Subject');
    RegisterPropertyHelper(@TEwbMapiMailBody_R,@TEwbMapiMailBody_W,'Body');
    RegisterPropertyHelper(@TEwbMapiMailRecipients_R,@TEwbMapiMailRecipients_W,'Recipients');
    RegisterPropertyHelper(@TEwbMapiMailAttachments_R,@TEwbMapiMailAttachments_W,'Attachments');
    RegisterPropertyHelper(@TEwbMapiMailAttachmentNames_R,@TEwbMapiMailAttachmentNames_W,'AttachmentNames');
    RegisterPropertyHelper(@TEwbMapiMailEditDialog_R,@TEwbMapiMailEditDialog_W,'EditDialog');
    RegisterPropertyHelper(@TEwbMapiMailResolveNames_R,@TEwbMapiMailResolveNames_W,'ResolveNames');
    RegisterPropertyHelper(@TEwbMapiMailRequestReceipt_R,@TEwbMapiMailRequestReceipt_W,'RequestReceipt');
    RegisterPropertyHelper(@TEwbMapiMailSenderName_R,@TEwbMapiMailSenderName_W,'SenderName');
    RegisterPropertyHelper(@TEwbMapiMailSenderAddress_R,@TEwbMapiMailSenderAddress_W,'SenderAddress');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSendMailThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSendMailThread) do
  begin
    RegisterConstructor(@TSendMailThread.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SendMail_For_Ewb(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEwbMapiMail) do
  RIRegister_TSendMailThread(CL);
  RIRegister_TEwbMapiMail(CL);
end;

 
 
{ TPSImport_SendMail_For_Ewb }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SendMail_For_Ewb.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SendMail_For_Ewb(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SendMail_For_Ewb.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SendMail_For_Ewb(ri);
  RIRegister_SendMail_For_Ewb_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
