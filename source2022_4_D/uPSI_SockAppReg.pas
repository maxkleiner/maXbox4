unit uPSI_SockAppReg;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SockAppReg = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TWebAppRegList(CL: TPSPascalCompiler);
procedure SIRegister_TWebAppRegInfo(CL: TPSPascalCompiler);
procedure SIRegister_SockAppReg(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_SockAppReg_Routines(S: TPSExec);
procedure RIRegister_TWebAppRegList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebAppRegInfo(CL: TPSRuntimeClassImporter);
procedure RIRegister_SockAppReg(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Registry
  ,IniFiles
  ,Contnrs
  ,SockAppReg
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SockAppReg]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebAppRegList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObjectList', 'TWebAppRegList') do
  with CL.AddClassN(CL.FindClass('TObjectList'),'TWebAppRegList') do
  begin
    RegisterProperty('Items', 'TWebAppRegInfo Integer', iptr);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebAppRegInfo(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWebAppRegInfo') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWebAppRegInfo') do
  begin
    RegisterProperty('FileName', 'string', iptr);
    RegisterProperty('ProgID', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SockAppReg(CL: TPSPascalCompiler);
begin
  SIRegister_TWebAppRegInfo(CL);
  SIRegister_TWebAppRegList(CL);
 CL.AddDelphiFunction('Procedure GetRegisteredWebApps( AList : TWebAppRegList)');
 CL.AddDelphiFunction('Procedure RegisterWebApp( const AFileName, AProgID : string)');
 CL.AddDelphiFunction('Procedure UnregisterWebApp( const AProgID : string)');
 CL.AddDelphiFunction('Function FindRegisteredWebApp( const AProgID : string) : string');
 CL.AddDelphiFunction('Function CreateRegistry( InitializeNewFile : Boolean) : TCustomIniFile');
 CL.AddConstantN('sUDPPort','String').SetString( 'UDPPort');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TWebAppRegListItems_R(Self: TWebAppRegList; var T: TWebAppRegInfo; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWebAppRegInfoProgID_R(Self: TWebAppRegInfo; var T: string);
begin T := Self.ProgID; end;

(*----------------------------------------------------------------------------*)
procedure TWebAppRegInfoFileName_R(Self: TWebAppRegInfo; var T: string);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SockAppReg_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@GetRegisteredWebApps, 'GetRegisteredWebApps', cdRegister);
 S.RegisterDelphiFunction(@RegisterWebApp, 'RegisterWebApp', cdRegister);
 S.RegisterDelphiFunction(@UnregisterWebApp, 'UnregisterWebApp', cdRegister);
 S.RegisterDelphiFunction(@FindRegisteredWebApp, 'FindRegisteredWebApp', cdRegister);
 S.RegisterDelphiFunction(@CreateRegistry, 'CreateRegistry', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebAppRegList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebAppRegList) do
  begin
    RegisterPropertyHelper(@TWebAppRegListItems_R,nil,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebAppRegInfo(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebAppRegInfo) do
  begin
    RegisterPropertyHelper(@TWebAppRegInfoFileName_R,nil,'FileName');
    RegisterPropertyHelper(@TWebAppRegInfoProgID_R,nil,'ProgID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SockAppReg(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TWebAppRegInfo(CL);
  RIRegister_TWebAppRegList(CL);
end;

 
 
{ TPSImport_SockAppReg }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SockAppReg.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SockAppReg(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SockAppReg.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SockAppReg(ri);
  RIRegister_SockAppReg_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
