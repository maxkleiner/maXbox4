unit uPSI_GR32_Filters;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_GR32_Filters = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_GR32_Filters(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_GR32_Filters_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Windows
  ,GR32
  ,GR32_Blend
  ,GR32_System
  ,GR32_Bindings
  ,GR32_Filters
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_GR32_Filters]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_GR32_Filters(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TLogicalOperator', '( loXOR, loAND, loOR )');
  CL.AddTypeS('TLUT8', 'array [0..255] of Byte;');

  //TLUT8 = array [Byte] of Byte;
 CL.AddDelphiFunction('Procedure CopyComponents( Dst, Src : TCustomBitmap32; Components : TColor32Components);');
 CL.AddDelphiFunction('Procedure CopyComponents1( Dst : TCustomBitmap32; DstX, DstY : Integer; Src : TCustomBitmap32; SrcRect : TRect; Components : TColor32Components);');
 CL.AddDelphiFunction('Procedure AlphaToGrayscale( Dst, Src : TCustomBitmap32)');
 CL.AddDelphiFunction('Procedure ColorToGrayscale( Dst, Src : TCustomBitmap32; PreserveAlpha : Boolean)');
 CL.AddDelphiFunction('Procedure IntensityToAlpha( Dst, Src : TCustomBitmap32)');
 CL.AddDelphiFunction('Procedure Invert( Dst, Src : TCustomBitmap32; Components : TColor32Components)');
 CL.AddDelphiFunction('Procedure InvertRGB( Dst, Src : TCustomBitmap32)');
 CL.AddDelphiFunction('Procedure ApplyLUT( Dst, Src : TCustomBitmap32; const LUT : TLUT8; PreserveAlpha : Boolean)');
 CL.AddDelphiFunction('Procedure ChromaKey( ABitmap : TCustomBitmap32; TrColor : TColor32)');
 CL.AddDelphiFunction('Function CreateBitmask( Components : TColor32Components) : TColor32');
 CL.AddDelphiFunction('Procedure ApplyBitmask( Dst : TCustomBitmap32; DstX, DstY : Integer; Src : TCustomBitmap32; SrcRect : TRect; Bitmask : TColor32; LogicalOperator : TLogicalOperator);');
 CL.AddDelphiFunction('Procedure ApplyBitmask1( ABitmap : TCustomBitmap32; ARect : TRect; Bitmask : TColor32; LogicalOperator : TLogicalOperator);');
 CL.AddDelphiFunction('Procedure CheckParams( Dst, Src : TCustomBitmap32; ResizeDst : Boolean)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure ApplyBitmask1_P( ABitmap : TCustomBitmap32; ARect : TRect; Bitmask : TColor32; LogicalOperator : TLogicalOperator);
Begin GR32_Filters.ApplyBitmask(ABitmap, ARect, Bitmask, LogicalOperator); END;

(*----------------------------------------------------------------------------*)
Procedure ApplyBitmask_P( Dst : TCustomBitmap32; DstX, DstY : Integer; Src : TCustomBitmap32; SrcRect : TRect; Bitmask : TColor32; LogicalOperator : TLogicalOperator);
Begin GR32_Filters.ApplyBitmask(Dst, DstX, DstY, Src, SrcRect, Bitmask, LogicalOperator); END;

(*----------------------------------------------------------------------------*)
Procedure CopyComponents1_P( Dst : TCustomBitmap32; DstX, DstY : Integer; Src : TCustomBitmap32; SrcRect : TRect; Components : TColor32Components);
Begin GR32_Filters.CopyComponents(Dst, DstX, DstY, Src, SrcRect, Components); END;

(*----------------------------------------------------------------------------*)
Procedure CopyComponents_P( Dst, Src : TCustomBitmap32; Components : TColor32Components);
Begin GR32_Filters.CopyComponents(Dst, Src, Components); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_GR32_Filters_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CopyComponents_P, 'CopyComponents', cdRegister);
 S.RegisterDelphiFunction(@CopyComponents1_P, 'CopyComponents1', cdRegister);
 S.RegisterDelphiFunction(@AlphaToGrayscale, 'AlphaToGrayscale', cdRegister);
 S.RegisterDelphiFunction(@ColorToGrayscale, 'ColorToGrayscale', cdRegister);
 S.RegisterDelphiFunction(@IntensityToAlpha, 'IntensityToAlpha', cdRegister);
 S.RegisterDelphiFunction(@Invert, 'Invert', cdRegister);
 S.RegisterDelphiFunction(@InvertRGB, 'InvertRGB', cdRegister);
 S.RegisterDelphiFunction(@ApplyLUT, 'ApplyLUT', cdRegister);
 S.RegisterDelphiFunction(@ChromaKey, 'ChromaKey', cdRegister);
 S.RegisterDelphiFunction(@CreateBitmask, 'CreateBitmask', cdRegister);
 S.RegisterDelphiFunction(@ApplyBitmask_P, 'ApplyBitmask', cdRegister);
 S.RegisterDelphiFunction(@ApplyBitmask1_P, 'ApplyBitmask1', cdRegister);
 S.RegisterDelphiFunction(@CheckParams, 'CheckParams', cdRegister);
end;

 
 
{ TPSImport_GR32_Filters }
(*----------------------------------------------------------------------------*)
procedure TPSImport_GR32_Filters.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_GR32_Filters(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_GR32_Filters.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_GR32_Filters(ri);
  RIRegister_GR32_Filters_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
