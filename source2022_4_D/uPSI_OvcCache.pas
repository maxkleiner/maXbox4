unit uPSI_OvcCache;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_OvcCache = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TOvcCache(CL: TPSPascalCompiler);
procedure SIRegister_OvcCache(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_OvcCache_Routines(S: TPSExec);
procedure RIRegister_TOvcCache(CL: TPSRuntimeClassImporter);
procedure RIRegister_OvcCache(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   OvcCache
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_OvcCache]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TOvcCache(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TOvcCache') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TOvcCache') do begin
    RegisterMethod('Procedure Clear');
       RegisterMethod('Procedure Free');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure LockCacheItem( Index : LongInt)');
    RegisterMethod('Procedure PreLoad( Index, Number : LongInt)');
    RegisterMethod('Procedure Refresh');
    RegisterMethod('Procedure UnlockCacheItem');
    RegisterMethod('Procedure Update( Index : LongInt)');
    RegisterProperty('CacheHits', 'LongInt', iptrw);
    RegisterProperty('CacheMisses', 'LongInt', iptrw);
    RegisterProperty('Count', 'LongInt', iptr);
    RegisterProperty('Items', 'Pointer LongInt', iptr);
    RegisterProperty('LockedItem', 'LongInt', iptr);
    RegisterProperty('MemoryUsage', 'LongInt', iptr);
    RegisterProperty('DiscardMethod', 'TDiscardMethod', iptrw);
    RegisterProperty('MaxCacheItems', 'LongInt', iptrw);
    RegisterProperty('OnDoneItem', 'TOnDoneItemEvent', iptrw);
    RegisterProperty('OnGetItem', 'TOnGetItemEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_OvcCache(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TDiscardMethod', '( dmMostDistant, dmLeastUsed )');
 //CL.AddConstantN('DefDiscardMethod','').SetString( dmMostDistant);
 CL.AddConstantN('DefMaxCacheItems','LongInt').SetInt( 10);
 CL.AddConstantN('DefMinCacheItems','LongInt').SetInt( 2);
  //CL.AddTypeS('PCacheRecord', '^TCacheRecord // will not work');
  CL.AddTypeS('TCacheRecord', 'record Index: LongInt; Size: Word; Data: TObject; Hits : LongInt; end');
  CL.AddTypeS('TOnGetItemEvent', 'Procedure ( Index : LongInt; var P: TObject;'
   +' var Size : Word)');
  CL.AddTypeS('TOnDoneItemEvent', 'Procedure(Index : LongInt; P: TObject; Size : Word)');
  SIRegister_TOvcCache(CL);
 //CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TOvcCacheOnGetItem_W(Self: TOvcCache; const T: TOnGetItemEvent);
begin Self.OnGetItem := T; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheOnGetItem_R(Self: TOvcCache; var T: TOnGetItemEvent);
begin T := Self.OnGetItem; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheOnDoneItem_W(Self: TOvcCache; const T: TOnDoneItemEvent);
begin Self.OnDoneItem := T; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheOnDoneItem_R(Self: TOvcCache; var T: TOnDoneItemEvent);
begin T := Self.OnDoneItem; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheMaxCacheItems_W(Self: TOvcCache; const T: LongInt);
begin Self.MaxCacheItems := T; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheMaxCacheItems_R(Self: TOvcCache; var T: LongInt);
begin T := Self.MaxCacheItems; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheDiscardMethod_W(Self: TOvcCache; const T: TDiscardMethod);
begin Self.DiscardMethod := T; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheDiscardMethod_R(Self: TOvcCache; var T: TDiscardMethod);
begin T := Self.DiscardMethod; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheMemoryUsage_R(Self: TOvcCache; var T: LongInt);
begin T := Self.MemoryUsage; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheLockedItem_R(Self: TOvcCache; var T: LongInt);
begin T := Self.LockedItem; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheItems_R(Self: TOvcCache; var T: Pointer; const t1: LongInt);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheCount_R(Self: TOvcCache; var T: LongInt);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheCacheMisses_W(Self: TOvcCache; const T: LongInt);
begin Self.CacheMisses := T; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheCacheMisses_R(Self: TOvcCache; var T: LongInt);
begin T := Self.CacheMisses; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheCacheHits_W(Self: TOvcCache; const T: LongInt);
begin Self.CacheHits := T; end;

(*----------------------------------------------------------------------------*)
procedure TOvcCacheCacheHits_R(Self: TOvcCache; var T: LongInt);
begin T := Self.CacheHits; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_OvcCache_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TOvcCache(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TOvcCache) do begin
    RegisterMethod(@TOvcCache.Clear, 'Clear');
    RegisterConstructor(@TOvcCache.Create, 'Create');
     RegisterMethod(@TOvcCache.Destroy, 'Free');
      RegisterMethod(@TOvcCache.LockCacheItem, 'LockCacheItem');
    RegisterMethod(@TOvcCache.PreLoad, 'PreLoad');
    RegisterMethod(@TOvcCache.Refresh, 'Refresh');
    RegisterMethod(@TOvcCache.UnlockCacheItem, 'UnlockCacheItem');
    RegisterMethod(@TOvcCache.Update, 'Update');
    RegisterPropertyHelper(@TOvcCacheCacheHits_R,@TOvcCacheCacheHits_W,'CacheHits');
    RegisterPropertyHelper(@TOvcCacheCacheMisses_R,@TOvcCacheCacheMisses_W,'CacheMisses');
    RegisterPropertyHelper(@TOvcCacheCount_R,nil,'Count');
    RegisterPropertyHelper(@TOvcCacheItems_R,nil,'Items');
    RegisterPropertyHelper(@TOvcCacheLockedItem_R,nil,'LockedItem');
    RegisterPropertyHelper(@TOvcCacheMemoryUsage_R,nil,'MemoryUsage');
    RegisterPropertyHelper(@TOvcCacheDiscardMethod_R,@TOvcCacheDiscardMethod_W,'DiscardMethod');
    RegisterPropertyHelper(@TOvcCacheMaxCacheItems_R,@TOvcCacheMaxCacheItems_W,'MaxCacheItems');
    RegisterPropertyHelper(@TOvcCacheOnDoneItem_R,@TOvcCacheOnDoneItem_W,'OnDoneItem');
    RegisterPropertyHelper(@TOvcCacheOnGetItem_R,@TOvcCacheOnGetItem_W,'OnGetItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_OvcCache(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TOvcCache(CL);
end;

 
 
{ TPSImport_OvcCache }
(*----------------------------------------------------------------------------*)
procedure TPSImport_OvcCache.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_OvcCache(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_OvcCache.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_OvcCache(ri);
  //RIRegister_OvcCache_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
