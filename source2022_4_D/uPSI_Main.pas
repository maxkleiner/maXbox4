unit uPSI_Main;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Main = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMainForm(CL: TPSPascalCompiler);
procedure SIRegister_Main(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Main_Routines(S: TPSExec);
procedure RIRegister_TMainForm(CL: TPSRuntimeClassImporter);
procedure RIRegister_Main(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Graphics
  ,Controls
  ,Forms
  ,Dialogs
  ,SetupForm
  ,StdCtrls
  ,Struct
  ,DebugStruct
  ,Int64Em
  ,CmnFunc
  ,CmnFunc2
  ,SetupTypes
  ,ScriptRunner
  ,BidiUtils
  ,RestartManager
  ,Main
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Main]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMainForm(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSetupForm', 'TMainForm') do
  with CL.AddClassN(CL.FindClass('TSetupForm'),'TMainForm') do
  begin
    RegisterMethod('Procedure FormResize( Sender : TObject)');
    RegisterMethod('Procedure FormCloseQuery( Sender : TObject; var CanClose : Boolean)');
    RegisterMethod('Procedure FormPaint( Sender : TObject)');
    RegisterMethod('Procedure FormKeyDown( Sender : TObject; var Key : Word; Shift : TShiftState)');
    RegisterProperty('CurStep', 'TSetupStep', iptrw);
    RegisterMethod('Procedure Finish( const FromPreparingPage : Boolean)');
    RegisterMethod('Procedure InitializeWizard');
    RegisterMethod('Function Install : Boolean');
    RegisterMethod('Procedure SetStep( const AStep : TSetupStep; const HandleExceptions : Boolean)');
    RegisterMethod('Procedure ShowException( Sender : TObject; E : Exception)');
    RegisterMethod('Procedure ShowExceptionMsg( const S : String)');
    RegisterMethod('Procedure ShowAboutBox');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Main(CL: TPSPascalCompiler);
begin
  SIRegister_TMainForm(CL);
  CL.AddTypeS('TEntryType', '( seLanguage, seCustomMessage, sePermission, seTyp'
   +'e, seComponent, seTask, seDir, seFile, seFileLocation, seIcon, seIni, seRe'
   +'gistry, seInstallDelete, seUninstallDelete, seRun, seUninstallRun )');
 CL.AddConstantN('ecInitializationError','LongInt').SetInt( 1);
 CL.AddConstantN('ecCancelledBeforeInstall','LongInt').SetInt( 2);
 CL.AddConstantN('ecNextStepError','LongInt').SetInt( 3);
 CL.AddConstantN('ecInstallationError','LongInt').SetInt( 4);
 CL.AddConstantN('ecInstallationCancelled','LongInt').SetInt( 5);
 CL.AddConstantN('ecKilledByDebugger','LongInt').SetInt( 6);
 CL.AddConstantN('ecPrepareToInstallFailed','LongInt').SetInt( 7);
 CL.AddConstantN('ecPrepareToInstallFailedRestartNeeded','LongInt').SetInt( 8);
 CL.AddDelphiFunction('Function CodeRunnerOnDebug( const Position : LongInt; var ContinueStepOver : Boolean) : Boolean');
 CL.AddDelphiFunction('Function CodeRunnerOnDebugIntermediate( const Position : LongInt; var ContinueStepOver : Boolean) : Boolean');
 CL.AddDelphiFunction('Procedure CodeRunnerOnDllImport( var DllName : String; var ForceDelayLoad : Boolean)');
 CL.AddDelphiFunction('Procedure CodeRunnerOnException( const Exception : AnsiString; const Position : LongInt)');
 CL.AddDelphiFunction('Procedure CreateTempInstallDir');
 CL.AddDelphiFunction('Procedure DebugNotifyEntry( EntryType : TEntryType; Number : Integer)');
 CL.AddDelphiFunction('Procedure DeinitSetup( const AllowCustomSetupExitCode : Boolean)');
 CL.AddDelphiFunction('Function ExitSetupMsgBox : Boolean');
 CL.AddDelphiFunction('Function ExpandConst( const S : String) : String');
 CL.AddDelphiFunction('Function ExpandConstEx( const S : String; const CustomConsts : array of String) : String');
 CL.AddDelphiFunction('Function ExpandConstEx2( const S : String; const CustomConsts : array of String; const DoExpandIndividualConst : Boolean) : String');
 CL.AddDelphiFunction('Function ExpandConstIfPrefixed( const S : String) : String');
 CL.AddDelphiFunction('Function GetCustomMessageValue( const AName : String; var AValue : String) : Boolean');
 CL.AddDelphiFunction('Function GetRealShellFolder( const Common : Boolean; const ID : TShellFolderID; ReadOnly : Boolean) : String');
 CL.AddDelphiFunction('Function GetShellFolder( Common : Boolean; const ID : TShellFolderID; ReadOnly : Boolean) : String');
 CL.AddDelphiFunction('Function GetShellFolderByCSIDL( Folder : Integer; const Create : Boolean) : String');
 CL.AddDelphiFunction('Function GetUninstallRegKeyBaseName( const ExpandedAppId : String) : String');
 CL.AddDelphiFunction('Function GetPreviousData( const ExpandedAppID, ValueName, DefaultValueData : String) : String');
 CL.AddDelphiFunction('Procedure Initialize64BitInstallMode( const A64Bit : Boolean)');
 CL.AddDelphiFunction('Procedure InitializeCommonVars');
 CL.AddDelphiFunction('Procedure InitializeSetup');
 CL.AddDelphiFunction('Procedure InitMainNonSHFolderConsts');
 CL.AddDelphiFunction('Function InstallOnThisVersion( const MinVersion : TSetupVersionData; const OnlyBelowVersion : TSetupVersionData) : TInstallOnThisVersionResult');
 CL.AddDelphiFunction('Function IsRecurseableDirectory( const FindData : TWin32FindData) : Boolean');
 CL.AddDelphiFunction('Procedure LoadSHFolderDLL');
 CL.AddDelphiFunction('Function LoggedAppMessageBox( const Text, Caption : PChar; const Flags : Longint; const Suppressible : Boolean; const Default : Integer) : Integer');
 CL.AddDelphiFunction('Function LoggedMsgBox( const Text, Caption : String; const Typ : TMsgBoxType; const Buttons : Cardinal; const Suppressible : Boolean; const Default : Integer) : Integer');
 CL.AddDelphiFunction('Procedure LogWindowsVersion');
 CL.AddDelphiFunction('Procedure NotifyAfterInstallEntry( const AfterInstall : String)');
 CL.AddDelphiFunction('Procedure NotifyAfterInstallFileEntry( const FileEntry : PSetupFileEntry)');
 CL.AddDelphiFunction('Procedure NotifyBeforeInstallEntry( const BeforeInstall : String)');
 CL.AddDelphiFunction('Procedure NotifyBeforeInstallFileEntry( const FileEntry : PSetupFileEntry)');
 CL.AddDelphiFunction('Function PreviousInstallCompleted( const WizardComponents, WizardTasks : TStringList) : Boolean');
 CL.AddDelphiFunction('Function CodeRegisterExtraCloseApplicationsResource( const DisableFsRedir : Boolean; const AFilename : String) : Boolean');
 CL.AddDelphiFunction('Procedure RegisterResourcesWithRestartManager( const WizardComponents, WizardTasks : TStringList)');
 CL.AddDelphiFunction('Procedure RemoveTempInstallDir');
 CL.AddDelphiFunction('Procedure SaveResourceToTempFile( const ResName, Filename : String)');
 CL.AddDelphiFunction('Procedure SetActiveLanguage( const I : Integer)');
 CL.AddDelphiFunction('Procedure SetTaskbarButtonVisibility( const AVisible : Boolean)');
 CL.AddDelphiFunction('Function ShouldDisableFsRedirForFileEntry( const FileEntry : PSetupFileEntry) : Boolean');
 CL.AddDelphiFunction('Function ShouldDisableFsRedirForRunEntry( const RunEntry : PSetupRunEntry) : Boolean');
 CL.AddDelphiFunction('Function EvalDirectiveCheck( const Expression : String) : Boolean');
 CL.AddDelphiFunction('Function ShouldProcessEntry( const WizardComponents, WizardTasks : TStringList; const Components, Tasks, Languages, Check : String) : Boolean');
 CL.AddDelphiFunction('Function ShouldProcessFileEntry( const WizardComponents, WizardTasks : TStringList; const FileEntry : PSetupFileEntry; const IgnoreCheck : Boolean) : Boolean');
 CL.AddDelphiFunction('Function ShouldProcessIconEntry( const WizardComponents, WizardTasks : TStringList; const WizardNoIcons : Boolean; const IconEntry : PSetupIconEntry) : Boolean');
 CL.AddDelphiFunction('Function ShouldProcessRunEntry( const WizardComponents, WizardTasks : TStringList; const RunEntry : PSetupRunEntry) : Boolean');
 CL.AddDelphiFunction('Function TestPassword( const Password : String) : Boolean');
 CL.AddDelphiFunction('Procedure UnloadSHFolderDLL');
 CL.AddDelphiFunction('Function WindowsVersionAtLeast( const AMajor, AMinor : Byte) : Boolean');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TMainFormCurStep_W(Self: TMainForm; const T: TSetupStep);
Begin Self.CurStep := T; end;

(*----------------------------------------------------------------------------*)
procedure TMainFormCurStep_R(Self: TMainForm; var T: TSetupStep);
Begin T := Self.CurStep; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Main_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CodeRunnerOnDebug, 'CodeRunnerOnDebug', cdRegister);
 S.RegisterDelphiFunction(@CodeRunnerOnDebugIntermediate, 'CodeRunnerOnDebugIntermediate', cdRegister);
 S.RegisterDelphiFunction(@CodeRunnerOnDllImport, 'CodeRunnerOnDllImport', cdRegister);
 S.RegisterDelphiFunction(@CodeRunnerOnException, 'CodeRunnerOnException', cdRegister);
 S.RegisterDelphiFunction(@CreateTempInstallDir, 'CreateTempInstallDir', cdRegister);
 S.RegisterDelphiFunction(@DebugNotifyEntry, 'DebugNotifyEntry', cdRegister);
 S.RegisterDelphiFunction(@DeinitSetup, 'DeinitSetup', cdRegister);
 S.RegisterDelphiFunction(@ExitSetupMsgBox, 'ExitSetupMsgBox', cdRegister);
 S.RegisterDelphiFunction(@ExpandConst, 'ExpandConst', cdRegister);
 S.RegisterDelphiFunction(@ExpandConstEx, 'ExpandConstEx', cdRegister);
 S.RegisterDelphiFunction(@ExpandConstEx2, 'ExpandConstEx2', cdRegister);
 S.RegisterDelphiFunction(@ExpandConstIfPrefixed, 'ExpandConstIfPrefixed', cdRegister);
 S.RegisterDelphiFunction(@GetCustomMessageValue, 'GetCustomMessageValue', cdRegister);
 S.RegisterDelphiFunction(@GetRealShellFolder, 'GetRealShellFolder', cdRegister);
 S.RegisterDelphiFunction(@GetShellFolder, 'GetShellFolder', cdRegister);
 S.RegisterDelphiFunction(@GetShellFolderByCSIDL, 'GetShellFolderByCSIDL', cdRegister);
 S.RegisterDelphiFunction(@GetUninstallRegKeyBaseName, 'GetUninstallRegKeyBaseName', cdRegister);
 S.RegisterDelphiFunction(@GetPreviousData, 'GetPreviousData', cdRegister);
 S.RegisterDelphiFunction(@Initialize64BitInstallMode, 'Initialize64BitInstallMode', cdRegister);
 S.RegisterDelphiFunction(@InitializeCommonVars, 'InitializeCommonVars', cdRegister);
 S.RegisterDelphiFunction(@InitializeSetup, 'InitializeSetup', cdRegister);
 S.RegisterDelphiFunction(@InitMainNonSHFolderConsts, 'InitMainNonSHFolderConsts', cdRegister);
 S.RegisterDelphiFunction(@InstallOnThisVersion, 'InstallOnThisVersion', cdRegister);
 S.RegisterDelphiFunction(@IsRecurseableDirectory, 'IsRecurseableDirectory', cdRegister);
 S.RegisterDelphiFunction(@LoadSHFolderDLL, 'LoadSHFolderDLL', cdRegister);
 S.RegisterDelphiFunction(@LoggedAppMessageBox, 'LoggedAppMessageBox', cdRegister);
 S.RegisterDelphiFunction(@LoggedMsgBox, 'LoggedMsgBox', cdRegister);
 S.RegisterDelphiFunction(@LogWindowsVersion, 'LogWindowsVersion', cdRegister);
 S.RegisterDelphiFunction(@NotifyAfterInstallEntry, 'NotifyAfterInstallEntry', cdRegister);
 S.RegisterDelphiFunction(@NotifyAfterInstallFileEntry, 'NotifyAfterInstallFileEntry', cdRegister);
 S.RegisterDelphiFunction(@NotifyBeforeInstallEntry, 'NotifyBeforeInstallEntry', cdRegister);
 S.RegisterDelphiFunction(@NotifyBeforeInstallFileEntry, 'NotifyBeforeInstallFileEntry', cdRegister);
 S.RegisterDelphiFunction(@PreviousInstallCompleted, 'PreviousInstallCompleted', cdRegister);
 S.RegisterDelphiFunction(@CodeRegisterExtraCloseApplicationsResource, 'CodeRegisterExtraCloseApplicationsResource', cdRegister);
 S.RegisterDelphiFunction(@RegisterResourcesWithRestartManager, 'RegisterResourcesWithRestartManager', cdRegister);
 S.RegisterDelphiFunction(@RemoveTempInstallDir, 'RemoveTempInstallDir', cdRegister);
 S.RegisterDelphiFunction(@SaveResourceToTempFile, 'SaveResourceToTempFile', cdRegister);
 S.RegisterDelphiFunction(@SetActiveLanguage, 'SetActiveLanguage', cdRegister);
 S.RegisterDelphiFunction(@SetTaskbarButtonVisibility, 'SetTaskbarButtonVisibility', cdRegister);
 S.RegisterDelphiFunction(@ShouldDisableFsRedirForFileEntry, 'ShouldDisableFsRedirForFileEntry', cdRegister);
 S.RegisterDelphiFunction(@ShouldDisableFsRedirForRunEntry, 'ShouldDisableFsRedirForRunEntry', cdRegister);
 S.RegisterDelphiFunction(@EvalDirectiveCheck, 'EvalDirectiveCheck', cdRegister);
 S.RegisterDelphiFunction(@ShouldProcessEntry, 'ShouldProcessEntry', cdRegister);
 S.RegisterDelphiFunction(@ShouldProcessFileEntry, 'ShouldProcessFileEntry', cdRegister);
 S.RegisterDelphiFunction(@ShouldProcessIconEntry, 'ShouldProcessIconEntry', cdRegister);
 S.RegisterDelphiFunction(@ShouldProcessRunEntry, 'ShouldProcessRunEntry', cdRegister);
 S.RegisterDelphiFunction(@TestPassword, 'TestPassword', cdRegister);
 S.RegisterDelphiFunction(@UnloadSHFolderDLL, 'UnloadSHFolderDLL', cdRegister);
 S.RegisterDelphiFunction(@WindowsVersionAtLeast, 'WindowsVersionAtLeast', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMainForm(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMainForm) do
  begin
    RegisterMethod(@TMainForm.FormResize, 'FormResize');
    RegisterMethod(@TMainForm.FormCloseQuery, 'FormCloseQuery');
    RegisterMethod(@TMainForm.FormPaint, 'FormPaint');
    RegisterMethod(@TMainForm.FormKeyDown, 'FormKeyDown');
    RegisterPropertyHelper(@TMainFormCurStep_R,@TMainFormCurStep_W,'CurStep');
    RegisterMethod(@TMainForm.Finish, 'Finish');
    RegisterMethod(@TMainForm.InitializeWizard, 'InitializeWizard');
    RegisterMethod(@TMainForm.Install, 'Install');
    RegisterMethod(@TMainForm.SetStep, 'SetStep');
    RegisterMethod(@TMainForm.ShowException, 'ShowException');
    RegisterMethod(@TMainForm.ShowExceptionMsg, 'ShowExceptionMsg');
    RegisterMethod(@TMainForm.ShowAboutBox, 'ShowAboutBox');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Main(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TMainForm(CL);
end;

 
 
{ TPSImport_Main }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Main.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Main(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Main.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Main(ri);
  RIRegister_Main_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
