unit uPSI_SynEditMiscProcs;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SynEditMiscProcs = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_SynEditMiscProcs(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_SynEditMiscProcs_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Types
  ,kTextDrawer
  ,QGraphics
  ,QSynEditTypes
  ,QSynEditHighlighter
  ,Windows
  ,Graphics
  ,SynEditTypes
  ,SynEditHighlighter
  ,Math
  ,SynEditMiscProcs
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SynEditMiscProcs]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_SynEditMiscProcs(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('PIntArray', '^TIntArray // will not work');
 CL.AddDelphiFunction('Function Max( x, y : integer) : integer');
 CL.AddDelphiFunction('Function Min( x, y : integer) : integer');
 CL.AddDelphiFunction('Function MinMax( x, mi, ma : integer) : integer');
 CL.AddDelphiFunction('Procedure SwapInt( var l, r : integer)');
 CL.AddDelphiFunction('Function MaxPoint( const P1, P2 : TPoint) : TPoint');
 CL.AddDelphiFunction('Function MinPoint( const P1, P2 : TPoint) : TPoint');
 CL.AddDelphiFunction('Function GetIntArray( Count : Cardinal; InitialValue : integer) : PIntArray');
 CL.AddDelphiFunction('Procedure InternalFillRect( dc : HDC; const rcPaint : TRect)');
 CL.AddDelphiFunction('Function GetBestConvertTabsProc( TabWidth : integer) : TConvertTabsProc');
 CL.AddDelphiFunction('Function ConvertTabs( const Line : AnsiString; TabWidth : integer) : AnsiString');
 CL.AddDelphiFunction('Function GetBestConvertTabsProcEx( TabWidth : integer) : TConvertTabsProcEx');
 CL.AddDelphiFunction('Function ConvertTabsEx( const Line : AnsiString; TabWidth : integer; var HasTabs : boolean) : AnsiString');
 CL.AddDelphiFunction('Function GetExpandedLength( const aStr : string; aTabWidth : integer) : integer');
 CL.AddDelphiFunction('Function CharIndex2CaretPos( Index, TabWidth : integer; const Line : string) : integer');
 CL.AddDelphiFunction('Function CaretPos2CharIndex( Position, TabWidth : integer; const Line : string; var InsideTabChar : boolean) : integer');
 CL.AddDelphiFunction('Function StrScanForCharInSet( const Line : string; Start : integer; AChars : TSynIdentChars) : integer');
 CL.AddDelphiFunction('Function StrRScanForCharInSet( const Line : string; Start : integer; AChars : TSynIdentChars) : integer');
  CL.AddTypeS('TStringType', '( stNone, stHalfNumAlpha, stHalfSymbol, stHalfKat'
   +'akana, stWideNumAlpha, stWideSymbol, stWideKatakana, stHiragana, stIdeogra'
   +'ph, stControl, stKashida )');
 CL.AddConstantN('C3_NONSPACING','LongInt').SetInt( 1);
 CL.AddConstantN('C3_DIACRITIC','LongInt').SetInt( 2);
 CL.AddConstantN('C3_VOWELMARK','LongInt').SetInt( 4);
 CL.AddConstantN('C3_SYMBOL','LongInt').SetInt( 8);
 CL.AddConstantN('C3_KATAKANA','LongWord').SetUInt( $0010);
 CL.AddConstantN('C3_HIRAGANA','LongWord').SetUInt( $0020);
 CL.AddConstantN('C3_HALFWIDTH','LongWord').SetUInt( $0040);
 CL.AddConstantN('C3_FULLWIDTH','LongWord').SetUInt( $0080);
 CL.AddConstantN('C3_IDEOGRAPH','LongWord').SetUInt( $0100);
 CL.AddConstantN('C3_KASHIDA','LongWord').SetUInt( $0200);
 CL.AddConstantN('C3_LEXICAL','LongWord').SetUInt( $0400);
 CL.AddConstantN('C3_ALPHA','LongWord').SetUInt( $8000);
 CL.AddConstantN('C3_NOTAPPLICABLE','LongInt').SetInt( 0);
 CL.AddDelphiFunction('Function StrScanForMultiByteChar( const Line : string; Start : Integer) : Integer');
 CL.AddDelphiFunction('Function StrRScanForMultiByteChar( const Line : string; Start : Integer) : Integer');
 CL.AddDelphiFunction('Function IsStringType( Value : Word) : TStringType');
 CL.AddDelphiFunction('Function GetEOL( Line : PChar) : PChar');
 CL.AddDelphiFunction('Function EncodeString( s : string) : string');
 CL.AddDelphiFunction('Function DecodeString( s : string) : string');
 CL.AddDelphiFunction('Procedure FreeAndNil( var Obj: TObject)');
 CL.AddDelphiFunction('Procedure FreeAndNilStream( var Obj: TStream)');
 CL.AddDelphiFunction('Procedure Assert( Expr : Boolean)');
 CL.AddDelphiFunction('Function LastDelimiter( const Delimiters, S : string) : Integer');
  CL.AddTypeS('TReplaceFlags', 'set of ( rfReplaceAll, rfIgnoreCase )');
 CL.AddDelphiFunction('Function StringReplace( const S, OldPattern, NewPattern : string; Flags : TReplaceFlags) : string');
 CL.AddDelphiFunction('Function GetRValue2( RGBValue : TColor) : byte');
 CL.AddDelphiFunction('Function GetGValue2( RGBValue : TColor) : byte');
 CL.AddDelphiFunction('Function GetBValue2( RGBValue : TColor) : byte');
 CL.AddDelphiFunction('Function RGB( r, g, b : Byte) : Cardinal');
  CL.AddTypeS('THighlighterAttriProc', 'Function ( Highlighter : TSynCustomHigh'
   +'lighter; Attri : TSynHighlighterAttributes; UniqueAttriName : string; Params : array of Pointer) : Boolean');
 CL.AddDelphiFunction('Function EnumHighlighterAttris( Highlighter : TSynCustomHighlighter; SkipDuplicates : Boolean; HighlighterAttriProc : THighlighterAttriProc; Params : array of Pointer) : Boolean');
 CL.AddDelphiFunction('Function CalcFCS( const ABuf, ABufSize : Cardinal) : Word');
 CL.AddDelphiFunction('Procedure SynDrawGradient( const ACanvas : TCanvas; const AStartColor, AEndColor : TColor; ASteps : integer; const ARect : TRect; const AHorizontal : boolean)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_SynEditMiscProcs_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Max, 'Max', cdRegister);
 S.RegisterDelphiFunction(@Min, 'Min', cdRegister);
 S.RegisterDelphiFunction(@MinMax, 'MinMax', cdRegister);
 S.RegisterDelphiFunction(@SwapInt, 'SwapInt', cdRegister);
 S.RegisterDelphiFunction(@MaxPoint, 'MaxPoint', cdRegister);
 S.RegisterDelphiFunction(@MinPoint, 'MinPoint', cdRegister);
 S.RegisterDelphiFunction(@GetIntArray, 'GetIntArray', cdRegister);
 S.RegisterDelphiFunction(@InternalFillRect, 'InternalFillRect', cdRegister);
 S.RegisterDelphiFunction(@GetBestConvertTabsProc, 'GetBestConvertTabsProc', cdRegister);
 S.RegisterDelphiFunction(@ConvertTabs, 'ConvertTabs', cdRegister);
 S.RegisterDelphiFunction(@GetBestConvertTabsProcEx, 'GetBestConvertTabsProcEx', cdRegister);
 S.RegisterDelphiFunction(@ConvertTabsEx, 'ConvertTabsEx', cdRegister);
 S.RegisterDelphiFunction(@GetExpandedLength, 'GetExpandedLength', cdRegister);
 S.RegisterDelphiFunction(@CharIndex2CaretPos, 'CharIndex2CaretPos', cdRegister);
 S.RegisterDelphiFunction(@CaretPos2CharIndex, 'CaretPos2CharIndex', cdRegister);
 S.RegisterDelphiFunction(@StrScanForCharInSet, 'StrScanForCharInSet', cdRegister);
 S.RegisterDelphiFunction(@StrRScanForCharInSet, 'StrRScanForCharInSet', cdRegister);
 S.RegisterDelphiFunction(@StrScanForMultiByteChar, 'StrScanForMultiByteChar', cdRegister);
 S.RegisterDelphiFunction(@StrRScanForMultiByteChar, 'StrRScanForMultiByteChar', cdRegister);
 S.RegisterDelphiFunction(@IsStringType, 'IsStringType', cdRegister);
 S.RegisterDelphiFunction(@GetEOL, 'GetEOL', cdRegister);
 S.RegisterDelphiFunction(@EncodeString, 'EncodeString', cdRegister);
 S.RegisterDelphiFunction(@DecodeString, 'DecodeString', cdRegister);
 S.RegisterDelphiFunction(@FreeAndNil, 'FreeAndNil', cdRegister);
 S.RegisterDelphiFunction(@FreeAndNil, 'FreeAndNilStream', cdRegister);
 S.RegisterDelphiFunction(@Assert, 'Assert', cdRegister);
 S.RegisterDelphiFunction(@LastDelimiter, 'LastDelimiter', cdRegister);
 S.RegisterDelphiFunction(@StringReplace, 'StringReplace', cdRegister);
 S.RegisterDelphiFunction(@GetRValue, 'GetRValue2', cdRegister);
 S.RegisterDelphiFunction(@GetGValue, 'GetGValue2', cdRegister);
 S.RegisterDelphiFunction(@GetBValue, 'GetBValue2', cdRegister);
 S.RegisterDelphiFunction(@RGB, 'RGB', cdRegister);
 S.RegisterDelphiFunction(@EnumHighlighterAttris, 'EnumHighlighterAttris', cdRegister);
 S.RegisterDelphiFunction(@CalcFCS, 'CalcFCS', cdRegister);
 S.RegisterDelphiFunction(@SynDrawGradient, 'SynDrawGradient', cdRegister);
end;

 
 
{ TPSImport_SynEditMiscProcs }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SynEditMiscProcs.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SynEditMiscProcs(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SynEditMiscProcs.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SynEditMiscProcs(ri);
  RIRegister_SynEditMiscProcs_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
