unit uPSI_cFileTemplates;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_cFileTemplates = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TFileTemplates(CL: TPSPascalCompiler);
procedure SIRegister_TFileTemplate(CL: TPSPascalCompiler);
procedure SIRegister_cFileTemplates(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TFileTemplates(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFileTemplate(CL: TPSRuntimeClassImporter);
procedure RIRegister_cFileTemplates(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Contnrs
  //,JvAppStorage
  ,cFileTemplates
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_cFileTemplates]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TFileTemplates(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObjectList', 'TFileTemplates') do
  with CL.AddClassN(CL.FindClass('TObjectList'),'TFileTemplates') do
  begin
    RegisterMethod('Function CreateListItem( Sender : TJvCustomAppStorage; const Path : string; Index : Integer) : TPersistent');
    RegisterMethod('Procedure AddPythonTemplate');
    RegisterMethod('Procedure AddCythonTemplate');
    RegisterMethod('Procedure AddHTMLTemplate');
    RegisterMethod('Procedure AddCSSTemplate');
    RegisterMethod('Procedure AddXMLTemplate');
    RegisterMethod('Procedure AddJSONTemplate');
    RegisterMethod('Procedure AddYAMLTemplate');
    RegisterMethod('Procedure AddJSTemplate');
    RegisterMethod('Procedure AddJupyterTemplate');
    RegisterMethod('Procedure AddPHPTemplate');
    RegisterMethod('Procedure AddPlainTextTemplate');
    RegisterMethod('Procedure Assign( Source : TFileTemplates)');
    RegisterMethod('Function TemplateByName( const Name : string) : TFileTemplate');
    RegisterMethod('Function TemplateByExt( const Ext : string) : TFileTemplate');
    RegisterMethod('Procedure AddDefaultTemplates( NoCheck : Boolean)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFileTemplate(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInterfacedPersistent', 'TFileTemplate') do
  with CL.AddClassN(CL.FindClass('TInterfacedPersistent'),'TFileTemplate') do
  begin
    RegisterProperty('Name', 'string', iptrw);
    RegisterProperty('Template', 'string', iptrw);
    RegisterProperty('Extension', 'string', iptrw);
    RegisterProperty('Category', 'string', iptrw);
    RegisterProperty('Highlighter', 'string', iptrw);
    RegisterMethod('Procedure Assign( Source : TPersistent)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_cFileTemplates(CL: TPSPascalCompiler);
begin
  SIRegister_TFileTemplate(CL);
  SIRegister_TFileTemplates(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TFileTemplateHighlighter_W(Self: TFileTemplate; const T: string);
Begin Self.Highlighter := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateHighlighter_R(Self: TFileTemplate; var T: string);
Begin T := Self.Highlighter; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateCategory_W(Self: TFileTemplate; const T: string);
Begin Self.Category := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateCategory_R(Self: TFileTemplate; var T: string);
Begin T := Self.Category; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateExtension_W(Self: TFileTemplate; const T: string);
Begin Self.Extension := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateExtension_R(Self: TFileTemplate; var T: string);
Begin T := Self.Extension; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateTemplate_W(Self: TFileTemplate; const T: string);
Begin Self.Template := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateTemplate_R(Self: TFileTemplate; var T: string);
Begin T := Self.Template; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateName_W(Self: TFileTemplate; const T: string);
Begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileTemplateName_R(Self: TFileTemplate; var T: string);
Begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFileTemplates(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFileTemplates) do
  begin
    RegisterMethod(@TFileTemplates.CreateListItem, 'CreateListItem');
    RegisterMethod(@TFileTemplates.AddPythonTemplate, 'AddPythonTemplate');
    RegisterMethod(@TFileTemplates.AddCythonTemplate, 'AddCythonTemplate');
    RegisterMethod(@TFileTemplates.AddHTMLTemplate, 'AddHTMLTemplate');
    RegisterMethod(@TFileTemplates.AddCSSTemplate, 'AddCSSTemplate');
    RegisterMethod(@TFileTemplates.AddXMLTemplate, 'AddXMLTemplate');
    RegisterMethod(@TFileTemplates.AddJSONTemplate, 'AddJSONTemplate');
    RegisterMethod(@TFileTemplates.AddYAMLTemplate, 'AddYAMLTemplate');
    RegisterMethod(@TFileTemplates.AddJSTemplate, 'AddJSTemplate');
    RegisterMethod(@TFileTemplates.AddJupyterTemplate, 'AddJupyterTemplate');
    RegisterMethod(@TFileTemplates.AddPHPTemplate, 'AddPHPTemplate');
    RegisterMethod(@TFileTemplates.AddPlainTextTemplate, 'AddPlainTextTemplate');
    RegisterMethod(@TFileTemplates.Assign, 'Assign');
    RegisterMethod(@TFileTemplates.TemplateByName, 'TemplateByName');
    RegisterMethod(@TFileTemplates.TemplateByExt, 'TemplateByExt');
    RegisterMethod(@TFileTemplates.AddDefaultTemplates, 'AddDefaultTemplates');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFileTemplate(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFileTemplate) do
  begin
    RegisterPropertyHelper(@TFileTemplateName_R,@TFileTemplateName_W,'Name');
    RegisterPropertyHelper(@TFileTemplateTemplate_R,@TFileTemplateTemplate_W,'Template');
    RegisterPropertyHelper(@TFileTemplateExtension_R,@TFileTemplateExtension_W,'Extension');
    RegisterPropertyHelper(@TFileTemplateCategory_R,@TFileTemplateCategory_W,'Category');
    RegisterPropertyHelper(@TFileTemplateHighlighter_R,@TFileTemplateHighlighter_W,'Highlighter');
    RegisterMethod(@TFileTemplate.Assign, 'Assign');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cFileTemplates(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TFileTemplate(CL);
  RIRegister_TFileTemplates(CL);
end;

 
 
{ TPSImport_cFileTemplates }
(*----------------------------------------------------------------------------*)
procedure TPSImport_cFileTemplates.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_cFileTemplates(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_cFileTemplates.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_cFileTemplates(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
