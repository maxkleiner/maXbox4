unit uPSI_RegStr;
{
   just const
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_RegStr = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;

 
{ compile-time registration functions }
procedure SIRegister_RegStr(CL: TPSPascalCompiler);

{ run-time registration functions }

procedure Register;

implementation


uses
   Windows
  ,RegStr
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_RegStr]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_RegStr(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('REGSTR_KEY_CLASS','String').SetString( 'Class');
 CL.AddConstantN('REGSTR_KEY_CONFIG','String').SetString( 'Config');
 CL.AddConstantN('REGSTR_KEY_ENUM','String').SetString( 'Enum');
 CL.AddConstantN('REGSTR_KEY_ROOTENUM','String').SetString( 'Root');
 CL.AddConstantN('REGSTR_KEY_BIOSENUM','String').SetString( 'BIOS');
 CL.AddConstantN('REGSTR_KEY_PCMCIAENUM','String').SetString( 'PCMCIA');
 CL.AddConstantN('REGSTR_KEY_PCIENUM','String').SetString( 'PCI');
 CL.AddConstantN('REGSTR_KEY_ISAENUM','String').SetString( 'ISAPnP');
 CL.AddConstantN('REGSTR_KEY_EISAENUM','String').SetString( 'EISA');
 CL.AddConstantN('REGSTR_KEY_ISAENUM_NEC_98','String').SetString( 'C98PnP');
 CL.AddConstantN('REGSTR_KEY_EISAENUM_NEC_98','String').SetString( 'NESA');
 CL.AddConstantN('REGSTR_KEY_LOGCONFIG','String').SetString( 'LogConfig');
 CL.AddConstantN('REGSTR_KEY_SYSTEMBOARD','String').SetString( '*PNP0C01');
 CL.AddConstantN('REGSTR_KEY_APM','String').SetString( '*PNP0C05');
 CL.AddConstantN('REGSTR_KEY_INIUPDATE','String').SetString( 'IniUpdate');
 CL.AddConstantN('REG_KEY_INSTDEV','String').SetString( 'Installed');
 CL.AddConstantN('REGSTR_KEY_DOSOPTCDROM','String').SetString( 'CD-ROM');
 CL.AddConstantN('REGSTR_KEY_DOSOPTMOUSE','String').SetString( 'MOUSE');
 CL.AddConstantN('REGSTR_DEFAULT_INSTANCE','String').SetString( '0000');
 CL.AddConstantN('REGSTR_PATH_SETUP','String').SetString( 'Software\Microsoft\Windows\CurrentVersion');
 CL.AddConstantN('REGSTR_PATH_PIFCONVERT','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\PIFConvert');
 CL.AddConstantN('REGSTR_PATH_MSDOSOPTS','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\MS-DOSOptions');
 CL.AddConstantN('REGSTR_PATH_MSDOSEMU','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\MS-DOS Emulation');
 CL.AddConstantN('REGSTR_PATH_NOSUGGMSDOS','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\NoMSDOSWarn');
 CL.AddConstantN('REGSTR_PATH_NEWDOSBOX','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\MS-DOSSpecialConfig');
 CL.AddConstantN('REGSTR_PATH_RUNONCE','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\RunOnce');
 CL.AddConstantN('REGSTR_PATH_RUN','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Run');
 CL.AddConstantN('REGSTR_PATH_RUNSERVICESONCE','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\RunServicesOnce');
 CL.AddConstantN('REGSTR_PATH_RUNSERVICES','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\RunServices');
 CL.AddConstantN('REGSTR_PATH_EXPLORER','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Explorer');
 CL.AddConstantN('REGSTR_PATH_DETECT','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Detect');
 CL.AddConstantN('REGSTR_PATH_APPPATHS','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\App Paths');
 CL.AddConstantN('REGSTR_PATH_UNINSTALL','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Uninstall');
 CL.AddConstantN('REGSTR_PATH_REALMODENET','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Network\Real Mode Net');
 CL.AddConstantN('REGSTR_PATH_NETEQUIV','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Network\Equivalent');
 CL.AddConstantN('REGSTR_PATH_CVNETWORK','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Network');
 CL.AddConstantN('REGSTR_PATH_IDCONFIGDB','String').SetString( 'System\CurrentControlSet\Control\IDConfigDB');
 CL.AddConstantN('REGSTR_PATH_CLASS','String').SetString( 'System\CurrentControlSet\Services\Class');
 CL.AddConstantN('REGSTR_PATH_DISPLAYSETTINGS','String').SetString( 'Display\Settings');
 CL.AddConstantN('REGSTR_PATH_FONTS','String').SetString( 'Display\Fonts');
 CL.AddConstantN('REGSTR_PATH_ENUM','String').SetString( 'Enum');
 CL.AddConstantN('REGSTR_PATH_ROOT','String').SetString( 'Enum\Root');
 CL.AddConstantN('REGSTR_PATH_SERVICES','String').SetString( 'System\CurrentControlSet\Services');
 CL.AddConstantN('REGSTR_PATH_VXD','String').SetString( 'System\CurrentControlSet\Services\VxD');
 CL.AddConstantN('REGSTR_PATH_IOS','String').SetString( 'System\CurrentControlSet\Services\VxD\IOS');
 CL.AddConstantN('REGSTR_PATH_VMM','String').SetString( 'System\CurrentControlSet\Services\VxD\VMM');
 CL.AddConstantN('REGSTR_PATH_VPOWERD','String').SetString( 'System\CurrentControlSet\Services\VxD\VPOWERD');
 CL.AddConstantN('REGSTR_PATH_VNETSUP','String').SetString( 'System\CurrentControlSet\Services\VxD\VNETSUP');
 CL.AddConstantN('REGSTR_PATH_NWREDIR','String').SetString( 'System\CurrentControlSet\Services\VxD\NWREDIR');
 CL.AddConstantN('REGSTR_PATH_NCPSERVER','String').SetString( 'System\CurrentControlSet\Services\NcpServer\Parameters');
 CL.AddConstantN('REGSTR_PATH_IOARB','String').SetString( 'System\CurrentControlSet\Services\Arbitrators\IOArb');
 CL.AddConstantN('REGSTR_PATH_ADDRARB','String').SetString( 'System\CurrentControlSet\Services\Arbitrators\AddrArb');
 CL.AddConstantN('REGSTR_PATH_DMAARB','String').SetString( 'System\CurrentControlSet\Services\Arbitrators\DMAArb');
 CL.AddConstantN('REGSTR_PATH_IRQARB','String').SetString( 'System\CurrentControlSet\Services\Arbitrators\IRQArb');
 CL.AddConstantN('REGSTR_PATH_CODEPAGE','String').SetString( 'System\CurrentControlSet\Control\Nls\Codepage');
 CL.AddConstantN('REGSTR_PATH_FILESYSTEM','String').SetString( 'System\CurrentControlSet\Control\FileSystem');
 CL.AddConstantN('REGSTR_PATH_FILESYSTEM_NOVOLTRACK','String').SetString( 'System\CurrentControlSet\Control\FileSystem\NoVolTrack');
 CL.AddConstantN('REGSTR_PATH_CDFS','String').SetString( 'System\CurrentControlSet\Control\FileSystem\CDFS');
 CL.AddConstantN('REGSTR_PATH_WINBOOT','String').SetString( 'System\CurrentControlSet\Control\WinBoot');
 CL.AddConstantN('REGSTR_PATH_INSTALLEDFILES','String').SetString( 'System\CurrentControlSet\Control\InstalledFiles');
 CL.AddConstantN('REGSTR_PATH_VMM32FILES','String').SetString( 'System\CurrentControlSet\Control\VMM32Files');
 CL.AddConstantN('REGSTR_MAX_VALUE_LENGTH','LongInt').SetInt( 256);
 CL.AddConstantN('REGSTR_VAL_BITSPERPIXEL','String').SetString( 'BitsPerPixel');
 CL.AddConstantN('REGSTR_VAL_RESOLUTION','String').SetString( 'Resolution');
 CL.AddConstantN('REGSTR_VAL_DPILOGICALX','String').SetString( 'DPILogicalX');
 CL.AddConstantN('REGSTR_VAL_DPILOGICALY','String').SetString( 'DPILogicalY');
 CL.AddConstantN('REGSTR_VAL_DPIPHYSICALX','String').SetString( 'DPIPhysicalX');
 CL.AddConstantN('REGSTR_VAL_DPIPHYSICALY','String').SetString( 'DPIPhysicalY');
 CL.AddConstantN('REGSTR_VAL_REFRESHRATE','String').SetString( 'RefreshRate');
 CL.AddConstantN('REGSTR_VAL_DISPLAYFLAGS','String').SetString( 'DisplayFlags');
 CL.AddConstantN('REGSTR_PATH_CONTROLPANEL','String').SetString( 'Control Panel');
 CL.AddConstantN('REGSTR_PATH_CONTROLSFOLDER','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Controls Folder');
 CL.AddConstantN('REGSTR_VAL_DOSCP','String').SetString( 'OEMCP');
 CL.AddConstantN('REGSTR_VAL_WINCP','String').SetString( 'ACP');
 CL.AddConstantN('REGSTR_PATH_DYNA_ENUM','String').SetString( 'Config Manager\Enum');
 CL.AddConstantN('REGSTR_VAL_HARDWARE_KEY','String').SetString( 'HardWareKey');
 CL.AddConstantN('REGSTR_VAL_ALLOCATION','String').SetString( 'Allocation');
 CL.AddConstantN('REGSTR_VAL_PROBLEM','String').SetString( 'Problem');
 CL.AddConstantN('REGSTR_VAL_STATUS','String').SetString( 'Status');
 CL.AddConstantN('REGSTR_VAL_DONTUSEMEM','String').SetString( 'DontAllocLastMem');
 CL.AddConstantN('REGSTR_VAL_SYSTEMROOT','String').SetString( 'SystemRoot');
 CL.AddConstantN('REGSTR_VAL_BOOTCOUNT','String').SetString( 'BootCount');
 CL.AddConstantN('REGSTR_VAL_REALNETSTART','String').SetString( 'RealNetStart');
 CL.AddConstantN('REGSTR_VAL_MEDIA','String').SetString( 'MediaPath');
 CL.AddConstantN('REGSTR_VAL_CONFIG','String').SetString( 'ConfigPath');
 CL.AddConstantN('REGSTR_VAL_DEVICEPATH','String').SetString( 'DevicePath');
 CL.AddConstantN('REGSTR_VAL_SRCPATH','String').SetString( 'SourcePath');
 CL.AddConstantN('REGSTR_VAL_OLDWINDIR','String').SetString( 'OldWinDir');
 CL.AddConstantN('REGSTR_VAL_SETUPFLAGS','String').SetString( 'SetupFlags');
 CL.AddConstantN('REGSTR_VAL_REGOWNER','String').SetString( 'RegisteredOwner');
 CL.AddConstantN('REGSTR_VAL_REGORGANIZATION','String').SetString( 'RegisteredOrganization');
 CL.AddConstantN('REGSTR_VAL_LICENSINGINFO','String').SetString( 'LicensingInfo');
 CL.AddConstantN('REGSTR_VAL_OLDMSDOSVER','String').SetString( 'OldMSDOSVer');
 CL.AddConstantN('REGSTR_VAL_FIRSTINSTALLDATETIME','String').SetString( 'FirstInstallDateTime');
 CL.AddConstantN('REGSTR_VAL_INSTALLTYPE','String').SetString( 'InstallType');
 CL.AddConstantN('REGSTR_VAL_WRAPPER','String').SetString( 'Wrapper');
 CL.AddConstantN('IT_COMPACT','LongWord').SetUInt( $0000);
 CL.AddConstantN('IT_TYPICAL','LongWord').SetUInt( $0001);
 CL.AddConstantN('IT_PORTABLE','LongWord').SetUInt( $0002);
 CL.AddConstantN('IT_CUSTOM','LongWord').SetUInt( $0003);
 CL.AddConstantN('REGSTR_KEY_SETUP','String').SetString( '\Setup');
 CL.AddConstantN('REGSTR_VAL_BOOTDIR','String').SetString( 'BootDir');
 CL.AddConstantN('REGSTR_VAL_WINBOOTDIR','String').SetString( 'WinbootDir');
 CL.AddConstantN('REGSTR_VAL_WINDIR','String').SetString( 'WinDir');
 CL.AddConstantN('REGSTR_VAL_APPINSTPATH','String').SetString( 'AppInstallPath');
 CL.AddConstantN('REGSTR_KEY_EBDFILESLOCAL','String').SetString( 'EBDFilesLocale');
 CL.AddConstantN('REGSTR_KEY_EBDFILESKEYBOARD','String').SetString( 'EBDFilesKeyboard');
 CL.AddConstantN('REGSTR_KEY_EBDAUTOEXECBATLOCAL','String').SetString( 'EBDAutoexecBatLocale');
 CL.AddConstantN('REGSTR_KEY_EBDAUTOEXECBATKEYBOARD','String').SetString( 'EBDAutoexecBatKeyboard');
 CL.AddConstantN('REGSTR_KEY_EBDCONFIGSYSLOCAL','String').SetString( 'EBDConfigSysLocale');
 CL.AddConstantN('REGSTR_KEY_EBDCONFIGSYSKEYBOARD','String').SetString( 'EBDConfigSysKeyboard');
 CL.AddConstantN('REGSTR_VAL_MSDOSMODE','String').SetString( 'MSDOSMode');
 CL.AddConstantN('REGSTR_VAL_MSDOSMODEDISCARD','String').SetString( 'Discard');
 CL.AddConstantN('REGSTR_VAL_DOSOPTGLOBALFLAGS','String').SetString( 'GlobalFlags');
 CL.AddConstantN('DOSOPTGF_DEFCLEAN','LongWord').SetUInt( $00000001);
 CL.AddConstantN('REGSTR_VAL_DOSOPTFLAGS','String').SetString( 'Flags');
 CL.AddConstantN('REGSTR_VAL_OPTORDER','String').SetString( 'Order');
 CL.AddConstantN('REGSTR_VAL_CONFIGSYS','String').SetString( 'Config.Sys');
 CL.AddConstantN('REGSTR_VAL_AUTOEXEC','String').SetString( 'Autoexec.Bat');
 CL.AddConstantN('REGSTR_VAL_STDDOSOPTION','String').SetString( 'StdOption');
 CL.AddConstantN('REGSTR_VAL_DOSOPTTIP','String').SetString( 'TipText');
 CL.AddConstantN('DOSOPTF_DEFAULT','LongWord').SetUInt( $00000001);
 CL.AddConstantN('DOSOPTF_SUPPORTED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('DOSOPTF_ALWAYSUSE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('DOSOPTF_USESPMODE','LongWord').SetUInt( $00000008);
 CL.AddConstantN('DOSOPTF_PROVIDESUMB','LongWord').SetUInt( $00000010);
 CL.AddConstantN('DOSOPTF_NEEDSETUP','LongWord').SetUInt( $00000020);
 CL.AddConstantN('DOSOPTF_INDOSSTART','LongWord').SetUInt( $00000040);
 CL.AddConstantN('DOSOPTF_MULTIPLE','LongWord').SetUInt( $00000080);
 CL.AddConstantN('SUF_FIRSTTIME','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SUF_EXPRESS','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SUF_BATCHINF','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SUF_CLEAN','LongWord').SetUInt( $00000008);
 CL.AddConstantN('SUF_INSETUP','LongWord').SetUInt( $00000010);
 CL.AddConstantN('SUF_NETSETUP','LongWord').SetUInt( $00000020);
 CL.AddConstantN('SUF_NETHDBOOT','LongWord').SetUInt( $00000040);
 CL.AddConstantN('SUF_NETRPLBOOT','LongWord').SetUInt( $00000080);
 CL.AddConstantN('SUF_SBSCOPYOK','LongWord').SetUInt( $00000100);
 CL.AddConstantN('REGSTR_VAL_DOSPAGER','String').SetString( 'DOSPager');
 CL.AddConstantN('REGSTR_VAL_VXDGROUPS','String').SetString( 'VXDGroups');
 CL.AddConstantN('REGSTR_VAL_VPOWERDFLAGS','String').SetString( 'Flags');
 CL.AddConstantN('VPDF_DISABLEPWRMGMT','LongWord').SetUInt( $00000001);
 CL.AddConstantN('VPDF_FORCEAPM10MODE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('VPDF_SKIPINTELSLCHECK','LongWord').SetUInt( $00000004);
 CL.AddConstantN('VPDF_DISABLEPWRSTATUSPOLL','LongWord').SetUInt( $00000008);
 CL.AddConstantN('REGSTR_VAL_WORKGROUP','String').SetString( 'Workgroup');
 CL.AddConstantN('REGSTR_VAL_DIRECTHOST','String').SetString( 'DirectHost');
 CL.AddConstantN('REGSTR_VAL_FILESHARING','String').SetString( 'FileSharing');
 CL.AddConstantN('REGSTR_VAL_PRINTSHARING','String').SetString( 'PrintSharing');
 CL.AddConstantN('REGSTR_VAL_FIRSTNETDRIVE','String').SetString( 'FirstNetworkDrive');
 CL.AddConstantN('REGSTR_VAL_MAXCONNECTIONS','String').SetString( 'MaxConnections');
 CL.AddConstantN('REGSTR_VAL_APISUPPORT','String').SetString( 'APISupport');
 CL.AddConstantN('REGSTR_VAL_MAXRETRY','String').SetString( 'MaxRetry');
 CL.AddConstantN('REGSTR_VAL_MINRETRY','String').SetString( 'MinRetry');
 CL.AddConstantN('REGSTR_VAL_SUPPORTLFN','String').SetString( 'SupportLFN');
 CL.AddConstantN('REGSTR_VAL_SUPPORTBURST','String').SetString( 'SupportBurst');
 CL.AddConstantN('REGSTR_VAL_SUPPORTTUNNELLING','String').SetString( 'SupportTunnelling');
 CL.AddConstantN('REGSTR_VAL_FULLTRACE','String').SetString( 'FullTrace');
 CL.AddConstantN('REGSTR_VAL_READCACHING','String').SetString( 'ReadCaching');
 CL.AddConstantN('REGSTR_VAL_SHOWDOTS','String').SetString( 'ShowDots');
 CL.AddConstantN('REGSTR_VAL_GAPTIME','String').SetString( 'GapTime');
 CL.AddConstantN('REGSTR_VAL_SEARCHMODE','String').SetString( 'SearchMode');
 CL.AddConstantN('REGSTR_VAL_SHELLVERSION','String').SetString( 'ShellVersion');
 CL.AddConstantN('REGSTR_VAL_MAXLIP','String').SetString( 'MaxLIP');
 CL.AddConstantN('REGSTR_VAL_PRESERVECASE','String').SetString( 'PreserveCase');
 CL.AddConstantN('REGSTR_VAL_OPTIMIZESFN','String').SetString( 'OptimizeSFN');
 CL.AddConstantN('REGSTR_VAL_NCP_BROWSEMASTER','String').SetString( 'BrowseMaster');
 CL.AddConstantN('REGSTR_VAL_NCP_USEPEERBROWSING','String').SetString( 'Use_PeerBrowsing');
 CL.AddConstantN('REGSTR_VAL_NCP_USESAP','String').SetString( 'Use_Sap');
 CL.AddConstantN('REGSTR_VAL_WIN31FILESYSTEM','String').SetString( 'Win31FileSystem');
 CL.AddConstantN('REGSTR_VAL_PRESERVELONGNAMES','String').SetString( 'PreserveLongNames');
 CL.AddConstantN('REGSTR_VAL_DRIVEWRITEBEHIND','String').SetString( 'DriveWriteBehind');
 CL.AddConstantN('REGSTR_VAL_ASYNCFILECOMMIT','String').SetString( 'AsyncFileCommit');
 CL.AddConstantN('REGSTR_VAL_PATHCACHECOUNT','String').SetString( 'PathCache');
 CL.AddConstantN('REGSTR_VAL_NAMECACHECOUNT','String').SetString( 'NameCache');
 CL.AddConstantN('REGSTR_VAL_CONTIGFILEALLOC','String').SetString( 'ContigFileAllocSize');
 CL.AddConstantN('REGSTR_VAL_VOLIDLETIMEOUT','String').SetString( 'VolumeIdleTimeout');
 CL.AddConstantN('REGSTR_VAL_BUFFIDLETIMEOUT','String').SetString( 'BufferIdleTimeout');
 CL.AddConstantN('REGSTR_VAL_BUFFAGETIMEOUT','String').SetString( 'BufferAgeTimeout');
 CL.AddConstantN('REGSTR_VAL_NAMENUMERICTAIL','String').SetString( 'NameNumericTail');
 CL.AddConstantN('REGSTR_VAL_READAHEADTHRESHOLD','String').SetString( 'ReadAheadThreshold');
 CL.AddConstantN('REGSTR_VAL_DOUBLEBUFFER','String').SetString( 'DoubleBuffer');
 CL.AddConstantN('REGSTR_VAL_SOFTCOMPATMODE','String').SetString( 'SoftCompatMode');
 CL.AddConstantN('REGSTR_VAL_DRIVESPINDOWN','String').SetString( 'DriveSpinDown');
 CL.AddConstantN('REGSTR_VAL_FORCEPMIO','String').SetString( 'ForcePMIO');
 CL.AddConstantN('REGSTR_VAL_FORCERMIO','String').SetString( 'ForceRMIO');
 CL.AddConstantN('REGSTR_VAL_LASTBOOTPMDRVS','String').SetString( 'LastBootPMDrvs');
 CL.AddConstantN('REGSTR_VAL_VIRTUALHDIRQ','String').SetString( 'VirtualHDIRQ');
 CL.AddConstantN('REGSTR_VAL_SRVNAMECACHECOUNT','String').SetString( 'ServerNameCacheMax');
 CL.AddConstantN('REGSTR_VAL_SRVNAMECACHE','String').SetString( 'ServerNameCache');
 CL.AddConstantN('REGSTR_VAL_SRVNAMECACHENETPROV','String').SetString( 'ServerNameCacheNumNets');
 CL.AddConstantN('REGSTR_VAL_AUTOMOUNT','String').SetString( 'AutoMountDrives');
 CL.AddConstantN('REGSTR_VAL_COMPRESSIONMETHOD','String').SetString( 'CompressionAlgorithm');
 CL.AddConstantN('REGSTR_VAL_COMPRESSIONTHRESHOLD','String').SetString( 'CompressionThreshold');
 CL.AddConstantN('REGSTR_VAL_CDCACHESIZE','String').SetString( 'CacheSize');
 CL.AddConstantN('REGSTR_VAL_CDPREFETCH','String').SetString( 'Prefetch');
 CL.AddConstantN('REGSTR_VAL_CDPREFETCHTAIL','String').SetString( 'PrefetchTail');
 CL.AddConstantN('REGSTR_VAL_CDRAWCACHE','String').SetString( 'RawCache');
 CL.AddConstantN('REGSTR_VAL_CDEXTERRORS','String').SetString( 'ExtendedErrors');
 CL.AddConstantN('REGSTR_VAL_CDSVDSENSE','String').SetString( 'SVDSense');
 CL.AddConstantN('REGSTR_VAL_CDSHOWVERSIONS','String').SetString( 'ShowVersions');
 CL.AddConstantN('REGSTR_VAL_CDCOMPATNAMES','String').SetString( 'MSCDEXCompatNames');
 CL.AddConstantN('REGSTR_VAL_CDNOREADAHEAD','String').SetString( 'NoReadAhead');
 CL.AddConstantN('REGSTR_VAL_SCSI','String').SetString( 'SCSI\');
 CL.AddConstantN('REGSTR_VAL_ESDI','String').SetString( 'ESDI\');
 CL.AddConstantN('REGSTR_VAL_FLOP','String').SetString( 'FLOP\');
 CL.AddConstantN('REGSTR_VAL_DISK','String').SetString( 'GenDisk');
 CL.AddConstantN('REGSTR_VAL_CDROM','String').SetString( 'GenCD');
 CL.AddConstantN('REGSTR_VAL_TAPE','String').SetString( 'TAPE');
 CL.AddConstantN('REGSTR_VAL_SCANNER','String').SetString( 'SCANNER');
 CL.AddConstantN('REGSTR_VAL_FLOPPY','String').SetString( 'FLOPPY');
 CL.AddConstantN('REGSTR_VAL_SCSITID','String').SetString( 'SCSITargetID');
 CL.AddConstantN('REGSTR_VAL_SCSILUN','String').SetString( 'SCSILUN');
 CL.AddConstantN('REGSTR_VAL_REVLEVEL','String').SetString( 'RevisionLevel');
 CL.AddConstantN('REGSTR_VAL_PRODUCTID','String').SetString( 'ProductId');
 CL.AddConstantN('REGSTR_VAL_PRODUCTTYPE','String').SetString( 'ProductType');
 CL.AddConstantN('REGSTR_VAL_DEVTYPE','String').SetString( 'DeviceType');
 CL.AddConstantN('REGSTR_VAL_REMOVABLE','String').SetString( 'Removable');
 CL.AddConstantN('REGSTR_VAL_CURDRVLET','String').SetString( 'CurrentDriveLetterAssignment');
 CL.AddConstantN('REGSTR_VAL_USRDRVLET','String').SetString( 'UserDriveLetterAssignment');
 CL.AddConstantN('REGSTR_VAL_SYNCDATAXFER','String').SetString( 'SyncDataXfer');
 CL.AddConstantN('REGSTR_VAL_AUTOINSNOTE','String').SetString( 'AutoInsertNotification');
 CL.AddConstantN('REGSTR_VAL_DISCONNECT','String').SetString( 'Disconnect');
 CL.AddConstantN('REGSTR_VAL_INT13','String').SetString( 'Int13');
 CL.AddConstantN('REGSTR_VAL_PMODE_INT13','String').SetString( 'PModeInt13');
 CL.AddConstantN('REGSTR_VAL_USERSETTINGS','String').SetString( 'AdapterSettings');
 CL.AddConstantN('REGSTR_VAL_NOIDE','String').SetString( 'NoIDE');
 CL.AddConstantN('REGSTR_VAL_DISKCLASSNAME','String').SetString( 'DiskDrive');
 CL.AddConstantN('REGSTR_VAL_CDROMCLASSNAME','String').SetString( 'CDROM');
 CL.AddConstantN('REGSTR_VAL_FORCELOAD','String').SetString( 'ForceLoadPD');
 CL.AddConstantN('REGSTR_VAL_FORCEFIFO','String').SetString( 'ForceFIFO');
 CL.AddConstantN('REGSTR_VAL_FORCECL','String').SetString( 'ForceChangeLine');
 CL.AddConstantN('REGSTR_VAL_NOUSECLASS','String').SetString( 'NoUseClass');
 CL.AddConstantN('REGSTR_VAL_NOINSTALLCLASS','String').SetString( 'NoInstallClass');
 CL.AddConstantN('REGSTR_VAL_NODISPLAYCLASS','String').SetString( 'NoDisplayClass');
 CL.AddConstantN('REGSTR_VAL_SILENTINSTALL','String').SetString( 'SilentInstall');
 CL.AddConstantN('REGSTR_KEY_PCMCIA_CLASS','String').SetString( 'PCMCIA');
 CL.AddConstantN('REGSTR_KEY_SCSI_CLASS','String').SetString( 'SCSIAdapter');
 CL.AddConstantN('REGSTR_KEY_PORTS_CLASS','String').SetString( 'ports');
 CL.AddConstantN('REGSTR_KEY_MEDIA_CLASS','String').SetString( 'MEDIA');
 CL.AddConstantN('REGSTR_KEY_DISPLAY_CLASS','String').SetString( 'Display');
 CL.AddConstantN('REGSTR_KEY_KEYBOARD_CLASS','String').SetString( 'Keyboard');
 CL.AddConstantN('REGSTR_KEY_MOUSE_CLASS','String').SetString( 'Mouse');
 CL.AddConstantN('REGSTR_KEY_MONITOR_CLASS','String').SetString( 'Monitor');
 CL.AddConstantN('REGSTR_VAL_PCMCIA_OPT','String').SetString( 'Options');
 CL.AddConstantN('PCMCIA_OPT_HAVE_SOCKET','LongWord').SetUInt( $00000001);
 CL.AddConstantN('PCMCIA_OPT_AUTOMEM','LongWord').SetUInt( $00000004);
 CL.AddConstantN('PCMCIA_OPT_NO_SOUND','LongWord').SetUInt( $00000008);
 CL.AddConstantN('PCMCIA_OPT_NO_AUDIO','LongWord').SetUInt( $00000010);
 CL.AddConstantN('PCMCIA_OPT_NO_APMREMOVE','LongWord').SetUInt( $00000020);
 CL.AddConstantN('REGSTR_VAL_PCMCIA_MEM','String').SetString( 'Memory');
 CL.AddConstantN('PCMCIA_DEF_MEMBEGIN','LongWord').SetUInt( $000C0000);
 CL.AddConstantN('PCMCIA_DEF_MEMEND','LongWord').SetUInt( $00FFFFFF);
 CL.AddConstantN('PCMCIA_DEF_MEMLEN','LongWord').SetUInt( $00001000);
 CL.AddConstantN('REGSTR_VAL_PCMCIA_ALLOC','String').SetString( 'AllocMemWin');
 CL.AddConstantN('REGSTR_VAL_PCMCIA_ATAD','String').SetString( 'ATADelay');
 CL.AddConstantN('REGSTR_VAL_PCMCIA_SIZ','String').SetString( 'MinRegionSize');
 CL.AddConstantN('PCMCIA_DEF_MIN_REGION','LongWord').SetUInt( $00010000);
 CL.AddConstantN('REGSTR_VAL_P1284MDL','String').SetString( 'Model');
 CL.AddConstantN('REGSTR_VAL_P1284MFG','String').SetString( 'Manufacturer');
 CL.AddConstantN('REGSTR_VAL_ISAPNP','String').SetString( 'ISAPNP');
 CL.AddConstantN('REGSTR_VAL_ISAPNP_RDP_OVERRIDE','String').SetString( 'RDPOverRide');
 CL.AddConstantN('REGSTR_VAL_PCI','String').SetString( 'PCI');
 CL.AddConstantN('REGSTR_PCI_OPTIONS','String').SetString( 'Options');
 CL.AddConstantN('REGSTR_PCI_DUAL_IDE','String').SetString( 'PCIDualIDE');
 CL.AddConstantN('PCI_OPTIONS_USE_BIOS','LongWord').SetUInt( $00000001);
 CL.AddConstantN('PCI_OPTIONS_USE_IRQ_STEERING','LongWord').SetUInt( $00000002);
 CL.AddConstantN('PCI_FLAG_NO_VIDEO_IRQ','LongWord').SetUInt( $00000001);
 CL.AddConstantN('PCI_FLAG_PCMCIA_WANT_IRQ','LongWord').SetUInt( $00000002);
 CL.AddConstantN('PCI_FLAG_DUAL_IDE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('PCI_FLAG_NO_ENUM_AT_ALL','LongWord').SetUInt( $00000008);
 CL.AddConstantN('PCI_FLAG_ENUM_NO_RESOURCE','LongWord').SetUInt( $00000010);
 CL.AddConstantN('PCI_FLAG_NEED_DWORD_ACCESS','LongWord').SetUInt( $00000020);
 CL.AddConstantN('PCI_FLAG_SINGLE_FUNCTION','LongWord').SetUInt( $00000040);
 CL.AddConstantN('PCI_FLAG_ALWAYS_ENABLED','LongWord').SetUInt( $00000080);
 CL.AddConstantN('PCI_FLAG_IS_IDE','LongWord').SetUInt( $00000100);
 CL.AddConstantN('PCI_FLAG_IS_VIDEO','LongWord').SetUInt( $00000200);
 CL.AddConstantN('PCI_FLAG_FAIL_START','LongWord').SetUInt( $00000400);
 CL.AddConstantN('REGSTR_KEY_CRASHES','String').SetString( 'Crashes');
 CL.AddConstantN('REGSTR_KEY_DANGERS','String').SetString( 'Dangers');
 CL.AddConstantN('REGSTR_KEY_DETMODVARS','String').SetString( 'DetModVars');
 CL.AddConstantN('REGSTR_KEY_NDISINFO','String').SetString( 'NDISInfo');
 CL.AddConstantN('REGSTR_VAL_PROTINIPATH','String').SetString( 'ProtIniPath');
 CL.AddConstantN('REGSTR_VAL_RESOURCES','String').SetString( 'Resources');
 CL.AddConstantN('REGSTR_VAL_CRASHFUNCS','String').SetString( 'CrashFuncs');
 CL.AddConstantN('REGSTR_VAL_CLASS','String').SetString( 'Class');
 CL.AddConstantN('REGSTR_VAL_DEVDESC','String').SetString( 'DeviceDesc');
 CL.AddConstantN('REGSTR_VAL_BOOTCONFIG','String').SetString( 'BootConfig');
 CL.AddConstantN('REGSTR_VAL_DETFUNC','String').SetString( 'DetFunc');
 CL.AddConstantN('REGSTR_VAL_DETFLAGS','String').SetString( 'DetFlags');
 CL.AddConstantN('REGSTR_VAL_COMPATIBLEIDS','String').SetString( 'CompatibleIDs');
 CL.AddConstantN('REGSTR_VAL_DETCONFIG','String').SetString( 'DetConfig');
 CL.AddConstantN('REGSTR_VAL_VERIFYKEY','String').SetString( 'VerifyKey');
 CL.AddConstantN('REGSTR_VAL_COMINFO','String').SetString( 'ComInfo');
 CL.AddConstantN('REGSTR_VAL_INFNAME','String').SetString( 'InfName');
 CL.AddConstantN('REGSTR_VAL_CARDSPECIFIC','String').SetString( 'CardSpecific');
 CL.AddConstantN('REGSTR_VAL_NETOSTYPE','String').SetString( 'NetOSType');
 CL.AddConstantN('REGSTR_DATA_NETOS_NDIS','String').SetString( 'NDIS');
 CL.AddConstantN('REGSTR_DATA_NETOS_ODI','String').SetString( 'ODI');
 CL.AddConstantN('REGSTR_DATA_NETOS_IPX','String').SetString( 'IPX');
 CL.AddConstantN('REGSTR_VAL_MFG','String').SetString( 'Mfg');
 CL.AddConstantN('REGSTR_VAL_SCAN_ONLY_FIRST','String').SetString( 'ScanOnlyFirstDrive');
 CL.AddConstantN('REGSTR_VAL_SHARE_IRQ','String').SetString( 'ForceIRQSharing');
 CL.AddConstantN('REGSTR_VAL_NONSTANDARD_ATAPI','String').SetString( 'NonStandardATAPI');
 CL.AddConstantN('REGSTR_VAL_IDE_FORCE_SERIALIZE','String').SetString( 'ForceSerialization');
 CL.AddConstantN('REGSTR_VAL_MAX_HCID_LEN','LongInt').SetInt( 1024);
 CL.AddConstantN('REGSTR_VAL_HWREV','String').SetString( 'HWRevision');
 CL.AddConstantN('REGSTR_VAL_ENABLEINTS','String').SetString( 'EnableInts');
 CL.AddConstantN('REGDF_NOTDETIO','LongWord').SetUInt( $00000001);
 CL.AddConstantN('REGDF_NOTDETMEM','LongWord').SetUInt( $00000002);
 CL.AddConstantN('REGDF_NOTDETIRQ','LongWord').SetUInt( $00000004);
 CL.AddConstantN('REGDF_NOTDETDMA','LongWord').SetUInt( $00000008);
 CL.AddConstantN('REGDF_NEEDFULLCONFIG','LongWord').SetUInt( $00000010);
 CL.AddConstantN('REGDF_GENFORCEDCONFIG','LongWord').SetUInt( $00000020);
 CL.AddConstantN('REGDF_NODETCONFIG','LongWord').SetUInt( $00008000);
 CL.AddConstantN('REGDF_CONFLICTIO','LongWord').SetUInt( $00010000);
 CL.AddConstantN('REGDF_CONFLICTMEM','LongWord').SetUInt( $00020000);
 CL.AddConstantN('REGDF_CONFLICTIRQ','LongWord').SetUInt( $00040000);
 CL.AddConstantN('REGDF_CONFLICTDMA','LongWord').SetUInt( $00080000);
 CL.AddConstantN('REGDF_MAPIRQ2TO9','LongWord').SetUInt( $00100000);
 CL.AddConstantN('REGDF_NOTVERIFIED','LongWord').SetUInt( $80000000);
 CL.AddConstantN('REGSTR_VAL_APMBIOSVER','String').SetString( 'APMBiosVer');
 CL.AddConstantN('REGSTR_VAL_APMFLAGS','String').SetString( 'APMFlags');
 CL.AddConstantN('REGSTR_VAL_SLSUPPORT','String').SetString( 'SLSupport');
 CL.AddConstantN('REGSTR_VAL_MACHINETYPE','String').SetString( 'MachineType');
 CL.AddConstantN('REGSTR_VAL_SETUPMACHINETYPE','String').SetString( 'SetupMachineType');
 CL.AddConstantN('REGSTR_MACHTYPE_UNKNOWN','String').SetString( 'Unknown');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPC','String').SetString( 'IBM PC');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPCJR','String').SetString( 'IBM PCjr');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPCCONV','String').SetString( 'IBM PC Convertible');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPCXT','String').SetString( 'IBM PC/XT');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPCXT_286','String').SetString( 'IBM PC/XT 286');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPCAT','String').SetString( 'IBM PC/AT');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_25','String').SetString( 'IBM PS/2-25');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_30_286','String').SetString( 'IBM PS/2-30 286');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_30','String').SetString( 'IBM PS/2-30');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_50','String').SetString( 'IBM PS/2-50');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_50Z','String').SetString( 'IBM PS/2-50Z');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_55SX','String').SetString( 'IBM PS/2-55SX');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_60','String').SetString( 'IBM PS/2-60');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_65SX','String').SetString( 'IBM PS/2-65SX');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_70','String').SetString( 'IBM PS/2-70');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_P70','String').SetString( 'IBM PS/2-P70');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_70_80','String').SetString( 'IBM PS/2-70/80');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_80','String').SetString( 'IBM PS/2-80');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS2_90','String').SetString( 'IBM PS/2-90');
 CL.AddConstantN('REGSTR_MACHTYPE_IBMPS1','String').SetString( 'IBM PS/1');
 CL.AddConstantN('REGSTR_MACHTYPE_PHOENIX_PCAT','String').SetString( 'Phoenix PC/AT Compatible');
 CL.AddConstantN('REGSTR_MACHTYPE_HP_VECTRA','String').SetString( 'HP Vectra');
 CL.AddConstantN('REGSTR_MACHTYPE_ATT_PC','String').SetString( 'AT&T PC');
 CL.AddConstantN('REGSTR_MACHTYPE_ZENITH_PC','String').SetString( 'Zenith PC');
 CL.AddConstantN('REGSTR_VAL_APMMENUSUSPEND','String').SetString( 'APMMenuSuspend');
 CL.AddConstantN('APMMENUSUSPEND_DISABLED','LongInt').SetInt( 0);
 CL.AddConstantN('APMMENUSUSPEND_ENABLED','LongInt').SetInt( 1);
 CL.AddConstantN('APMMENUSUSPEND_UNDOCKED','LongInt').SetInt( 2);
 CL.AddConstantN('APMMENUSUSPEND_NOCHANGE','LongWord').SetUInt( $80);
 CL.AddConstantN('REGSTR_VAL_BUSTYPE','String').SetString( 'BusType');
 CL.AddConstantN('REGSTR_VAL_CPU','String').SetString( 'CPU');
 CL.AddConstantN('REGSTR_VAL_NDP','String').SetString( 'NDP');
 CL.AddConstantN('REGSTR_VAL_PNPBIOSVER','String').SetString( 'PnPBIOSVer');
 CL.AddConstantN('REGSTR_VAL_PNPSTRUCOFFSET','String').SetString( 'PnPStrucOffset');
 CL.AddConstantN('REGSTR_VAL_PCIBIOSVER','String').SetString( 'PCIBIOSVer');
 CL.AddConstantN('REGSTR_VAL_HWMECHANISM','String').SetString( 'HWMechanism');
 CL.AddConstantN('REGSTR_VAL_LASTPCIBUSNUM','String').SetString( 'LastPCIBusNum');
 CL.AddConstantN('REGSTR_VAL_CONVMEM','String').SetString( 'ConvMem');
 CL.AddConstantN('REGSTR_VAL_EXTMEM','String').SetString( 'ExtMem');
 CL.AddConstantN('REGSTR_VAL_COMPUTERNAME','String').SetString( 'ComputerName');
 CL.AddConstantN('REGSTR_VAL_BIOSNAME','String').SetString( 'BIOSName');
 CL.AddConstantN('REGSTR_VAL_BIOSVERSION','String').SetString( 'BIOSVersion');
 CL.AddConstantN('REGSTR_VAL_BIOSDATE','String').SetString( 'BIOSDate');
 CL.AddConstantN('REGSTR_VAL_MODEL','String').SetString( 'Model');
 CL.AddConstantN('REGSTR_VAL_SUBMODEL','String').SetString( 'Submodel');
 CL.AddConstantN('REGSTR_VAL_REVISION','String').SetString( 'Revision');
 CL.AddConstantN('REGSTR_VAL_FIFODEPTH','String').SetString( 'FIFODepth');
 CL.AddConstantN('REGSTR_VAL_RDINTTHRESHOLD','String').SetString( 'RDIntThreshold');
 CL.AddConstantN('REGSTR_VAL_WRINTTHRESHOLD','String').SetString( 'WRIntThreshold');
 CL.AddConstantN('REGSTR_VAL_PRIORITY','String').SetString( 'Priority');
 CL.AddConstantN('REGSTR_VAL_DRIVER','String').SetString( 'Driver');
 CL.AddConstantN('REGSTR_VAL_FUNCDESC','String').SetString( 'FunctionDesc');
 CL.AddConstantN('REGSTR_VAL_FORCEDCONFIG','String').SetString( 'ForcedConfig');
 CL.AddConstantN('REGSTR_VAL_CONFIGFLAGS','String').SetString( 'ConfigFlags');
 CL.AddConstantN('REGSTR_VAL_CSCONFIGFLAGS','String').SetString( 'CSConfigFlags');
 CL.AddConstantN('CONFIGFLAG_DISABLED','LongWord').SetUInt( $00000001);
 CL.AddConstantN('CONFIGFLAG_REMOVED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('CONFIGFLAG_MANUAL_INSTALL','LongWord').SetUInt( $00000004);
 CL.AddConstantN('CONFIGFLAG_IGNORE_BOOT_LC','LongWord').SetUInt( $00000008);
 CL.AddConstantN('CONFIGFLAG_NET_BOOT','LongWord').SetUInt( $00000010);
 CL.AddConstantN('CONFIGFLAG_REINSTALL','LongWord').SetUInt( $00000020);
 CL.AddConstantN('CONFIGFLAG_FAILEDINSTALL','LongWord').SetUInt( $00000040);
 CL.AddConstantN('CONFIGFLAG_CANTSTOPACHILD','LongWord').SetUInt( $00000080);
 CL.AddConstantN('CONFIGFLAG_OKREMOVEROM','LongWord').SetUInt( $00000100);
 CL.AddConstantN('CONFIGFLAG_NOREMOVEEXIT','LongWord').SetUInt( $00000200);
 CL.AddConstantN('CSCONFIGFLAG_BITS','LongWord').SetUInt( $00000007);
 CL.AddConstantN('CSCONFIGFLAG_DISABLED','LongWord').SetUInt( $00000001);
 CL.AddConstantN('CSCONFIGFLAG_DO_NOT_CREATE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('CSCONFIGFLAG_DO_NOT_START','LongWord').SetUInt( $00000004);
 CL.AddConstantN('DMSTATEFLAG_APPLYTOALL','LongWord').SetUInt( $00000001);
 CL.AddConstantN('REGSTR_VAL_ROOT_DEVNODE','String').SetString( 'HTREE\ROOT\0');
 CL.AddConstantN('REGSTR_VAL_RESERVED_DEVNODE','String').SetString( 'HTREE\RESERVED\0');
 CL.AddConstantN('REGSTR_PATH_READDATAPORT','String').SetString( REGSTR_KEY_ISAENUM + '\ReadDataPort\0');
 CL.AddConstantN('REGSTR_PATH_MULTI_FUNCTION','String').SetString( 'MF');
 CL.AddConstantN('REGSTR_VAL_RESOURCE_MAP','String').SetString( 'ResourceMap');
 CL.AddConstantN('REGSTR_PATH_CHILD_PREFIX','String').SetString( 'Child');
 CL.AddConstantN('NUM_RESOURCE_MAP','LongInt').SetInt( 256);
 CL.AddConstantN('REGSTR_VAL_MF_FLAGS','String').SetString( 'MFFlags');
 CL.AddConstantN('MF_FLAGS_EVEN_IF_NO_RESOURCE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('MF_FLAGS_NO_CREATE_IF_NO_RESOURCE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('MF_FLAGS_FILL_IN_UNKNOWN_RESOURCE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('MF_FLAGS_CREATE_BUT_NO_SHOW_DISABLED','LongWord').SetUInt( $00000008);
 CL.AddConstantN('REGSTR_VAL_EISA_RANGES','String').SetString( 'EISARanges');
 CL.AddConstantN('REGSTR_VAL_EISA_FUNCTIONS','String').SetString( 'EISAFunctions');
 CL.AddConstantN('REGSTR_VAL_EISA_FUNCTIONS_MASK','String').SetString( 'EISAFunctionsMask');
 CL.AddConstantN('REGSTR_VAL_EISA_FLAGS','String').SetString( 'EISAFlags');
 CL.AddConstantN('REGSTR_VAL_EISA_SIMULATE_INT15','String').SetString( 'EISASimulateInt15');
 CL.AddConstantN('REGSTR_VAL_EISA_RANGES_NEC_98','String').SetString( 'NESARanges');
 CL.AddConstantN('REGSTR_VAL_EISA_FUNCTIONS_NEC_98','String').SetString( 'NESAFunctions');
 CL.AddConstantN('REGSTR_VAL_EISA_FUNCTIONS_MASK_NEC_98','String').SetString( 'NESAFunctionsMask');
 CL.AddConstantN('REGSTR_VAL_EISA_FLAGS_NEC_98','String').SetString( 'NESAFlags');
 CL.AddConstantN('REGSTR_VAL_EISA_SIMULATE_INT15_NEC_98','String').SetString( 'NESASimulateInt15');
 CL.AddConstantN('EISAFLAG_NO_IO_MERGE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('EISAFLAG_SLOT_IO_FIRST','LongWord').SetUInt( $00000002);
 CL.AddConstantN('EISA_NO_MAX_FUNCTION','LongWord').SetUInt( $FF);
 CL.AddConstantN('NUM_EISA_RANGES','LongInt').SetInt( 4);
 CL.AddConstantN('REGSTR_VAL_DRVDESC','String').SetString( 'DriverDesc');
 CL.AddConstantN('REGSTR_VAL_DEVLOADER','String').SetString( 'DevLoader');
 CL.AddConstantN('REGSTR_VAL_STATICVXD','String').SetString( 'StaticVxD');
 CL.AddConstantN('REGSTR_VAL_PROPERTIES','String').SetString( 'Properties');
 CL.AddConstantN('REGSTR_VAL_MANUFACTURER','String').SetString( 'Manufacturer');
 CL.AddConstantN('REGSTR_VAL_EXISTS','String').SetString( 'Exists');
 CL.AddConstantN('REGSTR_VAL_CMENUMFLAGS','String').SetString( 'CMEnumFlags');
 CL.AddConstantN('REGSTR_VAL_CMDRIVFLAGS','String').SetString( 'CMDrivFlags');
 CL.AddConstantN('REGSTR_VAL_ENUMERATOR','String').SetString( 'Enumerator');
 CL.AddConstantN('REGSTR_VAL_DEVICEDRIVER','String').SetString( 'DeviceDriver');
 CL.AddConstantN('REGSTR_VAL_PORTNAME','String').SetString( 'PortName');
 CL.AddConstantN('REGSTR_VAL_INFPATH','String').SetString( 'InfPath');
 CL.AddConstantN('REGSTR_VAL_INFSECTION','String').SetString( 'InfSection');
 CL.AddConstantN('REGSTR_VAL_POLLING','String').SetString( 'Polling');
 CL.AddConstantN('REGSTR_VAL_DONTLOADIFCONFLICT','String').SetString( 'DontLoadIfConflict');
 CL.AddConstantN('REGSTR_VAL_PORTSUBCLASS','String').SetString( 'PortSubClass');
 CL.AddConstantN('REGSTR_VAL_NETCLEAN','String').SetString( 'NetClean');
 CL.AddConstantN('REGSTR_VAL_IDE_NO_SERIALIZE','String').SetString( 'IDENoSerialize');
 CL.AddConstantN('REGSTR_VAL_NOCMOSORFDPT','String').SetString( 'NoCMOSorFDPT');
 CL.AddConstantN('REGSTR_VAL_COMVERIFYBASE','String').SetString( 'COMVerifyBase');
 CL.AddConstantN('REGSTR_KEY_OVERRIDE','String').SetString( 'Override');
 CL.AddConstantN('REGSTR_VAL_CONFIGMG','String').SetString( 'CONFIGMG');
 CL.AddConstantN('REGSTR_VAL_SYSDM','String').SetString( 'SysDM');
 CL.AddConstantN('REGSTR_VAL_SYSDMFUNC','String').SetString( 'SysDMFunc');
 CL.AddConstantN('REGSTR_VAL_PRIVATE','String').SetString( 'Private');
 CL.AddConstantN('REGSTR_VAL_PRIVATEFUNC','String').SetString( 'PrivateFunc');
 CL.AddConstantN('REGSTR_VAL_DETECT','String').SetString( 'Detect');
 CL.AddConstantN('REGSTR_VAL_DETECTFUNC','String').SetString( 'DetectFunc');
 CL.AddConstantN('REGSTR_VAL_ASKFORCONFIG','String').SetString( 'AskForConfig');
 CL.AddConstantN('REGSTR_VAL_ASKFORCONFIGFUNC','String').SetString( 'AskForConfigFunc');
 CL.AddConstantN('REGSTR_VAL_WAITFORUNDOCK','String').SetString( 'WaitForUndock');
 CL.AddConstantN('REGSTR_VAL_WAITFORUNDOCKFUNC','String').SetString( 'WaitForUndockFunc');
 CL.AddConstantN('REGSTR_VAL_REMOVEROMOKAY','String').SetString( 'RemoveRomOkay');
 CL.AddConstantN('REGSTR_VAL_REMOVEROMOKAYFUNC','String').SetString( 'RemoveRomOkayFunc');
 CL.AddConstantN('REGSTR_VAL_CURCONFIG','String').SetString( 'CurrentConfig');
 CL.AddConstantN('REGSTR_VAL_FRIENDLYNAME','String').SetString( 'FriendlyName');
 CL.AddConstantN('REGSTR_VAL_CURRENTCONFIG','String').SetString( 'CurrentConfig');
 CL.AddConstantN('REGSTR_VAL_MAP','String').SetString( 'Map');
 CL.AddConstantN('REGSTR_VAL_ID','String').SetString( 'CurrentID');
 CL.AddConstantN('REGSTR_VAL_DOCKED','String').SetString( 'CurrentDockedState');
 CL.AddConstantN('REGSTR_VAL_CHECKSUM','String').SetString( 'CurrentChecksum');
 CL.AddConstantN('REGSTR_VAL_HWDETECT','String').SetString( 'HardwareDetect');
 CL.AddConstantN('REGSTR_VAL_INHIBITRESULTS','String').SetString( 'InhibitResults');
 CL.AddConstantN('REGSTR_VAL_PROFILEFLAGS','String').SetString( 'ProfileFlags');
 CL.AddConstantN('REGSTR_KEY_PCMCIA','String').SetString( 'PCMCIA\');
 CL.AddConstantN('REGSTR_KEY_PCUNKNOWN','String').SetString( 'UNKNOWN_MANUFACTURER');
 CL.AddConstantN('REGSTR_VAL_PCSSDRIVER','String').SetString( 'Driver');
 CL.AddConstantN('REGSTR_KEY_PCMTD','String').SetString( 'MTD-');
 CL.AddConstantN('REGSTR_VAL_PCMTDRIVER','String').SetString( 'MTD');
 CL.AddConstantN('REGSTR_VAL_HARDWAREID','String').SetString( 'HardwareID');
 CL.AddConstantN('REGSTR_VAL_INSTALLER','String').SetString( 'Installer');
 CL.AddConstantN('REGSTR_VAL_INSICON','String').SetString( 'Icon');
 CL.AddConstantN('REGSTR_VAL_ENUMPROPPAGES','String').SetString( 'EnumPropPages');
 CL.AddConstantN('REGSTR_VAL_BASICPROPERTIES','String').SetString( 'BasicProperties');
 CL.AddConstantN('REGSTR_VAL_PRIVATEPROBLEM','String').SetString( 'PrivateProblem');
 CL.AddConstantN('REGSTR_KEY_CURRENT','String').SetString( 'Current');
 CL.AddConstantN('REGSTR_KEY_DEFAULT','String').SetString( 'Default');
 CL.AddConstantN('REGSTR_KEY_MODES','String').SetString( 'Modes');
 CL.AddConstantN('REGSTR_VAL_MODE','String').SetString( 'Mode');
 CL.AddConstantN('REGSTR_VAL_BPP','String').SetString( 'BPP');
 CL.AddConstantN('REGSTR_VAL_HRES','String').SetString( 'HRes');
 CL.AddConstantN('REGSTR_VAL_VRES','String').SetString( 'VRes');
 CL.AddConstantN('REGSTR_VAL_FONTSIZE','String').SetString( 'FontSize');
 CL.AddConstantN('REGSTR_VAL_DRV','String').SetString( 'drv');
 CL.AddConstantN('REGSTR_VAL_GRB','String').SetString( 'grb');
 CL.AddConstantN('REGSTR_VAL_VDD','String').SetString( 'vdd');
 CL.AddConstantN('REGSTR_VAL_VER','String').SetString( 'Ver');
 CL.AddConstantN('REGSTR_VAL_MAXRES','String').SetString( 'MaxResolution');
 CL.AddConstantN('REGSTR_VAL_DPMS','String').SetString( 'DPMS');
 CL.AddConstantN('REGSTR_VAL_RESUMERESET','String').SetString( 'ResumeReset');
 CL.AddConstantN('REGSTR_VAL_DESCRIPTION','String').SetString( 'Description');
 CL.AddConstantN('REGSTR_KEY_SYSTEM','String').SetString( 'System');
 CL.AddConstantN('REGSTR_KEY_USER','String').SetString( 'User');
 CL.AddConstantN('REGSTR_VAL_DPI','String').SetString( 'dpi');
 CL.AddConstantN('REGSTR_VAL_PCICOPTIONS','String').SetString( 'PCICOptions');
 CL.AddConstantN('PCIC_DEFAULT_IRQMASK','LongWord').SetUInt( $4EB8);
 CL.AddConstantN('PCIC_DEFAULT_IRQMASK_NEC_98','LongWord').SetUInt( $1468);
 CL.AddConstantN('PCIC_DEFAULT_NUMSOCKETS','LongInt').SetInt( 0);
 CL.AddConstantN('REGSTR_VAL_PCICIRQMAP','String').SetString( 'PCICIRQMap');
 CL.AddConstantN('REGSTR_PATH_APPEARANCE','String').SetString( 'Control Panel\Appearance');
 CL.AddConstantN('REGSTR_PATH_LOOKSCHEMES','String').SetString( 'Control Panel\Appearance\Schemes');
 CL.AddConstantN('REGSTR_VAL_CUSTOMCOLORS','String').SetString( 'CustomColors');
 CL.AddConstantN('REGSTR_PATH_SCREENSAVE','String').SetString( 'Control Panel\Desktop');
 CL.AddConstantN('REGSTR_VALUE_USESCRPASSWORD','String').SetString( 'ScreenSaveUsePassword');
 CL.AddConstantN('REGSTR_VALUE_SCRPASSWORD','String').SetString( 'ScreenSave_Data');
 CL.AddConstantN('REGSTR_VALUE_LOWPOWERTIMEOUT','String').SetString( 'ScreenSaveLowPowerTimeout');
 CL.AddConstantN('REGSTR_VALUE_POWEROFFTIMEOUT','String').SetString( 'ScreenSavePowerOffTimeout');
 CL.AddConstantN('REGSTR_VALUE_LOWPOWERACTIVE','String').SetString( 'ScreenSaveLowPowerActive');
 CL.AddConstantN('REGSTR_VALUE_POWEROFFACTIVE','String').SetString( 'ScreenSavePowerOffActive');
 CL.AddConstantN('REGSTR_PATH_WINDOWSAPPLETS','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Applets');
 CL.AddConstantN('REGSTR_PATH_SYSTRAY','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Applets\SysTray');
 CL.AddConstantN('REGSTR_VAL_SYSTRAYSVCS','String').SetString( 'Services');
 CL.AddConstantN('REGSTR_VAL_SYSTRAYBATFLAGS','String').SetString( 'PowerFlags');
 CL.AddConstantN('REGSTR_VAL_SYSTRAYPCCARDFLAGS','String').SetString( 'PCMCIAFlags');
 CL.AddConstantN('REGSTR_PATH_NETWORK_USERSETTINGS','String').SetString( 'Network');
 CL.AddConstantN('REGSTR_KEY_NETWORK_PERSISTENT','String').SetString( '\Persistent');
 CL.AddConstantN('REGSTR_KEY_NETWORK_RECENT','String').SetString( '\Recent');
 CL.AddConstantN('REGSTR_VAL_REMOTE_PATH','String').SetString( 'RemotePath');
 CL.AddConstantN('REGSTR_VAL_USER_NAME','String').SetString( 'UserName');
 CL.AddConstantN('REGSTR_VAL_PROVIDER_NAME','String').SetString( 'ProviderName');
 CL.AddConstantN('REGSTR_VAL_CONNECTION_TYPE','String').SetString( 'ConnectionType');
 CL.AddConstantN('REGSTR_VAL_UPGRADE','String').SetString( 'Upgrade');
 CL.AddConstantN('REGSTR_KEY_LOGON','String').SetString( '\Logon');
 CL.AddConstantN('REGSTR_VAL_MUSTBEVALIDATED','String').SetString( 'MustBeValidated');
 CL.AddConstantN('REGSTR_VAL_RUNLOGINSCRIPT','String').SetString( 'ProcessLoginScript');
 CL.AddConstantN('REGSTR_KEY_NETWORKPROVIDER','String').SetString( '\NetworkProvider');
 CL.AddConstantN('REGSTR_VAL_AUTHENT_AGENT','String').SetString( 'AuthenticatingAgent');
 CL.AddConstantN('REGSTR_VAL_PREFREDIR','String').SetString( 'PreferredRedir');
 CL.AddConstantN('REGSTR_VAL_AUTOSTART','String').SetString( 'AutoStart');
 CL.AddConstantN('REGSTR_VAL_AUTOLOGON','String').SetString( 'AutoLogon');
 CL.AddConstantN('REGSTR_VAL_NETCARD','String').SetString( 'Netcard');
 CL.AddConstantN('REGSTR_VAL_TRANSPORT','String').SetString( 'Transport');
 CL.AddConstantN('REGSTR_VAL_DYNAMIC','String').SetString( 'Dynamic');
 CL.AddConstantN('REGSTR_VAL_TRANSITION','String').SetString( 'Transition');
 CL.AddConstantN('REGSTR_VAL_STATICDRIVE','String').SetString( 'StaticDrive');
 CL.AddConstantN('REGSTR_VAL_LOADHI','String').SetString( 'LoadHi');
 CL.AddConstantN('REGSTR_VAL_LOADRMDRIVERS','String').SetString( 'LoadRMDrivers');
 CL.AddConstantN('REGSTR_VAL_SETUPN','String').SetString( 'SetupN');
 CL.AddConstantN('REGSTR_VAL_SETUPNPATH','String').SetString( 'SetupNPath');
 CL.AddConstantN('REGSTR_VAL_WRKGRP_FORCEMAPPING','String').SetString( 'WrkgrpForceMapping');
 CL.AddConstantN('REGSTR_VAL_WRKGRP_REQUIRED','String').SetString( 'WrkgrpRequired');
 CL.AddConstantN('REGSTR_PATH_CURRENT_CONTROL_SET','String').SetString( 'System\CurrentControlSet\Control');
 CL.AddConstantN('REGSTR_VAL_CURRENT_USER','String').SetString( 'Current User');
 CL.AddConstantN('REGSTR_PATH_PWDPROVIDER','String').SetString( 'System\CurrentControlSet\Control\PwdProvider');
 CL.AddConstantN('REGSTR_VAL_PWDPROVIDER_PATH','String').SetString( 'ProviderPath');
 CL.AddConstantN('REGSTR_VAL_PWDPROVIDER_DESC','String').SetString( 'Description');
 CL.AddConstantN('REGSTR_VAL_PWDPROVIDER_CHANGEPWD','String').SetString( 'ChangePassword');
 CL.AddConstantN('REGSTR_VAL_PWDPROVIDER_CHANGEPWDHWND','String').SetString( 'ChangePasswordHwnd');
 CL.AddConstantN('REGSTR_VAL_PWDPROVIDER_GETPWDSTATUS','String').SetString( 'GetPasswordStatus');
 CL.AddConstantN('REGSTR_VAL_PWDPROVIDER_ISNP','String').SetString( 'NetworkProvider');
 CL.AddConstantN('REGSTR_VAL_PWDPROVIDER_CHANGEORDER','String').SetString( 'ChangeOrder');
 CL.AddConstantN('REGSTR_PATH_POLICIES','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Policies');
 CL.AddConstantN('REGSTR_PATH_UPDATE','String').SetString( 'System\CurrentControlSet\Control\Update');
 CL.AddConstantN('REGSTR_VALUE_ENABLE','String').SetString( 'Enable');
 CL.AddConstantN('REGSTR_VALUE_VERBOSE','String').SetString( 'Verbose');
 CL.AddConstantN('REGSTR_VALUE_NETPATH','String').SetString( 'NetworkPath');
 CL.AddConstantN('REGSTR_VALUE_DEFAULTLOC','String').SetString( 'UseDefaultNetLocation');
 CL.AddConstantN('REGSTR_KEY_NETWORK','String').SetString( 'Network');
 CL.AddConstantN('REGSTR_KEY_PRINTERS','String').SetString( 'Printers');
 CL.AddConstantN('REGSTR_KEY_WINOLDAPP','String').SetString( 'WinOldApp');
 CL.AddConstantN('REGSTR_VAL_NOFILESHARING','String').SetString( 'NoFileSharing');
 CL.AddConstantN('REGSTR_VAL_NOPRINTSHARING','String').SetString( 'NoPrintSharing');
 CL.AddConstantN('REGSTR_VAL_NOFILESHARINGCTRL','String').SetString( 'NoFileSharingControl');
 CL.AddConstantN('REGSTR_VAL_NOPRINTSHARINGCTRL','String').SetString( 'NoPrintSharingControl');
 CL.AddConstantN('REGSTR_VAL_HIDESHAREPWDS','String').SetString( 'HideSharePwds');
 CL.AddConstantN('REGSTR_VAL_DISABLEPWDCACHING','String').SetString( 'DisablePwdCaching');
 CL.AddConstantN('REGSTR_VAL_ALPHANUMPWDS','String').SetString( 'AlphanumPwds');
 CL.AddConstantN('REGSTR_VAL_NETSETUP_DISABLE','String').SetString( 'NoNetSetup');
 CL.AddConstantN('REGSTR_VAL_NETSETUP_NOCONFIGPAGE','String').SetString( 'NoNetSetupConfigPage');
 CL.AddConstantN('REGSTR_VAL_NETSETUP_NOIDPAGE','String').SetString( 'NoNetSetupIDPage');
 CL.AddConstantN('REGSTR_VAL_NETSETUP_NOSECURITYPAGE','String').SetString( 'NoNetSetupSecurityPage');
 CL.AddConstantN('REGSTR_VAL_SYSTEMCPL_NOVIRTMEMPAGE','String').SetString( 'NoVirtMemPage');
 CL.AddConstantN('REGSTR_VAL_SYSTEMCPL_NODEVMGRPAGE','String').SetString( 'NoDevMgrPage');
 CL.AddConstantN('REGSTR_VAL_SYSTEMCPL_NOCONFIGPAGE','String').SetString( 'NoConfigPage');
 CL.AddConstantN('REGSTR_VAL_SYSTEMCPL_NOFILESYSPAGE','String').SetString( 'NoFileSysPage');
 CL.AddConstantN('REGSTR_VAL_DISPCPL_NODISPCPL','String').SetString( 'NoDispCPL');
 CL.AddConstantN('REGSTR_VAL_DISPCPL_NOBACKGROUNDPAGE','String').SetString( 'NoDispBackgroundPage');
 CL.AddConstantN('REGSTR_VAL_DISPCPL_NOSCRSAVPAGE','String').SetString( 'NoDispScrSavPage');
 CL.AddConstantN('REGSTR_VAL_DISPCPL_NOAPPEARANCEPAGE','String').SetString( 'NoDispAppearancePage');
 CL.AddConstantN('REGSTR_VAL_DISPCPL_NOSETTINGSPAGE','String').SetString( 'NoDispSettingsPage');
 CL.AddConstantN('REGSTR_VAL_SECCPL_NOSECCPL','String').SetString( 'NoSecCPL');
 CL.AddConstantN('REGSTR_VAL_SECCPL_NOPWDPAGE','String').SetString( 'NoPwdPage');
 CL.AddConstantN('REGSTR_VAL_SECCPL_NOADMINPAGE','String').SetString( 'NoAdminPage');
 CL.AddConstantN('REGSTR_VAL_SECCPL_NOPROFILEPAGE','String').SetString( 'NoProfilePage');
 CL.AddConstantN('REGSTR_VAL_PRINTERS_HIDETABS','String').SetString( 'NoPrinterTabs');
 CL.AddConstantN('REGSTR_VAL_PRINTERS_NODELETE','String').SetString( 'NoDeletePrinter');
 CL.AddConstantN('REGSTR_VAL_PRINTERS_NOADD','String').SetString( 'NoAddPrinter');
 CL.AddConstantN('REGSTR_VAL_WINOLDAPP_DISABLED','String').SetString( 'Disabled');
 CL.AddConstantN('REGSTR_VAL_WINOLDAPP_NOREALMODE','String').SetString( 'NoRealMode');
 CL.AddConstantN('REGSTR_VAL_NOENTIRENETWORK','String').SetString( 'NoEntireNetwork');
 CL.AddConstantN('REGSTR_VAL_NOWORKGROUPCONTENTS','String').SetString( 'NoWorkgroupContents');
 CL.AddConstantN('REGSTR_VAL_MINPWDLEN','String').SetString( 'MinPwdLen');
 CL.AddConstantN('REGSTR_VAL_PWDEXPIRATION','String').SetString( 'PwdExpiration');
 CL.AddConstantN('REGSTR_VAL_WIN31PROVIDER','String').SetString( 'Win31Provider');
 CL.AddConstantN('REGSTR_VAL_DISABLEREGTOOLS','String').SetString( 'DisableRegistryTools');
 CL.AddConstantN('REGSTR_PATH_WINLOGON','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Winlogon');
 CL.AddConstantN('REGSTR_VAL_LEGALNOTICECAPTION','String').SetString( 'LegalNoticeCaption');
 CL.AddConstantN('REGSTR_VAL_LEGALNOTICETEXT','String').SetString( 'LegalNoticeText');
 CL.AddConstantN('REGSTR_VAL_RESTRICTRUN','String').SetString( 'RestrictRun');
 CL.AddConstantN('REGSTR_KEY_POL_USERS','String').SetString( 'Users');
 CL.AddConstantN('REGSTR_KEY_POL_COMPUTERS','String').SetString( 'Computers');
 CL.AddConstantN('REGSTR_KEY_POL_USERGROUPS','String').SetString( 'UserGroups');
 CL.AddConstantN('REGSTR_KEY_POL_DEFAULT','String').SetString( '.default');
 CL.AddConstantN('REGSTR_KEY_POL_USERGROUPDATA','String').SetString( 'GroupData\UserGroups\Priority');
 CL.AddConstantN('REGSTR_PATH_TIMEZONE','String').SetString( 'System\CurrentControlSet\Control\TimeZoneInformation');
 CL.AddConstantN('REGSTR_VAL_TZBIAS','String').SetString( 'Bias');
 CL.AddConstantN('REGSTR_VAL_TZDLTBIAS','String').SetString( 'DaylightBias');
 CL.AddConstantN('REGSTR_VAL_TZSTDBIAS','String').SetString( 'StandardBias');
 CL.AddConstantN('REGSTR_VAL_TZACTBIAS','String').SetString( 'ActiveTimeBias');
 CL.AddConstantN('REGSTR_VAL_TZDLTFLAG','String').SetString( 'DaylightFlag');
 CL.AddConstantN('REGSTR_VAL_TZSTDSTART','String').SetString( 'StandardStart');
 CL.AddConstantN('REGSTR_VAL_TZDLTSTART','String').SetString( 'DaylightStart');
 CL.AddConstantN('REGSTR_VAL_TZDLTNAME','String').SetString( 'DaylightName');
 CL.AddConstantN('REGSTR_VAL_TZSTDNAME','String').SetString( 'StandardName');
 CL.AddConstantN('REGSTR_VAL_TZNOCHANGESTART','String').SetString( 'NoChangeStart');
 CL.AddConstantN('REGSTR_VAL_TZNOCHANGEEND','String').SetString( 'NoChangeEnd');
 CL.AddConstantN('REGSTR_VAL_TZNOAUTOTIME','String').SetString( 'DisableAutoDaylightTimeSet');
 CL.AddConstantN('REGSTR_PATH_FLOATINGPOINTPROCESSOR','String').SetString( 'HARDWARE\DESCRIPTION\System\FloatingPointProcessor');
 CL.AddConstantN('REGSTR_PATH_FLOATINGPOINTPROCESSOR0','String').SetString( 'HARDWARE\DESCRIPTION\System\FloatingPointProcessor\0');
 CL.AddConstantN('REGSTR_PATH_COMPUTRNAME','String').SetString( 'System\CurrentControlSet\Control\ComputerName\ComputerName');
 CL.AddConstantN('REGSTR_VAL_COMPUTRNAME','String').SetString( 'ComputerName');
 CL.AddConstantN('REGSTR_PATH_SHUTDOWN','String').SetString( 'System\CurrentControlSet\Control\Shutdown');
 CL.AddConstantN('REGSTR_VAL_FORCEREBOOT','String').SetString( 'ForceReboot');
 CL.AddConstantN('REGSTR_VAL_SETUPPROGRAMRAN','String').SetString( 'SetupProgramRan');
 CL.AddConstantN('REGSTR_VAL_DOES_POLLING','String').SetString( 'PollingSupportNeeded');
 CL.AddConstantN('REGSTR_PATH_KNOWNDLLS','String').SetString( 'System\CurrentControlSet\Control\SessionManager\KnownDLLs');
 CL.AddConstantN('REGSTR_PATH_KNOWN16DLLS','String').SetString( 'System\CurrentControlSet\Control\SessionManager\Known16DLLs');
 CL.AddConstantN('REGSTR_PATH_CHECKVERDLLS','String').SetString( 'System\CurrentControlSet\Control\SessionManager\CheckVerDLLs');
 CL.AddConstantN('REGSTR_PATH_WARNVERDLLS','String').SetString( 'System\CurrentControlSet\Control\SessionManager\WarnVerDLLs');
 CL.AddConstantN('REGSTR_PATH_HACKINIFILE','String').SetString( 'System\CurrentControlSet\Control\SessionManager\HackIniFiles');
 CL.AddConstantN('REGSTR_PATH_CHECKBADAPPS','String').SetString( 'System\CurrentControlSet\Control\SessionManager\CheckBadApps');
 CL.AddConstantN('REGSTR_PATH_APPPATCH','String').SetString( 'System\CurrentControlSet\Control\SessionManager\AppPatches');
 CL.AddConstantN('REGSTR_PATH_KNOWNVXDS','String').SetString( 'System\CurrentControlSet\Control\SessionManager\KnownVxDs');
 CL.AddConstantN('REGSTR_VAL_UNINSTALLER_DISPLAYNAME','String').SetString( 'DisplayName');
 CL.AddConstantN('REGSTR_VAL_UNINSTALLER_COMMANDLINE','String').SetString( 'UninstallString');
 //CL.AddConstantN('REGSTR_PATH_DESKTOP','').SetString( REGSTR_PATH_SCREENSAVE);
 CL.AddConstantN('REGSTR_PATH_MOUSE','String').SetString( 'Control Panel\Mouse');
 CL.AddConstantN('REGSTR_PATH_KEYBOARD','String').SetString( 'Control Panel\Keyboard');
 CL.AddConstantN('REGSTR_PATH_COLORS','String').SetString( 'Control Panel\Colors');
 CL.AddConstantN('REGSTR_PATH_SOUND','String').SetString( 'Control Panel\Sound');
 CL.AddConstantN('REGSTR_PATH_METRICS','String').SetString( 'Control Panel\Desktop\WindowMetrics');
 CL.AddConstantN('REGSTR_PATH_ICONS','String').SetString( 'Control Panel\Icons');
 CL.AddConstantN('REGSTR_PATH_CURSORS','String').SetString( 'Control Panel\Cursors');
 CL.AddConstantN('REGSTR_PATH_CHECKDISK','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive');
 CL.AddConstantN('REGSTR_PATH_CHECKDISKSET','String').SetString( 'Settings');
 CL.AddConstantN('REGSTR_PATH_CHECKDISKUDRVS','String').SetString( 'NoUnknownDDErrDrvs');
 CL.AddConstantN('REGSTR_PATH_FAULT','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Fault');
 CL.AddConstantN('REGSTR_VAL_FAULT_LOGFILE','String').SetString( 'LogFile');
 CL.AddConstantN('REGSTR_PATH_AEDEBUG','String').SetString( 'Software\Microsoft\Windows NT\CurrentVersion\AeDebug');
 CL.AddConstantN('REGSTR_VAL_AEDEBUG_DEBUGGER','String').SetString( 'Debugger');
 CL.AddConstantN('REGSTR_VAL_AEDEBUG_AUTO','String').SetString( 'Auto');
 CL.AddConstantN('REGSTR_PATH_GRPCONV','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\GrpConv');
 CL.AddConstantN('REGSTR_VAL_REGITEMDELETEMESSAGE','String').SetString( 'Removal Message');
 CL.AddConstantN('REGSTR_PATH_LASTCHECK','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Explorer\LastCheck');
 CL.AddConstantN('REGSTR_PATH_LASTOPTIMIZE','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Explorer\LastOptimize');
 CL.AddConstantN('REGSTR_PATH_LASTBACKUP','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Explorer\LastBackup');
 CL.AddConstantN('REGSTR_PATH_CHKLASTCHECK','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive\LastCheck');
 CL.AddConstantN('REGSTR_PATH_CHKLASTSURFAN','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive\LastSurfaceAnalysis');
  //CL.AddTypeS('PDSKTLSystemTime', '^TDSKTLSystemTime // will not work');
  CL.AddTypeS('_DSKTLSYSTEMTIME', 'record wYear : Word; wMonth : Word; wDayOfWe'
   +'ek : Word; wDay : Word; wHour : Word; wMinute : Word; wSecond : Word; wMil'
   +'liseconds : Word; wResult : Word; end');
  CL.AddTypeS('DSKTLSYSTEMTIME', '_DSKTLSYSTEMTIME');
  CL.AddTypeS('TDSKTLSystemTime', '_DSKTLSYSTEMTIME');
 CL.AddConstantN('DTRESULTOK','LongInt').SetInt( 0);
 CL.AddConstantN('DTRESULTFIX','LongInt').SetInt( 1);
 CL.AddConstantN('DTRESULTPROB','LongInt').SetInt( 2);
 CL.AddConstantN('DTRESULTPART','LongInt').SetInt( 3);
 CL.AddConstantN('REGSTR_KEY_SHARES','String').SetString( 'Software\Microsoft\Windows\CurrentVersion\Network\LanMan');
 CL.AddConstantN('REGSTR_VAL_SHARES_FLAGS','String').SetString( 'Flags');
 CL.AddConstantN('REGSTR_VAL_SHARES_TYPE','String').SetString( 'Type');
 CL.AddConstantN('REGSTR_VAL_SHARES_PATH','String').SetString( 'Path');
 CL.AddConstantN('REGSTR_VAL_SHARES_REMARK','String').SetString( 'Remark');
 CL.AddConstantN('REGSTR_VAL_SHARES_RW_PASS','String').SetString( 'Parm1');
 CL.AddConstantN('REGSTR_VAL_SHARES_RO_PASS','String').SetString( 'Parm2');
 CL.AddConstantN('REGSTR_PATH_PRINT','String').SetString( 'System\CurrentControlSet\Control\Print');
 CL.AddConstantN('REGSTR_PATH_PRINTERS','String').SetString( 'System\CurrentControlSet\Control\Print\Printers');
 CL.AddConstantN('REGSTR_PATH_PROVIDERS','String').SetString( 'System\CurrentControlSet\Control\Print\Providers');
 CL.AddConstantN('REGSTR_PATH_MONITORS','String').SetString( 'System\CurrentControlSet\Control\Print\Monitors');
 CL.AddConstantN('REGSTR_PATH_ENVIRONMENTS','String').SetString( 'System\CurrentControlSet\Control\Print\Environments');
 CL.AddConstantN('REGSTR_VAL_START_ON_BOOT','String').SetString( 'StartOnBoot');
 CL.AddConstantN('REGSTR_VAL_PRINTERS_MASK','String').SetString( 'PrintersMask');
 CL.AddConstantN('REGSTR_VAL_DOS_SPOOL_MASK','String').SetString( 'DOSSpoolMask');
 CL.AddConstantN('REGSTR_KEY_CURRENT_ENV','String').SetString( '\Windows 4');
 CL.AddConstantN('REGSTR_KEY_DRIVERS','String').SetString( '\Drivers');
 CL.AddConstantN('REGSTR_KEY_PRINT_PROC','String').SetString( '\Print Processors');
 CL.AddConstantN('REGSTR_PATH_EVENTLABELS','String').SetString( 'AppEvents\EventLabels');
 CL.AddConstantN('REGSTR_PATH_SCHEMES','String').SetString( 'AppEvents\Schemes');
 CL.AddConstantN('REGSTR_PATH_APPS','String').SetString( REGSTR_PATH_SCHEMES + '\Apps');
 CL.AddConstantN('REGSTR_PATH_APPS_DEFAULT','String').SetString( REGSTR_PATH_SCHEMES + '\Apps\.Default');
 CL.AddConstantN('REGSTR_PATH_NAMES','String').SetString( REGSTR_PATH_SCHEMES + '\Names');
 CL.AddConstantN('REGSTR_PATH_MULTIMEDIA','String').SetString( REGSTR_PATH_SETUP + '\Multimedia');
 CL.AddConstantN('REGSTR_PATH_MULTIMEDIA_AUDIO','String').SetString( 'Software\Microsoft\Multimedia\Audio');
 CL.AddConstantN('REGSTR_PATH_MEDIARESOURCES','String').SetString( REGSTR_PATH_CURRENT_CONTROL_SET + '\MediaResources');
 CL.AddConstantN('REGSTR_PATH_MEDIAPROPERTIES','String').SetString( REGSTR_PATH_CURRENT_CONTROL_SET + '\MediaProperties');
 CL.AddConstantN('REGSTR_PATH_PRIVATEPROPERTIES','String').SetString( REGSTR_PATH_MEDIAPROPERTIES + '\PrivateProperties');
 CL.AddConstantN('REGSTR_PATH_PUBLICPROPERTIES','String').SetString( REGSTR_PATH_MEDIAPROPERTIES + '\PublicProperties');
 CL.AddConstantN('REGSTR_PATH_JOYOEM','String').SetString( REGSTR_PATH_PRIVATEPROPERTIES + '\Joystick\OEM');
 CL.AddConstantN('REGSTR_PATH_JOYCONFIG','String').SetString( REGSTR_PATH_MEDIARESOURCES + '\Joystick');
 CL.AddConstantN('REGSTR_KEY_JOYCURR','String').SetString( 'CurrentJoystickSettings');
 CL.AddConstantN('REGSTR_KEY_JOYSETTINGS','String').SetString( 'JoystickSettings');
 CL.AddConstantN('REGSTR_VAL_JOYUSERVALUES','String').SetString( 'JoystickUserValues');
 CL.AddConstantN('REGSTR_VAL_JOYCALLOUT','String').SetString( 'JoystickCallout');
 CL.AddConstantN('REGSTR_VAL_JOYNCONFIG','String').SetString( 'Joystick%dConfiguration');
 CL.AddConstantN('REGSTR_VAL_JOYNOEMNAME','String').SetString( 'Joystick%dOEMName');
 CL.AddConstantN('REGSTR_VAL_JOYNOEMCALLOUT','String').SetString( 'Joystick%dOEMCallout');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCALLOUT','String').SetString( 'OEMCallout');
 CL.AddConstantN('REGSTR_VAL_JOYOEMNAME','String').SetString( 'OEMName');
 CL.AddConstantN('REGSTR_VAL_JOYOEMDATA','String').SetString( 'OEMData');
 CL.AddConstantN('REGSTR_VAL_JOYOEMXYLABEL','String').SetString( 'OEMXYLabel');
 CL.AddConstantN('REGSTR_VAL_JOYOEMZLABEL','String').SetString( 'OEMZLabel');
 CL.AddConstantN('REGSTR_VAL_JOYOEMRLABEL','String').SetString( 'OEMRLabel');
 CL.AddConstantN('REGSTR_VAL_JOYOEMPOVLABEL','String').SetString( 'OEMPOVLabel');
 CL.AddConstantN('REGSTR_VAL_JOYOEMULABEL','String').SetString( 'OEMULabel');
 CL.AddConstantN('REGSTR_VAL_JOYOEMVLABEL','String').SetString( 'OEMVLabel');
 CL.AddConstantN('REGSTR_VAL_JOYOEMTESTMOVEDESC','String').SetString( 'OEMTestMoveDesc');
 CL.AddConstantN('REGSTR_VAL_JOYOEMTESTBUTTONDESC','String').SetString( 'OEMTestButtonDesc');
 CL.AddConstantN('REGSTR_VAL_JOYOEMTESTMOVECAP','String').SetString( 'OEMTestMoveCap');
 CL.AddConstantN('REGSTR_VAL_JOYOEMTESTBUTTONCAP','String').SetString( 'OEMTestButtonCap');
 CL.AddConstantN('REGSTR_VAL_JOYOEMTESTWINCAP','String').SetString( 'OEMTestWinCap');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCALCAP','String').SetString( 'OEMCalCap');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCALWINCAP','String').SetString( 'OEMCalWinCap');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL1','String').SetString( 'OEMCal1');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL2','String').SetString( 'OEMCal2');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL3','String').SetString( 'OEMCal3');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL4','String').SetString( 'OEMCal4');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL5','String').SetString( 'OEMCal5');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL6','String').SetString( 'OEMCal6');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL7','String').SetString( 'OEMCal7');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL8','String').SetString( 'OEMCal8');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL9','String').SetString( 'OEMCal9');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL10','String').SetString( 'OEMCal10');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL11','String').SetString( 'OEMCal11');
 CL.AddConstantN('REGSTR_VAL_JOYOEMCAL12','String').SetString( 'OEMCal12'); 
end;

(* === run-time registration functions === *)


{ TPSImport_RegStr }
(*----------------------------------------------------------------------------*)
procedure TPSImport_RegStr.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_RegStr(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_RegStr.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_RegStr(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
