unit uPSI_CppParser;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_CppParser = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TCppParser(CL: TPSPascalCompiler);
procedure SIRegister_CppParser(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TCppParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_CppParser(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Dialogs
  ,Windows
  ,StrUtils
  ,ComCtrls
  ,U_IntList
  ,CppTokenizer
  ,CppParser
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_CppParser]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TCppParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TCppParser') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TCppParser') do
  begin
    RegisterMethod('Function GetFileIncludes( Filename : string) : string');
    RegisterMethod('Function IsCfile( Filename : string) : boolean');
    RegisterMethod('Function IsHfile( Filename : string) : boolean');
    RegisterMethod('Procedure GetSourcePair( FName : string; var CFile, HFile : string)');
    RegisterMethod('Function GetImplementationLine( Statement : PStatement) : integer');
    RegisterMethod('Function GetImplementationFileName( Statement : PStatement) : string');
    RegisterMethod('Function GetDeclarationLine( Statement : PStatement) : integer');
    RegisterMethod('Function GetDeclarationFileName( Statement : PStatement) : string');
    RegisterMethod('Procedure GetClassesList( var List : TStrings)');
    RegisterMethod('Function SuggestMemberInsertionLine( ParentID : integer; Scope : TStatementClassScope; var AddScopeStr : boolean) : integer');
    RegisterMethod('Function GetFullFilename( Value : string) : string');
    RegisterMethod('Procedure Load( FileName : TFileName)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Parse( FileName : TFileName)');
    RegisterMethod('Procedure ParseList');
    RegisterMethod('Procedure ReParseFile( FileName : TFileName; InProject : boolean; OnlyIfNotParsed : boolean; UpdateView : boolean)');
    RegisterMethod('Function StatementKindStr( Value : TStatementKind) : string');
    RegisterMethod('Function StatementScopeStr( Value : TStatementScope) : string');
    RegisterMethod('Function StatementClassScopeStr( Value : TStatementClassScope) : string');
    RegisterMethod('Function CheckIfCommandExists( Value : string; Kind : TStatementKind; UseParent : boolean; ParID : integer) : integer');
    RegisterMethod('Procedure Reset( KeepLoaded : boolean)');
    RegisterMethod('Procedure ClearIncludePaths');
    RegisterMethod('Procedure ClearProjectIncludePaths');
    RegisterMethod('Procedure AddIncludePath( Value : string)');
    RegisterMethod('Procedure AddProjectIncludePath( Value : string)');
    RegisterMethod('Procedure AddFileToScan( Value : string; InProject : boolean)');
    RegisterMethod('Procedure Save( FileName : TFileName)');
    RegisterMethod('Procedure ScanAndSaveGlobals( FileName : TFileName)');
    RegisterMethod('Procedure PostProcessInheritance');
    RegisterMethod('Procedure ReProcessInheritance');
    RegisterMethod('Function IndexOfStatement( ID : integer) : integer');
    RegisterMethod('Function Locate( Full : string; WithScope : boolean) : PStatement');
    RegisterMethod('Function FillListOf( Full : string; WithScope : boolean; List : TList) : boolean');
    RegisterMethod('Function FindAndScanBlockAt( Filename : string; Row : integer; Stream : TStream) : integer');
    RegisterMethod('Function GetThisPointerID : integer');
    RegisterProperty('Enabled', 'boolean', iptrw);
    RegisterProperty('OnUpdate', 'TNotifyEvent', iptrw);
    RegisterProperty('OnBusy', 'TNotifyEvent', iptrw);
    RegisterProperty('OnLogStatement', 'TLogStatementEvent', iptrw);
    RegisterProperty('OnFileProgress', 'TProgressEvent', iptrw);
    RegisterProperty('OnTotalProgress', 'TProgressEvent', iptrw);
    RegisterProperty('Tokenizer', 'TCppTokenizer', iptrw);
    RegisterProperty('Statements', 'TList', iptrw);
    RegisterProperty('ParseLocalHeaders', 'boolean', iptrw);
    RegisterProperty('ParseGlobalHeaders', 'boolean', iptrw);
    RegisterProperty('ScannedFiles', 'TStringList', iptr);
    RegisterProperty('CacheContents', 'TStringList', iptr);
    RegisterProperty('LogStatements', 'boolean', iptrw);
    RegisterProperty('ProjectDir', 'string', iptrw);
    RegisterProperty('OnStartParsing', 'TNotifyEvent', iptrw);
    RegisterProperty('OnEndParsing', 'TNotifyEvent', iptrw);
    RegisterProperty('FilesToScan', 'TStrings', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_CppParser(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TStatementKind', '( skClass, skFunction, skConstructor, skDestru'
   +'ctor, skVariable, skTypedef, skEnum, skPreprocessor, skUnknown )');
  CL.AddTypeS('TStatementScope', '( ssGlobal, ssLocal, ssClassLocal )');
  CL.AddTypeS('TStatementClassScope', '( scsPublic, scsPublished, scsPrivate, scsProtected, scsNone )');
  CL.AddTypeS('TLogStatementEvent', 'Procedure ( Sender : TObject; Msg : string)');
  //CL.AddTypeS('PStatement', '^TStatement // will not work');
  CL.AddTypeS('TStatement', 'record _ID : integer; _ParentID : integer; _FullTe'
   +'xt : string; _Type : string; _Command : string; _Args : string; _MethodArg'
   +'s : string; _ScopelessCmd : string; _ScopeCmd : string; _Kind : TStatement'
   +'Kind; _InheritsFromIDs : string; _InheritsFromClasses : string; _Scope : T'
   +'StatementScope; _ClassScope : TStatementClassScope; _IsDeclaration : boole'
   +'an; _DeclImplLine : integer; _Line : integer; _DeclImplFileName : string; '
   +'_FileName : string; _Visible : boolean; _NoCompletion : boolean; _Valid : '
   +'boolean; _Temporary : boolean; _Loaded : boolean; _InProject : boolean; end');
  //CL.AddTypeS('POutstandingTypedef', '^TOutstandingTypedef // will not work');
  CL.AddTypeS('TOutstandingTypedef', 'record _WaitForTypedef : string; _Existin'
   +'gID : integer; end');
  //CL.AddTypeS('PIncludesRec', '^TIncludesRec // will not work');
  CL.AddTypeS('TIncludesRec', 'record BaseFile : string; IncludeFiles : string;  end');
  SIRegister_TCppParser(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TCppParserFilesToScan_R(Self: TCppParser; var T: TStrings);
begin T := Self.FilesToScan; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnEndParsing_W(Self: TCppParser; const T: TNotifyEvent);
begin Self.OnEndParsing := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnEndParsing_R(Self: TCppParser; var T: TNotifyEvent);
begin T := Self.OnEndParsing; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnStartParsing_W(Self: TCppParser; const T: TNotifyEvent);
begin Self.OnStartParsing := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnStartParsing_R(Self: TCppParser; var T: TNotifyEvent);
begin T := Self.OnStartParsing; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserProjectDir_W(Self: TCppParser; const T: string);
begin Self.ProjectDir := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserProjectDir_R(Self: TCppParser; var T: string);
begin T := Self.ProjectDir; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserLogStatements_W(Self: TCppParser; const T: boolean);
begin Self.LogStatements := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserLogStatements_R(Self: TCppParser; var T: boolean);
begin T := Self.LogStatements; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserCacheContents_R(Self: TCppParser; var T: TStringList);
begin T := Self.CacheContents; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserScannedFiles_R(Self: TCppParser; var T: TStringList);
begin T := Self.ScannedFiles; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserParseGlobalHeaders_W(Self: TCppParser; const T: boolean);
begin Self.ParseGlobalHeaders := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserParseGlobalHeaders_R(Self: TCppParser; var T: boolean);
begin T := Self.ParseGlobalHeaders; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserParseLocalHeaders_W(Self: TCppParser; const T: boolean);
begin Self.ParseLocalHeaders := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserParseLocalHeaders_R(Self: TCppParser; var T: boolean);
begin T := Self.ParseLocalHeaders; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserStatements_W(Self: TCppParser; const T: TList);
begin Self.Statements := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserStatements_R(Self: TCppParser; var T: TList);
begin T := Self.Statements; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserTokenizer_W(Self: TCppParser; const T: TCppTokenizer);
begin Self.Tokenizer := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserTokenizer_R(Self: TCppParser; var T: TCppTokenizer);
begin T := Self.Tokenizer; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnTotalProgress_W(Self: TCppParser; const T: TProgressEvent);
begin Self.OnTotalProgress := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnTotalProgress_R(Self: TCppParser; var T: TProgressEvent);
begin T := Self.OnTotalProgress; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnFileProgress_W(Self: TCppParser; const T: TProgressEvent);
begin Self.OnFileProgress := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnFileProgress_R(Self: TCppParser; var T: TProgressEvent);
begin T := Self.OnFileProgress; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnLogStatement_W(Self: TCppParser; const T: TLogStatementEvent);
begin Self.OnLogStatement := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnLogStatement_R(Self: TCppParser; var T: TLogStatementEvent);
begin T := Self.OnLogStatement; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnBusy_W(Self: TCppParser; const T: TNotifyEvent);
begin Self.OnBusy := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnBusy_R(Self: TCppParser; var T: TNotifyEvent);
begin T := Self.OnBusy; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnUpdate_W(Self: TCppParser; const T: TNotifyEvent);
begin Self.OnUpdate := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserOnUpdate_R(Self: TCppParser; var T: TNotifyEvent);
begin T := Self.OnUpdate; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserEnabled_W(Self: TCppParser; const T: boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TCppParserEnabled_R(Self: TCppParser; var T: boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
Procedure TCppParserParse_P(Self: TCppParser;  FileName : TFileName; IsVisible : boolean; ManualUpdate : boolean; processInh : boolean);
Begin //Self.Parse(FileName, IsVisible, ManualUpdate, processInh);
END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCppParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCppParser) do begin
    RegisterMethod(@TCppParser.GetFileIncludes, 'GetFileIncludes');
    RegisterMethod(@TCppParser.IsCfile, 'IsCfile');
    RegisterMethod(@TCppParser.IsHfile, 'IsHfile');
    RegisterMethod(@TCppParser.GetSourcePair, 'GetSourcePair');
    RegisterMethod(@TCppParser.GetImplementationLine, 'GetImplementationLine');
    RegisterMethod(@TCppParser.GetImplementationFileName, 'GetImplementationFileName');
    RegisterMethod(@TCppParser.GetDeclarationLine, 'GetDeclarationLine');
    RegisterMethod(@TCppParser.GetDeclarationFileName, 'GetDeclarationFileName');
    RegisterMethod(@TCppParser.GetClassesList, 'GetClassesList');
    RegisterMethod(@TCppParser.SuggestMemberInsertionLine, 'SuggestMemberInsertionLine');
    RegisterMethod(@TCppParser.GetFullFilename, 'GetFullFilename');
    RegisterMethod(@TCppParser.Load, 'Load');
    RegisterConstructor(@TCppParser.Create, 'Create');
      RegisterMethod(@TCppParser.Destroy, 'Free');
      RegisterMethod(@TCppParser.Parse, 'Parse');
    RegisterMethod(@TCppParser.ParseList, 'ParseList');
    RegisterMethod(@TCppParser.ReParseFile, 'ReParseFile');
    RegisterMethod(@TCppParser.StatementKindStr, 'StatementKindStr');
    RegisterMethod(@TCppParser.StatementScopeStr, 'StatementScopeStr');
    RegisterMethod(@TCppParser.StatementClassScopeStr, 'StatementClassScopeStr');
    RegisterMethod(@TCppParser.CheckIfCommandExists, 'CheckIfCommandExists');
    RegisterMethod(@TCppParser.Reset, 'Reset');
    RegisterMethod(@TCppParser.ClearIncludePaths, 'ClearIncludePaths');
    RegisterMethod(@TCppParser.ClearProjectIncludePaths, 'ClearProjectIncludePaths');
    RegisterMethod(@TCppParser.AddIncludePath, 'AddIncludePath');
    RegisterMethod(@TCppParser.AddProjectIncludePath, 'AddProjectIncludePath');
    RegisterMethod(@TCppParser.AddFileToScan, 'AddFileToScan');
    RegisterMethod(@TCppParser.Save, 'Save');
    RegisterMethod(@TCppParser.ScanAndSaveGlobals, 'ScanAndSaveGlobals');
    RegisterMethod(@TCppParser.PostProcessInheritance, 'PostProcessInheritance');
    RegisterMethod(@TCppParser.ReProcessInheritance, 'ReProcessInheritance');
    RegisterMethod(@TCppParser.IndexOfStatement, 'IndexOfStatement');
    RegisterMethod(@TCppParser.Locate, 'Locate');
    RegisterMethod(@TCppParser.FillListOf, 'FillListOf');
    RegisterMethod(@TCppParser.FindAndScanBlockAt, 'FindAndScanBlockAt');
    RegisterMethod(@TCppParser.GetThisPointerID, 'GetThisPointerID');
    RegisterPropertyHelper(@TCppParserEnabled_R,@TCppParserEnabled_W,'Enabled');
    RegisterPropertyHelper(@TCppParserOnUpdate_R,@TCppParserOnUpdate_W,'OnUpdate');
    RegisterPropertyHelper(@TCppParserOnBusy_R,@TCppParserOnBusy_W,'OnBusy');
    RegisterPropertyHelper(@TCppParserOnLogStatement_R,@TCppParserOnLogStatement_W,'OnLogStatement');
    RegisterPropertyHelper(@TCppParserOnFileProgress_R,@TCppParserOnFileProgress_W,'OnFileProgress');
    RegisterPropertyHelper(@TCppParserOnTotalProgress_R,@TCppParserOnTotalProgress_W,'OnTotalProgress');
    RegisterPropertyHelper(@TCppParserTokenizer_R,@TCppParserTokenizer_W,'Tokenizer');
    RegisterPropertyHelper(@TCppParserStatements_R,@TCppParserStatements_W,'Statements');
    RegisterPropertyHelper(@TCppParserParseLocalHeaders_R,@TCppParserParseLocalHeaders_W,'ParseLocalHeaders');
    RegisterPropertyHelper(@TCppParserParseGlobalHeaders_R,@TCppParserParseGlobalHeaders_W,'ParseGlobalHeaders');
    RegisterPropertyHelper(@TCppParserScannedFiles_R,nil,'ScannedFiles');
    RegisterPropertyHelper(@TCppParserCacheContents_R,nil,'CacheContents');
    RegisterPropertyHelper(@TCppParserLogStatements_R,@TCppParserLogStatements_W,'LogStatements');
    RegisterPropertyHelper(@TCppParserProjectDir_R,@TCppParserProjectDir_W,'ProjectDir');
    RegisterPropertyHelper(@TCppParserOnStartParsing_R,@TCppParserOnStartParsing_W,'OnStartParsing');
    RegisterPropertyHelper(@TCppParserOnEndParsing_R,@TCppParserOnEndParsing_W,'OnEndParsing');
    RegisterPropertyHelper(@TCppParserFilesToScan_R,nil,'FilesToScan');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_CppParser(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TCppParser(CL);
end;

 
 
{ TPSImport_CppParser }
(*----------------------------------------------------------------------------*)
procedure TPSImport_CppParser.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_CppParser(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_CppParser.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_CppParser(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
