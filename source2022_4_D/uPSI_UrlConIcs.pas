unit uPSI_UrlConIcs;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_UrlConIcs = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TZipConnection(CL: TPSPascalCompiler);
procedure SIRegister_TResourceConnection(CL: TPSPascalCompiler);
procedure SIRegister_TFileConnection(CL: TPSPascalCompiler);
procedure SIRegister_THTTPConnection(CL: TPSPascalCompiler);
procedure SIRegister_TURLConnection(CL: TPSPascalCompiler);
procedure SIRegister_UrlConIcs(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TZipConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TResourceConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFileConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_THTTPConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TURLConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_UrlConIcs(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   WinTypes
  ,WinProcs
  ,Messages
  ,Graphics
  ,Controls
  ,Forms
  ,Dialogs
  ,ShellAPI
  ,TypInfo
 // ,URLSubs
  //,htmlview
  ,OverbyteIcsWndControl
  //,OverbyteIcsWSocket
  ,OverbyteIcsWinsock
  //,OverbyteIcsHttpProt
 // ,OverbyteIcsHttpCCodzlib
  //,VCLUnZIp
  //,kpZipObj
  ,UrlConIcs
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_UrlConIcs]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TZipConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TURLConnection', 'TZipConnection') do
  with CL.AddClassN(CL.FindClass('TURLConnection'),'TZipConnection') do
  begin
    RegisterMethod('Procedure Get( const URL : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TResourceConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TURLConnection', 'TResourceConnection') do
  with CL.AddClassN(CL.FindClass('TURLConnection'),'TResourceConnection') do
  begin
    RegisterMethod('Procedure Get( const URL : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFileConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TURLConnection', 'TFileConnection') do
  with CL.AddClassN(CL.FindClass('TURLConnection'),'TFileConnection') do
  begin
    RegisterMethod('Procedure Get( const URL : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THTTPConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TURLConnection', 'THTTPConnection') do
  with CL.AddClassN(CL.FindClass('TURLConnection'),'THTTPConnection') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Get( const URL : String)');
    RegisterMethod('Procedure GetAsync( const URL : String)');
    RegisterMethod('Procedure Post( const URL : String)');
    RegisterMethod('Function RcvdCount : LongInt');
    RegisterMethod('Function ReasonPhrase : String');
    RegisterMethod('Function LastResponse : String');
    RegisterMethod('Function StatusCode : LongInt');
    RegisterMethod('Function State : THttpState');
    RegisterMethod('Function ContentType : ThtmlFileType');
    RegisterMethod('Function ContentLength : LongInt');
    RegisterMethod('Procedure Abort');
    RegisterMethod('Procedure Close');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TURLConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TURLConnection') do
  with CL.AddClassN(CL.FindClass('TObject'),'TURLConnection') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Get( const URL : String)');
    RegisterMethod('Procedure Post( const URL : String)');
    RegisterMethod('Procedure GetAsync( const URL : String)');
    RegisterMethod('Procedure PostAsync( const URL : String)');
    RegisterMethod('Procedure CheckInputStream');
    RegisterMethod('Function RcvdCount : LongInt');
    RegisterMethod('Function ReasonPhrase : String');
    RegisterMethod('Function LastResponse : String');
    RegisterMethod('Function StatusCode : LongInt');
    RegisterMethod('Function State : THttpState');
    RegisterMethod('Procedure Abort');
    RegisterMethod('Procedure Close');
    RegisterMethod('Function ContentType : ThtmlFileType');
    RegisterMethod('Function ContentLength : LongInt');
    RegisterMethod('Function Getconnection( const URL : String) : TURLConnection');
    RegisterProperty('OnDocBegin', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDocData', 'TDocDataEvent', iptrw);
    RegisterProperty('OnRequestDone', 'THttpRequestDone', iptrw);
    RegisterProperty('Owner', 'TComponent', iptrw);
    RegisterProperty('InputStream', 'TMemoryStream', iptrw);
    RegisterProperty('Proxy', 'String', iptrw);
    RegisterProperty('ProxyPort', 'String', iptrw);
    RegisterProperty('ProxyUser', 'String', iptrw);
    RegisterProperty('ProxyPassword', 'String', iptrw);
    RegisterProperty('Username', 'String', iptrw);
    RegisterProperty('Password', 'String', iptrw);
    RegisterProperty('UserAgent', 'String', iptrw);
    RegisterProperty('OnRedirect', 'TNotifyEvent', iptrw);
    RegisterProperty('Referer', 'String', iptrw);
    RegisterProperty('Realm', 'String', iptr);
    RegisterProperty('Cookie', 'String', iptrw);
    RegisterProperty('OnCookie', 'TCookieRcvdEvent', iptrw);
    RegisterProperty('BasicAuth', 'Boolean', iptrw);
    RegisterProperty('ContentTypePost', 'String', iptrw);
    RegisterProperty('SendStream', 'TStream', iptrw);
    RegisterProperty('Session', 'integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_UrlConIcs(CL: TPSPascalCompiler);
begin
  SIRegister_TURLConnection(CL);
  SIRegister_THTTPConnection(CL);
  SIRegister_TFileConnection(CL);
  SIRegister_TResourceConnection(CL);
  SIRegister_TZipConnection(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TURLConnectionSession_W(Self: TURLConnection; const T: integer);
begin Self.Session := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionSession_R(Self: TURLConnection; var T: integer);
begin T := Self.Session; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionSendStream_W(Self: TURLConnection; const T: TStream);
begin Self.SendStream := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionSendStream_R(Self: TURLConnection; var T: TStream);
begin T := Self.SendStream; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionContentTypePost_W(Self: TURLConnection; const T: String);
begin Self.ContentTypePost := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionContentTypePost_R(Self: TURLConnection; var T: String);
begin T := Self.ContentTypePost; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionBasicAuth_W(Self: TURLConnection; const T: Boolean);
begin Self.BasicAuth := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionBasicAuth_R(Self: TURLConnection; var T: Boolean);
begin T := Self.BasicAuth; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnCookie_W(Self: TURLConnection; const T: TCookieRcvdEvent);
begin Self.OnCookie := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnCookie_R(Self: TURLConnection; var T: TCookieRcvdEvent);
begin T := Self.OnCookie; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionCookie_W(Self: TURLConnection; const T: String);
begin Self.Cookie := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionCookie_R(Self: TURLConnection; var T: String);
begin T := Self.Cookie; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionRealm_R(Self: TURLConnection; var T: String);
begin T := Self.Realm; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionReferer_W(Self: TURLConnection; const T: String);
begin Self.Referer := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionReferer_R(Self: TURLConnection; var T: String);
begin T := Self.Referer; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnRedirect_W(Self: TURLConnection; const T: TNotifyEvent);
begin Self.OnRedirect := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnRedirect_R(Self: TURLConnection; var T: TNotifyEvent);
begin T := Self.OnRedirect; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionUserAgent_W(Self: TURLConnection; const T: String);
begin Self.UserAgent := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionUserAgent_R(Self: TURLConnection; var T: String);
begin T := Self.UserAgent; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionPassword_W(Self: TURLConnection; const T: String);
begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionPassword_R(Self: TURLConnection; var T: String);
begin T := Self.Password; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionUsername_W(Self: TURLConnection; const T: String);
begin Self.Username := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionUsername_R(Self: TURLConnection; var T: String);
begin T := Self.Username; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxyPassword_W(Self: TURLConnection; const T: String);
begin Self.ProxyPassword := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxyPassword_R(Self: TURLConnection; var T: String);
begin T := Self.ProxyPassword; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxyUser_W(Self: TURLConnection; const T: String);
begin Self.ProxyUser := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxyUser_R(Self: TURLConnection; var T: String);
begin T := Self.ProxyUser; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxyPort_W(Self: TURLConnection; const T: String);
begin Self.ProxyPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxyPort_R(Self: TURLConnection; var T: String);
begin T := Self.ProxyPort; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxy_W(Self: TURLConnection; const T: String);
begin Self.Proxy := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionProxy_R(Self: TURLConnection; var T: String);
begin T := Self.Proxy; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionInputStream_W(Self: TURLConnection; const T: TMemoryStream);
begin Self.InputStream := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionInputStream_R(Self: TURLConnection; var T: TMemoryStream);
begin T := Self.InputStream; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOwner_W(Self: TURLConnection; const T: TComponent);
begin Self.Owner := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOwner_R(Self: TURLConnection; var T: TComponent);
begin T := Self.Owner; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnRequestDone_W(Self: TURLConnection; const T: THttpRequestDone);
begin Self.OnRequestDone := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnRequestDone_R(Self: TURLConnection; var T: THttpRequestDone);
begin T := Self.OnRequestDone; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnDocData_W(Self: TURLConnection; const T: TDocDataEvent);
begin Self.OnDocData := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnDocData_R(Self: TURLConnection; var T: TDocDataEvent);
begin T := Self.OnDocData; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnDocBegin_W(Self: TURLConnection; const T: TNotifyEvent);
begin Self.OnDocBegin := T; end;

(*----------------------------------------------------------------------------*)
procedure TURLConnectionOnDocBegin_R(Self: TURLConnection; var T: TNotifyEvent);
begin T := Self.OnDocBegin; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TZipConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TZipConnection) do
  begin
    RegisterMethod(@TZipConnection.Get, 'Get');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TResourceConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TResourceConnection) do
  begin
    RegisterMethod(@TResourceConnection.Get, 'Get');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFileConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFileConnection) do
  begin
    RegisterMethod(@TFileConnection.Get, 'Get');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THTTPConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THTTPConnection) do
  begin
    RegisterConstructor(@THTTPConnection.Create, 'Create');
    RegisterMethod(@THTTPConnection.Get, 'Get');
    RegisterMethod(@THTTPConnection.GetAsync, 'GetAsync');
    RegisterMethod(@THTTPConnection.Post, 'Post');
    RegisterMethod(@THTTPConnection.RcvdCount, 'RcvdCount');
    RegisterMethod(@THTTPConnection.ReasonPhrase, 'ReasonPhrase');
    RegisterMethod(@THTTPConnection.LastResponse, 'LastResponse');
    RegisterMethod(@THTTPConnection.StatusCode, 'StatusCode');
    RegisterMethod(@THTTPConnection.State, 'State');
    RegisterMethod(@THTTPConnection.ContentType, 'ContentType');
    RegisterMethod(@THTTPConnection.ContentLength, 'ContentLength');
    RegisterMethod(@THTTPConnection.Abort, 'Abort');
    RegisterMethod(@THTTPConnection.Close, 'Close');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TURLConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TURLConnection) do
  begin
    RegisterConstructor(@TURLConnection.Create, 'Create');
    RegisterVirtualAbstractMethod(@TURLConnection, @!.Get, 'Get');
    RegisterVirtualMethod(@TURLConnection.Post, 'Post');
    RegisterVirtualMethod(@TURLConnection.GetAsync, 'GetAsync');
    RegisterVirtualMethod(@TURLConnection.PostAsync, 'PostAsync');
    RegisterVirtualMethod(@TURLConnection.CheckInputStream, 'CheckInputStream');
    RegisterVirtualMethod(@TURLConnection.RcvdCount, 'RcvdCount');
    RegisterVirtualMethod(@TURLConnection.ReasonPhrase, 'ReasonPhrase');
    RegisterVirtualMethod(@TURLConnection.LastResponse, 'LastResponse');
    RegisterVirtualMethod(@TURLConnection.StatusCode, 'StatusCode');
    RegisterVirtualMethod(@TURLConnection.State, 'State');
    RegisterVirtualMethod(@TURLConnection.Abort, 'Abort');
    RegisterVirtualMethod(@TURLConnection.Close, 'Close');
    RegisterVirtualMethod(@TURLConnection.ContentType, 'ContentType');
    RegisterVirtualMethod(@TURLConnection.ContentLength, 'ContentLength');
    RegisterMethod(@TURLConnection.Getconnection, 'Getconnection');
    RegisterPropertyHelper(@TURLConnectionOnDocBegin_R,@TURLConnectionOnDocBegin_W,'OnDocBegin');
    RegisterPropertyHelper(@TURLConnectionOnDocData_R,@TURLConnectionOnDocData_W,'OnDocData');
    RegisterPropertyHelper(@TURLConnectionOnRequestDone_R,@TURLConnectionOnRequestDone_W,'OnRequestDone');
    RegisterPropertyHelper(@TURLConnectionOwner_R,@TURLConnectionOwner_W,'Owner');
    RegisterPropertyHelper(@TURLConnectionInputStream_R,@TURLConnectionInputStream_W,'InputStream');
    RegisterPropertyHelper(@TURLConnectionProxy_R,@TURLConnectionProxy_W,'Proxy');
    RegisterPropertyHelper(@TURLConnectionProxyPort_R,@TURLConnectionProxyPort_W,'ProxyPort');
    RegisterPropertyHelper(@TURLConnectionProxyUser_R,@TURLConnectionProxyUser_W,'ProxyUser');
    RegisterPropertyHelper(@TURLConnectionProxyPassword_R,@TURLConnectionProxyPassword_W,'ProxyPassword');
    RegisterPropertyHelper(@TURLConnectionUsername_R,@TURLConnectionUsername_W,'Username');
    RegisterPropertyHelper(@TURLConnectionPassword_R,@TURLConnectionPassword_W,'Password');
    RegisterPropertyHelper(@TURLConnectionUserAgent_R,@TURLConnectionUserAgent_W,'UserAgent');
    RegisterPropertyHelper(@TURLConnectionOnRedirect_R,@TURLConnectionOnRedirect_W,'OnRedirect');
    RegisterPropertyHelper(@TURLConnectionReferer_R,@TURLConnectionReferer_W,'Referer');
    RegisterPropertyHelper(@TURLConnectionRealm_R,nil,'Realm');
    RegisterPropertyHelper(@TURLConnectionCookie_R,@TURLConnectionCookie_W,'Cookie');
    RegisterPropertyHelper(@TURLConnectionOnCookie_R,@TURLConnectionOnCookie_W,'OnCookie');
    RegisterPropertyHelper(@TURLConnectionBasicAuth_R,@TURLConnectionBasicAuth_W,'BasicAuth');
    RegisterPropertyHelper(@TURLConnectionContentTypePost_R,@TURLConnectionContentTypePost_W,'ContentTypePost');
    RegisterPropertyHelper(@TURLConnectionSendStream_R,@TURLConnectionSendStream_W,'SendStream');
    RegisterPropertyHelper(@TURLConnectionSession_R,@TURLConnectionSession_W,'Session');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_UrlConIcs(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TURLConnection(CL);
  RIRegister_THTTPConnection(CL);
  RIRegister_TFileConnection(CL);
  RIRegister_TResourceConnection(CL);
  RIRegister_TZipConnection(CL);
end;

 
 
{ TPSImport_UrlConIcs }
(*----------------------------------------------------------------------------*)
procedure TPSImport_UrlConIcs.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_UrlConIcs(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_UrlConIcs.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_UrlConIcs(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
