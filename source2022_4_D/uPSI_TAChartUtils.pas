unit uPSI_TAChartUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_TAChartUtils = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TClassRegistry(CL: TPSPascalCompiler);
procedure SIRegister_TClassRegistryItem(CL: TPSPascalCompiler);
procedure SIRegister_THistory(CL: TPSPascalCompiler);
procedure SIRegister_TPublishedIntegerSet(CL: TPSPascalCompiler);
procedure SIRegister_TDrawDataRegistry(CL: TPSPascalCompiler);
procedure SIRegister_TDrawDataItem(CL: TPSPascalCompiler);
procedure SIRegister_TBroadcaster(CL: TPSPascalCompiler);
procedure SIRegister_TListener(CL: TPSPascalCompiler);
procedure SIRegister_TIndexedComponentList(CL: TPSPascalCompiler);
procedure SIRegister_TTypedFPListEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_TIndexedComponent(CL: TPSPascalCompiler);
procedure SIRegister_TIntervalList(CL: TPSPascalCompiler);
procedure SIRegister_TAChartUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAChartUtils_Routines(S: TPSExec);
procedure RIRegister_TClassRegistry(CL: TPSRuntimeClassImporter);
procedure RIRegister_TClassRegistryItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_THistory(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPublishedIntegerSet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDrawDataRegistry(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDrawDataItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBroadcaster(CL: TPSRuntimeClassImporter);
procedure RIRegister_TListener(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIndexedComponentList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TTypedFPListEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIndexedComponent(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIntervalList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAChartUtils(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Math
  ,Types
  ,TAChartUtils
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_TAChartUtils]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TClassRegistry(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPList', 'TClassRegistry') do
  with CL.AddClassN(CL.FindClass('TFPList'),'TClassRegistry') do
  begin
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function GetCaption( AIndex : Integer) : String');
    RegisterMethod('Function GetClass( AIndex : Integer) : TClass');
    RegisterMethod('Function IndexOfClass( AClass : TClass) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TClassRegistryItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TClassRegistryItem') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TClassRegistryItem') do
  begin
    RegisterProperty('FClass', 'TClass', iptrw);
    RegisterProperty('FCaption', 'String', iptrw);
    RegisterProperty('FCaptionPtr', 'PStr', iptrw);
    RegisterMethod('Constructor Create( AClass : TClass; const ACaption : String)');
    RegisterMethod('Constructor CreateRes( AClass : TClass; ACaptionPtr : PStr)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THistory(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'THistory') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'THistory') do
  begin
    RegisterProperty('FCount', 'Cardinal', iptrw);
    RegisterProperty('FData', 'array of TElem', iptrw);
    RegisterMethod('Function GetCapacity : Cardinal');
    RegisterMethod('Function GetItem( AIndex : Integer) : TElem');
    RegisterMethod('Procedure SetCapacity( AValue : Cardinal)');
    RegisterMethod('Procedure DeleteOld( ACount : Integer)');
    RegisterMethod('Procedure Add( const AItem : TElem)');
    RegisterMethod('Function Pop : TElem');
    RegisterProperty('Capacity', 'Cardinal', iptrw);
    RegisterProperty('Count', 'Cardinal', iptr);
    RegisterProperty('Item', 'TElem Integer', iptr);
    SetDefaultPropery('Item');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPublishedIntegerSet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TPublishedIntegerSet') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TPublishedIntegerSet') do
  begin
    RegisterProperty('FAllSet', 'Boolean', iptrw);
    RegisterProperty('FData', 'TIntegerDynArray', iptrw);
    RegisterMethod('Function GetAsString : String');
    RegisterMethod('Function GetIsSet( AIndex : Integer) : Boolean');
    RegisterMethod('Procedure SetAllSet( AValue : Boolean)');
    RegisterMethod('Procedure SetAsString( AValue : String)');
    RegisterMethod('Procedure SetIsSet( AIndex : Integer; AValue : Boolean)');
    RegisterMethod('Constructor Init');
    RegisterProperty('AllSet', 'Boolean', iptrw);
    RegisterMethod('Function AsBooleans( ACount : Integer) : TBooleanDynArray');
    RegisterProperty('AsString', 'String', iptrw);
    RegisterProperty('IsSet', 'Boolean Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDrawDataRegistry(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TDrawDataRegistry') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TDrawDataRegistry') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Add( AItem : TDrawDataItem)');
    RegisterMethod('Procedure DeleteByChart( AChart : TObject)');
    RegisterMethod('Procedure DeleteByOwner( AOwner : TObject)');
    RegisterMethod('Function Find( AChart, AOwner : TObject) : TDrawDataItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDrawDataItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TDrawDataItem') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TDrawDataItem') do
  begin
    RegisterMethod('Constructor Create( AChart, AOwner : TObject)');
    RegisterProperty('Chart', 'TObject', iptr);
    RegisterProperty('Owner', 'TObject', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBroadcaster(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPList', 'TBroadcaster') do
  with CL.AddClassN(CL.FindClass('TFPList'),'TBroadcaster') do
  begin
    RegisterMethod('Procedure Broadcast( ASender : TObject)');
    RegisterMethod('Procedure Subscribe( AListener : TListener)');
    RegisterMethod('Procedure Unsubscribe( AListener : TListener)');
    RegisterProperty('Locked', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TListener(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TListener') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TListener') do
  begin
    RegisterMethod('Constructor Create( ARef : PPointer; AOnNotify : TNotifyEvent)');
    RegisterMethod('Procedure Forget');
    RegisterMethod('Procedure Notify( ASender : TObject)');
    RegisterProperty('IsListening', 'Boolean', iptr);
    RegisterProperty('OnNotify', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIndexedComponentList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPList', 'TIndexedComponentList') do
  with CL.AddClassN(CL.FindClass('TFPList'),'TIndexedComponentList') do
  begin
    RegisterMethod('Procedure ChangeNamePrefix( const AOld, ANew : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TTypedFPListEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPListEnumerator', 'TTypedFPListEnumerator') do
  with CL.AddClassN(CL.FindClass('TFPListEnumerator'),'TTypedFPListEnumerator') do
  begin
    RegisterMethod('Function GetCurrent : T');
    RegisterProperty('Current', 'T', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIndexedComponent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TIndexedComponent') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TIndexedComponent') do
  begin
    RegisterMethod('Function GetIndex : Integer');
    RegisterMethod('Procedure SetIndex( AValue : Integer)');
    RegisterMethod('Procedure ChangeNamePrefix( const AOld, ANew : String; var AFailed : String)');
    RegisterProperty('Index', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIntervalList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TIntervalList') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TIntervalList') do
  begin
    RegisterMethod('Procedure Assign( ASource : TIntervalList)');
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure AddPoint( APoint : Double)');
    RegisterMethod('Procedure AddRange( AStart, AEnd : Double)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function Intersect( var ALeft, ARight : Double; var AHint : Integer) : Boolean');
    RegisterProperty('Epsilon', 'Double', iptrw);
    RegisterProperty('Interval', 'TDoubleInterval Integer', iptr);
    RegisterProperty('IntervalCount', 'Integer', iptr);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAChartUtils(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('CHART_COMPONENT_IDE_PAGE','String').SetString( 'Chart');
 CL.AddConstantN('PERCENT','Extended').setExtended( 0.01);
 CL.AddConstantN('clTAColor','LongWord').SetUInt( $20000000);
 CL.AddConstantN('DEFAULT_FONT_SIZE','LongInt').SetInt( 10);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EChartError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EChartIntervalError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EListenerError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDrawDataError');
  CL.AddTypeS('TDoublePoint', 'record X : Double; Y : Double; end');
  CL.AddTypeS('TPointArray', 'array of TPoint');
  CL.AddTypeS('TDoublePointArray', 'array of TDoublepoint');
  CL.AddTypeS('TChartDistance', 'Integer');
  CL.AddTypeS('TPercent', 'Integer');
  CL.AddTypeS('TTransformFunc', 'Function ( A : Double) : Double');
  CL.AddTypeS('TImageToGraphFunc', 'Function ( AX : Integer) : Double');
  CL.AddTypeS('TGraphToImageFunc', 'Function ( AX : Double) : Integer');
  CL.AddTypeS('TChartUnits', '( cuPercent, cuAxis, cuGraph, cuPixel )');
  CL.AddTypeS('TOverrideColor', '( ocBrush, ocPen )');
  CL.AddTypeS('TOverrideColors', 'set of TOverrideColor');
  CL.AddTypeS('TSeriesMarksStyle', '( smsCustom, smsNone, smsValue, smsPercent,'
   +' smsLabel, smsLabelPercent, smsLabelValue, smsLegend, smsPercentTotal, sms'
   +'LabelPercentTotal, smsXValue )');
  CL.AddTypeS('TDoubleInterval', 'record FStart : Double; FEnd : Double; end');
  CL.AddTypeS('TNearestPointTarget', '( nptPoint, nptXList, nptYList, nptCustom'
   +' )');
  CL.AddTypeS('TNearestPointTargets', 'set of TNearestPointTarget');
  SIRegister_TIntervalList(CL);
  CL.AddTypeS('TCaseOfTwo', '( cotNone, cotFirst, cotSecond, cotBoth )');
  SIRegister_TIndexedComponent(CL);
  SIRegister_TTypedFPListEnumerator(CL);
  SIRegister_TIndexedComponentList(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TBroadcaster');
  SIRegister_TListener(CL);
  SIRegister_TBroadcaster(CL);
  SIRegister_TDrawDataItem(CL);
  //CL.AddTypeS('TDrawDataItemClass', 'class of TDrawDataItem');
  SIRegister_TDrawDataRegistry(CL);
  SIRegister_TPublishedIntegerSet(CL);
  SIRegister_THistory(CL);
  CL.AddTypeS('PStr', '^String // will not work');
  SIRegister_TClassRegistryItem(CL);
  SIRegister_TClassRegistry(CL);
 CL.AddConstantN('PUB_INT_SET_ALL','String').SetString( '');
 CL.AddConstantN('PUB_INT_SET_EMPTY','String').SetString( '-');
 CL.AddConstantN('ORIENTATION_UNITS_PER_DEG','LongInt').SetInt( 10);
 CL.AddDelphiFunction('Function BoundsSize( ALeft, ATop : Integer; ASize : TSize) : TRect');
 CL.AddDelphiFunction('Function Deg16ToRad( ADeg16 : Integer) : Double');
 CL.AddDelphiFunction('Function DoubleInterval( AStart, AEnd : Double) : TDoubleInterval');
 CL.AddDelphiFunction('Procedure Exchange0( var A, B : Integer);');
 CL.AddDelphiFunction('Procedure Exchange1( var A, B : Double);');
 CL.AddDelphiFunction('Procedure Exchange2( var A, B : TDoublePoint);');
 CL.AddDelphiFunction('Procedure Exchange3( var A, B : String);');
 CL.AddDelphiFunction('Function FormatIfNotEmpty( AFormat, AStr : String) : String');
 CL.AddDelphiFunction('Function IfThen4( ACond : Boolean; ATrue, AFalse : TObject) : TObject;');
 CL.AddDelphiFunction('Function InterpolateRGB( AColor1, AColor2 : Integer; ACoeff : Double) : Integer');
 CL.AddDelphiFunction('Function IntToColorHex( AColor : Integer) : String');
 CL.AddDelphiFunction('Function IsEquivalent( const A1, A2 : Double) : Boolean');
 CL.AddDelphiFunction('Function IsNan5( const APoint : TDoublePoint) : Boolean;');
 CL.AddDelphiFunction('Function NumberOr( ANum : Double; ADefault : Double) : Double');
 CL.AddDelphiFunction('Function OrientToRad( AOrient : Integer) : Double');
 CL.AddDelphiFunction('Function RadToDeg16( ARad : Double) : Integer');
 CL.AddDelphiFunction('Function RadToOrient( ARad : Double) : Integer');
 CL.AddDelphiFunction('Function RoundChecked( A : Double) : Integer');
 CL.AddDelphiFunction('Procedure SetPropDefaults( AObject : TPersistent; APropNames : array of String)');
 CL.AddDelphiFunction('Function Split( AString : String; ADest : TStrings; ADelimiter : Char) : TStrings');
 CL.AddDelphiFunction('Function StrToFloatDefSep( const AStr : String) : Double');
 CL.AddDelphiFunction('Procedure Unused( const A1)');
 CL.AddDelphiFunction('Procedure Unused( const A1, A2)');
 CL.AddDelphiFunction('Procedure Unused( const A1, A2, A3)');
 CL.AddDelphiFunction('Procedure UpdateMinMax6( AValue : Double; var AMin, AMax : Double);');
 CL.AddDelphiFunction('Procedure UpdateMinMax7( AValue : Integer; var AMin, AMax : Integer);');
 CL.AddDelphiFunction('Function WeightedAverage( AX1, AX2, ACoeff : Double) : Double');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure UpdateMinMax7_P( AValue : Integer; var AMin, AMax : Integer);
Begin TAChartUtils.UpdateMinMax(AValue, AMin, AMax); END;

(*----------------------------------------------------------------------------*)
Procedure UpdateMinMax6_P( AValue : Double; var AMin, AMax : Double);
Begin TAChartUtils.UpdateMinMax(AValue, AMin, AMax); END;

(*----------------------------------------------------------------------------*)
Function IsNan5_P( const APoint : TDoublePoint) : Boolean;
Begin Result := TAChartUtils.IsNan(APoint); END;

(*----------------------------------------------------------------------------*)
Function IfThen4_P( ACond : Boolean; ATrue, AFalse : TObject) : TObject;
Begin Result := TAChartUtils.IfThen(ACond, ATrue, AFalse); END;

(*----------------------------------------------------------------------------*)
Procedure Exchange3_P( var A, B : String);
Begin TAChartUtils.Exchange(A, B); END;

(*----------------------------------------------------------------------------*)
Procedure Exchange2_P( var A, B : TDoublePoint);
Begin TAChartUtils.Exchange(A, B); END;

(*----------------------------------------------------------------------------*)
Procedure Exchange1_P( var A, B : Double);
Begin TAChartUtils.Exchange(A, B); END;

(*----------------------------------------------------------------------------*)
Procedure Exchange0_P( var A, B : Integer);
Begin TAChartUtils.Exchange(A, B); END;

(*----------------------------------------------------------------------------*)
procedure TClassRegistryItemFCaptionPtr_W(Self: TClassRegistryItem; const T: PStr);
Begin Self.FCaptionPtr := T; end;

(*----------------------------------------------------------------------------*)
procedure TClassRegistryItemFCaptionPtr_R(Self: TClassRegistryItem; var T: PStr);
Begin T := Self.FCaptionPtr; end;

(*----------------------------------------------------------------------------*)
procedure TClassRegistryItemFCaption_W(Self: TClassRegistryItem; const T: String);
Begin Self.FCaption := T; end;

(*----------------------------------------------------------------------------*)
procedure TClassRegistryItemFCaption_R(Self: TClassRegistryItem; var T: String);
Begin T := Self.FCaption; end;

(*----------------------------------------------------------------------------*)
procedure TClassRegistryItemFClass_W(Self: TClassRegistryItem; const T: TClass);
Begin Self.FClass := T; end;

(*----------------------------------------------------------------------------*)
procedure TClassRegistryItemFClass_R(Self: TClassRegistryItem; var T: TClass);
Begin T := Self.FClass; end;

(*----------------------------------------------------------------------------*)
procedure THistoryItem_R(Self: THistory; var T: TElem; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure THistoryCount_R(Self: THistory; var T: Cardinal);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure THistoryCapacity_W(Self: THistory; const T: Cardinal);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure THistoryCapacity_R(Self: THistory; var T: Cardinal);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
procedure THistoryFData_W(Self: THistory; const T: array of TElem);
Begin Self.FData := T; end;

(*----------------------------------------------------------------------------*)
procedure THistoryFData_R(Self: THistory; var T: array of TElem);
Begin T := Self.FData; end;

(*----------------------------------------------------------------------------*)
procedure THistoryFCount_W(Self: THistory; const T: Cardinal);
Begin Self.FCount := T; end;

(*----------------------------------------------------------------------------*)
procedure THistoryFCount_R(Self: THistory; var T: Cardinal);
Begin T := Self.FCount; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetIsSet_W(Self: TPublishedIntegerSet; const T: Boolean; const t1: Integer);
begin Self.IsSet[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetIsSet_R(Self: TPublishedIntegerSet; var T: Boolean; const t1: Integer);
begin T := Self.IsSet[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetAsString_W(Self: TPublishedIntegerSet; const T: String);
begin Self.AsString := T; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetAsString_R(Self: TPublishedIntegerSet; var T: String);
begin T := Self.AsString; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetAllSet_W(Self: TPublishedIntegerSet; const T: Boolean);
begin Self.AllSet := T; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetAllSet_R(Self: TPublishedIntegerSet; var T: Boolean);
begin T := Self.AllSet; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetFData_W(Self: TPublishedIntegerSet; const T: TIntegerDynArray);
Begin Self.FData := T; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetFData_R(Self: TPublishedIntegerSet; var T: TIntegerDynArray);
Begin T := Self.FData; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetFAllSet_W(Self: TPublishedIntegerSet; const T: Boolean);
Begin Self.FAllSet := T; end;

(*----------------------------------------------------------------------------*)
procedure TPublishedIntegerSetFAllSet_R(Self: TPublishedIntegerSet; var T: Boolean);
Begin T := Self.FAllSet; end;

(*----------------------------------------------------------------------------*)
procedure TDrawDataItemOwner_R(Self: TDrawDataItem; var T: TObject);
begin T := Self.Owner; end;

(*----------------------------------------------------------------------------*)
procedure TDrawDataItemChart_R(Self: TDrawDataItem; var T: TObject);
begin T := Self.Chart; end;

(*----------------------------------------------------------------------------*)
procedure TBroadcasterLocked_W(Self: TBroadcaster; const T: Boolean);
begin Self.Locked := T; end;

(*----------------------------------------------------------------------------*)
procedure TBroadcasterLocked_R(Self: TBroadcaster; var T: Boolean);
begin T := Self.Locked; end;

(*----------------------------------------------------------------------------*)
procedure TListenerOnNotify_W(Self: TListener; const T: TNotifyEvent);
begin Self.OnNotify := T; end;

(*----------------------------------------------------------------------------*)
procedure TListenerOnNotify_R(Self: TListener; var T: TNotifyEvent);
begin T := Self.OnNotify; end;

(*----------------------------------------------------------------------------*)
procedure TListenerIsListening_R(Self: TListener; var T: Boolean);
begin T := Self.IsListening; end;

(*----------------------------------------------------------------------------*)
procedure TTypedFPListEnumeratorCurrent_R(Self: TTypedFPListEnumerator; var T: T);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
procedure TIndexedComponentIndex_W(Self: TIndexedComponent; const T: Integer);
begin Self.Index := T; end;

(*----------------------------------------------------------------------------*)
procedure TIndexedComponentIndex_R(Self: TIndexedComponent; var T: Integer);
begin T := Self.Index; end;

(*----------------------------------------------------------------------------*)
procedure TIntervalListOnChange_W(Self: TIntervalList; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TIntervalListOnChange_R(Self: TIntervalList; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TIntervalListIntervalCount_R(Self: TIntervalList; var T: Integer);
begin T := Self.IntervalCount; end;

(*----------------------------------------------------------------------------*)
procedure TIntervalListInterval_R(Self: TIntervalList; var T: TDoubleInterval; const t1: Integer);
begin T := Self.Interval[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TIntervalListEpsilon_W(Self: TIntervalList; const T: Double);
begin Self.Epsilon := T; end;

(*----------------------------------------------------------------------------*)
procedure TIntervalListEpsilon_R(Self: TIntervalList; var T: Double);
begin T := Self.Epsilon; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAChartUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@BoundsSize, 'BoundsSize', cdRegister);
 S.RegisterDelphiFunction(@Deg16ToRad, 'Deg16ToRad', cdRegister);
 S.RegisterDelphiFunction(@DoubleInterval, 'DoubleInterval', cdRegister);
 S.RegisterDelphiFunction(@Exchange0, 'Exchange0', cdRegister);
 S.RegisterDelphiFunction(@Exchange1, 'Exchange1', cdRegister);
 S.RegisterDelphiFunction(@Exchange2, 'Exchange2', cdRegister);
 S.RegisterDelphiFunction(@Exchange3, 'Exchange3', cdRegister);
 S.RegisterDelphiFunction(@FormatIfNotEmpty, 'FormatIfNotEmpty', cdRegister);
 S.RegisterDelphiFunction(@IfThen4, 'IfThen4', cdRegister);
 S.RegisterDelphiFunction(@InterpolateRGB, 'InterpolateRGB', cdRegister);
 S.RegisterDelphiFunction(@IntToColorHex, 'IntToColorHex', cdRegister);
 S.RegisterDelphiFunction(@IsEquivalent, 'IsEquivalent', cdRegister);
 S.RegisterDelphiFunction(@IsNan5, 'IsNan5', cdRegister);
 S.RegisterDelphiFunction(@NumberOr, 'NumberOr', cdRegister);
 S.RegisterDelphiFunction(@OrientToRad, 'OrientToRad', cdRegister);
 S.RegisterDelphiFunction(@RadToDeg16, 'RadToDeg16', cdRegister);
 S.RegisterDelphiFunction(@RadToOrient, 'RadToOrient', cdRegister);
 S.RegisterDelphiFunction(@RoundChecked, 'RoundChecked', cdRegister);
 S.RegisterDelphiFunction(@SetPropDefaults, 'SetPropDefaults', cdRegister);
 S.RegisterDelphiFunction(@Split, 'Split', cdRegister);
 S.RegisterDelphiFunction(@StrToFloatDefSep, 'StrToFloatDefSep', cdRegister);
 S.RegisterDelphiFunction(@Unused, 'Unused', cdRegister);
 S.RegisterDelphiFunction(@Unused, 'Unused', cdRegister);
 S.RegisterDelphiFunction(@Unused, 'Unused', cdRegister);
 S.RegisterDelphiFunction(@UpdateMinMax6, 'UpdateMinMax6', cdRegister);
 S.RegisterDelphiFunction(@UpdateMinMax7, 'UpdateMinMax7', cdRegister);
 S.RegisterDelphiFunction(@WeightedAverage, 'WeightedAverage', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TClassRegistry(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TClassRegistry) do
  begin
    RegisterMethod(@TClassRegistry.Clear, 'Clear');
    RegisterMethod(@TClassRegistry.GetCaption, 'GetCaption');
    RegisterMethod(@TClassRegistry.GetClass, 'GetClass');
    RegisterMethod(@TClassRegistry.IndexOfClass, 'IndexOfClass');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TClassRegistryItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TClassRegistryItem) do
  begin
    RegisterPropertyHelper(@TClassRegistryItemFClass_R,@TClassRegistryItemFClass_W,'FClass');
    RegisterPropertyHelper(@TClassRegistryItemFCaption_R,@TClassRegistryItemFCaption_W,'FCaption');
    RegisterPropertyHelper(@TClassRegistryItemFCaptionPtr_R,@TClassRegistryItemFCaptionPtr_W,'FCaptionPtr');
    RegisterConstructor(@TClassRegistryItem.Create, 'Create');
    RegisterConstructor(@TClassRegistryItem.CreateRes, 'CreateRes');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THistory(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THistory) do
  begin
    RegisterPropertyHelper(@THistoryFCount_R,@THistoryFCount_W,'FCount');
    RegisterPropertyHelper(@THistoryFData_R,@THistoryFData_W,'FData');
    RegisterMethod(@THistory.GetCapacity, 'GetCapacity');
    RegisterMethod(@THistory.GetItem, 'GetItem');
    RegisterMethod(@THistory.SetCapacity, 'SetCapacity');
    RegisterMethod(@THistory.DeleteOld, 'DeleteOld');
    RegisterMethod(@THistory.Add, 'Add');
    RegisterMethod(@THistory.Pop, 'Pop');
    RegisterPropertyHelper(@THistoryCapacity_R,@THistoryCapacity_W,'Capacity');
    RegisterPropertyHelper(@THistoryCount_R,nil,'Count');
    RegisterPropertyHelper(@THistoryItem_R,nil,'Item');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPublishedIntegerSet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPublishedIntegerSet) do
  begin
    RegisterPropertyHelper(@TPublishedIntegerSetFAllSet_R,@TPublishedIntegerSetFAllSet_W,'FAllSet');
    RegisterPropertyHelper(@TPublishedIntegerSetFData_R,@TPublishedIntegerSetFData_W,'FData');
    RegisterMethod(@TPublishedIntegerSet.GetAsString, 'GetAsString');
    RegisterMethod(@TPublishedIntegerSet.GetIsSet, 'GetIsSet');
    RegisterMethod(@TPublishedIntegerSet.SetAllSet, 'SetAllSet');
    RegisterMethod(@TPublishedIntegerSet.SetAsString, 'SetAsString');
    RegisterMethod(@TPublishedIntegerSet.SetIsSet, 'SetIsSet');
    RegisterConstructor(@TPublishedIntegerSet.Init, 'Init');
    RegisterPropertyHelper(@TPublishedIntegerSetAllSet_R,@TPublishedIntegerSetAllSet_W,'AllSet');
    RegisterMethod(@TPublishedIntegerSet.AsBooleans, 'AsBooleans');
    RegisterPropertyHelper(@TPublishedIntegerSetAsString_R,@TPublishedIntegerSetAsString_W,'AsString');
    RegisterPropertyHelper(@TPublishedIntegerSetIsSet_R,@TPublishedIntegerSetIsSet_W,'IsSet');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDrawDataRegistry(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDrawDataRegistry) do
  begin
    RegisterConstructor(@TDrawDataRegistry.Create, 'Create');
    RegisterMethod(@TDrawDataRegistry.Add, 'Add');
    RegisterMethod(@TDrawDataRegistry.DeleteByChart, 'DeleteByChart');
    RegisterMethod(@TDrawDataRegistry.DeleteByOwner, 'DeleteByOwner');
    RegisterMethod(@TDrawDataRegistry.Find, 'Find');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDrawDataItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDrawDataItem) do
  begin
    RegisterConstructor(@TDrawDataItem.Create, 'Create');
    RegisterPropertyHelper(@TDrawDataItemChart_R,nil,'Chart');
    RegisterPropertyHelper(@TDrawDataItemOwner_R,nil,'Owner');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBroadcaster(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBroadcaster) do
  begin
    RegisterMethod(@TBroadcaster.Broadcast, 'Broadcast');
    RegisterMethod(@TBroadcaster.Subscribe, 'Subscribe');
    RegisterMethod(@TBroadcaster.Unsubscribe, 'Unsubscribe');
    RegisterPropertyHelper(@TBroadcasterLocked_R,@TBroadcasterLocked_W,'Locked');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TListener(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TListener) do
  begin
    RegisterConstructor(@TListener.Create, 'Create');
    RegisterVirtualMethod(@TListener.Forget, 'Forget');
    RegisterMethod(@TListener.Notify, 'Notify');
    RegisterPropertyHelper(@TListenerIsListening_R,nil,'IsListening');
    RegisterPropertyHelper(@TListenerOnNotify_R,@TListenerOnNotify_W,'OnNotify');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIndexedComponentList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIndexedComponentList) do
  begin
    RegisterMethod(@TIndexedComponentList.ChangeNamePrefix, 'ChangeNamePrefix');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTypedFPListEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTypedFPListEnumerator) do
  begin
    RegisterMethod(@TTypedFPListEnumerator.GetCurrent, 'GetCurrent');
    RegisterPropertyHelper(@TTypedFPListEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIndexedComponent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIndexedComponent) do
  begin
    RegisterVirtualAbstractMethod(@TIndexedComponent, @!.GetIndex, 'GetIndex');
    RegisterVirtualAbstractMethod(@TIndexedComponent, @!.SetIndex, 'SetIndex');
    RegisterMethod(@TIndexedComponent.ChangeNamePrefix, 'ChangeNamePrefix');
    RegisterPropertyHelper(@TIndexedComponentIndex_R,@TIndexedComponentIndex_W,'Index');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIntervalList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIntervalList) do
  begin
    RegisterMethod(@TIntervalList.Assign, 'Assign');
    RegisterConstructor(@TIntervalList.Create, 'Create');
    RegisterMethod(@TIntervalList.AddPoint, 'AddPoint');
    RegisterMethod(@TIntervalList.AddRange, 'AddRange');
    RegisterMethod(@TIntervalList.Clear, 'Clear');
    RegisterMethod(@TIntervalList.Intersect, 'Intersect');
    RegisterPropertyHelper(@TIntervalListEpsilon_R,@TIntervalListEpsilon_W,'Epsilon');
    RegisterPropertyHelper(@TIntervalListInterval_R,nil,'Interval');
    RegisterPropertyHelper(@TIntervalListIntervalCount_R,nil,'IntervalCount');
    RegisterPropertyHelper(@TIntervalListOnChange_R,@TIntervalListOnChange_W,'OnChange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAChartUtils(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EChartError) do
  with CL.Add(EChartIntervalError) do
  with CL.Add(EListenerError) do
  with CL.Add(EDrawDataError) do
  RIRegister_TIntervalList(CL);
  RIRegister_TIndexedComponent(CL);
  RIRegister_TTypedFPListEnumerator(CL);
  RIRegister_TIndexedComponentList(CL);
  with CL.Add(TBroadcaster) do
  RIRegister_TListener(CL);
  RIRegister_TBroadcaster(CL);
  RIRegister_TDrawDataItem(CL);
  RIRegister_TDrawDataRegistry(CL);
  RIRegister_TPublishedIntegerSet(CL);
  RIRegister_THistory(CL);
  RIRegister_TClassRegistryItem(CL);
  RIRegister_TClassRegistry(CL);
end;

 
 
{ TPSImport_TAChartUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_TAChartUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_TAChartUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_TAChartUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_TAChartUtils(ri);
  RIRegister_TAChartUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
