unit uPSI_WDosPneumatics;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_WDosPneumatics = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TwdxCylinder(CL: TPSPascalCompiler);
procedure SIRegister_WDosPneumatics(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TwdxCylinder(CL: TPSRuntimeClassImporter);
procedure RIRegister_WDosPneumatics(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Forms
  ,WDosPlcUtils
  ,WDosPlcs
  ,WDosTimers
  ,WDosPneumatics
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_WDosPneumatics]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TwdxCylinder(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomPetriNet', 'TwdxCylinder') do
  with CL.AddClassN(CL.FindClass('TCustomPetriNet'),'TwdxCylinder') do
  begin
    RegisterMethod('Constructor Create( aOwner : TComponent)');
    RegisterMethod('Procedure Reset');
    RegisterMethod('Procedure Open');
    RegisterMethod('Procedure Close');
    RegisterProperty('Position', 'Integer', iptr);
    RegisterProperty('InpOpen', 'TBitAddr', iptrw);
    RegisterProperty('InpClose', 'TBitAddr', iptrw);
    RegisterProperty('OutOpen', 'TBitAddr', iptrw);
    RegisterProperty('OutClose', 'TBitAddr', iptrw);
    RegisterProperty('PulseTime', 'Integer', iptrw);
    RegisterProperty('SwitchTime', 'Integer', iptrw);
    RegisterProperty('IdleTime', 'Integer', iptrw);
    RegisterProperty('ErrorCode', 'Integer', iptr);
    RegisterProperty('OnOpen', 'TNotifyEvent', iptrw);
    RegisterProperty('OnClose', 'TNotifyEvent', iptrw);
    RegisterProperty('OnError', 'TErrorEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_WDosPneumatics(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('DPulseTime','LongInt').SetInt( 2000);
 CL.AddConstantN('DSwitchTime','LongInt').SetInt( 20000);
 CL.AddConstantN('DIdleTime','LongInt').SetInt( 5000);
 CL.AddConstantN('cylInit','LongInt').SetInt( 0);
 CL.AddConstantN('cylClose','LongInt').SetInt( 1);
 CL.AddConstantN('cylOpening','LongInt').SetInt( 2);
 CL.AddConstantN('cylOpen','LongInt').SetInt( 3);
 CL.AddConstantN('cylCloseing','LongInt').SetInt( 4);
 CL.AddConstantN('cylError','LongInt').SetInt( 5);
  SIRegister_TwdxCylinder(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOnError_W(Self: TwdxCylinder; const T: TErrorEvent);
begin Self.OnError := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOnError_R(Self: TwdxCylinder; var T: TErrorEvent);
begin T := Self.OnError; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOnClose_W(Self: TwdxCylinder; const T: TNotifyEvent);
begin Self.OnClose := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOnClose_R(Self: TwdxCylinder; var T: TNotifyEvent);
begin T := Self.OnClose; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOnOpen_W(Self: TwdxCylinder; const T: TNotifyEvent);
begin Self.OnOpen := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOnOpen_R(Self: TwdxCylinder; var T: TNotifyEvent);
begin T := Self.OnOpen; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderErrorCode_R(Self: TwdxCylinder; var T: Integer);
begin T := Self.ErrorCode; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderIdleTime_W(Self: TwdxCylinder; const T: Integer);
begin Self.IdleTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderIdleTime_R(Self: TwdxCylinder; var T: Integer);
begin T := Self.IdleTime; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderSwitchTime_W(Self: TwdxCylinder; const T: Integer);
begin Self.SwitchTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderSwitchTime_R(Self: TwdxCylinder; var T: Integer);
begin T := Self.SwitchTime; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderPulseTime_W(Self: TwdxCylinder; const T: Integer);
begin Self.PulseTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderPulseTime_R(Self: TwdxCylinder; var T: Integer);
begin T := Self.PulseTime; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOutClose_W(Self: TwdxCylinder; const T: TBitAddr);
begin Self.OutClose := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOutClose_R(Self: TwdxCylinder; var T: TBitAddr);
begin T := Self.OutClose; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOutOpen_W(Self: TwdxCylinder; const T: TBitAddr);
begin Self.OutOpen := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderOutOpen_R(Self: TwdxCylinder; var T: TBitAddr);
begin T := Self.OutOpen; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderInpClose_W(Self: TwdxCylinder; const T: TBitAddr);
begin Self.InpClose := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderInpClose_R(Self: TwdxCylinder; var T: TBitAddr);
begin T := Self.InpClose; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderInpOpen_W(Self: TwdxCylinder; const T: TBitAddr);
begin Self.InpOpen := T; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderInpOpen_R(Self: TwdxCylinder; var T: TBitAddr);
begin T := Self.InpOpen; end;

(*----------------------------------------------------------------------------*)
procedure TwdxCylinderPosition_R(Self: TwdxCylinder; var T: Integer);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TwdxCylinder(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TwdxCylinder) do
  begin
    RegisterConstructor(@TwdxCylinder.Create, 'Create');
    RegisterMethod(@TwdxCylinder.Reset, 'Reset');
    RegisterMethod(@TwdxCylinder.Open, 'Open');
    RegisterMethod(@TwdxCylinder.Close, 'Close');
    RegisterPropertyHelper(@TwdxCylinderPosition_R,nil,'Position');
    RegisterPropertyHelper(@TwdxCylinderInpOpen_R,@TwdxCylinderInpOpen_W,'InpOpen');
    RegisterPropertyHelper(@TwdxCylinderInpClose_R,@TwdxCylinderInpClose_W,'InpClose');
    RegisterPropertyHelper(@TwdxCylinderOutOpen_R,@TwdxCylinderOutOpen_W,'OutOpen');
    RegisterPropertyHelper(@TwdxCylinderOutClose_R,@TwdxCylinderOutClose_W,'OutClose');
    RegisterPropertyHelper(@TwdxCylinderPulseTime_R,@TwdxCylinderPulseTime_W,'PulseTime');
    RegisterPropertyHelper(@TwdxCylinderSwitchTime_R,@TwdxCylinderSwitchTime_W,'SwitchTime');
    RegisterPropertyHelper(@TwdxCylinderIdleTime_R,@TwdxCylinderIdleTime_W,'IdleTime');
    RegisterPropertyHelper(@TwdxCylinderErrorCode_R,nil,'ErrorCode');
    RegisterPropertyHelper(@TwdxCylinderOnOpen_R,@TwdxCylinderOnOpen_W,'OnOpen');
    RegisterPropertyHelper(@TwdxCylinderOnClose_R,@TwdxCylinderOnClose_W,'OnClose');
    RegisterPropertyHelper(@TwdxCylinderOnError_R,@TwdxCylinderOnError_W,'OnError');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_WDosPneumatics(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TwdxCylinder(CL);
end;

 
 
{ TPSImport_WDosPneumatics }
(*----------------------------------------------------------------------------*)
procedure TPSImport_WDosPneumatics.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_WDosPneumatics(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_WDosPneumatics.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_WDosPneumatics(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
