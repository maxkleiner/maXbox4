unit uPSI_O32BGSty;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_O32BGSty = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TO32BackgroundStyle(CL: TPSPascalCompiler);
procedure SIRegister_O32BGSty(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TO32BackgroundStyle(CL: TPSRuntimeClassImporter);
procedure RIRegister_O32BGSty(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Graphics
  ,Controls
  ,Forms
  ,Dialogs
  ,O32BGSty
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_O32BGSty]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TO32BackgroundStyle(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TO32BackgroundStyle') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TO32BackgroundStyle') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure PaintBG( Sender : TObject; Canvas : TCanvas; const Rct : TRect)');
    RegisterProperty('AlphaBlend', 'Byte', iptrw);
    RegisterProperty('Color', 'TColor', iptrw);
    RegisterProperty('Enabled', 'Boolean', iptrw);
    RegisterProperty('Image', 'TBitmap', iptrw);
    RegisterProperty('ImageStyle', 'TBGImageStyle', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_O32BGSty(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TBGImageStyle', '( bgNone, bgNormal, bgCenter, bgStretch, bgTile'
   +' )');
  SIRegister_TO32BackgroundStyle(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleImageStyle_W(Self: TO32BackgroundStyle; const T: TBGImageStyle);
begin Self.ImageStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleImageStyle_R(Self: TO32BackgroundStyle; var T: TBGImageStyle);
begin T := Self.ImageStyle; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleImage_W(Self: TO32BackgroundStyle; const T: TBitmap);
begin Self.Image := T; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleImage_R(Self: TO32BackgroundStyle; var T: TBitmap);
begin T := Self.Image; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleEnabled_W(Self: TO32BackgroundStyle; const T: Boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleEnabled_R(Self: TO32BackgroundStyle; var T: Boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleColor_W(Self: TO32BackgroundStyle; const T: TColor);
begin Self.Color := T; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleColor_R(Self: TO32BackgroundStyle; var T: TColor);
begin T := Self.Color; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleAlphaBlend_W(Self: TO32BackgroundStyle; const T: Byte);
begin Self.AlphaBlend := T; end;

(*----------------------------------------------------------------------------*)
procedure TO32BackgroundStyleAlphaBlend_R(Self: TO32BackgroundStyle; var T: Byte);
begin T := Self.AlphaBlend; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TO32BackgroundStyle(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TO32BackgroundStyle) do
  begin
    RegisterVirtualConstructor(@TO32BackgroundStyle.Create, 'Create');
    RegisterMethod(@TO32BackgroundStyle.PaintBG, 'PaintBG');
    RegisterPropertyHelper(@TO32BackgroundStyleAlphaBlend_R,@TO32BackgroundStyleAlphaBlend_W,'AlphaBlend');
    RegisterPropertyHelper(@TO32BackgroundStyleColor_R,@TO32BackgroundStyleColor_W,'Color');
    RegisterPropertyHelper(@TO32BackgroundStyleEnabled_R,@TO32BackgroundStyleEnabled_W,'Enabled');
    RegisterPropertyHelper(@TO32BackgroundStyleImage_R,@TO32BackgroundStyleImage_W,'Image');
    RegisterPropertyHelper(@TO32BackgroundStyleImageStyle_R,@TO32BackgroundStyleImageStyle_W,'ImageStyle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_O32BGSty(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TO32BackgroundStyle(CL);
end;

 
 
{ TPSImport_O32BGSty }
(*----------------------------------------------------------------------------*)
procedure TPSImport_O32BGSty.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_O32BGSty(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_O32BGSty.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_O32BGSty(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
