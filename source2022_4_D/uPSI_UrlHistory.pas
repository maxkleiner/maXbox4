unit uPSI_UrlHistory;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_UrlHistory = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TUrlHistory(CL: TPSPascalCompiler);
procedure SIRegister_UrlHistory(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TUrlHistory(CL: TPSRuntimeClassImporter);
procedure RIRegister_UrlHistory(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,ActiveX
  ,ComObj
  ,EwbAcc
  ,UrlHistory
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_UrlHistory]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TUrlHistory(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TUrlHistory') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TUrlHistory') do
  begin
    RegisterProperty('Items', 'TList', iptrw);
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function Enumerate : Integer');
    RegisterMethod('Function DeleteEntries : Integer');
    RegisterMethod('Function AddUrl( Url : PWideChar; Title : PWideChar) : HRESULT');
    RegisterMethod('Function DeleteUrl( Url : PWideChar) : HRESULT');
    RegisterMethod('Function QueryUrl( Url : PWideChar; var Entry : TEntry) : HRESULT');
    RegisterMethod('Function ClearHistory : HRESULT');
    RegisterProperty('OnAccept', 'TOnAcceptEvent', iptrw);
    RegisterProperty('OnDelete', 'TOnDeleteEvent', iptrw);
    RegisterProperty('SortField', 'TSortFieldOption', iptrw);
    RegisterProperty('SearchField', 'TSearchFieldOption', iptrw);
    RegisterProperty('Search', 'string', iptrw);
    RegisterProperty('SortDirection', 'TSortDirectionOption', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_UrlHistory(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TSortDirectionOption', '( sdAscending, sdDescending )');
  CL.AddTypeS('TSortFieldOption', '( sfTitle, sfURL, sfLastVisited, sfLastUpdat'
   +'ed, sfExpires )');
  CL.AddTypeS('TSearchFieldOption', '( seBoth, seTitle, seURL )');
  CL.AddTypeS('TOnAcceptEvent', 'Procedure ( Title, Url : string; LastVisited, '
   +'LastUpdated, Expires : TDateTime; var Accept : Boolean)');
  CL.AddTypeS('TOnDeleteEvent', 'Procedure ( Title, Url : string; LastVisited, '
   +'LastUpdated, Expires : TDateTime; var Delete : Boolean)');
  SIRegister_TUrlHistory(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TUrlHistorySortDirection_W(Self: TUrlHistory; const T: TSortDirectionOption);
begin Self.SortDirection := T; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistorySortDirection_R(Self: TUrlHistory; var T: TSortDirectionOption);
begin T := Self.SortDirection; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistorySearch_W(Self: TUrlHistory; const T: string);
begin Self.Search := T; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistorySearch_R(Self: TUrlHistory; var T: string);
begin T := Self.Search; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistorySearchField_W(Self: TUrlHistory; const T: TSearchFieldOption);
begin Self.SearchField := T; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistorySearchField_R(Self: TUrlHistory; var T: TSearchFieldOption);
begin T := Self.SearchField; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistorySortField_W(Self: TUrlHistory; const T: TSortFieldOption);
begin Self.SortField := T; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistorySortField_R(Self: TUrlHistory; var T: TSortFieldOption);
begin T := Self.SortField; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistoryOnDelete_W(Self: TUrlHistory; const T: TOnDeleteEvent);
begin Self.OnDelete := T; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistoryOnDelete_R(Self: TUrlHistory; var T: TOnDeleteEvent);
begin T := Self.OnDelete; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistoryOnAccept_W(Self: TUrlHistory; const T: TOnAcceptEvent);
begin Self.OnAccept := T; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistoryOnAccept_R(Self: TUrlHistory; var T: TOnAcceptEvent);
begin T := Self.OnAccept; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistoryItems_W(Self: TUrlHistory; const T: TList);
Begin Self.Items := T; end;

(*----------------------------------------------------------------------------*)
procedure TUrlHistoryItems_R(Self: TUrlHistory; var T: TList);
Begin T := Self.Items; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUrlHistory(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUrlHistory) do
  begin
    RegisterPropertyHelper(@TUrlHistoryItems_R,@TUrlHistoryItems_W,'Items');
    RegisterConstructor(@TUrlHistory.Create, 'Create');
    RegisterMethod(@TUrlHistory.Enumerate, 'Enumerate');
    RegisterMethod(@TUrlHistory.DeleteEntries, 'DeleteEntries');
    RegisterMethod(@TUrlHistory.AddUrl, 'AddUrl');
    RegisterMethod(@TUrlHistory.DeleteUrl, 'DeleteUrl');
    RegisterMethod(@TUrlHistory.QueryUrl, 'QueryUrl');
    RegisterMethod(@TUrlHistory.ClearHistory, 'ClearHistory');
    RegisterPropertyHelper(@TUrlHistoryOnAccept_R,@TUrlHistoryOnAccept_W,'OnAccept');
    RegisterPropertyHelper(@TUrlHistoryOnDelete_R,@TUrlHistoryOnDelete_W,'OnDelete');
    RegisterPropertyHelper(@TUrlHistorySortField_R,@TUrlHistorySortField_W,'SortField');
    RegisterPropertyHelper(@TUrlHistorySearchField_R,@TUrlHistorySearchField_W,'SearchField');
    RegisterPropertyHelper(@TUrlHistorySearch_R,@TUrlHistorySearch_W,'Search');
    RegisterPropertyHelper(@TUrlHistorySortDirection_R,@TUrlHistorySortDirection_W,'SortDirection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_UrlHistory(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TUrlHistory(CL);
end;

 
 
{ TPSImport_UrlHistory }
(*----------------------------------------------------------------------------*)
procedure TPSImport_UrlHistory.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_UrlHistory(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_UrlHistory.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_UrlHistory(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
