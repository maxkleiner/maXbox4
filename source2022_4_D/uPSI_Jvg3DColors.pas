unit uPSI_Jvg3DColors;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Jvg3DColors = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJvg3DColors(CL: TPSPascalCompiler);
procedure SIRegister_TJvg3DLocalColors(CL: TPSPascalCompiler);
procedure SIRegister_Jvg3DColors(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvg3DColors(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvg3DLocalColors(CL: TPSRuntimeClassImporter);
procedure RIRegister_Jvg3DColors(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
  // JclUnitVersioning
  Windows
  ,Messages
  ,Graphics
  ,Controls
  ,Forms
  ,JVgTypes
  ,Math
  ,JvResources
  //,Jvg3DColors
  ;
 
 
procedure Register;
begin
  //RegisterComponents('Pascal Script', [TPSImport_Jvg3DColors]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvg3DColors(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvg3DLocalColors', 'TJvg3DColors') do
  with CL.AddClassN(CL.FindClass('TJvg3DLocalColors'),'TJvg3DColors') do
  begin
  end;
end;


type
  TJvg3DLocalColors = class(TComponent)
  private
    FDkShadow: TColor;
    FHighlight: TColor;
    FShadow: TColor;
    FColorShadowShift: Byte;
    FColorHighlightShift: Byte;
    OldPointer: Pointer;
    procedure SetDefaults;
    procedure SetDkShadow(Value: TColor);
    procedure SetHighlight(Value: TColor);
    procedure SetShadow(Value: TColor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure CreateAuto3DColors(BaseColor: TColor);
    procedure MakeGlobal;
    procedure MakeLocal;
    property ColorShadowShift: Byte read FColorShadowShift write FColorShadowShift default 60;
    property ColorHighlightShift: Byte read FColorHighlightShift write FColorHighlightShift default 60;
  published
    property DkShadow: TColor read FDkShadow write SetDkShadow default cl3DDkShadow;
    property Highlight: TColor read FHighlight write SetHighlight default clBtnHighlight;
    property Shadow: TColor read FShadow write SetShadow default clBtnShadow;
  end;

  TJvg3DColors = class(TJvg3DLocalColors)
  protected
    procedure Notification(Component: TComponent; Operation: TOperation); override;
  public
    constructor Create(AOwner: TComponent); override;
  end;


//=== { TJvg3DLocalColors } ==================================================

constructor TJvg3DLocalColors.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  SetDefaults;
end;

destructor TJvg3DLocalColors.Destroy;
begin
  jvgtypes.glGlobalData.lp3DColors := nil;
  inherited Destroy;
end;

procedure TJvg3DLocalColors.SetDefaults;
begin
  FDkShadow := cl3DDkShadow;
  FHighlight := clBtnHighlight;
  FShadow := clBtnShadow;
  FColorShadowShift := 60;
  FColorHighlightShift := 60;
end;

procedure TJvg3DLocalColors.CreateAuto3DColors(BaseColor: TColor);
var
  R, G, B: Byte;
begin
  if (BaseColor and $80000000) <> 0 then
    BaseColor := GetSysColor(BaseColor and $FF);
  B := GetRValue(BaseColor);
  G := GetGValue(BaseColor);
  R := GetBValue(BaseColor);
  FShadow := RGB(Max(R - ColorShadowShift, 0),
    Max(G - ColorShadowShift, 0), Max(B - ColorShadowShift, 0));
  FHighlight := RGB(Min(R + ColorHighlightShift, 255),
    Min(G + ColorHighlightShift, 255), Min(B + ColorHighlightShift, 255));
end;

procedure TJvg3DLocalColors.MakeGlobal;
begin
  OldPointer := glGlobalData.lp3DColors;
  glGlobalData.lp3DColors := Self;
end;

procedure TJvg3DLocalColors.MakeLocal;
begin
  glGlobalData.lp3DColors := OldPointer;
end;

procedure TJvg3DLocalColors.SetDkShadow(Value: TColor);
begin
  FDkShadow := Value; {TWinControl(Owner).Invalidate;}
end;

procedure TJvg3DLocalColors.SetHighlight(Value: TColor);
begin
  FHighlight := Value; {TWinControl(Owner).Invalidate;}
end;

procedure TJvg3DLocalColors.SetShadow(Value: TColor);
begin
  FShadow := Value; {TWinControl(Owner).Invalidate;}
end;

//=== { TJvg3DColors } =======================================================

constructor TJvg3DColors.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  SetDefaults;
  glGlobalData.lp3DColors := Self;
end;

procedure TJvg3DColors.Notification(Component: TComponent; Operation: TOperation);
begin
  if (Component <> Self) and (Operation = opInsert) and (Component is TJvg3DLocalColors) then
    raise Exception.CreateRes(@RsEOnlyOneInstanceOfTJvg3DLocalColors);
end;
  


(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvg3DLocalColors(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TJvg3DLocalColors') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TJvg3DLocalColors') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure CreateAuto3DColors( BaseColor : TColor)');
    RegisterMethod('Procedure MakeGlobal');
    RegisterMethod('Procedure MakeLocal');
    RegisterProperty('ColorShadowShift', 'Byte', iptrw);
    RegisterProperty('ColorHighlightShift', 'Byte', iptrw);
    RegisterProperty('DkShadow', 'TColor', iptrw);
    RegisterProperty('Highlight', 'TColor', iptrw);
    RegisterProperty('Shadow', 'TColor', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Jvg3DColors(CL: TPSPascalCompiler);
begin
  SIRegister_TJvg3DLocalColors(CL);
  SIRegister_TJvg3DColors(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsShadow_W(Self: TJvg3DLocalColors; const T: TColor);
begin Self.Shadow := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsShadow_R(Self: TJvg3DLocalColors; var T: TColor);
begin T := Self.Shadow; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsHighlight_W(Self: TJvg3DLocalColors; const T: TColor);
begin Self.Highlight := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsHighlight_R(Self: TJvg3DLocalColors; var T: TColor);
begin T := Self.Highlight; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsDkShadow_W(Self: TJvg3DLocalColors; const T: TColor);
begin Self.DkShadow := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsDkShadow_R(Self: TJvg3DLocalColors; var T: TColor);
begin T := Self.DkShadow; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsColorHighlightShift_W(Self: TJvg3DLocalColors; const T: Byte);
begin Self.ColorHighlightShift := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsColorHighlightShift_R(Self: TJvg3DLocalColors; var T: Byte);
begin T := Self.ColorHighlightShift; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsColorShadowShift_W(Self: TJvg3DLocalColors; const T: Byte);
begin Self.ColorShadowShift := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvg3DLocalColorsColorShadowShift_R(Self: TJvg3DLocalColors; var T: Byte);
begin T := Self.ColorShadowShift; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvg3DColors(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvg3DColors) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvg3DLocalColors(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvg3DLocalColors) do begin
    RegisterConstructor(@TJvg3DLocalColors.Create, 'Create');
    RegisterMethod(@TJvg3DLocalColors.CreateAuto3DColors, 'CreateAuto3DColors');
    RegisterMethod(@TJvg3DLocalColors.MakeGlobal, 'MakeGlobal');
    RegisterMethod(@TJvg3DLocalColors.MakeLocal, 'MakeLocal');
    RegisterPropertyHelper(@TJvg3DLocalColorsColorShadowShift_R,@TJvg3DLocalColorsColorShadowShift_W,'ColorShadowShift');
    RegisterPropertyHelper(@TJvg3DLocalColorsColorHighlightShift_R,@TJvg3DLocalColorsColorHighlightShift_W,'ColorHighlightShift');
    RegisterPropertyHelper(@TJvg3DLocalColorsDkShadow_R,@TJvg3DLocalColorsDkShadow_W,'DkShadow');
    RegisterPropertyHelper(@TJvg3DLocalColorsHighlight_R,@TJvg3DLocalColorsHighlight_W,'Highlight');
    RegisterPropertyHelper(@TJvg3DLocalColorsShadow_R,@TJvg3DLocalColorsShadow_W,'Shadow');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Jvg3DColors(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TJvg3DLocalColors(CL);
  RIRegister_TJvg3DColors(CL);
end;

 
 
{ TPSImport_Jvg3DColors }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Jvg3DColors.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Jvg3DColors(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Jvg3DColors.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Jvg3DColors(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
