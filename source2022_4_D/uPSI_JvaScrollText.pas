unit uPSI_JvaScrollText;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvaScrollText = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJvaScrollText(CL: TPSPascalCompiler);
procedure SIRegister_JvaScrollText(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvaScrollText(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvaScrollText(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Controls
  ,ExtCtrls
  ,Forms
  ,Graphics
  ,JvComponent
  ,JvaScrollText
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvaScrollText]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvaScrollText(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvCustomControl', 'TJvaScrollText') do
  with CL.AddClassN(CL.FindClass('TCustomControl'),'TJvaScrollText') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
        RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Scroll');
    RegisterMethod('Procedure Stop');
    RegisterProperty('ForeImage', 'TPicture', iptrw);
    RegisterProperty('BackImage', 'TPicture', iptrw);
    RegisterProperty('Lines', 'TStrings', iptrw);
    RegisterProperty('ScrollBottom', 'Integer', iptrw);
    RegisterProperty('ScrollTop', 'Integer', iptrw);
    RegisterProperty('LeftMargin', 'Integer', iptrw);
    RegisterProperty('RightMargin', 'Integer', iptrw);
    RegisterProperty('MaxFontSize', 'Integer', iptrw);
    RegisterProperty('Speed', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvaScrollText(CL: TPSPascalCompiler);
begin
  SIRegister_TJvaScrollText(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextSpeed_W(Self: TJvaScrollText; const T: Integer);
begin Self.Speed := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextSpeed_R(Self: TJvaScrollText; var T: Integer);
begin T := Self.Speed; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextMaxFontSize_W(Self: TJvaScrollText; const T: Integer);
begin Self.MaxFontSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextMaxFontSize_R(Self: TJvaScrollText; var T: Integer);
begin T := Self.MaxFontSize; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextRightMargin_W(Self: TJvaScrollText; const T: Integer);
begin Self.RightMargin := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextRightMargin_R(Self: TJvaScrollText; var T: Integer);
begin T := Self.RightMargin; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextLeftMargin_W(Self: TJvaScrollText; const T: Integer);
begin Self.LeftMargin := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextLeftMargin_R(Self: TJvaScrollText; var T: Integer);
begin T := Self.LeftMargin; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextScrollTop_W(Self: TJvaScrollText; const T: Integer);
begin Self.ScrollTop := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextScrollTop_R(Self: TJvaScrollText; var T: Integer);
begin T := Self.ScrollTop; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextScrollBottom_W(Self: TJvaScrollText; const T: Integer);
begin Self.ScrollBottom := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextScrollBottom_R(Self: TJvaScrollText; var T: Integer);
begin T := Self.ScrollBottom; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextLines_W(Self: TJvaScrollText; const T: TStrings);
begin Self.Lines := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextLines_R(Self: TJvaScrollText; var T: TStrings);
begin T := Self.Lines; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextBackImage_W(Self: TJvaScrollText; const T: TPicture);
begin Self.BackImage := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextBackImage_R(Self: TJvaScrollText; var T: TPicture);
begin T := Self.BackImage; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextForeImage_W(Self: TJvaScrollText; const T: TPicture);
begin Self.ForeImage := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvaScrollTextForeImage_R(Self: TJvaScrollText; var T: TPicture);
begin T := Self.ForeImage; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvaScrollText(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvaScrollText) do begin
    RegisterConstructor(@TJvaScrollText.Create, 'Create');
      RegisterMethod(@TJvaScrollText.Destroy, 'Free');
      RegisterMethod(@TJvaScrollText.Scroll, 'Scroll');
    RegisterMethod(@TJvaScrollText.Stop, 'Stop');
    RegisterPropertyHelper(@TJvaScrollTextForeImage_R,@TJvaScrollTextForeImage_W,'ForeImage');
    RegisterPropertyHelper(@TJvaScrollTextBackImage_R,@TJvaScrollTextBackImage_W,'BackImage');
    RegisterPropertyHelper(@TJvaScrollTextLines_R,@TJvaScrollTextLines_W,'Lines');
    RegisterPropertyHelper(@TJvaScrollTextScrollBottom_R,@TJvaScrollTextScrollBottom_W,'ScrollBottom');
    RegisterPropertyHelper(@TJvaScrollTextScrollTop_R,@TJvaScrollTextScrollTop_W,'ScrollTop');
    RegisterPropertyHelper(@TJvaScrollTextLeftMargin_R,@TJvaScrollTextLeftMargin_W,'LeftMargin');
    RegisterPropertyHelper(@TJvaScrollTextRightMargin_R,@TJvaScrollTextRightMargin_W,'RightMargin');
    RegisterPropertyHelper(@TJvaScrollTextMaxFontSize_R,@TJvaScrollTextMaxFontSize_W,'MaxFontSize');
    RegisterPropertyHelper(@TJvaScrollTextSpeed_R,@TJvaScrollTextSpeed_W,'Speed');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvaScrollText(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TJvaScrollText(CL);
end;

 
 
{ TPSImport_JvaScrollText }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvaScrollText.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvaScrollText(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvaScrollText.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvaScrollText(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
