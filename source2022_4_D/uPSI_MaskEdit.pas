unit uPSI_MaskEdit;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
   mX4   from lazarus LCL
}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_MaskEdit = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMaskEdit(CL: TPSPascalCompiler);
procedure SIRegister_TCustomMaskEdit(CL: TPSPascalCompiler);
procedure SIRegister_MaskEdit(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_MaskEdit_Routines(S: TPSExec);
procedure RIRegister_TMaskEdit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomMaskEdit(CL: TPSRuntimeClassImporter);
procedure RIRegister_MaskEdit(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   StdCtrls
  ,Controls
 // ,LMessages
  //,LCLType
  //,Windows
  ,Graphics
  ,MaskEdit
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_MaskEdit]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMaskEdit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMaskEdit', 'TMaskEdit') do
  with CL.AddClassN(CL.FindClass('TCustomMaskEdit'),'TMaskEdit') do begin
    RegisterPublishedProperties;
    RegisterProperty('EditMask', 'string', iptrw);
    RegisterProperty('Font', 'Tfont', iptrw);
    //property EditMask;
    //property Font;
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomMaskEdit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomEdit', 'TCustomMaskEdit') do
  with CL.AddClassN(CL.FindClass('TCustomEdit'),'TCustomMaskEdit') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure ValidateEdit');
    RegisterMethod('Procedure Clear');
    RegisterProperty('IsMasked', 'Boolean', iptr);
    RegisterProperty('EditText', 'string', iptrw);
    RegisterProperty('Text', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_MaskEdit(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('DefaultBlank2','Char').SetString( '_');
 CL.AddConstantN('MaskFieldSeparator2','Char').SetString( ';');
 CL.AddConstantN('MaskNoSave2','Char').SetString( '0');
 CL.AddConstantN('mDirReverse2','String').SetString( '!');
 CL.AddConstantN('mDirUpperCase2','String').SetString( '>');
 CL.AddConstantN('mDirLowerCase2','String').SetString( '<');
 CL.AddConstantN('mDirLiteral2','String').SetString( '\');
 CL.AddConstantN('mMskAlpha2','String').SetString( 'L');
 CL.AddConstantN('mMskAlphaOpt2','String').SetString( 'l');
 CL.AddConstantN('mMskAlphaNum2','String').SetString( 'A');
 CL.AddConstantN('mMskAlphaNumOpt2','String').SetString( 'a');
 CL.AddConstantN('mMskAscii2','String').SetString( 'C');
 CL.AddConstantN('mMskAsciiOpt2','String').SetString( 'c');
 CL.AddConstantN('mMskNumeric2','String').SetString( '0');
 CL.AddConstantN('mMskNumericOpt2','String').SetString( '9');
 CL.AddConstantN('mMskNumSymOpt2','String').SetString( '#');
 CL.AddConstantN('mMskTimeSeparator2','String').SetString( ':');
 CL.AddConstantN('mMskDateSeparator2','String').SetString( '/');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDBEditError');
  {CL.AddTypeS('TMbcsByteType2', '( mbSingleByte, mbLeadByte, mbTrailByte )');
  CL.AddTypeS('TMaskCharType2', '( mcNone, mcLiteral, mcIntlLiteral, mcDirective'
   +', mcMask, mcMaskOpt, mcFieldSeparator, mcField )');
  CL.AddTypeS('TMaskDirectives2', 'set of ( mdReverseDir, mdUpperCase, mdLowerCase, mdLiteralChar )'); }
  CL.AddTypeS('TMaskedState', '( msMasked, msReEnter, msDBSetText )');
  SIRegister_TCustomMaskEdit(CL);
  SIRegister_TMaskEdit(CL);
 CL.AddDelphiFunction('Function FormatMaskText2( const EditMask : string; const Value : string) : string');
 CL.AddDelphiFunction('Function MaskGetMaskSave2( const EditMask : string) : Boolean');
 CL.AddDelphiFunction('Function MaskGetMaskBlank2( const EditMask : string) : Char');
 CL.AddDelphiFunction('Function MaskGetFldSeparator2( const EditMask : string) : Integer');
 //CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TCustomMaskEditText_W(Self: TCustomMaskEdit; const T: string);
begin Self.Text := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomMaskEditText_R(Self: TCustomMaskEdit; var T: string);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TCustomMaskEditEditText_W(Self: TCustomMaskEdit; const T: string);
begin Self.EditText := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomMaskEditEditText_R(Self: TCustomMaskEdit; var T: string);
begin T := Self.EditText; end;

(*----------------------------------------------------------------------------*)
procedure TCustomMaskEditIsMasked_R(Self: TCustomMaskEdit; var T: Boolean);
begin T := Self.IsMasked; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_MaskEdit_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@FormatMaskText, 'FormatMaskText2', cdRegister);
 S.RegisterDelphiFunction(@MaskGetMaskSave, 'MaskGetMaskSave2', cdRegister);
 S.RegisterDelphiFunction(@MaskGetMaskBlank, 'MaskGetMaskBlank2', cdRegister);
 S.RegisterDelphiFunction(@MaskGetFldSeparator, 'MaskGetFldSeparator2', cdRegister);
 //S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure TMaskEditEditMask_W(Self: TMaskEdit; const T: string);
begin Self.EditMask := T; end;

(*----------------------------------------------------------------------------*)
procedure TMaskEditEditMask_R(Self: TMaskEdit; var T: string);
begin T := Self.EditMask; end;

procedure TMaskEditFont_W(Self: TMaskEdit; const T: TFont);
begin Self.Font := T; end;

(*----------------------------------------------------------------------------*)
procedure TMaskEditFont_R(Self: TMaskEdit; var T: TFont);
begin T := Self.Font; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMaskEdit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMaskEdit) do begin
    //RegisterPublishedProperties;
    RegisterPropertyHelper(@TMaskEditEditMask_R,@TMaskEditEditMask_W,'EditMask');
    RegisterPropertyHelper(@TMaskEditFont_R,@TMaskEditFont_W,'Font');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomMaskEdit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomMaskEdit) do begin
    RegisterConstructor(@TCustomMaskEdit.Create, 'Create');
    RegisterVirtualMethod(@TCustomMaskEdit.ValidateEdit, 'ValidateEdit');
    RegisterMethod(@TCustomMaskEdit.Clear, 'Clear');
    RegisterPropertyHelper(@TCustomMaskEditIsMasked_R,nil,'IsMasked');
    RegisterPropertyHelper(@TCustomMaskEditEditText_R,@TCustomMaskEditEditText_W,'EditText');
    RegisterPropertyHelper(@TCustomMaskEditText_R,@TCustomMaskEditText_W,'Text');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_MaskEdit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EDBEditError) do
  RIRegister_TCustomMaskEdit(CL);
  RIRegister_TMaskEdit(CL);
end;

 
 
{ TPSImport_MaskEdit }
(*----------------------------------------------------------------------------*)
procedure TPSImport_MaskEdit.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_MaskEdit(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_MaskEdit.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_MaskEdit(ri);
  RIRegister_MaskEdit_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
