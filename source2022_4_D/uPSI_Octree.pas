unit uPSI_Octree;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Octree = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TOctree(CL: TPSPascalCompiler);
procedure SIRegister_Octree(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TOctree(CL: TPSRuntimeClassImporter);
procedure RIRegister_Octree(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   VectorGeometry
  ,VectorLists
  ,GeometryBB
  ,Octree
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Octree]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TOctree(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TOctree') do
  with CL.AddClassN(CL.FindClass('TObject'),'TOctree') do begin
    RegisterProperty('WorldMinExtent', 'TAffineFLTVector', iptrw);
    RegisterProperty('WorldMaxExtent', 'TAffineFLTVector', iptrw);
    RegisterProperty('RootNode', 'POctreeNode', iptrw);
    RegisterProperty('MaxOlevel', 'integer', iptrw);
    RegisterProperty('NodeCount', 'Integer', iptrw);
    RegisterProperty('TriCountMesh', 'Integer', iptrw);
    RegisterProperty('TriCountOctree', 'Integer', iptrw);
    RegisterProperty('MeshCount', 'Integer', iptrw);
    RegisterProperty('ResultArray', 'array of POctreeNode', iptrw);
    RegisterProperty('triangleFiler', 'TAffineVectorList', iptrw);
    RegisterMethod('Procedure WalkSphereToLeaf( Onode : POctreeNode; const p : TVector; radius : Single)');
    RegisterMethod('Procedure InitializeTree( const worldMinExtent, worldMaxExtent : TAffineVector; const triangles : TAffineVectorList; const treeDepth : Integer)');
    RegisterMethod('Procedure DisposeTree');
    RegisterMethod('Function RayCastIntersect( const rayStart, rayVector : TVector; intersectPoint : PVector; intersectNormal : PVector; triangleInfo : POctreeTriangleInfo) : Boolean');
    RegisterMethod('Function SphereSweepIntersect( const rayStart, rayVector : TVector; const velocity, radius : single; intersectPoint : PVector; intersectNormal : PVector) : Boolean');
    RegisterMethod('Function TriangleIntersect( const v1, v2, v3 : TAffineVector) : boolean');
    RegisterMethod('Function GetTrianglesFromNodesIntersectingAABB( const objAABB : TAABB) : TAffineVectorList');
    RegisterMethod('Function GetTrianglesFromNodesIntersectingCube( const objAABB : TAABB; const objToSelf, selfToObj : TMatrix) : TAffineVectorList');
    RegisterMethod('Function AABBIntersect( const AABB : TAABB; m1to2, m2to1 : TMatrix; triangles : TAffineVectorList) : boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Octree(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TProcInt', 'Procedure ( i : integer)');
  CL.AddTypeS('TProcAffineAffineAffine', 'Procedure ( v1, v2, v3 : TAffineFLTVector)');
  //CL.AddTypeS('POctreeTriangleInfo', '^TOctreeTriangleInfo // will not work');
  //CL.AddTypeS('POctreeNode', '^TOctreeNode // will not work');
  SIRegister_TOctree(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TOctreetriangleFiler_W(Self: TOctree; const T: TAffineVectorList);
Begin Self.triangleFiler := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreetriangleFiler_R(Self: TOctree; var T: TAffineVectorList);
Begin T := Self.triangleFiler; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeResultArray_W(Self: TOctree; const T: array of POctreeNode);
Begin //Self.ResultArray := T;
end;

(*----------------------------------------------------------------------------*)
procedure TOctreeResultArray_R(Self: TOctree; var T: array of POctreeNode);
Begin //T := Self.ResultArray;
end;

(*----------------------------------------------------------------------------*)
procedure TOctreeMeshCount_W(Self: TOctree; const T: Integer);
Begin Self.MeshCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeMeshCount_R(Self: TOctree; var T: Integer);
Begin T := Self.MeshCount; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeTriCountOctree_W(Self: TOctree; const T: Integer);
Begin Self.TriCountOctree := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeTriCountOctree_R(Self: TOctree; var T: Integer);
Begin T := Self.TriCountOctree; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeTriCountMesh_W(Self: TOctree; const T: Integer);
Begin Self.TriCountMesh := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeTriCountMesh_R(Self: TOctree; var T: Integer);
Begin T := Self.TriCountMesh; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeNodeCount_W(Self: TOctree; const T: Integer);
Begin Self.NodeCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeNodeCount_R(Self: TOctree; var T: Integer);
Begin T := Self.NodeCount; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeMaxOlevel_W(Self: TOctree; const T: integer);
Begin Self.MaxOlevel := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeMaxOlevel_R(Self: TOctree; var T: integer);
Begin T := Self.MaxOlevel; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeRootNode_W(Self: TOctree; const T: POctreeNode);
Begin Self.RootNode := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeRootNode_R(Self: TOctree; var T: POctreeNode);
Begin T := Self.RootNode; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeWorldMaxExtent_W(Self: TOctree; const T: TAffineFLTVector);
Begin Self.WorldMaxExtent := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeWorldMaxExtent_R(Self: TOctree; var T: TAffineFLTVector);
Begin T := Self.WorldMaxExtent; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeWorldMinExtent_W(Self: TOctree; const T: TAffineFLTVector);
Begin Self.WorldMinExtent := T; end;

(*----------------------------------------------------------------------------*)
procedure TOctreeWorldMinExtent_R(Self: TOctree; var T: TAffineFLTVector);
Begin T := Self.WorldMinExtent; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TOctree(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TOctree) do
  begin
    RegisterPropertyHelper(@TOctreeWorldMinExtent_R,@TOctreeWorldMinExtent_W,'WorldMinExtent');
    RegisterPropertyHelper(@TOctreeWorldMaxExtent_R,@TOctreeWorldMaxExtent_W,'WorldMaxExtent');
    RegisterPropertyHelper(@TOctreeRootNode_R,@TOctreeRootNode_W,'RootNode');
    RegisterPropertyHelper(@TOctreeMaxOlevel_R,@TOctreeMaxOlevel_W,'MaxOlevel');
    RegisterPropertyHelper(@TOctreeNodeCount_R,@TOctreeNodeCount_W,'NodeCount');
    RegisterPropertyHelper(@TOctreeTriCountMesh_R,@TOctreeTriCountMesh_W,'TriCountMesh');
    RegisterPropertyHelper(@TOctreeTriCountOctree_R,@TOctreeTriCountOctree_W,'TriCountOctree');
    RegisterPropertyHelper(@TOctreeMeshCount_R,@TOctreeMeshCount_W,'MeshCount');
    RegisterPropertyHelper(@TOctreeResultArray_R,@TOctreeResultArray_W,'ResultArray');
    RegisterPropertyHelper(@TOctreetriangleFiler_R,@TOctreetriangleFiler_W,'triangleFiler');
    RegisterMethod(@TOctree.WalkSphereToLeaf, 'WalkSphereToLeaf');
    RegisterMethod(@TOctree.InitializeTree, 'InitializeTree');
    RegisterMethod(@TOctree.DisposeTree, 'DisposeTree');
    RegisterMethod(@TOctree.RayCastIntersect, 'RayCastIntersect');
    RegisterMethod(@TOctree.SphereSweepIntersect, 'SphereSweepIntersect');
    RegisterMethod(@TOctree.TriangleIntersect, 'TriangleIntersect');
    RegisterMethod(@TOctree.GetTrianglesFromNodesIntersectingAABB, 'GetTrianglesFromNodesIntersectingAABB');
    RegisterMethod(@TOctree.GetTrianglesFromNodesIntersectingCube, 'GetTrianglesFromNodesIntersectingCube');
    RegisterMethod(@TOctree.AABBIntersect, 'AABBIntersect');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Octree(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TOctree(CL);
end;

 
 
{ TPSImport_Octree }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Octree.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Octree(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Octree.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Octree(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
