unit uPSI_JclUnicode;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JclUnicode = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TWideStringList(CL: TPSPascalCompiler);
procedure SIRegister_TWideStrings(CL: TPSPascalCompiler);
procedure SIRegister_TURESearch(CL: TPSPascalCompiler);
procedure SIRegister_TUTBMSearch(CL: TPSPascalCompiler);
procedure SIRegister_TSearchEngine(CL: TPSPascalCompiler);
procedure SIRegister_JclUnicode(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_JclUnicode_Routines(S: TPSExec);
procedure RIRegister_TWideStringList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWideStrings(CL: TPSRuntimeClassImporter);
procedure RIRegister_TURESearch(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUTBMSearch(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSearchEngine(CL: TPSRuntimeClassImporter);
procedure RIRegister_JclUnicode(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   JclUnitVersioning
  ,Windows
  ,JclBase
  ,JclUnicode
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JclUnicode]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TWideStringList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWideStrings', 'TWideStringList') do
  with CL.AddClassN(CL.FindClass('TWideStrings'),'TWideStringList') do
  begin
    RegisterMethod('Function Find( const S : WideString; var Index : Integer) : Boolean');
    RegisterMethod('Procedure Sort');
    RegisterProperty('Duplicates', 'TDuplicates', iptrw);
    RegisterProperty('Sorted', 'Boolean', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnChanging', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWideStrings(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TWideStrings') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TWideStrings') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function Add( const S : WideString) : Integer');
    RegisterMethod('Function AddObject( const S : WideString; AObject : TObject) : Integer');
    RegisterMethod('Procedure Append( const S : WideString)');
    RegisterMethod('Procedure AddStrings( Strings : TStrings);');
    RegisterMethod('Procedure AddStrings1( Strings : TWideStrings);');
    RegisterMethod('Procedure BeginUpdate');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterMethod('Procedure EndUpdate');
    RegisterMethod('Function Equals( Strings : TWideStrings) : Boolean');
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)');
    RegisterMethod('Function GetSeparatedText( Separators : WideString) : WideString');
    RegisterMethod('Function GetText : PWideChar');
    RegisterMethod('Function IndexOf( const S : WideString) : Integer');
    RegisterMethod('Function IndexOfName( const Name : WideString) : Integer');
    RegisterMethod('Function IndexOfObject( AObject : TObject) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; const S : WideString)');
    RegisterMethod('Procedure InsertObject( Index : Integer; const S : WideString; AObject : TObject)');
    RegisterMethod('Procedure LoadFromFile( const FileName : string)');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream)');
    RegisterMethod('Procedure Move( CurIndex, NewIndex : Integer)');
    RegisterMethod('Procedure SaveToFile( const FileName : string)');
    RegisterMethod('Procedure SaveToStream( Stream : TStream; WithBOM : Boolean)');
    RegisterMethod('Procedure SetText( const Value : WideString)');
    RegisterProperty('Capacity', 'Integer', iptrw);
    RegisterProperty('CommaText', 'WideString', iptrw);
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Language', 'LCID', iptrw);
    RegisterProperty('Names', 'WideString Integer', iptr);
    RegisterProperty('NormalizationForm', 'TNormalizationForm', iptrw);
    RegisterProperty('Objects', 'TObject Integer', iptrw);
    RegisterProperty('Values', 'WideString WideString', iptrw);
    RegisterProperty('Saved', 'Boolean', iptr);
    RegisterProperty('SaveUnicode', 'Boolean', iptrw);
    RegisterProperty('SaveFormat', 'TSaveFormat', iptrw);
    RegisterProperty('Strings', 'WideString Integer', iptrw);
    SetDefaultPropery('Strings');
    RegisterProperty('Text', 'WideString', iptrw);
    RegisterProperty('OnConfirmConversion', 'TConfirmConversionEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TURESearch(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSearchEngine', 'TURESearch') do
  with CL.AddClassN(CL.FindClass('TSearchEngine'),'TURESearch') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUTBMSearch(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSearchEngine', 'TUTBMSearch') do
  with CL.AddClassN(CL.FindClass('TSearchEngine'),'TUTBMSearch') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSearchEngine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TSearchEngine') do
  with CL.AddClassN(CL.FindClass('TObject'),'TSearchEngine') do
  begin
    RegisterMethod('Constructor Create( AOwner : TWideStrings)');
    RegisterMethod('Procedure AddResult( Start, Stop : Cardinal)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure ClearResults');
    RegisterMethod('Procedure DeleteResult( Index : Cardinal)');
    RegisterMethod('Procedure FindPrepare( const Pattern : WideString; Options : TSearchFlags);');
    RegisterMethod('Procedure FindPrepare1( Pattern : PWideChar; PatternLength : Cardinal; Options : TSearchFlags);');
    RegisterMethod('Function FindFirst( const Text : WideString; var Start, Stop : Cardinal) : Boolean;');
    RegisterMethod('Function FindFirst1( Text : PWideChar; TextLen : Cardinal; var Start, Stop : Cardinal) : Boolean;');
    RegisterMethod('Function FindAll( const Text : WideString) : Boolean;');
    RegisterMethod('Function FindAll1( Text : PWideChar; TextLen : Cardinal) : Boolean;');
    RegisterMethod('Procedure GetResult( Index : Cardinal; var Start, Stop : Integer)');
    RegisterProperty('Count', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JclUnicode(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('WideNull','Char').SetString( WideChar ( #0 ));
 CL.AddConstantN('WideTabulator','Char').SetString( WideChar ( #9 ));
 CL.AddConstantN('WideSpace','Char').SetString( WideChar ( #32 ));
 CL.AddConstantN('WideLF','Char').SetString( WideChar ( #10 ));
 CL.AddConstantN('WideLineFeed','Char').SetString( WideChar ( #10 ));
 CL.AddConstantN('WideVerticalTab','Char').SetString( WideChar ( #11 ));
 CL.AddConstantN('WideFormFeed','Char').SetString( WideChar ( #12 ));
 CL.AddConstantN('WideCR','Char').SetString( WideChar ( #13 ));
 CL.AddConstantN('WideCarriageReturn','Char').SetString( WideChar ( #13 ));
 CL.AddConstantN('WideCRLF','WideString').SetString( #13#10);
 CL.AddConstantN('WideLineSeparator','LongWord').SetUInt( WideChar ( $2028 ));
 CL.AddConstantN('WideParagraphSeparator','LongWord').SetUInt( WideChar ( $2029 ));
 CL.AddConstantN('BOM_LSB_FIRST','LongWord').SetUInt( WideChar ( $FEFF ));
 CL.AddConstantN('BOM_MSB_FIRST','LongWord').SetUInt( WideChar ( $FFFE ));
  CL.AddTypeS('TSaveFormat', '( sfUTF16LSB, sfUTF16MSB, sfUTF8, sfAnsi )');
 CL.AddConstantN('sfUnicodeLSB','').SetString( sfUTF16LSB);
 CL.AddConstantN('sfUnicodeMSB','').SetString( sfUTF16MSB);
  CL.AddTypeS('PUTF7', '^UTF7 // will not work');
  CL.AddTypeS('UTF7', 'Char');
  CL.AddTypeS('PUTF8', '^UTF8 // will not work');
  CL.AddTypeS('UTF8', 'Char');
  CL.AddTypeS('PUTF16', '^UTF16 // will not work');
  CL.AddTypeS('UTF16', 'WideChar');
  CL.AddTypeS('PUTF32', '^UTF32 // will not work');
  CL.AddTypeS('UTF32', 'Cardinal');
  CL.AddTypeS('PUCS4', '^UCS4 // will not work');
  CL.AddTypeS('UCS4', 'Cardinal');
  CL.AddTypeS('PUCS2', 'PWideChar');
  CL.AddTypeS('UCS2', 'WideChar');
  CL.AddTypeS('TUCS2Array', 'array of UCS2');
  CL.AddTypeS('TUCS4Array', 'array of UCS4');
  CL.AddTypeS('TCharacterCategory', '( ccLetterUppercase, ccLetterLowercase, cc'
   +'LetterTitlecase, ccMarkNonSpacing, ccMarkSpacingCombining, ccMarkEnclosing'
   +', ccNumberDecimalDigit, ccNumberLetter, ccNumberOther, ccSeparatorSpace, c'
   +'cSeparatorLine, ccSeparatorParagraph, ccOtherControl, ccOtherFormat, ccOth'
   +'erSurrogate, ccOtherPrivate, ccOtherUnassigned, ccLetterModifier, ccLetter'
   +'Other, ccPunctuationConnector, ccPunctuationDash, ccPunctuationOpen, ccPun'
   +'ctuationClose, ccPunctuationInitialQuote, ccPunctuationFinalQuote, ccPunct'
   +'uationOther, ccSymbolMath, ccSymbolCurrency, ccSymbolModifier, ccSymbolOth'
   +'er, ccLeftToRight, ccLeftToRightEmbedding, ccLeftToRightOverride, ccRightT'
   +'oLeft, ccRightToLeftArabic, ccRightToLeftEmbedding, ccRightToLeftoverride,'
   +' ccPopDirectionalFormat, ccEuropeanNumber, ccEuropeanNumberSeparator, ccEu'
   +'ropeanNumberTerminator, ccArabicNumber, ccCommonNumberSeparator, ccBoundar'
   +'yNeutral, ccSegmentSeparator, ccWhiteSpace, ccOtherNeutrals, ccComposed, c'
   +'cNonBreaking, ccSymmetric, ccHexDigit, ccQuotationMark, ccMirroring, ccSpa'
   +'ceOther, ccAssigned )');
  CL.AddTypeS('TCharacterCategories', 'set of TCharacterCategory');
  CL.AddTypeS('TNormalizationForm', '( nfNone, nfC, nfD, nfKC, nfKD )');
  CL.AddTypeS('TUnicodeBlockRange', 'record RangeStart : cardinal; RangeEnd : C'
   +'ardinal; end');
  CL.AddTypeS('TUnicodeBlock', '( ubUndefined, ubBasicLatin, ubLatin1Supplement'
   +', ubLatinExtendedA, ubLatinExtendedB, ubIPAExtensions, ubSpacingModifierLe'
   +'tters, ubCombiningDiacriticalMarks, ubGreekandCoptic, ubCyrillic, ubCyrill'
   +'icSupplement, ubArmenian, ubHebrew, ubArabic, ubSyriac, ubArabicSupplement'
   +', ubThaana, ubNKo, ubDevanagari, ubBengali, ubGurmukhi, ubGujarati, ubOriy'
   +'a, ubTamil, ubTelugu, ubKannada, ubMalayalam, ubSinhala, ubThai, ubLao, ub'
   +'Tibetan, ubMyanmar, ubGeorgian, ubHangulJamo, ubEthiopic, ubEthiopicSupple'
   +'ment, ubCherokee, ubUnifiedCanadianAboriginalSyllabics, ubOgham, ubRunic, '
   +'ubTagalog, ubHanunoo, ubBuhid, ubTagbanwa, ubKhmer, ubMongolian, ubLimbu, '
   +'ubTaiLe, ubNewTaiLue, ubKhmerSymbols, ubBuginese, ubBalinese, ubPhoneticEx'
   +'tensions, ubPhoneticExtensionsSupplement, ubCombiningDiacriticalMarksSuppl'
   +'ement, ubLatinExtendedAdditional, ubGreekExtended, ubGeneralPunctuation, u'
   +'bSuperscriptsandSubscripts, ubCurrencySymbols, ubCombiningDiacriticalMarks'
   +'forSymbols, ubLetterlikeSymbols, ubNumberForms, ubArrows, ubMathematicalOp'
   +'erators, ubMiscellaneousTechnical, ubControlPictures, ubOpticalCharacterRe'
   +'cognition, ubEnclosedAlphanumerics, ubBoxDrawing, ubBlockElements, ubGeome'
   +'tricShapes, ubMiscellaneousSymbols, ubDingbats, ubMiscellaneousMathematica'
   +'lSymbolsA, ubSupplementalArrowsA, ubBraillePatterns, ubSupplementalArrowsB'
   +', ubMiscellaneousMathematicalSymbolsB, ubSupplementalMathematicalOperators'
   +', ubMiscellaneousSymbolsandArrows, ubGlagolitic, ubLatinExtendedC, ubCopti'
   +'c, ubGeorgianSupplement, ubTifinagh, ubEthiopicExtended, ubSupplementalPun'
   +'ctuation, ubCJKRadicalsSupplement, ubKangxiRadicals, ubIdeographicDescript'
   +'ionCharacters, ubCJKSymbolsandPunctuation, ubHiragana, ubKatakana, ubBopom'
   +'ofo, ubHangulCompatibilityJamo, ubKanbun, ubBopomofoExtended, ubCJKStrokes'
   +', ubKatakanaPhoneticExtensions, ubEnclosedCJKLettersandMonths, ubCJKCompat'
   +'ibility, ubCJKUnifiedIdeographsExtensionA, ubYijingHexagramSymbols, ubCJKU'
   +'nifiedIdeographs, ubYiSyllables, ubYiRadicals, ubModifierToneLetters, ubLa'
   +'tinExtendedD, ubSylotiNagri, ubPhagsPa, ubHangulSyllables, ubHighSurrogate'
   +'s, ubHighPrivateUseSurrogates, ubLowSurrogates, ubPrivateUseArea, ubCJKCom'
   +'patibilityIdeographs, ubAlphabeticPresentationForms, ubArabicPresentationF'
   +'ormsA, ubVariationSelectors, ubVerticalForms, ubCombiningHalfMarks, ubCJKC'
   +'ompatibilityForms, ubSmallFormVariants, ubArabicPresentationFormsB, ubHalf'
   +'widthandFullwidthForms, ubSpecials, ubLinearBSyllabary, ubLinearBIdeograms'
   +', ubAegeanNumbers, ubAncientGreekNumbers, ubOldItalic, ubGothic, ubUgariti'
   +'c, ubOldPersian, ubDeseret, ubShavian, ubOsmanya, ubCypriotSyllabary, ubPh'
   +'oenician, ubKharoshthi, ubCuneiform, ubCuneiformNumbersAndPunctuation, ubB'
   +'yzantineMusicalSymbols, ubMusicalSymbols, ubAncientGreekMusicalNotation, u'
   +'bTaiXuanJingSymbols, ubCountingRodNumerals, ubMathematicalAlphanumericSymb'
   +'ols, ubCJKUnifiedIdeographsExtensionB, ubCJKCompatibilityIdeographsSupplem'
   +'ent, ubTags, ubVariationSelectorsSupplement, ubSupplementaryPrivateUseArea'
   +'A, ubSupplementaryPrivateUseAreaB )');
  CL.AddTypeS('TUnicodeBlockData', 'record Range : TUnicodeBlockRange; Name : s'
   +'tring; end');
  CL.AddTypeS('PUnicodeBlockData', '^TUnicodeBlockData // will not work');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWideStrings');
  CL.AddTypeS('TSearchFlag', '( sfCaseSensitive, sfIgnoreNonSpacing, sfSpaceCom'
   +'press, sfWholeWordOnly )');
  CL.AddTypeS('TSearchFlags', 'set of TSearchFlag');
  SIRegister_TSearchEngine(CL);
  CL.AddTypeS('PUTBMChar', '^TUTBMChar // will not work');
  CL.AddTypeS('TUTBMChar', 'record LoCase : UCS4; UpCase : UCS4; TitleCase : UC'
   +'S4; end');
  CL.AddTypeS('PUTBMSkip', '^TUTBMSkip // will not work');
  CL.AddTypeS('TUTBMSkip', 'record BMChar : PUTBMChar; SkipValues : Integer; en'
   +'d');
  SIRegister_TUTBMSearch(CL);
  CL.AddTypeS('PUcRange', '^TUcRange // will not work');
  CL.AddTypeS('TUcRange', 'record MinCode : UCS4; MaxCode : UCS4; end');
  CL.AddTypeS('TUcCClass', 'record Ranges : array of TUcRange; RangesUsed : Int'
   +'eger; end');
  CL.AddTypeS('TUcSymbol', 'record aChr : UCS4; CCL : TUcCClass; end');
  CL.AddTypeS('TUcElement', 'record OnStack : Boolean; AType : Cardinal; LHS : '
   +'Cardinal; RHS : Cardinal; end');
  CL.AddTypeS('PUcStateList', '^TUcStateList // will not work');
  CL.AddTypeS('TUcStateList', 'record List : array of Cardinal; ListUsed : Inte'
   +'ger; end');
  CL.AddTypeS('PUcSymbolTableEntry', '^TUcSymbolTableEntry // will not work');
  CL.AddTypeS('TUcSymbolTableEntry', 'record ID : Cardinal; AType : Cardinal; M'
   +'ods : Cardinal; Categories : TCharacterCategories; Symbol : TUcSymbol; Sta'
   +'tes : TUcStateList; end');
  CL.AddTypeS('PUcState', '^TUcState // will not work');
  CL.AddTypeS('TUcState', 'record ID : Cardinal; Accepting : Boolean; StateList'
   +' : TUcStateList; Transitions : array of TUcElement; TransitionsUsed : Inte'
   +'ger; end');
  CL.AddTypeS('TUcStateTable', 'record States : array of TUcState; StatesUsed :'
   +' Integer; end');
  CL.AddTypeS('TUcEquivalent', 'record Left : Cardinal; Right : Cardinal; end');
  CL.AddTypeS('TUcExpressionList', 'record Expressions : array of TUcElement; E'
   +'xpressionsUsed : Integer; end');
  CL.AddTypeS('TUcSymbolTable', 'record Symbols : array of TUcSymbolTableEntry;'
   +' SymbolsUsed : Integer; end');
  CL.AddTypeS('TUcEquivalentList', 'record Equivalents : array of TUcEquivalent'
   +'; EquivalentsUsed : Integer; end');
  CL.AddTypeS('PUREBuffer', '^TUREBuffer // will not work');
  CL.AddTypeS('TUREBuffer', 'record Reducing : Boolean; Error : Integer; Flags '
   +': Cardinal; Stack : TUcStateList; SymbolTable : TUcSymbolTable; Expression'
   +'List : TUcExpressionList; States : TUcStateTable; EquivalentList : TUcEqui'
   +'valentList; end');
  CL.AddTypeS('TUcTransition', 'record Symbol : Cardinal; NextState : Cardinal;'
   +' end');
  CL.AddTypeS('PDFAState', '^TDFAState // will not work');
  CL.AddTypeS('TDFAState', 'record Accepting : Boolean; NumberTransitions : Int'
   +'eger; StartTransition : Integer; end');
  CL.AddTypeS('TDFAStates', 'record States : array of TDFAState; StatesUsed : I'
   +'nteger; end');
  CL.AddTypeS('TUcTransitions', 'record Transitions : array of TUcTransition; T'
   +'ransitionsUsed : Integer; end');
  CL.AddTypeS('TDFA', 'record Flags : Cardinal; SymbolTable : TUcSymbolTable; S'
   +'tateList : TDFAStates; TransitionList : TUcTransitions; end');
  SIRegister_TURESearch(CL);
  CL.AddTypeS('TConfirmConversionEvent', 'Procedure ( Sender : TWideStrings; va'
   +'r Allowed : Boolean)');
  SIRegister_TWideStrings(CL);
  CL.AddTypeS('TDynWideCharArray', 'array of WideChar');
  CL.AddTypeS('TWideStringItem', 'record FString : PWideChar; FString : WideStr'
   +'ing; FObject : TObject; end');
  CL.AddTypeS('TWideStringItemList', 'array of TWideStringItem');
  SIRegister_TWideStringList(CL);
  CL.AddTypeS('TUcNumber', 'record Numerator : Integer; Denominator : Integer; '
   +'end');
 CL.AddConstantN('ReplacementCharacter','UCS4').SetString( $0000FFFD);
 CL.AddConstantN('MaximumUCS2','UCS4').SetString( $0000FFFF);
 CL.AddConstantN('MaximumUTF16','UCS4').SetString( $0010FFFF);
 CL.AddConstantN('MaximumUCS4','UCS4').SetString( $7FFFFFFF);
 CL.AddConstantN('SurrogateHighStart','LongWord').SetUInt( UCS4 ( $D800 ));
 CL.AddConstantN('SurrogateHighEnd','LongWord').SetUInt( UCS4 ( $DBFF ));
 CL.AddConstantN('SurrogateLowStart','LongWord').SetUInt( UCS4 ( $DC00 ));
 CL.AddConstantN('SurrogateLowEnd','LongWord').SetUInt( UCS4 ( $DFFF ));
 CL.AddDelphiFunction('Function StrLenW( Str : PWideChar) : Cardinal');
 CL.AddDelphiFunction('Function StrEndW( Str : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function StrMoveW( Dest, Source : PWideChar; Count : Cardinal) : PWideChar');
 CL.AddDelphiFunction('Function StrCopyW( Dest, Source : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function StrECopyW( Dest, Source : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function StrLCopyW( Dest, Source : PWideChar; MaxLen : Cardinal) : PWideChar');
 CL.AddDelphiFunction('Function StrPCopyWW( Dest : PWideChar; const Source : WideString) : PWideChar;');
 CL.AddDelphiFunction('Function StrPCopyW( Dest : PWideChar; const Source : string) : PWideChar');
 CL.AddDelphiFunction('Function StrPLCopyWW( Dest : PWideChar; const Source : WideString; MaxLen : Cardinal) : PWideChar');
 CL.AddDelphiFunction('Function StrPLCopyW( Dest : PWideChar; const Source : string; MaxLen : Cardinal) : PWideChar');
 CL.AddDelphiFunction('Function StrCatW( Dest : PWideChar; const Source : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function StrLCatW( Dest, Source : PWideChar; MaxLen : Cardinal) : PWideChar');
 CL.AddDelphiFunction('Function StrCompW( const Str1, Str2 : PWideChar) : Integer');
 CL.AddDelphiFunction('Function StrICompW( const Str1, Str2 : PWideChar) : Integer');
 CL.AddDelphiFunction('Function StrLCompW( const Str1, Str2 : PWideChar; MaxLen : Cardinal) : Integer');
 CL.AddDelphiFunction('Function StrLICompW( const Str1, Str2 : PWideChar; MaxLen : Cardinal) : Integer');
 CL.AddDelphiFunction('Function StrNScanW( const Str1, Str2 : PWideChar) : Integer');
 CL.AddDelphiFunction('Function StrRNScanW( const Str1, Str2 : PWideChar) : Integer');
 CL.AddDelphiFunction('Function StrScanW( Str : PWideChar; aChr : WideChar) : PWideChar;');
 CL.AddDelphiFunction('Function StrScanW1( Str : PWideChar; aChr : WideChar; StrLen : Cardinal) : PWideChar;');
 CL.AddDelphiFunction('Function StrRScanW( Str : PWideChar; aChr : WideChar) : PWideChar');
 CL.AddDelphiFunction('Function StrPosW( Str, SubStr : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function StrAllocW( WideSize : Cardinal) : PWideChar');
 CL.AddDelphiFunction('Function StrBufSizeW( const Str : PWideChar) : Cardinal');
 CL.AddDelphiFunction('Function StrNewW( const Str : PWideChar) : PWideChar;');
 CL.AddDelphiFunction('Function StrNewW1( const Str : WideString) : PWideChar;');
 CL.AddDelphiFunction('Procedure StrDisposeW( Str : PWideChar)');
 CL.AddDelphiFunction('Procedure StrDisposeAndNilW( var Str : PWideChar)');
 CL.AddDelphiFunction('Procedure StrSwapByteOrder( Str : PWideChar)');
 CL.AddDelphiFunction('Function WideAdjustLineBreaks( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideCharPos( const S : WideString; const Ch : WideChar; const Index : Integer) : Integer');
 CL.AddDelphiFunction('Function WideCompose( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideDecompose( const S : WideString; Compatible : Boolean) : WideString');
 CL.AddDelphiFunction('Function WideExtractQuotedStr( var Src : PWideChar; Quote : WideChar) : WideString');
 CL.AddDelphiFunction('Function WideQuotedStr( const S : WideString; Quote : WideChar) : WideString');
 CL.AddDelphiFunction('Function WideStringOfChar( C : WideChar; Count : Cardinal) : WideString');
 CL.AddDelphiFunction('Function WideCaseFolding( C : WideChar) : WideString;');
 CL.AddDelphiFunction('Function WideCaseFolding1( const S : WideString) : WideString;');
 CL.AddDelphiFunction('Function WideLowerCase( C : WideChar) : WideString;');
 CL.AddDelphiFunction('Function WideLowerCase1( const S : WideString) : WideString;');
 CL.AddDelphiFunction('Function WideNormalize( const S : WideString; Form : TNormalizationForm) : WideString');
 CL.AddDelphiFunction('Function WideSameText( const Str1, Str2 : WideString) : Boolean');
 CL.AddDelphiFunction('Function WideTitleCase( C : WideChar) : WideString;');
 CL.AddDelphiFunction('Function WideTitleCase1( const S : WideString) : WideString;');
 CL.AddDelphiFunction('Function WideTrim( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideTrimLeft( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideTrimRight( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideUpperCase( C : WideChar) : WideString;');
 CL.AddDelphiFunction('Function WideUpperCase1( const S : WideString) : WideString;');
 CL.AddDelphiFunction('Function UnicodeNumberLookup( Code : UCS4; var Number : TUcNumber) : Boolean');
 CL.AddDelphiFunction('Function UnicodeCompose( const Codes : array of UCS4; var Composite : UCS4) : Integer');
 CL.AddDelphiFunction('Function UnicodeCaseFold( Code : UCS4) : TUCS4Array');
 CL.AddDelphiFunction('Function UnicodeToUpper( Code : UCS4) : TUCS4Array');
 CL.AddDelphiFunction('Function UnicodeToLower( Code : UCS4) : TUCS4Array');
 CL.AddDelphiFunction('Function UnicodeToTitle( Code : UCS4) : TUCS4Array');
 CL.AddDelphiFunction('Function UnicodeIsAlpha( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsDigit( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsAlphaNum( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsCased( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsControl( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsSpace( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsWhiteSpace( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsBlank( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsPunctuation( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsGraph( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsPrintable( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsUpper( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsLower( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsTitle( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsHexDigit( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsIsoControl( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsFormatControl( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsSymbol( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsNumber( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsNonSpacing( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsOpenPunctuation( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsClosePunctuation( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsInitialPunctuation( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsFinalPunctuation( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsComposed( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsQuotationMark( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsSymmetric( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsMirroring( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsNonBreaking( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsRightToLeft( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsLeftToRight( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsStrong( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsWeak( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsNeutral( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsSeparator( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsMark( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsModifier( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsLetterNumber( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsConnectionPunctuation( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsDash( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsMath( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsCurrency( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsModifierSymbol( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsNonSpacingMark( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsSpacingMark( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsEnclosing( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsPrivate( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsSurrogate( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsLineSeparator( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsParagraphSeparator( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsIdentifierStart( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsIdentifierPart( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsDefined( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsUndefined( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsHan( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UnicodeIsHangul( C : UCS4) : Boolean');
 CL.AddDelphiFunction('Function CharSetFromLocale( Language : LCID) : Byte');
 CL.AddDelphiFunction('Function GetCharSetFromLocale( Language : LCID; out FontCharSet : Byte) : Boolean');
 CL.AddDelphiFunction('Function CodePageFromLocale( Language : LCID) : Integer');
 CL.AddDelphiFunction('Function CodeBlockName( const CB : TUnicodeBlock) : string');
 CL.AddDelphiFunction('Function CodeBlockRange( const CB : TUnicodeBlock) : TUnicodeBlockRange');
 CL.AddDelphiFunction('Function CodeBlockFromChar( const C : UCS4) : TUnicodeBlock');
 CL.AddDelphiFunction('Function KeyboardCodePage : Word');
 CL.AddDelphiFunction('Function KeyUnicode( C : Char) : WideChar');
 CL.AddDelphiFunction('Function StringToWideStringEx( const S : string; CodePage : Word) : WideString');
 CL.AddDelphiFunction('Function TranslateString( const S : string; CP1, CP2 : Word) : string');
 CL.AddDelphiFunction('Function WideStringToStringEx( const WS : WideString; CodePage : Word) : string');
 CL.AddDelphiFunction('Function UTF8GetNextChar( const S : AnsiString; var StrPos : Integer) : UCS4');
 CL.AddDelphiFunction('Function UTF8SkipChars( const S : AnsiString; var StrPos : Integer; var NbSeq : Integer) : Boolean');
 CL.AddDelphiFunction('Function UTF8SetNextChar( var S : AnsiString; var StrPos : Integer; Ch : UCS4) : Boolean');
 CL.AddDelphiFunction('Function UTF16GetNextChar( const S : WideString; var StrPos : Integer) : UCS4');
 CL.AddDelphiFunction('Function UTF16GetPreviousChar( const S : WideString; var StrPos : Integer) : UCS4');
 CL.AddDelphiFunction('Function UTF16SkipChars( const S : WideString; var StrPos : Integer; var NbSeq : Integer) : Boolean');
 CL.AddDelphiFunction('Function UTF16SetNextChar( var S : WideString; var StrPos : Integer; Ch : UCS4) : Boolean');
 CL.AddDelphiFunction('Procedure ExpandANSIString( const Source : PChar; Target : PWideChar; Count : Cardinal)');
 CL.AddDelphiFunction('Function WideStringToUTF8( const S : WideString) : AnsiString');
 CL.AddDelphiFunction('Function UTF8ToWideString( const S : AnsiString) : WideString');
 CL.AddDelphiFunction('Function WideStringToUTF16( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function UTF16ToWideString( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideStringToUCS4( const S : WideString) : TUCS4Array');
 CL.AddDelphiFunction('Function UCS4ToWideString( const S : TUCS4Array) : WideString');
 CL.AddDelphiFunction('Function UTF8ToUTF16( const S : AnsiString) : WideString');
 CL.AddDelphiFunction('Function UTF16ToUTF8( const S : WideString) : AnsiString');
 CL.AddDelphiFunction('Function UTF8ToUCS4( const S : AnsiString) : TUCS4Array');
 CL.AddDelphiFunction('Function UCS4ToUTF8( const S : TUCS4Array) : AnsiString');
 CL.AddDelphiFunction('Function UTF16ToUCS4( const S : WideString) : TUCS4Array');
 CL.AddDelphiFunction('Function UCS4ToUTF16( const S : TUCS4Array) : WideString');
 CL.AddDelphiFunction('Function UTF8CharCount( const S : AnsiString) : Integer');
 CL.AddDelphiFunction('Function UTF16CharCount( const S : WideString) : Integer');
 CL.AddDelphiFunction('Function UCS2CharCount( const S : WideString) : Integer');
 CL.AddDelphiFunction('Function UCS4CharCount( const S : TUCS4Array) : Integer');
 CL.AddDelphiFunction('Function GetUCS4CharAt( const UTF8Str : AnsiString; Index : Integer; out Value : UCS4) : Boolean;');
 CL.AddDelphiFunction('Function GetUCS4CharAt1( const WideStr : WideString; Index : Integer; out Value : UCS4; IsUTF16 : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function GetUCS4CharAt( const UCS4Str : TUCS4Array; Index : Integer; out Value : UCS4) : Boolean;');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclUnicodeError');
 CL.AddDelphiFunction('Procedure LoadCharacterCategories');
 CL.AddDelphiFunction('Procedure LoadCaseMappingData');
 CL.AddDelphiFunction('Procedure LoadDecompositionData');
 CL.AddDelphiFunction('Procedure LoadCombiningClassData');
 CL.AddDelphiFunction('Procedure LoadNumberData');
 CL.AddDelphiFunction('Procedure LoadCompositionData');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function GetUCS4CharAt_P( const UCS4Str : TUCS4Array; Index : Integer; out Value : UCS4) : Boolean;
Begin Result := JclUnicode.GetUCS4CharAt(UCS4Str, Index, Value); END;

(*----------------------------------------------------------------------------*)
Function GetUCS4CharAt1_P( const WideStr : WideString; Index : Integer; out Value : UCS4; IsUTF16 : Boolean) : Boolean;
Begin Result := JclUnicode.GetUCS4CharAt(WideStr, Index, Value, IsUTF16); END;

(*----------------------------------------------------------------------------*)
Function GetUCS4CharAt_P( const UTF8Str : AnsiString; Index : Integer; out Value : UCS4) : Boolean;
Begin Result := JclUnicode.GetUCS4CharAt(UTF8Str, Index, Value); END;

(*----------------------------------------------------------------------------*)
Function WideUpperCase1_P( const S : WideString) : WideString;
Begin Result := JclUnicode.WideUpperCase(S); END;

(*----------------------------------------------------------------------------*)
Function WideUpperCase_P( C : WideChar) : WideString;
Begin Result := JclUnicode.WideUpperCase(C); END;

(*----------------------------------------------------------------------------*)
Function WideTitleCase1_P( const S : WideString) : WideString;
Begin Result := JclUnicode.WideTitleCase(S); END;

(*----------------------------------------------------------------------------*)
Function WideTitleCase_P( C : WideChar) : WideString;
Begin Result := JclUnicode.WideTitleCase(C); END;

(*----------------------------------------------------------------------------*)
Function WideLowerCase1_P( const S : WideString) : WideString;
Begin Result := JclUnicode.WideLowerCase(S); END;

(*----------------------------------------------------------------------------*)
Function WideLowerCase_P( C : WideChar) : WideString;
Begin Result := JclUnicode.WideLowerCase(C); END;

(*----------------------------------------------------------------------------*)
Function WideCaseFolding1_P( const S : WideString) : WideString;
Begin Result := JclUnicode.WideCaseFolding(S); END;

(*----------------------------------------------------------------------------*)
Function WideCaseFolding_P( C : WideChar) : WideString;
Begin Result := JclUnicode.WideCaseFolding(C); END;

(*----------------------------------------------------------------------------*)
Function StrNewW1_P( const Str : WideString) : PWideChar;
Begin Result := JclUnicode.StrNewW(Str); END;

(*----------------------------------------------------------------------------*)
Function StrNewW_P( const Str : PWideChar) : PWideChar;
Begin Result := JclUnicode.StrNewW(Str); END;

(*----------------------------------------------------------------------------*)
Function StrScanW1_P( Str : PWideChar; aChr : WideChar; StrLen : Cardinal) : PWideChar;
Begin Result := JclUnicode.StrScanW(Str, aChr, StrLen); END;

(*----------------------------------------------------------------------------*)
Function StrScanW_P( Str : PWideChar; aChr : WideChar) : PWideChar;
Begin Result := JclUnicode.StrScanW(Str, aChr); END;

(*----------------------------------------------------------------------------*)
Function StrPCopyWW_P( Dest : PWideChar; const Source : WideString) : PWideChar;
Begin Result := JclUnicode.StrPCopyWW(Dest, Source); END;

(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChanging_W(Self: TWideStringList; const T: TNotifyEvent);
begin Self.OnChanging := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChanging_R(Self: TWideStringList; var T: TNotifyEvent);
begin T := Self.OnChanging; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChange_W(Self: TWideStringList; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChange_R(Self: TWideStringList; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListSorted_W(Self: TWideStringList; const T: Boolean);
begin Self.Sorted := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListSorted_R(Self: TWideStringList; var T: Boolean);
begin T := Self.Sorted; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListDuplicates_W(Self: TWideStringList; const T: TDuplicates);
begin Self.Duplicates := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListDuplicates_R(Self: TWideStringList; var T: TDuplicates);
begin T := Self.Duplicates; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsOnConfirmConversion_W(Self: TWideStrings; const T: TConfirmConversionEvent);
begin Self.OnConfirmConversion := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsOnConfirmConversion_R(Self: TWideStrings; var T: TConfirmConversionEvent);
begin T := Self.OnConfirmConversion; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsText_W(Self: TWideStrings; const T: WideString);
begin Self.Text := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsText_R(Self: TWideStrings; var T: WideString);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStrings_W(Self: TWideStrings; const T: WideString; const t1: Integer);
begin Self.Strings[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStrings_R(Self: TWideStrings; var T: WideString; const t1: Integer);
begin T := Self.Strings[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsSaveFormat_W(Self: TWideStrings; const T: TSaveFormat);
begin Self.SaveFormat := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsSaveFormat_R(Self: TWideStrings; var T: TSaveFormat);
begin T := Self.SaveFormat; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsSaveUnicode_W(Self: TWideStrings; const T: Boolean);
begin Self.SaveUnicode := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsSaveUnicode_R(Self: TWideStrings; var T: Boolean);
begin T := Self.SaveUnicode; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsSaved_R(Self: TWideStrings; var T: Boolean);
begin T := Self.Saved; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsValues_W(Self: TWideStrings; const T: WideString; const t1: WideString);
begin Self.Values[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsValues_R(Self: TWideStrings; var T: WideString; const t1: WideString);
begin T := Self.Values[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsObjects_W(Self: TWideStrings; const T: TObject; const t1: Integer);
begin Self.Objects[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsObjects_R(Self: TWideStrings; var T: TObject; const t1: Integer);
begin T := Self.Objects[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsNormalizationForm_W(Self: TWideStrings; const T: TNormalizationForm);
begin Self.NormalizationForm := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsNormalizationForm_R(Self: TWideStrings; var T: TNormalizationForm);
begin T := Self.NormalizationForm; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsNames_R(Self: TWideStrings; var T: WideString; const t1: Integer);
begin T := Self.Names[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsLanguage_W(Self: TWideStrings; const T: LCID);
begin Self.Language := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsLanguage_R(Self: TWideStrings; var T: LCID);
begin T := Self.Language; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCount_R(Self: TWideStrings; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCommaText_W(Self: TWideStrings; const T: WideString);
begin Self.CommaText := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCommaText_R(Self: TWideStrings; var T: WideString);
begin T := Self.CommaText; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCapacity_W(Self: TWideStrings; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCapacity_R(Self: TWideStrings; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
Procedure TWideStringsAddStrings1_P(Self: TWideStrings;  Strings : TWideStrings);
Begin Self.AddStrings(Strings); END;

(*----------------------------------------------------------------------------*)
Procedure TWideStringsAddStrings_P(Self: TWideStrings;  Strings : TStrings);
Begin Self.AddStrings(Strings); END;

(*----------------------------------------------------------------------------*)
Function TURESearchFindAll1_P(Self: TURESearch;  Text : PWideChar; TextLen : Cardinal) : Boolean;
Begin Result := Self.FindAll(Text, TextLen); END;

(*----------------------------------------------------------------------------*)
Function TURESearchFindAll_P(Self: TURESearch;  const Text : WideString) : Boolean;
Begin Result := Self.FindAll(Text); END;

(*----------------------------------------------------------------------------*)
Function TURESearchFindFirst1_P(Self: TURESearch;  Text : PWideChar; TextLen : Cardinal; var Start, Stop : Cardinal) : Boolean;
Begin Result := Self.FindFirst(Text, TextLen, Start, Stop); END;

(*----------------------------------------------------------------------------*)
Function TURESearchFindFirst_P(Self: TURESearch;  const Text : WideString; var Start, Stop : Cardinal) : Boolean;
Begin Result := Self.FindFirst(Text, Start, Stop); END;

(*----------------------------------------------------------------------------*)
Procedure TURESearchFindPrepare1_P(Self: TURESearch;  Pattern : PWideChar; PatternLength : Cardinal; Options : TSearchFlags);
Begin Self.FindPrepare(Pattern, PatternLength, Options); END;

(*----------------------------------------------------------------------------*)
Procedure TURESearchFindPrepare_P(Self: TURESearch;  const Pattern : WideString; Options : TSearchFlags);
Begin Self.FindPrepare(Pattern, Options); END;

(*----------------------------------------------------------------------------*)
Function TUTBMSearchFindAll1_P(Self: TUTBMSearch;  Text : PWideChar; TextLen : Cardinal) : Boolean;
Begin Result := Self.FindAll(Text, TextLen); END;

(*----------------------------------------------------------------------------*)
Function TUTBMSearchFindAll_P(Self: TUTBMSearch;  const Text : WideString) : Boolean;
Begin Result := Self.FindAll(Text); END;

(*----------------------------------------------------------------------------*)
Function TUTBMSearchFindFirst1_P(Self: TUTBMSearch;  Text : PWideChar; TextLen : Cardinal; var Start, Stop : Cardinal) : Boolean;
Begin Result := Self.FindFirst(Text, TextLen, Start, Stop); END;

(*----------------------------------------------------------------------------*)
Function TUTBMSearchFindFirst_P(Self: TUTBMSearch;  const Text : WideString; var Start, Stop : Cardinal) : Boolean;
Begin Result := Self.FindFirst(Text, Start, Stop); END;

(*----------------------------------------------------------------------------*)
Procedure TUTBMSearchFindPrepare1_P(Self: TUTBMSearch;  Pattern : PWideChar; PatternLength : Cardinal; Options : TSearchFlags);
Begin Self.FindPrepare(Pattern, PatternLength, Options); END;

(*----------------------------------------------------------------------------*)
Procedure TUTBMSearchFindPrepare_P(Self: TUTBMSearch;  const Pattern : WideString; Options : TSearchFlags);
Begin Self.FindPrepare(Pattern, Options); END;

(*----------------------------------------------------------------------------*)
procedure TSearchEngineCount_R(Self: TSearchEngine; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
Function TSearchEngineFindAll1_P(Self: TSearchEngine;  Text : PWideChar; TextLen : Cardinal) : Boolean;
Begin Result := Self.FindAll(Text, TextLen); END;

(*----------------------------------------------------------------------------*)
Function TSearchEngineFindAll_P(Self: TSearchEngine;  const Text : WideString) : Boolean;
Begin Result := Self.FindAll(Text); END;

(*----------------------------------------------------------------------------*)
Function TSearchEngineFindFirst1_P(Self: TSearchEngine;  Text : PWideChar; TextLen : Cardinal; var Start, Stop : Cardinal) : Boolean;
Begin Result := Self.FindFirst(Text, TextLen, Start, Stop); END;

(*----------------------------------------------------------------------------*)
Function TSearchEngineFindFirst_P(Self: TSearchEngine;  const Text : WideString; var Start, Stop : Cardinal) : Boolean;
Begin Result := Self.FindFirst(Text, Start, Stop); END;

(*----------------------------------------------------------------------------*)
Procedure TSearchEngineFindPrepare1_P(Self: TSearchEngine;  Pattern : PWideChar; PatternLength : Cardinal; Options : TSearchFlags);
Begin Self.FindPrepare(Pattern, PatternLength, Options); END;

(*----------------------------------------------------------------------------*)
Procedure TSearchEngineFindPrepare_P(Self: TSearchEngine;  const Pattern : WideString; Options : TSearchFlags);
Begin Self.FindPrepare(Pattern, Options); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JclUnicode_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@StrLenW, 'StrLenW', cdRegister);
 S.RegisterDelphiFunction(@StrEndW, 'StrEndW', cdRegister);
 S.RegisterDelphiFunction(@StrMoveW, 'StrMoveW', cdRegister);
 S.RegisterDelphiFunction(@StrCopyW, 'StrCopyW', cdRegister);
 S.RegisterDelphiFunction(@StrECopyW, 'StrECopyW', cdRegister);
 S.RegisterDelphiFunction(@StrLCopyW, 'StrLCopyW', cdRegister);
 S.RegisterDelphiFunction(@StrPCopyWW, 'StrPCopyWW', cdRegister);
 S.RegisterDelphiFunction(@StrPCopyW, 'StrPCopyW', cdRegister);
 S.RegisterDelphiFunction(@StrPLCopyWW, 'StrPLCopyWW', cdRegister);
 S.RegisterDelphiFunction(@StrPLCopyW, 'StrPLCopyW', cdRegister);
 S.RegisterDelphiFunction(@StrCatW, 'StrCatW', cdRegister);
 S.RegisterDelphiFunction(@StrLCatW, 'StrLCatW', cdRegister);
 S.RegisterDelphiFunction(@StrCompW, 'StrCompW', cdRegister);
 S.RegisterDelphiFunction(@StrICompW, 'StrICompW', cdRegister);
 S.RegisterDelphiFunction(@StrLCompW, 'StrLCompW', cdRegister);
 S.RegisterDelphiFunction(@StrLICompW, 'StrLICompW', cdRegister);
 S.RegisterDelphiFunction(@StrNScanW, 'StrNScanW', cdRegister);
 S.RegisterDelphiFunction(@StrRNScanW, 'StrRNScanW', cdRegister);
 S.RegisterDelphiFunction(@StrScanW, 'StrScanW', cdRegister);
 S.RegisterDelphiFunction(@StrScanW1, 'StrScanW1', cdRegister);
 S.RegisterDelphiFunction(@StrRScanW, 'StrRScanW', cdRegister);
 S.RegisterDelphiFunction(@StrPosW, 'StrPosW', cdRegister);
 S.RegisterDelphiFunction(@StrAllocW, 'StrAllocW', cdRegister);
 S.RegisterDelphiFunction(@StrBufSizeW, 'StrBufSizeW', cdRegister);
 S.RegisterDelphiFunction(@StrNewW, 'StrNewW', cdRegister);
 S.RegisterDelphiFunction(@StrNewW1, 'StrNewW1', cdRegister);
 S.RegisterDelphiFunction(@StrDisposeW, 'StrDisposeW', cdRegister);
 S.RegisterDelphiFunction(@StrDisposeAndNilW, 'StrDisposeAndNilW', cdRegister);
 S.RegisterDelphiFunction(@StrSwapByteOrder, 'StrSwapByteOrder', cdRegister);
 S.RegisterDelphiFunction(@WideAdjustLineBreaks, 'WideAdjustLineBreaks', cdRegister);
 S.RegisterDelphiFunction(@WideCharPos, 'WideCharPos', cdRegister);
 S.RegisterDelphiFunction(@WideCompose, 'WideCompose', cdRegister);
 S.RegisterDelphiFunction(@WideDecompose, 'WideDecompose', cdRegister);
 S.RegisterDelphiFunction(@WideExtractQuotedStr, 'WideExtractQuotedStr', cdRegister);
 S.RegisterDelphiFunction(@WideQuotedStr, 'WideQuotedStr', cdRegister);
 S.RegisterDelphiFunction(@WideStringOfChar, 'WideStringOfChar', cdRegister);
 S.RegisterDelphiFunction(@WideCaseFolding, 'WideCaseFolding', cdRegister);
 S.RegisterDelphiFunction(@WideCaseFolding1, 'WideCaseFolding1', cdRegister);
 S.RegisterDelphiFunction(@WideLowerCase, 'WideLowerCase', cdRegister);
 S.RegisterDelphiFunction(@WideLowerCase1, 'WideLowerCase1', cdRegister);
 S.RegisterDelphiFunction(@WideNormalize, 'WideNormalize', cdRegister);
 S.RegisterDelphiFunction(@WideSameText, 'WideSameText', cdRegister);
 S.RegisterDelphiFunction(@WideTitleCase, 'WideTitleCase', cdRegister);
 S.RegisterDelphiFunction(@WideTitleCase1, 'WideTitleCase1', cdRegister);
 S.RegisterDelphiFunction(@WideTrim, 'WideTrim', cdRegister);
 S.RegisterDelphiFunction(@WideTrimLeft, 'WideTrimLeft', cdRegister);
 S.RegisterDelphiFunction(@WideTrimRight, 'WideTrimRight', cdRegister);
 S.RegisterDelphiFunction(@WideUpperCase, 'WideUpperCase', cdRegister);
 S.RegisterDelphiFunction(@WideUpperCase1, 'WideUpperCase1', cdRegister);
 S.RegisterDelphiFunction(@UnicodeNumberLookup, 'UnicodeNumberLookup', cdRegister);
 S.RegisterDelphiFunction(@UnicodeCompose, 'UnicodeCompose', cdRegister);
 S.RegisterDelphiFunction(@UnicodeCaseFold, 'UnicodeCaseFold', cdRegister);
 S.RegisterDelphiFunction(@UnicodeToUpper, 'UnicodeToUpper', cdRegister);
 S.RegisterDelphiFunction(@UnicodeToLower, 'UnicodeToLower', cdRegister);
 S.RegisterDelphiFunction(@UnicodeToTitle, 'UnicodeToTitle', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsAlpha, 'UnicodeIsAlpha', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsDigit, 'UnicodeIsDigit', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsAlphaNum, 'UnicodeIsAlphaNum', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsCased, 'UnicodeIsCased', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsControl, 'UnicodeIsControl', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsSpace, 'UnicodeIsSpace', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsWhiteSpace, 'UnicodeIsWhiteSpace', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsBlank, 'UnicodeIsBlank', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsPunctuation, 'UnicodeIsPunctuation', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsGraph, 'UnicodeIsGraph', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsPrintable, 'UnicodeIsPrintable', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsUpper, 'UnicodeIsUpper', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsLower, 'UnicodeIsLower', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsTitle, 'UnicodeIsTitle', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsHexDigit, 'UnicodeIsHexDigit', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsIsoControl, 'UnicodeIsIsoControl', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsFormatControl, 'UnicodeIsFormatControl', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsSymbol, 'UnicodeIsSymbol', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsNumber, 'UnicodeIsNumber', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsNonSpacing, 'UnicodeIsNonSpacing', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsOpenPunctuation, 'UnicodeIsOpenPunctuation', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsClosePunctuation, 'UnicodeIsClosePunctuation', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsInitialPunctuation, 'UnicodeIsInitialPunctuation', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsFinalPunctuation, 'UnicodeIsFinalPunctuation', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsComposed, 'UnicodeIsComposed', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsQuotationMark, 'UnicodeIsQuotationMark', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsSymmetric, 'UnicodeIsSymmetric', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsMirroring, 'UnicodeIsMirroring', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsNonBreaking, 'UnicodeIsNonBreaking', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsRightToLeft, 'UnicodeIsRightToLeft', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsLeftToRight, 'UnicodeIsLeftToRight', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsStrong, 'UnicodeIsStrong', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsWeak, 'UnicodeIsWeak', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsNeutral, 'UnicodeIsNeutral', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsSeparator, 'UnicodeIsSeparator', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsMark, 'UnicodeIsMark', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsModifier, 'UnicodeIsModifier', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsLetterNumber, 'UnicodeIsLetterNumber', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsConnectionPunctuation, 'UnicodeIsConnectionPunctuation', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsDash, 'UnicodeIsDash', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsMath, 'UnicodeIsMath', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsCurrency, 'UnicodeIsCurrency', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsModifierSymbol, 'UnicodeIsModifierSymbol', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsNonSpacingMark, 'UnicodeIsNonSpacingMark', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsSpacingMark, 'UnicodeIsSpacingMark', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsEnclosing, 'UnicodeIsEnclosing', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsPrivate, 'UnicodeIsPrivate', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsSurrogate, 'UnicodeIsSurrogate', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsLineSeparator, 'UnicodeIsLineSeparator', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsParagraphSeparator, 'UnicodeIsParagraphSeparator', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsIdentifierStart, 'UnicodeIsIdentifierStart', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsIdentifierPart, 'UnicodeIsIdentifierPart', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsDefined, 'UnicodeIsDefined', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsUndefined, 'UnicodeIsUndefined', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsHan, 'UnicodeIsHan', cdRegister);
 S.RegisterDelphiFunction(@UnicodeIsHangul, 'UnicodeIsHangul', cdRegister);
 S.RegisterDelphiFunction(@CharSetFromLocale, 'CharSetFromLocale', cdRegister);
 S.RegisterDelphiFunction(@GetCharSetFromLocale, 'GetCharSetFromLocale', cdRegister);
 S.RegisterDelphiFunction(@CodePageFromLocale, 'CodePageFromLocale', cdRegister);
 S.RegisterDelphiFunction(@CodeBlockName, 'CodeBlockName', cdRegister);
 S.RegisterDelphiFunction(@CodeBlockRange, 'CodeBlockRange', cdRegister);
 S.RegisterDelphiFunction(@CodeBlockFromChar, 'CodeBlockFromChar', cdRegister);
 S.RegisterDelphiFunction(@KeyboardCodePage, 'KeyboardCodePage', cdRegister);
 S.RegisterDelphiFunction(@KeyUnicode, 'KeyUnicode', cdRegister);
 S.RegisterDelphiFunction(@StringToWideStringEx, 'StringToWideStringEx', cdRegister);
 S.RegisterDelphiFunction(@TranslateString, 'TranslateString', cdRegister);
 S.RegisterDelphiFunction(@WideStringToStringEx, 'WideStringToStringEx', cdRegister);
 S.RegisterDelphiFunction(@UTF8GetNextChar, 'UTF8GetNextChar', cdRegister);
 S.RegisterDelphiFunction(@UTF8SkipChars, 'UTF8SkipChars', cdRegister);
 S.RegisterDelphiFunction(@UTF8SetNextChar, 'UTF8SetNextChar', cdRegister);
 S.RegisterDelphiFunction(@UTF16GetNextChar, 'UTF16GetNextChar', cdRegister);
 S.RegisterDelphiFunction(@UTF16GetPreviousChar, 'UTF16GetPreviousChar', cdRegister);
 S.RegisterDelphiFunction(@UTF16SkipChars, 'UTF16SkipChars', cdRegister);
 S.RegisterDelphiFunction(@UTF16SetNextChar, 'UTF16SetNextChar', cdRegister);
 S.RegisterDelphiFunction(@ExpandANSIString, 'ExpandANSIString', cdRegister);
 S.RegisterDelphiFunction(@WideStringToUTF8, 'WideStringToUTF8', cdRegister);
 S.RegisterDelphiFunction(@UTF8ToWideString, 'UTF8ToWideString', cdRegister);
 S.RegisterDelphiFunction(@WideStringToUTF16, 'WideStringToUTF16', cdRegister);
 S.RegisterDelphiFunction(@UTF16ToWideString, 'UTF16ToWideString', cdRegister);
 S.RegisterDelphiFunction(@WideStringToUCS4, 'WideStringToUCS4', cdRegister);
 S.RegisterDelphiFunction(@UCS4ToWideString, 'UCS4ToWideString', cdRegister);
 S.RegisterDelphiFunction(@UTF8ToUTF16, 'UTF8ToUTF16', cdRegister);
 S.RegisterDelphiFunction(@UTF16ToUTF8, 'UTF16ToUTF8', cdRegister);
 S.RegisterDelphiFunction(@UTF8ToUCS4, 'UTF8ToUCS4', cdRegister);
 S.RegisterDelphiFunction(@UCS4ToUTF8, 'UCS4ToUTF8', cdRegister);
 S.RegisterDelphiFunction(@UTF16ToUCS4, 'UTF16ToUCS4', cdRegister);
 S.RegisterDelphiFunction(@UCS4ToUTF16, 'UCS4ToUTF16', cdRegister);
 S.RegisterDelphiFunction(@UTF8CharCount, 'UTF8CharCount', cdRegister);
 S.RegisterDelphiFunction(@UTF16CharCount, 'UTF16CharCount', cdRegister);
 S.RegisterDelphiFunction(@UCS2CharCount, 'UCS2CharCount', cdRegister);
 S.RegisterDelphiFunction(@UCS4CharCount, 'UCS4CharCount', cdRegister);
 S.RegisterDelphiFunction(@GetUCS4CharAt, 'GetUCS4CharAt', cdRegister);
 S.RegisterDelphiFunction(@GetUCS4CharAt1, 'GetUCS4CharAt1', cdRegister);
 S.RegisterDelphiFunction(@GetUCS4CharAt, 'GetUCS4CharAt', cdRegister);
  with CL.Add(EJclUnicodeError) do
 S.RegisterDelphiFunction(@LoadCharacterCategories, 'LoadCharacterCategories', cdRegister);
 S.RegisterDelphiFunction(@LoadCaseMappingData, 'LoadCaseMappingData', cdRegister);
 S.RegisterDelphiFunction(@LoadDecompositionData, 'LoadDecompositionData', cdRegister);
 S.RegisterDelphiFunction(@LoadCombiningClassData, 'LoadCombiningClassData', cdRegister);
 S.RegisterDelphiFunction(@LoadNumberData, 'LoadNumberData', cdRegister);
 S.RegisterDelphiFunction(@LoadCompositionData, 'LoadCompositionData', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWideStringList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWideStringList) do
  begin
    RegisterVirtualMethod(@TWideStringList.Find, 'Find');
    RegisterVirtualMethod(@TWideStringList.Sort, 'Sort');
    RegisterPropertyHelper(@TWideStringListDuplicates_R,@TWideStringListDuplicates_W,'Duplicates');
    RegisterPropertyHelper(@TWideStringListSorted_R,@TWideStringListSorted_W,'Sorted');
    RegisterPropertyHelper(@TWideStringListOnChange_R,@TWideStringListOnChange_W,'OnChange');
    RegisterPropertyHelper(@TWideStringListOnChanging_R,@TWideStringListOnChanging_W,'OnChanging');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWideStrings(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWideStrings) do
  begin
    RegisterConstructor(@TWideStrings.Create, 'Create');
    RegisterVirtualMethod(@TWideStrings.Add, 'Add');
    RegisterVirtualMethod(@TWideStrings.AddObject, 'AddObject');
    RegisterMethod(@TWideStrings.Append, 'Append');
    RegisterVirtualMethod(@TWideStringsAddStrings_P, 'AddStrings');
    RegisterVirtualMethod(@TWideStringsAddStrings1_P, 'AddStrings1');
    RegisterMethod(@TWideStrings.BeginUpdate, 'BeginUpdate');
    RegisterVirtualAbstractMethod(@TWideStrings, @!.Clear, 'Clear');
    RegisterVirtualAbstractMethod(@TWideStrings, @!.Delete, 'Delete');
    RegisterMethod(@TWideStrings.EndUpdate, 'EndUpdate');
    RegisterMethod(@TWideStrings.Equals, 'Equals');
    RegisterVirtualMethod(@TWideStrings.Exchange, 'Exchange');
    RegisterVirtualMethod(@TWideStrings.GetSeparatedText, 'GetSeparatedText');
    RegisterVirtualMethod(@TWideStrings.GetText, 'GetText');
    RegisterVirtualMethod(@TWideStrings.IndexOf, 'IndexOf');
    RegisterMethod(@TWideStrings.IndexOfName, 'IndexOfName');
    RegisterMethod(@TWideStrings.IndexOfObject, 'IndexOfObject');
    RegisterVirtualAbstractMethod(@TWideStrings, @!.Insert, 'Insert');
    RegisterMethod(@TWideStrings.InsertObject, 'InsertObject');
    RegisterVirtualMethod(@TWideStrings.LoadFromFile, 'LoadFromFile');
    RegisterVirtualMethod(@TWideStrings.LoadFromStream, 'LoadFromStream');
    RegisterVirtualMethod(@TWideStrings.Move, 'Move');
    RegisterVirtualMethod(@TWideStrings.SaveToFile, 'SaveToFile');
    RegisterVirtualMethod(@TWideStrings.SaveToStream, 'SaveToStream');
    RegisterVirtualMethod(@TWideStrings.SetText, 'SetText');
    RegisterPropertyHelper(@TWideStringsCapacity_R,@TWideStringsCapacity_W,'Capacity');
    RegisterPropertyHelper(@TWideStringsCommaText_R,@TWideStringsCommaText_W,'CommaText');
    RegisterPropertyHelper(@TWideStringsCount_R,nil,'Count');
    RegisterPropertyHelper(@TWideStringsLanguage_R,@TWideStringsLanguage_W,'Language');
    RegisterPropertyHelper(@TWideStringsNames_R,nil,'Names');
    RegisterPropertyHelper(@TWideStringsNormalizationForm_R,@TWideStringsNormalizationForm_W,'NormalizationForm');
    RegisterPropertyHelper(@TWideStringsObjects_R,@TWideStringsObjects_W,'Objects');
    RegisterPropertyHelper(@TWideStringsValues_R,@TWideStringsValues_W,'Values');
    RegisterPropertyHelper(@TWideStringsSaved_R,nil,'Saved');
    RegisterPropertyHelper(@TWideStringsSaveUnicode_R,@TWideStringsSaveUnicode_W,'SaveUnicode');
    RegisterPropertyHelper(@TWideStringsSaveFormat_R,@TWideStringsSaveFormat_W,'SaveFormat');
    RegisterPropertyHelper(@TWideStringsStrings_R,@TWideStringsStrings_W,'Strings');
    RegisterPropertyHelper(@TWideStringsText_R,@TWideStringsText_W,'Text');
    RegisterPropertyHelper(@TWideStringsOnConfirmConversion_R,@TWideStringsOnConfirmConversion_W,'OnConfirmConversion');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TURESearch(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TURESearch) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUTBMSearch(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUTBMSearch) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSearchEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSearchEngine) do
  begin
    RegisterVirtualConstructor(@TSearchEngine.Create, 'Create');
    RegisterVirtualMethod(@TSearchEngine.AddResult, 'AddResult');
    RegisterVirtualMethod(@TSearchEngine.Clear, 'Clear');
    RegisterVirtualMethod(@TSearchEngine.ClearResults, 'ClearResults');
    RegisterVirtualMethod(@TSearchEngine.DeleteResult, 'DeleteResult');
    RegisterVirtualAbstractMethod(@TSearchEngine, @!.FindPrepare, 'FindPrepare');
    RegisterVirtualAbstractMethod(@TSearchEngine, @!.FindPrepare1, 'FindPrepare1');
    RegisterVirtualAbstractMethod(@TSearchEngine, @!.FindFirst, 'FindFirst');
    RegisterVirtualAbstractMethod(@TSearchEngine, @!.FindFirst1, 'FindFirst1');
    RegisterVirtualAbstractMethod(@TSearchEngine, @!.FindAll, 'FindAll');
    RegisterVirtualAbstractMethod(@TSearchEngine, @!.FindAll1, 'FindAll1');
    RegisterVirtualMethod(@TSearchEngine.GetResult, 'GetResult');
    RegisterPropertyHelper(@TSearchEngineCount_R,nil,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JclUnicode(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWideStrings) do
  RIRegister_TSearchEngine(CL);
  RIRegister_TUTBMSearch(CL);
  RIRegister_TURESearch(CL);
  RIRegister_TWideStrings(CL);
  RIRegister_TWideStringList(CL);
end;

 
 
{ TPSImport_JclUnicode }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JclUnicode.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JclUnicode(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JclUnicode.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JclUnicode(ri);
  RIRegister_JclUnicode_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
