unit uPSI_IdIPMCastServer;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdIPMCastServer = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdIPMCastServer(CL: TPSPascalCompiler);
procedure SIRegister_IdIPMCastServer(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdIPMCastServer(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdIPMCastServer(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdIPMCastBase
  ,IdComponent
  ,IdSocketHandle
  ,IdIPMCastServer
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdIPMCastServer]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdIPMCastServer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdIPMCastBase', 'TIdIPMCastServer') do
  with CL.AddClassN(CL.FindClass('TIdIPMCastBase'),'TIdIPMCastServer') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Send( AData : string)');
    RegisterMethod('Procedure SendBuffer( var ABuffer : string; const AByteCount : integer)');
    RegisterProperty('Binding', 'TIdSocketHandle', iptr);
    RegisterProperty('Loopback', 'Boolean', iptrw);
    RegisterProperty('TimeToLive', 'Byte', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdIPMCastServer(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('DEF_IMP_LOOPBACK','String').SetString(boolToStr(True));
 CL.AddConstantN('DEF_IMP_TTL','LongInt').SetInt( 1);
  SIRegister_TIdIPMCastServer(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdIPMCastServerTimeToLive_W(Self: TIdIPMCastServer; const T: Byte);
begin Self.TimeToLive := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdIPMCastServerTimeToLive_R(Self: TIdIPMCastServer; var T: Byte);
begin T := Self.TimeToLive; end;

(*----------------------------------------------------------------------------*)
procedure TIdIPMCastServerLoopback_W(Self: TIdIPMCastServer; const T: Boolean);
begin Self.Loopback := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdIPMCastServerLoopback_R(Self: TIdIPMCastServer; var T: Boolean);
begin T := Self.Loopback; end;

(*----------------------------------------------------------------------------*)
procedure TIdIPMCastServerBinding_R(Self: TIdIPMCastServer; var T: TIdSocketHandle);
begin T := Self.Binding; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdIPMCastServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdIPMCastServer) do
  begin
    RegisterConstructor(@TIdIPMCastServer.Create, 'Create');
    RegisterMethod(@TIdIPMCastServer.Send, 'Send');
    RegisterMethod(@TIdIPMCastServer.SendBuffer, 'SendBuffer');
    RegisterPropertyHelper(@TIdIPMCastServerBinding_R,nil,'Binding');
    RegisterPropertyHelper(@TIdIPMCastServerLoopback_R,@TIdIPMCastServerLoopback_W,'Loopback');
    RegisterPropertyHelper(@TIdIPMCastServerTimeToLive_R,@TIdIPMCastServerTimeToLive_W,'TimeToLive');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdIPMCastServer(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdIPMCastServer(CL);
end;

 
 
{ TPSImport_IdIPMCastServer }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdIPMCastServer.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdIPMCastServer(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdIPMCastServer.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdIPMCastServer(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
