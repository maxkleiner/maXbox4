unit uPSI_JvId3v2Types;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvId3v2Types = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_JvId3v2Types(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_JvId3v2Types_Routines(S: TPSExec);

procedure Register;

implementation


uses
   JvId3v2Types
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvId3v2Types]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_JvId3v2Types(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TJvID3FrameID', '( fiNoFrame, fiAudioCrypto, fiPicture, fiAudioS'
   +'eekPoint, fiComment, fiCommercial, fiCryptoReg, fiEqualization2, fiEqualiz'
   +'ation, fiEventTiming, fiGeneralObject, fiGroupingReg, fiInvolvedPeople, fi'
   +'LinkedInfo, fiCDID, fiMPEGLookup, fiOwnership, fiPrivate, fiPlayCounter, f'
   +'iPopularimeter, fiPositionsync, fiBufferSize, fiVolumeAdj2, fiVolumeAdj, f'
   +'iReverb, fiSeekFrame, fiSignature, fiSyncedLyrics, fiSyncedTempo, fiAlbum,'
   +' fiBPM, fiComposer, fiContentType, fiCopyright, fiDate, fiEncodingTime, fi'
   +'PlaylistDelay, fiOrigReleaseTime, fiRecordingTime, fiReleaseTime, fiTaggin'
   +'gTime, fiInvolvedPeople2, fiEncodedBy, fiLyricist, fiFileType, fiTime, fiC'
   +'ontentGroup, fiTitle, fiSubTitle, fiInitialKey, fiLanguage, fiSongLen, fiM'
   +'usicianCreditList, fiMediaType, fiMood, fiOrigAlbum, fiOrigFileName, fiOri'
   +'gLyricist, fiOrigArtist, fiOrigYear, fiFileOwner, fiLeadArtist, fiBand, fi'
   +'Conductor, fiMixArtist, fiPartInSet, fiProducedNotice, fiPublisher, fiTrac'
   +'kNum, fiRecordingDates, fiNetRadioStation, fiNetRadioOwner, fiSize, fiAlbu'
   +'mSortOrder, fiPerformerSortOrder, fiTitleSortOrder, fiISRC, fiEncoderSetti'
   +'ngs, fiSetSubTitle, fiUserText, fiYear, fiUniqueFileID, fiTermsOfUse, fiUn'
   +'syncedLyrics, fiWWWCommercialInfo, fiWWWCopyright, fiWWWAudioFile, fiWWWAr'
   +'tist, fiWWWAudioSource, fiWWWRadioPage, fiWWWPayment, fiWWWPublisher, fiWW'
   +'WUser, fiMetaCrypto, fiMetaCompression )');
 CL.AddDelphiFunction('Function ID3_TextToFrameID( const S : string) : TJvID3FrameID');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_JvId3v2Types_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ID3_TextToFrameID, 'ID3_TextToFrameID', cdRegister);
end;

 
 
{ TPSImport_JvId3v2Types }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvId3v2Types.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvId3v2Types(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvId3v2Types.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvId3v2Types(ri);
  RIRegister_JvId3v2Types_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
