unit uPSI_Drucken2;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Drucken2 = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TDruck2(CL: TPSPascalCompiler);
procedure SIRegister_Drucken2(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Drucken2_Routines(S: TPSExec);
procedure RIRegister_TDruck2(CL: TPSRuntimeClassImporter);
procedure RIRegister_Drucken2(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   WinTypes
  ,WinProcs
  ,Messages
  ,Graphics
  ,Controls
  ,Variants
  ,Forms
  ,Dialogs
  ,StdCtrls
  ,ExtCtrls
  ,Printers
  ,DB
  ,DBTables
  ,Drucken2
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Drucken2]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TDruck2(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TDruck2') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TDruck2') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Drucken2(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('MaxColumns','LongInt').SetInt( 20);
  CL.AddTypeS('TPointReal', 'record x : single; y : Single; end');
  CL.AddTypeS('TPageNumberRecord', 'record XPosition : Single; YPosition : Sing'
   +'le; Text : String; Alignment : integer; Fontname : String; Fontsize : inte'
   +'ger; Fontstyle : TFontStyles; end');
  CL.AddTypeS('TSpalte', 'record Caption : String; CaptionFontname : String; Ca'
   +'ptionFontsize : integer; CaptionFontstyle : TFontStyles; XPosition : Singl'
   +'e; Length : Single; Alignment : integer; end');
  SIRegister_TDruck2(CL);
 CL.AddDelphiFunction('Procedure PrintDokument1');
 CL.AddDelphiFunction('Function PrintCADInit( aBildgroesse : TPoint; aYCm : Extended) : Extended');
 CL.AddDelphiFunction('Procedure PrintCAD( aTable : TTable; aBitmap : TBitmap; aBitmapTitle : String; aPrintDirect, aMitPositionen : Boolean)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_Drucken2_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@PrintDokument1, 'PrintDokument1', cdRegister);
 S.RegisterDelphiFunction(@PrintCADInit, 'PrintCADInit', cdRegister);
 S.RegisterDelphiFunction(@PrintCAD, 'PrintCAD', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDruck2(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDruck2) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Drucken2(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TDruck2(CL);
end;

 
 
{ TPSImport_Drucken2 }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Drucken2.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Drucken2(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Drucken2.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Drucken2(ri);
  RIRegister_Drucken2_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
