unit uPSI_GLScriptPython;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_GLScriptPython = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TGLScriptPython(CL: TPSPascalCompiler);
procedure SIRegister_TGLPythonEngine(CL: TPSPascalCompiler);
procedure SIRegister_GLScriptPython(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_GLScriptPython_Routines(S: TPSExec);
procedure RIRegister_TGLScriptPython(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGLPythonEngine(CL: TPSRuntimeClassImporter);
procedure RIRegister_GLScriptPython(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   XCollection
  ,GLMisc
  ,GLScriptBase
 // ,PythonEngine
  ,GLScriptPython
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_GLScriptPython]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TGLScriptPython(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGLScriptBase', 'TGLScriptPython') do
  with CL.AddClassN(CL.FindClass('TGLScriptBase'),'TGLScriptPython') do
  begin
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Procedure Compile');
    RegisterMethod('Procedure Start');
    RegisterMethod('Procedure Stop');
    RegisterMethod('Procedure Execute');
    RegisterMethod('Procedure Invalidate');
    RegisterMethod('Function Call( aName : String; aParams : array of Variant) : Variant');
    RegisterMethod('Function FriendlyName : String');
    RegisterMethod('Function FriendlyDescription : String');
    RegisterMethod('Function ItemCategory : String');
    RegisterProperty('Engine', 'TGLPythonEngine', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGLPythonEngine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPythonEngine', 'TGLPythonEngine') do
  with CL.AddClassN(CL.FindClass('TPythonEngine'),'TGLPythonEngine') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_GLScriptPython(CL: TPSPascalCompiler);
begin
  SIRegister_TGLPythonEngine(CL);
  SIRegister_TGLScriptPython(CL);
 CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TGLScriptPythonEngine_W(Self: TGLScriptPython; const T: TGLPythonEngine);
begin Self.Engine := T; end;

(*----------------------------------------------------------------------------*)
procedure TGLScriptPythonEngine_R(Self: TGLScriptPython; var T: TGLPythonEngine);
begin T := Self.Engine; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_GLScriptPython_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGLScriptPython(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGLScriptPython) do
  begin
    RegisterMethod(@TGLScriptPython.Assign, 'Assign');
    RegisterMethod(@TGLScriptPython.Compile, 'Compile');
    RegisterMethod(@TGLScriptPython.Start, 'Start');
    RegisterMethod(@TGLScriptPython.Stop, 'Stop');
    RegisterMethod(@TGLScriptPython.Execute, 'Execute');
    RegisterMethod(@TGLScriptPython.Invalidate, 'Invalidate');
    RegisterMethod(@TGLScriptPython.Call, 'Call');
    RegisterMethod(@TGLScriptPython.FriendlyName, 'FriendlyName');
    RegisterMethod(@TGLScriptPython.FriendlyDescription, 'FriendlyDescription');
    RegisterMethod(@TGLScriptPython.ItemCategory, 'ItemCategory');
    RegisterPropertyHelper(@TGLScriptPythonEngine_R,@TGLScriptPythonEngine_W,'Engine');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGLPythonEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGLPythonEngine) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_GLScriptPython(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TGLPythonEngine(CL);
  RIRegister_TGLScriptPython(CL);
end;

 
 
{ TPSImport_GLScriptPython }
(*----------------------------------------------------------------------------*)
procedure TPSImport_GLScriptPython.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_GLScriptPython(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_GLScriptPython.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_GLScriptPython(ri);
  RIRegister_GLScriptPython_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
