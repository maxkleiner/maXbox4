unit uPSI_clJsonSerializer;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_clJsonSerializer = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TclJsonSerializer(CL: TPSPascalCompiler);
procedure SIRegister_clJsonSerializer(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TclJsonSerializer(CL: TPSRuntimeClassImporter);
procedure RIRegister_clJsonSerializer(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Collections
  ,Rtti
  ,TypInfo
  ,clJsonSerializerBase
  ,clJsonParser
  ,clJsonSerializer
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_clJsonSerializer]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TclJsonSerializer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TclJsonSerializerBase', 'TclJsonSerializer') do
  with CL.AddClassN(CL.FindClass('TclJsonSerializerBase'),'TclJsonSerializer') do
  begin
    RegisterMethod('Procedure GetTypeAttributes( AType : TRttiType; var ATypeNameAttrs : TclJsonTypeNameMapAttributeList)');
    RegisterMethod('Procedure GetPropertyAttributes( AProp : TRttiProperty; var APropAttr : TclJsonPropertyAttribute; var ARequiredAttr : TclJsonRequiredAttribute)');
    RegisterMethod('Function GetObjectClass( ATypeNameAttrs : TclJsonTypeNameMapAttributeList; AJsonObject : TclJSONObject) : TRttiType');
    RegisterMethod('Function EnumNameToTValue( Name : string; EnumType : PTypeInfo) : TValue');
    RegisterMethod('Procedure SerializeArray( AProperty : TRttiProperty; AObject : TObject; Attribute : TclJsonPropertyAttribute; AJson : TclJsonObject)');
    RegisterMethod('Procedure DeserializeArray( AProperty : TRttiProperty; AObject : TObject; AJsonArray : TclJSONArray)');
    RegisterMethod('Function Deserialize( AType : TClass; const AJson : TclJSONObject) : TObject;');
    RegisterMethod('Function Deserialize1( AObject : TObject; const AJson : TclJSONObject) : TObject;');
    RegisterMethod('Function Serialize( AObject : TObject) : TclJSONObject');
    RegisterMethod('Function JsonToObject( AType : TClass; const AJson : string) : TObject;');
    RegisterMethod('Function JsonToObject1( AObject : TObject; const AJson : string) : TObject;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_clJsonSerializer(CL: TPSPascalCompiler);
begin
  SIRegister_TclJsonSerializer(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function TclJsonSerializerJsonToObject1_P(Self: TclJsonSerializer;  AObject : TObject; const AJson : string) : TObject;
Begin Result := Self.JsonToObject(AObject, AJson); END;

(*----------------------------------------------------------------------------*)
Function TclJsonSerializerJsonToObject_P(Self: TclJsonSerializer;  AType : TClass; const AJson : string) : TObject;
Begin Result := Self.JsonToObject(AType, AJson); END;

(*----------------------------------------------------------------------------*)
Function TclJsonSerializerDeserialize1_P(Self: TclJsonSerializer;  AObject : TObject; const AJson : TclJSONObject) : TObject;
Begin Result := Self.Deserialize(AObject, AJson); END;

(*----------------------------------------------------------------------------*)
Function TclJsonSerializerDeserialize_P(Self: TclJsonSerializer;  AType : TClass; const AJson : TclJSONObject) : TObject;
Begin Result := Self.Deserialize(AType, AJson); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TclJsonSerializer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TclJsonSerializer) do
  begin
    RegisterMethod(@TclJsonSerializer.GetTypeAttributes, 'GetTypeAttributes');
    RegisterMethod(@TclJsonSerializer.GetPropertyAttributes, 'GetPropertyAttributes');
    RegisterMethod(@TclJsonSerializer.GetObjectClass, 'GetObjectClass');
    RegisterMethod(@TclJsonSerializer.EnumNameToTValue, 'EnumNameToTValue');
    RegisterMethod(@TclJsonSerializer.SerializeArray, 'SerializeArray');
    RegisterMethod(@TclJsonSerializer.DeserializeArray, 'DeserializeArray');
    RegisterMethod(@TclJsonSerializerDeserialize_P, 'Deserialize');
    RegisterMethod(@TclJsonSerializerDeserialize1_P, 'Deserialize1');
    RegisterMethod(@TclJsonSerializer.Serialize, 'Serialize');
    RegisterMethod(@TclJsonSerializerJsonToObject_P, 'JsonToObject');
    RegisterMethod(@TclJsonSerializerJsonToObject1_P, 'JsonToObject1');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_clJsonSerializer(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TclJsonSerializer(CL);
end;

 
 
{ TPSImport_clJsonSerializer }
(*----------------------------------------------------------------------------*)
procedure TPSImport_clJsonSerializer.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_clJsonSerializer(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_clJsonSerializer.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_clJsonSerializer(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
