unit uPSI_GR32_Math;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_GR32_Math = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_GR32_Math(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_GR32_Math_Routines(S: TPSExec);

procedure Register;

implementation


uses
   GR32
  ,GR32_Math
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_GR32_Math]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_GR32_Math(CL: TPSPascalCompiler);
begin

  //TFixed = type Integer;
  CL.AddTypeS('TFixed', 'Integer');
    //TFloat = Single;
  CL.AddTypeS('TFloat', 'Single');
 CL.AddDelphiFunction('Function FixedFloor( A : TFixed) : Integer');
 CL.AddDelphiFunction('Function FixedCeil( A : TFixed) : Integer');
 CL.AddDelphiFunction('Function FixedMul( A, B : TFixed) : TFixed');
 CL.AddDelphiFunction('Function FixedDiv( A, B : TFixed) : TFixed');
 CL.AddDelphiFunction('Function OneOver( Value : TFixed) : TFixed');
 CL.AddDelphiFunction('Function FixedRound( A : TFixed) : Integer');
 CL.AddDelphiFunction('Function FixedSqr( Value : TFixed) : TFixed');
 CL.AddDelphiFunction('Function FixedSqrtLP( Value : TFixed) : TFixed');
 CL.AddDelphiFunction('Function FixedSqrtHP( Value : TFixed) : TFixed');
 CL.AddDelphiFunction('Function FixedCombine( W, X, Y : TFixed) : TFixed');
 CL.AddDelphiFunction('Procedure GRSinCos( const Theta : TFloat; out Sin, Cos : TFloat);');
 CL.AddDelphiFunction('Procedure GRSinCos1( const Theta, Radius : Single; out Sin, Cos : Single);');
 CL.AddDelphiFunction('Function GRHypot( const X, Y : TFloat) : TFloat;');
 CL.AddDelphiFunction('Function Hypot1( const X, Y : Integer) : Integer;');
 CL.AddDelphiFunction('Function FastSqrt( const Value : TFloat) : TFloat');
 CL.AddDelphiFunction('Function FastSqrtBab1( const Value : TFloat) : TFloat');
 CL.AddDelphiFunction('Function FastSqrtBab2( const Value : TFloat) : TFloat');
 CL.AddDelphiFunction('Function FastInvSqrt( const Value : Single) : Single;');
 CL.AddDelphiFunction('Function MulDiv( Multiplicand, Multiplier, Divisor : Integer) : Integer');
 CL.AddDelphiFunction('Function GRIsPowerOf2( Value : Integer) : Boolean');
 CL.AddDelphiFunction('Function PrevPowerOf2( Value : Integer) : Integer');
 CL.AddDelphiFunction('Function NextPowerOf2( Value : Integer) : Integer');
 CL.AddDelphiFunction('Function Average( A, B : Integer) : Integer');
 CL.AddDelphiFunction('Function GRSign( Value : Integer) : Integer');
 CL.AddDelphiFunction('Function FloatMod( x, y : Double) : Double');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function FastInvSqrt_P( const Value : Single) : Single;
Begin Result := GR32_Math.FastInvSqrt(Value); END;

(*----------------------------------------------------------------------------*)
Function Hypot1_P( const X, Y : Integer) : Integer;
Begin Result := GR32_Math.Hypot(X, Y); END;

(*----------------------------------------------------------------------------*)
Function Hypot_P( const X, Y : TFloat) : TFloat;
Begin Result := GR32_Math.Hypot(X, Y); END;

(*----------------------------------------------------------------------------*)
Procedure SinCos1_P( const Theta, Radius : Single; out Sin, Cos : Single);
Begin GR32_Math.SinCos(Theta, Radius, Sin, Cos); END;

(*----------------------------------------------------------------------------*)
Procedure SinCos_P( const Theta : TFloat; out Sin, Cos : TFloat);
Begin GR32_Math.SinCos(Theta, Sin, Cos); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_GR32_Math_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@FixedFloor, 'FixedFloor', cdRegister);
 S.RegisterDelphiFunction(@FixedCeil, 'FixedCeil', cdRegister);
 S.RegisterDelphiFunction(@FixedMul, 'FixedMul', cdRegister);
 S.RegisterDelphiFunction(@FixedDiv, 'FixedDiv', cdRegister);
 S.RegisterDelphiFunction(@OneOver, 'OneOver', cdRegister);
 S.RegisterDelphiFunction(@FixedRound, 'FixedRound', cdRegister);
 S.RegisterDelphiFunction(@FixedSqr, 'FixedSqr', cdRegister);
 S.RegisterDelphiFunction(@FixedSqrtLP, 'FixedSqrtLP', cdRegister);
 S.RegisterDelphiFunction(@FixedSqrtHP, 'FixedSqrtHP', cdRegister);
 S.RegisterDelphiFunction(@FixedCombine, 'FixedCombine', cdRegister);
 S.RegisterDelphiFunction(@SinCos, 'GRSinCos', cdRegister);
 S.RegisterDelphiFunction(@SinCos, 'GRSinCos1', cdRegister);
 S.RegisterDelphiFunction(@Hypot, 'GRHypot', cdRegister);
 S.RegisterDelphiFunction(@Hypot, 'Hypot1', cdRegister);
 S.RegisterDelphiFunction(@FastSqrt, 'FastSqrt', cdRegister);
 S.RegisterDelphiFunction(@FastSqrtBab1, 'FastSqrtBab1', cdRegister);
 S.RegisterDelphiFunction(@FastSqrtBab2, 'FastSqrtBab2', cdRegister);
 S.RegisterDelphiFunction(@FastInvSqrt, 'FastInvSqrt', cdRegister);
 S.RegisterDelphiFunction(@MulDiv, 'MulDiv', cdRegister);
 S.RegisterDelphiFunction(@IsPowerOf2, 'GRIsPowerOf2', cdRegister);
 S.RegisterDelphiFunction(@PrevPowerOf2, 'PrevPowerOf2', cdRegister);
 S.RegisterDelphiFunction(@NextPowerOf2, 'NextPowerOf2', cdRegister);
 S.RegisterDelphiFunction(@Average, 'Average', cdRegister);
 S.RegisterDelphiFunction(@Sign, 'GRSign', cdRegister);
 S.RegisterDelphiFunction(@FloatMod, 'FloatMod', cdRegister);
end;

 
 
{ TPSImport_GR32_Math }
(*----------------------------------------------------------------------------*)
procedure TPSImport_GR32_Math.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_GR32_Math(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_GR32_Math.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_GR32_Math(ri);
  RIRegister_GR32_Math_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
