unit uPSI_IdRawBase;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdRawBase = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdRawBase(CL: TPSPascalCompiler);
procedure SIRegister_IdRawBase(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdRawBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdRawBase(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdComponent
  ,IdGlobal
  ,IdSocketHandle
  ,IdStackConsts
  ,IdRawBase
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdRawBase]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdRawBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdComponent', 'TIdRawBase') do
  with CL.AddClassN(CL.FindClass('TIdComponent'),'TIdRawBase') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Procedure Free');
      RegisterProperty('TTL', 'Integer', iptrw);
    RegisterProperty('Binding', 'TIdSocketHandle', iptr);
    RegisterProperty('ReceiveTimeout', 'integer', iptrw);
    RegisterMethod('Function ReceiveBuffer( var ABuffer : string; const AByteCount : Integer; ATimeOut : integer) : integer');
    RegisterMethod('Procedure Send( AData : string);');
    RegisterMethod('Procedure Send1( AHost : string; const APort : Integer; AData : string);');
    RegisterMethod('Procedure Send2( AHost : string; const APort : integer; var ABuffer : string; const ABufferSize : integer);');
    RegisterProperty('BufferSize', 'Integer', iptrw);
    RegisterProperty('Host', 'string', iptrw);
    RegisterProperty('Port', 'Integer', iptrw);
    RegisterProperty('Protocol', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdRawBase(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('Id_TIdRawBase_Port','LongInt').SetInt( 0);
 CL.AddConstantN('Id_TIdRawBase_BufferSize','LongInt').SetInt( 8192);
 CL.AddConstantN('GReceiveTimeout','LongInt').SetInt( 0);
 CL.AddConstantN('GFTTL','LongInt').SetInt( 128);
  SIRegister_TIdRawBase(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdRawBaseProtocol_W(Self: TIdRawBase; const T: Integer);
begin Self.Protocol := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseProtocol_R(Self: TIdRawBase; var T: Integer);
begin T := Self.Protocol; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBasePort_W(Self: TIdRawBase; const T: Integer);
begin Self.Port := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBasePort_R(Self: TIdRawBase; var T: Integer);
begin T := Self.Port; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseHost_W(Self: TIdRawBase; const T: string);
begin Self.Host := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseHost_R(Self: TIdRawBase; var T: string);
begin T := Self.Host; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseBufferSize_W(Self: TIdRawBase; const T: Integer);
begin Self.BufferSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseBufferSize_R(Self: TIdRawBase; var T: Integer);
begin T := Self.BufferSize; end;

(*----------------------------------------------------------------------------*)
Procedure TIdRawBaseSend2_P(Self: TIdRawBase;  AHost : string; const APort : integer; var ABuffer : string; const ABufferSize : integer);
Begin Self.Send(AHost, APort, ABuffer, ABufferSize); END;

(*----------------------------------------------------------------------------*)
Procedure TIdRawBaseSend1_P(Self: TIdRawBase;  AHost : string; const APort : Integer; AData : string);
Begin Self.Send(AHost, APort, AData); END;

(*----------------------------------------------------------------------------*)
Procedure TIdRawBaseSend_P(Self: TIdRawBase;  AData : string);
Begin Self.Send(AData); END;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseReceiveTimeout_W(Self: TIdRawBase; const T: integer);
begin Self.ReceiveTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseReceiveTimeout_R(Self: TIdRawBase; var T: integer);
begin T := Self.ReceiveTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseBinding_R(Self: TIdRawBase; var T: TIdSocketHandle);
begin T := Self.Binding; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseTTL_W(Self: TIdRawBase; const T: Integer);
begin Self.TTL := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdRawBaseTTL_R(Self: TIdRawBase; var T: Integer);
begin T := Self.TTL; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdRawBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdRawBase) do  begin
    RegisterConstructor(@TIdRawBase.Create, 'Create');
        RegisterMethod(@TIdRawBase.Destroy, 'Free');
       RegisterPropertyHelper(@TIdRawBaseTTL_R,@TIdRawBaseTTL_W,'TTL');
    RegisterPropertyHelper(@TIdRawBaseBinding_R,nil,'Binding');
    RegisterPropertyHelper(@TIdRawBaseReceiveTimeout_R,@TIdRawBaseReceiveTimeout_W,'ReceiveTimeout');
    RegisterMethod(@TIdRawBase.ReceiveBuffer, 'ReceiveBuffer');
    RegisterMethod(@TIdRawBaseSend_P, 'Send');
    RegisterMethod(@TIdRawBaseSend1_P, 'Send1');
    RegisterMethod(@TIdRawBaseSend2_P, 'Send2');
    RegisterPropertyHelper(@TIdRawBaseBufferSize_R,@TIdRawBaseBufferSize_W,'BufferSize');
    RegisterPropertyHelper(@TIdRawBaseHost_R,@TIdRawBaseHost_W,'Host');
    RegisterPropertyHelper(@TIdRawBasePort_R,@TIdRawBasePort_W,'Port');
    RegisterPropertyHelper(@TIdRawBaseProtocol_R,@TIdRawBaseProtocol_W,'Protocol');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdRawBase(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdRawBase(CL);
end;

 
 
{ TPSImport_IdRawBase }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdRawBase.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdRawBase(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdRawBase.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdRawBase(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
