unit uPSI_IdNNTP;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdNNTP = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdNNTP(CL: TPSPascalCompiler);
procedure SIRegister_IdNNTP(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdNNTP(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdNNTP(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdAssignedNumbers
  ,IdException
  ,IdGlobal
  ,IdMessage
  ,IdMessageClient
  ,IdTCPServer
  ,IdTCPConnection
  ,IdNNTP
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdNNTP]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdNNTP(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdMessageClient', 'TIdNNTP') do
  with CL.AddClassN(CL.FindClass('TIdMessageClient'),'TIdNNTP') do
  begin
    RegisterMethod('Procedure Check( AMsgIDs : TStringList; var AResponses : TStringList)');
    RegisterMethod('Procedure Connect( const ATimeout : Integer)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Disconnect');
    RegisterMethod('Function GetArticle( AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetArticle1( const AMsgNo : Integer; AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetArticle2( const AMsgID : string; AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetArticle3( AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetArticle4( const AMsgNo : Integer; AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetArticle5( const AMsgID : string; AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetArticle6( AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetArticle7( const AMsgNo : Integer; AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetArticle8( const AMsgID : string; AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetBody( AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetBody1( const AMsgNo : Integer; AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetBody2( const AMsgID : string; AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetBody3( AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetBody4( const AMsgNo : Integer; AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetBody5( const AMsgID : string; AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetBody6( AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetBody7( const AMsgNo : Integer; AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetBody8( const AMsgID : string; AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetHeader( AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetHeader1( const AMsgNo : Integer; AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetHeader2( const AMsgID : string; AMsg : TIdMessage) : Boolean;');
    RegisterMethod('Function GetHeader3( AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetHeader4( const AMsgNo : Integer; AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetHeader5( const AMsgID : string; AMsg : TStrings) : Boolean;');
    RegisterMethod('Function GetHeader6( AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetHeader7( const AMsgNo : Integer; AMsg : TStream) : Boolean;');
    RegisterMethod('Function GetHeader8( const AMsgID : string; AMsg : TStream) : Boolean;');
    RegisterMethod('Procedure GetNewsgroupList;');
    RegisterMethod('Procedure GetNewsgroupList1( AList : TStrings);');
    RegisterMethod('Procedure GetNewsgroupList2( AStream : TStream);');
    RegisterMethod('Procedure GetNewGroupsList3( const ADate : TDateTime; const AGMT : boolean; const ADistributions : string);');
    RegisterMethod('Procedure GetNewGroupsList4( const ADate : TDateTime; const AGMT : boolean; const ADistributions : string; AList : TStrings);');
    RegisterMethod('Procedure GetNewNewsList5( const ANewsgroups : string; const ADate : TDateTime; const AGMT : boolean; ADistributions : string);');
    RegisterMethod('Procedure GetNewNewsList6( const ANewsgroups : string; const ADate : TDateTime; const AGMT : boolean; ADistributions : string; AList : TStrings);');
    RegisterMethod('Procedure GetOverviewFMT( var AResponse : TStringList)');
    RegisterMethod('Procedure IHAVE( AMsg : TStringList)');
    RegisterMethod('Function Next : Boolean');
    RegisterMethod('Function Previous : Boolean');
    RegisterMethod('Procedure ParseXOVER( Aline : String; var AArticleIndex : Integer; var ASubject, AFrom : String; var ADate : TDateTime; var AMsgId, AReferences : String; var AByteCount, ALineCount : Integer; var AExtraData : String)');
    RegisterMethod('Procedure ParseNewsGroup( ALine : String; var ANewsGroup : String; var AHi, ALo : Integer; var AStatus : String)');
    RegisterMethod('Procedure Post( AMsg : TIdMessage);');
    RegisterMethod('Procedure Post1( AStream : TStream);');
    RegisterMethod('Function SelectArticle( const AMsgNo : Integer) : Boolean');
    RegisterMethod('Procedure SelectGroup( const AGroup : string)');
    RegisterMethod('Function TakeThis( const AMsgID : string; AMsg : TStream) : string');
    RegisterMethod('Procedure XHDR( const AHeader : string; const AParam : string; AResponse : TStrings)');
    RegisterMethod('Procedure XOVER( const AParam : string; AResponse : TStrings);');
    RegisterMethod('Procedure XOVER1( const AParam : string; AResponse : TStream);');
    RegisterProperty('ModeResult', 'TModeSetResult', iptrw);
    RegisterProperty('MsgCount', 'Integer', iptr);
    RegisterProperty('MsgHigh', 'Integer', iptr);
    RegisterProperty('MsgLow', 'Integer', iptr);
    RegisterProperty('Permission', 'TIdNNTPPermission', iptr);
    RegisterProperty('NewsAgent', 'string', iptrw);
    RegisterProperty('Mode', 'TModeType', iptrw);
    RegisterProperty('OnNewsgroupList', 'TEventNewsgroupList', iptrw);
    RegisterProperty('OnNewGroupsList', 'TEventNewsGroupList', iptrw);
    RegisterProperty('OnNewNewsList', 'TEventNewNewsList', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdNNTP(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TModeType', '( mtStream, mtIHAVE, mtReader )');
  CL.AddTypeS('TIdNNTPPermission', '( crCanPost, crNoPost, crAuthRequired, crTe'
   +'mpUnavailable )');
  CL.AddTypeS('TModeSetResult', '( mrCanStream, mrNoStream, mrCanIHAVE, mrNoIHA'
   +'VE, mrCanPost, mrNoPost )');
  CL.AddTypeS('TEventStreaming', 'Procedure ( const AMesgID : string; var AAcce'
   +'pted : Boolean)');
  CL.AddTypeS('TNewsTransportEvent', 'Procedure ( AMsg : TStringList)');
  CL.AddTypeS('TEventNewsgroupList', 'Procedure ( const ANewsgroup : string; co'
   +'nst ALow, AHigh : Integer; const AType : string; var ACanContinue : Boolea'
   +'n)');
  CL.AddTypeS('TEventNewNewsList', 'Procedure ( const AMsgID : string; var ACan'
   +'Continue : Boolean)');
  SIRegister_TIdNNTP(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdNNTPException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdNNTPNoOnNewGroupsList');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdNNTPNoOnNewNewsList');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdNNTPNoOnNewsgroupList');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdNNTPStringListNotInitialized');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdNNTPConnectionRefused');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdNNTPOnNewNewsList_W(Self: TIdNNTP; const T: TEventNewNewsList);
begin Self.OnNewNewsList := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPOnNewNewsList_R(Self: TIdNNTP; var T: TEventNewNewsList);
begin T := Self.OnNewNewsList; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPOnNewGroupsList_W(Self: TIdNNTP; const T: TEventNewsGroupList);
begin Self.OnNewGroupsList := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPOnNewGroupsList_R(Self: TIdNNTP; var T: TEventNewsGroupList);
begin T := Self.OnNewGroupsList; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPOnNewsgroupList_W(Self: TIdNNTP; const T: TEventNewsgroupList);
begin Self.OnNewsgroupList := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPOnNewsgroupList_R(Self: TIdNNTP; var T: TEventNewsgroupList);
begin T := Self.OnNewsgroupList; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPMode_W(Self: TIdNNTP; const T: TModeType);
begin Self.Mode := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPMode_R(Self: TIdNNTP; var T: TModeType);
begin T := Self.Mode; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPNewsAgent_W(Self: TIdNNTP; const T: string);
begin Self.NewsAgent := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPNewsAgent_R(Self: TIdNNTP; var T: string);
begin T := Self.NewsAgent; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPPermission_R(Self: TIdNNTP; var T: TIdNNTPPermission);
begin T := Self.Permission; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPMsgLow_R(Self: TIdNNTP; var T: Integer);
begin T := Self.MsgLow; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPMsgHigh_R(Self: TIdNNTP; var T: Integer);
begin T := Self.MsgHigh; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPMsgCount_R(Self: TIdNNTP; var T: Integer);
begin T := Self.MsgCount; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPModeResult_W(Self: TIdNNTP; const T: TModeSetResult);
begin Self.ModeResult := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdNNTPModeResult_R(Self: TIdNNTP; var T: TModeSetResult);
begin T := Self.ModeResult; end;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPXOVER1_P(Self: TIdNNTP;  const AParam : string; AResponse : TStream);
Begin Self.XOVER(AParam, AResponse); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPXOVER_P(Self: TIdNNTP;  const AParam : string; AResponse : TStrings);
Begin Self.XOVER(AParam, AResponse); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPPost1_P(Self: TIdNNTP;  AStream : TStream);
Begin Self.Post(AStream); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPPost_P(Self: TIdNNTP;  AMsg : TIdMessage);
Begin Self.Post(AMsg); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPGetNewNewsList6_P(Self: TIdNNTP;  const ANewsgroups : string; const ADate : TDateTime; const AGMT : boolean; ADistributions : string; AList : TStrings);
Begin Self.GetNewNewsList(ANewsgroups, ADate, AGMT, ADistributions, AList); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPGetNewNewsList5_P(Self: TIdNNTP;  const ANewsgroups : string; const ADate : TDateTime; const AGMT : boolean; ADistributions : string);
Begin Self.GetNewNewsList(ANewsgroups, ADate, AGMT, ADistributions); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPGetNewGroupsList4_P(Self: TIdNNTP;  const ADate : TDateTime; const AGMT : boolean; const ADistributions : string; AList : TStrings);
Begin Self.GetNewGroupsList(ADate, AGMT, ADistributions, AList); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPGetNewGroupsList3_P(Self: TIdNNTP;  const ADate : TDateTime; const AGMT : boolean; const ADistributions : string);
Begin Self.GetNewGroupsList(ADate, AGMT, ADistributions); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPGetNewsgroupList2_P(Self: TIdNNTP;  AStream : TStream);
Begin Self.GetNewsgroupList(AStream); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPGetNewsgroupList1_P(Self: TIdNNTP;  AList : TStrings);
Begin Self.GetNewsgroupList(AList); END;

(*----------------------------------------------------------------------------*)
Procedure TIdNNTPGetNewsgroupList_P(Self: TIdNNTP);
Begin Self.GetNewsgroupList; END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader8_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TStream) : Boolean;
Begin Result := Self.GetHeader(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader7_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TStream) : Boolean;
Begin Result := Self.GetHeader(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader6_P(Self: TIdNNTP;  AMsg : TStream) : Boolean;
Begin Result := Self.GetHeader(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader5_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TStrings) : Boolean;
Begin Result := Self.GetHeader(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader4_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TStrings) : Boolean;
Begin Result := Self.GetHeader(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader3_P(Self: TIdNNTP;  AMsg : TStrings) : Boolean;
Begin Result := Self.GetHeader(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader2_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetHeader(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader1_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetHeader(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetHeader_P(Self: TIdNNTP;  AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetHeader(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody8_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TStream) : Boolean;
Begin Result := Self.GetBody(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody7_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TStream) : Boolean;
Begin Result := Self.GetBody(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody6_P(Self: TIdNNTP;  AMsg : TStream) : Boolean;
Begin Result := Self.GetBody(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody5_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TStrings) : Boolean;
Begin Result := Self.GetBody(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody4_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TStrings) : Boolean;
Begin Result := Self.GetBody(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody3_P(Self: TIdNNTP;  AMsg : TStrings) : Boolean;
Begin Result := Self.GetBody(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody2_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetBody(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody1_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetBody(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetBody_P(Self: TIdNNTP;  AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetBody(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle8_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TStream) : Boolean;
Begin Result := Self.GetArticle(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle7_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TStream) : Boolean;
Begin Result := Self.GetArticle(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle6_P(Self: TIdNNTP;  AMsg : TStream) : Boolean;
Begin Result := Self.GetArticle(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle5_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TStrings) : Boolean;
Begin Result := Self.GetArticle(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle4_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TStrings) : Boolean;
Begin Result := Self.GetArticle(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle3_P(Self: TIdNNTP;  AMsg : TStrings) : Boolean;
Begin Result := Self.GetArticle(AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle2_P(Self: TIdNNTP;  const AMsgID : string; AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetArticle(AMsgID, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle1_P(Self: TIdNNTP;  const AMsgNo : Integer; AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetArticle(AMsgNo, AMsg); END;

(*----------------------------------------------------------------------------*)
Function TIdNNTPGetArticle_P(Self: TIdNNTP;  AMsg : TIdMessage) : Boolean;
Begin Result := Self.GetArticle(AMsg); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdNNTP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdNNTP) do
  begin
    RegisterMethod(@TIdNNTP.Check, 'Check');
    RegisterMethod(@TIdNNTP.Connect, 'Connect');
    RegisterConstructor(@TIdNNTP.Create, 'Create');
    RegisterMethod(@TIdNNTP.Disconnect, 'Disconnect');
    RegisterMethod(@TIdNNTPGetArticle_P, 'GetArticle');
    RegisterMethod(@TIdNNTPGetArticle1_P, 'GetArticle1');
    RegisterMethod(@TIdNNTPGetArticle2_P, 'GetArticle2');
    RegisterMethod(@TIdNNTPGetArticle3_P, 'GetArticle3');
    RegisterMethod(@TIdNNTPGetArticle4_P, 'GetArticle4');
    RegisterMethod(@TIdNNTPGetArticle5_P, 'GetArticle5');
    RegisterMethod(@TIdNNTPGetArticle6_P, 'GetArticle6');
    RegisterMethod(@TIdNNTPGetArticle7_P, 'GetArticle7');
    RegisterMethod(@TIdNNTPGetArticle8_P, 'GetArticle8');
    RegisterMethod(@TIdNNTPGetBody_P, 'GetBody');
    RegisterMethod(@TIdNNTPGetBody1_P, 'GetBody1');
    RegisterMethod(@TIdNNTPGetBody2_P, 'GetBody2');
    RegisterMethod(@TIdNNTPGetBody3_P, 'GetBody3');
    RegisterMethod(@TIdNNTPGetBody4_P, 'GetBody4');
    RegisterMethod(@TIdNNTPGetBody5_P, 'GetBody5');
    RegisterMethod(@TIdNNTPGetBody6_P, 'GetBody6');
    RegisterMethod(@TIdNNTPGetBody7_P, 'GetBody7');
    RegisterMethod(@TIdNNTPGetBody8_P, 'GetBody8');
    RegisterMethod(@TIdNNTPGetHeader_P, 'GetHeader');
    RegisterMethod(@TIdNNTPGetHeader1_P, 'GetHeader1');
    RegisterMethod(@TIdNNTPGetHeader2_P, 'GetHeader2');
    RegisterMethod(@TIdNNTPGetHeader3_P, 'GetHeader3');
    RegisterMethod(@TIdNNTPGetHeader4_P, 'GetHeader4');
    RegisterMethod(@TIdNNTPGetHeader5_P, 'GetHeader5');
    RegisterMethod(@TIdNNTPGetHeader6_P, 'GetHeader6');
    RegisterMethod(@TIdNNTPGetHeader7_P, 'GetHeader7');
    RegisterMethod(@TIdNNTPGetHeader8_P, 'GetHeader8');
    RegisterMethod(@TIdNNTPGetNewsgroupList_P, 'GetNewsgroupList');
    RegisterMethod(@TIdNNTPGetNewsgroupList1_P, 'GetNewsgroupList1');
    RegisterMethod(@TIdNNTPGetNewsgroupList2_P, 'GetNewsgroupList2');
    RegisterMethod(@TIdNNTPGetNewGroupsList3_P, 'GetNewGroupsList3');
    RegisterMethod(@TIdNNTPGetNewGroupsList4_P, 'GetNewGroupsList4');
    RegisterMethod(@TIdNNTPGetNewNewsList5_P, 'GetNewNewsList5');
    RegisterMethod(@TIdNNTPGetNewNewsList6_P, 'GetNewNewsList6');
    RegisterMethod(@TIdNNTP.GetOverviewFMT, 'GetOverviewFMT');
    RegisterMethod(@TIdNNTP.IHAVE, 'IHAVE');
    RegisterMethod(@TIdNNTP.Next, 'Next');
    RegisterMethod(@TIdNNTP.Previous, 'Previous');
    RegisterMethod(@TIdNNTP.ParseXOVER, 'ParseXOVER');
    RegisterMethod(@TIdNNTP.ParseNewsGroup, 'ParseNewsGroup');
    RegisterMethod(@TIdNNTPPost_P, 'Post');
    RegisterMethod(@TIdNNTPPost1_P, 'Post1');
    RegisterMethod(@TIdNNTP.SelectArticle, 'SelectArticle');
    RegisterMethod(@TIdNNTP.SelectGroup, 'SelectGroup');
    RegisterMethod(@TIdNNTP.TakeThis, 'TakeThis');
    RegisterMethod(@TIdNNTP.XHDR, 'XHDR');
    RegisterMethod(@TIdNNTPXOVER_P, 'XOVER');
    RegisterMethod(@TIdNNTPXOVER1_P, 'XOVER1');
    RegisterPropertyHelper(@TIdNNTPModeResult_R,@TIdNNTPModeResult_W,'ModeResult');
    RegisterPropertyHelper(@TIdNNTPMsgCount_R,nil,'MsgCount');
    RegisterPropertyHelper(@TIdNNTPMsgHigh_R,nil,'MsgHigh');
    RegisterPropertyHelper(@TIdNNTPMsgLow_R,nil,'MsgLow');
    RegisterPropertyHelper(@TIdNNTPPermission_R,nil,'Permission');
    RegisterPropertyHelper(@TIdNNTPNewsAgent_R,@TIdNNTPNewsAgent_W,'NewsAgent');
    RegisterPropertyHelper(@TIdNNTPMode_R,@TIdNNTPMode_W,'Mode');
    RegisterPropertyHelper(@TIdNNTPOnNewsgroupList_R,@TIdNNTPOnNewsgroupList_W,'OnNewsgroupList');
    RegisterPropertyHelper(@TIdNNTPOnNewGroupsList_R,@TIdNNTPOnNewGroupsList_W,'OnNewGroupsList');
    RegisterPropertyHelper(@TIdNNTPOnNewNewsList_R,@TIdNNTPOnNewNewsList_W,'OnNewNewsList');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdNNTP(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdNNTP(CL);
  with CL.Add(EIdNNTPException) do
  with CL.Add(EIdNNTPNoOnNewGroupsList) do
  with CL.Add(EIdNNTPNoOnNewNewsList) do
  with CL.Add(EIdNNTPNoOnNewsgroupList) do
  with CL.Add(EIdNNTPStringListNotInitialized) do
  with CL.Add(EIdNNTPConnectionRefused) do
end;

 
 
{ TPSImport_IdNNTP }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdNNTP.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdNNTP(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdNNTP.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdNNTP(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
