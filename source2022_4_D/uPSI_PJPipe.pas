unit uPSI_PJPipe;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_PJPipe = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPJPipe(CL: TPSPascalCompiler);
procedure SIRegister_PJPipe(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TPJPipe(CL: TPSRuntimeClassImporter);
procedure RIRegister_PJPipe(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,PJPipe
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_PJPipe]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPJPipe(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TPJPipe') do
  with CL.AddClassN(CL.FindClass('TObject'),'TPJPipe') do
  begin
    RegisterMethod('Constructor Create( const Size : LongWord; const Inheritable : Boolean);');
    RegisterMethod('Constructor Create1( const Inheritable : Boolean);');
    RegisterMethod('Constructor Create2( const Size : LongWord; const Security : TSecurityAttributes);');
    RegisterMethod('Constructor Create3( const Security : TSecurityAttributes);');
    RegisterMethod('Procedure Free');
    RegisterMethod('Function AvailableDataSize : LongWord');
    RegisterMethod('Function ReadData( out Buf : string; const BufSize : LongWord; out BytesRead : LongWord) : Boolean');
    RegisterMethod('Function ReadBytes( const Count : LongWord) : TBytes');
    RegisterMethod('Procedure CopyToStream( const Stm : TStream; Count : LongWord)');
    RegisterMethod('Procedure CopyFromStream( const Stm : TStream; Count : LongWord)');
    RegisterMethod('Procedure WriteBytes( const Bytes : TBytes)');
    RegisterMethod('Function WriteData( const Buf : string; const BufSize : LongWord) : LongWord');
    RegisterMethod('Procedure CloseWriteHandle');
    RegisterProperty('ReadHandle', 'THandle', iptr);
    RegisterProperty('WriteHandle', 'THandle', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_PJPipe(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TBytes', 'array of Byte');
  SIRegister_TPJPipe(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TPJPipeWriteHandle_R(Self: TPJPipe; var T: THandle);
begin T := Self.WriteHandle; end;

(*----------------------------------------------------------------------------*)
procedure TPJPipeReadHandle_R(Self: TPJPipe; var T: THandle);
begin T := Self.ReadHandle; end;

(*----------------------------------------------------------------------------*)
Function TPJPipeCreate3_P(Self: TClass; CreateNewInstance: Boolean;  const Security : TSecurityAttributes):TObject;
Begin Result := TPJPipe.Create(Security); END;

(*----------------------------------------------------------------------------*)
Function TPJPipeCreate2_P(Self: TClass; CreateNewInstance: Boolean;  const Size : LongWord; const Security : TSecurityAttributes):TObject;
Begin Result := TPJPipe.Create(Size, Security); END;

(*----------------------------------------------------------------------------*)
Function TPJPipeCreate1_P(Self: TClass; CreateNewInstance: Boolean;  const Inheritable : Boolean):TObject;
Begin Result := TPJPipe.Create(Inheritable); END;

(*----------------------------------------------------------------------------*)
Function TPJPipeCreate_P(Self: TClass; CreateNewInstance: Boolean;  const Size : LongWord; const Inheritable : Boolean):TObject;
Begin Result := TPJPipe.Create(Size, Inheritable); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPJPipe(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPJPipe) do
  begin
    RegisterConstructor(@TPJPipeCreate_P, 'Create');
    RegisterConstructor(@TPJPipeCreate1_P, 'Create1');
    RegisterConstructor(@TPJPipeCreate2_P, 'Create2');
    RegisterConstructor(@TPJPipeCreate3_P, 'Create3');
    RegisterMethod(@TPJPipe.Destroy, 'Free');
    RegisterMethod(@TPJPipe.AvailableDataSize, 'AvailableDataSize');
    RegisterMethod(@TPJPipe.ReadData, 'ReadData');
    RegisterMethod(@TPJPipe.ReadBytes, 'ReadBytes');
    RegisterMethod(@TPJPipe.CopyToStream, 'CopyToStream');
    RegisterMethod(@TPJPipe.CopyFromStream, 'CopyFromStream');
    RegisterMethod(@TPJPipe.WriteBytes, 'WriteBytes');
    RegisterMethod(@TPJPipe.WriteData, 'WriteData');
    RegisterMethod(@TPJPipe.CloseWriteHandle, 'CloseWriteHandle');
    RegisterPropertyHelper(@TPJPipeReadHandle_R,nil,'ReadHandle');
    RegisterPropertyHelper(@TPJPipeWriteHandle_R,nil,'WriteHandle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_PJPipe(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TPJPipe(CL);
end;

 
 
{ TPSImport_PJPipe }
(*----------------------------------------------------------------------------*)
procedure TPSImport_PJPipe.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_PJPipe(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_PJPipe.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_PJPipe(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
