unit uPSI_WaveStorage;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_WaveStorage = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TWaveCollection(CL: TPSPascalCompiler);
procedure SIRegister_TWaveItems(CL: TPSPascalCompiler);
procedure SIRegister_TWaveItem(CL: TPSPascalCompiler);
procedure SIRegister_TWaveStorage(CL: TPSPascalCompiler);
procedure SIRegister_TCustomWaveStorage(CL: TPSPascalCompiler);
procedure SIRegister_TWaveFileConverter(CL: TPSPascalCompiler);
procedure SIRegister_TWaveConverter(CL: TPSPascalCompiler);
procedure SIRegister_TWaveFile(CL: TPSPascalCompiler);
procedure SIRegister_TWave(CL: TPSPascalCompiler);
procedure SIRegister_TWaveStreamConverter(CL: TPSPascalCompiler);
procedure SIRegister_TWaveStreamAdapter(CL: TPSPascalCompiler);
procedure SIRegister_WaveStorage(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TWaveCollection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveItems(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveStorage(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomWaveStorage(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveFileConverter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveConverter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveFile(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWave(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveStreamConverter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWaveStreamAdapter(CL: TPSRuntimeClassImporter);
procedure RIRegister_WaveStorage(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,mmSystem
  ,WaveUtils
  ,WaveACM
  ,WaveStorage
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_WaveStorage]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveCollection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomWaveStorage', 'TWaveCollection') do
  with CL.AddClassN(CL.FindClass('TCustomWaveStorage'),'TWaveCollection') do
  begin
    RegisterMethod('Function ExportWaveNames( const List : TStrings) : Integer');
    RegisterMethod('Function IndexOfName( const AName : String) : Integer');
    RegisterProperty('Waves', 'TWaveItems', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveItems(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TWaveItems') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TWaveItems') do
  begin
    RegisterMethod('Constructor Create( AOwner : TPersistent; ItemClass : TWaveItemClass)');
    RegisterMethod('Constructor Create( AOwner : TPersistent; ItemClass : TWaveItemClass)');
    RegisterMethod('Function Add : TWaveItem');
    RegisterMethod('Function Insert( Index : Integer) : TWaveItem');
    RegisterProperty('Items', 'TWaveItem Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TWaveItem') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TWaveItem') do
  begin
    RegisterProperty('Wave', 'TWave', iptrw);
    RegisterProperty('Name', 'String', iptrw);
    RegisterProperty('Tag', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveStorage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomWaveStorage', 'TWaveStorage') do
  with CL.AddClassN(CL.FindClass('TCustomWaveStorage'),'TWaveStorage') do
  begin
    RegisterProperty('Wave', 'TWave', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomWaveStorage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TCustomWaveStorage') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TCustomWaveStorage') do
  begin
    RegisterMethod('Function Equals( Another : TCustomWaveStorage) : Boolean');
    RegisterProperty('WaveStream', 'TStream Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveFileConverter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWaveStreamConverter', 'TWaveFileConverter') do
  with CL.AddClassN(CL.FindClass('TWaveStreamConverter'),'TWaveFileConverter') do
  begin
    RegisterMethod('Constructor Create( const FileName : String; Mode : Word)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveConverter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWaveStreamConverter', 'TWaveConverter') do
  with CL.AddClassN(CL.FindClass('TWaveStreamConverter'),'TWaveConverter') do
  begin
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveFile(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWaveStreamAdapter', 'TWaveFile') do
  with CL.AddClassN(CL.FindClass('TWaveStreamAdapter'),'TWaveFile') do
  begin
    RegisterMethod('Constructor Create( const FileName : String; Mode : Word)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWave(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWaveStreamAdapter', 'TWave') do
  with CL.AddClassN(CL.FindClass('TWaveStreamAdapter'),'TWave') do
  begin
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveStreamConverter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWaveStreamAdapter', 'TWaveStreamConverter') do
  with CL.AddClassN(CL.FindClass('TWaveStreamAdapter'),'TWaveStreamConverter') do
  begin
    RegisterMethod('Procedure SetBufferFormat( const pWaveFormat : PWaveFormatEx)');
    RegisterMethod('Procedure SetBufferFormatPCM( Format : TPCMFormat)');
    RegisterMethod('Function CanRewrite( pWaveFormat : PWaveFormatEx) : Boolean');
    RegisterMethod('Function CanRewritePCM( Format : TPCMFormat) : Boolean');
    RegisterMethod('Function CanRead : Boolean');
    RegisterProperty('BufferFormat', 'PWaveFormatEx', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWaveStreamAdapter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TWaveStreamAdapter') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TWaveStreamAdapter') do
  begin
    RegisterMethod('Constructor Create( AStream : TStream; AOwnership : TStreamOwnership)');
    RegisterMethod('Function Equals( Wave : TWaveStreamAdapter) : Boolean');
    RegisterMethod('Function SameFormat( WaveStream : TWaveStreamAdapter) : Boolean');
    RegisterMethod('Function SameWaveFormat( pWaveFormat : PWaveFormatEx) : Boolean');
    RegisterMethod('Procedure LoadFromStream( AStream : TStream)');
    RegisterMethod('Procedure SaveToStream( AStream : TStream)');
    RegisterMethod('Procedure LoadFromFile( const AFileName : String)');
    RegisterMethod('Procedure SaveToFile( const AFileName : String)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Refresh');
    RegisterMethod('Procedure Crop');
    RegisterMethod('Function Invert : Boolean');
    RegisterMethod('Function ChangeVolume( Percent : Integer) : Boolean');
    RegisterMethod('Function ConvertTo( const pTargetWaveFormat : PWaveFormatEx) : Boolean');
    RegisterMethod('Function ConvertToPCM( TargetFormat : TPCMFormat) : Boolean');
    RegisterMethod('Function Copy( Source : TWaveStreamAdapter; Pos : DWORD; Len : DWORD) : Boolean');
    RegisterMethod('Function Sub( Pos : DWORD; Len : DWORD) : Boolean');
    RegisterMethod('Function Delete( Pos : DWORD; Len : DWORD) : Boolean');
    RegisterMethod('Function Insert( Pos : DWORD; WaveStream : TWaveStreamAdapter) : Boolean');
    RegisterMethod('Function InsertSilence( Pos : DWORD; Len : DWORD) : Boolean');
    RegisterMethod('Function TrimStart( Len : DWORD) : Boolean');
    RegisterMethod('Function TrimEnd( Len : DWORD) : Boolean');
    RegisterMethod('Function Concat( const Sources : array of TWaveStreamAdapter; Gap : DWORD) : Boolean');
    RegisterMethod('Function Mix( const Sources : array of TWaveStreamAdapter) : Boolean');
    RegisterMethod('Function BeginRewrite( pWaveFormat : PWaveFormatEx) : Boolean');
    RegisterMethod('Function BeginRewritePCM( Format : TPCMFormat) : Boolean');
    RegisterMethod('Function EndRewrite : Boolean');
    RegisterMethod('Function Write( const Buffer, Count : Integer) : Integer');
    RegisterMethod('Function BeginRead : Boolean');
    RegisterMethod('Function EndRead : Boolean');
    RegisterMethod('Function Read( var Buffer, Count : Integer) : Integer');
    RegisterProperty('Stream', 'TStream', iptr);
    RegisterProperty('Ownership', 'TStreamOwnership', iptrw);
    RegisterProperty('State', 'TWaveStreamState', iptr);
    RegisterProperty('Valid', 'Boolean', iptr);
    RegisterProperty('Empty', 'Boolean', iptr);
    RegisterProperty('DataSize', 'DWORD', iptr);
    RegisterProperty('DataOffset', 'DWORD', iptr);
    RegisterProperty('PCMFormat', 'TPCMFormat', iptr);
    RegisterProperty('WaveFormat', 'PWaveFormatEx', iptr);
    RegisterProperty('AudioFormat', 'String', iptr);
    RegisterProperty('Length', 'DWORD', iptr);
    RegisterProperty('BitRate', 'DWORD', iptr);
    RegisterProperty('PeakLevel', 'Integer', iptr);
    RegisterProperty('Position', 'Integer', iptrw);
    RegisterProperty('OnChanging', 'TNotifyEvent', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_WaveStorage(CL: TPSPascalCompiler);
begin
  SIRegister_TWaveStreamAdapter(CL);
  SIRegister_TWaveStreamConverter(CL);
  SIRegister_TWave(CL);
  SIRegister_TWaveFile(CL);
  SIRegister_TWaveConverter(CL);
  SIRegister_TWaveFileConverter(CL);
  SIRegister_TCustomWaveStorage(CL);
  SIRegister_TWaveStorage(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWaveItem');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWaveItems');
  //CL.AddTypeS('TWaveItemClass', 'class of TWaveItem');
  SIRegister_TWaveItem(CL);
  SIRegister_TWaveItems(CL);
  SIRegister_TWaveCollection(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TWaveCollectionWaves_W(Self: TWaveCollection; const T: TWaveItems);
begin Self.Waves := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveCollectionWaves_R(Self: TWaveCollection; var T: TWaveItems);
begin T := Self.Waves; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemsItems_W(Self: TWaveItems; const T: TWaveItem; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemsItems_R(Self: TWaveItems; var T: TWaveItem; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemTag_W(Self: TWaveItem; const T: Integer);
begin Self.Tag := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemTag_R(Self: TWaveItem; var T: Integer);
begin T := Self.Tag; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemName_W(Self: TWaveItem; const T: String);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemName_R(Self: TWaveItem; var T: String);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemWave_W(Self: TWaveItem; const T: TWave);
begin Self.Wave := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveItemWave_R(Self: TWaveItem; var T: TWave);
begin T := Self.Wave; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStorageWave_W(Self: TWaveStorage; const T: TWave);
begin Self.Wave := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStorageWave_R(Self: TWaveStorage; var T: TWave);
begin T := Self.Wave; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWaveStorageWaveStream_R(Self: TCustomWaveStorage; var T: TStream; const t1: Integer);
begin T := Self.WaveStream[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamConverterBufferFormat_R(Self: TWaveStreamConverter; var T: PWaveFormatEx);
begin T := Self.BufferFormat; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterOnChange_W(Self: TWaveStreamAdapter; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterOnChange_R(Self: TWaveStreamAdapter; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterOnChanging_W(Self: TWaveStreamAdapter; const T: TNotifyEvent);
begin Self.OnChanging := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterOnChanging_R(Self: TWaveStreamAdapter; var T: TNotifyEvent);
begin T := Self.OnChanging; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterPosition_W(Self: TWaveStreamAdapter; const T: Integer);
begin Self.Position := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterPosition_R(Self: TWaveStreamAdapter; var T: Integer);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterPeakLevel_R(Self: TWaveStreamAdapter; var T: Integer);
begin T := Self.PeakLevel; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterBitRate_R(Self: TWaveStreamAdapter; var T: DWORD);
begin T := Self.BitRate; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterLength_R(Self: TWaveStreamAdapter; var T: DWORD);
begin T := Self.Length; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterAudioFormat_R(Self: TWaveStreamAdapter; var T: String);
begin T := Self.AudioFormat; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterWaveFormat_R(Self: TWaveStreamAdapter; var T: PWaveFormatEx);
begin T := Self.WaveFormat; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterPCMFormat_R(Self: TWaveStreamAdapter; var T: TPCMFormat);
begin T := Self.PCMFormat; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterDataOffset_R(Self: TWaveStreamAdapter; var T: DWORD);
begin T := Self.DataOffset; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterDataSize_R(Self: TWaveStreamAdapter; var T: DWORD);
begin T := Self.DataSize; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterEmpty_R(Self: TWaveStreamAdapter; var T: Boolean);
begin T := Self.Empty; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterValid_R(Self: TWaveStreamAdapter; var T: Boolean);
begin T := Self.Valid; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterState_R(Self: TWaveStreamAdapter; var T: TWaveStreamState);
begin T := Self.State; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterOwnership_W(Self: TWaveStreamAdapter; const T: TStreamOwnership);
begin Self.Ownership := T; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterOwnership_R(Self: TWaveStreamAdapter; var T: TStreamOwnership);
begin T := Self.Ownership; end;

(*----------------------------------------------------------------------------*)
procedure TWaveStreamAdapterStream_R(Self: TWaveStreamAdapter; var T: TStream);
begin T := Self.Stream; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveCollection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveCollection) do
  begin
    RegisterVirtualMethod(@TWaveCollection.ExportWaveNames, 'ExportWaveNames');
    RegisterVirtualMethod(@TWaveCollection.IndexOfName, 'IndexOfName');
    RegisterPropertyHelper(@TWaveCollectionWaves_R,@TWaveCollectionWaves_W,'Waves');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveItems(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveItems) do
  begin
    RegisterVirtualConstructor(@TWaveItems.Create, 'Create');
    RegisterVirtualConstructor(@TWaveItems.Create, 'Create');
    RegisterMethod(@TWaveItems.Add, 'Add');
    RegisterMethod(@TWaveItems.Insert, 'Insert');
    RegisterPropertyHelper(@TWaveItemsItems_R,@TWaveItemsItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveItem) do
  begin
    RegisterPropertyHelper(@TWaveItemWave_R,@TWaveItemWave_W,'Wave');
    RegisterPropertyHelper(@TWaveItemName_R,@TWaveItemName_W,'Name');
    RegisterPropertyHelper(@TWaveItemTag_R,@TWaveItemTag_W,'Tag');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveStorage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveStorage) do
  begin
    RegisterPropertyHelper(@TWaveStorageWave_R,@TWaveStorageWave_W,'Wave');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomWaveStorage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomWaveStorage) do
  begin
    RegisterVirtualAbstractMethod(@TCustomWaveStorage, @!.Equals, 'Equals');
    RegisterPropertyHelper(@TCustomWaveStorageWaveStream_R,nil,'WaveStream');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveFileConverter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveFileConverter) do
  begin
    RegisterConstructor(@TWaveFileConverter.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveConverter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveConverter) do
  begin
    RegisterConstructor(@TWaveConverter.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveFile(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveFile) do
  begin
    RegisterConstructor(@TWaveFile.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWave(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWave) do
  begin
    RegisterConstructor(@TWave.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveStreamConverter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveStreamConverter) do
  begin
    RegisterVirtualMethod(@TWaveStreamConverter.SetBufferFormat, 'SetBufferFormat');
    RegisterMethod(@TWaveStreamConverter.SetBufferFormatPCM, 'SetBufferFormatPCM');
    RegisterVirtualMethod(@TWaveStreamConverter.CanRewrite, 'CanRewrite');
    RegisterMethod(@TWaveStreamConverter.CanRewritePCM, 'CanRewritePCM');
    RegisterVirtualMethod(@TWaveStreamConverter.CanRead, 'CanRead');
    RegisterPropertyHelper(@TWaveStreamConverterBufferFormat_R,nil,'BufferFormat');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWaveStreamAdapter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWaveStreamAdapter) do
  begin
    RegisterVirtualConstructor(@TWaveStreamAdapter.Create, 'Create');
    RegisterVirtualMethod(@TWaveStreamAdapter.Equals, 'Equals');
    RegisterVirtualMethod(@TWaveStreamAdapter.SameFormat, 'SameFormat');
    RegisterVirtualMethod(@TWaveStreamAdapter.SameWaveFormat, 'SameWaveFormat');
    RegisterVirtualMethod(@TWaveStreamAdapter.LoadFromStream, 'LoadFromStream');
    RegisterVirtualMethod(@TWaveStreamAdapter.SaveToStream, 'SaveToStream');
    RegisterVirtualMethod(@TWaveStreamAdapter.LoadFromFile, 'LoadFromFile');
    RegisterVirtualMethod(@TWaveStreamAdapter.SaveToFile, 'SaveToFile');
    RegisterVirtualMethod(@TWaveStreamAdapter.Clear, 'Clear');
    RegisterVirtualMethod(@TWaveStreamAdapter.Refresh, 'Refresh');
    RegisterVirtualMethod(@TWaveStreamAdapter.Crop, 'Crop');
    RegisterVirtualMethod(@TWaveStreamAdapter.Invert, 'Invert');
    RegisterVirtualMethod(@TWaveStreamAdapter.ChangeVolume, 'ChangeVolume');
    RegisterVirtualMethod(@TWaveStreamAdapter.ConvertTo, 'ConvertTo');
    RegisterMethod(@TWaveStreamAdapter.ConvertToPCM, 'ConvertToPCM');
    RegisterVirtualMethod(@TWaveStreamAdapter.Copy, 'Copy');
    RegisterVirtualMethod(@TWaveStreamAdapter.Sub, 'Sub');
    RegisterVirtualMethod(@TWaveStreamAdapter.Delete, 'Delete');
    RegisterVirtualMethod(@TWaveStreamAdapter.Insert, 'Insert');
    RegisterVirtualMethod(@TWaveStreamAdapter.InsertSilence, 'InsertSilence');
    RegisterVirtualMethod(@TWaveStreamAdapter.TrimStart, 'TrimStart');
    RegisterVirtualMethod(@TWaveStreamAdapter.TrimEnd, 'TrimEnd');
    RegisterVirtualMethod(@TWaveStreamAdapter.Concat, 'Concat');
    RegisterVirtualMethod(@TWaveStreamAdapter.Mix, 'Mix');
    RegisterVirtualMethod(@TWaveStreamAdapter.BeginRewrite, 'BeginRewrite');
    RegisterMethod(@TWaveStreamAdapter.BeginRewritePCM, 'BeginRewritePCM');
    RegisterVirtualMethod(@TWaveStreamAdapter.EndRewrite, 'EndRewrite');
    RegisterVirtualMethod(@TWaveStreamAdapter.Write, 'Write');
    RegisterVirtualMethod(@TWaveStreamAdapter.BeginRead, 'BeginRead');
    RegisterVirtualMethod(@TWaveStreamAdapter.EndRead, 'EndRead');
    RegisterVirtualMethod(@TWaveStreamAdapter.Read, 'Read');
    RegisterPropertyHelper(@TWaveStreamAdapterStream_R,nil,'Stream');
    RegisterPropertyHelper(@TWaveStreamAdapterOwnership_R,@TWaveStreamAdapterOwnership_W,'Ownership');
    RegisterPropertyHelper(@TWaveStreamAdapterState_R,nil,'State');
    RegisterPropertyHelper(@TWaveStreamAdapterValid_R,nil,'Valid');
    RegisterPropertyHelper(@TWaveStreamAdapterEmpty_R,nil,'Empty');
    RegisterPropertyHelper(@TWaveStreamAdapterDataSize_R,nil,'DataSize');
    RegisterPropertyHelper(@TWaveStreamAdapterDataOffset_R,nil,'DataOffset');
    RegisterPropertyHelper(@TWaveStreamAdapterPCMFormat_R,nil,'PCMFormat');
    RegisterPropertyHelper(@TWaveStreamAdapterWaveFormat_R,nil,'WaveFormat');
    RegisterPropertyHelper(@TWaveStreamAdapterAudioFormat_R,nil,'AudioFormat');
    RegisterPropertyHelper(@TWaveStreamAdapterLength_R,nil,'Length');
    RegisterPropertyHelper(@TWaveStreamAdapterBitRate_R,nil,'BitRate');
    RegisterPropertyHelper(@TWaveStreamAdapterPeakLevel_R,nil,'PeakLevel');
    RegisterPropertyHelper(@TWaveStreamAdapterPosition_R,@TWaveStreamAdapterPosition_W,'Position');
    RegisterPropertyHelper(@TWaveStreamAdapterOnChanging_R,@TWaveStreamAdapterOnChanging_W,'OnChanging');
    RegisterPropertyHelper(@TWaveStreamAdapterOnChange_R,@TWaveStreamAdapterOnChange_W,'OnChange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_WaveStorage(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TWaveStreamAdapter(CL);
  RIRegister_TWaveStreamConverter(CL);
  RIRegister_TWave(CL);
  RIRegister_TWaveFile(CL);
  RIRegister_TWaveConverter(CL);
  RIRegister_TWaveFileConverter(CL);
  RIRegister_TCustomWaveStorage(CL);
  RIRegister_TWaveStorage(CL);
  with CL.Add(TWaveItem) do
  with CL.Add(TWaveItems) do
  RIRegister_TWaveItem(CL);
  RIRegister_TWaveItems(CL);
  RIRegister_TWaveCollection(CL);
end;

 
 
{ TPSImport_WaveStorage }
(*----------------------------------------------------------------------------*)
procedure TPSImport_WaveStorage.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_WaveStorage(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_WaveStorage.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_WaveStorage(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
