unit uPSI_IdSysLog;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdSysLog = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdSysLog(CL: TPSPascalCompiler);
procedure SIRegister_IdSysLog(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdSysLog(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdSysLog(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdAssignedNumbers
  ,IdSocketHandle
  ,IdSysLogMessage
  ,IdUDPBase
  ,IdUDPClient
  ,IdSysLog
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdSysLog]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdSysLog(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdUDPClient', 'TIdSysLog') do
  with CL.AddClassN(CL.FindClass('TIdUDPClient'),'TIdSysLog') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure SendMessage( const AMsg : TIdSysLogMessage; const AAutoTimeStamp : Boolean);');
    RegisterMethod('Procedure SendMessage1( const AMsg : String; const AFacility : TidSyslogFacility; const ASeverity : TIdSyslogSeverity);');
    RegisterMethod('Procedure SendMessage2( const AProcess : String; const AText : String; const AFacility : TidSyslogFacility; const ASeverity : TIdSyslogSeverity; const AUsePID : Boolean; const APID : Integer);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdSysLog(CL: TPSPascalCompiler);
begin
  SIRegister_TIdSysLog(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure TIdSysLogSendMessage2_P(Self: TIdSysLog;  const AProcess : String; const AText : String; const AFacility : TidSyslogFacility; const ASeverity : TIdSyslogSeverity; const AUsePID : Boolean; const APID : Integer);
Begin Self.SendMessage(AProcess, AText, AFacility, ASeverity, AUsePID, APID); END;

(*----------------------------------------------------------------------------*)
Procedure TIdSysLogSendMessage1_P(Self: TIdSysLog;  const AMsg : String; const AFacility : TidSyslogFacility; const ASeverity : TIdSyslogSeverity);
Begin Self.SendMessage(AMsg, AFacility, ASeverity); END;

(*----------------------------------------------------------------------------*)
Procedure TIdSysLogSendMessage_P(Self: TIdSysLog;  const AMsg : TIdSysLogMessage; const AAutoTimeStamp : Boolean);
Begin Self.SendMessage(AMsg, AAutoTimeStamp); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdSysLog(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdSysLog) do
  begin
    RegisterConstructor(@TIdSysLog.Create, 'Create');
    RegisterMethod(@TIdSysLogSendMessage_P, 'SendMessage');
    RegisterMethod(@TIdSysLogSendMessage1_P, 'SendMessage1');
    RegisterMethod(@TIdSysLogSendMessage2_P, 'SendMessage2');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdSysLog(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdSysLog(CL);
end;

 
 
{ TPSImport_IdSysLog }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdSysLog.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdSysLog(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdSysLog.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdSysLog(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
