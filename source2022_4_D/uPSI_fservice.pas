unit uPSI_fservice;
{

Service implemment
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_fservice = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TService1(CL: TPSPascalCompiler);
procedure SIRegister_fservice(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TService1(CL: TPSRuntimeClassImporter);
procedure RIRegister_fservice(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Graphics
  ,Controls
  ,SvcMgr
  ,Dialogs
  ,IdBaseComponent
  ,IdComponent
  ,IdTCPServer
  ,cmdIntf
  //,cmdModMgr
  ,IdCustomHTTPServer
  ,IdHTTPServer
  ,IdAntiFreezeBase
  ,IdAntiFreeze
  ,fservice
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_fservice]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TService1(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TService', 'TService1') do
  with CL.AddClassN(CL.FindClass('TService'),'TService1') do
  begin
    RegisterProperty('Server', 'TIdTCPServer', iptrw);
    RegisterProperty('HTTPServer', 'TIdHTTPServer', iptrw);
    RegisterProperty('IdAntiFreeze1', 'TIdAntiFreeze', iptrw);
    RegisterMethod('Procedure ServerTIdCommandHandler0Command( ASender : TIdCommand)');
    RegisterMethod('Procedure ServiceStart( Sender : TService; var Started : Boolean)');
    RegisterMethod('Procedure ServiceStop( Sender : TService; var Stopped : Boolean)');
    RegisterMethod('Procedure ServicePause( Sender : TService; var Paused : Boolean)');
    RegisterMethod('Procedure ServiceContinue( Sender : TService; var Continued : Boolean)');
    RegisterMethod('Procedure ServerExecuteCommandCommand( ASender : TIdCommand)');
    RegisterMethod('Procedure ServiceCreate( Sender : TObject)');
    RegisterMethod('Procedure ServiceDestroy( Sender : TObject)');
    RegisterMethod('Procedure ServerreloadCommandCommand( ASender : TIdCommand)');
    RegisterMethod('Procedure HTTPServerCommandGet( AThread : TIdPeerThread; ARequestInfo : TIdHTTPRequestInfo; AResponseInfo : TIdHTTPResponseInfo)');
    RegisterMethod('Procedure ServerConnect( AThread : TIdPeerThread)');
    RegisterMethod('Procedure ServerDisconnect( AThread : TIdPeerThread)');
    RegisterMethod('Function GetFileContent( aModule, aFilename : STRING; var Content : STRING) : BOOLEAN');
    RegisterProperty('Modules', 'TModuleManager', iptr);
    RegisterProperty('AllowedIPs', 'TStringList', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_fservice(CL: TPSPascalCompiler);
begin
  SIRegister_TService1(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TService1AllowedIPs_R(Self: TService1; var T: TStringList);
begin T := Self.AllowedIPs; end;

(*----------------------------------------------------------------------------*)
procedure TService1Modules_R(Self: TService1; var T: TModuleManager);
begin T := Self.Modules; end;

(*----------------------------------------------------------------------------*)
procedure TService1IdAntiFreeze1_W(Self: TService1; const T: TIdAntiFreeze);
Begin Self.IdAntiFreeze1 := T; end;

(*----------------------------------------------------------------------------*)
procedure TService1IdAntiFreeze1_R(Self: TService1; var T: TIdAntiFreeze);
Begin T := Self.IdAntiFreeze1; end;

(*----------------------------------------------------------------------------*)
procedure TService1HTTPServer_W(Self: TService1; const T: TIdHTTPServer);
Begin Self.HTTPServer := T; end;

(*----------------------------------------------------------------------------*)
procedure TService1HTTPServer_R(Self: TService1; var T: TIdHTTPServer);
Begin T := Self.HTTPServer; end;

(*----------------------------------------------------------------------------*)
procedure TService1Server_W(Self: TService1; const T: TIdTCPServer);
Begin Self.Server := T; end;

(*----------------------------------------------------------------------------*)
procedure TService1Server_R(Self: TService1; var T: TIdTCPServer);
Begin T := Self.Server; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TService1(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TService1) do
  begin
    RegisterPropertyHelper(@TService1Server_R,@TService1Server_W,'Server');
    RegisterPropertyHelper(@TService1HTTPServer_R,@TService1HTTPServer_W,'HTTPServer');
    RegisterPropertyHelper(@TService1IdAntiFreeze1_R,@TService1IdAntiFreeze1_W,'IdAntiFreeze1');
    RegisterMethod(@TService1.ServerTIdCommandHandler0Command, 'ServerTIdCommandHandler0Command');
    RegisterMethod(@TService1.ServiceStart, 'ServiceStart');
    RegisterMethod(@TService1.ServiceStop, 'ServiceStop');
    RegisterMethod(@TService1.ServicePause, 'ServicePause');
    RegisterMethod(@TService1.ServiceContinue, 'ServiceContinue');
    RegisterMethod(@TService1.ServerExecuteCommandCommand, 'ServerExecuteCommandCommand');
    RegisterMethod(@TService1.ServiceCreate, 'ServiceCreate');
    RegisterMethod(@TService1.ServiceDestroy, 'ServiceDestroy');
    RegisterMethod(@TService1.ServerreloadCommandCommand, 'ServerreloadCommandCommand');
    RegisterMethod(@TService1.HTTPServerCommandGet, 'HTTPServerCommandGet');
    RegisterMethod(@TService1.ServerConnect, 'ServerConnect');
    RegisterMethod(@TService1.ServerDisconnect, 'ServerDisconnect');
    RegisterMethod(@TService1.GetFileContent, 'GetFileContent');
    RegisterPropertyHelper(@TService1Modules_R,nil,'Modules');
    RegisterPropertyHelper(@TService1AllowedIPs_R,nil,'AllowedIPs');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_fservice(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TService1(CL);
end;

 
 
{ TPSImport_fservice }
(*----------------------------------------------------------------------------*)
procedure TPSImport_fservice.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_fservice(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_fservice.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_fservice(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
