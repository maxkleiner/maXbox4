//unit unitGlobal;

(*****************************************************************
*   #file>242_Component_Control_rect.txt 350350430F0A2E22ECA8B40D29B0ABBF728A1516
*   Component Control Finder                                     *
*   Projekt  : RTS maXbase SPS +                                 *
*            : App Tester, FindWindow, FindComponent, FindControl*
******************************************************************)

Program GlobalUnitControlTester;

//interface
//uses Inifiles, Windows, Controls, Forms, SysUtils, DB, DBTables,
  //   Dialogs, StdCtrls, Dat_DatenModul, frmGrafik, Menus;
  
const

  E = 2.7182818284590452353602874713527;  // Natural constant
  
  MAINFORM = 'TMaxForm1';  
  

//type TGlobal = class
  //public
    procedure TGlobal_StartInit; forward;
    procedure TGlobal_SetLanguage(aForm : TForm); forward;
    function  TGlobal_INIRead(Abschnitt: String; Zeile: String) : String; forward;
    procedure TGlobal_INIWrite(Abschnitt: String; Zeile: String; Wert: String); forward;
    procedure TGlobal_SetRealLength(var s : String); forward;
    function  TGlobal_GetCurDir : String; forward;
    function  TGlobal_GetWinPath : String; forward;
    procedure TGlobal_Hinweis(MldgNr : Integer); forward;
    procedure TGlobal_Warnung(MldgNr : Integer); forward;
    procedure TGlobal_Fehler(MldgNr : Integer); forward;
    function  TGlobal_Frage(MldgNr : Integer) : Boolean; forward;
    function  TGlobal_GetMessage(MeldNr : Integer) : String; forward;
    function  TGlobal_GetText(TextNr : Integer) : String; forward;
    procedure TGlobal_QueryExec(aQuery : TQuery; SQLString : String); forward;
    procedure TGlobal_AddToWhere(Wert:Variant; Feld:String; DType:Integer); forward;
    procedure TGlobal_FilterInit; forward;
    procedure TGlobal_ShowGraphic(aForm: TForm; aImage: TImage; PicName : String); forward;

//end;


Const RTS_STRING = 1;
      RTS_NUM = 2;
      RTS_DATE = 3;
      RTS_BOOL = 4;
      INIFile = 'RTS.ini';
      myTextfile = 'Sprache.txt';

var Sprache    : String;
    GrafikPfad : String;
    AnzKrit    : Integer;
    Kriterium  : String;
    FilterSQL  : String;
    Anlage     : String;
    Antrieb    : String;
    Klemmung   : String;
    AnzAchse   : String;
    AnzSpindel : String;
    
    mForm: TForm;
    alabel: TLabel;
    ashape: TShape;
    mylablist: TComponentList;
    
    LottoZahlen: array[1..49] of integer;
    Ziehung: array[1..6] of integer;
    uHandle: THandle;
    mcb: TJclScreenBuffer;
    


//implementation

// INI-File lesen und Variablen initialisieren
procedure TGlobal_StartInit;
begin
  Sprache:= TGlobal_INIRead('Parameter', 'Sprache');
  GrafikPfad:= TGlobal_INIRead('Parameter', 'Grafikpfad');
end;

// Setzt die Sprache für das Formular 'aForm'
procedure TGlobal_SetLanguage(aForm: TForm);
var i: Integer;
begin
  for i:= 0 to aForm.ComponentCount - 1 do begin
    // Wenn Objekt ein Label...
    if aForm.Components[i] is TLabel then begin
      with aForm.Components[i] {as TLabel} do begin
        TLabel(aForm.Components[i]).Caption:= TGlobal_GetText(Tag);
      end;
    end;
    // Wenn Objekt ein Button...
    if aForm.Components[i] is TButton then begin
      with aForm.Components[i] {as TButton} do begin
        TButton(aForm.Components[i]).Caption:= TGlobal_GetText(Tag);
      end;
    end;
    // Wenn Objekt ein Menüpunkt...
    if aForm.Components[i] is TMenuItem then begin
      with aForm.Components[i] {as TMenuItem} do begin
        TMenuItem(aForm.Components[i]).Caption:= TGlobal_GetText(Tag);
      end;
    end;
  end;
end;

// Zeile aus dem INI-File lesen
function TGlobal_INIRead(Abschnitt: String; Zeile: String): String;
var RTSIni: TIniFile;
begin
  mcb:= TJclScreenBuffer.create;
  //AssertKindOf
  //IsDCOMInstalled
  //StreamToVariantArray
  RTSIni:= TIniFile.Create(GetCurrentDir + INIFile);
  Result:= RTSIni.ReadString(Abschnitt, Zeile, 'ERROR');
  RTSIni.Free;
end;

// Zeile in dem INIFile schreiben
procedure TGlobal_INIWrite(Abschnitt: String; Zeile: String; Wert: String);
var RTSIni: TIniFile;
begin
  RTSIni:= TIniFile.Create(GetCurrentDir + INIFile);
  RTSIni.WriteString(Abschnitt, Zeile, Wert);
  RTSIni.Free;
end;

// Hilfs-Prozedur für API-Aufrufe
procedure TGlobal_SetRealLength(var s: String);
begin
  SetLength(s, StrLen(pChar(s)));
end;

// Aktuelles Verzeichnis ermitteln
function TGlobal_GetCurDir: String;
var CurDir: String;
begin
  SetLength(CurDir, MAX_PATH);
  //GetCurrentDir(MAX_PATH, pChar(CurDir));
  TGlobal_SetRealLength(CurDir);
  CurDir:= CurDir + '\';
  Result:= CurDir;
end;

// Windows-Pfad ermitteln
function TGlobal_GetWinPath : String;
var WinDir: String;
    Laenge: Integer;
begin
  Laenge:= 255;
  SetLength(WinDir, Laenge);
  Laenge:= GetWindowsDirectory(PChar(WinDir), Laenge);
  SetLength(WinDir, Laenge);
  Result:= WinDir + '\';
end;

// Zeigt eine Information an
procedure TGlobal_Hinweis(MldgNr: Integer);
begin
  MessageDlg(TGlobal_GetMessage(MldgNr), mtInformation, [mbOK], 0);
end;

// Zeigt eine Warnung an
procedure TGlobal_Warnung(MldgNr: Integer);
begin
  MessageDlg(TGlobal_GetMessage(MldgNr), mtWarning, [mbOK], 0);
end;

// Zeigt einen Fehler an
procedure TGlobal_Fehler(MldgNr: Integer);
begin
  MessageDlg(TGlobal_GetMessage(MldgNr), mtError, [mbOK], 0);
end;

// Gibt eine Frage aus. Bei Klick auf 'Ja' wird True zurückgeliefert
function TGlobal_Frage(MldgNr: Integer): Boolean;
begin
  Result:= False;
  if MessageDlg(TGlobal_GetMessage(MldgNr),
                        mtConfirmation, [mbYes, mbNo], 0) = mrYes then
     Result:= True;
end;

// Holt eine Meldung aus dem Textfile
function TGlobal_GetMessage(MeldNr: Integer): String;
var MeldFile: TIniFile;
begin
  MeldFile:= TIniFile.Create(GetCurrentDir + myTextFile);
  Result:= MeldFile.ReadString('Messages' + Sprache, IntToStr(MeldNr), 'ERROR');
  MeldFile.Free;
end;

// Holt einen Text aus dem Textfile
function TGlobal_GetText(TextNr: Integer): String;
var SprachFile: TIniFile;
begin
  SprachFile:= TIniFile.Create(GetCurrentDir + myTextFile);
  Result:= SprachFile.ReadString('Texte' + Sprache, IntToStr(TextNr), 'ERROR');
  SprachFile.Free;
end;

// Setzt einen SQL auf die Datenbank ab
procedure TGlobal_QueryExec(aQuery: TQuery; SQLString: String);
begin
  with aQuery do begin
    Close;
    SQL.Clear;
    SQL.Add(SQLString);
    Prepare;
    Open;
  end;
end;

// Fügt eine SQL-WHERE Klausel an das Kriterium an. Der Datentyp wird berücksichtigt
procedure TGlobal_AddToWhere(Wert: Variant; Feld:String; DType:Integer);
var MyKlausel : String;
begin
  MyKlausel:= '';
  if Length(Wert) > 0 then begin
    Case DType of
      RTS_STRING:         // Wenn Datentyp String...
      begin
        MyKlausel:= ' LIKE ' + Chr(39) + Wert + Chr(39);
      end;
      RTS_NUM:            // Wenn Datentyp Numerisch...
      begin
        MyKlausel:= ' = ' + Wert;
      end;
      RTS_BOOL:           // Wenn Datentyp Boolean...
      begin
        if Wert = 'TRUE' then
          MyKlausel:= '= TRUE';
      end;
      RTS_DATE:           // Wenn Datentyp Datum...
      begin
        MyKlausel:= ' = ' + '#' + Format(Wert, ['mm\/dd\/yyy']) + '#';
      end;
    end;
    if AnzKrit > 0 then Kriterium:= Kriterium + ' AND ';
    Kriterium:= Kriterium + Feld + MyKlausel;
    Inc(AnzKrit);
  end;
end;

// Setzt den Basis-SQL für den Filter
procedure TGlobal_FilterInit;
begin
  FilterSQL:= 'SELECT Artikel.ArtID, Artikel.ArtNr, Artikel.Abmessung, Artikel.Gewicht, Artikel.Bild, Bez.Bez1, ';
  FilterSQL:= FilterSQL + 'TechDat.MaxWsD, TechDat.MaxWsGO, TechDat.MaxWsGM, TechDat.mDT, TechDat.mW, TechDat.Mk ';
  FilterSQL:= FilterSQL + 'TechDat.Mh, TechDat.Mv, TechDat.i, TechDat.n ';
  FilterSQL:= FilterSQL + 'FROM (Bez RIGHT JOIN Artikel ON Bez.BezID = Artikel.BezID) ';
  FilterSQL:= FilterSQL + 'LEFT JOIN TechDat ON Artikel.ArtID = TechDat.ArtID';
  Kriterium:= '';
  AnzKrit:= 0;
end;

// Zeigt die Grafik an
procedure TGlobal_ShowGraphic(aForm: TForm; aImage: TImage; PicName: String);
//var Meldung : TGlobal;
begin
  //Meldung := Nil;
  if PicName <> '' then begin
    with aForm do begin
      aimage.Picture.LoadFromFile(GrafikPfad + PicName);
      aimage.AutoSize := True;
      Width:= aImage.Width + 40;
      Height:= aImage.Height + 60;
      Top:= (Screen.Height - Height) Div 2;
      Left:= (Screen.Width - Width) Div 2;
      //screen.desktoprect
      ShowMessage(inttostr(clientwidth))
      Show;
    end;
  end
  else begin
    TGlobal_Warnung(9);
  end;
  //Meldung.Free;
end;

procedure VariantTest(av: variant);
begin
  Showmessage(floattostr(av/16))
end;


procedure FormKeyPress(Sender: TObject;  var Key: Char);
begin
  if Key = #27 then mForm.close;
end;


{function FindComponent(vlabel: string): TComponent;
var i,j: integer;
    c: TComponent;
begin
  for i:= 0 to Application.ComponentCount - 1 do begin
    // all components of a Form
    for j:= 0 to Application.Components[i].ComponentCount - 1 do begin
      c:= Application.Components[i].Components[j];
      if (c is TComponent) and (c.name = vlabel) then begin
        result:= c;
        //writeln('cfinder' +inttostr(j)+ ' '+c.name +' '+ c.classname)
      end;
    end;
  end; 
end;}  

procedure FindComp;
var i,j: integer;
    c: TComponent;
begin
  for i:= 0 to self.ComponentCount - 1 do begin
    // all components of a Form
    for j:= 0 to self.Components[i].ComponentCount - 1 do begin
      c:= self.Components[i].Components[j];
      if c is TLabel then begin
        writeln('cfinder' +inttostr(j)+ ' '+c.name +' '+ c.classname)
      end;
    end;
  end; 
end;  


procedure GetNumbers(Sender: TObject);
var i, place: integer;
   mycomp: TComponent;
   atbtn: ttoolButton;
begin
  for i:= 1 to 49 do LottoZahlen[i]:= i; // Array füllen
  for i:= 1 to 6 do begin// Jetzt werden die Kugeln gezogen:
     Place:= Random(50-i)+1; // random(49)+1, random(48)+1 usw.
     Ziehung[i]:= LottoZahlen[Place];
     LottoZahlen[Place]:= LottoZahlen[50-i];  //replace last
     //findcomp;
     //tbtnFind: TToolButton
     alabel:= TLabel(FindComponent('Label1'))
   //alabel:= TLabel(mylablist.first);
     alabel.caption:= '(Ziehung[1])';
     atbtn:= TToolButton(findcomponent('tbtnFind'))
   //alabel:= TLabel(mylablist.first);
     atbtn.caption:= '(Ziehung[1])';
   end;
    //writeln('comp list count ' +inttostr(mylablist.count));
  
   for i:= 0 to 6 - 1 do begin
      Writeln(TLabel(mylablist[i]).name)
      TLabel(mylablist[i]).caption:= IntToStr(Ziehung[i+1]);
      //Writeln(TLabel(mylablist[i]).name);
   end 
     //mycomp.findcomponent('alabel.name');
end;

procedure CreateDrawForm2;
var i: integer;
   mform: Tform;
   bmp: TBitmap;
   rectangle: TRect;
begin
  mForm:= TForm.create(self);
  with mForm do begin
    FormStyle:= fsStayOnTop;
    Position:= poScreenCenter;
    color:= clgreen;
    Caption:= 'Pascal Lotto Generator';
    Width:= 640;
    Height:= 440;
    BorderStyle:= bsDialog;
    //scrollbars:= ssBoth;
    //onClose:= @FormClose;
    rectangle:= Rect(left, top, width-left, height-top);
    Writeln('rect '+inttostr(rectangle.bottom))
    onKeyPress:= @FormKeyPress
    Show
  end;
  for i:= 1 to 4 do begin
    ashape:= TShape.Create(mForm);
    with ashape do begin
      parent:= mForm;
      top:= 50
      left:= 80 * i;
      bringToFront;
      shape:= stCircle;
      brush.color:= clRed;
      pen.width:= 5;
    //borderStyle:= bsNone;
    //scrollbars:= false;
    end;
  end;
  
    with TShape.Create(mForm) do begin
      parent:= mForm;
      setbounds(100,200,200,200)
      bringToFront;
      shape:= stCircle;
      brush.color:= clyellow;
      pen.width:= 2;
    //borderStyle:= bsNone;
    //scrollbars:= false;
    end;
    with TShape.Create(mForm) do begin
      parent:= mForm;
      setbounds(112,212,round(Sqrt(PI)*100),round(Sqrt(PI)*100));
      sendToback;
      //radius
      //align
      //enabled
      //scaleby
      //clienttoscreen
      //onmousedown
      //boundsrect
      shape:= strectangle;
      brush.color:= clblue;
      pen.width:= 2;
    //borderStyle:= bsNone;
    //scrollbars:= false;
    end;
    with tScreen.Create(self) do begin
    //findcomponent
      name:= 'thisscreen2';
      //pixelsperinch;
      showmessage('screen name '+name+ ' '+itoa(pixelsperinch));
      free;
    end;
  
    mform:=validparentform(ashape)  //de bug
    writeln('form '+mform.caption)
    mform:=getparentform(ashape)
    writeln(mform.name)
  //GetNumbers(Self);
  mylablist:= TComponentList.create1(true); //owns objects
  for i:= 1 to 6 do begin
    alabel:= TLabel.Create(mForm);
    with alabel do begin
      name:= 'alabel'+inttostr(i)
      caption:= '0';
      parent:= mForm;
      color:= clRed;
      bringToFront;
      top:= 66
      left:= 20 + 79 * i;
      //caption:= IntToStr(Ziehung[i]);
      font.size:= 20;
    //borderStyle:= bsNone;
    //scrollbars:= false;
    end;
    mylablist.Add(alabel);
  end;
  
  with TBitBtn.Create(mForm) do begin
    parent:= mForm;
    SetBounds(400,150,180,40)
    Caption:= 'Lotto Numbers';
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPPLAY'); 
    onClick:= @GetNumbers;
  end;   
  with TBevel.Create(mForm) do begin
     //caption:= '***Outline***';  
     Parent:= mForm;  
     SetBounds(40,30,540,100)
     Show; 
   end; 
   with TMonthCalendar.Create(self) do begin
    //parent:= mForm;
    Free;
   end; 
   
  Bmp:= TBitmap.Create;
  try
    Bmp.LoadFromFile(Exepath+'/examples/citymax.bmp');
    mform.Canvas.Draw(5, 20, Bmp);
  finally
    Bmp.Free;
  end;
end;


procedure BCDTest;
//{$APPTYPE CONSOLE}
//uses
  //SysUtils, FMTBcd;
var
  am:  TBcd;
  sub: TBcd;
  tmp: TBcd;
  i: Integer;
begin
  am := StrToBcd('1.2345');
  sub := StrToBcd('0.12345');
  for i := 0 to 9 do begin
    BcdSubtract(am, sub, tmp);
    am := tmp;
  end;
  if BcdCompare(am, StrToBcd('0.0')) = 0 then
    Writeln('Zero: ' + BcdToStr(am))
  else
    Writeln('Non-zero: ' + BcdToStr(am));
end; 

//type THackDBGrid = class(TDBGrid);
  type THackDBGrid = TDBGrid;


var a,b: real;
    signin64: comp;
    aResult, aRemainder : word;
    amantissa: extended;
    aexponent: integer;
    myshort: shortint;
    mysmall: smallint;
    float1, float2 : single;
    coef: array[0..3] of double; 
    mybcd: TBCD;
    DBGrid1: TDBGrid;
    mymod: hmodule;
    i: integer;
    //myinst: hinstance;
    mname: tmonthnames;
    jshort: short; //smallint
    jlong: long;
    myorigstream: TStreamOriginalFormat;
    compi: int64;
    rectangle1, rectangle2 : TRect;
    mrect: TRect;
    mcont: TWinControl;


begin //main
  ProcessMessagesON;

  CreateDrawForm2;

  //DBGrid1.RowHeights[0]
  //THackDBGrid(DBGrid1).RowHeights[0] := 20;
  Writeln(FloatToStr(Int(PI)));
  writeln(inttostr(sizeof(jshort)))
  a:= 1
  b:= 16;
  TGlobal_FilterInit
  Writeln(FilterSQL)
  Writeln(floattostr(a / 16))
  //Writeln(floattostr(1 / 16))
  //VariantTest(457645.345)
  //VariantTest(1)
  
  //*******************************************
  Writeln(floatToStr(Abs(-23.4)))
  Writeln(IntToStr(Ceil(1.2)));
  //CompareValue
  //SameValue
  DivMod(20,6,aresult, aremainder)
  Writeln(Format('DivMod(20,6, result %d, reminder %d)',[aresult,aremainder]))
  //EnsureRange
  Writeln(floatToStr(Exp(1.0)));
  Writeln(IntToStr(Floor(1.2)));
  Writeln('gcd '+inttostr(GcdJ(18,54)))
  Writeln(FloatToStr(Frac(Exp(1.0))));
  Frexp(Exp(1.0), aMantissa, aExponent)
  Writeln(Format('Frexp(Exp(1.0), mantissa %f, aexponent %d)',[amantissa,aexponent]))
  //countgenerations
  Writeln(FloatToStr(Infinity))
    float1:= Infinity;
    float2:= 23;
  Writeln('float1 - float2 = '+FloatToStr(float1 - float2));
  //inrange
  Writeln(FloatToStr(Int(PI)));
  //intpower
  Writeln(FloatToStr(IntPower(2,16)));
  float1:= 1/00000.1;
  Writeln(BoolToStr(IsInfinite(float1),true))
  float1:= NAN;
  
  Writeln(FloatToStr(LogN(10,Power(2,64))));
  Writeln(FloatToStr(LdExp(4.0,3)));     //Calculates X * (2**P)
  Writeln(FloatToStr(Ln(Exp(1.0))));     
  Writeln(FloatToStr(LnXP1(Exp(1.0))));     
  Writeln('log 10 ' +FloatToStr(Log10(PI)));     
  Writeln(FloatToStr((PI)));     
  Writeln(FloatToStr(Log2(PI)));     
  Writeln(FloatToStr(LogN(2,PI)));     
  Writeln(FloatToStr(PI));    
  coef[0]:= 2; coef[1]:= 4;
  coef[2]:= 6; coef[3]:= 8;
  Writeln('poly '+FloatToStr(Poly(2, coef))); //result = 2^0*2 + 2^1*4 + 2^2*6 + 2^3*8 
  Writeln(FloatToStr(Sqr(PI)));    
  Writeln(FloatToStr(Sqrt(PI)));    
  Writeln(IntToStr(Trunc(PI)));   
  Writeln('two byte '+IntToStr(TwoByteToWord(255,255)));   
  //SetThreadName('myownthread')
  Writeln(ByteToHex(TwoByteToWord(255,255)));   


  //lotto gen test
  //CreateDrawForm2;
    mybcd.precision:= 8;
    mybcd.SignSpecialPlaces:= 0;
    mybcd.fraction[0]:= 38;
    mybcd.fraction[1]:= 135;
    Writeln(BcdToStr(mybcd));
    mybcd:=StrToBcd('2687')
    writeln(inttostr(mybcd.fraction[0]))
    writeln(inttostr(mybcd.fraction[1]))
    writeln(inttostr(mybcd.fraction[2]))
   //wird die Zahl 2687 als 0010 0110 1000 0111 dargestellt).    
    writeln(inttobin(mybcd.fraction[0]))
    writeln(inttobin(mybcd.fraction[1]))
    //bytetobin
    writeln(bytetobin(mybcd.fraction[0]))
    writeln(bytetobin(mybcd.fraction[1]))
    writeln(inttostr(bintobyte('00100110')))
    writeln(inttostr(bintobyte('10000111')))
  
   BCDTest;  
   //const func & proc
   //AnsitoNative(1,'this is ANSI',Sprache, 10)
   Writeln('yellow is :  '+inttostr(ColorToRGB(clyellow)))
   //Writeln(inttostr(CountGenerations(TClass(TComponent),TClass(TStringlist))));
   //myorigstream:=  teststreamformat()
 {The Bounds function creates a TRect rectangle value from Top, Left coordinates, and Width, Height size values.} 
    rectangle1:= Rect(10, 60, 50, 80);
    //rectangle1:= Rect(mForm.left, mForm.top, mform.width-mform.left, mform.height-mform.top);
    
    //rectangle1:= Rect(Point(10, 60), Point(50, 80));
    rectangle2:= Bounds(10, 60, 40, 20);
    //rectangle2:= Rect(mForm.left, mForm.top, mform.width, mform.height);
    ShowMessageFmt('Rectangle 1 coords = %d,%d,%d,%d',
                 [rectangle1.Left,
                  rectangle1.Top,
                  rectangle1.Right,
                  rectangle1.Bottom]);
    ShowMessageFmt('Rectangle 2 coords = %d,%d,%d,%d',
                 [rectangle2.Left,
                  rectangle2.Top,
                  rectangle2.Right,
                  rectangle2.Bottom]);
    //Check
    Clipboard
    //databaseerror('my dbierror');
      //shortcut
      //shortcuttokey
        //shortcuttotext
        //directoryexists
      //validparentform
    //dbierror
    //getlonghint
    //getparentform
    //getshorthint  
    //graphicextension
    //selectdirectory
      
  with TDBCtrlGrid.Create(self) do begin
   parent:= mForm;
   panelheight:= 40;
   rowcount:= 5;
   //datasource
   free;
 end;  
  //FormatMaskText('')
  Writeln('bool '+boolToStr(14<5,true))
  //Writeln(boolToStr(isValidIdent('mybox34',true),true))
  
  Writeln('bool2 '+boolToStr(isValidIdent('3mybox34'),true))
  Writeln('bool3 '+boolToStr(isValidIdent('mybox34'),true))
  
  //application.initialize;
  //application.run
  
  Writeln(inttostr(allocmemcount) + ' '+inttostr(allocmemsize))
  Writeln(booltostr(IsMemoryManagerSet, true))
  Writeln(shortdateformat)
  Writeln(booltostr(IsConsole, true))
  Writeln(booltostr(IsMultiThread, true))
  Writeln('înst and mod '+ inttostr(Hinstance) + ' ' +inttostr(getHmodule))
  writeln(decimalseparator)
  writeln(dateseparator)
  writeln(thousandseparator)
  writeln(timeseparator)
  writeln(listseparator)
  writeln('cstring '+currencyString);
  //writeln(inttostr(randseed));
 
  writeln(loadStr(64208))   //first 64640
  writeln(loadStr(64234))   //64314
  writeln(loadStr(64314))   //64640
  writeln(loadStr(64834))   //64640
       //check
    //for i:= 1 to 15 do
    writeln(getshortdaynames);
    writeln(getlongdaynames);
    writeln(getshortmonthnames);
    writeln(getlongmonthnames);
    writeln(shorttimeformat)
    writeln(inttostr(hibyte(1024)))  
    writeln(inttostr(makeword(9,7))) 
    writeln((inttobin(1801)))  
  
  //18446744073709551600.
  //compi:= power(2,64);
  compi:= 18446744073709551600;
  compi:= 1844674407370955;
  //writeln(int64tostr(compi))
  writeln(format('%.1d    ',[compi]))
   // streamtobyte
   //ln10
  //doubletohex
  //hextodouble
  //swapord
  //RetrieveDeltas
  //writeln(maxform1.memo1.height)
    writeln(inttostr(fibonacci(10)))
    writeln(floattostr(fibo(10)))
    writeln(inttostr(fiboint(10)))
    writeln(floattostr(Gauss(3.4, 5.0)))
    writeln(MBVERSION)
    //if getwindowrect(application.handle, mrect) then 
     //showmessage(' found');
     //mcont:= findcontrol(hinstance)
   uHandle:= FindWindow(MAINFORM,''); //FindReplDialog does not
   {if uHandle <> 0 then 
    Showmessage('maXbox is alive')
   else
    Showmessage('maXbox still sleeps');}
    mcont:= FindControl(uhandle);
    writeln('Width Size of MainForm: '+inttostr(mcont.Width));
    //Writeln(SHA1(Exepath+'maxbox3.exe'))
        
End.

http://delphi.about.com/library/rtl/blrtlPoly.htm
http://www.delphibasics.co.uk/ByLetter.asp?Letter=P
http://www.iso.port.ac.uk/~mike/interests/chistory/documents/pascal-mt-manual/chap5.htm


As most computers store data in 8-bit bytes, it is possible to use one of the following methods to encode a BCD number:

    Uncompressed: each numeral is encoded into one byte, with four bits representing the numeral and the remaining bits having no significance.
    Packed: two numerals are encoded into a single byte, with one numeral in the least significant nibble (bits 0-3) and the other numeral in the most significant nibble (bits 4-7).
BCD is very common in electronic systems where a numeric value is to be displayed, especially in systems consisting solely of digital logic, and not containing a microprocessor. By utilizing BCD, the manipulation of numerical data for display can be greatly simplified by treating each digit as a separate single sub-circuit. This matches much more closely the physical reality of display hardware


--------------------------------RTL Explanation-------------------------
function Abs(X);
	

System
	

Returns an absolute value.

function Ceil(X: Extended):Integer;
	

Math
	

Rounds variables up toward positive infinity.

function CompareValue(const A, B: Integer): TValueRelationship; overload;

function CompareValue(const A, B: Int64): TValueRelationship; overload;

function CompareValue(const A, B: Single; Epsilon: Single = 0): TValueRelationship; overload;

function CompareValue(const A, B: Double; Epsilon: Double = 0): TValueRelationship; overload;

function CompareValue(const A, B: Extended; Epsilon: Extended = 0): TValueRelationship; overload;
	

Math
	

Returns the relationship between two numeric values.

procedure DivMod(Dividend: Integer; Divisor: Word; var Result, Remainder: Word);
	

Math
	

Returns the result of an integer division, including the remainder.

function EnsureRange(const AValue, AMin, AMax: Integer): Integer; overload;

function EnsureRange(const AValue, AMin, AMax: Int64): Int64; overload;

function EnsureRange(const AValue, AMin, AMax: Double): Double; overload;
	

Math
	

Returns the closest value to a specified value within a specified range.

function Exp(X: Real): Real;
	

System
	

Returns the exponential of X.

function Floor(X: Extended): Integer;
	

Math
	

Rounds variables toward negative infinity.

function Frac(X: Extended): Extended;
	

System
	

Returns the fractional part of a real number.

procedure Frexp(X: Extended; var Mantissa: Extended; var Exponent: Integer)
	

Math
	

Separates the Mantissa and Exponent of X

const Infinity =  1.0 / 0.0;
	

Math
	

Represents positive infinity.

function InRange(const AValue, AMin, AMax: Integer): Boolean; overload;

function InRange(const AValue, AMin, AMax: Int64): Boolean; overload;

function InRange(const AValue, AMin, AMax: Double): Boolean; overload;
	

Math
	

Indicates whether a value falls within a specified range.

function Int(X: Extended): Extended;
	

System
	

Returns the integer part of a real number.

function IntPower(Base: Extended; Exponent: Integer): Extended;
	

Math
	

Calculates the integral power of a base value.

function IsInfinite(const AValue: Double): Boolean;
	

Math
	

Indicates when a variable or expression represents an infinite value.

function IsNan(const AValue: Double): Boolean;
	

Math
	

Indicates when a variable or expression does not evaluate to a numeric value.

function IsZero(const A: Single; Epsilon: Single = 0): Boolean; overload;

function IsZero(const A: Double; Epsilon: Double = 0): Boolean; overload;

function IsZero(const A: Extended; Epsilon: Extended = 0): Boolean; overload;
	

Math
	

Indicates when a floating-point variable or expression evaluates to zero, or very close to zero.

function Ldexp(X: Extended; P: Integer): Extended;
	

Math
	

Calculates X * (2**P)

function Ln(X: Real): Real;
	

System
	

Returns the natural log of a real expression

function LnXP1(X: Extended): Extended;
	

Math
	

Returns the natural log of (X+1)

function Log10(X: Extended): Extended;
	

Math
	

Calculates log base 10

function Log2(X: Extended): Extended;
	

Math
	

Calculates log base 2

function LogN(N, X: Extended): Extended;
	

Math
	

Calculates log base N.

function Max(A,B: Extended): Extended; overload;[1]
	

Math
	

Returns the greater of two numeric values.

function Min(A,B: Integer): Integer; overload;1
	

Math
	

Returns the lesser of two numeric values.

const NaN =  0.0 / 0.0;
	

Math
	

Represents a value that is not a number.

const NegInfinity = -1.0 / 0.0;
	

Math
	

Represents negative infinity.

function Pi: Extended;
	

System
	

Returns 3.1415926535897932385.

function Poly(X: Extended; const Coefficients: array of Double): Extended;
	

Math
	

Evaluates a uniform polynomial of one variable at the value X.

function Power(Base, Exponent: Extended): Extended;
	

Math
	

Raises Base to any power.

function Round(X: Extended): Int64;
	

System
	

Returns the value of X rounded to the nearest whole number

function RoundTo(const AValue: Double; const ADigit: TRoundToRange): Double;
	

Math
	

Rounds a floating-point value to a specified digit or power of ten using Bankers rounding.

function SameValue(const A, B: Single; Epsilon: Single = 0): Boolean; overload;

function SameValue(const A, B: Double; Epsilon: Double = 0): Boolean; overload;

function SameValue(const A, B: Extended; Epsilon: Extended = 0): Boolean; overload;
	

Math
	

Indicates whether two floating-point values are (approximately) equal.

function Sign(const AValue: Double): TValueSign; overload;

function Sign(const AValue: Integer): TValueSign; overload;

function Sign(const AValue: Int64): TValueSign; overload;
	

Math
	

Indicates whether a numeric value is positive, negative, or zero.

function SimpleRoundTo(const AValue: Double; const ADigit: TSimpleRoundToRange = -2): Double;
	

Math
	

Rounds a floating-point value to a specified digit or power of ten using asymmetric arithmetic rounding.

function Sqr(X: Extended): Extended;
	

System
	

Returns the square of a number

function Sqrt(X: Extended): Extended;
	

System
	

Returns the square root of X

function Trunc(X: Extended): Int64;
	

System
	

Truncates a real number to an integer

 
2.       Character Manipulation Reoutines

 
	

 
	

Created on 25-5-2004

function Chr(X: Byte): Char;
	

System
	

Returns the character for a specified ASCII value

procedure FillChar(var X; Count: Integer; Value: Byte);
	

System
	

Fills contiguous bytes with a specified value.

function UpCase(Ch: Char): Char;
	

System
	

Converts a character to uppercase.

 
3.       Command Line Utilities

 
	

 
	

Checked on 25-5-2004

var CmdLine: PChar;
	

System
	

CmdLine is a pointer to the command-line arguments specified when the application is invoked

function FindCmdLineSwitch(const Switch: string; SwitchChars: TSysCharSet; IgnoreCase: Boolean): Boolean;
	

SysUtils
	

Determines whether a string was passed as a command line argument to the application

function ParamCount: Integer;
	

System
	

Returns the number of parameters passed on the command line

function ParamStr(Index: Integer): string;
	

System
	

Returns a specified parameter from the command-line

 
4.       Comparison Routines

 
	

 
	

Created on 26-5-2004

function CollectionsEqual(C1, C2: TCollection; Owner1, Owner2: TComponent): Boolean;
	

Classes
	

Compares the contents of two collections.

function CompareMem(P1, P2: Pointer; Length: Integer): Boolean; assembler;
	

SysUtils
	

Performs a binary comparison of two memory images.

function EqualRect(const R1, R2: TRect): Boolean;
	

Classes
	

Indicates whether two TRect values are the same.

 
5.       Date/ Time Routines

 
	

 
	

Updated on 26-5-2004

procedure CheckSqlTimeStamp(const ASQLTimeStamp : TSQLTimeStamp);
	

SqlTimSt
	

Checks whether a TSQLTimeStamp value represents a valid date and time.

function CompareDate(const A, B: TDateTime): TValueRelationship;
	

DateUtils
	

Indicates the relationship between the date portions of two TDateTime values.

function CompareDateTime(const A, B: TDateTime): TValueRelationship;
	

DateUtils
	

Indicates the relationship between two TDateTime values.

function CompareTime(const A, B: TDateTime): TValueRelationship;
	

DateUtils
	

Indicates the relationship between the time portions of two TDateTime values.

function CurrentYear: Word;
	

SysUtils
	

Returns the current year.

function Date: TDateTime;
	

SysUtils
	

Returns the current date

const DateDelta
	

SysUtils
	

Specifies the correction factor when computing the difference between two date and time types that do not begin in the same year

function DateOf(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Strips the time portion from a TDateTime value.

function DateTimeToFileDate(DateTime: TDateTime): Integer;
	

SysUtils
	

Converts a TDateTime object to a DOS date-and-time value

function DateTimeToSQLTimeStamp(const DateTime: TDateTime): TSQLTimeStamp);
	

SqlTimSt
	

Converts a TDateTime value to a TSQLTimeStamp value.

function DateTimeToStr(DateTime: TDateTime): string;
	

SysUtils
	

Converts a TDateTime value to a string

procedure DateTimeToString(var Result: string; const Format: string; DateTime: TDateTime);
	

SysUtils
	

Converts a TDateTime value to a string using a specified Format

procedure DateTimeToSystemTime(DateTime: TDateTime; var SystemTime: TSystemTime);
	

SysUtils
	

Converts a TDateTime value into the Win32 API's TSystemTime type

function DateTimeToTimeStamp(DateTime: TDateTime): TTimeStamp;
	

SysUtils
	

Converts a TDateTime value into the corresponding TTimeStamp value.

function DateToStr(Date: TDateTime): string;
	

SysUtils
	

Converts a TDateTime value to a string.

const

  DayMonday = 1;

  DayTuesday = 2;

  DayWednesday = 3;

  DayThursday = 4;

  DayFriday = 5;

  DaySaturday = 6;

  DaySunday = 7;
	

DateUtils
	

Provide symbolic constants for ISO 8601-compliant day of the week values.

function DayOf(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the day of the month represented by a TDateTime value.

function DayOfTheMonth(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the day of the month represented by a TDateTime value.

function DayOfTheWeek(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the day of the week represented by a TDateTime value.

function DayOfTheYear(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the number of days between a specified TDateTime value and December 31 of the previous year.

function DayOfWeek(Date: TDateTime): Integer;
	

SysUtils
	

Returns the day of the week for a specified date.

function DaysBetween(const ANow, AThen: TDateTime): Integer;
	

DateUtils
	

Returns the number of whole days between two specified TDateTime values.

function DaysInAMonth(const AYear, AMonth: Word): Word;
	

DateUtils
	

Returns the number of days in a specified month of a specified year.

function DaysInAYear(const AYear: Word): Word;
	

DateUtils
	

Returns the number of days in a specified year.

function DaysInMonth(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the number of days in the month of a specified TDateTime value.

function DaysInYear(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the number of days in the year of a specified TDateTime value.

function DaySpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

Returns the number of days (including fractional days) between two specified TDateTime values.

procedure DecodeDate(Date: TDateTime; var Year, Month, Day: Word);
	

SysUtils
	

Returns Year, Month, and Day values for a TDateTime value.

procedure DecodeDateDay(const AValue: TDateTime; out AYear, ADayOfYear: Word);
	

DateUtils
	

Returns the year and day of the year for a specified TDateTime value.

function DecodeDateFully(const DateTime: TDateTime; var Year, Month, Day, DOW: Word): Boolean;
	

SysUtils
	

Returns Year, Month, and Day, and Day-of-Week values for a TDateTime value.

procedure DecodeDateMonthWeek(const AValue: TDateTime; out AYear, AMonth, AWeekOfMonth, ADayOfWeek: Word);
	

DateUtils
	

Returns the year, month, week of the month, and day of the week for a specified TDateTime value.

procedure DecodeDateTime(const AValue: TDateTime; out AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word);
	

DateUtils
	

Returns Year, Month, Day, Hour, Minute, Second, and MilliSecond values for a TDateTime value.

procedure DecodeDateWeek(const AValue: TDateTime; out AYear, AWeekOfYear, ADayOfWeek: Word);
	

DateUtils
	

Returns the year, week of the year, and day of the week for a specified TDateTime value.

procedure DecodeDayOfWeekInMonth(const AValue: TDateTime; out AYear, AMonth, ANthDayOfWeek, ADayOfWeek: Word);
	

DateUtils
	

For a given TDateTime value, returns the year, month, day of the week, and the count of that day of the week in the month.

procedure DecodeTime(Time: TDateTime; var Hour, Min, Sec, MSec: Word);
	

SysUtils
	

Breaks a TDateTime value into hours, minutes, seconds, and milliseconds.

function EncodeDateDay(const AYear, ADayOfYear: Word): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents a specified day of the year for a specified year.

function EncodeDateMonthWeek(const AYear, AMonth, AWeekOfMonth: Word; const ADayOfWeek: Word = 1): TDateTime;
	

DateUtils
	

Returns a TDateTime objectvalue that represents a specified day of a specified week in a specified month and year.

function EncodeDateTime(const AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word):TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents a specified year, month, day, hour, minute, second, and millisecond.

function EncodeDateWeek(const AYear, AWeekOfYear: Word; const ADayOfWeek: Word = 1): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents a specified day of a specified week in a specified year.

function EncodeDayOfWeekInMonth(const AYear, AMonth, ANthDayOfWeek, ADayOfWeek: Word): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents a specified occurrence of a day of the week within a specified month and year.

function EncodeDate(Year, Month, Day: Word): TDateTime;
	

SysUtils
	

Returns a TDateTime value that represents a specified Year, Month, and Day.

function EncodeTime(Hour, Min, Sec, MSec: Word): TDateTime;
	

SysUtils
	

Returns a TDateTime value for a specified Hour, Min, Sec, and MSec.

function EndOfADay(const AYear, ADayOfYear: Word): TDateTime; overload;

function EndOfADay(const AYear, AMonth, ADay: Word): TDateTime; overload;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of a specified day.

function EndOfAMonth(const AYear, AMonth: Word): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of the last day of a specified month.

function EndOfAWeek(const AYear, AWeekOfYear: Word; const ADayOfWeek: Word = 7): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of a specified day of a specified week.

function EndOfAYear(const AYear): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of a specified year.

function EndOfTheDay(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of the day identified by a specified TDateTime value.

function EndOfTheMonth(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of the last day of the month identified by a specified TDateTime value.

function EndOfTheWeek(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of the last day of the week identified by a specified TDateTime value.

function EndOfTheYear(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the last millisecond of the last day of the year identified by a specified TDateTime value.

function FormatDateTime(const Format: string; DateTime: TDateTime): string;
	

SysUtils
	

Formats a TDateTime value.

function HourOf(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the hour of the day represented by a TDateTime value.

function HourOfTheDay(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the hour of the day represented by a TDateTime value.

function HourOfTheMonth(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the number of hours between a specified TDateTime value and 12:00 AM of the first day of the month.

function HourOfTheWeek(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the number of hours between a specified TDateTime value and 12:00 AM of the first day of the week.

function HourOfTheYear(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the number of hours between a specified TDateTime value and 12:00 AM of the first day of the year.

function HoursBetween(const ANow, AThen: TDateTime): Int64;
	

DateUtils
	

Returns the number of whole hours between two specified TDateTime values.

function HourSpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

Returns the number of Hours (including fractional Hours) between two specified TDateTime values.

procedure IncAMonth(var Year, Month, Day: Word; NumberOfMonths: Integer = 1);
	

SysUtils
	

Increments date data by one month.

function IncMonth(const Date: TDateTime; NumberOfMonths: Integer): TDateTime;
	

SysUtils
	

Returns a date shifted by a specified number of months

function IncDay(const AValue: TDateTime; const ANumberOfDays: Integer = 1): TDateTime;
	

DateUtils
	

Returns a date shifted by a specified number of days.

function IncHour(const AValue: TDateTime; const ANumberOfHours: Int64 = 1): TDateTime;
	

DateUtils
	

Returns a date/time value shifted by a specified number of hours.

function IncMilliSecond(const AValue: TDateTime; const ANumberOfMilliSeconds: Int64 = 1): TDateTime;
	

DateUtils
	

Returns a date/time value shifted by a specified number of milliseconds.

function IncMinute(const AValue: TDateTime; const ANumberOfMinutes: Int64 = 1): TDateTime;
	

DateUtils
	

Returns a date/time value shifted by a specified number of minutes.

function IncMonth(const Date: TDateTime; NumberOfMonths: Integer = 1): TDateTime;
	

DateUtils
	

Returns a date shifted by a specified number of months.

function IncSecond(const AValue: TDateTime; const ANumberOfSeconds: Int64 = 1): TDateTime;
	

DateUtils
	

Returns a date/time value shifted by a specified number of seconds.

function IncWeek(const AValue: TDateTime; const ANumberOfWeeks: Integer = 1): TDateTime;
	

DateUtils
	

Returns a date shifted by a specified number of weeks.

function IncYear(const AValue: TDateTime; const ANumberOfYears: Integer = 1): TDateTime;
	

DateUtils
	

Returns a date shifted by a specified number of years.

function IsInLeapYear(const AValue: TDateTime): Boolean;
	

DateUtils
	

Indicates whether a specified TDateTime value occurs in a leap year.

function IsLeapYear(Year: Word): Boolean;
	

SysUtils
	

Indicates whether a specified year is a leap year.

function IsPM(const AValue: TDateTime): Boolean;
	

DateUtils
	

Indicates whether the time portion of a specified TDateTime value occurs after noon.

function IsSameDay(const AValue, ABasis: TDateTime): Boolean;
	

DateUtils
	

Indicates whether a specified TDateTime value occurs on a the same day as a criterion date.

function IsToday(const AValue: TDateTime): Boolean;
	

DateUtils
	

Indicates whether a specified TDateTime value occurs on the current date.

function IsValidDate(const AYear, AMonth, ADay: Word): Boolean;
	

DateUtils
	

Indicates whether a specified year, month, and day represent a valid date.

function IsValidDateDay(const AYear, ADayOfYear: Word): Boolean;
	

DateUtils
	

Indicates whether a specified year and day of the year represent a valid date.

function IsValidDateMonthWeek(const AYear, AMonth, AWeekOfMonth, ADayOfWeek: Word): Boolean;
	

DateUtils
	

Indicates whether a specified year, month, week of the month, and day of the week represent a valid date.

function IsValidDateTime(const AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word): Boolean;
	

DateUtils
	

Indicates whether a specified year, month, day, hour, minute, second, and millisecond represent a valid date and time.

                       

function IsValidDateWeek(const AYear, AWeekOfYear, ADayOfWeek: Word): Boolean;
	

DateUtils
	

Indicates whether a specified year, week of the year, and day of the week represent a valid date.

function IsValidTime(const AHour, AMinute, ASecond, AMilliSecond: Word): Boolean;
	

DateUtils
	

Indicates whether a specified hour, minute, second, and millisecond represent a valid date and time.

function MilliSecondOf(const AValue: TDateTime): Word;
	

DateUtils
	

 

function MilliSecondOfTheDay(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function MilliSecondOfTheHour(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function MilliSecondOfTheMinute(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function MilliSecondOfTheMonth(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function MilliSecondOfTheSecond(const AValue: TDateTime): Word;
	

DateUtils
	

 

function MilliSecondOfTheWeek(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function MilliSecondOfTheYear(const AValue: TDateTime): Int64;
	

DateUtils
	

 

function MilliSecondsBetween(const ANow, AThen: TDateTime): Int64;
	

DateUtils
	

 

function MilliSecondSpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

 

function MinuteOf(const AValue: TDateTime): Word;
	

DateUtils
	

 

function MinuteOfTheDay(const AValue: TDateTime): Word;
	

DateUtils
	

 

function MinuteOfTheHour(const AValue: TDateTime): Word;
	

DateUtils
	

 

function MinuteOfTheMonth(const AValue: TDateTime): Word;
	

DateUtils
	

 

function MinuteOfTheWeek(const AValue: TDateTime): Word;
	

DateUtils
	

 

function MinuteOfTheYear(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function MinutesBetween(const ANow, AThen: TDateTime): Int64;
	

DateUtils
	

 

function MinuteSpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

 

function MonthOf(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the month of the year represented by a TDateTime value.

function MonthOfTheYear(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the month of the year represented by a TDateTime value.

function MonthsBetween(const ANow, AThen: TDateTime): Integer;
	

DateUtils
	

Returns the approximate number of months between two specified TDateTime values.

function MonthSpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

Returns the approximate number of months (including fractions thereof) between two specified TDateTime values.

const SecsPerDay;
	

SysUtils
	

Specifies the number of seconds per day.

const MSecsPerDay;
	

SysUtils
	

Specifies the number of milliseconds per day.

function MSecsToTimeStamp(MSecs: Comp): TTimeStamp;
	

SysUtils
	

Converts a specified number of milliseconds into a TTimeStamp value.

Function Now: TDateTime;
	

SysUtils
	

Returns the current date and time.

function NthDayOfWeek(const AValue: TDateTime): Word;
	

DateUtils
	

Returns which occurence of its weekday a specified TDateTime value represents.

NullSQLTimeStamp : TSQLTimeStamp= (Year: 0; Month: 0; Day: 0; Hour: 0; Minute: 0; Second: 0; Fractions: 0);
	

SqlTimSt
	

Represents a NULL TSQLTimeStamp value.

function RecodeDate(const AValue: TDateTime; const AYear, AMonth, ADay: Word): TDateTime;
	

DateUtils
	

Replaces the date portion of a specified TDateTime value.

function RecodeDateTime(const AValue: TDateTime; const AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word): TDateTime;
	

DateUtils
	

Selectively replaces parts of a specified TDateTime value.

function RecodeDay(const AValue: TDateTime; const ADay: Word): TDateTime;
	

DateUtils
	

Replaces the day of the month for a specified TDateTime value.

function RecodeHour(const AValue: TDateTime; const AHour: Word): TDateTime;
	

DateUtils
	

Replaces the hour of the day for a specified TDateTime value.

const RecodeLeaveFieldAsIs = High(Word);
	

DateUtils
	

Identifies a parameter to RecodeDateTime that should not be used.

function RecodeMilliSecond(const AValue: TDateTime; const AMilliSecond: Word): TDateTime;
	

DateUtils
	

Replaces the millisecond of the second for a specified TDateTime value.

function RecodeMinute(const AValue: TDateTime; const AMinute: Word): TDateTime;
	

DateUtils
	

Replaces the minute of the hour for a specified TDateTime value.

function RecodeMonth(const AValue: TDateTime; const AMonth: Word): TDateTime;
	

DateUtils
	

Replaces the month of the year for a specified TDateTime value.

function RecodeSecond(const AValue: TDateTime; const ASecond: Word): TDateTime;
	

DateUtils
	

Replaces the second of the minute for a specified TDateTime value.

function RecodeTime(const AValue: TDateTime; const AHour, AMinute, ASecond, AMilliSecond: Word): TDateTime;
	

DateUtils
	

Replaces the time portion of a specified TDateTime value.

function RecodeYear(const AValue: TDateTime; const AYear: Word): TDateTime;
	

DateUtils
	

Replaces the year for a specified TDateTime value.

Procedure ReplaceDate(var DateTime: TDateTime; const NewDate: TDateTime);
	

SysUtils
	

Replaces the date portion of a TDateTime value with a specified date.

procedure ReplaceTime(var DateTime: TDateTime; const NewTime: TDateTime);
	

SysUtils
	

Replaces the time portion of a TDateTime value with a specified time.

function SameDate(const A, B: TDateTime): Boolean;
	

DateUtils
	

Indicates whether two TDateTime values represent the same year, month, and day.

function SameDateTime(const A, B: TDateTime): Boolean;
	

DateUtils
	

Indicates whether two TDateTime values represent the same year, month, day, hour, minute, second, and millisecond.

function SameTime(const A, B: TDateTime): Boolean;
	

DateUtils
	

Indicates whether two TDateTime values represent the same time of day, ignoring the date portion.

function SecondOf(const AValue: TDateTime): Word;
	

DateUtils
	

 

function SecondOfTheDay(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function SecondOfTheHour(const AValue: TDateTime): Word;
	

DateUtils
	

 

function SecondOfTheMinute(const AValue: TDateTime): Word;
	

DateUtils
	

 

function SecondOfTheMonth(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function SecondOfTheWeek(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function SecondOfTheYear(const AValue: TDateTime): LongWord;
	

DateUtils
	

 

function SecondsBetween(const ANow, AThen: TDateTime): Int64;
	

DateUtils
	

 

function SecondSpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

 

function SQLDayOfWeek(const DateTime: TSQLTimeStamp): Integer;
	

SqlTimSt
	

Indicates the day of the week when a specified TSQLTimeStamp value occurs.

function SQLTimeStampToDateTime(const DateTime: TSQLTimeStamp): TDateTime;
	

SqlTimSt
	

Converts a TSQLTimeStamp value to a TDateTime value.

function SQLTimeStampToStr(const Format: string; DateTime: TSQLTimeStamp): string;
	

SqlTimSt
	

Converts a TSQLTimeStamp value to a string.

function StartOfADay(const AYear, ADayOfYear: Word): TDateTime; overload;

function StartOfADay(const AYear, AMonth, ADay: Word): TDateTime; overload;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on a specified day.

function StartOfAMonth(const AYear, AMonth: Word): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on the first day of a specified month.

function StartOfAWeek(const AYear, AWeekOfYear: Word; const ADayOfWeek: Word = 1): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on a specified day of a specified week.

function StartOfAYear(const AYear): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on the first day of a specified year.

function StartOfTheDay(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on the day identified by a specified TDateTime value.

function StartOfTheMonth(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on the first day of the month identified by a specified TDateTime value.

function StartOfTheWeek(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on the first day of the week identified by a specified TDateTime value.

function StartOfTheYear(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents 12:00:00:00 AM on the first day of the year identified by a specified TDateTime value.

function StrToDate(const S: string): TDateTime;
	

SysUtils
	

Converts a string to a TDateTime value.

function StrToDateTime(const S: string): TDateTime;
	

SysUtils
	

Converts a string to a TDateTime value.

function StrToSQLTimeStamp(const S: string): TSQLTimeStamp;
	

SqlTimSt
	

Converts a string to a TSQLTimeStamp value.

function StrToTime(const S: string): TDateTime;
	

SysUtils
	

Converts a string to a TDateTime value.

function SystemTimeToDateTime(const SystemTime: TSystemTime): TDateTime;
	

SysUtils
	

Converts a TSystemTime value into a TDateTime value

function Time: TDateTime;
	

SysUtils
	

Returns the current time.

function TimeOf(const AValue: TDateTime): TDateTime;
	

DateUtils
	

Strips the date portion from a TDateTime value.

function TimeStampToDateTime(const TimeStamp: TTimeStamp): TDateTime;
	

SysUtils
	

Converts a TTimeStamp value into the corresponding TDateTime value.

function TimeStampToMSecs(const TimeStamp: TTimeStamp): Comp;
	

SysUtils
	

Converts a TTimeStamp value into an absolute number of milliseconds.

function TimeToStr(Time: TDateTime): string;
	

SysUtils
	

Returns a string that represents a TDateTime value.

function Today: TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the current date.

function Tomorrow: TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the following day.

function TryEncodeDateDay(const AYear, ADayOfYear: Word; out AValue: TDateTime): Boolean;
	

DateUtils
	

Calculates the TDateTime value that represents a specified day of the year for a specified year.

function TryEncodeDateMonthWeek(const AYear, AMonth, AWeekOfMonth, ADayOfWeek: Word; out AValue: TDateTime): Boolean;
	

DateUtils
	

Calculates the TDateTime value that represents a specified day of a specified week in a specified month and year.

function TryEncodeDateTime(const AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word; out AValue: TDateTime): Boolean;
	

DateUtils
	

Calculates the TDateTime value that represents a specified year, month, day, hour, minute, second, and millisecond.

function TryEncodeDateWeek(const AYear, AWeekOfYear: Word; out AValue: TDateTime; const ADayOfWeek: Word = 1): Boolean;
	

DateUtils
	

Calculates the TDateTime value that represents a specified day of a specified week in a specified year.

function TryEncodeDayOfWeekInMonth(const AYear, AMonth, ANthDayOfWeek, ADayOfWeek: Word, out AValue: TDateTime): Boolean;
	

DateUtils
	

Calculates a TDateTime value that represents a specified occurrence of a day of the week within a specified month and year.

function TryRecodeDateTime(const AValue: TDateTime; const AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word; out AResult: TDateTime): Boolean;
	

DateUtils
	

Selectively replaces parts of a specified TDateTime value.

function TryStrToSQLTimeStamp(const S: string; var TimeStamp: TSQLTimeStamp) : Boolean;
	

SqlTimSt
	

Converts a string to a TSQLTimeStamp value.

const UnixDateDelta = 25569;
	

SysUtils
	

Specifies the difference between TDateTime and TIME_T values.

function WeekOf(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the week of the year represented by a TDateTime value.

function WeekOfTheMonth(const AValue: TDateTime): Word; overload;

function WeekOfTheMonth(const AValue: TDateTime; var AYear, AMonth: Word): Word; overload;
	

DateUtils
	

Returns the week of the month represented by a TDateTime value.

function WeekOfTheYear(const AValue: TDateTime): Word; overload;

function WeekOfTheYear(const AValue: TDateTime; var AYear): Word; overload;
	

DateUtils
	

Returns the week of the year represented by a TDateTime value.

function WeeksBetween(const ANow, AThen: TDateTime): Integer;
	

DateUtils
	

Returns the number of whole weeks between two specified TDateTime values.

function WeeksInAYear(const AYear: Word): Word;
	

DateUtils
	

Returns the number of weeks in a specified year.

function WeeksInYear(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the number of weeks in the year of a specified TDateTime value.

function WeekSpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

Returns the number of weeks (including fractional weeks) between two specified TDateTime values.

function WithinPastDays(const ANow, AThen: TDateTime; const ADays: Integer): Boolean;
	

DateUtils
	

Indicates whether two dates are within a specified number of days of each other.

function WithinPastHours(const ANow, AThen: TDateTime; const AHours: Int64): Boolean;
	

DateUtils
	

Indicates whether two date/time values are within a specified number of hours of each other.

function WithinPastMilliSeconds(const ANow, AThen: TDateTime; const AMilliSeconds: Int64): Boolean;
	

DateUtils
	

Indicates whether two date/time values are within a specified number of milliseconds of each other.

function WithinPastMinutes(const ANow, AThen: TDateTime; const AMinutes: Int64): Boolean;
	

DateUtils
	

Indicates whether two date/time values are within a specified number of minutes of each other.

function WithinPastMonths(const ANow, AThen: TDateTime; const AMonths: Integer): Boolean;
	

DateUtils
	

Indicates whether two date/time values are within a specified number of months of each other.

function WithinPastSeconds(const ANow, AThen: TDateTime; const ASeconds: Int64): Boolean;
	

DateUtils
	

Indicates whether two date/time values are within a specified number of seconds of each other.

function WithinPastWeeks(const ANow, AThen: TDateTime; const AWeeks: Integer): Boolean;
	

DateUtils
	

Indicates whether two date/time values are within a specified number of weeks of each other.

function WithinPastYears(const ANow, AThen: TDateTime; const AYears: Integer): Boolean;
	

DateUtils
	

Indicates whether two date/time values are within a specified number of years of each other.

function YearOf(const AValue: TDateTime): Word;
	

DateUtils
	

Returns the year represented by a TDateTime value.

function YearsBetween(const ANow, AThen: TDateTime): Integer;
	

DateUtils
	

Returns the approximate number of years between two specified TDateTime values.

function YearSpan(const ANow, AThen: TDateTime): Double;
	

DateUtils
	

Returns the approximate number of years (including fractions thereof) between two specified TDateTime values.

function Yesterday: TDateTime;
	

DateUtils
	

Returns a TDateTime value that represents the preceding day.

 
6.       Dialog and Message Routines

 
	

 
	

Updated on 26-5-2004

function CreateMessageDialog(const Msg: string; DlgType: TMsgDlgType; Buttons: TMsgDlgButtons): TForm;
	

Dialogs
	

Creates a specified message dialog

var ForceCurrentDirectory: Boolean
	

Dialogs
	

Indicates whether open and save dialogs should display the current directory if no initial directory is assigned

function InputBox(const ACaption, APrompt, ADefault: string): string;
	

Dialogs
	

Displays an input dialog box that enables the user to enter a string

function InputQuery(const ACaption, APrompt: string; var Value: string): Boolean;
	

Dialogs
	

Displays an input dialog that enables the user to enter a string

function IsAbortResult(const AModalResult: TModalResult): Boolean;
	

Controls
	

Checks the return value from a modal form dialog and indicates whether the user selected Abort or Cancel.

function IsAnAllResult(const AModalResult: TModalResult): Boolean;
	

Controls
	

Checks the return value from a modal form dialog and indicates whether the user selected All, Yes to All, or No to All.

function IsNegativeResult(const AModalResult: TModalResult): Boolean;
	

Controls
	

Checks the return value from a modal form dialog and indicates whether the user selected No or No to All.

function IsPositiveResult(const AModalResult: TModalResult): Boolean;
	

Controls
	

Checks the return value from a modal form dialog and indicates whether the user selected Ok, Yes, Yes to All, or All.

function LoginDialog(const ADatabaseName: string; var AUserName, APassword: string): Boolean;
	

Dblogdlg
	

Brings up the database Login dialog to allow the user to connect to a database server

function LoginDialogEx(const ADatabaseName: string; var AUserName, APassword: string; NameReadOnly: Boolean): Boolean;
	

Dblogdlg
	

Brings up the database Login dialog to allow the user to connect to a database server

function MessageDlg(const Msg: string; DlgType: TMsgDlgType; Buttons: TMsgDlgButtons; HelpCtx: Longint): Word;
	

Dialogs
	

Displays a message dialog box in the center of the screen

function MessageDlgPos(const Msg: string; DlgType: TMsgDlgType; Buttons: TMsgDlgButtons; HelpCtx: Longint; X, Y: Integer): Word;
	

Dialogs
	

Displays a message dialog box at the specified screen coordinates

function MessageDlgPosHelp(const Msg: string; DlgType: TMsgDlgType; Buttons: TMsgDlgButtons; HelpCtx: Longint; X, Y: Integer; const HelpFileName: string): Word;
	

Dialogs
	

Displays a message dialog box whose help is supplied in a named help file

function PromptForFileName(var AFileName: string; const AFilter: string = ''; const ADefaultExt: string = ''; const ATitle: string = ''; const AInitialDir: string = ''; SaveDialog: Boolean = False): Boolean;
	

Dialogs
	

Displays an open or save dialog, where the user can specify a file name.

function RemoteLoginDialog(var AUserName, APassword: string): Boolean;
	

DBLog-

Dlb
	

Brings up the database Login dialog to allow the user to connect to a database server.

function SelectDirectory(const Caption: string; const Root: WideString; out Directory: string): Boolean; overload;

function SelectDirectory(var Directory: string; Options: TSelectDirOpts; HelpCtx: Longint): Boolean; overload;
	

FileCtrl
	

Brings up a dialog to allow the user to enter a directory name

procedure ShowMessage(const Msg: string);
	

Dialogs
	

Displays a message box with an OK button

procedure ShowMessageFmt(const Msg: string; Params: array of const);
	

Dialogs
	

Displays a message box with a formatted message

procedure ShowMessagePos(const Msg: string; X, Y: Integer);
	

Dialogs
	

Displays a message box at a specified location.

function StripAllFromResult(const AModalResult: TModalResult): TModalResult;
	

Controls
	

Converts a TModalResult value from a constant that refers to all to the corresponding simple constant.

 
7.       Dynamic Memory Allocation Routines

 
	

 
	

Checked on 27-5-2004

procedure Dispose(var P: Pointer);
	

System
	

Releases memory allocated for a dynamic variable

procedure Finalize( var V [; Count: Integer] );
	

System
	

Uninitializes a dynamically allocated variable.

procedure FreeMem(var P: Pointer[; Size: Integer]);
	

System
	

Disposes of a dynamic variable of a given size

procedure GetMem(var P: Pointer; Size: Integer);
	

System
	

Creates a dynamic variable and a pointer to the address of the block

procedure Initialize(var V [ ; Count: Integer ] );
	

System
	

Initializes a dynamically allocated variable

procedure New(var P: Pointer);
	

System
	

Creates a new dynamic variable and sets P to point to it

 
8.       Exception Handling Routines

 
	

 
	

Updated on 27-5-2004

function AcquireExceptionObject(X);
	

System
	

Allows an exception object to persist after the except clause exits.

procedure DatabaseError(const Message: string; Component: TComponent = nil);
	

Db
	

Creates and raises an EDatabaseError exception

procedure DatabaseErrorFmt(const Message: string; const Args: array of const; Component: TComponent = nil);
	

Db
	

Creates and raises an EDatabaseError exception with a formatted error message

var ErrorAddr: Pointer;
	

System
	

Contains the address of a statement causing a runtime error

var ErrorProc: Pointer;
	

System
	

Points to the RTL run-time error handler

function ExceptAddr: Pointer;
	

Sysutils
	

Returns the address at which the current exception was raised

function ExceptionErrorMessage(ExceptObject: TObject; ExceptAddr: Pointer; Buffer: PChar; Size: Integer): Integer;
	

SysUtils
	

Formats a standard error message.

function ExceptObject: TObject;
	

SysUtils
	

Returns a reference to the object associated with the current exception

var ExceptProc: Pointer;
	

System
	

Points to the lowest-level RTL exception handler

function GetLastError: Integer; stdcall;
	

System
	

Returns the last error reported by an operating system API call.

procedure OutOfMemoryError;
	

SysUtils
	

Raises an EOutOfMemory exception

procedure RaiseLastOSError;
	

SysUtils
	

Raises an exception for the last occurring OS or system library error.

procedure RaiseLastWin32Error;
	

SysUtils
	

Raises an exception for the last occurring Win32 error

function ReleaseExceptionObject(X);
	

System
	

Decrements the reference count on an exception object that was incremented by a call to AcquireExceptionObject.

function SetErrorProc(ErrorProc: TSocketErrorProc): TSocketErrorProc;
	

ScktComp
	

Replaces the exception handler for error messages that are received from a Windows socket connection

procedure ShowException(ExceptObject: TObject; ExceptAddr: Pointer);
	

SysUtils
	

Displays an exception message with its physical address

function SysErrorMessage(ErrorCode: Integer): string;
	

SysUtils
	

Converts Win32 API error codes into strings

function Win32Check(RetVal: BOOL): BOOL;
	

SysUtils
	

Checks the return value of a Windows API call and raises an appropriate exception when it indicates failure

 
9.       File Management Routines

 
	

 
	

Updated on 26-5-2004

procedure AssignFile(var F; FileName: string);
	

System
	

Associates the name of an external file with a file variable

procedure ChDir(S: string);
	

System
	

Changes the current directory

procedure CloseFile(var F);
	

System
	

Terminates the association between file variable and an external disk file (Delphi)

function CreateDir(const Dir: string): Boolean;
	

SysUtils
	

Creates a new directory

function DeleteFile(const FileName: string): Boolean;
	

SysUtils
	

Deletes a file from disk.

function DirectoryExists(Name: string): Boolean;
	

FileCtrl
	

Determines whether a specified directory exists

function DiskFree(Drive: Byte): Int64;
	

Sysutils
	

Returns the number of free bytes on a specified drive

function DiskSize(Drive: Byte): Int64;
	

SysUtils
	

Returns the size, in bytes, of a specified drive

const fmClosed // closed file

const fmInput  // reset file (TTextRec)

const fmOutput // rewritten file (TTextRec)

const fmInOut  // reset or rewritten file (TFileRec)

const fmCRLF   // DOS-style EoL and EoF markers (TTextRec)

const fmMask  // mask out fmCRLF flag (TTextRec)
	

SysUtils
	

File mode constants are used to open and close disk files

const fmOpenRead;
const fmOpenWrite;
const fmOpenReadWrite;
const fmShareCompat;
const fmShareExclusive;
const fmShareDenyWrite;
const fmShareDenyRead;
const fmShareDenyNone;
	

SysUtils
	

File open mode constants are used to control the access mode to a file or stream

function FileAge(const FileName: string): Integer;
	

SysUtils
	

Returns the OS timestamp of a file.

procedure FileClose(Handle: Integer);
	

SysUtils
	

Closes a specified file

function FileCreate(const FileName: string): Integer;
	

SysUtils
	

Creates a new file.

function FileDateToDateTime(FileDate: Integer): TDateTime;
	

SysUtils
	

Converts a DOS date-time value to TDateTime value

function FileExists(const FileName: string): Boolean;
	

SysUtils
	

Tests if a specified file exists

function FileGetAttr(const FileName: string): Integer;
	

SysUtils
	

Returns the file attributes of FileName

function FileGetDate(Handle: Integer): Integer;
	

SysUtils
	

Returns a DOS date-time stamp for a specified file

function FileIsReadOnly(const FileName: string): Boolean;
	

SysUtils
	

Report if file is read-only.

function FileOpen(const FileName: string; Mode: LongWord): Integer;
	

SysUtils
	

Opens a specified file using a specified access mode

function FileRead(Handle: Integer; var Buffer; Count: Integer): Integer;
	

SysUtils
	

Reads a specified number of bytes from a file

function FileSearch(const Name, DirList: string): string;
	

SysUtils
	

Searches a specified DOS path for a file

function FileSeek(Handle, Offset, Origin: Integer): Integer; overload;
	

SysUtils
	

Positions the current file pointer in a previously opened file

function FileSetAttr(const FileName: string; Attr: Integer): Integer;
	

SysUtils
	

Sets the file attributes of a specified file

function FileSetDate(Handle: Integer; Age: Integer): Integer;
	

SysUtils
	

Sets the DOS time stamp for a specified file

function FileWrite(Handle: Integer; const Buffer; Count: Integer): Integer;
	

SysUtils
	

Writes the contents of a buffer to the current position in a file

procedure FindClose(var F: TSearchRec);
	

SysUtils
	

Releases memory allocated by FindFirst

function FindFirst(const Path: string; Attr: Integer; var F: TSearchRec): Integer;
	

SysUtils
	

Searches for the first instance of a file name with a given set of attributes in a specified directory

function FindNext(var F: TSearchRec): Integer;
	

SysUtils
	

Returns the next entry matching the name and attributes specified in a previous call to FindFirst

function ForceDirectories(Dir: string): Boolean;
	

FileCtrl
	

Creates all the directories along a directory path if they do not already exist

function GetCurrentDir: string;
	

SysUtils
	

Returns the name of the current directory

procedure GetDir(D: Byte; var S: string);
	

System
	

Returns the current directory for a specified drive

function RemoveDir(const Dir: string): Boolean;
	

SysUtils
	

Deletes an existing empty directory

function RenameFile(const OldName, NewName: string): Boolean;
	

SysUtils
	

Changes a file name

function SetCurrentDir(const Dir: string): Boolean;
	

SysUtils
	

Sets the current directory

 
10.    File Name Utilities

 
	

 
	

Updated on 26-5-2004

function ChangeFileExt(const FileName, Extension: string): string;
	

SysUtils
	

Changes the extension of a file name

function ExcludeTrailingBackslash(const S: string): string;
	

SysUtils
	

Returns a path name after removing any '\' at the end

function ExcludeTrailingPathDelimiter(const S: string): string;
	

SysUtils
	

Returns a path name without a trailing delimiter.

function ExpandFileName(const FileName: string): string;
	

SysUtils
	

Returns the full path name for a relative file name

function ExpandUNCFileName(const FileName: string): string;
	

SysUtils
	

Returns the full path of a file name with the network drive portion in UNC format

function ExtractFileDir(const FileName: string): string;
	

SysUtils
	

Extracts the drive and directory parts from FileName

function ExtractFileDrive(const FileName: string): string;
	

SysUtils
	

Returns the drive portion of a file name

function ExtractFileExt(const FileName: string): string;
	

SysUtils
	

Returns the extension portions of a file name

function ExtractFileName(const FileName: string): string;
	

SysUtils
	

Extracts the name and extension parts of a file name

function ExtractFilePath(const FileName: string): string;
	

SysUtils
	

Returns the drive and directory portions of a file name

function ExtractRelativePath(const BaseName, DestName: string): string;
	

SysUtils
	

Returns a relative path name, relative to a specific base directory

function ExtractShortPathName(const FileName: string): string;
	

SysUtils
	

Converts a file name to the short 8.3 form

function IncludeTrailingBackslash(const S: string): string;
	

SysUtils
	

Returns a path name after adding a '\' to the end if it is not already there

function IncludeTrailingPathDelimiter(const S: string): string;
	

SysUtils
	

Ensures path name ends with delimiter.

function IsPathDelimiter(const S: string; Index: Integer): Boolean;
	

SysUtils
	

Indicates whether the byte at position Index of a string is the backslash character

function MatchesMask(const Filename, Mask: string): Boolean;
	

Masks
	

Indicates whether a file name conforms to the format specified by a filter string

function MinimizeName(const Filename: TFileName; Canvas: TCanvas; MaxLen: Integer): TFileName;
	

FileCtrl
	

Shortens a fully qualified path name so that it can be drawn with a specified length limit.

procedure ProcessPath (const EditText: string; var Drive: Char; var DirPart: string; var FilePart: string);
	

FileCtrl
	

Parses a file name into its constituent parts

 
11.    Floating Point Conversion Routines

 
	

 
	

Checked on 26-5-2004

function FloatToCurr(const Value: Extended): Currency;
	

SysUtils
	

Converts a floating-point value to a Currency value.

procedure FloatToDecimal(var DecVal: TFloatRec; const Value; ValueType: TFloatValue; Precision, Decimals: Integer);
	

SysUtils
	

Converts a floating-point value to a decimal representation

function FloatToStr(Value: Extended): string;
	

Sysutils
	

Converts a floating point value to a string

function FloatToStrF(Value: Extended; Format: TFloatFormat; Precision, Digits: Integer): string;
	

SysUtils
	

Converts a floating point value to a string, using a specified Format, Precision, and Digits

function FloatToText(Buffer: PChar; const Value; ValueType: TFloatValue; Format: TFloatFormat; Precision, Digits: Integer): Integer;
	

SysUtils
	

Converts a floating-point value to an unterminated character string, using a specified Format, Precision and Digits

function FloatToTextFmt(Buffer: PChar; const Value; ValueType: TFloatValue; Format: PChar): Integer;
	

SysUtils
	

Converts a floating-point value to to an unterminated character string, using a specified format

function FormatFloat(const Format: string; Value: Extended): string;
	

SysUtils
	

Formats a floating point value

function StrToCurr(const S: string): Currency;
	

SysUtils
	

Converts a string to a Currency value

function StrToFloat(const S: string): Extended;
	

SysUtils
	

Converts a given string to a floating-point value

function TextToFloat(Buffer: PChar; var Value; ValueType: TFloatValue): Boolean;
	

SysUtils
	

Returns a floating-point value from a null-terminated string

 
12.    Flow Control Routines

 
	

 
	

Checked on 26-5-2004

procedure Abort;
	

SysUtils
	

Ends the current process without reporting an error

procedure Break;
	

System
	

Causes the flow of control to exit a for, while, or repeat statement

procedure Continue;
	

System
	

Allows the flow of control to proceed to the next iteration of for, while, or repeat statements

procedure Exit;
	

System
	

Exits from the current procedure

procedure Halt [ ( Exitcode: Integer) ];
	

System
	

Initiates abnormal termination of a program

procedure RunError [ ( Errorcode: Byte ) ];
	

System
	

Stops execution and generates a run-time error

 
13.    File I/O Procedures

 
	

 
	

Updated on 27-5-2004

procedure Append(var F: Text);
	

System
	

Prepares an existing file for adding text to the end

procedure BlockRead(var F: File; var Buf; Count: Integer [; var AmtTransferred: Integer]);
	

System
	

Reads one or more records from an open file into a variable

procedure BlockWrite(var f: File; var Buf; Count: Integer [; var AmtTransferred: Integer]);
	

System
	

Writes one or more records from a variable to an open file

function Eof(var F): Boolean;
	

System
	

Tests whether the file position is at the end of a file

var ErrOutput: Text;
	

System
	

Specifies a write-only file associated with stderr, usually the display.

var FileMode: Byte;
	

System
	

Indicates the access mode on typed and untyped files opened by the Reset class

function FilePos(var F): Longint;
	

System
	

Returns the current file position

function FileSize(var F): Integer;
	

System
	

Returns the size of a file in bytes or the number of records in a record file

var Input: Text;
	

System
	

Specifies a read-only file associated with an operating system's standard input device.

function IOResult: Integer;
	

System
	

Returns the status of the last File I/O operation performed

var Input: Text;
	

System
	

Specifies a read-only file associated with an operating system's standard input device

procedure MkDir(S: string);
	

System
	

Creates a new subdirectory

var Output: Text;
	

System
	

Specifies a write-only file associated with standard output, usually the display

procedure Rename(var F; Newname:string); procedure Rename(var F; Newname:PChar);
	

System
	

Changes the name of an external file

procedure Reset(var F [: File; RecSize: Word ] );
	

System
	

Opens an existing file

procedure Rewrite(var F: File [; Recsize: Word ] );
	

System
	

Creates a new file and opens it

procedure RmDir(S: string);
	

System
	

Deletes an empty subdirectory

procedure Seek(var F; N: Longint);
	

System
	

Moves the current position of a file to a specified component

procedure Truncate(var F);
	

System
	

Deletes all the records after the current file position

procedure Write(F, V1,...,Vn);
	

System
	

Writes to a typed file

 
14.    Measurement Conversion Routines

 
	

 
	

Updated on 27-5-2004

var

  auSquareMillimeters: TConvType;

  auSquareCentimeters: TConvType;

  auSquareDecimeters: TConvType;

  auSquareMeters: TConvType;

  auSquareDecameters: TConvType;

  auSquareHectometers: TConvType;

 

  auSquareKilometers: TConvType;

  auSquareInches: TConvType;

  auSquareFeet: TConvType;

  auSquareYards: TConvType;

  auSquareMiles: TConvType;

  auAcres: TConvType;

 

  auCentares: TConvType;

  auAres: TConvType;

  auHectares: TConvType;

  auSquareRods: TConvType;
	

StdConvs
	

Represent units that measure area

function CelsiusToFahrenheit(const AValue: Double): Double;
	

StdConvs
	

Converts a temperature expressed in degrees Celsius to the corresponding temperature in degrees Fahrenheit.

function CompatibleConversionType(const AType: TConvType; const AFamily: TConvFamily): Boolean;
	

ConvUtils
	

Indicates whether a specified conversion type is registered with a specified conversion family.

function CompatibleConversionTypes(const AFrom, ATo: TConvType): Boolean;
	

ConvUtils
	

Indicates whether the Convert function can convert between two specified conversion types.

var

  cbArea: TConvFamily;

  cbDistance: TConvFamily;

  cbMass: TConvFamily;

  cbTemperature: TConvFamily;

  cbTime: TConvFamily;

  cbVolume: TConvFamily;
	

StdConvs
	

Represent a family of measurement units.

function Convert(const AValue: Double; const AFrom, ATo: TConvType): Double; overload;

function Convert(const AValue: Double; const AFrom1, AFrom2, ATo1, ATo2: TConvType): Double; overload;
	

ConvUtils
	

Converts a measurement from one set of units to another.

function ConvertFrom(const AFrom: TConvType; const AValue: Double): Double;
	

ConvUtils
	

Converts a measurement from the specified units to the base units of its conversion family.

function ConvertTo(const AValue: Double; const ATo: TConvType): Double;
	

ConvUtils
	

Converts a measurement from the base units of a conversion family into a specified conversion type.

function ConvFamilyToDescription(const AFamily: TConvFamily: string;
	

ConvUtils
	

Returns the string description of what a conversion family measures.

function ConvTypeToDescription(const AType: TConvType: string;
	

ConvUtils
	

Returns the string description of a conversion type (measurement unit).

function ConvTypeToFamily(const AType: TConvType): TConvFamily; overload;

function ConvTypeToFamily(const AFrom, ATo: TConvType): TConvFamily; overload;
	

ConvUtils
	

Returns the identifier for the conversion family with which a conversion type or pair of types is registered.

function ConvUnitAdd(const AValue1: Double; const AType1: TConvType; const AValue2: Double; const AType2, AResultType: TConvType): Double;
	

ConvUtils
	

Adds two measurements and returns the result using a specified unit of measurement.

function ConvUnitCompareValue(const AValue1: Double; const AType1: TConvType; const AValue2: Double; const AType2: TConvType): TValueRelationship;
	

ConvUtils
	

Indicates the relationship between two measurements.

function ConvUnitDec(const AValue: Double; const AType: TConvType; const AAmount: Double; const AAmountType: TConvType): Double; overload;

function ConvUnitDec(const AValue: Double; const AType, AAmountType: TConvType): Double; overload;
	

ConvUtils
	

Decrements a specified measurement by a specified amount.

function ConvUnitDiff(const AValue1: Double; const AType1: TConvType; const AValue2: Double; const AType2, AResultType: TConvType): Double;
	

ConvUtils
	

Subtracts one measurement from another and returns the result using a specified unit of measurement.

function ConvUnitInc(const AValue: Double; const AType: TConvType; const AAmount: Double, const AAmountType: TConvType): Double; overload;

function ConvUnitInc(const AValue: Double; const AType, AAmountType: TConvType): Double; overload;
	

ConvUtils
	

Increments a specified measurement by a specified amount.

function ConvUnitSameValue(const AValue1: Double; const AType1: TConvType; const AValue2: Double; const AType2: TConvType): Boolean;
	

ConvUtils
	

Indicates whether two measurements are equivalent.

function ConvUnitToStr(const AValue: Double; const AType: TConvType ): string;
	

ConvUtils
	

Formats a measurement and its conversion unit into a human-readable string.

function ConvUnitWithinNext(const AValue, ATest: Double; const AType: TConvType; const AAmount: Double; const AAmountType: TConvType): Boolean;
	

ConvUtils
	

Indicates whether a specified measurement exceeds another measurement by at most a specified amount.

function ConvUnitWithinPrevious(const AValue, ATest: Double; const AType: TConvType; const AAmount: Double; const AAmountType: TConvType): Boolean;
	

ConvUtils
	

Indicates whether a specified measurement is at most a specified amount less than another measurement.

function CycleToDeg(const Cycles: Extended): Extended;
	

Math
	

Converts an angle measurement from cycles to degrees.

function CycleToGrad(const Cycles: Extended): Extended;
	

Math
	

Converts an angle measurement from cycles to grads.

function CycleToRad(Cycles: Extended): Extended;
	

Math
	

Converts an angle measurement from cycles to radians

function DateTimeToJulianDate(const AValue: TDateTime ): Double;
	

DateUtils
	

Converts a TDateTime value into a Julian date.

function DateTimeToModifiedJulianDate(const AValue: TDateTime): Double;
	

DateUtils
	

Converts a TDateTime value into a modified Julian date.

function DateTimeToUnix(const AValue: TDateTime ): Int64;
	

DateUtils
	

Converts a TDateTime value into a Unix-based date-and-time value.

function DegToCycle(const Degrees: Extended): Extended;
	

Math
	

Returns the value of a degree measurement expressed in cycles.

function DegToGrad(const Degrees: Extended): Extended;
	

Math
	

Returns the value of a degree measurement expressed in grads.

function DegToRad(Degrees: Extended): Extended;
	

Math
	

Returns the value of a degree measurement expressed in radians

function DescriptionToConvFamily(const ADescription: string; out AFamily: TConvFamily): Boolean;
	

ConvUtils
	

Retrieves the identifier for a conversion family given its name.

function DescriptionToConvType(const AFamily, TConvFamily; const ADescription: string; out AType: TConvType): Boolean; overload;

function DescriptionToConvType(const ADescription: string; out AType: TConvType): Boolean; overload;
	

ConvUtils
	

Retrieves the identifier for a conversion type given its name and family.

var

  duMicromicrons: TConvType;

  duAngstroms: TConvType;

  duMillimicrons: TConvType

  duMicrons: TConvType;

  duMillimeters: TConvType;

  duCentimeters: TConvType;

 

  duDecimeters: TConvType;

  duMeters: TConvType;

  duDecameters: TConvType;

  duHectometers: TConvType;

  duKilometers: TConvType;

  duMegameters: TConvType;

 

  duGigameters: TConvType;

  duInches: TConvType;

  duFeet: TConvType;

  duYards: TConvType;

  duMiles: TConvType;

  duNauticalMiles: TConvType

  duAstronomicalUnits: TConvType

 

  duLightYears: TConvType;

  duParsecs: TConvType;

  duCubits: TConvType;

  duFathoms: TConvType;

  duFurlongs: TConvType;

  duHands: TConvType;

  duPaces: TConvType;

 

  duRods: TConvType;

  duChains: TConvType;

  duLinks: TConvType;

  duPicas: TConvType;

  duPoints: TConvType;
	

StdConvs
	

Represent units that measure distance.

function FahrenheitToCelsius(const AValue: Double): Double;
	

StdConvs
	

Converts a temperature expressed in degrees Fahrenheit to the corresponding temperature in degrees Celsius.

procedure GetConvFamilies(out AFamilies: TConvFamilyArray);
	

ConvUtils
	

Returns a list of all registered conversion families.

procedure GetConvTypes(const AFamily: TConvFamily; out ATypes: TConvTypeArray);
	

ConvUtils
	

Returns a list of all registered conversion types in a specified conversion family.

function GradToCycle(const Grads: Extended): Extended;
	

Math
	

Converts grad measurements to cycles.

function GradToDeg(const Grads: Extended): Extended;
	

Math
	

Converts grad measurements to degrees.

function GradToRad(Grads: Extended): Extended;
	

Math
	

Converts grad measurements to radians

function JulianDateToDateTime(const AValue: Double): TDateTime;
	

DateUtils
	

Converts a Julian date to a TDateTime value.

var

  muNanograms: TConvType;

  muMicrograms: TConvType;

  muMilligrams: TConvType

  muCentigrams: TConvType;

  muDecigrams: TConvType;

  muGrams: TConvType;

  muDecagrams: TConvType

 

  muHectograms: TConvType;

  muKilograms: TConvType;

  muMetricTons: TConvType;

  muDrams: TConvType

  muGrains: TConvType;

  muLongTons: TConvType

  muTons: TConvType;

 

  muOunces: TConvType

  muPounds: TConvType;

  muStones: TConvType
	

StdConvs
	

Represent units that measure weight.

function ModifiedJulianDateToDateTime(const AValue: Double): TDateTime;
	

DateUtils
	

Converts a modified Julian date to a TDateTime value.

function RadToCycle(Radians: Extended): Extended;
	

Math
	

Converts radians to cycles

function RadToDeg(Radians: Extended): Extended;
	

Math
	

Converts radians to degrees

function RadToGrad(Radians: Extended): Extended;
	

Math
	

Converts radians to grads

procedure RaiseConversionError(const AText: string; const AArgs: array of const); overload;

procedure RaiseConversionError(const AText: string); overload;
	

ConvUtils
	

Raises an EConversionError exception.

function RegisterConversionFamily(const ADescription: string): TConvFamily;
	

ConvUtils
	

Registers a new conversion family and returns its identifier.

function RegisterConversionType(const AFamily: TConvFamily; const ADescription: string, const AFactor: Double): TConvType; overload;

function RegisterConversionType(const AFamily: TConvFamily; const ADescription: string, const AToCommonProc, AFromCommonProc: TConversionProc): TConvType; overload;

function RegisterConversionType(AConvTypeInfo: TConvTypeInfo; out AType: TConvType): Boolean; overload;
	

ConvUtils
	

Registers a new conversion type and returns its identifier.

function StrToConvUnit(AText: string; out AType: TConvType): Double;
	

ConvUtils
	

Parses a string into a value and conversion type.

var

  tuCelsius: TConvType;

  tuKelvin: TConvType;

  tuFahrenheit: TConvType;

  tuRankine: TConvType;

  tuReamur: TConvType;
	

StdConvs
	

Represent units that measure temperature.

var

  tuMilliSeconds: TConvType;

  tuSeconds: TConvType;

  tuMinutes: TConvType;

  tuHours: TConvType;

  tuDays: TConvType;

  tuWeeks: TConvType;

  tuFortnights: TConvType;

 

  tuMonths: TConvType;

  tuYears: TConvType;

  tuDecades: TConvType;

  tuCenturies: TConvType;

  tuMillennia: TConvType;

  tuDateTime: TConvType;

  tuJulianDate: TConvType;

 

  tuModifiedJulianData: TConvType;
	

StdConvs
	

Represent units that measure time.

function TryConvTypeToFamily(const AType: TConvType); out AFamily: TConvFamily) : Boolean; overload;

function TryConvTypeToFamily(const AFrom, ATo: TConvType; out AFamily: TConvFamily) : Boolean; overload;
	

ConvUtils
	

Retrieves the identifier for the conversion family with which a conversion type or pair of types is registered.

function TryJulianDateToDateTime(const AValue: Double; out ADateTime: TDateTime): Boolean;
	

DateUtils
	

Converts a Julian date to a TDateTime value.

function tryModifiedJulianDateToDateTime(const AValue: Double; out ADateTime: TDateTime): Boolean;
	

DateUtils
	

Converts a modified Julian date to a TDateTime value.

function TryStrToConvUnit(AText: string; out AValue: Double; out AType: TConvType): Boolean;
	

ConvUtils
	

Parses a string into a value and conversion type.

function UnixToDateTime(const AValue: Int64): TDateTime;
	

DateUtils
	

Converts a Unix-based date-and-time value to a TDateTime value.

procedure UnregisterConversionFamily(const AFamily: TConvFamily);
	

ConvUtils
	

Unregisters a conversion family previously registered using RegisterConversionFamily.

procedure UnregisterConversionType(const AType: TConvType);
	

ConvUtils
	

Unregisters a conversion type previously registered using RegisterConversionType.

var

  vuCubicMillimeters: TConvType;

  vuCubicCentimeters: TConvType;

  vuCubicDecimeters: TConvType;

  vuCubicMeters: TConvType;

  vuCubicDecameters: TConvType;

  vuCubicHectometers: TConvType;

  vuCubicKilometers: TConvType;

  vuCubicInches: TConvType;

  vuCubicFeet: TConvType;

  vuCubicYards: TConvType;

  vuCubicMiles: TConvType;

  vuMilliLiters: TConvType;

 

  vuCentiLiters: TConvType;

  vuDeciLiters: TConvType;

  vuLiters: TConvType;

  vuDecaLiters: TConvType;

  vuHectoLiters: TConvType;

  vuKiloLiters: TConvType;

 

  vuAcreFeet: TConvType;

  vuAcreInches: TConvType;

  vuCords: TConvType;

  vuCordFeet: TConvType;

  vuDecisteres: TConvType;

  vuSteres: TConvType;

  vuDecasteres: TConvType;

 

  vuFluidGallons: TConvType;

  vuFluidQuarts: TConvType;

  vuFluidPints: TConvType;

  vuFluidCups: TConvType;

  vuFluidGills: TConvType;

  vuFluidOunces: TConvType;

 

  vuFluidTablespoons: TConvType;

  vuFluidTeaspoons: TConvType;

  vuDryGallons: TConvType;

  vuDryQuarts: TConvType;

  vuDryPints: TConvType;

  vuDryPecks: TConvType;

 

  vuDryBuckets: TConvType;

  vuDryBushels: TConvType;

  vuUKGallons: TConvType;

  vuUKPottles: TConvType;

  vuUKQuarts: TConvType;

  vuUKPints: TConvType;

  vuUKGills: TConvType;

 

  vuUKOunces: TConvType;

  vuUKPecks: TConvType;

  vuUKBuckets: TConvType;

  vuUKBushels: TConvType;
	

StdConvs
	

Represent units that measure distance.

 
15.    Memory Management Routines

 
	

 
	

Checked on 27-5-2004

function AllocMem(Size: Cardinal): Pointer;
	

SysUtils
	

Allocates a memory block and initializes each byte to zero

var AllocMemCount: Integer;
	

System
	

Represents the total number of allocated memory blocks in an application

var AllocMemSize: Integer;
	

System
	

Represents the total size of allocated memory blocks

function GetHeapStatus: THeapStatus;
	

System
ShareMem
	

Returns the current status of the memory manager

procedure GetMemoryManager(var MemMgr: TMemoryManager);
	

System
	

Returns the entry points of the currently installed memory manager

var HeapAllocFlags: Word;
	

System
	

Flags that indicate how the memory manager obtains memory from the operating system

function IsMemoryManagerSet:Boolean;
	

System
	

Indicates whether the memory manager has been overridden using the SetMemoryManager procedure

procedure ReallocMem(var P: Pointer; Size: Integer);
	

System
	

Reallocates a dynamic variable

procedure SetMemoryManager(const MemMgr: TMemoryManager);
	

System
	

Sets entry points of the memory manager

function SysFreeMem(P: Pointer): Integer;
	

System
ShareMem
	

Frees the memory pointed to by a specified pointer

function SysGetMem(Size: Integer): Pointer;
	

System
ShareMem
	

Allocates a specified number of bytes and returns a pointer to them

function SysReallocMem(P: Pointer; Size: Integer): Pointer;
	

System
ShareMem
	

Returns a pointer to a specified number of bytes, preserving the values pointed to by the Pointer parameter

 
16.    Minimum and Maximum values

 
	

 
	

Created on 27-5-2004

const MaxComp
	

Math
	

 

const MaxDouble
	

Math
	

 

const MaxExtended
	

Math
	

 

const MaxInt
	

System
	

 

const MaxLongint
	

System
	

 

const MaxSingle
	

Math
	

 

const MinComp
	

Math
	

 

const MinDouble
	

Math
	

 

const MinExtended
	

Math
	

 

const MinSingle
	

Math
	

 

 
17.    Miscellaneous Routines

 
	

 
	

Checked on 27-5-2004

procedure Assert(expr : Boolean [; const msg: string]);
	

System
	

Tests whether a boolean expression is successful

var AssertErrorProc: Pointer;
	

System
	

Points to the assertion error-handler.

function Assigned(var P): Boolean;
	

System
	

Tests for a nil (unassigned) pointer or procedural variable

procedure Beep;
	

SysUtils
	

Generates a standard beep using the computer speaker

function CountGenerations(Ancestor, Descendant: TClass): Integer;
	

Classes
	

Returns the number of intermediate classes between a derived class and its ancestor.

var DefaultTextLineBreakStyle: TTextLineBreakStyle;
	

System
	

Specifies the characters that are used by default to separate lines in text.

var DLLProc: Pointer;
	

System
	

Points to a procedure invoked by a DLL entry point

function FormatMaskText(const EditMask: string; const Value: string): string;
	

Mask
	

Returns a string formatted using an edit mask

procedure FreeAndNil(var Obj);
	

SysUtils
	

Frees an object reference and replaces the reference with nil

GetEnvironmentVariable(Name: string): string;
	

SysUtils
	

Returns environment variable value.

function Hi(X): Byte;
	

System
	

Returns the high-order byte of X as an unsigned value

function High(X);
	

System
	

Returns the highest value in the range of an argument

function HtmlTable(DataSet: TDataSet; DataSetHandler: TDSTableProducer; MaxRows: Integer): string;
	

DbWeb
	

Generates the HTML image of a dataset, using the properties and events of a table producer object

function IfThen(AValue: Boolean; const ATrue: Integer; const AFalse: Integer = 0): Integer; overload;

function IfThen(AValue: Boolean; const ATrue: Int64; const AFalse: Int64 = 0): Int64; overload;

function IfThen(AValue: Boolean; const ATrue: Double; const

 AFalse: Double = 0.0): Double; overload;

function IfThen(AValue: Boolean; const ATrue: string; const

 AFalse: string = ''): string; overload;
	

Math

StrUtils
	

Conditionally returns one of two specified values.

function IsAccel(VK: Word; const Str: string): Boolean;
	

Forms
	

Indicates whether a particular character is an accelerator character (or hot key) within a given menu caption or other text string

function IsValidIdent(const Ident: string): Boolean;
	

SysUtils
	

Tests for a valid Pascal identifier

function Lo(X): Byte;
	

System
	

Returns the low order Byte of argument X

function Low(X);
	

System
	

Returns the lowest value in a range

procedure Move(const Source; var Dest; Count: Integer);
	

System
	

Copies bytes from a source to a destination

function SizeOf(X): Integer;
	

System
	

Returns the number of bytes occupied by a variable or type

function Slice(var A: array; Count: Integer): array;
	

System
	

Returns a sub-section of an array

procedure UniqueString(var S: string);
	

System
	

Ensures that a given string has a reference count of one

function ValidParentForm(Control: TControl): TCustomForm;
	

Forms
	

Returns the form or property page that contains a specified control

 
18.    Numeric Formatting Routines

 
	

 
	

Checked on 27-5-2004

function CurrToStr(Value: Currency): string;
	

SysUtils
	

Formats a Currency value as a string

function CurrToStrF(Value: Currency; Format: TFloatFormat; Digits: Integer): string;
	

SysUtils
	

Converts a Currency value to a string, using a specified format

function DoubleToComp(adouble: Double; var result: Comp);
	

System
	

Converts a Double value to a Comp

function FormatCurr(const Format: string; Value: Currency): string;
	

SysUtils
	

Formats a Currency object

function IntToHex(Value: Integer; Digits: Integer): string; overload;
	

SysUtils
	

Returns the hex representation of an integer

function IntToStr(Value: Integer): string; overload;
	

SysUtils
	

Converts an integer to a string

 
19.    Ordinal Routines

 
	

 
	

Checked on 27-5-2004

procedure Dec(var X[ ; N: Longint]);
	

System
	

Decrements a variable by 1 or N

procedure Inc(var X [ ; N: Longint ] );
	

System
	

Increments an ordinal value by one or N

function Odd(X: Longint): Boolean;
	

System
	

Returns True if argument is an odd number

function Ord(X): Longint;
	

System
	

Returns the ordinal value of an ordinal-type expression

function Pred(X);
	

System
	

Returns the predecessor of the argument

function Succ(X);
	

System
	

Returns the successor of an argument

 
20.    Printer Support

 
	

 
	

Created on 27-5-2004

function Printer: TPrinter;
	

Printers
	

Returns a global instance of TPrinter to manage interaction with the printer.

function SetPrinter(NewPrinter: TPrinter): TPrinter;
	

Printers
	

Replaces the global instance of TPrinter that manages interaction with the printer.

 
21.    Pointer and Address Routines

 
	

 
	

Updated on 27-5-2004

function Addr(X): Pointer;
	

System
	

Returns a pointer to a specified object

procedure FreeAndNil(var Obj);
	

SysUtils
	

Frees an object reference and replaces the reference with nil.

function Ptr(Address: Integer): Pointer;
	

System
	

Converts a specified address to a pointer

 
22.    Random Number Routines

 
	

 
	

Updated on 27-5-2004

function RandG(Mean, StdDev: Extended): Extended;
	

Math
	

Generates random numbers with Gaussian distribution

function Random [ ( Range: Integer) ];
	

System
	

Generates random numbers within a specified range

function RandomFrom(const AValues: array of Double): Double; overload;

function RandomFrom(const AValues: array of Integer): Integer; overload;

function RandomFrom(const AValues: array of Int64): Int64; overload;

function RandomFrom(const AValues: array ofstring): string; overload;
	

Math

StrUtils
	

Returns a randomly selected element from an array.

procedure Randomize;
	

System
	

Initializes the random number generator with a random value

function RandomRange(const AFrom, ATo: Integer): Integer;
	

Math
	

Returns a random integer from a specified range.

var RandSeed: LongInt;
	

System
	

RandSeed stores the built-in random number generator's seed

 
	

 
	

 

 
23.    Set Handling Routines

 
	

 
	

Checked on 27-5-2004

procedure Exclude(var S: set of T;I:T);
	

System
	

Removes an element from a set

procedure Include(var S: set of T; I:T);
	

System
	

Adds an element to a set

 
24.    String Formatting Routines

 
	

 
	

Checked on 27-5-2004

function FmtLoadStr(Ident: Integer; const Args: array of const): string;
	

SysUtils
	

Returns formatted output using a resourced format string

procedure FmtStr(var StrResult: string; const Format: string; const Args: array of const);
	

SysUtils
	

Assembles a formatted string using a format string and an array of arguments

function Format(const Format: string; const Args: array of const): string;
	

SysUtils
	

Returns a formatted string assembled from a format string and an array of arguments

function FormatBuf(var Buffer; BufLen: Cardinal; const Format; FmtLen: Cardinal; const Args: array of const): Cardinal;
	

SysUtils
	

Formats the arguments from an array, placing the result in a buffer

procedure GetFormatSettings;
	

SysUtils
	

Resets the date and number format parameters to default values

function StrFmt(Buffer, Format: PChar; const Args: array of const): PChar;
	

SysUtils
	

Formats entries in an array

function StrLFmt(Buffer: PChar; MaxLen: Cardinal; Format: PChar; const Args: array of const): PChar;
	

SysUtils
	

Formats a series of arguments from a specified open array into a buffer

function WideFormat(const Format: WideString; const Args: arrayofconst): WideString;
	

SysUtils
	

Formats the series of arguments in the open array Args.

function WideFormatBuf(var Buffer; BufLen: Cardinal; const Format; FmtLen: Cardinal; const Args: arrayofconst): Cardinal;
	

 
	

Formats the series of arguments in the open array Args.

 
25.    String Handling Routines

 
	

 
	

Updated 24-5-2004

function AdjustLineBreaks(const S: string): string;
	

SysUtils
	

Standardizes line break characters to CR/LF

function AnsiCompareStr(const S1, S2: string): Integer;
	

SysUtils
	

Compares strings based on the current Windows locale with case sensitivity

function AnsiCompareText(const S1, S2: string): Integer;
	

SysUtils
	

Compares strings based on the current Windows locale without case sensitivity

function AnsiContainsStr(const AText,  SubText: string): Boolean;
	

StrUtils
	

Indicates whether one string is a (case-sensitive) substring of another.

function AnsiContainsText(const AText, ASubText: string): Boolean;
	

StrUtils
	

Indicates whether one string is a (case-insensitive) substring of another.

function AnsiDequotedStr(const S: string; AQuote: Char): string;
	

SysUtils
	

Converts a quoted string into an unquoted one.

function AnsiEndsStr(const ASubText, AText: string): Boolean;
	

StrUtils
	

Indicates whether one string is a (case-sensitive) suffix of another.

function AnsiEndsText(const ASubText, AText: string): Boolean;
	

StrUtils
	

Indicates whether one string is a (case-insensitive) suffix of another.

function AnsiExtractQuotedStr(var Src: PChar; Quote: Char): string;
	

SysUtils
	

Converts a quoted string into an unquoted string

function AnsiIndexStr(const AText: string; const AValues: array of string): Integer;
	

StrUtils
	

Provides the index of a specified string in an array of strings.

function AnsiIndexText(const AText: string; const AValues: array of string): Integer;
	

StrUtils
	

Provides the index of a specified string in an array of strings.

function AnsiLowerCase(const S: string): string;
	

SysUtils
	

Returns a string that is a copy of the given string converted to lower case

function AnsiMatchStr(const AText: string; const AValues: array of string): Integer;
	

StrUtils
	

Indicates whether an array of strings contains an exact match to a specified string.

function AnsiMatchText(const AText: string; const AValues: array of string): Boolean;
	

StrUtils
	

Indicates whether an array of strings contains a case-insensitive match to a specified string.

function AnsiPos(const Substr, S: string): Integer;
	

SysUtils
	

Locates the position of a sub-string within a string

function AnsiQuotedStr(const S: string; Quote: Char): string;
	

SysUtils
	

Returns the quoted version of a string

function AnsiReplaceStr(const AText, AFromText, AToText: string): string;
	

StrUtils
	

Replaces all occurrences of a substring with another string.

function AnsiReplaceText(const AText, AFromText, AToText: string): string;
	

StrUtils
	

Replaces all case-insensitive matches of a substring with another string.

var AnsiResemblesProc: TCompareTextProc = SoundExProc;
	

StrUtils
	

Controls the algorithm used by AnsiResemblesText to determine when two strings are similar.

function AnsiResemblesText(const AText, AOther: string): Boolean;
	

StrUtils
	

Indicates whether two strings are similar.

function AnsiSameStr(const S1, S2: string): Boolean;
	

SysUtils
	

Compares strings based on the current Windows locale with case sensitivity

function AnsiSameText(const S1, S2: string): Boolean;
	

Sysutils
	

Compares strings based on the current Windows locale without case sensitivity

function AnsiStartsStr(const ASubText, AText: string): Boolean;
	

StrUtils
	

Indicates whether one string is a (case-sensitive) prefix of another.

function AnsiStartsText(const ASubText, AText: string): Boolean;
	

StrUtils
	

Indicates whether one string is a (case-insensitive) prefix of another.

function AnsiUpperCase(const S: string): string;
	

SysUtils
	

Converts a string to upper case

function CompareStr(const S1, S2: string): Integer;
	

SysUtils
	

Compares two strings case sensitively

function CompareText(const S1, S2: string): Integer;
	

SysUtils
	

Compares two strings by ordinal value without case sensitivity

function Concat(s1 [, s2,..., sn]: string): string;
	

System
	

Concatenates two or more strings into one

function Copy(S; Index, Count: Integer): string;
function Copy(S; Index, Count: Integer): array;
	

System
	

Returns a substring of a string or a segment of a dynamic array

function DecodeSoundExInt(AValue: Integer): string;
	

StrUtils
	

Converts an integer representation of a SoundEx encoding into the corresponding phonetic string.

function DecodeSoundExWord(AValue: Word): string;
	

StrUtils
	

Converts a Word representation of a SoundEx encoding into the corresponding phonetic string.

procedure Delete(var S: string; Index, Count:Integer);
	

System
	

Removes a substring from a s string

function DupeString(const AText: string; ACount: Integer): string;
	

StrUtils
	

Returns the concatenation of a string with itself a specified number of repeats.

procedure Insert(Source: string; var S: string; Index: Integer);
	

System
	

Inserts a substring into a string beginning at a specified point

function IsDelimiter(const Delimiters, S: string; Index: Integer): Boolean;
	

SysUtils
	

Indicates whether a specified character in a string matches one of a set of delimiters

function LastDelimiter(const Delimiters, S: string): Integer;
	

SysUtils
	

Returns the byte index in S of the last character that matches any character in the Delimiters AnsiString

function LeftStr(const AText: string; ACount: Integer): string;
	

StrUtils
	

Returns the substring of a specified length that appears at the start of a string.

function Length(S): Integer;
	

System
	

Returns the number of characters in a string or elements in an array

function LowerCase(const S: string): string;
	

SysUtils
	

Converts an ASCII string to lowercase

function MidStr(const AText: string; const AStart, ACount: Integer): string;
	

StrUtils
	

Returns the substring of a specified length that appears at a specified position in a string.

const NullStr: PString;
	

SysUtils
	

Declares a pointer to EmptyStr

function Pos(Substr: string; S: string): Integer;
	

System
	

Returns the index value of the first character in a specified substring that occurs in a given string

function QuotedStr(const S: string): string;
	

SysUtils
	

Returns the quoted version of a string

function ReverseString(const AText: string): string;
	

StrUtils
	

Returns the reverse of a specified string.

function RightStr(const AText: string; ACount: Integer): string;
	

StrUtils
	

Returns the substring of a specified length that appears at the end of a string.

function SameText(const S1, S2: string): Boolean;
	

StrUtils
	

Compares two strings by ordinal value without case sensitivity.

procedure SetLength(var S; NewLength: Integer);
	

System
	

Sets the length of a string or dynamic-array variable

procedure SetString(var s: string; buffer: PChar; len: Integer);
	

System
	

Sets the contents and length of the given string

function SoundEx(const AText: string; ALength: TSoundExLength  = 4): string;
	

StrUtils
	

Converts a string into its SoundEx representation.

function SoundExCompare(const AText, AOther: string; ALength: TSoundExLength = 4): Integer;
	

StrUtils
	

Compares the SoundEx representations of two strings.

function SoundExInt(const AText: string; ALength: TSoundExIntLength = 4): Integer;
	

StrUtils
	

Converts a string into an integer that represents its phonetic value.

function SoundExProc(const AText, AOther: string): Boolean;
	

StrUtils
	

Indicates whether two strings are similar.

function SoundExSimilar(const AText, AOther: string; ALength: TSoundExLength = 4): Boolean;
	

StrUtils
	

Indicates whether two strings are similar.

function SoundExWord(const AText: string): Word;
	

StrUtils
	

Converts a string into a Word that represents its phonetic value.

procedure Str(X [: Width [: Decimals ]]; var S);
	

System
	

Formats a string and returns it to a variable

function StringOfChar(Ch: Char; Count: Integer): string;
	

System
	

Returns a string with a specified number of repeating characters

function StringReplace(const S, OldPattern, NewPattern: string; Flags: TReplaceFlags): string;
	

SysUtils
	

Returns a string with occurrences of one substring replaced by another substring

function StuffString(const AText: string; AStart, ALength: Cardinal; const ASubText: string): string;
	

StrUtils
	

Inserts a substring into a specified position of a string, replacing the current characters.

function Trim(const S: string): string;
	

SysUtils
	

Trims leading and trailing spaces and control characters from a string

function TrimLeft(const S: string): string;
	

SysUtils
	

Trims leading spaces and control characters from a string

function TrimRight(const S: string): string;
	

SysUtils
	

Trims trailing spaces and control characters from a string

function UpperCase(const S: string): string;
	

SysUtils
	

Returns a copy of a string in uppercase

procedure Val(S; var V; var Code: Integer);
	

System
	

Converts a string to a numeric representation

function WideLowerCase(const S: WideString): WideString;
	

SysUtils
	

Returns Unicode string converted to lower case.

function WideSameStr(const S1, S2: WideString): Boolean;
	

SysUtils
	

Compares Unicode strings based on the current locale with case sensitivity.

function WideSameText(const S1, S2: WideString): Boolean;
	

SysUtils
	

Compares Unicode strings based on the current locale without case sensitivity.

function WideUpperCase(const S: WideString): WideString;
	

SysUtils
	

Returns Unicode string converted to upper case.

function WrapText(const Line, BreakStr: string; nBreakChars: TSysCharSet; MaxCol: Integer):string; overload;
	

SysUtils
	

Splits a string into multiple lines as its length approaches a specified size

function WrapText(const Line, MaxCol: Integer): string; overload;
	

SysUtils
	

Splits a string into multiple lines as its length approaches a specified size

 
26.    String Handling Routines (null terminated)

 
	

 
	

Checked on 24-5-2004

function AnsiStrComp(S1, S2: PChar): Integer;
	

SysUtils
	

Compares S1 to S2, with case sensitivity.

function AnsiStrIComp(S1, S2: PChar): Integer;
	

SysUtils
	

Compares null terminated character strings case insensitively.

function AnsiStrLComp(S1, S2: PChar; MaxLen: Cardinal): Integer;
	

SysUtils
	

Compares the first MaxLen bytes of two null-terminated strings, case-sensitively.

function AnsiStrLIComp(S1, S2: PChar; MaxLen: Cardinal): Integer;
	

SysUtils
	

Compares two strings, case-insensitively, up to the first MaxLen bytes.

function AnsiStrLower(Str: PChar): PChar;
	

SysUtils
	

Converts all characters in a null-terminated string to lower case.

function AnsiStrPos(Str, SubStr: PChar): PChar;
	

SysUtils
	

Returns a pointer to the first occurrence of SubStr in Str.

function AnsiStrRScan(Str: PChar; Chr: Char): PChar;
	

SysUtils
	

Returns a pointer to the last occurrence of a specified character in a specified string.

function AnsiStrScan(Str: PChar; Chr: Char): PChar;
	

SysUtils
	

Returns a pointer to first occurrence of a character in a string.

function AnsiStrUpper(Str: PChar): PChar;
	

SysUtils
	

Converts all characters in a null-terminated string to upper case.

function ExtractStrings(Separators, WhiteSpace: TSysCharSet; Content: PChar; Strings: TStrings): Integer;
	

Classes
	

Fills a string list with substrings parsed from a delimited list.

function LineStart(Buffer, BufPos: PChar): PChar;
	

Classes
	

Finds the end of the last whole line in a buffer.

function SearchBuf(Buf: PChar; BufLen: Integer; SelStart, SelLength: Integer; SearchString: String; Options: TStringSearchOptions = [soDown]): PChar;
	

StrUtils
	

Locates a substring within a text buffer.

function StrCat(Dest: PChar; const Source: PChar): PChar;
	

SysUtils
	

Appends a copy of Source to the end of Dest and returns the concatenated string.

function StrComp(const Str1, Str2 : PChar): Integer;
	

SysUtils
	

Compares two strings with case sensitivity.

function StrCopy(Dest: PChar; const Source: PChar): PChar;
	

SysUtils
	

Copies Source to Dest and returns Dest.

function StrECopy(Dest: PChar; const Source: PChar): PChar;
	

SysUtils
	

Copies null-terminated string.

function StrEnd(const Str: PChar): PChar;
	

SysUtils
	

Returns a pointer to the end of a null terminated string.

function StrIComp(const Str1, Str2:PChar): Integer;
	

SysUtils
	

Compares two strings without case sensitivity.

function StrLCat(Dest: PChar; const Source: PChar; MaxLen: Cardinal): PChar;
	

SysUtils
	

Appends up to a specified maximum number of characters to string.

function StrLComp(const Str1, Str2: PChar; MaxLen: Cardinal): Integer;
	

SysUtils
	

Compares up to a specified maximum number of characters in two strings.

function StrLCopy(Dest: PChar; const Source: PChar; MaxLen: Cardinal): PChar;
	

SysUtils
	

Copies up to a specified maximum number of characters from Source to Dest.

function StrLen(const Str: PChar): Cardinal;
	

SysUtils
	

Returns number of characters in a string excluding the null terminator.

function StrLIComp(const Str1, Str2: PChar; MaxLen: Cardinal): Integer;
	

SysUtils
	

Compares strings up to a specified maximum number of characters, without case sensitivity.

function StrLower(Str: PChar): PChar;
	

SysUtils
	

Converts a string to lowercase.

function StrMove(Dest: PChar; const Source: PChar; Count: Cardinal): PChar;
	

SysUtils
	

Copies specified number of characters to string.

function StrPCopy(Dest: PChar; const Source: string): PChar;
	

SysUtils
	

Copies a Pascal string to a null-terminated string.

function StrPLCopy(Dest: PChar; const Source: string; MaxLen: Cardinal): PChar;
	

SysUtils
	

Copies characters from a Pascal-style string into a null-terminated string.

function StrPos(const Str1, Str2: PChar): PChar;
	

SysUtils
	

Returns a pointer to the first occurrence of STR2 in STR1.

function StrRScan(const Str: PChar; Chr: Char): PChar;
	

SysUtils
	

Returns a pointer to the last occurrence of a specified character in a string.

function StrScan(const Str: PChar; Chr: Char): PChar;
	

SysUtils
	

Returns a pointer to first occurrence of a specified character in a string.

function StrUpper(Str: PChar): PChar;
	

SysUtils
	

Returns a string in upper case.

 
27.    Termination Procedure Support

 
	

 
	

Checked on 27-5-2004

procedure AddTerminateProc(TermProc: TTerminateProc);
	

SysUtils
	

Adds a terminate procedure to the system list of termination procedures

function CallTerminateProcs: Boolean;
	

Sysutils
	

Calls all of the functions in the termination procedure list

var ExitProc: Pointer;
	

SysUtils
	

Points to a program's exit procedure

 
28.    Text File Routines

 
	

 
	

Updated on 27-5-2004

procedure AssignPrn(var F: Text);
	

Printers
	

Assigns a text-file variable to the printer

function Eoln [(var F: Text) ]: Boolean;
	

System
	

Tests whether the file pointer is at the end of a line

procedure Erase(var F);
	

System
	

Deletes an external file

procedure Flush(var F: Text);
	

System
	

Empties the buffer of a text file opened for output

procedure Read(F , V1 [, V2,...,Vn ] );
procedure Read( [ var F: Text; ] V1 [, V2,...,Vn ] );
	

System
	

Read reads data from a file

procedure Readln([ var F: Text; ] V1 [, V2, ...,Vn ]);
	

System
	

Reads a line of text from a file

function SeekEof [ (var F: Text) ]: Boolean;
	

System
	

Returns the end-of-file status of a file

function SeekEoln [ (var F: Text) ]: Boolean;
	

System
	

Returns the end-of-line status of a file

procedure SetLineBreakStyle(var T: Text; Style: TTextLineBreakStyle);
	

System
	

Determines the end-of-line and end-of-file conventions for text file I/O.

procedure SetTextBuf(var F: Text; var Buf [ ; Size: Integer] );
	

System
	

Assigns an I/O buffer to a text file

procedure Write( [var F: Text; ] P1 [ , P2,..., Pn] );
	

System
	

Writes to a text file

procedure Writeln([ var F: Text; ] P1 [, P2, ...,Pn ] );
	

System
	

Writes an end-of-line marker to a text file

 
29.    Trigonometry Routines

 
	

 
	

Updated on 27-5-2004

function ArcCos(X: Extended): Extended;
	

Math
	

Calculates the inverse cosine of a given number

function ArcCosh(X: Extended): Extended;
	

Math
	

Calculates the inverse hyperbolic cosine of a given number

function ArcCot(const X: Extended): Extended;
	

Math
	

Calculates the inverse cotangent of a given number.

function ArcCotH(const X: Extended): Extended;
	

Math
	

Calculates the inverse hyperbolic cotangent of a given number.

function ArcCsc(const X: Extended): Extended;
	

Math
	

Calculates the inverse cosecant of a given number.

function ArcCscH(const X: Extended): Extended;
	

Math
	

Calculates the inverse hyperbolic cosecant of a given number.

function ArcSec(const X: Extended): Extended;
	

Math
	

Calculates the inverse secant of a given number.

function ArcSecH(const X: Extended): Extended;
	

Math
	

Calculates the inverse hyperbolic secant of a given number.

function ArcSin(X: Extended): Extended;
	

Math
	

Calculates the inverse sine of a given number

function ArcSinh(X: Extended): Extended;
	

Math
	

Calculates the inverse hyperbolic sine of a given number

function ArcTan(X: Extended): Extended;
	

System
	

Calculates the arctangent of a given number

function ArcTan2(Y, X: Extended): Extended;
	

Math
	

Calculates the arctangent angle and quadrant of a given number

function ArcTanh(X: Extended): Extended;
	

Math
	

Calculates the inverse hyperbolic tangent of a given number

function Cos(X: Extended): Extended;
	

System
	

Calculates the cosine of an angle

function Cosecant(const X: Extended): Extended;
	

Math
	

Returns the cosecant of an angle.

function Cosh(X: Extended): Extended;
	

Math
	

Calculates the hyperbolic cosine of an angle

function Cot(const X: Extended): Extended;
	

Math
	

Calculates the cotangent of an angle.

function Cotan(X: Extended): Extended;
	

Math
	

Calculates the cotangent of an angle

function CotH(const X: Extended): Extended;
	

Math
	

Calculates the hyperbolic cotangent of an angle.

function Csc(const X: Extended): Extended;
	

Math
	

Returns the cosecant of an angle.

function CscH(const X: Extended): Extended;
	

Math
	

Returns the hyperbolic cosecant of an angle.

function Hypot(X, Y: Extended): Extended;
	

Math
	

Calculates the length of the hypotenuse

function Sec(const X: Extended): Extended;
	

Math
	

Calculates the secant of an angle.

function Secant(const X: Extended): Extended;
	

Math
	

Calculates the secant of an angle.

function SecH(const X: Extended): Extended;
	

Math
	

Calculates the hyperbolic secant of an angle.

function Sin(X: Extended): Extended;
	

System
	

Returns the sine of the angle in radians

procedure SinCos(Theta: Extended; var Sin, Cos: Extended);
	

Math
	

Returns sine and cosine of an angle

function Sinh(X: Extended): Extended;
	

Math
	

Returns the hyperbolic sine of an angle

function Tan(X: Extended): Extended;
	

Math
	

Returns the tangent of X

function Tanh(X: Extended): Extended;
	

Math
	

Returns the hyperbolic tangent of X

 
30.    Type Conversion Routines

 
	

 
	

Updated on 27-5-2004

function BCDToCurr(const BCD: TBcd; var Curr: Currency): Boolean;
	

Db
	

Converts a binary coded decimal value (BCD) to the corresponding Currency value

procedure BinToHex(Buffer, Text: PChar; BufSize: Integer);
	

Classes
	

Converts a binary value into its hexadecimal representation.

function BoolToStr(B: Boolean; UseBoolStrs: Boolean = False): string;
	

SysUtils
	

Converts a boolean value to a string.

function Bounds(ALeft, ATop, AWidth, AHeight: Integer): TRect;
	

Classes
	

Returns the TRect for a rectangle of given dimensions

function CompToCurrency(acomp: Comp): Currency;
	

System
	

Converts a Comp value to a Currency value

function CompToDouble(acomp: Comp): Double;
	

System
	

Converts a Comp value to a Double value

function CurrToBCD(Curr: Currency; var BCD: FMTBcd; Precision: Integer=32; Decimals: Integer=4): Boolean;
	

DbCommon
	

Converts a Currency value to the corresponding binary coded decimal (BCD) value

procedure CurrencyToComp(acurrency: Currency; var result: Comp);
	

System
	

Converts a Currency value to a Comp value

var FalseBoolStrs: array of String;
	

SysUtils
	

Lists strings that can represent the boolean value False.

function HexToBin(Text, Buffer: PChar; BufSize: Integer): Integer
	

Classes
	

Converts a string of hexadecimal digits to the corresponding binary value.

function OffsetRect(var Rect: TRect; DX: Integer; DY: Integer): Boolean;
	

Types
	

Changes the origin of a rectangle by a specified amount.

function Point(AX, AY: Integer): TPoint;
	

Classes
	

Creates a TPoint structure from a pair of coordinates

function Rect(ALeft, ATop, ARight, ABottom: Integer): TRect; overload;

function Rect(const ATopLeft, ABottomRight: TPoint): TRect; overload;
	

Classes
	

Creates a TRect structure from a set of coordinates

function SmallPoint(AX, AY: SmallInt): TSmallPoint;
	

Classes
	

Creates a TSmallPoint structure from a pair of coordinates.

function StrToBool(const S: string): Boolean;
	

SysUtils
	

Converts a string to a boolean value.

function StrToInt(const S: string): Integer;
	

SysUtils
	

Converts a string that represents an integer (decimal or hex notation) to a number

function StrToInt64(const S: string): Int64;
	

SysUtils
	

Converts a string that represents an integer (decimal or hex notation) to a number

function StrToInt64Def(const S: string; Default: Int64): Int64;
	

SysUtils
	

Converts a string that represents an integer (decimal or hex notation) to a number

function StrToIntDef(const S: string; Default: Integer): Integer;
	

SysUtils
	

Converts a string that represents an integer (decimal or hex notation) to a number

var TrueBoolStrs: array of String;
	

SysUtils
	

Lists strings that can represent the boolean value True.


Next Functions:

FindComponent

wie in der Online-Hilfe nachzulesen ist "FindComponent" eine Methode der Klasse "TComponent", und da jedes Formular auch ein Objekt vom Typ "TComponent" ist (der Pfad im Hierarchiebaum ist: TObject -> TPersistent -> TComponent -> TControl -> TWinControl -> TScrollingWinControl -> TCustomForm -> TForm), mußt Du in Deinem Code einfach nur die FindComponent-Aufrufe den entsprechenden Forms zuordnen:

for i := 1 to 10 do
begin
LabelName := 'Label'+IntToStr(i);
TLabel(Form3.FindComponent(LabelName)).Caption
:= TLabel(Form6.FindComponent(LabelName)).Caption
end;


LED Wand
********************************
Leuchtdiode - LED
 

   Grundlegendes
	
Die Leuchtdiode besitzt, wie auch ihre nicht leuchtenden Verwandten eine Sperrrichtung. Daher muss beim Anschließen auf die richtige Polarität geachtet werden.  Dabei liegt Plus (+) an der Anode und Masse (-) an der Kathode. Die Anode erkennt man an dem etwas längerem Anschlussbeinchen, bzw.
die Kathode an der Abflachung des umlaufenden Bundes am eigentlichen LED-Körper (siehe Bild links). Die Abbildung rechts zeigt das Schaltzeichen einer Diode, wie es auf Schaltplänen zu finden ist. 	

   Vorwiderstand berechnen

Für eilige und die wissen worum es geht, hier ein Onlinerechner
Und weil's praktisch ist, auch gleich ein Onlinetool zum bestimmen des passenden Standardwiderstand
Da Leuchtdioden, je nach Farbe eine Spannung von 1,6 bis 2,9 Volt besitzen, kommt man in den seltensten Anwendungsfällen ohne einen Vorwiderstand aus. Der Vorwiderstand hat die Aufgabe, die vorhandene Spannung auf den der Farbe entsprechenden Wert zu bringen, um somit den Strom zu begrenzen, der durch die LED fließt. Die Standard-Typen beginnen bereits ab 5 mA zu leuchten und bei 15 mA leuchten sie meisten mit ihrer hellsten Leuchtstärke. Um das ganze etwas näher an der Praxis zu halten, folgt nun nicht seitenweise Algebra, wie auf 	

rot = 	1,6V
orange
grün
gelb
blau 	=
=
=
=

1,8V
2,1V
2,2V
2,9V
vielen Seiten zu finden, sondern nur das was tatsächlich benötigt wird.

Beispiel: Eine rote LED als Signalleuchte im PKW [ rot = 1,6V, LED-Strom = 0,015 A, PKW-Bordspannung 13,4V ]

Zunächst rechnet man aus, wie hoch der Spannungsabfall am Vorwiderstand sein muss

Dann den Widerstand mit dem Ohmschen Gesetz

Den Wert wird man allerdings schlecht als Widerstand bekommen, also nimmt man den nächst besten Wert  750 Ohm

Hier in diesem Beispiel sollte man noch mit einem günstigem Standard Kohleschicht-Widerstand mit 1/4 Watt auskommen, aber vollständigkeitshalber rechnen wir noch mal schnell die Verlustleistung nach.

 Zunächst mit dem Ohmschen Gesetz den Ist-Strom durch den angepassten Widerstand

Dann die Leistung die der Widerstand aufnehmen muss

Also noch unter den 0,250 Watt die ein Standard Kohleschicht-Widerstand abhaben kann und somit ist der Wert 750 Ohm bestätigt!

Wem das nun doch alles zu viel ist, der kann auch den Onlinerechner benutzen :-)

BCD:
Converts a string to the corresponding binary-coded decimal (BCD) value.

Use StrToBcd to convert a string into a binary-coded decimal value. The decimals and precision are inferred from the digits present in the string.

StrToBcd converts the string specified by aValue and returns the resulting BCD value. If aValue does not represent a value that can be expressed as a TBcd, StrToBcd raises an exception.

    Tip: To convert a string to a Bcd value without raising an exception for invalid strings, use the FMTBcd.TryStrToBcd function instead.



http://www.tech-ecke.de/index_quereinstieg.htm?/delphi/findcomponent.htm


-----------------------------------------------------
Many routines to work with date/time, strings, files, math are already present
in Delphi units. Through the versions many new routines are added. So is always
good take a look to Delphi's help file to try find out what are the new ones.
I really advice you to take a look to this list, because you'll find some
interesting routines.

The categories available are :
* Action support (4)
* Application-level information (16)
* Arithmetic routines (37)
* Backward compatibility routines (14)
* BCD support (3)
* BiDiMode support routines (1)
* Business and finance routines (12)
* Character manipulation routines (3)
* Character set conversions (14)
* Clipboard routines (2)
* COM utilities (44)
* Command line utilities (4)
* Comparison routines (3)
* Complex numbers (39)
* Component registration routines (3)
* Cursor management routines (4)
* Data Dictionary routines (22)
* Database routines (18)
* Date/time routines (177)
* Design tool registration routines (4)
* Dialog and message routines (20)
* Drag and Drop utilities (1)
* Dynamic allocation routines (6)
* Exception handling routines (18)
* File management routines (34)
* File name utilities (18)
* Floating point conversion routines (9)
* Flow control routines (6)
* FPU control (10)
* Geometric routines (7)
* Graphics utilities (24)
* Help Hint routines (2)
* HTTP utilities (11)
* I/O routines (19)
* Interface support routines (2)
* Maximum and minimum values (10)
* MBCS routines (1)
* MBCS utilities (15)
* Measurement conversion routines (58)
* Memory management routines (12)
* Menu support routines (13)
* Miscellaneous routines (23)
* Mouse handling utilities (4)
* Multi-tier support (9)
* Numeric formatting routines (6)
* Ordinal routines (5)
* Package support routines (11)
* Pointer and address routines (3)
* Printer support (2)
* Program control (1)
* Property category routines (3)
* Qt / CLX conversion routines (4)
* Random number routines (6)
* Set handling routines (2)
* Statistical routines (17)
* Streaming utilities (30)
* String formatting routines (9)
* String handling routines (66)
* String handling routines (null-terminated) (30)
* Termination procedure support (3)
* Text file routines (12)
* Thread management routines (6)
* Trigonometry routines (30)
* Type conversion routines (19)
* Unicode routines (3)
* Variant support routines (67)
* Web Services (6)
* Widget utilities (1)
* Windows controls utilities (10)
* XML support (17)

And here it is the index of teh available functions in Delphi 6 (Build 6.163):

Action support
==============

CreateAction function
- Creates an action of a specified type.

EnumRegisteredActions procedure
- Iterates through the list of registered actions, passing them to a user-defined
callback.

RegisterActions procedure
- Registers action classes so that they appear in the list of predefined actions
in the action list editor or customize dialog.

UnRegisterActions procedure
- Unregisters a set of actions.

Application-level information
=============================

Application variable (for standard applications)
- Represents application-level information.

CmdShow variable
- CmdShow is passed to the Windows ShowWindow WinAPI routine.

ExitProcessProc variable
- ExitProcessProc specifies the last procedure to execute before the application
shuts down.

HInstance variable

HintWindowClass variable
- Specifies the class for the window used to display help hints.

InitProc variable
- InitProc is the last installed initialization procedure.

IsConsole variable
- Indicates whether the module was compiled as a console application.

IsLibrary variable
- Indicates whether the module is a DLL.

JITEnable variable
- Controls when the just-in-time debugger is called.

Languages function
- Lists the locales for which support is available.

MainInstance variable
- The instance handle for the main executable.

MainThreadID variable
- The instance handle for the current module's main thread of execution.

NoErrMsg variable
- Controls whether the application displays an error message when a runtime error
occurs.

PopupList variable
- Provides centralized handling of Windows messages directed at popup menus.

Screen variable
- Represents a screen device.

Win32Platform variable
- Specifies the Win32 platform identifier.

Arithmetic routines
===================

Abs function
- Returns an absolute value.

Ceil function
- Rounds variables up toward positive infinity.

CompareValue function
- Returns the relationship between two numeric values.

DivMod procedure
- Returns the result of an integer division, including the remainder.

EnsureRange function
- Returns the closest value to a specified value within a specified range.

Exp function
- Returns the exponential of X.

Floor function
- Rounds variables toward negative infinity.

Frac function
- Returns the fractional part of a real number.

Frexp procedure
- Separates the Mantissa and Exponent of X

Infinity constant
- Represents positive infinity.

InRange function
- Indicates whether a value falls within a specified range.

Int function
- Returns the integer part of a real number.

IntPower function
- Calculates the integral power of a base value.

IsInfinite function
- Indicates when a variable or expression represents an infinite value.

IsNan function
- Indicates when a variable or expression does not evaluate to a numeric value.

IsZero function
- Indicates when a floating-point variable or expression evaluates to zero, or
very close to zero.

Ldexp function
- Calculates X * (2**P)

Ln function
- Returns the natural log of a real expression.

LnXP1 function
- Returns the natural log of (X+1)

Log10 function
- Calculates log base 10.

Log2 function
- Calculates log base 2.

LogN function
- Calculates the log of X for a specified base.

Max function
- Returns the greater of two numeric values.

Min function
- Returns the lesser of two numeric values.

NaN constant
- Represents a value that is not a number.

NegInfinity constant
- Represents negative infinity.

Pi function
- Returns 3.1415926535897932385.

Poly function
- Evaluates a uniform polynomial of one variable at the value X.

Power function
- Raises Base to any power.

Round function
- Returns the value of X rounded to the nearest whole number.

RoundTo function
- Rounds a floating-point value to a specified digit or power of ten using
Bankers rounding.

SameValue function
- Indicates whether two floating-point values are (approximately) equal.

Sign function
- Indicates whether a numeric value is positive, negative, or zero.

SimpleRoundTo function
- Rounds a floating-point value to a specified digit or power of ten using
asymmetric arithmetic rounding.

Sqr function
- Returns the square of a number.

Sqrt function
- Returns the square root of X.

Trunc function
- Truncates a real number to an integer.

Backward compatibility routines
===============================

AddExitProc procedure
- Add procedure to exit list.

AppendStr procedure
- Appends a dynamically allocated string to an existing string.

AssignStr procedure
- Assigns a new dynamically allocated string to a specified pointer.

Close procedure
- Terminates the association between a file variable and an external file.

DisposeStr procedure
- Disposes of a string pointer that was allocated using NewStr.

ExitCode variable
- Contains the application's exit code.

LoadStr function
- Loads a string from the application's executable file.

NewStr function
- Allocates a string on the heap.

StrAlloc function
- Allocates a buffer for a null-terminated string and returns a pointer to its
first character.

StrBufSize function
- Returns the maximum number of characters that can be stored in a buffer
allocated by StrAlloc.

StrDispose procedure
- Disposes of a string.

StrNew function
- Allocates space on and copies a string to the heap; returning a pointer to the
string.

StrPas function
- Converts null-terminated string to a Pascal string.

Swap function
- Exchanges high order byte with the low order byte of an integer or word.

BCD support
===========

NullBcd constant
- Adds two TBcd values.

StrToBcd function
- Converts a string to the corresponding binary-coded decimal (BCD) value.

TryStrToBcd function
- Converts a string to the corresponding binary-coded decimal (BCD) value.

BiDiMode support routines
=========================

DBUseRightToLeftAlignment function
- Indicates whether a data-aware controls alignment is reversed to a right-to-left
mode.

Business and finance routines
=============================

DoubleDecliningBalance function
- Calculates the depreciation of an asset using the double-declining balance
method.

FutureValue function
- Calculates the future value of an investment.

InterestPayment function
- Calculates the interest portion of a loan payment.

InterestRate function
- Returns the interest rate required to increase PresentValue to FutureValue.

InternalRateOfReturn function
- Calculates the internal rate of return for an investment.

NetPresentValue function
- Calculates the current value from an array of estimated cash flow values.

NumberOfPeriods function
- Returns the number of payment periods for an investment.

Payment function
- Calculates a fully amortized payment.

PeriodPayment function
- Returns the principal amount from a full payment.

PresentValue function
- Calculates the present value of an investment.

SLNDepreciation function
- Returns the straight-line depreciation allowance of an asset.

SYDDepreciation function
- Calculates depreciation for an asset.

Character manipulation routines
===============================

Chr function
- Returns the character for a specified ASCII value.

FillChar procedure
- Fills contiguous bytes with a specified value.

UpCase function
- Converts a character to uppercase.

Character set conversions
=========================

AnsiToUtf8 function
- Converts a string encoded in Ansi to UTF-8.

PUCS4Chars function
- Converts a UCS4 string to an null-terminated array of UCS4 characters.

StringToWideChar function
- Returns a UNICODE string from a Pascal string.

UCS4StringToWideString function
- Converts a string of 4-byte Unicode characters into a WideString value.

UnicodeToUtf8 function
- Converts a string of Unicode characters into a UTF-8 string.

Utf8Decode function
- Converts a UTF8 string to a Unicode string (WideString).

Utf8Encode function
- Converts a WideString value to a UTF8 string.

Utf8ToAnsi function
- Converts a UTF8 string to a string of Ansi characters.

Utf8ToUnicode function
- Converts a string of UTF-8 characters to a Unicode string.

WideCharLenToString function
- Converts Unicode characters to single or multi byte character data.

WideCharLenToStrVar procedure
- WideCharLenToStrVar converts Unicode characters to single or multi byte character
data.

WideCharToString function
- Converts null-terminated Unicode string to single or multi byte character data.

WideCharToStrVar procedure
- Converts Unicode string to a single or multi byte character data.

WideStringToUCS4String function
- Converts a WideString value to a string of 4-byte Unicode characters.

Clipboard routines
==================

Clipboard function
- Returns an instance of TClipboard.

SetClipboard function
- Replaces the single global clipboard instance with another clipboard object.

COM utilities
=============

ClassIDToProgID function
- Returns the programmatic ID for a specified class given its class ID (CLSID).

CoInitFlags variable
- Specifies the level of threading support requested for a COM server .EXE.

ComClassManager function
- Returns a TComClassManager object.

ComServer variable
- Provides class and registry information about server objects.

CreateClassID function
- CreateClassID generates a new GUID and returns it as a string.

CreateComObject function
- Instantiates a single instance of a COM object.

CreateOleObject function
- Instantiates a single instance of an Automation object.

CreateRegKey procedure
- Creates or opens a registry key that is a subkey of HKEY_CLASSES_ROOT.

CreateRemoteComObject function
- Creates a Com object on another machine and returns an IUnknown interface for it.

CreateSharedPropertyGroup function
- Returns the interface for a SharedPropertyGroup that allows MTS objects within
a server process to share state.

CreateTransactionContextEx function
- Returns an interface for a new shared property group manager that creates and
coordinates shared properties of MTS objects.

CreateVCLComObjectProc variable
- Specifies a procedure that creates a COM object associated with a component.

DeleteRegKey procedure
- Deletes a single key that is a subkey of HKEY_CLASSES_ROOT from the system
registry.

DLLCanUnloadNow function
- Tells Windows whether it can unload the in-process server exporting this function.

DllGetClassObject function
- Obtains a class factory for an ActiveX object when the ActiveX object resides
in an in-process ActiveX server (DLL).

DllRegisterServer function
- Registers an in-process ActiveX server in the current module within the system
registry.

DllUnregisterServer function
- Unregisters an OLE automation server in the current module with the system
registry.

EmptyParam variable
- Specifies that an optional parameter on a dual interface is not used.

EnumDispatchProperties procedure
- Fills a TStringList will all the property names and DispIDs in a specified
IDispatch interface.

FontToOleFont function
- Returns a Variant containing an IFontDispatch interface that represents a TFont
object.

GetActiveOleObject function
- Retrieves a reference to an IDispatch interface to a currently running, registered
COM object.

GetDispatchPropValue function
- Returns the value of a property on an IDispatch interface.

GetOleFont procedure
- Creates an OLE font object that is directly mapped to a native TFont.

GetOlePicture procedure
- Creates an OLE picture object that is directly mapped to a native TPicture.

GetOleStrings procedure
- Implements a TStrings object as an IStrings interface for use by OLE objects.

GetRegStringValue function
- Retrieves a value stored under a subkey of HKEY_CLASSES_ROOT from the system
registry.

InterfaceConnect procedure
- Connects an IConnectionPoint interface.

InterfaceDisconnect procedure
- Disconnects an IConnectionPoint interface connection that was previously made
by the InterfaceConnect procedure.

OleCheck procedure
- Throws an EOleSysError exception if the result code indicates an error.

OleError procedure
- Raises an EOleSysError exception.

OleFontToFont procedure
- Fills in a TFont structure to represent an IFontDispatch.

OleStrToString function
- Copies data received from a COM interface to a string.

OleStrToStrVar procedure
- Copies a string from its COM representation to an existing Pascal string.

ParkingWindow function
- Provides a temporary parent window for activeX controls when the container is
not ready to act as a parent.

ProgIDToClassID function
- Returns the class ID (CLSID) TGUID that corresponds to the string specified as
the ProgID parameter.

RegisterAsService procedure
- Registers an in-process COM server with the operating system.

SafeRef function
- Returns a reference to a transactional object that is safe to pass outside its
context.

SetDispatchPropValue procedure
- Sets the value of a property on an IDispatch interface.

SetOleFont procedure
- Connects an OLE font object to a TFont object and copies the properties of the
OLE font object to the TFont.

SetOlePicture procedure
- Connects an OLE picture object to a TPicture object, and copies the properties
of the OLE picture object to the TPicture.

SetOleStrings procedure
- Uses an IStrings interface to assign the contents of a TStrings object.

StringToOleStr function
- Allocates memory and copies a string to the OLE format.

Supports function
- Indicates whether a given object or interface supports a specified interface.

VarDispProc variable
- Provides the support for IDispatch-based Automation.

Command line utilities
======================

CmdLine variable
- CmdLine is a pointer to the command-line arguments specified when the application
is invoked.

FindCmdLineSwitch function
- Determines whether a string was passed as a command line argument to the
application.

ParamCount function
- Returns the number of parameters passed on the command line.

ParamStr function
- Returns a specified parameter from the command-line.

Comparison routines
===================

CollectionsEqual function
- Compares the contents of two collections.

CompareMem function
- Performs a binary comparison of two memory images.

EqualRect function
- Indicates whether two TRect values are the same.

Complex numbers
===============

ComplexNumberSymbol variable
- Indicates the symbol used to represent the imaginary part of a complex number.

ComplexNumberSymbolBeforeImaginary variable
- Indicates the placement of the symbol that represents the imaginary part of a
complex number.

VarComplexAbs function
- Returns the absolute value of a complex number.

VarComplexAbsSqr function
- Returns the square of the absolute value of a complex number.

VarComplexAngle function
- Returns the angle made by a complex number.

VarComplexArcCos function
- Returns the inverse cosine of a complex number.

VarComplexArcCosH function
- Returns the hyperbolic inverse cosine of a complex number.

VarComplexArcCot function
- Returns the inverse cotangent of a complex number.

VarComplexArcCsc function
- Returns the hyperbolic inverse cotangent of a complex number.

VarComplexArcCscH function
- Returns the hyperbolic inverse cosecant of a complex number.

VarComplexArcSec function
- Returns the inverse secant of a complex number.

VarComplexArcSecH function
- Returns the hyperbolic inverse secant of a complex number.

VarComplexArcSin function
- Returns the inverse sine of a complex number.

VarComplexArcSinH function
- Returns the hyperbolic inverse sine of a complex number.

VarComplexArcTan function
- Returns the inverse tangent of a complex number.

VarComplexArcTanH function
- Returns the hyperbolic inverse tangent of a complex number.

VarComplexConjugate function
- Returns the conjugate of a complex number.

VarComplexCos function
- Returns the cosine of a complex number.

VarComplexCosH function
- Returns the hyperbolic cosine of a complex number.

VarComplexCot function
- Returns the cotangent of a complex number.

VarComplexCreate function
- Returns the hyperbolic cotangent of a complex number.

VarComplexCsc function
- Returns the cosecant of a complex number.

VarComplexCscH function
- Returns the hyperbolic cosecant of a complex number.

VarComplexExp function
- Returns the exponential of a complex number.

VarComplexFromPolar function
- Converts a set of polar coordinates to a complex number.

VarComplexInverse function
- Returns the inverse of a complex number.

VarComplexLn function
- Returns the natural log of a complex number.

VarComplexPower function
- Returns the value of a complex number raised to a specified power.

VarComplexSec function
- Returns the secant of a complex number.

VarComplexSecH function
- Returns the hyperbolic secant of a complex number.

VarComplexSin function
- Returns the sine of a complex number.

VarComplexSinH function
- Returns the hyperbolic sine of a complex number.

VarComplexSqr function
- Returns the square of a complex number.

VarComplexSqrt function
- Returns the square root of a complex number.

VarComplexTan function
- Returns the tangent of a complex number.

VarComplexTanH function
- Returns the hyperbolic tangent of a complex number.

VarComplexTimesNegI function
- Returns the value of a complex number multiplied by i.

VarComplexTimesPosI function
- Returns the value of a complex number multiplied by i.

VarComplexToPolar procedure
- Computes the polar coordinates that correspond to a custom Variant that
represents a complex number.

Component registration routines
===============================

RegisterComponents procedure
- Registers a set of components so that they all appear on the same page of the
component palette.

RegisterFields procedure
- Registers a set of field components so that they appear in the Dataset designer.

RegisterNoIcon procedure
- Registers a set of components but does not add them to the component palette.

RegisterNonActiveX procedure
- Prevents a set of components from being made available to the ActiveX wizard.

Cursor management routines
==========================

CursorToIdent function
- Returns the name of the predefined constant that corresponds to a cursor.

CursorToString function
- Returns the AnsiString representation of a cursor.

GetCursorValues procedure
- Passes the name of every predefined cursor constant to a callback.

IdentToCursor function
- Translates a predefined cursor constant into a cursor.

StringToCursor function
- Returns a TCursor value given its string representation.

Data Dictionary routines
========================

AssociateAttr procedure
- Sets up an association between an attribute ID and a field ID.

CreateField function
- Creates a new field from information stored in the Data Dictionary.

DictionaryActive function
- Indicates whether there is an active Data Dictionary.

DictionaryDeactivate procedure
- Deactivates the Data Dictionary.

FindAttrID function
- Returns the ID of a specified attribute set.

FindDatabaseID function
- Returns the ID of a specified database.

FindFieldID function
- Returns the ID of a specified field.

FindTableID function
- Returns the ID of a specified table.

GetAttrID function
- Returns the ID of the attribute set associated with a field.

GetAttrName function
- Returns the name of an attribute set given its ID.

GetAttrNames procedure
- Executes a callback for every attribute set name.

GetControlClass function
- Returns the class associated with an attribute set.

HasConstraints function
- Indicates whether there are any data constraints for a dataset stored in the
Data Dictionary.

IsNullID function
- Indicates whether a Data Dictionary Identifier is null.

NewAttr function
- Creates an attribute set based on the properties of a field component.

QualifyTableName function
- Returns the fully qualified name of a table in the Data Dictionary.

QualifyTableNameByName function
- Returns the fully qualified name of a table in the Data Dictionary.

UnassociateAttr procedure
- Removes the association between an attribute ID and a field ID.

UpdateAttr procedure
- Updates an attribute set to match the properties of a field component.

UpdateConstraints procedure
- Replaces all imported constraints for a dataset with the current constraints
in the Data Dictionary.

UpdateDataset procedure
- Updates a dataset and all its field components to match the Data Dictionary.

UpdateField procedure
- Updates a field component to match the associated attribute set in the Data
Dictionary.

Database routines
=================

AnsiToNative function
- Converts a string from the ANSI character set to the character set associated
with a given locale.

Check procedure
- Converts a string from the ANSI character set to the character set associated
with a given locale.

DBbiError procedure
- Creates and raises an EDBEngineError exception for an error code returned by
the Borland Database Engine (BDE).

ExtractFieldName function
- Returns the next name in a semicolon-delimited string of field names.

FreeProcParams procedure
- Frees a list of procedure parameters that is allocated by GetProcedureParams.

GetDriverNames procedure
- Populates a string list with the names of all available dbExpress drivers.

GetFieldProperty function
- Returns a TField object for a dataset and data control.

LoadParamListItems procedure
- Fills a TParams object with information from a list of parameter descriptors.

NativeCompareStr function
- Compares strings based on a database locale case sensitively.

NativeCompareStrBuf function
- Compares null-terminated strings based on a database locale case sensitively.

NativeCompareText function
- Compares strings based on a database locale without case sensitivity.

NativeCompareTextBuf function
- Compares null-terminated strings based on a database locale and is not case
sensitive.

NativeToAnsi function
- Converts a string from the character set of the given locale to the ANSI
character set.

NativeToAnsiBuf procedure
- Converts a string from the character set of a specified locale into the ANSI
character set.

PasswordDialog function
- Displays a dialog box that prompts the user for the password of a local
password-protected table.

Session variable
- Maintains database components used by an application.

Sessions variable
- Provides access to TSessionList methods and properties.

VarTypeToDataType function
- Returns the field type value that most closely corresponds to a Variant type.

Date/time routines
==================

CheckSqlTimeStamp procedure
- Checks whether a TSQLTimeStamp value represents a valid date and time.

CompareDate function
- Indicates the relationship between the date portions of two TDateTime values.

CompareDateTime function
- Indicates the relationship between two TDateTime values.

CompareTime function
- Indicates the relationship between the time portions of two TDateTime values.

CurrentYear function
- Returns the current year.

Date function
- Returns the current date.

DateDelta constant
- Specifies the difference between TDateTime and TTimeStamp values.

DateOf function
- Strips the time portion from a TDateTime value.

DateTimeToFileDate function
- Converts a TDateTime object to an OS timestamp.

DateTimeToSQLTimeStamp function
- Converts a TDateTime value to a TSQLTimeStamp value.

DateTimeToStr function
- Converts a TDateTime value to a string.

DateTimeToString procedure
- Converts a TDateTime value to a string using a specified Format.

DateTimeToSystemTime procedure
- Converts a TDateTime value into the Win32 API's TSystemTime type.

DateTimeToTimeStamp function
- Converts a TDateTime value into the corresponding TTimeStamp value.

DateToStr function
- Converts a TDateTime value to a string.

Day of week constants
- Provide symbolic constants for ISO 8601-compliant day of the week values.

DayOf function
- Returns the day of the month represented by a TDateTime value.

DayOfTheMonth function
- Returns the day of the month represented by a TDateTime value.

DayOfTheWeek function
- Returns the day of the week represented by a TDateTime value.

DayOfTheYear function
- Returns the number of days between a specified TDateTime value and December 31
of the previous year.

DayOfWeek function
- Returns the day of the week for a specified date.

DaysBetween function
- Returns the number of whole days between two specified TDateTime values.

DaysInAMonth function
- Returns the number of days in a specified month of a specified year.

DaysInAYear function
- Returns the number of days in a specified year.

DaysInMonth function
- Returns the number of days in the month of a specified TDateTime value.

DaysInYear function
- Returns the number of days in the year of a specified TDateTime value.

DaySpan function
- Returns the number of days (including fractional days) between two specified
TDateTime values.

DecodeDate procedure
- Returns Year, Month, and Day values for a TDateTime value.

DecodeDateDay procedure
- Returns the year and day of the year for a specified TDateTime value.

DecodeDateFully function
- Returns Year, Month, and Day, and Day-of-Week values for a TDateTime value.

DecodeDateMonthWeek procedure
- Returns the year, month, week of the month, and day of the week for a specified
TDateTime value.

DecodeDateTime procedure
- Returns Year, Month, Day, Hour, Minute, Second, and MilliSecond values for a
TDateTime value.

DecodeDateWeek procedure
- Returns the year, week of the year, and day of the week for a specified
TDateTime value.

DecodeDayOfWeekInMonth procedure
- For a given TDateTime value, returns the year, month, day of the week, and the
count of that day of the week in the month.

DecodeTime procedure
- Breaks a TDateTime value into hours, minutes, seconds, and milliseconds.

EncodeDate function; TryEncodeDate function
- Returns a TDateTime value that represents a specified Year, Month, and Day.

EncodeDateDay function
- Returns a TDateTime value that represents a specified day of the year for a
specified year.

EncodeDateMonthWeek function
- Returns a TDateTime objectvalue that represents a specified day of a specified
week in a specified month and year.

EncodeDateTime function
- Returns a TDateTime value that represents a specified year, month, day, hour,
minute, second, and millisecond.

EncodeDateWeek function
- Returns a TDateTime value that represents a specified day of a specified week
in a specified year.

EncodeDayOfWeekInMonth function
- Returns a TDateTime value that represents a specified occurrence of a day of
the week within a specified month and year.

EncodeTime function;TryEncodeTime function
- Returns a TDateTime value for a specified Hour, Min, Sec, and MSec.

EndOfADay function
- Returns a TDateTime value that represents the last millisecond of a specified
day.

EndOfAMonth function
- Returns a TDateTime value that represents the last millisecond of the last day
of a specified month.

EndOfAWeek function
- Returns a TDateTime value that represents the last millisecond of a specified
day of a specified week.

EndOfAYear function
- Returns a TDateTime value that represents the last millisecond of a specified
year.

EndOfTheDay function
- Returns a TDateTime value that represents the last millisecond of the day
identified by a specified TDateTime value.

EndOfTheMonth function
- Returns a TDateTime value that represents the last millisecond of the last day
of the month identified by a specified TDateTime value.

EndOfTheWeek function
- Returns a TDateTime value that represents the last millisecond of the last day
of the week identified by a specified TDateTime value.

EndOfTheYear function
- Returns a TDateTime value that represents the last millisecond of the last day
of the year identified by a specified TDateTime value.

FormatDateTime function
- Formats a TDateTime value.

HourOf function
- Returns the hour of the day represented by a TDateTime value.

HourOfTheDay function
- Returns the hour of the day represented by a TDateTime value.

HourOfTheMonth function
- Returns the number of hours between a specified TDateTime value and 12:00 AM of
the first day of the month.

HourOfTheWeek function
- Returns the number of hours between a specified TDateTime value and 12:00 AM of
the first day of the week.

HourOfTheYear function
- Returns the number of hours between a specified TDateTime value and 12:00 AM of
the first day of the year.

HoursBetween function
- Returns the number of whole hours between two specified TDateTime values.

HourSpan function
- Returns the number of Hours (including fractional Hours) between two specified
TDateTime values.

HoursPerDay constant;MinsPerDay constant;SecsPerDay constant;MSecsPerDay constant
- Values useful in time calculations.

IncAMonth procedure
- Increments date data by one month.

IncDay function
- Returns a date shifted by a specified number of days.

IncHour function
- Returns a date/time value shifted by a specified number of hours.

IncMilliSecond function
- Returns a date/time value shifted by a specified number of milliseconds.

IncMinute function
- Returns a date/time value shifted by a specified number of minutes.

IncMonth function
- Returns a date shifted by a specified number of months.

IncSecond function
- Returns a date/time value shifted by a specified number of seconds.

IncWeek function
- Returns a date shifted by a specified number of weeks.

IncYear function
- Returns a date shifted by a specified number of years.

IsInLeapYear function
- Indicates whether a specified TDateTime value occurs in a leap year.

IsLeapYear function
- Indicates whether a specified year is a leap year.

IsPM function
- Indicates whether the time portion of a specified TDateTime value occurs after
noon.

IsSameDay function
- Indicates whether a specified TDateTime value occurs on a the same day as a
criterion date.

IsToday function
- Indicates whether a specified TDateTime value occurs on the current date.

IsValidDate function
- Indicates whether a specified year, month, and day represent a valid date.

IsValidDateDay function
- Indicates whether a specified year and day of the year represent a valid date.

IsValidDateMonthWeek function
- Indicates whether a specified year, month, week of the month, and day of the
week represent a valid date.

IsValidDateTime function
- Indicates whether a specified year, month, day, hour, minute, second, and
millisecond represent a valid date and time.

IsValidDateWeek function
- Indicates whether a specified year, week of the year, and day of the week
represent a valid date.

IsValidTime function
- Indicates whether a specified hour, minute, second, and millisecond represent
a valid date and time.

MilliSecondOf function
- Returns the millisecond of the second represented by a TDateTime value.

MilliSecondOfTheDay function
- Returns the number of milliseconds between a specified TDateTime value and
12:00:00:00 AM of the same day.

MilliSecondOfTheHour function
- Returns the number of milliseconds between a specified TDateTime value and the
beginning of the same hour.

MilliSecondOfTheMinute function
- Returns the number of milliseconds between a specified TDateTime value and the
beginning of the same minute.

MilliSecondOfTheMonth function
- Returns the number of milliseconds between a specified TDateTime value and
12:00:00:00 AM of the first day of the month.

MilliSecondOfTheSecond function
- Returns the millisecond of the second represented by a TDateTime value.

MilliSecondOfTheWeek function
- Returns the number of milliseconds between a specified TDateTime value and
12:00:00:00 AM of the first day of the week.

MilliSecondOfTheYear function
- Returns the number of milliseconds between a specified TDateTime value and
12:00:00:00 AM of the first day of the year.

MilliSecondsBetween function
- Returns the number of milliseconds between two specified TDateTime values.

MilliSecondSpan function
- Returns the number of milliseconds between two specified TDateTime values.

MinuteOf function
- Returns the minute of the hour represented by a TDateTime value.

MinuteOfTheDay function
- Returns the number of minutes between a specified TDateTime value and 12:00 AM
of the same day.

MinuteOfTheHour function
- Returns the number of minutes between a specified TDateTime value and the
beginning of the same hour.

MinuteOfTheMonth function
- Returns the number of minutes between a specified TDateTime value and 12:00 AM
of the first day of the month.

MinuteOfTheWeek function
- Returns the number of minutes between a specified TDateTime value and 12:00 AM
of the first day of the week.

MinuteOfTheYear function
- Returns the number of minutes between a specified TDateTime value and 12:00 AM
of the first day of the year.

MinutesBetween function
- Returns the number of minutes between two specified TDateTime values.

MinuteSpan function
- Returns the number of minutes, including fractions thereof, between two
specified TDateTime values.

MonthOf function
- Returns the month of the year represented by a TDateTime value.

MonthOfTheYear function
- Returns the month of the year represented by a TDateTime value.

MonthsBetween function
- Returns the approximate number of months between two specified TDateTime values.

MonthSpan function
- Returns the approximate number of months (including fractions thereof) between
two specified TDateTime values.

MSecsToTimeStamp function
- Converts a specified number of milliseconds into a TTimeStamp value.

Now function
- Returns the current date and time.

NthDayOfWeek function
- Returns which occurence of its weekday a specified TDateTime value represents.

NullSQLTimeStamp constant
- Represents a NULL TSQLTimeStamp value.

RecodeDate function
- Replaces the date portion of a specified TDateTime value.

RecodeDateTime function
- Selectively replaces parts of a specified TDateTime value.

RecodeDay function
- Replaces the day of the month for a specified TDateTime value.

RecodeHour function
- Replaces the hour of the day for a specified TDateTime value.

RecodeLeaveFieldAsIs constant
- Identifies a parameter to RecodeDateTime that should not be used.

RecodeMilliSecond function
- Replaces the millisecond of the second for a specified TDateTime value.

RecodeMinute function
- Replaces the minute of the hour for a specified TDateTime value.

RecodeMonth function
- Replaces the month of the year for a specified TDateTime value.

RecodeSecond function
- Replaces the second of the minute for a specified TDateTime value.

RecodeTime function
- Replaces the time portion of a specified TDateTime value.

RecodeYear function
- Replaces the year for a specified TDateTime value.

ReplaceDate procedure
- Replaces the date portion of a TDateTime value with a specified date.

ReplaceTime procedure
- Replaces the time portion of a TDateTime value with a specified time.

SameDate function
- Indicates whether two TDateTime values represent the same year, month, and day.

SameDateTime function
- Indicates whether two TDateTime values represent the same year, month, day, hour,
minute, second, and millisecond.

SameTime function
- Indicates whether two TDateTime values represent the same time of day, ignoring
the date portion.

SecondOf function
- Returns the second of the minute represented by a TDateTime value.

SecondOfTheDay function
- Returns the number of seconds between a specified TDateTime value and 12:00:00
AM of the same day.

SecondOfTheHour function
- Returns the number of seconds between a specified TDateTime value and the
beginning of the same hour.

SecondOfTheMinute function
- Returns the number of seconds between a specified TDateTime value and the
beginning of the same minute.

SecondOfTheMonth function
- Returns the number of seconds between a specified TDateTime value and 12:00:00
AM on the first day of the month.

SecondOfTheWeek function
- Returns the number of seconds between a specified TDateTime value and 12:00:00
AM of the first day of the week.

SecondOfTheYear function
- Returns the number of seconds between a specified TDateTime value and 12:00:00
AM on the first day of the year.

SecondsBetween function
- Returns the number of seconds between two specified TDateTime values.

SecondSpan function
- Returns the number of seconds (including fractions thereof) between two
specified TDateTime values.

SQLDayOfWeek function
- Indicates the day of the week when a specified TSQLTimeStamp value occurs.

SQLTimeStampToDateTime function
- Converts a TSQLTimeStamp value to a TDateTime value.

SQLTimeStampToStr function
- Converts a TSQLTimeStamp value to a string.

StartOfADay function
- Returns a TDateTime value that represents 12:00:00:00 AM on a specified day.

StartOfAMonth function
- Returns a TDateTime value that represents 12:00:00:00 AM on the first day of a
specified month.

StartOfAWeek function
- Returns a TDateTime value that represents 12:00:00:00 AM on a specified day of
a specified week.

StartOfAYear function
- Returns a TDateTime value that represents 12:00:00:00 AM on the first day of a
specified year.

StartOfTheDay function
- Returns a TDateTime value that represents 12:00:00:00 AM on the day identified
by a specified TDateTime value.

StartOfTheMonth function
- Returns a TDateTime value that represents 12:00:00:00 AM on the first day of the
month identified by a specified TDateTime value.

StartOfTheWeek function
- Returns a TDateTime value that represents 12:00:00:00 AM on the first day of the
week identified by a specified TDateTime value.

StartOfTheYear function
- Returns a TDateTime value that represents 12:00:00:00 AM on the first day of the
year identified by a specified TDateTime value.

StrToDate function
- Converts a string to a TDateTime value.

StrToDateTime function
- Converts a string to a TDateTime value.

StrToSQLTimeStamp function
- Converts a string to a TSQLTimeStamp value.

StrToTime function
- Converts a string to a TDateTime value.

SystemTimeToDateTime function
- Converts a _SYSTEMTIMETSystemTime value into a TDateTime objectvalue.

Time function
- Returns the current time.

TimeOf function
- Strips the date portion from a TDateTime value.

TimeStampToDateTime function
- Converts a TTimeStamp value into the corresponding TDateTime value.

TimeStampToMSecs function
- Converts a TTimeStamp value into an absolute number of milliseconds.

TimeToStr function
- Returns a string that represents a TDateTime value.

Today function
- Returns a TDateTime value that represents the current date.

Tomorrow function
- Returns a TDateTime value that represents the following day.

TryEncodeDateDay function
- Calculates the TDateTime value that represents a specified day of the year for
a specified year.

TryEncodeDateMonthWeek function
- Calculates the TDateTime value that represents a specified day of a specified
week in a specified month and year.

TryEncodeDateTime function
- Calculates the TDateTime value that represents a specified year, month, day,
hour, minute, second, and millisecond.

TryEncodeDateWeek function
- Calculates the TDateTime value that represents a specified day of a specified
week in a specified year.

TryEncodeDayOfWeekInMonth function
- Calculates a TDateTime value that represents a specified occurrence of a day
of the week within a specified month and year.

TryRecodeDateTime function
- Selectively replaces parts of a specified TDateTime value.

TryStrToSQLTimeStamp function
- Converts a string to a TSQLTimeStamp value.

UnixDateDelta constant
- Specifies the difference between TDateTime and TIME_T values.

WeekOf function
- Returns the week of the year represented by a TDateTime value.

WeekOfTheMonth function
- Returns the week of the month represented by a TDateTime value.

WeekOfTheYear function
- Returns the week of the year represented by a TDateTime value.

WeeksBetween function
- Returns the number of whole weeks between two specified TDateTime values.

WeeksInAYear function
- Returns the number of weeks in a specified year.

WeeksInYear function
- Returns the number of weeks in the year of a specified TDateTime value.

WeekSpan function
- Returns the number of weeks (including fractional weeks) between two specified
TDateTime values.

WithinPastDays function
- Indicates whether two dates are within a specified number of days of each other.

WithinPastHours function
- Indicates whether two date/time values are within a specified number of hours
of each other.

WithinPastMilliSeconds function
- Indicates whether two date/time values are within a specified number of
milliseconds of each other.

WithinPastMinutes function
- Indicates whether two date/time values are within a specified number of minutes
of each other.

WithinPastMonths function
- Indicates whether two date/time values are within a specified number of months
of each other.

WithinPastSeconds function
- Indicates whether two date/time values are within a specified number of seconds
of each other.

WithinPastWeeks function
- Indicates whether two date/time values are within a specified number of weeks
of each other.

WithinPastYears function
- Indicates whether two date/time values are within a specified number of years
of each other.

YearOf function
- Returns the year represented by a TDateTime value.

YearsBetween function
- Returns the approximate number of years between two specified TDateTime values.

YearSpan function
- Returns the approximate number of years (including fractions thereof) between
two specified TDateTime values.

Yesterday function
- Returns a TDateTime value that represents the preceding day.

Design tool registration routines
=================================

GReferenceExpandable variable
- Indicates whether the Object Inspector treats component properties as
expandable subproperties.

GShowReadOnlyProps variable
- Indicates whether the Object Inspector displays published read-only properties.

RegisterComponentEditor procedure
- Registers an editor so that it is available at design time.

RegisterLibraryExpert procedure
- Registers an expert so that it is installed when a package is installed.

RegisterPropertyEditor procedure
- Allows a component to bring up a custom property editor from the Object
Inspector.

Dialog and message routines
============================

CreateMessageDialog function
- Creates a specified message dialog.

ForceCurrentDirectory variable
- Indicates whether open and save dialogs should display the current directory
if no initial directory is assigned.

InputBox function
- Displays an input dialog box that lets the user enter a string.

InputQuery function
- Displays an input dialog box that lets the user enter a string.

IsAbortResult function
- Checks the return value from a modal form dialog and indicates whether the user
selected Abort or Cancel.

IsAnAllResult function
- Checks the return value from a modal form dialog and indicates whether the user
selected All, Yes to All, or No to All.

IsNegativeResult function
- Checks the return value from a modal form dialog and indicates whether the user
selected No or No to All.

IsPositiveResult function
- Checks the return value from a modal form dialog and indicates whether the user
selected Ok, Yes, Yes to All, or All.

LoginDialog function
- Brings up the database Login dialog to allow the user to connect to a database
server.

LoginDialogEx function
- Brings up the database Login dialog to allow the user to connect to a database
server.

MessageDlg function
- Displays a message dialog box in the center of the screen.

MessageDlgPos function
- Displays a message dialog box at the specified screen coordinates.

MessageDlgPosHelp function
- Displays a message dialog box whose help is supplied in a named help file.

PromptForFileName function
- Displays an open or save dialog, where the user can specify a file name.

RemoteLoginDialog function
- Brings up the database Login dialog to allow the user to connect to a database
server.

SelectDirectory function
- Brings up a dialog to allow the user to enter a directory name.

ShowMessage procedure
- Displays a message box with an OK button.

ShowMessageFmt procedure
- Displays a message box with a formatted message.

ShowMessagePos procedure
- Displays a message box at a specified location.

StripAllFromResult function
- Converts a TModalResult value from a constant that refers to all to the
corresponding simple constant.

Drag and Drop utilities
=======================

DragImageList function
- Returns list of drag images

Dynamic allocation routines
===========================

Dispose procedure
- Releases memory allocated for a dynamic variable.

Finalize procedure
- Uninitializes a dynamically allocated variable.

FreeMem procedure
- Disposes of a dynamic variable of a given size.

GetMem procedure
- Creates a dynamic variable and a pointer to the address of the block.

Initialize procedure
- Initializes a dynamically allocated variable.

New procedure
- Creates a new dynamic variable and sets P to point to it.

Exception handling routines
===========================

AcquireExceptionObject function
- Allows an exception object to persist after the except clause exits.

DatabaseError procedure
- Creates and raises an EDatabaseError exception.

DatabaseErrorFmt procedure
- Creates and raises an EDatabaseError exception with a formatted error message.

ErrorAddr variable
- Contains the address of a statement causing a runtime error.

ErrorProc variable
- Points to the RTL run-time error handler.

ExceptAddr function
- Returns the address at which the current exception was raised.

ExceptionErrorMessage function
- Formats a standard error message.

ExceptObject function
- Returns a reference to the object associated with the current exception.

ExceptProc variable
- Points to the lowest-level RTL exception handler.

GetLastError function
- Returns the last error reported by an operating system API call.

OutOfMemoryError procedure
- Raises an EOutOfMemory exception.

RaiseLastOSError procedure
- Raises an exception for the last occurring OS or system library error.

RaiseLastWin32Error procedure
- Raises an exception for the last occurring Win32 error.

ReleaseExceptionObject procedure
- Decrements the reference count on an exception object that was incremented by
a call to AcquireExceptionObject.

SetErrorProc function
- Replaces the exception handler for error messages that are received from a
Windows socket connection.

ShowException procedure
- Displays an exception message with its physical address

SysErrorMessage function
- Converts OS error codes into strings.

Win32Check function
- Checks the return value of a Windows API call and raises an appropriate
exception when it indicates failure.

File management routines
========================

AssignFile procedure
- Associates the name of an external file with a file variable.

ChDir procedure
- Changes the current directory.

CloseFile procedure
- Terminates the association between file variable and an external disk file.

CreateDir function
- Creates a new directory.

DeleteFile function
- Deletes a file from disk.

DirectoryExists function
- Determines whether a specified directory exists.

DiskFree function
- Returns the number of free bytes on a specified drive.

DiskSize function
- Returns the size, in bytes, of a specified drive.

File mode constants
- File mode constants are used to open and close disk files.

File open mode constants
- File open mode constants are used to control the access mode to a file or stream.

FileAge function
- Returns the OS timestamp of a file.

FileClose procedure
- Closes a specified file.

FileCreate function
- Creates a new file.

FileDateToDateTime function
- Converts an OS timestamp value to TDateTime value.

FileExists function
- Tests if a specified file exists.

FileGetAttr function
- Returns the file attributes of FileName.

FileGetDate function
- Returns an OS timestamp for a specified file.

FileIsReadOnly function
- Report if file is read-only.

FileOpen function
- Opens a specified file using a specified access mode.

FileRead function
- Reads a specified number of bytes from a file.

FileSearch function
- Searches a specified directory path for a file.

FileSeek function
- Repositions read/write point.

FileSetAttr function
- Sets the file attributes of a specified file.

FileSetDate function
- Sets the OS time stamp for a specified file.

FileWrite function
- Writes the contents of a buffer to the current position in a file.

FindClose procedure
- Releases memory allocated by FindFirst.

FindFirst function
- Searches for the first instance of a file name with a given set of attributes
in a specified directory.

FindNext function
- Returns the next entry matching the name and attributes specified in a previous
call to FindFirst.

ForceDirectories function
- Creates a new directory, also creating parents as needed.

GetCurrentDir function
- Returns the name of the current directory.

GetDir procedure
- Returns the current directory for a specified drive.

RemoveDir function
- Deletes an existing empty directory.

RenameFile function
- Changes a file name.

SetCurrentDir function
- Sets the current directory.

File name utilities
===================

ChangeFileExt function
- Changes the extension of a file name.

ExcludeTrailingBackslash function
- Returns a path name without a trailing delimiter.

ExcludeTrailingPathDelimiter function
- Returns a path name without a trailing delimiter.

ExpandFileName function
- Returns the full path name for a relative file name.

ExpandUNCFileName function
- Returns the full path of a file name in UNC format, if appropriate.

ExtractFileDir function
- Extracts the drive and directory parts from FileName.

ExtractFileDrive function
- Returns the drive portion of a file name.

ExtractFileExt function
- Returns the extension portions of a file name.

ExtractFileName function
- Extracts the name and extension parts of a file name.

ExtractFilePath function
- Returns the drive and directory portions of a file name.

ExtractRelativePath function
- Returns a relative path name, relative to a specific base directory.

ExtractShortPathName function
- Converts a file name to the short 8.3 form.

IncludeTrailingBackslash function
- Ensures path name ends with delimiter

IncludeTrailingPathDelimiter function
- Ensures path name ends with delimiter.

IsPathDelimiter function
- Indicates whether the byte at position Index of a string is the path delimiter.

MatchesMask function
- Indicates whether a file name conforms to the format specified by a filter
string.

MinimizeName function
- Shortens a fully qualified path name so that it can be drawn with a specified
length limit.

ProcessPath procedure
- Parses a file name into its constituent parts.

Floating point conversion routines
==================================

FloatToCurr function
- Converts a floating-point value to a Currency value.

FloatToDecimal procedure
- Converts a floating-point value to a TDateTime value.

FloatToStr function
- Converts a floating point value to a string.

FloatToStrF function
- Converts a floating point value to a string, using a specified Format, Precision,
and Digits.

FloatToText function
- Converts a floating-point value to an unterminated character string, using a
specified Format, Precision and Digits.

FloatToTextFmt function
- Converts a floating-point value to to an unterminated character string, using
a specified format.

FormatFloat function
- Formats a floating point value.

StrToCurr function
- Converts a string to a Currency value.

StrToFloat function
- Converts a given string to a floating-point value.

Flow control routines
=====================

Abort procedure
- Raises a silent exception.

Break procedure
- Causes the flow of control to exit a for, while, or repeat statement.

Continue procedure
- Allows the flow of control to proceed to the next iteration of for, while, or
repeat statements.

Exit procedure
- Exits from the current procedure.

Halt procedure
- Initiates abnormal termination of a program.

RunError procedure
- Stops execution and generates a run-time error.

FPU control
===========

ClearExceptions procedure
- Clears any pending exception bits in the status word.

Default8087CW variable
- Specifies the Default 8087 control word.

Get8087CW function
- Returns the value of the 8087 code word.

GetExceptionMask function
- Returns the exception mask from the FPU control word.

GetPrecisionMode function
- Returns the FPU precision control mode.

GetRoundMode function
- Returns the FPU rounding mode.

Set8087CW procedure
- Sets both the control word in the floating point unit and the variable NoErrMsg
declared in the system unit.

SetExceptionMask function
- Sets the exception mask on the FPU control word.

SetPrecisionMode function
- Sets the FPU precision control mode.

SetRoundMode function
- Sets the FPU rounding mode.

Geometric routines
==================

CenterPoint function
- Returns the point in the center of a rectangle.

IntersectRect function
- Returns the intersection of two rectangles

InvalidPoint function
- Indicates whether a specified point is equal to (-1,-1).

IsRectEmpty function
- Indicates wither a specified rectangle has a positive width and height.

PointsEqual function
- Indicates whether two points have the same coordinates.

PtInRect function
- Indicates whether a specified point lies inside a specified rectangle.

UnionRect function
- Returns the union of two rectangles

Graphics utilities
==================

CharsetToIdent function
- Obtains the name of a character set.

ColorToIdent function
- Provides the symbolic name of a TColor value.

ColorToRGB function
- Converts a TColor value into an RGB representation of the color.

ColorToString function
- Returns a string that represents the name of a TColor value.

CopyPalette function
- Creates a new palette object that matches an existing palette.

CreateGrayMappedBmp function
- Remaps the standard gray colors in a bitmap with the system grays.

CreateGrayMappedRes function
- Remaps the standard gray colors in a bitmap resource with the system grays.

CreateMappedBmp function
- Changes the color table in a bitmap.

CreateMappedRes function
- Changes the color table in a bitmap resource.

DDBsOnly variable
- Determines whether bitmap handles are created as device-dependent bitmaps (DDB).

Frame3D procedure
- Draws a three dimensional frame on a canvas.

GetCharsetValues procedure
- Passes the name of every predefined character set string to a callback function.

GetColorValues procedure
- Passes the name of every predefined color constant to a callback function.

GetDefFontCharSet function
- Returns the character set of the default system font.

GetDIB function
- Returns the info header and image for a device independent bitmap.

GetDIBSizes procedure
- Returns the size of the info header and of the image for a device independent
bitmap.

GraphicExtension function
- Returns the default file-name extension of a graphics object.

GraphicFileMask function
- Returns a file mask that specifies the valid extensions for a graphic class.

GraphicFilter function
- Returns a file filter compatible with the Filter property of an Open or Save
dialog.

IdentToCharset function
- Translates the name of a character set constant to the corresponding character
set.

IdentToColor function
- Translates the name of a color constant to the corresponding TColor value.

MoveWindowOrg procedure
- Changes the location of the point (0,0) within a device context.

StringToColor function
- Translates a string representation of a color to the corresponding TColor value.

SystemPalette16 variable
- Contains the 16 VGA system colors.

Help Hint routines
==================

GetLongHint function
- Returns the second part of a two-part hint string.

GetShortHint function
- Returns the first part of a two-part hint string.

HTTP utilities
==============

Application variable (for Web server applications)
- Represents a web server application for an Internet project.

DosPathToUnixPath function
- Converts a Unix-compatible path specification to a Dos-compatible path specification.

ExtractHeaderFields procedure
- Parses a multi-valued string into its constituent fields.

ExtractHTTPFields procedure
- Parses a multi-valued string into its constituent fields.

GetExtensionVersion function
- Returns the name and version number of an ISAPI or NSAPI application.

HTTPDecode function
- Decodes a string that includes HTTP escape characters.

HTTPEncode function
- Converts a string into a form that contains no values that are illegal in an
HTTP message header.

HTTPExtensionProc function
- Receives an HTTP request message for an ISAPI or NSAPI application.

ParseDate function
- Converts a TDateTime value into a string representing the month.

StatusString function
- Returns the explanatory string associated with one of the predefined HTTP
response status codes.

UnixPathToDosPath function
- Converts a Unix-compatible path specification to a Dos-compatible path
specification.

I/O routines
============

Append procedure
- Prepares an existing file for adding text to the end.

BlockRead procedure
- Reads one or more records from an open file into a variable.

BlockWrite procedure
- Writes one or more records from a variable to an open file.

Eof function
- Tests whether the file position is at the end of a file.

ErrOutput variable
- Specifies a write-only file associated with stderr, usually the display.

FileMode variable
- Indicates the access mode on typed and untyped files opened by the Reset procedure.

FilePos function
- Returns the current file position.

FileSize function
- Returns the number of records in a file.

Input variable
- Specifies a read-only file associated with an operating system's standard input
device.

IOResult function
- Returns the status of the last I/O operation performed.

MkDir procedure
- Creates a new subdirectory.

Output variable
- Specifies a write-only file associated with standard output, usually the display.

Rename procedure
- Changes the name of an external file.

Reset procedure
- Opens an existing file.

Rewrite procedure
- Creates a new file and opens it.

RmDir procedure
- Deletes an empty subdirectory.

Seek procedure
- Moves the current position of a file to a specified component.

Truncate procedure
- Deletes all the records after the current file position.

Write procedure (for typed files)
- Writes to a typed file.

Interface support routines
==========================

CreateGUID function
- Creates a globally unique identifier.

IsEqualGUID function
- Indicates whether two TGUIDs are the same.

Maximum and minimum values
==========================

MaxComp constant
- The maximum value of the Comp data type.

MaxDouble constant
- The maximum value of the Double data type.

MaxExtended constant
- The maximum value of the Extended data type.

MaxInt constant
- The maximum value of the Integer data type.

MaxLongint constant
- The maximum value of the Longint data type.

MaxSingle constant
- The maximum value of the Single data type.

MinComp constant
- The minimum value of the Comp data type.

MinDouble constant
- The minimum value of the Double data type.

MinExtended constant
- The minimum value of the Extended data type.

MinSingle constant
- The minimum value of the Single data type.

MBCS routines
=============

NextCharIndex function
- Return byte index of next character.

MBCS utilities
==============

AnsiCompareFileName function
- Compares file names based on the current locale.

AnsiLastChar function
- Returns a pointer to the last character in a string.

AnsiLowerCaseFileName function
- Converts a file name to lower case.

AnsiStrLastChar function
- Returns a pointer to the last character in a null-terminated string.

AnsiUpperCaseFileName function
- Converts a file name to upper case.

ByteToCharIndex function
- Returns the position of the character that contains a specified byte in a string.

ByteToCharLen function
- Returns the number of characters fully contained in the first MaxLen bytes of
a string.

ByteType function
- Indicates whether a byte in a string is a single byte character, the first byte
of a double byte character, or the second byte of a double byte character.

CharLength function
- Returns number of bytes used by a character.

CharToByteIndex function
- Returns the 1-based index of the first byte of a specified character in a
string.

CharToByteLen function
- Returns the length, in bytes, of the first MaxLen characters of a string.

LeadBytes variable
- Lists all Char values that can be the first byte of a double byte character on
the local system.

SameFileName function
- Compares file names based on the current locale.

StrByteType function
- Indicates whether a byte in a string is a single byte character, the first byte
of a double byte character, or the second byte of a double byte character.

StrCharLength function
- Find character size.

StrNextChar function
- Returns pointer to following character.

Measurement conversion routines
===============================

area unit variables
- Represent units that measure area.

CelsiusToFahrenheit function
- Converts a temperature expressed in degrees Celsius to the corresponding
temperature in degrees Fahrenheit.

CompatibleConversionType function
- Indicates whether a specified conversion type is registered with a specified
conversion family.

CompatibleConversionTypes function
- Indicates whether the Convert function can convert between two specified
conversion types.

conversion family variables
- Represent a family of measurement units.

Convert function
- Converts a measurement from one set of units to another.

ConvertFrom function
- Converts a measurement from the specified units to the base units of its
conversion family.

ConvertTo function
- Converts a measurement from the base units of a conversion family into a
specified conversion type.

ConvFamilyToDescription function
- Returns the string description of what a conversion family measures.

ConvTypeToDescription function
- Returns the string description of a conversion type (measurement unit).

ConvTypeToFamily function
- Returns the identifier for the conversion family with which a conversion type
or pair of types is registered.

ConvUnitAdd function
- Adds two measurements and returns the result using a specified unit of measurement.

ConvUnitCompareValue function
- Indicates the relationship between two measurements.

ConvUnitDec function
- Decrements a specified measurement by a specified amount.

ConvUnitDiff function
- Subtracts one measurement from another and returns the result using a specified
unit of measurement.

ConvUnitInc function
- Increments a specified measurement by a specified amount.

ConvUnitSameValue function
- Indicates whether two measurements are equivalent.

ConvUnitToStr function
- Formats a measurement and its conversion unit into a human-readable string.

ConvUnitWithinNext function
- Indicates whether a specified measurement exceeds another measurement by at
most a specified amount.

ConvUnitWithinPrevious function
- Indicates whether a specified measurement is at most a specified amount less
than another measurement.

CycleToDeg function
- Converts an angle measurement from cycles to degrees.

CycleToGrad function
- Converts an angle measurement from cycles to grads.

CycleToRad function
- Converts an angle measurement from cycles to radians.

DateTimeToJulianDate function
- Converts a TDateTime value into a Julian date.

DateTimeToModifiedJulianDate function
- Converts a TDateTime value into a modified Julian date.

DateTimeToUnix function
- Converts a TDateTime value into a Unix-based date-and-time value.

DegToCycle function
- Returns the value of a degree measurement expressed in cycles.

DegToGrad function
- Returns the value of a degree measurement expressed in grads.

DegToRad function
- Returns the value of a degree measurement expressed in radians.

DescriptionToConvFamily function
- Retrieves the identifier for a conversion family given its name.

DescriptionToConvType function
- Retrieves the identifier for a conversion type given its name and family.

distance unit variables
- Represent units that measure distance.

FahrenheitToCelsius function
- Converts a temperature expressed in degrees Fahrenheit to the corresponding
temperature in degrees Celsius.

GetConvFamilies procedure
- Returns a list of all registered conversion families.

GetConvTypes procedure
- Returns a list of all registered conversion types in a specified conversion
family.

GradToCycle function
- Converts grad measurements to cycles.

GradToDeg function
- Converts grad measurements to degrees.

GradToRad function
- Converts grad measurements to radians.

JulianDateToDateTime function
- Converts a Julian date to a TDateTime value.

mass unit variables
- Represent units that measure weight.

ModifiedJulianDateToDateTime function
- Converts a modified Julian date to a TDateTime value.

RadToCycle function
- Converts radians to cycles.

RadToDeg function
- Converts radians to degrees.

RadToGrad function
- Converts radians to grads.

RaiseConversionError procedure
- Raises an EConversionError exception.

RegisterConversionFamily function
- Registers a new conversion family and returns its identifier.

RegisterConversionType function
- Registers a new conversion type and returns its identifier.

StrToConvUnit function
- Parses a string into a value and conversion type.

temperature unit variables
- Represent units that measure temperature.

time unit variables
- Represent units that measure time.

TryConvTypeToFamily function
- Retrieves the identifier for the conversion family with which a conversion type
or pair of types is registered.

TryJulianDateToDateTime function
- Converts a Julian date to a TDateTime value.

TryModifiedJulianDateToDateTime function
- Converts a modified Julian date to a TDateTime value.

TryStrToConvUnit function
- Parses a string into a value and conversion type.

UnixToDateTime function
- Converts a Unix-based date-and-time value to a TDateTime value.

UnregisterConversionFamily procedure
- Unregisters a conversion family previously registered using
RegisterConversionFamily.

UnregisterConversionType procedure
- Unregisters a conversion type previously registered using
RegisterConversionType.

volume unit variables
- Represent units that measure distance.

Memory management routines
==========================

AllocMem function
- Allocates a memory block and initializes each byte to zero.

AllocMemCount variable
- Represents the total number of allocated memory blocks in an application.

AllocMemSize variable
- Represents the total size of allocated memory blocks.

GetHeapStatus function
- Returns the current status of the memory manager.

GetMemoryManager procedure
- Returns the entry points of the currently installed memory manager.

HeapAllocFlags variable
- Flags that indicate how the memory manager obtains memory from the operating
system.

IsMemoryManagerSet function
- Indicates whether the memory manager has been overridden using the
SetMemoryManager procedure.

ReallocMem procedure
- Reallocates a dynamic variable.

SetMemoryManager procedure
- Sets entry points of the memory manager.

SysFreeMem function
- Frees the memory pointed to by a specified pointer.

SysGetMem function
- Allocates a specified number of bytes and returns a pointer to them.

SysReallocMem function
- Returns a pointer to a specified number of bytes, preserving the values
pointed to by the Pointer parameter.

Menu support routines
=====================

AnsiSameCaption function
- Indicates whether two strings are the same based on the current Windows locale,
ignoring case information and accelerator characters.

GetHotkey function
- Returns the last character in a string marked with an ampersand (&).

NewItem function
- Creates and initializes a menu item.

NewLine function
- Creates a menu item for a separator.

NewMenu function
- Creates and initializes a main menu.

NewPopupMenu function
- Creates and initializes a popup menu.

NewSubMenu function
- Creates and initializes a menu item that represents a submenu.

ShortCut function
- Creates a menu shortcut for a specified key combination.

ShortCutToKey procedure
- Returns the virtual key code and shift state of a menu shortcut.

ShortCutToText function
- Converts a menu shortcut into a string that describes the shortcut.

StripHotKey function
- Removes the accelerator character marker from a string.

TextToShortCut function
- Creates a menu shortcut from a text string.

ValidMenuHotkeys variable
- Determines what accelerator keys can be automatically assigned to a menu item
caption.

Miscellaneous routines
======================

Assert procedure
- Tests whether a Boolean expression is true.

AssertErrorProc variable
- Points to the assertion error-handler.

Assigned function
- Tests for a nil (unassigned) pointer or procedural variable.

Beep procedure
- Generates a message beep.

CountGenerations function
- Returns the number of intermediate classes between a derived class and its
ancestor.

DefaultTextLineBreakStyle variable
- Specifies the characters that are used by default to separate lines in text.

DLLProc variable
- Points to a procedure invoked by a DLL entry point.

FormatMaskText function

FreeAndNilProperties function
- Frees any property values that are objects and sets their value to nil.

GetEnvironmentVariable function
- Returns environment variable value..

Hi function
- Returns the high-order byte of X as an unsigned value.

High function
- Returns the highest value in the range of an argument.

HtmlTable function
- Generates the HTML image of a dataset, using the properties and events of a
table producer object.

IfThen function
- Conditionally returns one of two specified values.

IsAccel function
- Indicates whether a particular character is an accelerator character (or hot key)
within a given menu caption or other text string.

IsValidIdent function
- Tests for a valid Pascal identifier.

Lo function
- Returns the low order Byte of argument X.

Low function
- Returns the lowest value in a range.

Move procedure
- Copies bytes from a source to a destination.

SizeOf function
- Returns the number of bytes occupied by a variable or type.

Slice function
- Returns a sub-section of an array.

UniqueString procedure
- Ensures that a given string has a reference count of one.

ValidParentForm function
- Returns the form or property page that contains a specified control.

Mouse handling utilities
========================

FindVCLWindow function
- Returns the windowed control, if any, at the specified location.

GetCaptureControl function
- Returns the control, if any, that currently receives all mouse messages.

Mouse variable
- Contains information about the systems mouse.

SetCaptureControl procedure
- Causes the specified control to receive all mouse messages.

Multi-tier support
==================

DisableSocketTransport procedure
- Unregisters a remote data module so clients cant access it using a Socket
connection.

DisableWebTransport procedure
- Unregisters a remote data module so clients cant access it using a Web
connection.

EnableSocketTransport procedure
- Registers a remote data module so clients can access it using a Socket
connection.

EnableWebTransport procedure
- Registers a remote data module so clients can access it using a Web connection.

HandleReconcileError function
- Displays a dialog that lets users determine what action to take when an update
could not be applied.

PackageParams function
- Converts a TParams object into an OleVariant that can be used in multi-tiered
applications.

RegisterPooled procedure
- Registers a remote data module so that instances are pooled.

UnpackParams procedure
- Converts an OleVariant that represents a set of parameters into a TParams object.

UnregisterPooled procedure
- Removes the object pooling registry entries for a remote data module.

Numeric formatting routines
===========================

CurrToStr function
- Formats a Currency value as a string.

CurrToStrF function
- Converts a Currency value to a string, using a specified format.

DoubleToComp function
- Converts a Double value to a Comp.

FormatCurr function
- Formats a Currency object.

IntToHex function
- Returns the hex representation of an integer.

IntToStr function
- Converts an integer to a string.

Ordinal routines
================

In procedure
- Increments an ordinal value by one or N.

Odd function
- Returns True if argument is an odd number.

Ord function
- Returns the ordinal value of an ordinal-type expression.

Pred function
- Returns the predecessor of the argument.

Succ function
- Returns the successor of an argument.

Package support routines
========================

CurrentGroup variable
- Keeps track of which objects are associated with which packages.

EnumModules procedure
- Executes a callback for all the modules in an application.

EnumResourceModules procedure
- Executes a callback for all resource modules in an application.

FinalizePackage procedure
- Finalizes the specified package .BPL.

GetPackageDescription function
- Returns the description resource from a package.

GetPackageInfo procedure
- Enumerates all the units and required packages for a package.

InitializePackage procedure
- Validates and initializes a given package.

LibModuleList variable
- Lists module records for enumeration procedures.

LoadPackage function
- Loads a specified package.

SafeLoadLibrary function
- Loads a DLL while suppressing error dialogs and preventing the DLL from
changing the FPU control word.

UnloadPackage procedure
- Unloads a package.

Pointer and address routines
============================

Addr function
- Returns a pointer to a specified object.

FreeAndNil procedure
- Frees an object reference and replaces the reference with nil..

Ptr function
- Converts a specified address to a pointer.

Printer support
===============

Printer function
- Returns a global instance of TPrinter to manage interaction with the printer.

SetPrinter function
- Replaces the global instance of TPrinter that manages interaction with the
printer.

Program control
===============

Sleep procedure
- Delay program execution for a specified number of microseconds.

Property category routines
==========================

IsPropertyInCategory function

RegisterPropertiesInCategory function
- Registers multiple properties in a specific property category.

RegisterPropertyInCategory function
- Registers a single property in a specific property category.

Qt / CLX conversion routines
============================

CopyQStringListToTStrings function
- Copies the contents of a Qt QStringList to a TStrings object.

IODeviceFromStream function
- Converts a TStream object to a Qt QIOStream object.

QStringListToTStringList function
- Converts a Qt QStringList to a TStringList object.

TStringsToQStringList function
- Converts of a TStrings object to a Qt QStringList object.

Random number routines
======================

RandG function
- Generates random numbers with Gaussian distribution.

Random function
- Generates random numbers within a specified range.

RandomFrom function
- Returns a randomly selected element from an array.

Randomize procedure
- Initializes the random number generator with a random value.

RandomRange function
- Returns a random integer from a specified range.

RandSeed variable
- RandSeed stores the built-in random number generator's seed.

Set handling routines
=====================

Exclude procedure
- Removes an element from a set.

Include procedure
- Adds an element to a set.

Statistical routines
====================

MaxIntValue function
- Returns the largest signed value in an integer array.

MaxValue function
- Returns the largest signed value in an array.

Mean function
- Returns the average of all values in an array.

MeanAndStdDev procedure
- Calculates the mean and standard deviation of array elements.

MinIntValue function
- Returns the smallest signed value in an integer array.

MinValue function
- Returns smallest signed value in an array.

MomentSkewKurtosis procedure
- Calculates the mean, variance, skew, and kurtosis.

Norm function
- Returns the Euclidean 'L-2' norm.

PopnStdDev function
- Calculates the population standard deviation.

PopnVariance function
- Calculates the population variance.

StdDev function
- Returns the sample standard deviation for elements in an array.

Sum function
- Returns the sum of the elements in an array.

SumInt function
- Returns the sum of the elements in an integer array.

SumOfSquares function
- Returns the sum of the squared values from a data array.

SumsAndSquares procedure
- Returns the sum of the values and the sum of the squared values in an array.

TotalVariance function
- Returns the statistical variance from an array of values.

Variance function
- Calculates statistical sample variance from an array of data.

Streaming utilities
===================

ActivateClassGroup procedure
- Activates a group of classes that derive from TPersistent.

FindClass function
- Finds and returns a class that is derived from TPersistent.

FindClassHInstance function
- Returns the instance handle for the module in which a class type is defined.

FindGlobalComponent function
- Returns a top-level container component.

FindHInstance function
- Returns the instance handle of the module that contains a specified address.

FindResourceHInstance function
- Returns the instance handle of the resource module associated with a specified
HInstance.

GetClass function
- Returns a registered persistent class given its name.

GroupDescendentsWith procedure
- Adds a specified class to the group in which another class appears.

IdentToInt function
- Uses a mapping array to convert string identifiers into their corresponding
integer values.

InitInheritedComponent function
- Initializes streaming of a form file for an inherited root class.

IntToIdent function
- Uses a mapping array to convert integers into their corresponding string
identifiers.

IsUniqueGlobalComponentName function
- Indicates whether a proposed component name is unambiguous.

ObjectBinaryToText procedure
- Converts the binary representation of an object into more readily understandable
text.

ObjectResourceToText procedure
- Converts the binary representation of an object resource into more readily
understandable text.

ObjectTextToBinary procedure
- Converts a symbolic text representation of an object into the binary version
that is used to save the object to files or memory streams.

ObjectTextToResource procedure
- Converts a symbolic text representation of an object into an internal binary
representation.

ReadComponentRes function
- Reads components and their properties from a specified Windows resource.

ReadComponentResEx function
- Reads a component from a resource.

ReadComponentResFile function
- Reads components and their properties from a specified Windows resource file.

RegisterClass procedure
- Registers a class of persistent object so that its class type can be retrieved.

RegisterClassAlias procedure
- Registers a class that is identical to another class except for the name.

RegisterClasses procedure
- Registers a set of classes.

RegisterIntegerConsts procedure
- Registers conversion functions for string identifiers that represent type values.

StartClassGroup procedure
- Starts a class group derived from TPersistent.

TestStreamFormat function
- Identifies the format of a form file when reading it from a stream.

TypeInfo function
- Returns a pointer to compiler-generated runtime type information for a type
identifier.

UnregisterClass procedure
- Unregisters an object class.

UnregisterClasses procedure
- Unregisters a set of classes.

UnregisterIntegerConsts procedure
- Unregisters conversion functions for string identifiers that represent type
values.

UnregisterModuleClasses procedure
- Unregisters all classes defined in a specified module.

WriteComponentResFile procedure
- Writes components and their properties to a file using a Windows resource file
format.

String formatting routines
==========================

FmtLoadStr function
- Returns formatted output using a resourced format string.

FmtStr procedure
- Assembles a formatted string using a format string and an array of arguments.

Format function
- Returns a formatted string assembled from a format string and an array of
arguments.

FormatBuf function
- Formats the arguments from an array, placing the result in a buffer.

GetFormatSettings procedure
- Resets the date and number format parameters to initial values.

StrFmt function
- Formats entries in an array.

StrLFmt function
- Formats a series of arguments from a specified open array into a buffer.

WideFormat function
- Returns a formatted Unicode string assembled from a format string and an
array of arguments.

WideFormatBuf function
- Formats the arguments from an array, placing the result in a buffer.

String handling routines
========================

AnsiCompareStr function
- Compares strings based on the current locale with case sensitivity.

AnsiCompareText function
- Compares strings based on the current locale without case sensitivity.

AnsiContainsStr function
- Indicates whether one string is a (case-sensitive) substring of another.

AnsiContainsText function
- Indicates whether one string is a (case-insensitive) substring of another.

AnsiDequotedStr function
- Converts a quoted string into an unquoted

AnsiEndsStr function
- Indicates whether one string is a (case-sensitive) suffix of another.

AnsiEndsText function
- Indicates whether one string is a (case-insensitive) suffix of another.

AnsiExtractQuotedStr function
- Converts a quoted string into an unquoted string.

AnsiIndexStr function
- Provides the index of a specified string in an array of strings.

AnsiIndexText function
- Provides the index of a specified string in an array of strings.

AnsiLowerCase function
- Returns a string that is a copy of the given string converted to lower case.

AnsiMatchStr function
- Indicates whether an array of strings contains an exact match to a specified
string.

AnsiMatchText function
- Indicates whether an array of strings contains a case-insensitive match to a
specified string.

AnsiPos function
- Locates the position of a substring within a string.

AnsiQuotedStr function
- Returns the quoted version of a string.

AnsiReplaceStr function
- Replaces all occurrences of a substring with another string.

AnsiReplaceText function
- Replaces all case-insensitive matches of a substring with another string.

AnsiResemblesProc variable
- Controls the algorithm used by AnsiResemblesText to determine when two strings
are similar.

AnsiResemblesText function
- Indicates whether two strings are similar.

AnsiSameStr function
- Compares strings based on the current locale with case sensitivity.

AnsiSameText function
- Compares strings based on the current locale without case sensitivity.

AnsiStartsStr function
- Indicates whether one string is a (case-sensitive) prefix of another.

AnsiStartsText function
- Indicates whether one string is a (case-insensitive) prefix of another.

AnsiUpperCase function
- Converts a string to upper case.

CompareStr function
- Compares two strings case sensitively.

CompareText function
- Compares two strings by ordinal value without case sensitivity.

Concat function
- Concatenates two or more strings into one.

Copy function
- Returns a substring of a string or a segment of a dynamic array.

DecodeSoundExInt function
- Converts an integer representation of a SoundEx encoding into the corresponding
phonetic string.

DecodeSoundExWord function
- Converts a Word representation of a SoundEx encoding into the corresponding
phonetic string.

Delete procedure
- Removes a substring from a string.

DupeString function
- Returns the concatenation of a string with itself a specified number of repeats.

Insert procedure
- Inserts a substring into a string beginning at a specified point.

IsDelimiter function
- Indicates whether a specified character in a string matches one of a set of
delimiters.

LastDelimiter function
- Returns the byte index in S of the last character that matches any character
in the Delimiters AnsiString.

LeftStr function
- Returns the substring of a specified length that appears at the start of a
string.

Length function
- Returns the number of characters in a string or elements in an array.

LowerCase function
- Converts an ASCII string to lowercase.

MidStr function
- Returns the substring of a specified length that appears at a specified position
in a string.

NullStr constant
- Declares a pointer to EmptyStr.

Pos function
- Returns the index value of the first character in a specified substring that
occurs in a given string.

QuotedStr function
- Returns the quoted version of a string.

ReverseString function
- Returns the reverse of a specified string.

RightStr function
- Returns the substring of a specified length that appears at the end of a
string.

SameText function
- Compares two strings by ordinal value without case sensitivity.

SetLength procedure
- Sets the length of a string or dynamic-array variable.

SetString procedure
- Sets the contents and length of the given string.

SoundEx function
- Converts a string into its SoundEx representation.

SoundExCompare function
- Compares the SoundEx representations of two strings.

SoundExInt function
- Converts a string into an integer that represents its phonetic value.

SoundExProc function
- Indicates whether two strings are similar.

SoundExSimilar function
- Indicates whether two strings are similar.

SoundExWord function
- Converts a string into a Word that represents its phonetic value.

Str procedure
- Formats a string and returns it to a variable.

StringOfChar function
- Returns a string with a specified number of repeating characters.

StringToGUID function
- Returns a string with occurrences of one substring replaced by another
substring.

StuffString function
- Inserts a substring into a specified position of a string, replacing the
current characters.

Trim function
- Trims leading and trailing spaces and control characters from a string.

TrimLeft function
- Trims leading spaces and control characters from a string.

TrimRight function
- Trims trailing spaces and control characters from a string.

UpperCase function
- Returns a copy of a string in uppercase.

Val procedure
- Converts a string to a numeric representation.

WideLowerCase function
- Returns Unicode string converted to lower case.

WideSameStr function
- Compares Unicode strings based on the current locale with case sensitivity.

WideSameText function
- Compares Unicode strings based on the current locale without case sensitivity.

WideUpperCase function
- Returns Unicode string converted to upper case.

WrapText function
- Splits a string into multiple lines as its length approaches a specified size.

String handling routines (null-terminated)
==========================================

AnsiStrComp function
- Compares null-terminated character strings.

AnsiStrIComp function
- Compares null terminated character strings case insensitively.

AnsiStrLComp function
- Compares the first MaxLen bytes of two null-terminated strings, case-sensitively.

AnsiStrLIComp function
- Compares two strings, case-insensitively, up to the first MaxLen bytes.

AnsiStrLower function
- Converts all characters in a null-terminated string to lower case.

AnsiStrPos function
- Returns a pointer to the first occurrence of SubStr in Str.

AnsiStrRScan function
- Returns a pointer to the last occurrence of a specified character in a
specified string.

AnsiStrScan function
- Returns a pointer to first occurrence of a character in a string.

AnsiStrUpper function
- Converts all characters in a null-terminated string to upper case.

ExtractStrings function
- Fills a string list with substrings parsed from a delimited list.

LineStart function
- Finds the end of the last whole line in a buffer.

SearchBuf function
- Locates a substring within a text buffer.

StrCat function
- Appends a copy of Source to the end of Dest and returns the concatenated string.

StrComp function
- Compares two strings with case sensitivity.

StrCopy function
- Copies Source to Dest and returns Dest.

StrECopy function
- Copies null-terminated string.

StrEnd function
- Returns a pointer to the end of a null terminated string.

StrIComp function
- Compares two strings without case sensitivity.

StrLCat function
- Appends up to a specified maximum number of characters to string.

StrLComp function
- Compares up to a specified maximum number of characters in two strings.

StrLCopy function
- Copies up to a specified maximum number of characters from Source to Dest.

StrLen function
- Returns number of characters in a string excluding the null terminator.

StrLIComp function
- Compares strings up to a specified maximum number of characters, without case
sensitivity.

StrLower function
- Converts a string to lowercase.

StrMove function
- Copies specified number of characters to string.

StrPCopy function
- Copies a Pascal string to a null-terminated string.

StrPLCopy function
- Copies characters from a Pascal-style string into a null-terminated string.

StrPos function
- Returns a pointer to the first occurrence of STR2 in STR1.

StrRScan function
- Returns a pointer to the last occurrence of a specified character in a string.

StrScan function
- Returns a pointer to first occurrence of a specified character in a string.

StrUpper function
- Returns a string in upper case.

Termination procedure support
=============================

AddTerminateProc procedure
- Adds a terminate procedure to the system list of termination procedures.

CallTerminateProcs function
- Calls all of the functions in the termination procedure list.

ExitProc variable
- Points to a program's exit procedure (provided for backward compatibility).

Text file routines
==================

AssignPrn procedure
- Assigns a text-file variable to the printer.

Eoln function
- Tests whether the file pointer is at the end of a line.

Erase procedure
- Deletes an external file.

Flush procedure
- Empties the buffer of a text file opened for output.

Read procedure
- Read reads data from a file.

Readln procedure
- Reads a line of text from a file.

SeekEof function
- Returns the end-of-file status of a file, ignoring whitespace.

SeekEoln function
- Returns the end-of-line status of a file, ignoring whitespace.

SetLineBreakStyle procedure
- Determines the end-of-line and end-of-file conventions for text file I/O.

SetTextBuf procedure
- Assigns an I/O buffer to a text file.

Write procedure (for text files)
- Writes to a text file.

Writeln procedure
- Writes to a text file and adds an end-of-line marker

Thread management routines
==========================

BeginThread function
- Spawns a separate thread of execution.

CheckSynchronize function
- Allows background threads to synchronize their execution with the main thread.

EndThread function
- Terminates the execution of a thread.

ForegroundTask function
- Indicates whether the current thread is running in the foreground.

IsMultiThread variable
- Indicates whether the application spawned additional threads using BeginThread
or TThread objects.

WakeMainThread variable
- Represents a method (event handler) that is forced into the main threads queue.

Trigonometry routines
=====================

ArcCos function
- Calculates the inverse cosine of a given number.

ArcCosh function
- Calculates the inverse hyperbolic cosine of a given number.

ArcCot function
- Calculates the inverse cotangent of a given number.

ArcCotH function
- Calculates the inverse hyperbolic cotangent of a given number.

ArcCsc function
- Calculates the inverse cosecant of a given number.

ArcCscH function
- Calculates the inverse hyperbolic cosecant of a given number.

ArcSec function
- Calculates the inverse secant of a given number.

ArcSecH function
- Calculates the inverse hyperbolic secant of a given number.

ArcSin function
- Calculates the inverse sine of a given number.

ArcSinh function
- Calculates the inverse hyperbolic sine of a given number.

ArcTan function
- Calculates the arctangent of a given number.

ArcTan2 function
- Calculates the arctangent angle and quadrant of a given number.

ArcTanh function
- Calculates the inverse hyperbolic tangent of a given number.

Cos function
- Calculates the cosine of an angle.

Cosecant function
- Returns the cosecant of an angle.

Cosh function
- Calculates the hyperbolic cosine of an angle.

Cot function
- Calculates the cotangent of an angle.

Cotan function
- Calculates the cotangent of an angle.

CotH function
- Calculates the hyperbolic cotangent of an angle.

Csc function
- Returns the cosecant of an angle.

CscH function
- Returns the hyperbolic cosecant of an angle.

Hypot function
- Calculates the length of the hypotenuse.

Sec function
- Calculates the secant of an angle.

Secant function
- Calculates the secant of an angle.

SecH function
- Calculates the hyperbolic secant of an angle.

Sin function
- Returns the sine of the angle in radians.

SinCos procedure
- Returns sine and cosine of an angle.

Sinh function
- Returns the hyperbolic sine of an angle.

Tan function
- Returns the tangent of X.

Tanh function
- Returns the hyperbolic tangent of X.

Type conversion routines
========================

BinToHex procedure
- Converts a binary value into its hexadecimal representation.

BoolToStr function
- Converts a boolean value to a string.

Bounds function
- Returns the TRect for a rectangle of given dimensions.

CompToCurrency function
- Converts a Comp value to a Currency value.

CompToDouble function
- Converts a Comp value to a Double value.

Dec procedure
- Converts a Currency value to a Comp value.

FalseBoolStrs variable
- Lists strings that can represent the boolean value False.

HexToBin function
- Converts a string of hexadecimal digits to the corresponding binary value.

OffsetRect function
- Changes the origin of a rectangle by a specified amount.

Point function
- Creates a TPoint structure from a pair of coordinates.

Rect function
- Creates a TRect structure from a set of coordinates.

Rect function
- Creates a TRect structure from a set of coordinates.

SmallPoint function
- Creates a TSmallPoint structure from a pair of coordinates.

StrToBool function
- Converts a string to a boolean value.

StrToInt function
- Converts a string that represents an integer (decimal or hex notation) to a
number.

StrToInt64 function
- Converts a string that represents an integer (decimal or hex notation) to a
number.

StrToInt64Def function
- Converts a string that represents an integer (decimal or hex notation) to a
number.

StrToIntDef function
- Converts a string that represents an integer (decimal or hex notation) to a
number.

TrueBoolStrs variable
- Lists strings that can represent the boolean value True.

Unicode routines
================

WideCompareStr function
- Compares Unicode strings based on the current locale with case sensitivity.

WideCompareText function
- Compares Unicode strings based on the current locale without case sensitivity.

WideFmtStr procedure
- Assembles a formatted Unicode string using a format string and an array of
arguments.

Note: this list continues on part II


Variant support routines
========================

DynArrayFromVariant procedure
- Creates a dynamic array from a Variant.

DynArrayToVariant procedure
- Creates a Variant array from a dynamic array.

EmptyParam function
- Returns an OleVariant that represents an unused optional parameter on a dual
interface.

FindCustomVariantType function
- Retrieves the object that implements a custom Variant type.

GetVariantManager procedure
- Returns the entry points of the routines that define variant behavior.

IsVariantManagerSet function
- Indicates whether variant support is implemented in an application.

Null function
- Null returns a null Variant.

SetVariantManager procedure
- Sets the entry points of routines that define variant behavior.

Unassigned constant
- Used for a variant not yet assigned a value.

VarArrayCreate function
- Creates a variant array.

VarArrayDimCount function
- Returns number of dimensions of a variant array.

VarArrayFromStrings function
- Creates a Variant array that contains the strings in a TStrings object.

VarArrayGet function
- Returns a Variant that represents a single value from a multi-dimensional
Variant array.

VarArrayHighBound function
- Returns high bound for a dimension in a variant array.

VarArrayLock function
- Locks a variant array and returns a pointer to the data.

VarArrayLowBound function
- Returns the low bound of a dimension in a variant array.

VarArrayOf function
- Creates and fills a one-dimensional variant array.

VarArrayPut procedure
- Sets the value of a single cell in a multi-dimensional Variant array.

VarArrayRedim procedure
- Resizes a Variant array.

VarArrayRef function
- Returns a reference to the specified variant array.

VarArrayUnlock procedure
- Unlocks a variant array.

VarAsComplex function
- Casts an arbitrary Variant so that it is a custom Variant representing a
complex number.

VarAsConvert function
- Casts an arbitrary Variant so that it is a custom Variant representing a
measurement.

VarAsType function
- Converts a variant to specified type.

VarCheckEmpty procedure
- Raises an exception if a specified variants value is Unassigned.

VarClear procedure
- Empties a Variant, so that it is unassigned.

VarCompareValue function
- Returns the relationship between Variants.

VarComplex function
- Returns the Variant type code for custom Variants that represent complex
numbers.

VarComplexSimplify function
- Reduces a Variant that represents a complex number to one that represents a
real value, if possible.

VarConvert function
- Returns the Variant type code for custom Variants that represent measurements.

VarConvertCreate function
- Returns a custom Variant that represents a measurement.

VarCopyNoInd procedure
- Copies a Variant.

VarEnsureRange function
- Returns a Variant with a value in a specified range.

VarFMTBcd function
- Returns the TVarType constant that identifies the internal type of a Variant as
a TBcd value.

VarFMTBcdCreate function
- Creates a new Variant that stores its value internally as a TBcd value.

VarFromDateTime function
- Returns a variant containing a specified data and time.

VarInRange function
- Indicates whether a Variants value is in a specified range.

VarIsArray function
- Indicates whether the specified variant is an array.

VarIsByRef function
- Indicates whether the specified variants value is by reference.

VarIsClear function
- Indicates whether the specified variant has an undefined value.

VarIsComplex function
- Indicates whether a Variant stores its data internally as a complex number.

VarIsConvert function
- Indicates whether a Variant is a custom Variant that represents a measurement.

VarIsCustom function
- Indicates whether the specified variant is a custom variant.

VarIsEmpty function
- Indicates whether the specified variant is unassigned.

VarIsEmptyParam function
- Indicates whether the specified variant represents an unassigned optional parameter.

VarIsFloat function
- Indicates whether the specified variant represents a floating-point value.

VarIsFMTBcd function
- Indicates whether a specified Variant represents a TBcd value.

VarIsNull function
- Indicates whether the specified variant is Null.

VarIsNumeric function
- Indicates whether the specified variant represents a numeric value.

VarIsOrdinal function
- Indicates whether the specified variant represents an ordinal value.

VarIsSQLTimeStamp function
- Indicates whether a specified Variant represents a TSQLTimeStamp value.

VarIsStr function
- Indicates whether the specified variant represents a string value.

VarIsType function
- Indicates whether the specified variant represents a specified type.

VarSameValue function
- Indicates whether two Variants have equivalent values.

VarSQLTimeStamp function
- Returns the TVarType constant that identifies the internal type of a Variant as
a TSQLTimeStamp value.

VarSQLTimeStampCreate function
- Creates a new Variant that stores its value internally as a TSQLTimeStamp v
alue.

VarSupports function
- Indicates whether the Variants value is an interface that supports a specified
interface.

VarToBcd function
- Converts a Variant into a TBcd type.

VarToDateTime function
- Converts a specified variant to a TDateTime value.

VarToSQLTimeStamp function
- Converts a Variant that represents a TSQLTimeStamp value to the corresponding
TSQLTimeStamp.

VarToStr function
- Converts a variant to a string.

VarToStrDef function
- Converts a variant to a string.

VarToWideStr function
- Converts a variant to a WideString.

VarToWideStrDef function
- Converts a variant to a WideString.

VarType function
- Returns the type code of a specified variant.

VarTypeIsValidArrayType function
- Indicates whether a Variant type code represents a type that can be used for
the elements in a Variant array.

VarTypeIsValidElementType function
- Indicates whether a Variant type code represents a type that can be used for
the elements in a Variant array.

Web Services
============

AppNameSpacePrefix variable
- Supplies a unique prefix to use for automatically generated namespaces given
to invokable interfaces and remotable types.

DateTimeToXSDateTime function
- Returns a TXSDateTime object that encodes a TDateTime value.

GetRemotableDataContext function
- Returns the TDataContext object that provides temporary storage during a call
to an invokable interface.

InvRegistry function
- Provides access to the invocation registry.

RemClassRegistry function
- Provides access to the remotable class registry.

RemTypeRegistry function
- Provides access to the remotable type registry.

SetRemotableDataContext procedure
- Sets the data context that provides temporary storage during a call to an
invokable interface.

Widget utilities
================

FindControl function
- Returns the widget whose window is identified by the specifiedhandle or which
appears at a specified position.

Windows controls utilities
==========================

AllocateHwnd function
- Creates a window that implements a specified window procedure.

CheckToolMenuDropdown procedure
- Displays a tool buttons dropdown menu.

DeallocateHwnd procedure
- Frees a window that was created using AllocateHWnd.

DestroyMetaPict procedure
- Frees a metafile resource given its handle.

FindControl function
- Returns the windowed control whose window is identified by the specified window
handle.

GetComCtlVersion function
- Indicates which version of ComCtl32.dll is installed.

GetParentForm function
- Returns the form or property page that contains a specified control.

InitCommonControl function
- Wraps the API routine, InitCommonControlsEx, which registers common control
classes from ComCtl32.dll.

NewStyleControls variable
- Determines whether controls are drawn using the Windows 3.x look.

SendAppMessage function
- Sends a Windows message to the application.

XML support
===========

DefaultVendorName variable
- Identifies the DOM implementation that is used by default.

DOMVendors variable
- Lists all registered DOM Vendors.

ExtractLocalName function
- Strips the namespace prefix, if present, from the tag name of an XML node.

ExtractPrefix function
- Returns the namespace prefix of an XML nodes tag name.

FormatXMLData function
- Formats a string of XML so that it is more readable.

GetDOM function
- Returns the top-level DOM interface for a registered DOM implementation.

GetDOMVendor function
- Returns the TDOMVendor object for a specified DOM vendor.

IsPrefixed function
- Indicates whether an XML tag name includes a namespace prefix.

LoadXMLData function
- Creates and returns the interface of an XML document object, given a string of
XML.

LoadXMLDocument function
- Returns the interface for an XML document given the name of an XML file.

MakeNodeName function
- Assembles a full tag name from a local name and namespace prefix.

NewXMLDocument function
- Returns the interface for a new, empty XML document.

NodeMatches function
- Indicates whether a specified node matches a given namespace and tag name.

RegisterDOMVendor procedure
- Registers an implementation of the DOM interfaces so that it is available to
the TXMLDocument class.

SameNamespace function
- Indicates whether a specified node is defined within a specified namespace.

UnRegisterDOMVendor procedure
- Unregisters a DOM implementation that was registered using RegisterDOMVendor.

XMLDocError procedure
- Raises an EXMLDocError exception.


TResourceHandle
interesting map of call by var as result!
function InputBox(const ACaption, APrompt, ADefault: string): string;
begin
  Result := ADefault;
  InputQuery(ACaption, APrompt, Result);
end;



---------------------------------------------------
C Data Type | Object Pascal |  Description

-------------------------------------------------------------------------------------

LPSTR       PAnsiChar;  String >pointer
LPCSTR      PAnsiChar;  String >pointer
DWORD       Integer;    Whole numbers
BOOL        LongBool;   Boolean values
PBOOL       ^BOOL;      Pointer to a Boolean value
Pbyte       ^Byte;      Pointer to a byte value
PINT        ^Integer;   Pointer to an integer value
Psingle     ^Single;    Pointer to a single (floating point) value
PWORD       ^Word;      Pointer to a 16-bit value
PDWORD      ^DWORD;     Pointer to a 32-bit value
LPDWORD     PDWORD;     Pointer to a 32-bit value
UCHAR       Byte;       8-bit values (can represent characters)
PUCHAR      ^Byte;      Pointer to 8-bit values
SHORT       Smallint;   16-bit whole numbers
UINT        Integer;    32-bit whole numbers. Traditionally,
                        this was used to represent unsigned integers, but Object 
                        Pascal does not have a true unsigned integer data type.
PUINT       ^UINT;      Pointer to 32-bit whole numbers
ULONG       Longint;    32-bit whole numbers. Traditionally,
                        this was used to represent unsigned integers,
                        but Object Pascal does not have a true
                        unsigned integer data type.
PULONG      ^ULONG;     Pointer to 32-bit whole numbers
PLongint    ^Longint;   Pointer to 32-bit values
PInteger    ^Integer;   Pointer to 32-bit values
PSmallInt   ^Smallint;  Pointer to 16-bit values
PDouble     ^Double;    Pointer to double (floating point) values
LCID        DWORD;      A local identifier
LANGID      Word;       A language identifier
THandle     Integer;    An object handle. Many Windows API functions return a value
                        of type THandle, which identobject ifies that object within
                        Windowsinternal object tracking tables.
PHandle     ^THandle;   A pointer to a handle
WPARAM      Longint;    A 32-bit message parameter. Under earlier versions of Windows,
                        this was a 16-bit data type.
LPARAM      Longint;    A 32-bit message parameter
LRESULT     Longint;    A 32-bit function return value
HWND        Integer;    A handle to a window. All windowed controls, child windows,
                        main windows, etc., have a corresponding window handle that
                        identifies them within Windowsinternal tracking tables.
HHOOK       Integer;    A handle to an installed Windows system hook
ATOM        Word;       An index into the local or global atom table for a string
HGLOBAL     THandle;    A handle identifying a glob. allocated dynamic memory object.
                        Under 32-bit Windows, there is no distinction between globally
                        and locally allocated memory.
HLOCAL      THandle;    A handle identifying a locally allocated dynamic memory object.
                        Under 32-bit Windows, there is no distinction between globally
                        and locally allocated memory.
FARPROC     Pointer;    A pointer to a procedure, usually used as a parameter type in
                        functions that require a callback function
HGDIOBJ     Integer;    A handle to a GDI object. Pens, device contexts, brushes, etc.,
                        all have a handle of this type that identifies them within
                        Windowsinternal tracking tables.
HBITMAP     Integer;    A handle to a Windows bitmap object
HBRUSH      Integer;    A handle to a Windows brush object
HDC         Integer;    A handle to a device context
HENHMETAFILE  Integer;  A handle to a Windows enhanced metafile object
HFONT       Integer;    A handle to a Windows logical font object
HICON       Integer;    A handle to a Windows icon object
HMENU       Integer;    A handle to a Windows menu object
HMETAFILE   Integer;    A handle to a Windows metafile object
HINST       Integer;    A handle to an instance object
HMODULE     HINST;      A handle to a module
HPALETTE    Integer;    A handle to a Windows color palette
HPEN        Integer;    A handle to a Windows pen object
HRGN        Integer;    A handle to a Windows region object
HRSRC       Integer;    A handle to a Windows resource object
HKL         Integer;    A handle to a keyboard layout
HFILE       Integer;    A handle to an open file
HCURSOR     HICON;      A handle to a Windows mouse cursor object
COLORREF    DWORD;      A Windows color reference value, containing values
                        for the red, green, and of ;bsp;blue components of a color
