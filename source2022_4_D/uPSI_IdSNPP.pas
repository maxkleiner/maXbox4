unit uPSI_IdSNPP;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdSNPP = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdSNPP(CL: TPSPascalCompiler);
procedure SIRegister_IdSNPP(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdSNPP(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdSNPP(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdException
  ,IdGlobal
  ,IdTCPConnection
  ,IdMessage
  ,IdComponent
  ,IdTCPClient
  ,IdSNPP
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdSNPP]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdSNPP(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPClient', 'TIdSNPP') do
  with CL.AddClassN(CL.FindClass('TIdTCPClient'),'TIdSNPP') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Connect( const ATimeout : Integer)');
    RegisterMethod('Procedure Disconnect');
    RegisterMethod('Procedure Reset');
    RegisterMethod('Procedure SendMessage( APagerId, AMsg : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdSNPP(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TConnectionResult', '( crCanPost, crNoPost, crAuthRequired, crTe'
   +'mpUnavailable )');
  CL.AddTypeS('TCheckResp', 'record Code : SmallInt; Resp : String; end');
  SIRegister_TIdSNPP(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSNPPException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSNPPConnectionRefused');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSNPPProtocolError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSNPPNoMultiLineMessages');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdSNPP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdSNPP) do
  begin
    RegisterConstructor(@TIdSNPP.Create, 'Create');
    RegisterMethod(@TIdSNPP.Connect, 'Connect');
    RegisterMethod(@TIdSNPP.Disconnect, 'Disconnect');
    RegisterMethod(@TIdSNPP.Reset, 'Reset');
    RegisterMethod(@TIdSNPP.SendMessage, 'SendMessage');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdSNPP(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdSNPP(CL);
  with CL.Add(EIdSNPPException) do
  with CL.Add(EIdSNPPConnectionRefused) do
  with CL.Add(EIdSNPPProtocolError) do
  with CL.Add(EIdSNPPNoMultiLineMessages) do
end;

 
 
{ TPSImport_IdSNPP }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdSNPP.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdSNPP(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdSNPP.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdSNPP(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
