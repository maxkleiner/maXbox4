unit uPSI_cJSON;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_cJSON = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJSONParser(CL: TPSPascalCompiler);
procedure SIRegister_TJSONObject(CL: TPSPascalCompiler);
procedure SIRegister_TJSONArray(CL: TPSPascalCompiler);
procedure SIRegister_TJSONNull(CL: TPSPascalCompiler);
procedure SIRegister_TJSONBoolean(CL: TPSPascalCompiler);
procedure SIRegister_TJSONFloat(CL: TPSPascalCompiler);
procedure SIRegister_TJSONInteger(CL: TPSPascalCompiler);
procedure SIRegister_TJSONString(CL: TPSPascalCompiler);
procedure SIRegister_TJSONValue(CL: TPSPascalCompiler);
procedure SIRegister_cJSON(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cJSON_Routines(S: TPSExec);
procedure RIRegister_TJSONParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONNull(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONBoolean(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONFloat(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONInteger(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONString(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONValue(CL: TPSRuntimeClassImporter);
procedure RIRegister_cJSON(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   cUtils
  //,cStrings
  ,cJSON
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_cJSON]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TJSONParser') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TJSONParser') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function ParseText( const AText : UnicodeString) : TJSONValue');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJSONValue', 'TJSONObject') do
  with CL.AddClassN(CL.FindClass('TJSONValue'),'TJSONObject') do begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Clear');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Item', 'TJSONValue UnicodeString', iptr);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Name : UnicodeString; const Value : TJSONValue)');
    RegisterMethod('Function Exists( const Name : UnicodeString) : Boolean;');
    RegisterMethod('Function Exists1( const Name : UnicodeString; out Value : TJSONValue) : Boolean;');
    RegisterMethod('Function GetItemAsStr( const Name : UnicodeString; const Default : UnicodeString) : UnicodeString');
    RegisterMethod('Function GetItemAsStrUTF8( const Name : UnicodeString; const Default : AnsiString) : AnsiString');
    RegisterMethod('Function GetItemAsStrWide( const Name : UnicodeString; const Default : WideString) : WideString');
    RegisterMethod('Function GetItemAsInt( const Name : UnicodeString; const Default : Int64) : Int64');
    RegisterMethod('Function GetItemAsFloat( const Name : UnicodeString; const Default : Extended) : Extended');
    RegisterMethod('Function GetItemAsBoolean( const Name : UnicodeString; const Default : Boolean) : Boolean');
    RegisterMethod('Function GetItemAsArray( const Name : UnicodeString) : TJSONArray');
    RegisterMethod('Function GetItemAsObject( const Name : UnicodeString) : TJSONObject');
    RegisterMethod('Function GetItemAsVariant( const Name : UnicodeString) : Variant');
    RegisterMethod('Function RequireItemAsArray( const Name : UnicodeString) : TJSONArray');
    RegisterMethod('Function RequireItemAsObject( const Name : UnicodeString) : TJSONObject');
    RegisterMethod('Procedure SetItemAsStr( const Name : UnicodeString; const Value : UnicodeString)');
    RegisterMethod('Procedure SetItemAsStrUTF8( const Name : UnicodeString; const Value : AnsiString)');
    RegisterMethod('Procedure SetItemAsStrWide( const Name : UnicodeString; const Value : WideString)');
    RegisterMethod('Procedure SetItemAsInt( const Name : UnicodeString; const Value : Int64)');
    RegisterMethod('Procedure SetItemAsFloat( const Name : UnicodeString; const Value : Extended)');
    RegisterMethod('Procedure SetItemAsBoolean( const Name : UnicodeString; const Value : Boolean)');
    RegisterMethod('Procedure SetItemAsVariant( const Name : UnicodeString; const Value : Variant)');
    RegisterMethod('Function Iterate( var Iterator : TJSONObjectIterator) : Boolean');
    RegisterMethod('Function IterateNext( var Iterator : TJSONObjectIterator) : Boolean');
    RegisterMethod('Procedure IterateClose( var Iterator : TJSONObjectIterator)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJSONValue', 'TJSONArray') do
  with CL.AddClassN(CL.FindClass('TJSONValue'),'TJSONArray') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Clear');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Item', 'TJSONValue Integer', iptr);
    SetDefaultPropery('Item');
    RegisterMethod('Function ItemIsNull( const Idx : Integer) : Boolean');
    RegisterProperty('ItemAsStr', 'UnicodeString Integer', iptrw);
    RegisterProperty('ItemAsStrUTF8', 'AnsiString Integer', iptrw);
    RegisterProperty('ItemAsStrWide', 'WideString Integer', iptrw);
    RegisterProperty('ItemAsInt', 'Int64 Integer', iptrw);
    RegisterProperty('ItemAsFloat', 'Extended Integer', iptrw);
    RegisterProperty('ItemAsBoolean', 'Boolean Integer', iptrw);
    RegisterProperty('ItemAsVariant', 'Variant Integer', iptrw);
    RegisterMethod('Procedure Append( const A : TJSONValue)');
    RegisterMethod('Procedure AppendStr( const A : UnicodeString)');
    RegisterMethod('Procedure AppendStrUTF8( const A : AnsiString)');
    RegisterMethod('Procedure AppendStrWide( const A : WideString)');
    RegisterMethod('Procedure AppendInt( const A : Int64)');
    RegisterMethod('Procedure AppendFloat( const A : Extended)');
    RegisterMethod('Procedure AppendBoolean( const A : Boolean)');
    RegisterMethod('Procedure AppendNull');
    RegisterMethod('Procedure AppendVariant( const A : Variant)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONNull(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJSONValue', 'TJSONNull') do
  with CL.AddClassN(CL.FindClass('TJSONValue'),'TJSONNull') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONBoolean(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJSONValue', 'TJSONBoolean') do
  with CL.AddClassN(CL.FindClass('TJSONValue'),'TJSONBoolean') do
  begin
    RegisterMethod('Constructor Create( const AValue : Boolean)');
    RegisterProperty('Value', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONFloat(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJSONValue', 'TJSONFloat') do
  with CL.AddClassN(CL.FindClass('TJSONValue'),'TJSONFloat') do
  begin
    RegisterMethod('Constructor Create( const AValue : Extended)');
    RegisterProperty('Value', 'Extended', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONInteger(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJSONValue', 'TJSONInteger') do
  with CL.AddClassN(CL.FindClass('TJSONValue'),'TJSONInteger') do
  begin
    RegisterMethod('Constructor Create( const AValue : Int64)');
    RegisterProperty('Value', 'Int64', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONString(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJSONValue', 'TJSONString') do
  with CL.AddClassN(CL.FindClass('TJSONValue'),'TJSONString') do
  begin
    RegisterMethod('Constructor Create( const AValue : UnicodeString)');
    RegisterMethod('Constructor CreateWide( const AValue : WideString)');
    RegisterMethod('Constructor CreateUTF8( const AValue : AnsiString)');
    RegisterProperty('Value', 'UnicodeString', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONValue(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TJSONValue') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TJSONValue') do
  begin
    RegisterMethod('Function Clone : TJSONValue');
    RegisterMethod('Function GetJSONString( const AOptions : TJSONStringOptions) : UnicodeString');
    RegisterMethod('Function GetJSONStringUTF8( const AOptions : TJSONStringOptions) : AnsiString');
    RegisterMethod('Function GetJSONStringWide( const AOptions : TJSONStringOptions) : WideString');
    RegisterProperty('ValueType', 'TJSONValueType', iptr);
    RegisterProperty('ValueStr', 'UnicodeString', iptrw);
    RegisterProperty('ValueStrUTF8', 'AnsiString', iptrw);
    RegisterProperty('ValueStrWide', 'WideString', iptrw);
    RegisterProperty('ValueInt', 'Int64', iptrw);
    RegisterProperty('ValueFloat', 'Extended', iptrw);
    RegisterProperty('ValueBoolean', 'Boolean', iptrw);
    RegisterProperty('ValueVariant', 'Variant', iptrw);
    RegisterProperty('ValueIsStr', 'Boolean', iptr);
    RegisterProperty('ValueIsInt', 'Boolean', iptr);
    RegisterProperty('ValueIsFloat', 'Boolean', iptr);
    RegisterProperty('ValueIsBoolean', 'Boolean', iptr);
    RegisterProperty('ValueIsNull', 'Boolean', iptr);
    RegisterProperty('ValueIsArray', 'Boolean', iptr);
    RegisterProperty('ValueIsObject', 'Boolean', iptr);
    RegisterMethod('Function Compare( const A : TJSONValue) : Integer');
    RegisterMethod('Procedure Validate( const Schema : TJSONObject)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_cJSON(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJSONValue');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJSONSchema');
  CL.AddTypeS('TJSONValueType', '( jvtString, jvtInteger, jvtFloat, jvtBoolean,'
   +' jvtNull, jvtArray, jvtObject )');
  CL.AddTypeS('TJSONStringOptions', 'set of ( jboIndent )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJSONObject');
  SIRegister_TJSONValue(CL);
  SIRegister_TJSONString(CL);
  SIRegister_TJSONInteger(CL);
  SIRegister_TJSONFloat(CL);
  SIRegister_TJSONBoolean(CL);
  SIRegister_TJSONNull(CL);
  SIRegister_TJSONArray(CL);
  CL.AddTypeS('TJSONObjectItem', 'record Name : UnicodeString; Value : TJSONVal'
   +'ue; end');
  CL.AddTypeS('PJSONObjectItem', '^TJSONObjectItem // will not work');
  CL.AddTypeS('TJSONObjectIterator', 'record InternalIndex : Integer; Item : TJ'
   +'SONObjectItem; end');
  SIRegister_TJSONObject(CL);
  CL.AddTypeS('TJSONParserToken', '( jptNone, jptEOF, jptWhiteSpace, jptLeftSqu'
   +'are, jptRightSquare, jptLeftCurly, jptRightCurly, jptColon, jptComma, jptT'
   +'rue, jptFalse, jptNull, jptInteger, jptFloat, jptSciFloat, jptString )');
  SIRegister_TJSONParser(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJSONParser');
 CL.AddDelphiFunction('Function ParseJSONText( const JSONText : UnicodeString) : TJSONValue');
 CL.AddDelphiFunction('Function ParseJSONTextUTF8( const JSONText : AnsiString) : TJSONValue');
 CL.AddDelphiFunction('Function ParseJSONTextWide( const JSONText : WideString) : TJSONValue');
 CL.AddDelphiFunction('Function GetSchemaSchemaObj : TJSONObject');
 CL.AddDelphiFunction('Procedure ValidateSchema( const Schema : TJSONObject)');
 CL.AddDelphiFunction('Procedure SelfTest');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function TJSONObjectExists1_P(Self: TJSONObject;  const Name : UnicodeString; out Value : TJSONValue) : Boolean;
Begin Result := Self.Exists(Name, Value); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectExists_P(Self: TJSONObject;  const Name : UnicodeString) : Boolean;
Begin Result := Self.Exists(Name); END;

(*----------------------------------------------------------------------------*)
procedure TJSONObjectItem_R(Self: TJSONObject; var T: TJSONValue; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONObjectCount_R(Self: TJSONObject; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsVariant_W(Self: TJSONArray; const T: Variant; const t1: Integer);
begin Self.ItemAsVariant[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsVariant_R(Self: TJSONArray; var T: Variant; const t1: Integer);
begin T := Self.ItemAsVariant[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsBoolean_W(Self: TJSONArray; const T: Boolean; const t1: Integer);
begin Self.ItemAsBoolean[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsBoolean_R(Self: TJSONArray; var T: Boolean; const t1: Integer);
begin T := Self.ItemAsBoolean[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsFloat_W(Self: TJSONArray; const T: Extended; const t1: Integer);
begin Self.ItemAsFloat[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsFloat_R(Self: TJSONArray; var T: Extended; const t1: Integer);
begin T := Self.ItemAsFloat[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsInt_W(Self: TJSONArray; const T: Int64; const t1: Integer);
begin Self.ItemAsInt[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsInt_R(Self: TJSONArray; var T: Int64; const t1: Integer);
begin T := Self.ItemAsInt[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsStrWide_W(Self: TJSONArray; const T: WideString; const t1: Integer);
begin Self.ItemAsStrWide[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsStrWide_R(Self: TJSONArray; var T: WideString; const t1: Integer);
begin T := Self.ItemAsStrWide[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsStrUTF8_W(Self: TJSONArray; const T: AnsiString; const t1: Integer);
begin Self.ItemAsStrUTF8[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsStrUTF8_R(Self: TJSONArray; var T: AnsiString; const t1: Integer);
begin T := Self.ItemAsStrUTF8[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsStr_W(Self: TJSONArray; const T: UnicodeString; const t1: Integer);
begin Self.ItemAsStr[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItemAsStr_R(Self: TJSONArray; var T: UnicodeString; const t1: Integer);
begin T := Self.ItemAsStr[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayItem_R(Self: TJSONArray; var T: TJSONValue; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJSONArrayCount_R(Self: TJSONArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TJSONBooleanValue_R(Self: TJSONBoolean; var T: Boolean);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TJSONFloatValue_R(Self: TJSONFloat; var T: Extended);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TJSONIntegerValue_R(Self: TJSONInteger; var T: Int64);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TJSONStringValue_R(Self: TJSONString; var T: UnicodeString);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueIsObject_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueIsObject; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueIsArray_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueIsArray; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueIsNull_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueIsNull; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueIsBoolean_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueIsBoolean; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueIsFloat_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueIsFloat; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueIsInt_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueIsInt; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueIsStr_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueIsStr; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueVariant_W(Self: TJSONValue; const T: Variant);
begin Self.ValueVariant := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueVariant_R(Self: TJSONValue; var T: Variant);
begin T := Self.ValueVariant; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueBoolean_W(Self: TJSONValue; const T: Boolean);
begin Self.ValueBoolean := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueBoolean_R(Self: TJSONValue; var T: Boolean);
begin T := Self.ValueBoolean; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueFloat_W(Self: TJSONValue; const T: Extended);
begin Self.ValueFloat := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueFloat_R(Self: TJSONValue; var T: Extended);
begin T := Self.ValueFloat; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueInt_W(Self: TJSONValue; const T: Int64);
begin Self.ValueInt := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueInt_R(Self: TJSONValue; var T: Int64);
begin T := Self.ValueInt; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueStrWide_W(Self: TJSONValue; const T: WideString);
begin Self.ValueStrWide := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueStrWide_R(Self: TJSONValue; var T: WideString);
begin T := Self.ValueStrWide; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueStrUTF8_W(Self: TJSONValue; const T: AnsiString);
begin Self.ValueStrUTF8 := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueStrUTF8_R(Self: TJSONValue; var T: AnsiString);
begin T := Self.ValueStrUTF8; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueStr_W(Self: TJSONValue; const T: UnicodeString);
begin Self.ValueStr := T; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueStr_R(Self: TJSONValue; var T: UnicodeString);
begin T := Self.ValueStr; end;

(*----------------------------------------------------------------------------*)
procedure TJSONValueValueType_R(Self: TJSONValue; var T: TJSONValueType);
begin T := Self.ValueType; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cJSON_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ParseJSONText, 'ParseJSONText', cdRegister);
 S.RegisterDelphiFunction(@ParseJSONTextUTF8, 'ParseJSONTextUTF8', cdRegister);
 S.RegisterDelphiFunction(@ParseJSONTextWide, 'ParseJSONTextWide', cdRegister);
 S.RegisterDelphiFunction(@GetSchemaSchemaObj, 'GetSchemaSchemaObj', cdRegister);
 S.RegisterDelphiFunction(@ValidateSchema, 'ValidateSchema', cdRegister);
 S.RegisterDelphiFunction(@SelfTest, 'SelfTest', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONParser) do
  begin
    RegisterConstructor(@TJSONParser.Create, 'Create');
    RegisterMethod(@TJSONParser.ParseText, 'ParseText');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONObject) do
  begin
    RegisterConstructor(@TJSONObject.Create, 'Create');
    RegisterMethod(@TJSONObject.Clear, 'Clear');
    RegisterPropertyHelper(@TJSONObjectCount_R,nil,'Count');
    RegisterPropertyHelper(@TJSONObjectItem_R,nil,'Item');
    RegisterMethod(@TJSONObject.Add, 'Add');
    RegisterMethod(@TJSONObjectExists_P, 'Exists');
    RegisterMethod(@TJSONObjectExists1_P, 'Exists1');
    RegisterMethod(@TJSONObject.GetItemAsStr, 'GetItemAsStr');
    RegisterMethod(@TJSONObject.GetItemAsStrUTF8, 'GetItemAsStrUTF8');
    RegisterMethod(@TJSONObject.GetItemAsStrWide, 'GetItemAsStrWide');
    RegisterMethod(@TJSONObject.GetItemAsInt, 'GetItemAsInt');
    RegisterMethod(@TJSONObject.GetItemAsFloat, 'GetItemAsFloat');
    RegisterMethod(@TJSONObject.GetItemAsBoolean, 'GetItemAsBoolean');
    RegisterMethod(@TJSONObject.GetItemAsArray, 'GetItemAsArray');
    RegisterMethod(@TJSONObject.GetItemAsObject, 'GetItemAsObject');
    RegisterMethod(@TJSONObject.GetItemAsVariant, 'GetItemAsVariant');
    RegisterMethod(@TJSONObject.RequireItemAsArray, 'RequireItemAsArray');
    RegisterMethod(@TJSONObject.RequireItemAsObject, 'RequireItemAsObject');
    RegisterMethod(@TJSONObject.SetItemAsStr, 'SetItemAsStr');
    RegisterMethod(@TJSONObject.SetItemAsStrUTF8, 'SetItemAsStrUTF8');
    RegisterMethod(@TJSONObject.SetItemAsStrWide, 'SetItemAsStrWide');
    RegisterMethod(@TJSONObject.SetItemAsInt, 'SetItemAsInt');
    RegisterMethod(@TJSONObject.SetItemAsFloat, 'SetItemAsFloat');
    RegisterMethod(@TJSONObject.SetItemAsBoolean, 'SetItemAsBoolean');
    RegisterMethod(@TJSONObject.SetItemAsVariant, 'SetItemAsVariant');
    RegisterMethod(@TJSONObject.Iterate, 'Iterate');
    RegisterMethod(@TJSONObject.IterateNext, 'IterateNext');
    RegisterMethod(@TJSONObject.IterateClose, 'IterateClose');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONArray) do
  begin
    RegisterConstructor(@TJSONArray.Create, 'Create');
    RegisterMethod(@TJSONArray.Clear, 'Clear');
    RegisterPropertyHelper(@TJSONArrayCount_R,nil,'Count');
    RegisterPropertyHelper(@TJSONArrayItem_R,nil,'Item');
    RegisterMethod(@TJSONArray.ItemIsNull, 'ItemIsNull');
    RegisterPropertyHelper(@TJSONArrayItemAsStr_R,@TJSONArrayItemAsStr_W,'ItemAsStr');
    RegisterPropertyHelper(@TJSONArrayItemAsStrUTF8_R,@TJSONArrayItemAsStrUTF8_W,'ItemAsStrUTF8');
    RegisterPropertyHelper(@TJSONArrayItemAsStrWide_R,@TJSONArrayItemAsStrWide_W,'ItemAsStrWide');
    RegisterPropertyHelper(@TJSONArrayItemAsInt_R,@TJSONArrayItemAsInt_W,'ItemAsInt');
    RegisterPropertyHelper(@TJSONArrayItemAsFloat_R,@TJSONArrayItemAsFloat_W,'ItemAsFloat');
    RegisterPropertyHelper(@TJSONArrayItemAsBoolean_R,@TJSONArrayItemAsBoolean_W,'ItemAsBoolean');
    RegisterPropertyHelper(@TJSONArrayItemAsVariant_R,@TJSONArrayItemAsVariant_W,'ItemAsVariant');
    RegisterMethod(@TJSONArray.Append, 'Append');
    RegisterMethod(@TJSONArray.AppendStr, 'AppendStr');
    RegisterMethod(@TJSONArray.AppendStrUTF8, 'AppendStrUTF8');
    RegisterMethod(@TJSONArray.AppendStrWide, 'AppendStrWide');
    RegisterMethod(@TJSONArray.AppendInt, 'AppendInt');
    RegisterMethod(@TJSONArray.AppendFloat, 'AppendFloat');
    RegisterMethod(@TJSONArray.AppendBoolean, 'AppendBoolean');
    RegisterMethod(@TJSONArray.AppendNull, 'AppendNull');
    RegisterMethod(@TJSONArray.AppendVariant, 'AppendVariant');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONNull(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONNull) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONBoolean(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONBoolean) do
  begin
    RegisterConstructor(@TJSONBoolean.Create, 'Create');
    RegisterPropertyHelper(@TJSONBooleanValue_R,nil,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONFloat(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONFloat) do
  begin
    RegisterConstructor(@TJSONFloat.Create, 'Create');
    RegisterPropertyHelper(@TJSONFloatValue_R,nil,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONInteger(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONInteger) do
  begin
    RegisterConstructor(@TJSONInteger.Create, 'Create');
    RegisterPropertyHelper(@TJSONIntegerValue_R,nil,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONString(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONString) do
  begin
    RegisterConstructor(@TJSONString.Create, 'Create');
    RegisterConstructor(@TJSONString.CreateWide, 'CreateWide');
    RegisterConstructor(@TJSONString.CreateUTF8, 'CreateUTF8');
    RegisterPropertyHelper(@TJSONStringValue_R,nil,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONValue(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONValue) do
  begin
    RegisterVirtualMethod(@TJSONValue.Clone, 'Clone');
    RegisterMethod(@TJSONValue.GetJSONString, 'GetJSONString');
    RegisterMethod(@TJSONValue.GetJSONStringUTF8, 'GetJSONStringUTF8');
    RegisterMethod(@TJSONValue.GetJSONStringWide, 'GetJSONStringWide');
    RegisterPropertyHelper(@TJSONValueValueType_R,nil,'ValueType');
    RegisterPropertyHelper(@TJSONValueValueStr_R,@TJSONValueValueStr_W,'ValueStr');
    RegisterPropertyHelper(@TJSONValueValueStrUTF8_R,@TJSONValueValueStrUTF8_W,'ValueStrUTF8');
    RegisterPropertyHelper(@TJSONValueValueStrWide_R,@TJSONValueValueStrWide_W,'ValueStrWide');
    RegisterPropertyHelper(@TJSONValueValueInt_R,@TJSONValueValueInt_W,'ValueInt');
    RegisterPropertyHelper(@TJSONValueValueFloat_R,@TJSONValueValueFloat_W,'ValueFloat');
    RegisterPropertyHelper(@TJSONValueValueBoolean_R,@TJSONValueValueBoolean_W,'ValueBoolean');
    RegisterPropertyHelper(@TJSONValueValueVariant_R,@TJSONValueValueVariant_W,'ValueVariant');
    RegisterPropertyHelper(@TJSONValueValueIsStr_R,nil,'ValueIsStr');
    RegisterPropertyHelper(@TJSONValueValueIsInt_R,nil,'ValueIsInt');
    RegisterPropertyHelper(@TJSONValueValueIsFloat_R,nil,'ValueIsFloat');
    RegisterPropertyHelper(@TJSONValueValueIsBoolean_R,nil,'ValueIsBoolean');
    RegisterPropertyHelper(@TJSONValueValueIsNull_R,nil,'ValueIsNull');
    RegisterPropertyHelper(@TJSONValueValueIsArray_R,nil,'ValueIsArray');
    RegisterPropertyHelper(@TJSONValueValueIsObject_R,nil,'ValueIsObject');
    RegisterVirtualMethod(@TJSONValue.Compare, 'Compare');
    RegisterVirtualMethod(@TJSONValue.Validate, 'Validate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cJSON(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EJSONValue) do
  with CL.Add(EJSONSchema) do
  with CL.Add(TJSONObject) do
  RIRegister_TJSONValue(CL);
  RIRegister_TJSONString(CL);
  RIRegister_TJSONInteger(CL);
  RIRegister_TJSONFloat(CL);
  RIRegister_TJSONBoolean(CL);
  RIRegister_TJSONNull(CL);
  RIRegister_TJSONArray(CL);
  RIRegister_TJSONObject(CL);
  RIRegister_TJSONParser(CL);
  with CL.Add(EJSONParser) do
end;

 
 
{ TPSImport_cJSON }
(*----------------------------------------------------------------------------*)
procedure TPSImport_cJSON.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_cJSON(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_cJSON.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_cJSON(ri);
  RIRegister_cJSON_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
