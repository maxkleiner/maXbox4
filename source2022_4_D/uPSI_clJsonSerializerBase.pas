unit uPSI_clJsonSerializerBase;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_clJsonSerializerBase = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TclJsonSerializerBase(CL: TPSPascalCompiler);
procedure SIRegister_TclJsonTypeNameMapAttribute(CL: TPSPascalCompiler);
procedure SIRegister_TclJsonPropertyAttribute(CL: TPSPascalCompiler);
procedure SIRegister_EclJsonSerializerError(CL: TPSPascalCompiler);
procedure SIRegister_clJsonSerializerBase(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TclJsonSerializerBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TclJsonTypeNameMapAttribute(CL: TPSRuntimeClassImporter);
procedure RIRegister_TclJsonPropertyAttribute(CL: TPSRuntimeClassImporter);
procedure RIRegister_EclJsonSerializerError(CL: TPSRuntimeClassImporter);
procedure RIRegister_clJsonSerializerBase(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Contnrs
  //,Rtti
  ,TypInfo
  ,clJsonSerializerBase
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_clJsonSerializerBase]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TclJsonSerializerBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TclJsonSerializerBase') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TclJsonSerializerBase') do
  begin
    RegisterMethod('Function JsonToObject( AType : TClass; const AJson : string) : TObject;');
    RegisterMethod('Function JsonToObject1( AObject : TObject; const AJson : string) : TObject;');
    RegisterMethod('Function ObjectToJson( AObject : TObject) : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TclJsonTypeNameMapAttribute(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomAttribute', 'TclJsonTypeNameMapAttribute') do
  with CL.AddClassN(CL.FindClass('TCustomAttribute'),'TclJsonTypeNameMapAttribute') do
  begin
    RegisterProperty('FPropertyName', 'string', iptrw);
    RegisterProperty('FTypeName', 'string', iptrw);
    RegisterProperty('FTypeClassName', 'string', iptrw);
    RegisterMethod('Constructor Create( const APropertyName, ATypeName, ATypeClassName : string)');
    RegisterProperty('PropertyName', 'string', iptr);
    RegisterProperty('TypeName', 'string', iptr);
    RegisterProperty('TypeClassName', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TclJsonPropertyAttribute(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomAttribute', 'TclJsonPropertyAttribute') do
  with CL.AddClassN(CL.FindClass('TCustomAttribute'),'TclJsonPropertyAttribute') do
  begin
    RegisterProperty('FName', 'string', iptrw);
    RegisterMethod('Constructor Create( const AName : string)');
    RegisterProperty('Name', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EclJsonSerializerError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'EclJsonSerializerError') do
  with CL.AddClassN(CL.FindClass('Exception'),'EclJsonSerializerError') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_clJsonSerializerBase(CL: TPSPascalCompiler);
begin
  SIRegister_EclJsonSerializerError(CL);
  SIRegister_TclJsonPropertyAttribute(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TclJsonStringAttribute');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TclJsonRequiredAttribute');
  SIRegister_TclJsonTypeNameMapAttribute(CL);
  SIRegister_TclJsonSerializerBase(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function TclJsonSerializerBaseJsonToObject1_P(Self: TclJsonSerializerBase;  AObject : TObject; const AJson : string) : TObject;
Begin Result := Self.JsonToObject(AObject, AJson); END;

(*----------------------------------------------------------------------------*)
Function TclJsonSerializerBaseJsonToObject_P(Self: TclJsonSerializerBase;  AType : TClass; const AJson : string) : TObject;
Begin Result := Self.JsonToObject(AType, AJson); END;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeTypeClassName_R(Self: TclJsonTypeNameMapAttribute; var T: string);
begin T := Self.TypeClassName; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeTypeName_R(Self: TclJsonTypeNameMapAttribute; var T: string);
begin T := Self.TypeName; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributePropertyName_R(Self: TclJsonTypeNameMapAttribute; var T: string);
begin T := Self.PropertyName; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeFTypeClassName_W(Self: TclJsonTypeNameMapAttribute; const T: string);
Begin Self.FTypeClassName := T; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeFTypeClassName_R(Self: TclJsonTypeNameMapAttribute; var T: string);
Begin T := Self.FTypeClassName; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeFTypeName_W(Self: TclJsonTypeNameMapAttribute; const T: string);
Begin Self.FTypeName := T; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeFTypeName_R(Self: TclJsonTypeNameMapAttribute; var T: string);
Begin T := Self.FTypeName; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeFPropertyName_W(Self: TclJsonTypeNameMapAttribute; const T: string);
Begin Self.FPropertyName := T; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonTypeNameMapAttributeFPropertyName_R(Self: TclJsonTypeNameMapAttribute; var T: string);
Begin T := Self.FPropertyName; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonPropertyAttributeName_R(Self: TclJsonPropertyAttribute; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonPropertyAttributeFName_W(Self: TclJsonPropertyAttribute; const T: string);
Begin Self.FName := T; end;

(*----------------------------------------------------------------------------*)
procedure TclJsonPropertyAttributeFName_R(Self: TclJsonPropertyAttribute; var T: string);
Begin T := Self.FName; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TclJsonSerializerBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TclJsonSerializerBase) do
  begin
    RegisterVirtualAbstractMethod(@TclJsonSerializerBase, @!.JsonToObject, 'JsonToObject');
    RegisterVirtualAbstractMethod(@TclJsonSerializerBase, @!.JsonToObject1, 'JsonToObject1');
    RegisterVirtualAbstractMethod(@TclJsonSerializerBase, @!.ObjectToJson, 'ObjectToJson');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TclJsonTypeNameMapAttribute(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TclJsonTypeNameMapAttribute) do
  begin
    RegisterPropertyHelper(@TclJsonTypeNameMapAttributeFPropertyName_R,@TclJsonTypeNameMapAttributeFPropertyName_W,'FPropertyName');
    RegisterPropertyHelper(@TclJsonTypeNameMapAttributeFTypeName_R,@TclJsonTypeNameMapAttributeFTypeName_W,'FTypeName');
    RegisterPropertyHelper(@TclJsonTypeNameMapAttributeFTypeClassName_R,@TclJsonTypeNameMapAttributeFTypeClassName_W,'FTypeClassName');
    RegisterConstructor(@TclJsonTypeNameMapAttribute.Create, 'Create');
    RegisterPropertyHelper(@TclJsonTypeNameMapAttributePropertyName_R,nil,'PropertyName');
    RegisterPropertyHelper(@TclJsonTypeNameMapAttributeTypeName_R,nil,'TypeName');
    RegisterPropertyHelper(@TclJsonTypeNameMapAttributeTypeClassName_R,nil,'TypeClassName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TclJsonPropertyAttribute(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TclJsonPropertyAttribute) do
  begin
    RegisterPropertyHelper(@TclJsonPropertyAttributeFName_R,@TclJsonPropertyAttributeFName_W,'FName');
    RegisterConstructor(@TclJsonPropertyAttribute.Create, 'Create');
    RegisterPropertyHelper(@TclJsonPropertyAttributeName_R,nil,'Name');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EclJsonSerializerError(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EclJsonSerializerError) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_clJsonSerializerBase(CL: TPSRuntimeClassImporter);
begin
  RIRegister_EclJsonSerializerError(CL);
  RIRegister_TclJsonPropertyAttribute(CL);
  with CL.Add(TclJsonStringAttribute) do
  with CL.Add(TclJsonRequiredAttribute) do
  RIRegister_TclJsonTypeNameMapAttribute(CL);
  RIRegister_TclJsonSerializerBase(CL);
end;

 
 
{ TPSImport_clJsonSerializerBase }
(*----------------------------------------------------------------------------*)
procedure TPSImport_clJsonSerializerBase.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_clJsonSerializerBase(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_clJsonSerializerBase.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_clJsonSerializerBase(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
