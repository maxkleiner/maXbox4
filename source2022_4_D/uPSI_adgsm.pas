unit uPSI_adgsm;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_adgsm = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TApdGSMPhone(CL: TPSPascalCompiler);
procedure SIRegister_TApdCustomGSMPhone(CL: TPSPascalCompiler);
procedure SIRegister_TApdMessageStore(CL: TPSPascalCompiler);
procedure SIRegister_TApdSMSMessage(CL: TPSPascalCompiler);
procedure SIRegister_adgsm(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_adgsm_Routines(S: TPSExec);
procedure RIRegister_TApdGSMPhone(CL: TPSRuntimeClassImporter);
procedure RIRegister_TApdCustomGSMPhone(CL: TPSRuntimeClassImporter);
procedure RIRegister_TApdMessageStore(CL: TPSRuntimeClassImporter);
procedure RIRegister_TApdSMSMessage(CL: TPSRuntimeClassImporter);
procedure RIRegister_adgsm(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Controls
  ,Forms
  ,OoMisc
  ,AdPort
  ,AdPacket
  ,AdExcept
  ,adgsm
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_adgsm]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TApdGSMPhone(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TApdCustomGSMPhone', 'TApdGSMPhone') do
  with CL.AddClassN(CL.FindClass('TApdCustomGSMPhone'),'TApdGSMPhone') do begin
  RegisterMethod('Constructor Create( AOwner : TComponent)');
     RegisterMethod('Procedure Free');
  Registerpublishedproperties;
  {  property ComPort;
    property QuickConnect;
    property GSMMode;
    property SMSAddress;
    property SMSMessage;
    property SMSCenter;
    property NotifyOnNewMessage;   }

    //{published events}
   { property OnNewMessage;
    property OnNextMessage;
    property OnMessageList;
    property OnGSMComplete;}

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TApdCustomGSMPhone(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TApdBaseComponent', 'TApdCustomGSMPhone') do
  with CL.AddClassN(CL.FindClass('TApdBaseComponent'),'TApdCustomGSMPhone') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
     RegisterMethod('Procedure Free');
      RegisterMethod('Procedure SendSMSMessage');
    RegisterMethod('Procedure SendMessage');
    RegisterMethod('Procedure SendAllMessages');
    RegisterMethod('Procedure ListAllMessages');
    RegisterMethod('Procedure Connect');
    RegisterMethod('Procedure SendFromMemory( TheIndex : Integer)');
    RegisterMethod('Procedure WriteToMemory( const Dest, Msg : string)');
    RegisterMethod('Procedure ProcessResponse');
    RegisterMethod('Procedure Synchronize');
    RegisterMethod('Procedure QueryModem');
    RegisterMethod('Function StatusToStr( StatusString : TApdSMSStatus) : string');
    RegisterProperty('ComPort', 'TApdCustomComPort', iptrw);
    RegisterProperty('SMSAddress', 'string', iptrw);
    RegisterProperty('SMSMessage', 'string', iptrw);
    RegisterProperty('SMSCenter', 'string', iptrw);
    RegisterProperty('NotifyOnNewMessage', 'Boolean', iptrw);
    RegisterProperty('MessageStore', 'TApdMessageStore', iptrw);
    RegisterProperty('QuickConnect', 'Boolean', iptrw);
    RegisterProperty('GSMMode', 'TGSMMode', iptrw);
    RegisterProperty('SMSErrorCode', 'Integer', iptr);
    RegisterProperty('GSMState', 'TGSMStates', iptr);
    RegisterProperty('OnNewMessage', 'TApdGSMNewMessageEvent', iptrw);
    RegisterProperty('OnNextMessage', 'TApdGSMNextMessageEvent', iptrw);
    RegisterProperty('OnMessageList', 'TApdGSMMessageListEvent', iptrw);
    RegisterProperty('OnGSMComplete', 'TApdGSMCompleteEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TApdMessageStore(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStringList', 'TApdMessageStore') do
  with CL.AddClassN(CL.FindClass('TStringList'),'TApdMessageStore') do begin
    RegisterMethod('Constructor Create( GSMPhone : TApdCustomGSMPhone)');
    RegisterMethod('Function AddMessage( const Dest, Msg : string) : Integer');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( PhoneIndex : Integer)');
    RegisterProperty('Messages', 'TApdSMSMessage Integer', iptrw);
    SetDefaultPropery('Messages');
    RegisterProperty('Capacity', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TApdSMSMessage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TApdSMSMessage') do
  with CL.AddClassN(CL.FindClass('TObject'),'TApdSMSMessage') do
  begin
    RegisterProperty('Address', 'string', iptrw);
    RegisterProperty('Message', 'string', iptrw);
    RegisterProperty('MessageAsPDU', 'string', iptrw);
    RegisterProperty('MessageIndex', 'Integer', iptrw);
    RegisterProperty('Name', 'string', iptrw);
    RegisterProperty('Status', 'TApdSMSStatus', iptrw);
    RegisterProperty('TimeStamp', 'TDateTime', iptrw);
    RegisterProperty('TimeStampStr', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_adgsm(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('ApdGSMResponse','LongInt').SetInt( WM_USER + 100);
  CL.AddTypeS('TGSMStates', '( gsNone, gsConfig, gsSendAll, gsListAll, gsSend, '
   +'gsSendFStore, gsWrite, gsDelete, gsNofify )');
  CL.AddTypeS('TApdSMSStatus', '( srUnread, srRead, ssUnsent, ssSent, ssAll, ssUnknown )');
  CL.AddTypeS('TGSMMode', '( gmDetect, gmPDU, gmText )');
  CL.AddTypeS('TGSMModeSet', 'set of TGSMMode');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TApdCustomGSMPhone');
  CL.AddTypeS('TApdGSMNextMessageEvent', 'Procedure ( Pager : TApdCustomGSMPhon'
   +'e; ErrorCode : Integer; var NextMessageReady : Boolean)');
  CL.AddTypeS('TApdGSMNewMessageEvent', 'Procedure ( Pager : TApdCustomGSMPhone'
   +'; FIndex : Integer; Message : string)');
  CL.AddTypeS('TApdGSMMessageListEvent', 'Procedure ( Sender : TObject)');
  CL.AddTypeS('TApdGSMCompleteEvent', 'Procedure ( Pager : TApdCustomGSMPhone; '
   +'State : TGSMStates; ErrorCode : Integer)');
  SIRegister_TApdSMSMessage(CL);
  SIRegister_TApdMessageStore(CL);
  SIRegister_TApdCustomGSMPhone(CL);
  SIRegister_TApdGSMPhone(CL);
 CL.AddDelphiFunction('Function StringToPDU( v : string) : string');
 CL.AddDelphiFunction('Function PDUToString( v : string) : string');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnGSMComplete_W(Self: TApdCustomGSMPhone; const T: TApdGSMCompleteEvent);
begin Self.OnGSMComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnGSMComplete_R(Self: TApdCustomGSMPhone; var T: TApdGSMCompleteEvent);
begin T := Self.OnGSMComplete; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnMessageList_W(Self: TApdCustomGSMPhone; const T: TApdGSMMessageListEvent);
begin Self.OnMessageList := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnMessageList_R(Self: TApdCustomGSMPhone; var T: TApdGSMMessageListEvent);
begin T := Self.OnMessageList; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnNextMessage_W(Self: TApdCustomGSMPhone; const T: TApdGSMNextMessageEvent);
begin Self.OnNextMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnNextMessage_R(Self: TApdCustomGSMPhone; var T: TApdGSMNextMessageEvent);
begin T := Self.OnNextMessage; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnNewMessage_W(Self: TApdCustomGSMPhone; const T: TApdGSMNewMessageEvent);
begin Self.OnNewMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneOnNewMessage_R(Self: TApdCustomGSMPhone; var T: TApdGSMNewMessageEvent);
begin T := Self.OnNewMessage; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneGSMState_R(Self: TApdCustomGSMPhone; var T: TGSMStates);
begin T := Self.GSMState; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneSMSErrorCode_R(Self: TApdCustomGSMPhone; var T: Integer);
begin T := Self.SMSErrorCode; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneGSMMode_W(Self: TApdCustomGSMPhone; const T: TGSMMode);
begin Self.GSMMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneGSMMode_R(Self: TApdCustomGSMPhone; var T: TGSMMode);
begin T := Self.GSMMode; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneQuickConnect_W(Self: TApdCustomGSMPhone; const T: Boolean);
begin Self.QuickConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneQuickConnect_R(Self: TApdCustomGSMPhone; var T: Boolean);
begin T := Self.QuickConnect; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneMessageStore_W(Self: TApdCustomGSMPhone; const T: TApdMessageStore);
begin Self.MessageStore := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneMessageStore_R(Self: TApdCustomGSMPhone; var T: TApdMessageStore);
begin T := Self.MessageStore; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneNotifyOnNewMessage_W(Self: TApdCustomGSMPhone; const T: Boolean);
begin Self.NotifyOnNewMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneNotifyOnNewMessage_R(Self: TApdCustomGSMPhone; var T: Boolean);
begin T := Self.NotifyOnNewMessage; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneSMSCenter_W(Self: TApdCustomGSMPhone; const T: string);
begin Self.SMSCenter := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneSMSCenter_R(Self: TApdCustomGSMPhone; var T: string);
begin T := Self.SMSCenter; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneSMSMessage_W(Self: TApdCustomGSMPhone; const T: string);
begin Self.SMSMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneSMSMessage_R(Self: TApdCustomGSMPhone; var T: string);
begin T := Self.SMSMessage; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneSMSAddress_W(Self: TApdCustomGSMPhone; const T: string);
begin Self.SMSAddress := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneSMSAddress_R(Self: TApdCustomGSMPhone; var T: string);
begin T := Self.SMSAddress; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneComPort_W(Self: TApdCustomGSMPhone; const T: TApdCustomComPort);
begin Self.ComPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdCustomGSMPhoneComPort_R(Self: TApdCustomGSMPhone; var T: TApdCustomComPort);
begin T := Self.ComPort; end;

(*----------------------------------------------------------------------------*)
procedure TApdMessageStoreCapacity_W(Self: TApdMessageStore; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdMessageStoreCapacity_R(Self: TApdMessageStore; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
procedure TApdMessageStoreMessages_W(Self: TApdMessageStore; const T: TApdSMSMessage; const t1: Integer);
begin Self.Messages[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdMessageStoreMessages_R(Self: TApdMessageStore; var T: TApdSMSMessage; const t1: Integer);
begin T := Self.Messages[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageTimeStampStr_W(Self: TApdSMSMessage; const T: string);
begin Self.TimeStampStr := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageTimeStampStr_R(Self: TApdSMSMessage; var T: string);
begin T := Self.TimeStampStr; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageTimeStamp_W(Self: TApdSMSMessage; const T: TDateTime);
begin Self.TimeStamp := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageTimeStamp_R(Self: TApdSMSMessage; var T: TDateTime);
begin T := Self.TimeStamp; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageStatus_W(Self: TApdSMSMessage; const T: TApdSMSStatus);
begin Self.Status := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageStatus_R(Self: TApdSMSMessage; var T: TApdSMSStatus);
begin T := Self.Status; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageName_W(Self: TApdSMSMessage; const T: string);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageName_R(Self: TApdSMSMessage; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageMessageIndex_W(Self: TApdSMSMessage; const T: Integer);
begin Self.MessageIndex := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageMessageIndex_R(Self: TApdSMSMessage; var T: Integer);
begin T := Self.MessageIndex; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageMessageAsPDU_W(Self: TApdSMSMessage; const T: string);
begin Self.MessageAsPDU := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageMessageAsPDU_R(Self: TApdSMSMessage; var T: string);
begin T := Self.MessageAsPDU; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageMessage_W(Self: TApdSMSMessage; const T: string);
begin Self.Message := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageMessage_R(Self: TApdSMSMessage; var T: string);
begin T := Self.Message; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageAddress_W(Self: TApdSMSMessage; const T: string);
begin Self.Address := T; end;

(*----------------------------------------------------------------------------*)
procedure TApdSMSMessageAddress_R(Self: TApdSMSMessage; var T: string);
begin T := Self.Address; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_adgsm_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@StringToPDU, 'StringToPDU', cdRegister);
 S.RegisterDelphiFunction(@PDUToString, 'PDUToString', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TApdGSMPhone(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TApdGSMPhone) do begin
    RegisterConstructor(@TApdGSMPhone.Create, 'Create');

    RegisterMethod(@TApdGSMPhone.Destroy, 'Free');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TApdCustomGSMPhone(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TApdCustomGSMPhone) do
  begin
    RegisterConstructor(@TApdCustomGSMPhone.Create, 'Create');
    RegisterMethod(@TApdCustomGSMPhone.Destroy, 'Free');

    //RegisterMethod(@TApdCustomGSMPhone.SendSMSMessage, 'SendSMSMessage');
    RegisterMethod(@TApdCustomGSMPhone.SendMessage, 'SendMessage');
    RegisterMethod(@TApdCustomGSMPhone.SendAllMessages, 'SendAllMessages');
    RegisterMethod(@TApdCustomGSMPhone.ListAllMessages, 'ListAllMessages');
    RegisterMethod(@TApdCustomGSMPhone.Connect, 'Connect');
    RegisterMethod(@TApdCustomGSMPhone.SendFromMemory, 'SendFromMemory');
    RegisterMethod(@TApdCustomGSMPhone.WriteToMemory, 'WriteToMemory');
    RegisterMethod(@TApdCustomGSMPhone.ProcessResponse, 'ProcessResponse');
    RegisterMethod(@TApdCustomGSMPhone.Synchronize, 'Synchronize');
    RegisterMethod(@TApdCustomGSMPhone.QueryModem, 'QueryModem');
    RegisterMethod(@TApdCustomGSMPhone.StatusToStr, 'StatusToStr');
    RegisterPropertyHelper(@TApdCustomGSMPhoneComPort_R,@TApdCustomGSMPhoneComPort_W,'ComPort');
    RegisterPropertyHelper(@TApdCustomGSMPhoneSMSAddress_R,@TApdCustomGSMPhoneSMSAddress_W,'SMSAddress');
    RegisterPropertyHelper(@TApdCustomGSMPhoneSMSMessage_R,@TApdCustomGSMPhoneSMSMessage_W,'SMSMessage');
    RegisterPropertyHelper(@TApdCustomGSMPhoneSMSCenter_R,@TApdCustomGSMPhoneSMSCenter_W,'SMSCenter');
    RegisterPropertyHelper(@TApdCustomGSMPhoneNotifyOnNewMessage_R,@TApdCustomGSMPhoneNotifyOnNewMessage_W,'NotifyOnNewMessage');
    RegisterPropertyHelper(@TApdCustomGSMPhoneMessageStore_R,@TApdCustomGSMPhoneMessageStore_W,'MessageStore');
    RegisterPropertyHelper(@TApdCustomGSMPhoneQuickConnect_R,@TApdCustomGSMPhoneQuickConnect_W,'QuickConnect');
    RegisterPropertyHelper(@TApdCustomGSMPhoneGSMMode_R,@TApdCustomGSMPhoneGSMMode_W,'GSMMode');
    RegisterPropertyHelper(@TApdCustomGSMPhoneSMSErrorCode_R,nil,'SMSErrorCode');
    RegisterPropertyHelper(@TApdCustomGSMPhoneGSMState_R,nil,'GSMState');
    RegisterPropertyHelper(@TApdCustomGSMPhoneOnNewMessage_R,@TApdCustomGSMPhoneOnNewMessage_W,'OnNewMessage');
    RegisterPropertyHelper(@TApdCustomGSMPhoneOnNextMessage_R,@TApdCustomGSMPhoneOnNextMessage_W,'OnNextMessage');
    RegisterPropertyHelper(@TApdCustomGSMPhoneOnMessageList_R,@TApdCustomGSMPhoneOnMessageList_W,'OnMessageList');
    RegisterPropertyHelper(@TApdCustomGSMPhoneOnGSMComplete_R,@TApdCustomGSMPhoneOnGSMComplete_W,'OnGSMComplete');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TApdMessageStore(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TApdMessageStore) do
  begin
    RegisterConstructor(@TApdMessageStore.Create, 'Create');
    RegisterMethod(@TApdMessageStore.AddMessage, 'AddMessage');
    RegisterMethod(@TApdMessageStore.Clear, 'Clear');
    RegisterMethod(@TApdMessageStore.Delete, 'Delete');
    RegisterPropertyHelper(@TApdMessageStoreMessages_R,@TApdMessageStoreMessages_W,'Messages');
    RegisterPropertyHelper(@TApdMessageStoreCapacity_R,@TApdMessageStoreCapacity_W,'Capacity');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TApdSMSMessage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TApdSMSMessage) do
  begin
    RegisterPropertyHelper(@TApdSMSMessageAddress_R,@TApdSMSMessageAddress_W,'Address');
    RegisterPropertyHelper(@TApdSMSMessageMessage_R,@TApdSMSMessageMessage_W,'Message');
    RegisterPropertyHelper(@TApdSMSMessageMessageAsPDU_R,@TApdSMSMessageMessageAsPDU_W,'MessageAsPDU');
    RegisterPropertyHelper(@TApdSMSMessageMessageIndex_R,@TApdSMSMessageMessageIndex_W,'MessageIndex');
    RegisterPropertyHelper(@TApdSMSMessageName_R,@TApdSMSMessageName_W,'Name');
    RegisterPropertyHelper(@TApdSMSMessageStatus_R,@TApdSMSMessageStatus_W,'Status');
    RegisterPropertyHelper(@TApdSMSMessageTimeStamp_R,@TApdSMSMessageTimeStamp_W,'TimeStamp');
    RegisterPropertyHelper(@TApdSMSMessageTimeStampStr_R,@TApdSMSMessageTimeStampStr_W,'TimeStampStr');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_adgsm(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TApdCustomGSMPhone) do
  RIRegister_TApdSMSMessage(CL);
  RIRegister_TApdMessageStore(CL);
  RIRegister_TApdCustomGSMPhone(CL);
  RIRegister_TApdGSMPhone(CL);
end;

 
 
{ TPSImport_adgsm }
(*----------------------------------------------------------------------------*)
procedure TPSImport_adgsm.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_adgsm(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_adgsm.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_adgsm(ri);
  RIRegister_adgsm_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
