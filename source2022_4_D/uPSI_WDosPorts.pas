unit uPSI_WDosPorts;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_WDosPorts = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMemL(CL: TPSPascalCompiler);
procedure SIRegister_TMemW(CL: TPSPascalCompiler);
procedure SIRegister_TPortL(CL: TPSPascalCompiler);
procedure SIRegister_TPortW(CL: TPSPascalCompiler);
procedure SIRegister_TWPort(CL: TPSPascalCompiler);
procedure SIRegister_WDosPorts(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TMemL(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMemW(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPortL(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPortW(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWPort(CL: TPSRuntimeClassImporter);
procedure RIRegister_WDosPorts(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   WDosPorts
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_WDosPorts]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMemL(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TMemL') do
  with CL.AddClassN(CL.FindClass('TObject'),'TMemL') do
  begin
    RegisterProperty('MemL', 'LongInt LongInt', iptrw);
    SetDefaultPropery('MemL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMemW(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TMemW') do
  with CL.AddClassN(CL.FindClass('TObject'),'TMemW') do
  begin
    RegisterProperty('MemW', 'Word LongInt', iptrw);
    SetDefaultPropery('MemW');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPortL(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TPortL') do
  with CL.AddClassN(CL.FindClass('TObject'),'TPortL') do
  begin
    RegisterProperty('PortL', 'LongInt Word', iptrw);
    SetDefaultPropery('PortL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPortW(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TPortW') do
  with CL.AddClassN(CL.FindClass('TObject'),'TPortW') do
  begin
    RegisterProperty('PortW', 'Word Word', iptrw);
    SetDefaultPropery('PortW');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWPort(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWPort') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWPort') do
  begin
    RegisterProperty('Port', 'Byte Word', iptrw);
    SetDefaultPropery('Port');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_WDosPorts(CL: TPSPascalCompiler);
begin
  SIRegister_TWPort(CL);
  SIRegister_TPortW(CL);
  SIRegister_TPortL(CL);
  SIRegister_TMemW(CL);
  SIRegister_TMemL(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TMemLMemL_W(Self: TMemL; const T: LongInt; const t1: LongInt);
begin Self.MemL[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TMemLMemL_R(Self: TMemL; var T: LongInt; const t1: LongInt);
begin T := Self.MemL[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMemWMemW_W(Self: TMemW; const T: Word; const t1: LongInt);
begin Self.MemW[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TMemWMemW_R(Self: TMemW; var T: Word; const t1: LongInt);
begin T := Self.MemW[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TPortLPortL_W(Self: TPortL; const T: LongInt; const t1: Word);
begin Self.PortL[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TPortLPortL_R(Self: TPortL; var T: LongInt; const t1: Word);
begin T := Self.PortL[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TPortWPortW_W(Self: TPortW; const T: Word; const t1: Word);
begin Self.PortW[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TPortWPortW_R(Self: TPortW; var T: Word; const t1: Word);
begin T := Self.PortW[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWPortPort_W(Self: TWPort; const T: Byte; const t1: Word);
begin Self.Port[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWPortPort_R(Self: TWPort; var T: Byte; const t1: Word);
begin T := Self.Port[t1]; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMemL(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMemL) do
  begin
    RegisterPropertyHelper(@TMemLMemL_R,@TMemLMemL_W,'MemL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMemW(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMemW) do
  begin
    RegisterPropertyHelper(@TMemWMemW_R,@TMemWMemW_W,'MemW');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPortL(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPortL) do
  begin
    RegisterPropertyHelper(@TPortLPortL_R,@TPortLPortL_W,'PortL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPortW(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPortW) do
  begin
    RegisterPropertyHelper(@TPortWPortW_R,@TPortWPortW_W,'PortW');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWPort(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWPort) do
  begin
    RegisterPropertyHelper(@TWPortPort_R,@TWPortPort_W,'Port');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_WDosPorts(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TWPort(CL);
  RIRegister_TPortW(CL);
  RIRegister_TPortL(CL);
  RIRegister_TMemW(CL);
  RIRegister_TMemL(CL);
end;

 
 
{ TPSImport_WDosPorts }
(*----------------------------------------------------------------------------*)
procedure TPSImport_WDosPorts.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_WDosPorts(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_WDosPorts.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_WDosPorts(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
