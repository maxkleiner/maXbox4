unit uPSI_JvSegmentedLEDDisplay;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvSegmentedLEDDisplay = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJv16SegmentedLEDDigit(CL: TPSPascalCompiler);
procedure SIRegister_TJv14SegmentedLEDDigit(CL: TPSPascalCompiler);
procedure SIRegister_TJv7SegmentedLEDDigit(CL: TPSPascalCompiler);
procedure SIRegister_TJvSegmentedLEDCharacterMapper(CL: TPSPascalCompiler);
procedure SIRegister_TJvBaseSegmentedLEDDigit(CL: TPSPascalCompiler);
procedure SIRegister_TJvCustomSegmentedLEDDigit(CL: TPSPascalCompiler);
procedure SIRegister_TJvSegmentedLEDDigits(CL: TPSPascalCompiler);
procedure SIRegister_TJvSegmentedLEDDisplay(CL: TPSPascalCompiler);
procedure SIRegister_TJvCustomSegmentedLEDDisplay(CL: TPSPascalCompiler);
procedure SIRegister_JvSegmentedLEDDisplay(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_JvSegmentedLEDDisplay_Routines(S: TPSExec);
procedure RIRegister_TJv16SegmentedLEDDigit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJv14SegmentedLEDDigit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJv7SegmentedLEDDigit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvSegmentedLEDCharacterMapper(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvBaseSegmentedLEDDigit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvCustomSegmentedLEDDigit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvSegmentedLEDDigits(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvSegmentedLEDDisplay(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvCustomSegmentedLEDDisplay(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvSegmentedLEDDisplay(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   JclUnitVersioning
  ,Windows
  ,Graphics
  ,JclBase
  ,JvComponent
  ,JvTypes
  ,JvSegmentedLEDDisplay
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvSegmentedLEDDisplay]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJv16SegmentedLEDDigit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJv14SegmentedLEDDigit', 'TJv16SegmentedLEDDigit') do
  with CL.AddClassN(CL.FindClass('TJv14SegmentedLEDDigit'),'TJv16SegmentedLEDDigit') do
  begin
    RegisterMethod('Function SegmentCount : Integer');
    RegisterMethod('Function GetSegmentName( Index : Integer) : string');
    RegisterMethod('Function GetSegmentIndex( Name : string) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJv14SegmentedLEDDigit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseSegmentedLEDDigit', 'TJv14SegmentedLEDDigit') do
  with CL.AddClassN(CL.FindClass('TJvBaseSegmentedLEDDigit'),'TJv14SegmentedLEDDigit') do
  begin
    RegisterMethod('Function SegmentCount : Integer');
    RegisterMethod('Function GetSegmentName( Index : Integer) : string');
    RegisterMethod('Function GetSegmentIndex( Name : string) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJv7SegmentedLEDDigit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseSegmentedLEDDigit', 'TJv7SegmentedLEDDigit') do
  with CL.AddClassN(CL.FindClass('TJvBaseSegmentedLEDDigit'),'TJv7SegmentedLEDDigit') do
  begin
    RegisterMethod('Function SegmentCount : Integer');
    RegisterMethod('Function GetSegmentName( Index : Integer) : string');
    RegisterMethod('Function GetSegmentIndex( Name : string) : Integer');
    RegisterProperty('UseColon', 'T7SegColonUsage', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvSegmentedLEDCharacterMapper(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TJvSegmentedLEDCharacterMapper') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TJvSegmentedLEDCharacterMapper') do
  begin
    RegisterMethod('Constructor Create( ADisplay : TJvCustomSegmentedLEDDisplay)');
    RegisterMethod('Procedure MapText( var Text : PChar; ADigit : TJvCustomSegmentedLEDDigit)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure LoadDefaultMapping');
    RegisterMethod('Procedure LoadFromFile( const FileName : string)');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream)');
    RegisterMethod('Procedure SaveToFile( const FileName : string)');
    RegisterMethod('Procedure SaveToStream( Stream : TStream)');
    RegisterProperty('CharMapping', 'Int64 Char', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvBaseSegmentedLEDDigit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvCustomSegmentedLEDDigit', 'TJvBaseSegmentedLEDDigit') do
  with CL.AddClassN(CL.FindClass('TJvCustomSegmentedLEDDigit'),'TJvBaseSegmentedLEDDigit') do
  begin
    RegisterMethod('Function SegmentCount : Integer');
    RegisterMethod('Function GetSegmentName( Index : Integer) : string');
    RegisterMethod('Function GetSegmentIndex( Name : string) : Integer');
    RegisterMethod('Function GetSegmentString : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvCustomSegmentedLEDDigit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TJvCustomSegmentedLEDDigit') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TJvCustomSegmentedLEDDigit') do
  begin
    RegisterMethod('Constructor Create( Collection : TCollection)');
    RegisterMethod('Function GetHitInfo2( X, Y : Integer) : TSLDHitInfo;');
    RegisterMethod('Function GetHitInfo3( X, Y : Integer; out SegmentIndex : Integer) : TSLDHitInfo;');
    RegisterMethod('Function PtInSegment( SegmentIndex : Integer; Pt : TPoint) : Boolean');
    RegisterMethod('Function SegmentCount : Integer');
    RegisterMethod('Function GetSegmentName( Index : Integer) : string');
    RegisterMethod('Function GetSegmentIndex( Name : string) : Integer');
    RegisterMethod('Function GetSegmentStates : Int64');
    RegisterMethod('Function GetSegmentString : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvSegmentedLEDDigits(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOwnedCollection', 'TJvSegmentedLEDDigits') do
  with CL.AddClassN(CL.FindClass('TOwnedCollection'),'TJvSegmentedLEDDigits') do
  begin
    RegisterMethod('Constructor Create( AOwner : TPersistent)');
    RegisterProperty('Items', 'TJvCustomSegmentedLEDDigit Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvSegmentedLEDDisplay(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvCustomSegmentedLEDDisplay', 'TJvSegmentedLEDDisplay') do
  with CL.AddClassN(CL.FindClass('TJvCustomSegmentedLEDDisplay'),'TJvSegmentedLEDDisplay') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvCustomSegmentedLEDDisplay(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvGraphicControl', 'TJvCustomSegmentedLEDDisplay') do
  with CL.AddClassN(CL.FindClass('TJvGraphicControl'),'TJvCustomSegmentedLEDDisplay') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure RemapText');
    RegisterMethod('Function GetHitInfo( X, Y : Integer) : TSLDHitInfo;');
    RegisterMethod('Function GetHitInfo1( X, Y : Integer; out Digit : TJvCustomSegmentedLEDDigit; out SegmentIndex : Integer) : TSLDHitInfo;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvSegmentedLEDDisplay(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('clDefaultBackground','LongWord').SetUInt( TColor ( $20100001 ));
 CL.AddConstantN('clDefaultLitColor','LongWord').SetUInt( TColor ( $20100002 ));
 CL.AddConstantN('NullHandle','LongInt').SetInt( 0);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvCustomSegmentedLEDDisplay');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvSegmentedLEDDigits');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvCustomSegmentedLEDDigit');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvSegmentedLEDCharacterMapper');
  //CL.AddTypeS('TJvSegmentedLEDDigitClass', 'class of TJvCustomSegmentedLEDDigit');
  CL.AddTypeS('TJvSegmentedLEDDigitClassName', 'string');
  CL.AddTypeS('TUnlitColor', 'TColor');
  CL.AddTypeS('TSlantAngle', 'Integer');
  CL.AddTypeS('TSLDHitInfo', '( shiNowhere, shiDigit, shiDigitSegment, shiClien'
   +'tArea )');
  CL.AddTypeS('TCharSet', 'set of Char');
  CL.AddTypeS('TSegmentRenderType', '( srtNone, srtPolygon, srtRect, srtCircle '
   +')');
  CL.AddTypeS('TPointArray', 'array of TPoint');
  CL.AddTypeS('TSegmentRenderInfo', 'record RenderType : TSegmentRenderType; Po'
   +'ints : TPointArray; end');
  CL.AddTypeS('TSegmentRenderInfoArray', 'array of TSegmentRenderInfo');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJVCLSegmentedLEDException');
  SIRegister_TJvCustomSegmentedLEDDisplay(CL);
  SIRegister_TJvSegmentedLEDDisplay(CL);
  SIRegister_TJvSegmentedLEDDigits(CL);
  SIRegister_TJvCustomSegmentedLEDDigit(CL);
  SIRegister_TJvBaseSegmentedLEDDigit(CL);
  SIRegister_TJvSegmentedLEDCharacterMapper(CL);
  CL.AddTypeS('T7SegColonUsage', '( scuNone, scuLowOnly, scuFull, scuColonOnly '
   +')');
  SIRegister_TJv7SegmentedLEDDigit(CL);
  SIRegister_TJv14SegmentedLEDDigit(CL);
  SIRegister_TJv16SegmentedLEDDigit(CL);
 CL.AddDelphiFunction('Function IdentToUnlitColor( const Ident : string; var Int : Longint) : Boolean');
 CL.AddDelphiFunction('Function UnlitColorToIdent( Int : Longint; var Ident : string) : Boolean');
 CL.AddDelphiFunction('Function StringToUnlitColor( const S : string) : TUnlitColor');
 CL.AddDelphiFunction('Function UnlitColorToString( const Color : TUnlitColor) : string');
 CL.AddDelphiFunction('Function DigitClassList : TThreadList');
 CL.AddDelphiFunction('Procedure RegisterSegmentedLEDDigitClass( DigitClass : TJvSegmentedLEDDigitClass)');
 CL.AddDelphiFunction('Procedure RegisterSegmentedLEDDigitClasses( DigitClasses : array of TJvSegmentedLEDDigitClass)');
 CL.AddDelphiFunction('Procedure UnregisterSegmentedLEDDigitClass( DigitClass : TJvSegmentedLEDDigitClass)');
 CL.AddDelphiFunction('Procedure UnregisterSegmentedLEDDigitClasses( DigitClasses : array of TJvSegmentedLEDDigitClass)');
 CL.AddDelphiFunction('Procedure UnregisterModuleSegmentedLEDDigitClasses( Module : HMODULE)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJv7SegmentedLEDDigitUseColon_W(Self: TJv7SegmentedLEDDigit; const T: T7SegColonUsage);
begin Self.UseColon := T; end;

(*----------------------------------------------------------------------------*)
procedure TJv7SegmentedLEDDigitUseColon_R(Self: TJv7SegmentedLEDDigit; var T: T7SegColonUsage);
begin T := Self.UseColon; end;

(*----------------------------------------------------------------------------*)
procedure TJvSegmentedLEDCharacterMapperCharMapping_W(Self: TJvSegmentedLEDCharacterMapper; const T: Int64; const t1: Char);
begin Self.CharMapping[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvSegmentedLEDCharacterMapperCharMapping_R(Self: TJvSegmentedLEDCharacterMapper; var T: Int64; const t1: Char);
begin T := Self.CharMapping[t1]; end;

(*----------------------------------------------------------------------------*)
Function TJvCustomSegmentedLEDDigitGetHitInfo3_P(Self: TJvCustomSegmentedLEDDigit;  X, Y : Integer; out SegmentIndex : Integer) : TSLDHitInfo;
Begin Result := Self.GetHitInfo(X, Y, SegmentIndex); END;

(*----------------------------------------------------------------------------*)
Function TJvCustomSegmentedLEDDigitGetHitInfo2_P(Self: TJvCustomSegmentedLEDDigit;  X, Y : Integer) : TSLDHitInfo;
Begin Result := Self.GetHitInfo(X, Y); END;

(*----------------------------------------------------------------------------*)
procedure TJvSegmentedLEDDigitsItems_W(Self: TJvSegmentedLEDDigits; const T: TJvCustomSegmentedLEDDigit; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvSegmentedLEDDigitsItems_R(Self: TJvSegmentedLEDDigits; var T: TJvCustomSegmentedLEDDigit; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
Function TJvCustomSegmentedLEDDisplayGetHitInfo1_P(Self: TJvCustomSegmentedLEDDisplay;  X, Y : Integer; out Digit : TJvCustomSegmentedLEDDigit; out SegmentIndex : Integer) : TSLDHitInfo;
Begin Result := Self.GetHitInfo(X, Y, Digit, SegmentIndex); END;

(*----------------------------------------------------------------------------*)
Function TJvCustomSegmentedLEDDisplayGetHitInfo_P(Self: TJvCustomSegmentedLEDDisplay;  X, Y : Integer) : TSLDHitInfo;
Begin Result := Self.GetHitInfo(X, Y); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvSegmentedLEDDisplay_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@IdentToUnlitColor, 'IdentToUnlitColor', cdRegister);
 S.RegisterDelphiFunction(@UnlitColorToIdent, 'UnlitColorToIdent', cdRegister);
 S.RegisterDelphiFunction(@StringToUnlitColor, 'StringToUnlitColor', cdRegister);
 S.RegisterDelphiFunction(@UnlitColorToString, 'UnlitColorToString', cdRegister);
 S.RegisterDelphiFunction(@DigitClassList, 'DigitClassList', cdRegister);
 S.RegisterDelphiFunction(@RegisterSegmentedLEDDigitClass, 'RegisterSegmentedLEDDigitClass', cdRegister);
 S.RegisterDelphiFunction(@RegisterSegmentedLEDDigitClasses, 'RegisterSegmentedLEDDigitClasses', cdRegister);
 S.RegisterDelphiFunction(@UnregisterSegmentedLEDDigitClass, 'UnregisterSegmentedLEDDigitClass', cdRegister);
 S.RegisterDelphiFunction(@UnregisterSegmentedLEDDigitClasses, 'UnregisterSegmentedLEDDigitClasses', cdRegister);
 S.RegisterDelphiFunction(@UnregisterModuleSegmentedLEDDigitClasses, 'UnregisterModuleSegmentedLEDDigitClasses', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJv16SegmentedLEDDigit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJv16SegmentedLEDDigit) do
  begin
    RegisterMethod(@TJv16SegmentedLEDDigit.SegmentCount, 'SegmentCount');
    RegisterMethod(@TJv16SegmentedLEDDigit.GetSegmentName, 'GetSegmentName');
    RegisterMethod(@TJv16SegmentedLEDDigit.GetSegmentIndex, 'GetSegmentIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJv14SegmentedLEDDigit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJv14SegmentedLEDDigit) do
  begin
    RegisterMethod(@TJv14SegmentedLEDDigit.SegmentCount, 'SegmentCount');
    RegisterMethod(@TJv14SegmentedLEDDigit.GetSegmentName, 'GetSegmentName');
    RegisterMethod(@TJv14SegmentedLEDDigit.GetSegmentIndex, 'GetSegmentIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJv7SegmentedLEDDigit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJv7SegmentedLEDDigit) do
  begin
    RegisterMethod(@TJv7SegmentedLEDDigit.SegmentCount, 'SegmentCount');
    RegisterMethod(@TJv7SegmentedLEDDigit.GetSegmentName, 'GetSegmentName');
    RegisterMethod(@TJv7SegmentedLEDDigit.GetSegmentIndex, 'GetSegmentIndex');
    RegisterPropertyHelper(@TJv7SegmentedLEDDigitUseColon_R,@TJv7SegmentedLEDDigitUseColon_W,'UseColon');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvSegmentedLEDCharacterMapper(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvSegmentedLEDCharacterMapper) do
  begin
    RegisterConstructor(@TJvSegmentedLEDCharacterMapper.Create, 'Create');
    RegisterMethod(@TJvSegmentedLEDCharacterMapper.MapText, 'MapText');
    RegisterMethod(@TJvSegmentedLEDCharacterMapper.Clear, 'Clear');
    RegisterVirtualMethod(@TJvSegmentedLEDCharacterMapper.LoadDefaultMapping, 'LoadDefaultMapping');
    RegisterMethod(@TJvSegmentedLEDCharacterMapper.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TJvSegmentedLEDCharacterMapper.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TJvSegmentedLEDCharacterMapper.SaveToFile, 'SaveToFile');
    RegisterVirtualMethod(@TJvSegmentedLEDCharacterMapper.SaveToStream, 'SaveToStream');
    RegisterPropertyHelper(@TJvSegmentedLEDCharacterMapperCharMapping_R,@TJvSegmentedLEDCharacterMapperCharMapping_W,'CharMapping');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvBaseSegmentedLEDDigit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvBaseSegmentedLEDDigit) do
  begin
    RegisterMethod(@TJvBaseSegmentedLEDDigit.SegmentCount, 'SegmentCount');
    RegisterMethod(@TJvBaseSegmentedLEDDigit.GetSegmentName, 'GetSegmentName');
    RegisterMethod(@TJvBaseSegmentedLEDDigit.GetSegmentIndex, 'GetSegmentIndex');
    RegisterMethod(@TJvBaseSegmentedLEDDigit.GetSegmentString, 'GetSegmentString');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvCustomSegmentedLEDDigit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvCustomSegmentedLEDDigit) do
  begin
    RegisterConstructor(@TJvCustomSegmentedLEDDigit.Create, 'Create');
    RegisterMethod(@TJvCustomSegmentedLEDDigitGetHitInfo2_P, 'GetHitInfo2');
    RegisterMethod(@TJvCustomSegmentedLEDDigitGetHitInfo3_P, 'GetHitInfo3');
    RegisterVirtualMethod(@TJvCustomSegmentedLEDDigit.PtInSegment, 'PtInSegment');
    RegisterVirtualMethod(@TJvCustomSegmentedLEDDigit.SegmentCount, 'SegmentCount');
    RegisterVirtualMethod(@TJvCustomSegmentedLEDDigit.GetSegmentName, 'GetSegmentName');
    RegisterVirtualMethod(@TJvCustomSegmentedLEDDigit.GetSegmentIndex, 'GetSegmentIndex');
    RegisterMethod(@TJvCustomSegmentedLEDDigit.GetSegmentStates, 'GetSegmentStates');
    RegisterVirtualAbstractMethod(@TJvCustomSegmentedLEDDigit, @!.GetSegmentString, 'GetSegmentString');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvSegmentedLEDDigits(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvSegmentedLEDDigits) do
  begin
    RegisterConstructor(@TJvSegmentedLEDDigits.Create, 'Create');
    RegisterPropertyHelper(@TJvSegmentedLEDDigitsItems_R,@TJvSegmentedLEDDigitsItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvSegmentedLEDDisplay(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvSegmentedLEDDisplay) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvCustomSegmentedLEDDisplay(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvCustomSegmentedLEDDisplay) do
  begin
    RegisterConstructor(@TJvCustomSegmentedLEDDisplay.Create, 'Create');
    RegisterMethod(@TJvCustomSegmentedLEDDisplay.RemapText, 'RemapText');
    RegisterMethod(@TJvCustomSegmentedLEDDisplayGetHitInfo_P, 'GetHitInfo');
    RegisterMethod(@TJvCustomSegmentedLEDDisplayGetHitInfo1_P, 'GetHitInfo1');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvSegmentedLEDDisplay(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvCustomSegmentedLEDDisplay) do
  with CL.Add(TJvSegmentedLEDDigits) do
  with CL.Add(TJvCustomSegmentedLEDDigit) do
  with CL.Add(TJvSegmentedLEDCharacterMapper) do
  with CL.Add(EJVCLSegmentedLEDException) do
  RIRegister_TJvCustomSegmentedLEDDisplay(CL);
  RIRegister_TJvSegmentedLEDDisplay(CL);
  RIRegister_TJvSegmentedLEDDigits(CL);
  RIRegister_TJvCustomSegmentedLEDDigit(CL);
  RIRegister_TJvBaseSegmentedLEDDigit(CL);
  RIRegister_TJvSegmentedLEDCharacterMapper(CL);
  RIRegister_TJv7SegmentedLEDDigit(CL);
  RIRegister_TJv14SegmentedLEDDigit(CL);
  RIRegister_TJv16SegmentedLEDDigit(CL);
end;

 
 
{ TPSImport_JvSegmentedLEDDisplay }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvSegmentedLEDDisplay.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvSegmentedLEDDisplay(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvSegmentedLEDDisplay.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvSegmentedLEDDisplay(ri);
  RIRegister_JvSegmentedLEDDisplay_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
