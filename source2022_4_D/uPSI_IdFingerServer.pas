unit uPSI_IdFingerServer;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdFingerServer = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdFingerServer(CL: TPSPascalCompiler);
procedure SIRegister_IdFingerServer(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdFingerServer(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdFingerServer(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdAssignedNumbers
  ,IdTCPServer
  ,IdFingerServer
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdFingerServer]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdFingerServer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPServer', 'TIdFingerServer') do
  with CL.AddClassN(CL.FindClass('TIdTCPServer'),'TIdFingerServer') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('OnCommandFinger', 'TIdFingerGetEvent', iptrw);
    RegisterProperty('OnCommandVerboseFinger', 'TIdFingerGetEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdFingerServer(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TIdFingerGetEvent', 'Procedure ( AThread : TIdPeerThread; const '
  +'AUserName : String)');
  SIRegister_TIdFingerServer(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdFingerServerOnCommandVerboseFinger_W(Self: TIdFingerServer; const T: TIdFingerGetEvent);
begin Self.OnCommandVerboseFinger := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdFingerServerOnCommandVerboseFinger_R(Self: TIdFingerServer; var T: TIdFingerGetEvent);
begin T := Self.OnCommandVerboseFinger; end;

(*----------------------------------------------------------------------------*)
procedure TIdFingerServerOnCommandFinger_W(Self: TIdFingerServer; const T: TIdFingerGetEvent);
begin Self.OnCommandFinger := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdFingerServerOnCommandFinger_R(Self: TIdFingerServer; var T: TIdFingerGetEvent);
begin T := Self.OnCommandFinger; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdFingerServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdFingerServer) do
  begin
    RegisterConstructor(@TIdFingerServer.Create, 'Create');
    RegisterPropertyHelper(@TIdFingerServerOnCommandFinger_R,@TIdFingerServerOnCommandFinger_W,'OnCommandFinger');
    RegisterPropertyHelper(@TIdFingerServerOnCommandVerboseFinger_R,@TIdFingerServerOnCommandVerboseFinger_W,'OnCommandVerboseFinger');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdFingerServer(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdFingerServer(CL);
end;

 
 
{ TPSImport_IdFingerServer }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdFingerServer.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdFingerServer(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdFingerServer.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdFingerServer(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
