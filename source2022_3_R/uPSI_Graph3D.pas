unit uPSI_Graph3D;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
  *D3DDD3  more attribs
}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Graph3D = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TGraph3D(CL: TPSPascalCompiler);
procedure SIRegister_TGraphLine(CL: TPSPascalCompiler);
procedure SIRegister_Graph3D(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Graph3D_Routines(S: TPSExec);
procedure RIRegister_TGraph3D(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGraphLine(CL: TPSRuntimeClassImporter);
procedure RIRegister_Graph3D(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Controls
  ,Graphics
  ,Messages
  ,Graph3D
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Graph3D]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TGraph3D(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomControl', 'TGraph3D') do
  with CL.AddClassN(CL.FindClass('TCustomControl'),'TGraph3D') do begin
    RegisterMethod('Function GetIsodoseValue( i : ShortInt) : Single');
    RegisterMethod('Function GetIsodoseColor( i : ShortInt) : TColor');
    RegisterMethod('Procedure SetIsodose( Ind : Byte; Percent : Single; col : TColor)');
    RegisterProperty('NoOfLines', 'LongInt', iptr);
    RegisterMethod('Procedure AddLine( L : TGraphLine)');
    RegisterProperty('WaterlevelType', 'TWaterLevel', iptr);
    RegisterProperty('Waterlevel', 'Single', iptr);
    RegisterMethod('Procedure SetWaterLevel( Kind : TWaterLevel; Percent : Single)');
    RegisterProperty('isScrolling', 'Boolean', iptr);
    RegisterMethod('Procedure ScrollLines');
    RegisterMethod('Procedure StopScrolling');
    RegisterMethod('Procedure ClearPicture');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure ResetColors');
    RegisterMethod('Procedure CenterPlot');
    RegisterMethod('Function AsBitmap( inWhite : Boolean) : TBitmap');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
     RegisterMethod('Procedure Free');
    RegisterProperty('ShowFrame', 'Boolean', iptrw);
    RegisterProperty('DataColor', 'TColor', iptrw);
    RegisterProperty('UseColors', 'Boolean', iptrw);
    RegisterProperty('AxesColor', 'TColor', iptrw);
    RegisterProperty('DrawAxes', 'Boolean', iptrw);
    RegisterProperty('LabelX', 'String', iptrw);
    RegisterProperty('LabelY', 'String', iptrw);
    RegisterProperty('LabelZ', 'String', iptrw);
    RegisterProperty('Caption', 'String', iptrw);
    RegisterProperty('Theta', 'LongInt', iptrw);
    RegisterProperty('Phi', 'LongInt', iptrw);
    RegisterProperty('Offset', 'TPoint', iptrw);
    RegisterProperty('ZoomX', 'Single', iptrw);
    RegisterProperty('ZoomY', 'Single', iptrw);
    RegisterProperty('MouseControl', 'TMouseControl', iptrw);
    RegisterProperty('ViewPercentage', 'ShortInt', iptrw);
    RegisterProperty('FirstLine', 'LongInt', iptrw);
    RegisterProperty('LastLine', 'LongInt', iptrw);
    RegisterProperty('ScrollSpeed', 'Byte', iptrw);
    RegisterProperty('IncrementalScroll', 'Boolean', iptrw);
    RegisterProperty('ScrollIndex', 'LongInt', iptr);
    RegisterProperty('OnStopScrolling', 'TNotifyEvent', iptrw);
    RegisterProperty('OnScroll', 'TNotifyEvent', iptrw);
    RegisterProperty('DrawHiddenLines', 'Boolean', iptrw);
    RegisterProperty('AfterDraw', 'TNotifyEvent', iptrw);
    RegisterProperty('Font', 'TFont', iptrw);
    RegisterPublishedProperties;
    //RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('Align', 'TAlign', iptrw);

    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
       RegisterProperty('Visible', 'Boolean', iptrw);
     RegisterProperty('Enabled', 'Boolean', iptrw);
     RegisterProperty('CTL3D', 'Boolean', iptrw);
     RegisterProperty('TabStop', 'Boolean', iptrw);
     RegisterProperty('CANVAS', 'TCanvas', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONENTER', 'TNotifyEvent', iptrw);
    RegisterProperty('ONEXIT', 'TNotifyEvent', iptrw);


    {  property Align;
      //This determines the backgroundcolour of the graph
      property Color;
      //This determines the font used for Caption, LabelX, LabelY, LabelZ
      property Font : TFont read GetFont write SetFont;
      //Purely inherited property
      property ParentColor;
      //Purely inherited property
      property ParentFont;
      //Purely inherited property
      property ParentShowHint;
      //Purely inherited property
      //This is a good place to link in a menu to steer the MouseControl property.
      property PopupMenu;
      //Purely inherited property.
      property ShowHint;
      //Purely inherited property
      property Visible;
      //Purely inherited event
      property OnClick;
      //Purely inherited event
      property OnDblClick;
      //Purely inherited event
        }
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGraphLine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TGraphLine') do
  with CL.AddClassN(CL.FindClass('TObject'),'TGraphLine') do begin
    RegisterProperty('StartPoint', 'T3DPoint', iptrw);
    RegisterProperty('StopPoint', 'T3DPoint', iptrw);
    RegisterProperty('NoOfValues', 'LongInt', iptr);
    RegisterProperty('Vals', 'Single Integer', iptrw);
    SetDefaultPropery('Vals');
    RegisterProperty('X', 'Single Integer', iptr);
    RegisterProperty('Y', 'Single Integer', iptr);
    RegisterMethod('Constructor Create( Nvals : LongInt)');
     RegisterMethod('Procedure Free');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Graph3D(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('MaxNoOfIsodoses','LongInt').SetInt( 10);
  CL.AddTypeS('T3DPoint', 'record X : single; Y : single; Z : Single; end');
  //CL.AddTypeS('P3DPoint', '^T3DPoint // will not work');
  //CL.AddTypeS('PSingleArray', '^TSingleArray // will not work');
  CL.AddTypeS('TMouseControl', '( mcNone, mcMove, mcRotate, mcZoom )');
  CL.AddTypeS('TIsodoseData', 'record Percentage : Single; Color : TColor; Active : Boolean; end');
  //CL.AddTypeS('PIsodoseData', '^TIsodoseData // will not work');
  CL.AddTypeS('TWaterlevel', '( wlNone, wlAbove, wlBelow )');
  SIRegister_TGraphLine(CL);
  SIRegister_TGraph3D(CL);
 CL.AddDelphiFunction('Function Point3D3( x, y, z : Single) : T3DPoint');
 //CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TGraph3DFont_W(Self: TGraph3D; const T: TFont);
begin Self.Font := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DFont_R(Self: TGraph3D; var T: TFont);
begin T := Self.Font; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DAfterDraw_W(Self: TGraph3D; const T: TNotifyEvent);
begin Self.AfterDraw := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DAfterDraw_R(Self: TGraph3D; var T: TNotifyEvent);
begin T := Self.AfterDraw; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DDrawHiddenLines_W(Self: TGraph3D; const T: Boolean);
begin Self.DrawHiddenLines := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DDrawHiddenLines_R(Self: TGraph3D; var T: Boolean);
begin T := Self.DrawHiddenLines; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DOnScroll_W(Self: TGraph3D; const T: TNotifyEvent);
begin Self.OnScroll := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DOnScroll_R(Self: TGraph3D; var T: TNotifyEvent);
begin T := Self.OnScroll; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DOnStopScrolling_W(Self: TGraph3D; const T: TNotifyEvent);
begin Self.OnStopScrolling := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DOnStopScrolling_R(Self: TGraph3D; var T: TNotifyEvent);
begin T := Self.OnStopScrolling; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DScrollIndex_R(Self: TGraph3D; var T: LongInt);
begin T := Self.ScrollIndex; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DIncrementalScroll_W(Self: TGraph3D; const T: Boolean);
begin Self.IncrementalScroll := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DIncrementalScroll_R(Self: TGraph3D; var T: Boolean);
begin T := Self.IncrementalScroll; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DScrollSpeed_W(Self: TGraph3D; const T: Byte);
begin Self.ScrollSpeed := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DScrollSpeed_R(Self: TGraph3D; var T: Byte);
begin T := Self.ScrollSpeed; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLastLine_W(Self: TGraph3D; const T: LongInt);
begin Self.LastLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLastLine_R(Self: TGraph3D; var T: LongInt);
begin T := Self.LastLine; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DFirstLine_W(Self: TGraph3D; const T: LongInt);
begin Self.FirstLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DFirstLine_R(Self: TGraph3D; var T: LongInt);
begin T := Self.FirstLine; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DViewPercentage_W(Self: TGraph3D; const T: ShortInt);
begin Self.ViewPercentage := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DViewPercentage_R(Self: TGraph3D; var T: ShortInt);
begin T := Self.ViewPercentage; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DMouseControl_W(Self: TGraph3D; const T: TMouseControl);
begin Self.MouseControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DMouseControl_R(Self: TGraph3D; var T: TMouseControl);
begin T := Self.MouseControl; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DZoomY_W(Self: TGraph3D; const T: Single);
begin Self.ZoomY := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DZoomY_R(Self: TGraph3D; var T: Single);
begin T := Self.ZoomY; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DZoomX_W(Self: TGraph3D; const T: Single);
begin Self.ZoomX := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DZoomX_R(Self: TGraph3D; var T: Single);
begin T := Self.ZoomX; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DOffset_W(Self: TGraph3D; const T: TPoint);
begin Self.Offset := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DOffset_R(Self: TGraph3D; var T: TPoint);
begin T := Self.Offset; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DPhi_W(Self: TGraph3D; const T: LongInt);
begin Self.Phi := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DPhi_R(Self: TGraph3D; var T: LongInt);
begin T := Self.Phi; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DTheta_W(Self: TGraph3D; const T: LongInt);
begin Self.Theta := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DTheta_R(Self: TGraph3D; var T: LongInt);
begin T := Self.Theta; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DCaption_W(Self: TGraph3D; const T: String);
begin Self.Caption := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DCaption_R(Self: TGraph3D; var T: String);
begin T := Self.Caption; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLabelZ_W(Self: TGraph3D; const T: String);
begin Self.LabelZ := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLabelZ_R(Self: TGraph3D; var T: String);
begin T := Self.LabelZ; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLabelY_W(Self: TGraph3D; const T: String);
begin Self.LabelY := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLabelY_R(Self: TGraph3D; var T: String);
begin T := Self.LabelY; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLabelX_W(Self: TGraph3D; const T: String);
begin Self.LabelX := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DLabelX_R(Self: TGraph3D; var T: String);
begin T := Self.LabelX; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DDrawAxes_W(Self: TGraph3D; const T: Boolean);
begin Self.DrawAxes := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DDrawAxes_R(Self: TGraph3D; var T: Boolean);
begin T := Self.DrawAxes; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DAxesColor_W(Self: TGraph3D; const T: TColor);
begin Self.AxesColor := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DAxesColor_R(Self: TGraph3D; var T: TColor);
begin T := Self.AxesColor; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DUseColors_W(Self: TGraph3D; const T: Boolean);
begin Self.UseColors := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DUseColors_R(Self: TGraph3D; var T: Boolean);
begin T := Self.UseColors; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DDataColor_W(Self: TGraph3D; const T: TColor);
begin Self.DataColor := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DDataColor_R(Self: TGraph3D; var T: TColor);
begin T := Self.DataColor; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DShowFrame_W(Self: TGraph3D; const T: Boolean);
begin Self.ShowFrame := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DShowFrame_R(Self: TGraph3D; var T: Boolean);
begin T := Self.ShowFrame; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DisScrolling_R(Self: TGraph3D; var T: Boolean);
begin T := Self.isScrolling; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DWaterlevel_R(Self: TGraph3D; var T: Single);
begin T := Self.Waterlevel; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DWaterlevelType_R(Self: TGraph3D; var T: TWaterLevel);
begin T := Self.WaterlevelType; end;

(*----------------------------------------------------------------------------*)
procedure TGraph3DNoOfLines_R(Self: TGraph3D; var T: LongInt);
begin T := Self.NoOfLines; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineY_R(Self: TGraphLine; var T: Single; const t1: Integer);
begin T := Self.Y[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineX_R(Self: TGraphLine; var T: Single; const t1: Integer);
begin T := Self.X[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineVals_W(Self: TGraphLine; const T: Single; const t1: Integer);
begin Self.Vals[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineVals_R(Self: TGraphLine; var T: Single; const t1: Integer);
begin T := Self.Vals[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineNoOfValues_R(Self: TGraphLine; var T: LongInt);
begin T := Self.NoOfValues; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineStopPoint_W(Self: TGraphLine; const T: T3DPoint);
Begin Self.StopPoint := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineStopPoint_R(Self: TGraphLine; var T: T3DPoint);
Begin T := Self.StopPoint; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineStartPoint_W(Self: TGraphLine; const T: T3DPoint);
Begin Self.StartPoint := T; end;

(*----------------------------------------------------------------------------*)
procedure TGraphLineStartPoint_R(Self: TGraphLine; var T: T3DPoint);
Begin T := Self.StartPoint; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Graph3D_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Point3D, 'Point3D3', cdRegister);
 //S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGraph3D(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGraph3D) do begin
    RegisterMethod(@TGraph3D.GetIsodoseValue, 'GetIsodoseValue');
    RegisterMethod(@TGraph3D.GetIsodoseColor, 'GetIsodoseColor');
    RegisterMethod(@TGraph3D.SetIsodose, 'SetIsodose');
    RegisterPropertyHelper(@TGraph3DNoOfLines_R,nil,'NoOfLines');
    RegisterMethod(@TGraph3D.AddLine, 'AddLine');
    RegisterPropertyHelper(@TGraph3DWaterlevelType_R,nil,'WaterlevelType');
    RegisterPropertyHelper(@TGraph3DWaterlevel_R,nil,'Waterlevel');
    RegisterMethod(@TGraph3D.SetWaterLevel, 'SetWaterLevel');
    RegisterPropertyHelper(@TGraph3DisScrolling_R,nil,'isScrolling');
    RegisterMethod(@TGraph3D.ScrollLines, 'ScrollLines');
    RegisterMethod(@TGraph3D.StopScrolling, 'StopScrolling');
    RegisterMethod(@TGraph3D.ClearPicture, 'ClearPicture');
    RegisterMethod(@TGraph3D.Clear, 'Clear');
    RegisterMethod(@TGraph3D.ResetColors, 'ResetColors');
    RegisterMethod(@TGraph3D.CenterPlot, 'CenterPlot');
    RegisterMethod(@TGraph3D.AsBitmap, 'AsBitmap');
    RegisterConstructor(@TGraph3D.Create, 'Create');
     RegisterMethod(@TGraph3D.Destroy, 'Free');
    RegisterPropertyHelper(@TGraph3DShowFrame_R,@TGraph3DShowFrame_W,'ShowFrame');
    RegisterPropertyHelper(@TGraph3DDataColor_R,@TGraph3DDataColor_W,'DataColor');
    RegisterPropertyHelper(@TGraph3DUseColors_R,@TGraph3DUseColors_W,'UseColors');
    RegisterPropertyHelper(@TGraph3DAxesColor_R,@TGraph3DAxesColor_W,'AxesColor');
    RegisterPropertyHelper(@TGraph3DDrawAxes_R,@TGraph3DDrawAxes_W,'DrawAxes');
    RegisterPropertyHelper(@TGraph3DLabelX_R,@TGraph3DLabelX_W,'LabelX');
    RegisterPropertyHelper(@TGraph3DLabelY_R,@TGraph3DLabelY_W,'LabelY');
    RegisterPropertyHelper(@TGraph3DLabelZ_R,@TGraph3DLabelZ_W,'LabelZ');
    RegisterPropertyHelper(@TGraph3DCaption_R,@TGraph3DCaption_W,'Caption');
    RegisterPropertyHelper(@TGraph3DTheta_R,@TGraph3DTheta_W,'Theta');
    RegisterPropertyHelper(@TGraph3DPhi_R,@TGraph3DPhi_W,'Phi');
    RegisterPropertyHelper(@TGraph3DOffset_R,@TGraph3DOffset_W,'Offset');
    RegisterPropertyHelper(@TGraph3DZoomX_R,@TGraph3DZoomX_W,'ZoomX');
    RegisterPropertyHelper(@TGraph3DZoomY_R,@TGraph3DZoomY_W,'ZoomY');
    RegisterPropertyHelper(@TGraph3DMouseControl_R,@TGraph3DMouseControl_W,'MouseControl');
    RegisterPropertyHelper(@TGraph3DViewPercentage_R,@TGraph3DViewPercentage_W,'ViewPercentage');
    RegisterPropertyHelper(@TGraph3DFirstLine_R,@TGraph3DFirstLine_W,'FirstLine');
    RegisterPropertyHelper(@TGraph3DLastLine_R,@TGraph3DLastLine_W,'LastLine');
    RegisterPropertyHelper(@TGraph3DScrollSpeed_R,@TGraph3DScrollSpeed_W,'ScrollSpeed');
    RegisterPropertyHelper(@TGraph3DIncrementalScroll_R,@TGraph3DIncrementalScroll_W,'IncrementalScroll');
    RegisterPropertyHelper(@TGraph3DScrollIndex_R,nil,'ScrollIndex');
    RegisterPropertyHelper(@TGraph3DOnStopScrolling_R,@TGraph3DOnStopScrolling_W,'OnStopScrolling');
    RegisterPropertyHelper(@TGraph3DOnScroll_R,@TGraph3DOnScroll_W,'OnScroll');
    RegisterPropertyHelper(@TGraph3DDrawHiddenLines_R,@TGraph3DDrawHiddenLines_W,'DrawHiddenLines');
    RegisterPropertyHelper(@TGraph3DAfterDraw_R,@TGraph3DAfterDraw_W,'AfterDraw');
    RegisterPropertyHelper(@TGraph3DFont_R,@TGraph3DFont_W,'Font');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGraphLine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGraphLine) do begin
    RegisterPropertyHelper(@TGraphLineStartPoint_R,@TGraphLineStartPoint_W,'StartPoint');
    RegisterPropertyHelper(@TGraphLineStopPoint_R,@TGraphLineStopPoint_W,'StopPoint');
    RegisterPropertyHelper(@TGraphLineNoOfValues_R,nil,'NoOfValues');
    RegisterPropertyHelper(@TGraphLineVals_R,@TGraphLineVals_W,'Vals');
    RegisterPropertyHelper(@TGraphLineX_R,nil,'X');
    RegisterPropertyHelper(@TGraphLineY_R,nil,'Y');
    RegisterConstructor(@TGraphLine.Create, 'Create');
     RegisterMethod(@TGraphLine.Destroy, 'Free');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Graph3D(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TGraphLine(CL);
  RIRegister_TGraph3D(CL);
end;

 
 
{ TPSImport_Graph3D }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Graph3D.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Graph3D(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Graph3D.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Graph3D(ri);
  RIRegister_Graph3D_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
