unit uPSI_cSocksClient;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_cSocksClient = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TSocksClient(CL: TPSPascalCompiler);
procedure SIRegister_cSocksClient(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cSocksClient_Routines(S: TPSExec);
procedure RIRegister_TSocksClient(CL: TPSRuntimeClassImporter);
procedure RIRegister_cSocksClient(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   cSocketLib
  ,cSocksUtils
  ,cSocksClient
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_cSocksClient]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSocksClient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TSocksClient') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TSocksClient') do
  begin
    RegisterMethod('Constructor Create');
    RegisterProperty('SocksVersion', 'TSocksClientSocksVersion', iptrw);
    RegisterProperty('AddrType', 'TSocksClientAddrType', iptrw);
    RegisterProperty('AddrIP4', 'TIP4Addr', iptrw);
    RegisterProperty('AddrIP6', 'TIP6Addr', iptrw);
    RegisterProperty('AddrDomain', 'AnsiString', iptrw);
    RegisterProperty('AddrPort', 'Word', iptrw);
    RegisterProperty('AuthMethod', 'TSocksClientAuthMethod', iptrw);
    RegisterProperty('UserID', 'AnsiString', iptrw);
    RegisterProperty('Password', 'AnsiString', iptrw);
    RegisterProperty('OnClientWrite', 'TSocksClientWriteEvent', iptrw);
    RegisterMethod('Procedure Connect');
    RegisterMethod('Procedure Bind');
    RegisterMethod('Function ClientData( const Buf : string; const BufSize : Integer) : Integer');
    RegisterMethod('Function IsComplete : Boolean');
    RegisterProperty('ReqState', 'TSocksClientRequestState', iptr);
    RegisterProperty('FailureReason', 'String', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_cSocksClient(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TSocksClientSocksVersion', '( scvSocks4, scvSocks4a, scvSocks5 )');
  CL.AddTypeS('TSocksClientAddrType', '( scaIP4, scaIP6, scaDomain )');
  CL.AddTypeS('TSocksClientAuthMethod', '( scamNone, scamSocks4UserId, scamSock'
   +'s5UserPass )');
  CL.AddTypeS('TSocksClientRequestType', '( scrtConnect, scrtBind )');
  CL.AddTypeS('TSocksClientRequestState', '( scrsInit, scrsSocks5Greeting, scrs'
   +'Socks5Authenticate, scrsSocks4Request, scrsSocks5Request, scrsSuccess, scr'
   +'sFailed )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSocksClient');
  CL.AddTypeS('TSocksClientWriteEvent', 'Procedure ( const Client : TSocksClien'
   +'t; const Buf : string; const BufSize : Integer)');
  SIRegister_TSocksClient(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESocksClient');
 CL.AddDelphiFunction('Procedure SelfTest');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSocksClientFailureReason_R(Self: TSocksClient; var T: String);
begin T := Self.FailureReason; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientReqState_R(Self: TSocksClient; var T: TSocksClientRequestState);
begin T := Self.ReqState; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientOnClientWrite_W(Self: TSocksClient; const T: TSocksClientWriteEvent);
begin Self.OnClientWrite := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientOnClientWrite_R(Self: TSocksClient; var T: TSocksClientWriteEvent);
begin T := Self.OnClientWrite; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientPassword_W(Self: TSocksClient; const T: AnsiString);
begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientPassword_R(Self: TSocksClient; var T: AnsiString);
begin T := Self.Password; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientUserID_W(Self: TSocksClient; const T: AnsiString);
begin Self.UserID := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientUserID_R(Self: TSocksClient; var T: AnsiString);
begin T := Self.UserID; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAuthMethod_W(Self: TSocksClient; const T: TSocksClientAuthMethod);
begin Self.AuthMethod := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAuthMethod_R(Self: TSocksClient; var T: TSocksClientAuthMethod);
begin T := Self.AuthMethod; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrPort_W(Self: TSocksClient; const T: Word);
begin Self.AddrPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrPort_R(Self: TSocksClient; var T: Word);
begin T := Self.AddrPort; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrDomain_W(Self: TSocksClient; const T: AnsiString);
begin Self.AddrDomain := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrDomain_R(Self: TSocksClient; var T: AnsiString);
begin T := Self.AddrDomain; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrIP6_W(Self: TSocksClient; const T: TIP6Addr);
begin Self.AddrIP6 := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrIP6_R(Self: TSocksClient; var T: TIP6Addr);
begin T := Self.AddrIP6; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrIP4_W(Self: TSocksClient; const T: TIP4Addr);
begin Self.AddrIP4 := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrIP4_R(Self: TSocksClient; var T: TIP4Addr);
begin T := Self.AddrIP4; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrType_W(Self: TSocksClient; const T: TSocksClientAddrType);
begin Self.AddrType := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientAddrType_R(Self: TSocksClient; var T: TSocksClientAddrType);
begin T := Self.AddrType; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientSocksVersion_W(Self: TSocksClient; const T: TSocksClientSocksVersion);
begin Self.SocksVersion := T; end;

(*----------------------------------------------------------------------------*)
procedure TSocksClientSocksVersion_R(Self: TSocksClient; var T: TSocksClientSocksVersion);
begin T := Self.SocksVersion; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cSocksClient_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@SelfTest, 'SelfTest', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSocksClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSocksClient) do
  begin
    RegisterConstructor(@TSocksClient.Create, 'Create');
    RegisterPropertyHelper(@TSocksClientSocksVersion_R,@TSocksClientSocksVersion_W,'SocksVersion');
    RegisterPropertyHelper(@TSocksClientAddrType_R,@TSocksClientAddrType_W,'AddrType');
    RegisterPropertyHelper(@TSocksClientAddrIP4_R,@TSocksClientAddrIP4_W,'AddrIP4');
    RegisterPropertyHelper(@TSocksClientAddrIP6_R,@TSocksClientAddrIP6_W,'AddrIP6');
    RegisterPropertyHelper(@TSocksClientAddrDomain_R,@TSocksClientAddrDomain_W,'AddrDomain');
    RegisterPropertyHelper(@TSocksClientAddrPort_R,@TSocksClientAddrPort_W,'AddrPort');
    RegisterPropertyHelper(@TSocksClientAuthMethod_R,@TSocksClientAuthMethod_W,'AuthMethod');
    RegisterPropertyHelper(@TSocksClientUserID_R,@TSocksClientUserID_W,'UserID');
    RegisterPropertyHelper(@TSocksClientPassword_R,@TSocksClientPassword_W,'Password');
    RegisterPropertyHelper(@TSocksClientOnClientWrite_R,@TSocksClientOnClientWrite_W,'OnClientWrite');
    RegisterMethod(@TSocksClient.Connect, 'Connect');
    RegisterMethod(@TSocksClient.Bind, 'Bind');
    RegisterMethod(@TSocksClient.ClientData, 'ClientData');
    RegisterMethod(@TSocksClient.IsComplete, 'IsComplete');
    RegisterPropertyHelper(@TSocksClientReqState_R,nil,'ReqState');
    RegisterPropertyHelper(@TSocksClientFailureReason_R,nil,'FailureReason');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cSocksClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSocksClient) do
  RIRegister_TSocksClient(CL);
  with CL.Add(ESocksClient) do
end;

 
 
{ TPSImport_cSocksClient }
(*----------------------------------------------------------------------------*)
procedure TPSImport_cSocksClient.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_cSocksClient(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_cSocksClient.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_cSocksClient(ri);
  RIRegister_cSocksClient_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
