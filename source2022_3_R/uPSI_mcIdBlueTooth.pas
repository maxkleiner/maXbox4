unit uPSI_mcIdBlueTooth;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_mcIdBlueTooth = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdBluetoothClient(CL: TPSPascalCompiler);
procedure SIRegister_TIdIOHandlerStackBT(CL: TPSPascalCompiler);
procedure SIRegister_mcIdBlueTooth(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdBluetoothClient(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdIOHandlerStackBT(CL: TPSRuntimeClassImporter);
procedure RIRegister_mcIdBlueTooth(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdStackConsts
  ,IdGlobal
  ,IdStackWindows
  ,IdTCPClient
  ,IdIOHandler
  ,IdIOHandlerStack
  ,IdSocketHandle
  ,mcIdBlueTooth
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_mcIdBlueTooth]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdBluetoothClient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPClientCustom', 'TIdBluetoothClient') do
  with CL.AddClassN(CL.FindClass('TIdTCPClientCustom'),'TIdBluetoothClient') do
  begin
    RegisterMethod('Procedure AfterConstruction');
    RegisterMethod('Procedure Connect');
    RegisterMethod('Function TryConnect : Boolean');
    RegisterMethod('Procedure WaitForMasterConnect');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdIOHandlerStackBT(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdIOHandlerStack', 'TIdIOHandlerStackBT') do
  with CL.AddClassN(CL.FindClass('TIdIOHandlerStack'),'TIdIOHandlerStackBT') do
  begin
    RegisterMethod('Function TryOpenAndClose : boolean');
    RegisterMethod('Function TryOpen : boolean');
    RegisterMethod('Procedure WaitForMaster');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_mcIdBlueTooth(CL: TPSPascalCompiler);
begin
  SIRegister_TIdIOHandlerStackBT(CL);
  SIRegister_TIdBluetoothClient(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdBluetoothClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdBluetoothClient) do
  begin
    RegisterMethod(@TIdBluetoothClient.AfterConstruction, 'AfterConstruction');
    RegisterMethod(@TIdBluetoothClient.Connect, 'Connect');
    RegisterMethod(@TIdBluetoothClient.TryConnect, 'TryConnect');
    RegisterMethod(@TIdBluetoothClient.WaitForMasterConnect, 'WaitForMasterConnect');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdIOHandlerStackBT(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdIOHandlerStackBT) do
  begin
    RegisterMethod(@TIdIOHandlerStackBT.TryOpenAndClose, 'TryOpenAndClose');
    RegisterMethod(@TIdIOHandlerStackBT.TryOpen, 'TryOpen');
    RegisterMethod(@TIdIOHandlerStackBT.WaitForMaster, 'WaitForMaster');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_mcIdBlueTooth(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdIOHandlerStackBT(CL);
  RIRegister_TIdBluetoothClient(CL);
end;

 
 
{ TPSImport_mcIdBlueTooth }
(*----------------------------------------------------------------------------*)
procedure TPSImport_mcIdBlueTooth.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_mcIdBlueTooth(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_mcIdBlueTooth.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_mcIdBlueTooth(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
