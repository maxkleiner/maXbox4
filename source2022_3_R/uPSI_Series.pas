unit uPSI_Series;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

in modte of the time series checks     marks.arrow

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Series = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TFastLineSeries(CL: TPSPascalCompiler);
procedure SIRegister_TPieSeries(CL: TPSPascalCompiler);
procedure SIRegister_TPieMarks(CL: TPSPascalCompiler);
procedure SIRegister_TPieOtherSlice(CL: TPSPascalCompiler);
procedure SIRegister_TSliceValueList(CL: TPSPascalCompiler);
procedure SIRegister_TCircledSeries(CL: TPSPascalCompiler);
procedure SIRegister_TCircledShadow(CL: TPSPascalCompiler);
procedure SIRegister_THorizBarSeries(CL: TPSPascalCompiler);
procedure SIRegister_TBarSeries(CL: TPSPascalCompiler);
procedure SIRegister_TCustomBarSeries(CL: TPSPascalCompiler);
procedure SIRegister_TBarSeriesGradient(CL: TPSPascalCompiler);
procedure SIRegister_THorizAreaSeries(CL: TPSPascalCompiler);
procedure SIRegister_TAreaSeries(CL: TPSPascalCompiler);
procedure SIRegister_TPointSeries(CL: TPSPascalCompiler);
procedure SIRegister_THorizLineSeries(CL: TPSPascalCompiler);
procedure SIRegister_TLineSeries(CL: TPSPascalCompiler);
procedure SIRegister_TCustomSeries(CL: TPSPascalCompiler);
procedure SIRegister_TCustomLineSeries(CL: TPSPascalCompiler);
procedure SIRegister_Series(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Series_Routines(S: TPSExec);
procedure RIRegister_TFastLineSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPieSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPieMarks(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPieOtherSlice(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSliceValueList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCircledSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCircledShadow(CL: TPSRuntimeClassImporter);
procedure RIRegister_THorizBarSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBarSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomBarSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBarSeriesGradient(CL: TPSRuntimeClassImporter);
procedure RIRegister_THorizAreaSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAreaSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPointSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_THorizLineSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLineSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomLineSeries(CL: TPSRuntimeClassImporter);
procedure RIRegister_Series(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  {,QGraphics
  ,QForms
  ,QTypes   }
  ,Graphics
  ,Forms
  ,Types
  ,TeEngine
  ,Chart
  ,TeCanvas
  ,TeeProcs
  ,Series
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Series]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TFastLineSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomLineSeries', 'TFastLineSeries') do
  with CL.AddClassN(CL.FindClass('TCustomLineSeries'),'TFastLineSeries') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function Clicked( x, y : Integer) : Integer');
    RegisterProperty('FastPen', 'Boolean', iptrw);
    RegisterProperty('AutoRepaint', 'Boolean', iptrw);
    RegisterProperty('ExpandAxis', 'Integer', iptrw);
    RegisterProperty('DrawAllPoints', 'Boolean', iptrw);
    RegisterProperty('IgnoreNulls', 'Boolean', iptrw);
    RegisterProperty('InvertedStairs', 'Boolean', iptrw);
    RegisterProperty('Stairs', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPieSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCircledSeries', 'TPieSeries') do
  with CL.AddClassN(CL.FindClass('TCircledSeries'),'TPieSeries') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
     RegisterMethod('Procedure Free;');
    RegisterMethod('Function AddPie( const AValue : Double; const ALabel : String; AColor : TColor) : Integer');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function BelongsToOtherSlice( ValueIndex : Integer) : Boolean');
    RegisterMethod('Function CalcClickedPie( x, y : Integer; Exploded : Boolean) : Integer');
    RegisterMethod('Function CalcXPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Procedure CheckOrder');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function Clicked( x, y : Integer) : Integer');
    RegisterMethod('Function CountLegendItems : Integer');
    RegisterMethod('Procedure Delete( ValueIndex : Integer)');
    RegisterMethod('Function LegendToValueIndex( LegendIndex : Integer) : Integer');
    RegisterMethod('Function MaxXValue : Double');
    RegisterMethod('Function MinXValue : Double');
    RegisterMethod('Function MaxYValue : Double');
    RegisterMethod('Function MinYValue : Double');
    RegisterMethod('Function NumSampleValues : Integer');
    RegisterMethod('Procedure SwapValueIndex( a, b : Integer)');
    RegisterProperty('Angles', 'TPieAngles', iptr);
    RegisterProperty('DonutPercent', 'Integer', iptrw);
    RegisterProperty('ExplodedSlice', 'TSliceValueList', iptr);
    RegisterProperty('SliceHeight', 'TSliceValueList', iptr);
    RegisterProperty('AngleSize', 'Integer', iptrw);
    RegisterProperty('AutoMarkPosition', 'Boolean', iptrw);
    RegisterProperty('Dark3D', 'Boolean', iptrw);
    RegisterProperty('DarkPen', 'Integer', iptrw);
    RegisterProperty('ExplodeBiggest', 'Integer', iptrw);
    RegisterProperty('Gradient', 'TChartGradient', iptrw);
    RegisterProperty('MultiPie', 'TMultiPie', iptrw);
    RegisterProperty('OtherSlice', 'TPieOtherSlice', iptrw);
    RegisterProperty('PieMarks', 'TPieMarks', iptrw);
    RegisterProperty('PiePen', 'TChartPen', iptrw);
    RegisterProperty('PieValues', 'TChartValueList', iptrw);
    RegisterProperty('UsePatterns', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPieMarks(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TPieMarks') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TPieMarks') do
  begin
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterProperty('VertCenter', 'Boolean', iptrw);
    RegisterProperty('LegSize', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPieOtherSlice(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TPieOtherSlice') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TPieOtherSlice') do begin
    RegisterMethod('Constructor Create( AOwner : TChartSeries)');
     RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterProperty('Color', 'TColor', iptrw);
    RegisterProperty('Legend', 'TChartLegend', iptrw);
    RegisterProperty('Style', 'TPieOtherStyle', iptrw);
    RegisterProperty('Text', 'String', iptrw);
    RegisterProperty('Value', 'Double', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSliceValueList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TSliceValueList') do
  with CL.AddClassN(CL.FindClass('TList'),'TSliceValueList') do
  begin
    RegisterMethod('Procedure Assign( Source : TList)');
    RegisterProperty('Value', 'Integer Integer', iptrw);
    SetDefaultPropery('Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCircledSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TChartSeries', 'TCircledSeries') do
  with CL.AddClassN(CL.FindClass('TChartSeries'),'TCircledSeries') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
     RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure AdjustScreenRatio( ACanvas : TCanvas3D; AXRadius, AYRadius : Integer; var R : TRect)');
    RegisterMethod('Procedure AngleToPos( const Angle, AXRadius, AYRadius : Double; out X, Y : Integer)');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function AssociatedToAxis( Axis : TChartAxis) : Boolean');
    RegisterMethod('Function PointToAngle( x, y : Integer) : Double');
    RegisterMethod('Function PointToRadius( x, y : Integer) : Double');
    RegisterMethod('Procedure Rotate( const Angle : Integer)');
    RegisterMethod('Function UseAxis:Boolean');

    RegisterProperty('CircleBackColor', 'TColor', iptrw);
    RegisterProperty('CircleHeight', 'Integer', iptr);
    RegisterProperty('CircleRect', 'TRect', iptr);
    RegisterProperty('CircleWidth', 'Integer', iptr);
    RegisterProperty('CircleXCenter', 'Integer', iptr);
    RegisterProperty('CircleYCenter', 'Integer', iptr);
    RegisterProperty('RotationAngle', 'Integer', iptrw);
    RegisterProperty('XRadius', 'Integer', iptr);
    RegisterProperty('YRadius', 'Integer', iptr);
    RegisterProperty('Circled', 'Boolean', iptrw);
    RegisterProperty('CustomXRadius', 'Integer', iptrw);
    RegisterProperty('CustomYRadius', 'Integer', iptrw);
    RegisterProperty('Shadow', 'TCircledShadow', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCircledShadow(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TTeeShadow', 'TCircledShadow') do
  with CL.AddClassN(CL.FindClass('TTeeShadow'),'TCircledShadow') do begin
  RegisterPublishedProperties;
  RegisterProperty('Color', 'TColor', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THorizBarSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomBarSeries', 'THorizBarSeries') do
  with CL.AddClassN(CL.FindClass('TCustomBarSeries'),'THorizBarSeries') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure CalcBarBounds( ValueIndex : Integer)');
    RegisterMethod('Function CalcXPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function CalcYPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Procedure DrawBar( BarIndex, StartPos, EndPos : Integer)');
    RegisterMethod('Function DrawSeriesForward( ValueIndex : Integer) : Boolean');
    RegisterMethod('Function GetOriginPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function MaxXValue : Double');
    RegisterMethod('Function MinXValue : Double');
    RegisterMethod('Function MaxYValue : Double');
    RegisterMethod('Function MinYValue : Double');
    RegisterProperty('BarHeight', 'Integer', iptr);
    RegisterProperty('CustomBarHeight', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBarSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomBarSeries', 'TBarSeries') do
  with CL.AddClassN(CL.FindClass('TCustomBarSeries'),'TBarSeries') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure CalcBarBounds( ValueIndex : Integer)');
    RegisterMethod('Function CalcXPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function CalcYPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Procedure DrawBar( BarIndex, StartPos, EndPos : Integer)');
    RegisterMethod('Function DrawSeriesForward( ValueIndex : Integer) : Boolean');
    RegisterMethod('Function GetOriginPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function MaxXValue : Double');
    RegisterMethod('Function MinXValue : Double');
    RegisterMethod('Function MaxYValue : Double');
    RegisterMethod('Function MinYValue : Double');
    RegisterProperty('BarWidth', 'Integer', iptr);
    RegisterProperty('CustomBarWidth', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomBarSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TChartSeries', 'TCustomBarSeries') do
  with CL.AddClassN(CL.FindClass('TChartSeries'),'TCustomBarSeries') do begin
    RegisterProperty('NormalBarColor', 'TColor', iptrw);
    RegisterMethod('Constructor Create( AOwner : TComponent)');
     RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Function AddBar( const AValue : Double; const ALabel : String; AColor : TColor) : Integer');
    RegisterMethod('Function ApplyBarOffset( Position : Integer) : Integer');
    RegisterMethod('Function BarMargin : Integer');
    RegisterMethod('Procedure BarRectangle( BarColor : TColor; ALeft, ATop, ARight, ABottom : Integer)');
    RegisterMethod('Procedure CalcBarBounds( ValueIndex : Integer)');
    RegisterMethod('Function CalcMarkLength( ValueIndex : Integer) : Integer');
    RegisterMethod('Procedure DrawBar( BarIndex, StartPos, EndPos : Integer)');
    RegisterMethod('Function PointOrigin( ValueIndex : Integer; SumAll : Boolean) : Double');
    RegisterMethod('Procedure SetPenBrushBar( BarColor : TColor; ValueIndex : Integer)');
    RegisterMethod('Function NumSampleValues:Integer');
     RegisterPublishedProperties;

    RegisterProperty('BarBounds', 'TRect', iptr);
    RegisterProperty('ConePercent', 'Integer', iptrw);
    RegisterProperty('Transparency', 'TTeeTransparency', iptrw);
    RegisterProperty('BarBrush', 'TChartBrush', iptrw);
    RegisterProperty('BarPen', 'TChartPen', iptrw);
    RegisterProperty('BevelSize', 'Integer', iptrw);
    RegisterProperty('DarkPen', 'Integer', iptrw);
    RegisterProperty('AutoBarSize', 'Boolean', iptrw);
    RegisterProperty('AutoMarkPosition', 'Boolean', iptrw);
    RegisterProperty('BarStyle', 'TBarStyle', iptrw);
    RegisterProperty('BarWidthPercent', 'Integer', iptrw);
    RegisterProperty('Dark3D', 'Boolean', iptrw);
    RegisterProperty('DepthPercent', 'Integer', iptrw);
    RegisterProperty('Gradient', 'TBarSeriesGradient', iptrw);
    RegisterProperty('MultiBar', 'TMultiBar', iptrw);
    RegisterProperty('OffsetPercent', 'Integer', iptrw);
    RegisterProperty('Shadow', 'TTeeShadow', iptrw);
    RegisterProperty('SideMargins', 'Boolean', iptrw);
    RegisterProperty('StackGroup', 'Integer', iptrw);
    RegisterProperty('TickLines', 'TChartHiddenPen', iptrw);
    RegisterProperty('UseYOrigin', 'Boolean', iptrw);
    RegisterProperty('YOrigin', 'Double', iptrw);
    RegisterProperty('OnGetBarStyle', 'TGetBarStyleEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBarSeriesGradient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomTeeGradient', 'TBarSeriesGradient') do
  with CL.AddClassN(CL.FindClass('TCustomTeeGradient'),'TBarSeriesGradient') do
  begin
    RegisterProperty('Relative', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THorizAreaSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAreaSeries', 'THorizAreaSeries') do
  with CL.AddClassN(CL.FindClass('TAreaSeries'),'THorizAreaSeries') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function NumSampleValues : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAreaSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSeries', 'TAreaSeries') do
  with CL.AddClassN(CL.FindClass('TCustomSeries'),'TAreaSeries') do  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function DrawSeriesForward( ValueIndex : Integer) : Boolean');
    RegisterMethod('Function GetOriginPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function MaxXValue : Double');
    RegisterMethod('Function MinXValue : Double');
    RegisterMethod('Function MaxYValue : Double');
    RegisterMethod('Function MinYValue : Double');
     RegisterPublishedProperties;
     RegisterProperty('MultiArea', 'TMultiArea', iptrw);
    RegisterProperty('StackGroup', 'Integer', iptrw);
    RegisterProperty('UseYOrigin', 'Boolean', iptrw);
    RegisterProperty('YOrigin', 'Double', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPointSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSeries', 'TPointSeries') do
  with CL.AddClassN(CL.FindClass('TCustomSeries'),'TPointSeries') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
     RegisterPublishedProperties;
    RegisterProperty('Marks', 'TSeriesMarks', iptrw);
     RegisterProperty('Title', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THorizLineSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TLineSeries', 'THorizLineSeries') do
  with CL.AddClassN(CL.FindClass('TLineSeries'),'THorizLineSeries') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLineSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSeries', 'TLineSeries') do
  with CL.AddClassN(CL.FindClass('TCustomSeries'),'TLineSeries') do begin
   RegisterPublishedProperties;
     RegisterProperty('Marks', 'TSeriesMarks', iptrw);
     RegisterProperty('Title', 'string', iptrw);
      RegisterProperty('Gradient', 'TTeeGradient', iptrw);
    RegisterProperty('ColorEachLine', 'boolean', iptrw);
     RegisterProperty('ColorEachPoint', 'boolean', iptrw);
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomLineSeries', 'TCustomSeries') do
  with CL.AddClassN(CL.FindClass('TCustomLineSeries'),'TCustomSeries') do begin
    RegisterMethod('Function RaiseClicked : Boolean');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function CalcXPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function CalcYPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function Clicked( x, y : Integer) : Integer');
    RegisterMethod('Function GetOriginPos( ValueIndex : Integer) : Integer');
    RegisterMethod('Function MaxXValue : Double');
    RegisterMethod('Function MinXValue : Double');
    RegisterMethod('Function MaxYValue : Double');
    RegisterMethod('Function MinYValue : Double');
    RegisterProperty('AreaBrush', 'TBrushStyle', iptrw);
    RegisterProperty('AreaChartBrush', 'TChartBrush', iptrw);
    RegisterProperty('AreaColor', 'TColor', iptrw);
    RegisterProperty('AreaLinesPen', 'TChartPen', iptrw);
    RegisterProperty('ClickableLine', 'Boolean', iptrw);
    RegisterProperty('ColorEachLine', 'Boolean', iptrw);
    RegisterProperty('Dark3D', 'Boolean', iptrw);
    RegisterProperty('DrawArea', 'Boolean', iptrw);
    RegisterProperty('InvertedStairs', 'Boolean', iptrw);
    RegisterProperty('LineBrush', 'TBrushStyle', iptrw);
    RegisterProperty('LineHeight', 'Integer', iptrw);
    RegisterProperty('OutLine', 'TChartHiddenPen', iptrw);
    RegisterProperty('Pointer', 'TSeriesPointer', iptrw);
    RegisterProperty('Shadow', 'TTeeShadow', iptrw);
    RegisterProperty('Stairs', 'Boolean', iptrw);
    RegisterProperty('FastPoint', 'Boolean', iptrw);
    RegisterProperty('OnClickPointer', 'TSeriesClickPointerEvent', iptrw);
    RegisterProperty('OnGetPointerStyle', 'TOnGetPointerStyle', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomLineSeries(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TChartSeries', 'TCustomLineSeries') do
  with CL.AddClassN(CL.FindClass('TChartSeries'),'TCustomLineSeries') do begin
    RegisterProperty('LinePen', 'TChartPen', iptrw);
     RegisterMethod('Procedure Assign( Source : TPersistent)');
     RegisterProperty('TreatNulls', 'TTreatNullsStyle', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Series(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('PiDegree','Double').setExtended( Pi / 180.0);
 CL.AddConstantN('Tee_CircledShadowColor','LongWord').SetUInt( TColor ( $A0A0A0 ));
  CL.AddTypeS('TTreatNullsStyle', '( teetnDontPaint, teetnSkip, teetnIgnore )');
  SIRegister_TCustomLineSeries(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomSeries');
  CL.AddTypeS('TSeriesClickPointerEvent', 'Procedure (Sender : TCustomSeries; ValueIndex: Integer; X, Y : Integer)');
  CL.AddTypeS('TCustomSeriesStack', '( cssNone, cssOverlap, cssStack, cssStack100 )');
  CL.AddTypeS('TOnGetPointerStyle', 'Function ( Sender : TChartSeries; ValueIndex: Integer) : TSeriesPointerStyle');
  SIRegister_TCustomSeries(CL);
  SIRegister_TLineSeries(CL);
  SIRegister_THorizLineSeries(CL);
  SIRegister_TPointSeries(CL);
  CL.AddTypeS('TMultiArea', '( mamaNone, maStacked, maStacked100 )');
  SIRegister_TAreaSeries(CL);
  SIRegister_THorizAreaSeries(CL);
  CL.AddTypeS('TMultiBar', '( teembNone, teembSide, teembStacked, teembStacked100, teembSideAll, teembSelfStack )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomBarSeries');
  CL.AddTypeS('TBarStyle', '( teebsRectangle, teebsPyramid, teebsInvPyramid, teebsCilinder,'
   +' teebsEllipse, teebsArrow, teebsRectGradient, teebsCone,teebsBevel,teebsSlantCube,teebsDiamond, teebsInvArrow, teebsInvCone )');
  CL.AddTypeS('TGetBarStyleEvent', 'Procedure (Sender : TCustomBarSeries; ValueIndex: Integer; var TheBarStyle: TBarStyle)');
  SIRegister_TBarSeriesGradient(CL);
  SIRegister_TCustomBarSeries(CL);
  SIRegister_TBarSeries(CL);
  SIRegister_THorizBarSeries(CL);
  SIRegister_TCircledShadow(CL);
  SIRegister_TCircledSeries(CL);
  CL.AddTypeS('TPieAngle', 'record StartAngle : Double; MidAngle : Double; EndAngle : Double; end');
  CL.AddTypeS('TPieAngles', 'array of TPieAngle');
  SIRegister_TSliceValueList(CL);
  CL.AddTypeS('TPieOtherStyle', '( piepoNone, piepoBelowPercent, piepoBelowValue )');
  SIRegister_TPieOtherSlice(CL);
  SIRegister_TPieMarks(CL);
  CL.AddTypeS('TMultiPie', '( teempAutomatic, teempDisabled )');
  SIRegister_TPieSeries(CL);
  SIRegister_TFastLineSeries(CL);
 //CL.AddConstantN('bsCylinder','').SetString( bsCilinder);
 CL.AddDelphiFunction('Procedure RegisterTeeStandardSeries');
 CL.AddDelphiFunction('Procedure TeePointerDrawLegend(Pointer : TSeriesPointer; AColor: TColor; const Rect: TRect; DrawPen : Boolean; AStyle : TSeriesPointerStyle)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesStairs_W(Self: TFastLineSeries; const T: Boolean);
begin Self.Stairs := T; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesStairs_R(Self: TFastLineSeries; var T: Boolean);
begin T := Self.Stairs; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesInvertedStairs_W(Self: TFastLineSeries; const T: Boolean);
begin Self.InvertedStairs := T; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesInvertedStairs_R(Self: TFastLineSeries; var T: Boolean);
begin T := Self.InvertedStairs; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesIgnoreNulls_W(Self: TFastLineSeries; const T: Boolean);
begin Self.IgnoreNulls := T; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesIgnoreNulls_R(Self: TFastLineSeries; var T: Boolean);
begin T := Self.IgnoreNulls; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesDrawAllPoints_W(Self: TFastLineSeries; const T: Boolean);
begin Self.DrawAllPoints := T; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesDrawAllPoints_R(Self: TFastLineSeries; var T: Boolean);
begin T := Self.DrawAllPoints; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesExpandAxis_W(Self: TFastLineSeries; const T: Integer);
begin //Self.ExpandAxis := T;
end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesExpandAxis_R(Self: TFastLineSeries; var T: Integer);
begin //T := Self.ExpandAxis;
end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesAutoRepaint_W(Self: TFastLineSeries; const T: Boolean);
begin Self.AutoRepaint := T; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesAutoRepaint_R(Self: TFastLineSeries; var T: Boolean);
begin T := Self.AutoRepaint; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesFastPen_W(Self: TFastLineSeries; const T: Boolean);
begin Self.FastPen := T; end;

(*----------------------------------------------------------------------------*)
procedure TFastLineSeriesFastPen_R(Self: TFastLineSeries; var T: Boolean);
begin T := Self.FastPen; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesUsePatterns_W(Self: TPieSeries; const T: Boolean);
begin Self.UsePatterns := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesUsePatterns_R(Self: TPieSeries; var T: Boolean);
begin T := Self.UsePatterns; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesPieValues_W(Self: TPieSeries; const T: TChartValueList);
begin Self.PieValues := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesPieValues_R(Self: TPieSeries; var T: TChartValueList);
begin T := Self.PieValues; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesPiePen_W(Self: TPieSeries; const T: TChartPen);
begin Self.PiePen := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesPiePen_R(Self: TPieSeries; var T: TChartPen);
begin T := Self.PiePen; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesPieMarks_W(Self: TPieSeries; const T: TPieMarks);
begin Self.PieMarks := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesPieMarks_R(Self: TPieSeries; var T: TPieMarks);
begin T := Self.PieMarks; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesOtherSlice_W(Self: TPieSeries; const T: TPieOtherSlice);
begin Self.OtherSlice := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesOtherSlice_R(Self: TPieSeries; var T: TPieOtherSlice);
begin T := Self.OtherSlice; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesMultiPie_W(Self: TPieSeries; const T: TMultiPie);
begin Self.MultiPie := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesMultiPie_R(Self: TPieSeries; var T: TMultiPie);
begin T := Self.MultiPie; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesGradient_W(Self: TPieSeries; const T: TChartGradient);
begin Self.Gradient := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesGradient_R(Self: TPieSeries; var T: TChartGradient);
begin T := Self.Gradient; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesExplodeBiggest_W(Self: TPieSeries; const T: Integer);
begin Self.ExplodeBiggest := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesExplodeBiggest_R(Self: TPieSeries; var T: Integer);
begin T := Self.ExplodeBiggest; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesDarkPen_W(Self: TPieSeries; const T: Integer);
begin Self.DarkPen := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesDarkPen_R(Self: TPieSeries; var T: Integer);
begin T := Self.DarkPen; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesDark3D_W(Self: TPieSeries; const T: Boolean);
begin Self.Dark3D := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesDark3D_R(Self: TPieSeries; var T: Boolean);
begin T := Self.Dark3D; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesAutoMarkPosition_W(Self: TPieSeries; const T: Boolean);
begin Self.AutoMarkPosition := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesAutoMarkPosition_R(Self: TPieSeries; var T: Boolean);
begin T := Self.AutoMarkPosition; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesAngleSize_W(Self: TPieSeries; const T: Integer);
begin Self.AngleSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesAngleSize_R(Self: TPieSeries; var T: Integer);
begin T := Self.AngleSize; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesSliceHeight_R(Self: TPieSeries; var T: TSliceValueList);
begin T := Self.SliceHeight; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesExplodedSlice_R(Self: TPieSeries; var T: TSliceValueList);
begin T := Self.ExplodedSlice; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesDonutPercent_W(Self: TPieSeries; const T: Integer);
begin Self.DonutPercent := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesDonutPercent_R(Self: TPieSeries; var T: Integer);
begin T := Self.DonutPercent; end;

(*----------------------------------------------------------------------------*)
procedure TPieSeriesAngles_R(Self: TPieSeries; var T: TPieAngles);
begin T := Self.Angles; end;

(*----------------------------------------------------------------------------*)
procedure TPieMarksLegSize_W(Self: TPieMarks; const T: Integer);
begin Self.LegSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieMarksLegSize_R(Self: TPieMarks; var T: Integer);
begin T := Self.LegSize; end;

(*----------------------------------------------------------------------------*)
procedure TPieMarksVertCenter_W(Self: TPieMarks; const T: Boolean);
begin Self.VertCenter := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieMarksVertCenter_R(Self: TPieMarks; var T: Boolean);
begin T := Self.VertCenter; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceValue_W(Self: TPieOtherSlice; const T: Double);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceValue_R(Self: TPieOtherSlice; var T: Double);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceText_W(Self: TPieOtherSlice; const T: String);
begin Self.Text := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceText_R(Self: TPieOtherSlice; var T: String);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceStyle_W(Self: TPieOtherSlice; const T: TPieOtherStyle);
begin Self.Style := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceStyle_R(Self: TPieOtherSlice; var T: TPieOtherStyle);
begin T := Self.Style; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceLegend_W(Self: TPieOtherSlice; const T: TChartLegend);
begin Self.Legend := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceLegend_R(Self: TPieOtherSlice; var T: TChartLegend);
begin T := Self.Legend; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceColor_W(Self: TPieOtherSlice; const T: TColor);
begin Self.Color := T; end;

(*----------------------------------------------------------------------------*)
procedure TPieOtherSliceColor_R(Self: TPieOtherSlice; var T: TColor);
begin T := Self.Color; end;

(*----------------------------------------------------------------------------*)
procedure TSliceValueListValue_W(Self: TSliceValueList; const T: Integer; const t1: Integer);
begin Self.Value[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSliceValueListValue_R(Self: TSliceValueList; var T: Integer; const t1: Integer);
begin T := Self.Value[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesShadow_W(Self: TCircledSeries; const T: TCircledShadow);
begin Self.Shadow := T; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesShadow_R(Self: TCircledSeries; var T: TCircledShadow);
begin T := Self.Shadow; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCustomYRadius_W(Self: TCircledSeries; const T: Integer);
begin Self.CustomYRadius := T; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCustomYRadius_R(Self: TCircledSeries; var T: Integer);
begin T := Self.CustomYRadius; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCustomXRadius_W(Self: TCircledSeries; const T: Integer);
begin Self.CustomXRadius := T; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCustomXRadius_R(Self: TCircledSeries; var T: Integer);
begin T := Self.CustomXRadius; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircled_W(Self: TCircledSeries; const T: Boolean);
begin Self.Circled := T; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircled_R(Self: TCircledSeries; var T: Boolean);
begin T := Self.Circled; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesYRadius_R(Self: TCircledSeries; var T: Integer);
begin T := Self.YRadius; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesXRadius_R(Self: TCircledSeries; var T: Integer);
begin T := Self.XRadius; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesRotationAngle_W(Self: TCircledSeries; const T: Integer);
begin Self.RotationAngle := T; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesRotationAngle_R(Self: TCircledSeries; var T: Integer);
begin T := Self.RotationAngle; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircleYCenter_R(Self: TCircledSeries; var T: Integer);
begin T := Self.CircleYCenter; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircleXCenter_R(Self: TCircledSeries; var T: Integer);
begin T := Self.CircleXCenter; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircleWidth_R(Self: TCircledSeries; var T: Integer);
begin T := Self.CircleWidth; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircleRect_R(Self: TCircledSeries; var T: TRect);
begin T := Self.CircleRect; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircleHeight_R(Self: TCircledSeries; var T: Integer);
begin T := Self.CircleHeight; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircleBackColor_W(Self: TCircledSeries; const T: TColor);
begin Self.CircleBackColor := T; end;

(*----------------------------------------------------------------------------*)
procedure TCircledSeriesCircleBackColor_R(Self: TCircledSeries; var T: TColor);
begin T := Self.CircleBackColor; end;

(*----------------------------------------------------------------------------*)
procedure THorizBarSeriesCustomBarHeight_W(Self: THorizBarSeries; const T: Integer);
begin Self.CustomBarHeight := T; end;

(*----------------------------------------------------------------------------*)
procedure THorizBarSeriesCustomBarHeight_R(Self: THorizBarSeries; var T: Integer);
begin T := Self.CustomBarHeight; end;

(*----------------------------------------------------------------------------*)
procedure THorizBarSeriesBarHeight_R(Self: THorizBarSeries; var T: Integer);
begin T := Self.BarHeight; end;

(*----------------------------------------------------------------------------*)
procedure TBarSeriesCustomBarWidth_W(Self: TBarSeries; const T: Integer);
begin Self.CustomBarWidth := T; end;

(*----------------------------------------------------------------------------*)
procedure TBarSeriesCustomBarWidth_R(Self: TBarSeries; var T: Integer);
begin T := Self.CustomBarWidth; end;

(*----------------------------------------------------------------------------*)
procedure TBarSeriesBarWidth_R(Self: TBarSeries; var T: Integer);
begin T := Self.BarWidth; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesOnGetBarStyle_W(Self: TCustomBarSeries; const T: TGetBarStyleEvent);
begin Self.OnGetBarStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesOnGetBarStyle_R(Self: TCustomBarSeries; var T: TGetBarStyleEvent);
begin T := Self.OnGetBarStyle; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesYOrigin_W(Self: TCustomBarSeries; const T: Double);
begin Self.YOrigin := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesYOrigin_R(Self: TCustomBarSeries; var T: Double);
begin T := Self.YOrigin; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesUseYOrigin_W(Self: TCustomBarSeries; const T: Boolean);
begin Self.UseYOrigin := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesUseYOrigin_R(Self: TCustomBarSeries; var T: Boolean);
begin T := Self.UseYOrigin; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesTickLines_W(Self: TCustomBarSeries; const T: TChartHiddenPen);
begin Self.TickLines := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesTickLines_R(Self: TCustomBarSeries; var T: TChartHiddenPen);
begin T := Self.TickLines; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesStackGroup_W(Self: TCustomBarSeries; const T: Integer);
begin Self.StackGroup := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesStackGroup_R(Self: TCustomBarSeries; var T: Integer);
begin T := Self.StackGroup; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesSideMargins_W(Self: TCustomBarSeries; const T: Boolean);
begin Self.SideMargins := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesSideMargins_R(Self: TCustomBarSeries; var T: Boolean);
begin T := Self.SideMargins; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesShadow_W(Self: TCustomBarSeries; const T: TTeeShadow);
begin Self.Shadow := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesShadow_R(Self: TCustomBarSeries; var T: TTeeShadow);
begin T := Self.Shadow; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesOffsetPercent_W(Self: TCustomBarSeries; const T: Integer);
begin Self.OffsetPercent := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesOffsetPercent_R(Self: TCustomBarSeries; var T: Integer);
begin T := Self.OffsetPercent; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesMultiBar_W(Self: TCustomBarSeries; const T: TMultiBar);
begin Self.MultiBar := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesMultiBar_R(Self: TCustomBarSeries; var T: TMultiBar);
begin T := Self.MultiBar; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesGradient_W(Self: TCustomBarSeries; const T: TBarSeriesGradient);
begin Self.Gradient := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesGradient_R(Self: TCustomBarSeries; var T: TBarSeriesGradient);
begin T := Self.Gradient; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesDepthPercent_W(Self: TCustomBarSeries; const T: Integer);
begin Self.DepthPercent := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesDepthPercent_R(Self: TCustomBarSeries; var T: Integer);
begin T := Self.DepthPercent; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesDark3D_W(Self: TCustomBarSeries; const T: Boolean);
begin Self.Dark3D := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesDark3D_R(Self: TCustomBarSeries; var T: Boolean);
begin T := Self.Dark3D; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarWidthPercent_W(Self: TCustomBarSeries; const T: Integer);
begin Self.BarWidthPercent := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarWidthPercent_R(Self: TCustomBarSeries; var T: Integer);
begin T := Self.BarWidthPercent; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarStyle_W(Self: TCustomBarSeries; const T: TBarStyle);
begin Self.BarStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarStyle_R(Self: TCustomBarSeries; var T: TBarStyle);
begin T := Self.BarStyle; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesAutoMarkPosition_W(Self: TCustomBarSeries; const T: Boolean);
begin Self.AutoMarkPosition := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesAutoMarkPosition_R(Self: TCustomBarSeries; var T: Boolean);
begin T := Self.AutoMarkPosition; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesAutoBarSize_W(Self: TCustomBarSeries; const T: Boolean);
begin Self.AutoBarSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesAutoBarSize_R(Self: TCustomBarSeries; var T: Boolean);
begin T := Self.AutoBarSize; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesDarkPen_W(Self: TCustomBarSeries; const T: Integer);
begin Self.DarkPen := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesDarkPen_R(Self: TCustomBarSeries; var T: Integer);
begin T := Self.DarkPen; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBevelSize_W(Self: TCustomBarSeries; const T: Integer);
begin Self.BevelSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBevelSize_R(Self: TCustomBarSeries; var T: Integer);
begin T := Self.BevelSize; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarPen_W(Self: TCustomBarSeries; const T: TChartPen);
begin Self.BarPen := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarPen_R(Self: TCustomBarSeries; var T: TChartPen);
begin T := Self.BarPen; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarBrush_W(Self: TCustomBarSeries; const T: TChartBrush);
begin Self.BarBrush := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarBrush_R(Self: TCustomBarSeries; var T: TChartBrush);
begin T := Self.BarBrush; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesTransparency_W(Self: TCustomBarSeries; const T: TTeeTransparency);
begin Self.Transparency := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesTransparency_R(Self: TCustomBarSeries; var T: TTeeTransparency);
begin T := Self.Transparency; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesConePercent_W(Self: TCustomBarSeries; const T: Integer);
begin Self.ConePercent := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesConePercent_R(Self: TCustomBarSeries; var T: Integer);
begin T := Self.ConePercent; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesBarBounds_R(Self: TCustomBarSeries; var T: TRect);
begin T := Self.BarBounds; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesNormalBarColor_W(Self: TCustomBarSeries; const T: TColor);
Begin Self.NormalBarColor := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBarSeriesNormalBarColor_R(Self: TCustomBarSeries; var T: TColor);
Begin T := Self.NormalBarColor; end;

(*----------------------------------------------------------------------------*)
procedure TBarSeriesGradientRelative_W(Self: TBarSeriesGradient; const T: Boolean);
begin Self.Relative := T; end;

(*----------------------------------------------------------------------------*)
procedure TBarSeriesGradientRelative_R(Self: TBarSeriesGradient; var T: Boolean);
begin T := Self.Relative; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesYOrigin_W(Self: TAreaSeries; const T: Double);
begin Self.YOrigin := T; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesYOrigin_R(Self: TAreaSeries; var T: Double);
begin T := Self.YOrigin; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesUseYOrigin_W(Self: TAreaSeries; const T: Boolean);
begin Self.UseYOrigin := T; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesUseYOrigin_R(Self: TAreaSeries; var T: Boolean);
begin T := Self.UseYOrigin; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesStackGroup_W(Self: TAreaSeries; const T: Integer);
begin Self.StackGroup := T; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesStackGroup_R(Self: TAreaSeries; var T: Integer);
begin T := Self.StackGroup; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesMultiArea_W(Self: TAreaSeries; const T: TMultiArea);
begin Self.MultiArea := T; end;

(*----------------------------------------------------------------------------*)
procedure TAreaSeriesMultiArea_R(Self: TAreaSeries; var T: TMultiArea);
begin T := Self.MultiArea; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesOnGetPointerStyle_W(Self: TCustomSeries; const T: TOnGetPointerStyle);
begin Self.OnGetPointerStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesOnGetPointerStyle_R(Self: TCustomSeries; var T: TOnGetPointerStyle);
begin T := Self.OnGetPointerStyle; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesOnClickPointer_W(Self: TCustomSeries; const T: TSeriesClickPointerEvent);
begin Self.OnClickPointer := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesOnClickPointer_R(Self: TCustomSeries; var T: TSeriesClickPointerEvent);
begin T := Self.OnClickPointer; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesFastPoint_W(Self: TCustomSeries; const T: Boolean);
begin //Self.FastPoint := T;
end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesFastPoint_R(Self: TCustomSeries; var T: Boolean);
begin //T := Self.FastPoint;
end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesStairs_W(Self: TCustomSeries; const T: Boolean);
begin Self.Stairs := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesStairs_R(Self: TCustomSeries; var T: Boolean);
begin T := Self.Stairs; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesShadow_W(Self: TCustomSeries; const T: TTeeShadow);
begin Self.Shadow := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesShadow_R(Self: TCustomSeries; var T: TTeeShadow);
begin T := Self.Shadow; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesPointer_W(Self: TCustomSeries; const T: TSeriesPointer);
begin Self.Pointer := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesPointer_R(Self: TCustomSeries; var T: TSeriesPointer);
begin T := Self.Pointer; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesOutLine_W(Self: TCustomSeries; const T: TChartHiddenPen);
begin Self.OutLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesOutLine_R(Self: TCustomSeries; var T: TChartHiddenPen);
begin T := Self.OutLine; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesLineHeight_W(Self: TCustomSeries; const T: Integer);
begin Self.LineHeight := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesLineHeight_R(Self: TCustomSeries; var T: Integer);
begin T := Self.LineHeight; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesLineBrush_W(Self: TCustomSeries; const T: TBrushStyle);
begin Self.LineBrush := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesLineBrush_R(Self: TCustomSeries; var T: TBrushStyle);
begin T := Self.LineBrush; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesInvertedStairs_W(Self: TCustomSeries; const T: Boolean);
begin Self.InvertedStairs := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesInvertedStairs_R(Self: TCustomSeries; var T: Boolean);
begin T := Self.InvertedStairs; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesDrawArea_W(Self: TCustomSeries; const T: Boolean);
begin Self.DrawArea := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesDrawArea_R(Self: TCustomSeries; var T: Boolean);
begin T := Self.DrawArea; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesDark3D_W(Self: TCustomSeries; const T: Boolean);
begin Self.Dark3D := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesDark3D_R(Self: TCustomSeries; var T: Boolean);
begin T := Self.Dark3D; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesColorEachLine_W(Self: TCustomSeries; const T: Boolean);
begin Self.ColorEachLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesColorEachLine_R(Self: TCustomSeries; var T: Boolean);
begin T := Self.ColorEachLine; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesClickableLine_W(Self: TCustomSeries; const T: Boolean);
begin Self.ClickableLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesClickableLine_R(Self: TCustomSeries; var T: Boolean);
begin T := Self.ClickableLine; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaLinesPen_W(Self: TCustomSeries; const T: TChartPen);
begin Self.AreaLinesPen := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaLinesPen_R(Self: TCustomSeries; var T: TChartPen);
begin T := Self.AreaLinesPen; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaColor_W(Self: TCustomSeries; const T: TColor);
begin Self.AreaColor := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaColor_R(Self: TCustomSeries; var T: TColor);
begin T := Self.AreaColor; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaChartBrush_W(Self: TCustomSeries; const T: TChartBrush);
begin Self.AreaChartBrush := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaChartBrush_R(Self: TCustomSeries; var T: TChartBrush);
begin T := Self.AreaChartBrush; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaBrush_W(Self: TCustomSeries; const T: TBrushStyle);
begin Self.AreaBrush := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSeriesAreaBrush_R(Self: TCustomSeries; var T: TBrushStyle);
begin T := Self.AreaBrush; end;

(*----------------------------------------------------------------------------*)
procedure TCustomLineSeriesTreatNulls_W(Self: TCustomLineSeries; const T: TTreatNullsStyle);
begin Self.TreatNulls := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomLineSeriesTreatNulls_R(Self: TCustomLineSeries; var T: TTreatNullsStyle);
begin T := Self.TreatNulls; end;

(*----------------------------------------------------------------------------*)
procedure TCustomLineSeriesLinePen_W(Self: TCustomLineSeries; const T: TChartPen);
begin Self.LinePen := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomLineSeriesLinePen_R(Self: TCustomLineSeries; var T: TChartPen);
begin T := Self.LinePen; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Series_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@RegisterTeeStandardSeries, 'RegisterTeeStandardSeries', cdRegister);
 S.RegisterDelphiFunction(@TeePointerDrawLegend, 'TeePointerDrawLegend', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFastLineSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFastLineSeries) do begin
    RegisterConstructor(@TFastLineSeries.Create, 'Create');
    RegisterMethod(@TFastLineSeries.Assign, 'Assign');
    RegisterMethod(@TFastLineSeries.Clicked, 'Clicked');
    RegisterPropertyHelper(@TFastLineSeriesFastPen_R,@TFastLineSeriesFastPen_W,'FastPen');
    RegisterPropertyHelper(@TFastLineSeriesAutoRepaint_R,@TFastLineSeriesAutoRepaint_W,'AutoRepaint');
    RegisterPropertyHelper(@TFastLineSeriesExpandAxis_R,@TFastLineSeriesExpandAxis_W,'ExpandAxis');
    RegisterPropertyHelper(@TFastLineSeriesDrawAllPoints_R,@TFastLineSeriesDrawAllPoints_W,'DrawAllPoints');
    RegisterPropertyHelper(@TFastLineSeriesIgnoreNulls_R,@TFastLineSeriesIgnoreNulls_W,'IgnoreNulls');
    RegisterPropertyHelper(@TFastLineSeriesInvertedStairs_R,@TFastLineSeriesInvertedStairs_W,'InvertedStairs');
    RegisterPropertyHelper(@TFastLineSeriesStairs_R,@TFastLineSeriesStairs_W,'Stairs');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPieSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPieSeries) do begin
    RegisterConstructor(@TPieSeries.Create, 'Create');
     RegisterMethod(@TPieSeries.Destroy, 'Free');
    RegisterMethod(@TPieSeries.AddPie, 'AddPie');
    RegisterMethod(@TPieSeries.Assign, 'Assign');
    RegisterMethod(@TPieSeries.BelongsToOtherSlice, 'BelongsToOtherSlice');
    RegisterMethod(@TPieSeries.CalcClickedPie, 'CalcClickedPie');
    RegisterMethod(@TPieSeries.CalcXPos, 'CalcXPos');
    RegisterMethod(@TPieSeries.CheckOrder, 'CheckOrder');
    RegisterMethod(@TPieSeries.Clear, 'Clear');
    RegisterMethod(@TPieSeries.Clicked, 'Clicked');
    RegisterMethod(@TPieSeries.CountLegendItems, 'CountLegendItems');
    RegisterMethod(@TPieSeries.Delete, 'Delete');
    RegisterMethod(@TPieSeries.LegendToValueIndex, 'LegendToValueIndex');
    RegisterMethod(@TPieSeries.MaxXValue, 'MaxXValue');
    RegisterMethod(@TPieSeries.MinXValue, 'MinXValue');
    RegisterMethod(@TPieSeries.MaxYValue, 'MaxYValue');
    RegisterMethod(@TPieSeries.MinYValue, 'MinYValue');
    RegisterMethod(@TPieSeries.NumSampleValues, 'NumSampleValues');
    RegisterMethod(@TPieSeries.SwapValueIndex, 'SwapValueIndex');
    RegisterPropertyHelper(@TPieSeriesAngles_R,nil,'Angles');
    RegisterPropertyHelper(@TPieSeriesDonutPercent_R,@TPieSeriesDonutPercent_W,'DonutPercent');
    RegisterPropertyHelper(@TPieSeriesExplodedSlice_R,nil,'ExplodedSlice');
    RegisterPropertyHelper(@TPieSeriesSliceHeight_R,nil,'SliceHeight');
    RegisterPropertyHelper(@TPieSeriesAngleSize_R,@TPieSeriesAngleSize_W,'AngleSize');
    RegisterPropertyHelper(@TPieSeriesAutoMarkPosition_R,@TPieSeriesAutoMarkPosition_W,'AutoMarkPosition');
    RegisterPropertyHelper(@TPieSeriesDark3D_R,@TPieSeriesDark3D_W,'Dark3D');
    RegisterPropertyHelper(@TPieSeriesDarkPen_R,@TPieSeriesDarkPen_W,'DarkPen');
    RegisterPropertyHelper(@TPieSeriesExplodeBiggest_R,@TPieSeriesExplodeBiggest_W,'ExplodeBiggest');
    RegisterPropertyHelper(@TPieSeriesGradient_R,@TPieSeriesGradient_W,'Gradient');
    RegisterPropertyHelper(@TPieSeriesMultiPie_R,@TPieSeriesMultiPie_W,'MultiPie');
    RegisterPropertyHelper(@TPieSeriesOtherSlice_R,@TPieSeriesOtherSlice_W,'OtherSlice');
    RegisterPropertyHelper(@TPieSeriesPieMarks_R,@TPieSeriesPieMarks_W,'PieMarks');
    RegisterPropertyHelper(@TPieSeriesPiePen_R,@TPieSeriesPiePen_W,'PiePen');
    RegisterPropertyHelper(@TPieSeriesPieValues_R,@TPieSeriesPieValues_W,'PieValues');
    RegisterPropertyHelper(@TPieSeriesUsePatterns_R,@TPieSeriesUsePatterns_W,'UsePatterns');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPieMarks(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPieMarks) do
  begin
    RegisterMethod(@TPieMarks.Assign, 'Assign');
    RegisterPropertyHelper(@TPieMarksVertCenter_R,@TPieMarksVertCenter_W,'VertCenter');
    RegisterPropertyHelper(@TPieMarksLegSize_R,@TPieMarksLegSize_W,'LegSize');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPieOtherSlice(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPieOtherSlice) do begin
    RegisterConstructor(@TPieOtherSlice.Create, 'Create');
      RegisterMethod(@TPieOtherSlice.Destroy, 'Free');
    RegisterMethod(@TPieOtherSlice.Assign, 'Assign');
    RegisterPropertyHelper(@TPieOtherSliceColor_R,@TPieOtherSliceColor_W,'Color');
    RegisterPropertyHelper(@TPieOtherSliceLegend_R,@TPieOtherSliceLegend_W,'Legend');
    RegisterPropertyHelper(@TPieOtherSliceStyle_R,@TPieOtherSliceStyle_W,'Style');
    RegisterPropertyHelper(@TPieOtherSliceText_R,@TPieOtherSliceText_W,'Text');
    RegisterPropertyHelper(@TPieOtherSliceValue_R,@TPieOtherSliceValue_W,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSliceValueList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSliceValueList) do
  begin
    RegisterMethod(@TSliceValueList.Assign, 'Assign');
    RegisterPropertyHelper(@TSliceValueListValue_R,@TSliceValueListValue_W,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCircledSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCircledSeries) do begin
    RegisterConstructor(@TCircledSeries.Create, 'Create');
     RegisterMethod(@TCircledSeries.Destroy, 'Free');
      RegisterMethod(@TCircledSeries.UseAxis, 'UseAxis');
    RegisterMethod(@TCircledSeries.AdjustScreenRatio, 'AdjustScreenRatio');
    RegisterMethod(@TCircledSeries.AngleToPos, 'AngleToPos');
    RegisterMethod(@TCircledSeries.Assign, 'Assign');
    RegisterMethod(@TCircledSeries.AssociatedToAxis, 'AssociatedToAxis');
    RegisterMethod(@TCircledSeries.PointToAngle, 'PointToAngle');
    RegisterMethod(@TCircledSeries.PointToRadius, 'PointToRadius');
    RegisterMethod(@TCircledSeries.Rotate, 'Rotate');
    RegisterPropertyHelper(@TCircledSeriesCircleBackColor_R,@TCircledSeriesCircleBackColor_W,'CircleBackColor');
    RegisterPropertyHelper(@TCircledSeriesCircleHeight_R,nil,'CircleHeight');
    RegisterPropertyHelper(@TCircledSeriesCircleRect_R,nil,'CircleRect');
    RegisterPropertyHelper(@TCircledSeriesCircleWidth_R,nil,'CircleWidth');
    RegisterPropertyHelper(@TCircledSeriesCircleXCenter_R,nil,'CircleXCenter');
    RegisterPropertyHelper(@TCircledSeriesCircleYCenter_R,nil,'CircleYCenter');
    RegisterPropertyHelper(@TCircledSeriesRotationAngle_R,@TCircledSeriesRotationAngle_W,'RotationAngle');
    RegisterPropertyHelper(@TCircledSeriesXRadius_R,nil,'XRadius');
    RegisterPropertyHelper(@TCircledSeriesYRadius_R,nil,'YRadius');
    RegisterPropertyHelper(@TCircledSeriesCircled_R,@TCircledSeriesCircled_W,'Circled');
    RegisterPropertyHelper(@TCircledSeriesCustomXRadius_R,@TCircledSeriesCustomXRadius_W,'CustomXRadius');
    RegisterPropertyHelper(@TCircledSeriesCustomYRadius_R,@TCircledSeriesCustomYRadius_W,'CustomYRadius');
    RegisterPropertyHelper(@TCircledSeriesShadow_R,@TCircledSeriesShadow_W,'Shadow');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCircledShadow(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCircledShadow) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THorizBarSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THorizBarSeries) do
  begin
    RegisterConstructor(@THorizBarSeries.Create, 'Create');
    RegisterMethod(@THorizBarSeries.CalcBarBounds, 'CalcBarBounds');
    RegisterMethod(@THorizBarSeries.CalcXPos, 'CalcXPos');
    RegisterMethod(@THorizBarSeries.CalcYPos, 'CalcYPos');
    RegisterMethod(@THorizBarSeries.DrawBar, 'DrawBar');
    RegisterMethod(@THorizBarSeries.DrawSeriesForward, 'DrawSeriesForward');
    RegisterMethod(@THorizBarSeries.GetOriginPos, 'GetOriginPos');
    RegisterMethod(@THorizBarSeries.MaxXValue, 'MaxXValue');
    RegisterMethod(@THorizBarSeries.MinXValue, 'MinXValue');
    RegisterMethod(@THorizBarSeries.MaxYValue, 'MaxYValue');
    RegisterMethod(@THorizBarSeries.MinYValue, 'MinYValue');
    RegisterPropertyHelper(@THorizBarSeriesBarHeight_R,nil,'BarHeight');
    RegisterPropertyHelper(@THorizBarSeriesCustomBarHeight_R,@THorizBarSeriesCustomBarHeight_W,'CustomBarHeight');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBarSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBarSeries) do
  begin
    RegisterConstructor(@TBarSeries.Create, 'Create');
    RegisterMethod(@TBarSeries.CalcBarBounds, 'CalcBarBounds');
    RegisterMethod(@TBarSeries.CalcXPos, 'CalcXPos');
    RegisterMethod(@TBarSeries.CalcYPos, 'CalcYPos');
    RegisterMethod(@TBarSeries.DrawBar, 'DrawBar');
    RegisterMethod(@TBarSeries.DrawSeriesForward, 'DrawSeriesForward');
    RegisterMethod(@TBarSeries.GetOriginPos, 'GetOriginPos');
    RegisterMethod(@TBarSeries.MaxXValue, 'MaxXValue');
    RegisterMethod(@TBarSeries.MinXValue, 'MinXValue');
    RegisterMethod(@TBarSeries.MaxYValue, 'MaxYValue');
    RegisterMethod(@TBarSeries.MinYValue, 'MinYValue');
    RegisterPropertyHelper(@TBarSeriesBarWidth_R,nil,'BarWidth');
    RegisterPropertyHelper(@TBarSeriesCustomBarWidth_R,@TBarSeriesCustomBarWidth_W,'CustomBarWidth');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomBarSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomBarSeries) do  begin
    RegisterPropertyHelper(@TCustomBarSeriesNormalBarColor_R,@TCustomBarSeriesNormalBarColor_W,'NormalBarColor');
    RegisterConstructor(@TCustomBarSeries.Create, 'Create');
    RegisterMethod(@TCustomBarSeries.Destroy, 'Free');
    RegisterMethod(@TCustomBarSeries.Assign, 'Assign');
    RegisterMethod(@TCustomBarSeries.AddBar, 'AddBar');
    RegisterMethod(@TCustomBarSeries.ApplyBarOffset, 'ApplyBarOffset');
    RegisterMethod(@TCustomBarSeries.BarMargin, 'BarMargin');
    RegisterMethod(@TCustomBarSeries.BarRectangle, 'BarRectangle');
    //RegisterVirtualAbstractMethod(@TCustomBarSeries, @!.CalcBarBounds, 'CalcBarBounds');
    RegisterMethod(@TCustomBarSeries.CalcMarkLength, 'CalcMarkLength');
    //RegisterVirtualAbstractMethod(@TCustomBarSeries, @!.DrawBar, 'DrawBar');
    RegisterVirtualMethod(@TCustomBarSeries.PointOrigin, 'PointOrigin');
    RegisterMethod(@TCustomBarSeries.SetPenBrushBar, 'SetPenBrushBar');
    RegisterPropertyHelper(@TCustomBarSeriesBarBounds_R,nil,'BarBounds');
    RegisterPropertyHelper(@TCustomBarSeriesConePercent_R,@TCustomBarSeriesConePercent_W,'ConePercent');
    RegisterPropertyHelper(@TCustomBarSeriesTransparency_R,@TCustomBarSeriesTransparency_W,'Transparency');
    RegisterPropertyHelper(@TCustomBarSeriesBarBrush_R,@TCustomBarSeriesBarBrush_W,'BarBrush');
    RegisterPropertyHelper(@TCustomBarSeriesBarPen_R,@TCustomBarSeriesBarPen_W,'BarPen');
    RegisterPropertyHelper(@TCustomBarSeriesBevelSize_R,@TCustomBarSeriesBevelSize_W,'BevelSize');
    RegisterPropertyHelper(@TCustomBarSeriesDarkPen_R,@TCustomBarSeriesDarkPen_W,'DarkPen');
    RegisterPropertyHelper(@TCustomBarSeriesAutoBarSize_R,@TCustomBarSeriesAutoBarSize_W,'AutoBarSize');
    RegisterPropertyHelper(@TCustomBarSeriesAutoMarkPosition_R,@TCustomBarSeriesAutoMarkPosition_W,'AutoMarkPosition');
    RegisterPropertyHelper(@TCustomBarSeriesBarStyle_R,@TCustomBarSeriesBarStyle_W,'BarStyle');
    RegisterPropertyHelper(@TCustomBarSeriesBarWidthPercent_R,@TCustomBarSeriesBarWidthPercent_W,'BarWidthPercent');
    RegisterPropertyHelper(@TCustomBarSeriesDark3D_R,@TCustomBarSeriesDark3D_W,'Dark3D');
    RegisterPropertyHelper(@TCustomBarSeriesDepthPercent_R,@TCustomBarSeriesDepthPercent_W,'DepthPercent');
    RegisterPropertyHelper(@TCustomBarSeriesGradient_R,@TCustomBarSeriesGradient_W,'Gradient');
    RegisterPropertyHelper(@TCustomBarSeriesMultiBar_R,@TCustomBarSeriesMultiBar_W,'MultiBar');
    RegisterPropertyHelper(@TCustomBarSeriesOffsetPercent_R,@TCustomBarSeriesOffsetPercent_W,'OffsetPercent');
    RegisterPropertyHelper(@TCustomBarSeriesShadow_R,@TCustomBarSeriesShadow_W,'Shadow');
    RegisterPropertyHelper(@TCustomBarSeriesSideMargins_R,@TCustomBarSeriesSideMargins_W,'SideMargins');
    RegisterPropertyHelper(@TCustomBarSeriesStackGroup_R,@TCustomBarSeriesStackGroup_W,'StackGroup');
    RegisterPropertyHelper(@TCustomBarSeriesTickLines_R,@TCustomBarSeriesTickLines_W,'TickLines');
    RegisterPropertyHelper(@TCustomBarSeriesUseYOrigin_R,@TCustomBarSeriesUseYOrigin_W,'UseYOrigin');
    RegisterPropertyHelper(@TCustomBarSeriesYOrigin_R,@TCustomBarSeriesYOrigin_W,'YOrigin');
    RegisterPropertyHelper(@TCustomBarSeriesOnGetBarStyle_R,@TCustomBarSeriesOnGetBarStyle_W,'OnGetBarStyle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBarSeriesGradient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBarSeriesGradient) do
  begin
    RegisterPropertyHelper(@TBarSeriesGradientRelative_R,@TBarSeriesGradientRelative_W,'Relative');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THorizAreaSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THorizAreaSeries) do
  begin
    RegisterConstructor(@THorizAreaSeries.Create, 'Create');
    RegisterMethod(@THorizAreaSeries.NumSampleValues, 'NumSampleValues');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAreaSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAreaSeries) do
  begin
    RegisterConstructor(@TAreaSeries.Create, 'Create');
    RegisterMethod(@TAreaSeries.Assign, 'Assign');
    RegisterMethod(@TAreaSeries.DrawSeriesForward, 'DrawSeriesForward');
    RegisterMethod(@TAreaSeries.GetOriginPos, 'GetOriginPos');
    RegisterMethod(@TAreaSeries.MaxXValue, 'MaxXValue');
    RegisterMethod(@TAreaSeries.MinXValue, 'MinXValue');
    RegisterMethod(@TAreaSeries.MaxYValue, 'MaxYValue');
    RegisterMethod(@TAreaSeries.MinYValue, 'MinYValue');
    RegisterPropertyHelper(@TAreaSeriesMultiArea_R,@TAreaSeriesMultiArea_W,'MultiArea');
    RegisterPropertyHelper(@TAreaSeriesStackGroup_R,@TAreaSeriesStackGroup_W,'StackGroup');
    RegisterPropertyHelper(@TAreaSeriesUseYOrigin_R,@TAreaSeriesUseYOrigin_W,'UseYOrigin');
    RegisterPropertyHelper(@TAreaSeriesYOrigin_R,@TAreaSeriesYOrigin_W,'YOrigin');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPointSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPointSeries) do
  begin
    RegisterConstructor(@TPointSeries.Create, 'Create');
    RegisterMethod(@TPointSeries.Assign, 'Assign');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THorizLineSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THorizLineSeries) do
  begin
    RegisterConstructor(@THorizLineSeries.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLineSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLineSeries) do
  begin
    RegisterConstructor(@TLineSeries.Create, 'Create');
    RegisterMethod(@TLineSeries.Assign, 'Assign');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomSeries) do begin
    //RegisterMethod(@TCustomSeries.RaiseClicked, 'RaiseClicked');
    RegisterConstructor(@TCustomSeries.Create, 'Create');
       RegisterMethod(@TCustomSeries.Destroy, 'Free');

    RegisterMethod(@TCustomSeries.Assign, 'Assign');
    RegisterMethod(@TCustomSeries.CalcXPos, 'CalcXPos');
    RegisterMethod(@TCustomSeries.CalcYPos, 'CalcYPos');
    RegisterMethod(@TCustomSeries.Clicked, 'Clicked');
    RegisterVirtualMethod(@TCustomSeries.GetOriginPos, 'GetOriginPos');
    RegisterMethod(@TCustomSeries.MaxXValue, 'MaxXValue');
    RegisterMethod(@TCustomSeries.MinXValue, 'MinXValue');
    RegisterMethod(@TCustomSeries.MaxYValue, 'MaxYValue');
    RegisterMethod(@TCustomSeries.MinYValue, 'MinYValue');
    RegisterPropertyHelper(@TCustomSeriesAreaBrush_R,@TCustomSeriesAreaBrush_W,'AreaBrush');
    RegisterPropertyHelper(@TCustomSeriesAreaChartBrush_R,@TCustomSeriesAreaChartBrush_W,'AreaChartBrush');
    RegisterPropertyHelper(@TCustomSeriesAreaColor_R,@TCustomSeriesAreaColor_W,'AreaColor');
    RegisterPropertyHelper(@TCustomSeriesAreaLinesPen_R,@TCustomSeriesAreaLinesPen_W,'AreaLinesPen');
    RegisterPropertyHelper(@TCustomSeriesClickableLine_R,@TCustomSeriesClickableLine_W,'ClickableLine');
    RegisterPropertyHelper(@TCustomSeriesColorEachLine_R,@TCustomSeriesColorEachLine_W,'ColorEachLine');
    RegisterPropertyHelper(@TCustomSeriesDark3D_R,@TCustomSeriesDark3D_W,'Dark3D');
    RegisterPropertyHelper(@TCustomSeriesDrawArea_R,@TCustomSeriesDrawArea_W,'DrawArea');
    RegisterPropertyHelper(@TCustomSeriesInvertedStairs_R,@TCustomSeriesInvertedStairs_W,'InvertedStairs');
    RegisterPropertyHelper(@TCustomSeriesLineBrush_R,@TCustomSeriesLineBrush_W,'LineBrush');
    RegisterPropertyHelper(@TCustomSeriesLineHeight_R,@TCustomSeriesLineHeight_W,'LineHeight');
    RegisterPropertyHelper(@TCustomSeriesOutLine_R,@TCustomSeriesOutLine_W,'OutLine');
    RegisterPropertyHelper(@TCustomSeriesPointer_R,@TCustomSeriesPointer_W,'Pointer');
    RegisterPropertyHelper(@TCustomSeriesShadow_R,@TCustomSeriesShadow_W,'Shadow');
    RegisterPropertyHelper(@TCustomSeriesStairs_R,@TCustomSeriesStairs_W,'Stairs');
    RegisterPropertyHelper(@TCustomSeriesFastPoint_R,@TCustomSeriesFastPoint_W,'FastPoint');
    RegisterPropertyHelper(@TCustomSeriesOnClickPointer_R,@TCustomSeriesOnClickPointer_W,'OnClickPointer');
    RegisterPropertyHelper(@TCustomSeriesOnGetPointerStyle_R,@TCustomSeriesOnGetPointerStyle_W,'OnGetPointerStyle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomLineSeries(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomLineSeries) do begin
     RegisterMethod(@TCustomLineSeries.Assign, 'Assign');
    RegisterPropertyHelper(@TCustomLineSeriesLinePen_R,@TCustomLineSeriesLinePen_W,'LinePen');
    RegisterPropertyHelper(@TCustomLineSeriesTreatNulls_R,@TCustomLineSeriesTreatNulls_W,'TreatNulls');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Series(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TCustomLineSeries(CL);
  with CL.Add(TCustomSeries) do
  RIRegister_TCustomSeries(CL);
  RIRegister_TLineSeries(CL);
  RIRegister_THorizLineSeries(CL);
  RIRegister_TPointSeries(CL);
  RIRegister_TAreaSeries(CL);
  RIRegister_THorizAreaSeries(CL);
  with CL.Add(TCustomBarSeries) do
  RIRegister_TBarSeriesGradient(CL);
  RIRegister_TCustomBarSeries(CL);
  RIRegister_TBarSeries(CL);
  RIRegister_THorizBarSeries(CL);
  RIRegister_TCircledShadow(CL);
  RIRegister_TCircledSeries(CL);
  RIRegister_TSliceValueList(CL);
  RIRegister_TPieOtherSlice(CL);
  RIRegister_TPieMarks(CL);
  RIRegister_TPieSeries(CL);
  RIRegister_TFastLineSeries(CL);
end;

 
 
{ TPSImport_Series }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Series.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Series(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Series.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Series(ri);
  RIRegister_Series_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
