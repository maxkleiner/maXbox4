unit uPSI_ZLib;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ZLib = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TDecompressionStream(CL: TPSPascalCompiler);
procedure SIRegister_TCompressionStream(CL: TPSPascalCompiler);
procedure SIRegister_TCustomZlibStream(CL: TPSPascalCompiler);
procedure SIRegister_ZLib(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_ZLib_Routines(S: TPSExec);
procedure RIRegister_TDecompressionStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCompressionStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomZlibStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_ZLib(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   ZLib
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ZLib]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TDecompressionStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomZlibStream', 'TDecompressionStream') do
  with CL.AddClassN(CL.FindClass('TCustomZlibStream'),'TDecompressionStream') do
  begin
    RegisterMethod('Constructor Create( Source : TStream)');
    RegisterMethod('Function Read( var Buffer : string; Count : Longint) : Longint');
    RegisterMethod('Function Write( const Buffer, string, Count : Longint) : Longint');
    RegisterMethod('Function Seek( Offset : Longint; Origin : Word) : Longint');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCompressionStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomZlibStream', 'TCompressionStream') do
  with CL.AddClassN(CL.FindClass('TCustomZlibStream'),'TCompressionStream') do
  begin
    RegisterMethod('Constructor Create( CompressionLevel : TCompressionLevel; Dest : TStream)');
    RegisterMethod('Function Read( var Buffer, string, Count : Longint) : Longint');
    RegisterMethod('Function Write( const Buffer : string; Count : Longint) : Longint');
    RegisterMethod('Function Seek( Offset : Longint; Origin : Word) : Longint');
    RegisterProperty('CompressionRate', 'Single', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomZlibStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStream', 'TCustomZlibStream') do
  with CL.AddClassN(CL.FindClass('TStream'),'TCustomZlibStream') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ZLib(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TZStreamRec', 'record next_in : PChar; avail_in : Integer; total'
   +'_in : Longint; next_out : PChar; avail_out : Integer; total_out : Longint;'
   +' msg : PChar; internal : Pointer; zalloc : TAlloc; zfree : TFree; AppData '
   +': Pointer; data_type : Integer; adler : Longint; reserved : Longint; end');
  SIRegister_TCustomZlibStream(CL);
  CL.AddTypeS('TCompressionLevel', '( clNone, clFastest, clDefault, clMax )');
  SIRegister_TCompressionStream(CL);
  SIRegister_TDecompressionStream(CL);
 CL.AddDelphiFunction('Procedure CompressBuf( const InBuf : Pointer; InBytes : Integer; out OutBuf : Pointer; out OutBytes : Integer)');
 CL.AddDelphiFunction('Procedure DecompressBuf( const InBuf : Pointer; InBytes : Integer; OutEstimate : Integer; out OutBuf : Pointer; out OutBytes : Integer)');
 CL.AddDelphiFunction('Procedure DecompressToUserBuf( const InBuf : Pointer; InBytes : Integer; const OutBuf : Pointer; BufSize : Integer)');
 CL.AddConstantN('zlib_version','String').SetString( '1.2.1');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EZlibError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'ECompressionError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDecompressionError');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TCompressionStreamCompressionRate_R(Self: TCompressionStream; var T: Single);
begin T := Self.CompressionRate; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ZLib_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CompressBuf, 'CompressBuf', cdRegister);
 S.RegisterDelphiFunction(@DecompressBuf, 'DecompressBuf', cdRegister);
 S.RegisterDelphiFunction(@DecompressToUserBuf, 'DecompressToUserBuf', cdRegister);
  with CL.Add(EZlibError) do
  with CL.Add(ECompressionError) do
  with CL.Add(EDecompressionError) do
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDecompressionStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDecompressionStream) do
  begin
    RegisterConstructor(@TDecompressionStream.Create, 'Create');
    RegisterMethod(@TDecompressionStream.Read, 'Read');
    RegisterMethod(@TDecompressionStream.Write, 'Write');
    RegisterMethod(@TDecompressionStream.Seek, 'Seek');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCompressionStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCompressionStream) do
  begin
    RegisterConstructor(@TCompressionStream.Create, 'Create');
    RegisterMethod(@TCompressionStream.Read, 'Read');
    RegisterMethod(@TCompressionStream.Write, 'Write');
    RegisterMethod(@TCompressionStream.Seek, 'Seek');
    RegisterPropertyHelper(@TCompressionStreamCompressionRate_R,nil,'CompressionRate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomZlibStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomZlibStream) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ZLib(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TCustomZlibStream(CL);
  RIRegister_TCompressionStream(CL);
  RIRegister_TDecompressionStream(CL);
end;

 
 
{ TPSImport_ZLib }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ZLib.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ZLib(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ZLib.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ZLib(ri);
  RIRegister_ZLib_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
