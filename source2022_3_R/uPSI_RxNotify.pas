unit uPSI_RxNotify;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_RxNotify = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TNotifyThread(CL: TPSPascalCompiler);
procedure SIRegister_TRxFolderMonitor(CL: TPSPascalCompiler);
procedure SIRegister_RxNotify(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_RxNotify_Routines(S: TPSExec);
procedure RIRegister_TNotifyThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRxFolderMonitor(CL: TPSRuntimeClassImporter);
procedure RIRegister_RxNotify(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,ExtCtrls
  ,RxNotify
  ;


procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_RxNotify]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TNotifyThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'TNotifyThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'TNotifyThread') do begin
    RegisterMethod('Constructor Create( const FolderName : string; WatchSubtree : Boolean; Filter : TFileChangeFilters2)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Terminate');
    RegisterProperty('Finished', 'Boolean', iptr);
    RegisterProperty('LastError', 'DWORD', iptr);
    RegisterProperty('NotifyHandle', 'THandle', iptr);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRxFolderMonitor(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TRxFolderMonitor') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TRxFolderMonitor') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Procedure Free');
      RegisterProperty('Active', 'Boolean', iptrw);
    RegisterProperty('DelayTime', 'Cardinal', iptrw);
    RegisterProperty('Filter', 'TFileChangeFilters', iptrw);
    RegisterProperty('FolderName', 'string', iptrw);
    RegisterProperty('MonitorSubtree', 'Boolean', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_RxNotify(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TFileChangeFilter2', '( fnFileName, fnDirName, fnAttributes, fnSi'
   +'ze, fnLastWrite, fnLastAccess, fnCreation, fnSecurity )');
  CL.AddTypeS('TFileChangeFilters2', 'set of TFileChangeFilter2');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNotifyThread');
  SIRegister_TRxFolderMonitor(CL);
  SIRegister_TNotifyThread(CL);
 CL.AddDelphiFunction('Function CreateNotifyThread2(const FolderName : string; WatchSubtree : Boolean; Filter : TFileChangeFilters2) : TNotifyThread');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TNotifyThreadOnChange_W(Self: TNotifyThread; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TNotifyThreadOnChange_R(Self: TNotifyThread; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TNotifyThreadNotifyHandle_R(Self: TNotifyThread; var T: THandle);
begin T := Self.NotifyHandle; end;

(*----------------------------------------------------------------------------*)
procedure TNotifyThreadLastError_R(Self: TNotifyThread; var T: DWORD);
begin T := Self.LastError; end;

(*----------------------------------------------------------------------------*)
procedure TNotifyThreadFinished_R(Self: TNotifyThread; var T: Boolean);
begin T := Self.Finished; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorOnChange_W(Self: TRxFolderMonitor; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorOnChange_R(Self: TRxFolderMonitor; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorMonitorSubtree_W(Self: TRxFolderMonitor; const T: Boolean);
begin Self.MonitorSubtree := T; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorMonitorSubtree_R(Self: TRxFolderMonitor; var T: Boolean);
begin T := Self.MonitorSubtree; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorFolderName_W(Self: TRxFolderMonitor; const T: string);
begin Self.FolderName := T; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorFolderName_R(Self: TRxFolderMonitor; var T: string);
begin T := Self.FolderName; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorFilter_W(Self: TRxFolderMonitor; const T: TFileChangeFilters);
begin Self.Filter := T; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorFilter_R(Self: TRxFolderMonitor; var T: TFileChangeFilters);
begin T := Self.Filter; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorDelayTime_W(Self: TRxFolderMonitor; const T: Cardinal);
begin Self.DelayTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorDelayTime_R(Self: TRxFolderMonitor; var T: Cardinal);
begin T := Self.DelayTime; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorActive_W(Self: TRxFolderMonitor; const T: Boolean);
begin Self.Active := T; end;

(*----------------------------------------------------------------------------*)
procedure TRxFolderMonitorActive_R(Self: TRxFolderMonitor; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_RxNotify_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CreateNotifyThread, 'CreateNotifyThread', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNotifyThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNotifyThread) do begin
    RegisterConstructor(@TNotifyThread.Create, 'Create');
      RegisterMethod(@TNotifyThread.Destroy, 'Free');

    RegisterMethod(@TNotifyThread.Terminate, 'Terminate');
    RegisterPropertyHelper(@TNotifyThreadFinished_R,nil,'Finished');
    RegisterPropertyHelper(@TNotifyThreadLastError_R,nil,'LastError');
    RegisterPropertyHelper(@TNotifyThreadNotifyHandle_R,nil,'NotifyHandle');
    RegisterPropertyHelper(@TNotifyThreadOnChange_R,@TNotifyThreadOnChange_W,'OnChange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRxFolderMonitor(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRxFolderMonitor) do begin
    RegisterConstructor(@TRxFolderMonitor.Create, 'Create');
      RegisterMethod(@TRxFolderMonitor.Destroy, 'Free');
   RegisterPropertyHelper(@TRxFolderMonitorActive_R,@TRxFolderMonitorActive_W,'Active');
    RegisterPropertyHelper(@TRxFolderMonitorDelayTime_R,@TRxFolderMonitorDelayTime_W,'DelayTime');
    RegisterPropertyHelper(@TRxFolderMonitorFilter_R,@TRxFolderMonitorFilter_W,'Filter');
    RegisterPropertyHelper(@TRxFolderMonitorFolderName_R,@TRxFolderMonitorFolderName_W,'FolderName');
    RegisterPropertyHelper(@TRxFolderMonitorMonitorSubtree_R,@TRxFolderMonitorMonitorSubtree_W,'MonitorSubtree');
    RegisterPropertyHelper(@TRxFolderMonitorOnChange_R,@TRxFolderMonitorOnChange_W,'OnChange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_RxNotify(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNotifyThread) do
  RIRegister_TRxFolderMonitor(CL);
  RIRegister_TNotifyThread(CL);
end;

 
 
{ TPSImport_RxNotify }
(*----------------------------------------------------------------------------*)
procedure TPSImport_RxNotify.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_RxNotify(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_RxNotify.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_RxNotify(ri);
  RIRegister_RxNotify_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
