unit uPSI_OverbyteIcsNntpCli;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_OverbyteIcsNntpCli = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TSslNntpCli(CL: TPSPascalCompiler);
procedure SIRegister_THtmlNntpCli(CL: TPSPascalCompiler);
procedure SIRegister_TNntpCli(CL: TPSPascalCompiler);
procedure SIRegister_OverbyteIcsNntpCli(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_OverbyteIcsNntpCli_Routines(S: TPSExec);
procedure RIRegister_TSslNntpCli(CL: TPSRuntimeClassImporter);
procedure RIRegister_THtmlNntpCli(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNntpCli(CL: TPSRuntimeClassImporter);
procedure RIRegister_OverbyteIcsNntpCli(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   OverbyteIcsNntpCli
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_OverbyteIcsNntpCli]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSslNntpCli(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNntpCli', 'TSslNntpCli') do
  with CL.AddClassN(CL.FindClass('TNntpCli'),'TSslNntpCli') do
  begin
    RegisterProperty('SslContext', 'TSslContext', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THtmlNntpCli(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNntpCli', 'THtmlNntpCli') do
  with CL.AddClassN(CL.FindClass('TNntpCli'),'THtmlNntpCli') do
  begin
    RegisterProperty('PlainText', 'TStrings', iptrw);
    RegisterProperty('HtmlText', 'TStrings', iptrw);
    RegisterProperty('AttachedFiles', 'TStrings', iptrw);
    RegisterProperty('ContentType', 'TNntpContentType', iptrw);
    RegisterProperty('HdrSubject', 'String', iptrw);
    RegisterProperty('HdrGroup', 'String', iptrw);
    RegisterProperty('HdrFrom', 'String', iptrw);
    RegisterProperty('CharSet', 'String', iptrw);
    RegisterProperty('ShareMode', 'TNntpShareMode', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNntpCli(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIcsWndControl', 'TNntpCli') do
  with CL.AddClassN(CL.FindClass('TIcsWndControl'),'TNntpCli') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Connect');
    RegisterMethod('Procedure Abort');
    RegisterMethod('Procedure Quit');
    RegisterMethod('Procedure Group( NewsGroupName : AnsiString)');
    RegisterMethod('Procedure ArticleByNumber( Number : Integer; DestStream : TStream)');
    RegisterMethod('Procedure ArticleByID( ID : AnsiString; DestStream : TStream)');
    RegisterMethod('Procedure HeadByNumber( Number : Integer; DestStream : TStream)');
    RegisterMethod('Procedure HeadByID( ID : AnsiString; DestStream : TStream)');
    RegisterMethod('Procedure BodyByNumber( Number : Integer; DestStream : TStream)');
    RegisterMethod('Procedure BodyByID( ID : AnsiString; DestStream : TStream)');
    RegisterMethod('Procedure StatByNumber( Number : Integer)');
    RegisterMethod('Procedure StatByID( ID : AnsiString)');
    RegisterMethod('Procedure Next');
    RegisterMethod('Procedure Last');
    RegisterMethod('Procedure List( DestStream : TStream)');
    RegisterMethod('Procedure ListNewsgroups( DestStream : TStream; chFiltre : AnsiString)');
    RegisterMethod('Procedure Post( FromStream : TStream)');
    RegisterMethod('Procedure Help( DestStream : TStream)');
    RegisterMethod('Procedure Authenticate');
    RegisterMethod('Procedure XOver( Articles : AnsiString; DestStream : TStream)');
    RegisterMethod('Procedure ListOverViewFmt( DestStream : TStream)');
    RegisterMethod('Procedure ListMotd( DestStream : TStream)');
    RegisterMethod('Procedure Date');
    RegisterMethod('Procedure ModeReader');
    RegisterMethod('Procedure XHdr( DestStream : TStream; Header : AnsiString; Range : AnsiString)');
    RegisterMethod('Procedure XPat( DestStream : TStream; Header, Range, FindStr : AnsiString)');
    RegisterMethod('Procedure NewGroups( When : TDateTime; GMTFLag : Boolean; Distributions : AnsiString; DestStream : TStream)');
    RegisterMethod('Procedure NewNews( When : TDateTime; GMTFLag : Boolean; NewsGroupName : AnsiString; Distributions : AnsiString; DestStream : TStream)');
    RegisterProperty('CtrlSocket', 'TWSocket', iptr);
    RegisterProperty('State', 'TNntpState', iptr);
    RegisterProperty('Host', 'String', iptrw);
    RegisterProperty('ErrorMessage', 'String', iptr);
    RegisterProperty('LastResponse', 'AnsiString', iptr);
    RegisterProperty('StatusCode', 'Integer', iptr);
    RegisterProperty('PostingPermited', 'Boolean', iptr);
    RegisterProperty('ArticleEstimated', 'Integer', iptr);
    RegisterProperty('ArticleFirst', 'Integer', iptr);
    RegisterProperty('ArticleLast', 'Integer', iptr);
    RegisterProperty('ArticleNumber', 'Integer', iptr);
    RegisterProperty('ArticleID', 'AnsiString', iptr);
    RegisterProperty('ServerDate', 'TDateTime', iptr);
    RegisterProperty('UserName', 'String', iptrw);
    RegisterProperty('PassWord', 'String', iptrw);
    RegisterProperty('Port', 'String', iptrw);
    RegisterProperty('LineLimit', 'Integer', iptrw);
    RegisterProperty('GroupName', 'AnsiString', iptr);
    RegisterProperty('OnSessionConnected', 'TSessionConnected', iptrw);
    RegisterProperty('OnSessionClosed', 'TSessionClosed', iptrw);
    RegisterProperty('OnDataAvailable', 'TDataAvailable', iptrw);
    RegisterProperty('OnRequestDone', 'TRequestDone', iptrw);
    RegisterProperty('OnDisplay', 'TNntpDisplay', iptrw);
    RegisterProperty('OnMessageBegin', 'TNotifyEvent', iptrw);
    RegisterProperty('OnMessageEnd', 'TNotifyEvent', iptrw);
    RegisterProperty('OnMessageLine', 'TNotifyEvent', iptrw);
    RegisterProperty('OnXHdrBegin', 'TNotifyEvent', iptrw);
    RegisterProperty('OnXHdrEnd', 'TNotifyEvent', iptrw);
    RegisterProperty('OnXHdrLine', 'TNotifyEvent', iptrw);
    RegisterProperty('OnStateChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnSendData', 'TNotifyEvent', iptrw);
    RegisterProperty('OnRcvdData', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_OverbyteIcsNntpCli(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('NntpCliVersion','LongInt').SetInt( 801);
 CL.AddConstantN('CopyRight','String').SetString( ' TNntpCli (c) 1997-2013 F. Piette V8.01 ');
 CL.AddConstantN('NNTP_SND_BUF_SIZE','LongInt').SetInt( 255);
 CL.AddConstantN('NNTP_SND_BUF_SIZE','LongInt').SetInt( 4096);
  CL.AddTypeS('TNntpContentType', '( nntpHtml, nntpPlainText )');
  CL.AddTypeS('TNntpMimeState', '( nntpMimeHeader, nntpMimeIntro, nntpMimePlain'
   +'Text, nntpMimeHtmlText, nntpMimeImages, nntpMimeDone )');
  CL.AddTypeS('TNntpShareMode', '( nntpShareCompat, nntpShareExclusive, nntpSha'
   +'reDenyWrite, nntpShareDenyRead, nntpShareDenyNone )');
  CL.AddTypeS('TNntpDisplay', 'Procedure ( Sender : TObject; MsgBuf : Pointer; '
   +'MsgLen : Integer)');
  CL.AddTypeS('TNntpState', '( nntpNotConnected, nntpDnsLookup, nntpWaitingBann'
   +'er, nntpReady, nntpWaitingResponse )');
  CL.AddTypeS('TNntpRequest', '( nntpGroup, nntpList, nntpConnect, nntpPost, nn'
   +'tpHelp, nntpNewGroups, nntpNewNews, nntpArticleByNumber, nntpArticleByID, '
   +'nntpBodyByID, nntpBodyByNumber, nntpHeadByID, nntpHeadByNumber, nntpStatBy'
   +'ID, nntpStatByNumber, nntpNext, nntpLast, nntpQuit, nntpAbort, nntpXOver, '
   +'nntpListOverViewFmt, nntpDate, nntpAuthenticate, nntpModeReader, nntpXHdr,'
   +' nntpListNewsgroups, nntpXPAT, nntpListMotd )');
  CL.AddTypeS('TRequestDone', 'Procedure ( Sender : TObject; RqType : TNntpRequ'
   +'est; ErrCode : Word)');
  CL.AddClassN(CL.FindClass('TOBJECT'),'NntpException');
  SIRegister_TNntpCli(CL);
  SIRegister_THtmlNntpCli(CL);
  SIRegister_TSslNntpCli(CL);
 CL.AddDelphiFunction('Procedure ParseListLine( const Line : AnsiString; var NewsGroupName : AnsiString; var LastArticle : Integer; var FirstArticle : Integer; var PostingFlag : AnsiChar)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSslNntpCliSslContext_W(Self: TSslNntpCli; const T: TSslContext);
begin Self.SslContext := T; end;

(*----------------------------------------------------------------------------*)
procedure TSslNntpCliSslContext_R(Self: TSslNntpCli; var T: TSslContext);
begin T := Self.SslContext; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliShareMode_W(Self: THtmlNntpCli; const T: TNntpShareMode);
begin Self.ShareMode := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliShareMode_R(Self: THtmlNntpCli; var T: TNntpShareMode);
begin T := Self.ShareMode; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliCharSet_W(Self: THtmlNntpCli; const T: String);
begin Self.CharSet := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliCharSet_R(Self: THtmlNntpCli; var T: String);
begin T := Self.CharSet; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHdrFrom_W(Self: THtmlNntpCli; const T: String);
begin Self.HdrFrom := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHdrFrom_R(Self: THtmlNntpCli; var T: String);
begin T := Self.HdrFrom; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHdrGroup_W(Self: THtmlNntpCli; const T: String);
begin Self.HdrGroup := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHdrGroup_R(Self: THtmlNntpCli; var T: String);
begin T := Self.HdrGroup; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHdrSubject_W(Self: THtmlNntpCli; const T: String);
begin Self.HdrSubject := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHdrSubject_R(Self: THtmlNntpCli; var T: String);
begin T := Self.HdrSubject; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliContentType_W(Self: THtmlNntpCli; const T: TNntpContentType);
begin Self.ContentType := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliContentType_R(Self: THtmlNntpCli; var T: TNntpContentType);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliAttachedFiles_W(Self: THtmlNntpCli; const T: TStrings);
begin Self.AttachedFiles := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliAttachedFiles_R(Self: THtmlNntpCli; var T: TStrings);
begin T := Self.AttachedFiles; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHtmlText_W(Self: THtmlNntpCli; const T: TStrings);
begin Self.HtmlText := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliHtmlText_R(Self: THtmlNntpCli; var T: TStrings);
begin T := Self.HtmlText; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliPlainText_W(Self: THtmlNntpCli; const T: TStrings);
begin Self.PlainText := T; end;

(*----------------------------------------------------------------------------*)
procedure THtmlNntpCliPlainText_R(Self: THtmlNntpCli; var T: TStrings);
begin T := Self.PlainText; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnRcvdData_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnRcvdData := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnRcvdData_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnRcvdData; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnSendData_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnSendData := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnSendData_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnSendData; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnStateChange_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnStateChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnStateChange_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnStateChange; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnXHdrLine_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnXHdrLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnXHdrLine_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnXHdrLine; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnXHdrEnd_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnXHdrEnd := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnXHdrEnd_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnXHdrEnd; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnXHdrBegin_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnXHdrBegin := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnXHdrBegin_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnXHdrBegin; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnMessageLine_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnMessageLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnMessageLine_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnMessageLine; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnMessageEnd_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnMessageEnd := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnMessageEnd_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnMessageEnd; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnMessageBegin_W(Self: TNntpCli; const T: TNotifyEvent);
begin Self.OnMessageBegin := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnMessageBegin_R(Self: TNntpCli; var T: TNotifyEvent);
begin T := Self.OnMessageBegin; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnDisplay_W(Self: TNntpCli; const T: TNntpDisplay);
begin Self.OnDisplay := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnDisplay_R(Self: TNntpCli; var T: TNntpDisplay);
begin T := Self.OnDisplay; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnRequestDone_W(Self: TNntpCli; const T: TRequestDone);
begin Self.OnRequestDone := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnRequestDone_R(Self: TNntpCli; var T: TRequestDone);
begin T := Self.OnRequestDone; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnDataAvailable_W(Self: TNntpCli; const T: TDataAvailable);
begin Self.OnDataAvailable := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnDataAvailable_R(Self: TNntpCli; var T: TDataAvailable);
begin T := Self.OnDataAvailable; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnSessionClosed_W(Self: TNntpCli; const T: TSessionClosed);
begin Self.OnSessionClosed := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnSessionClosed_R(Self: TNntpCli; var T: TSessionClosed);
begin T := Self.OnSessionClosed; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnSessionConnected_W(Self: TNntpCli; const T: TSessionConnected);
begin Self.OnSessionConnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliOnSessionConnected_R(Self: TNntpCli; var T: TSessionConnected);
begin T := Self.OnSessionConnected; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliGroupName_R(Self: TNntpCli; var T: AnsiString);
begin T := Self.GroupName; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliLineLimit_W(Self: TNntpCli; const T: Integer);
begin Self.LineLimit := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliLineLimit_R(Self: TNntpCli; var T: Integer);
begin T := Self.LineLimit; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliPort_W(Self: TNntpCli; const T: String);
begin Self.Port := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliPort_R(Self: TNntpCli; var T: String);
begin T := Self.Port; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliPassWord_W(Self: TNntpCli; const T: String);
begin Self.PassWord := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliPassWord_R(Self: TNntpCli; var T: String);
begin T := Self.PassWord; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliUserName_W(Self: TNntpCli; const T: String);
begin Self.UserName := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliUserName_R(Self: TNntpCli; var T: String);
begin T := Self.UserName; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliServerDate_R(Self: TNntpCli; var T: TDateTime);
begin T := Self.ServerDate; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliArticleID_R(Self: TNntpCli; var T: AnsiString);
begin T := Self.ArticleID; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliArticleNumber_R(Self: TNntpCli; var T: Integer);
begin T := Self.ArticleNumber; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliArticleLast_R(Self: TNntpCli; var T: Integer);
begin T := Self.ArticleLast; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliArticleFirst_R(Self: TNntpCli; var T: Integer);
begin T := Self.ArticleFirst; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliArticleEstimated_R(Self: TNntpCli; var T: Integer);
begin T := Self.ArticleEstimated; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliPostingPermited_R(Self: TNntpCli; var T: Boolean);
begin T := Self.PostingPermited; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliStatusCode_R(Self: TNntpCli; var T: Integer);
begin T := Self.StatusCode; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliLastResponse_R(Self: TNntpCli; var T: AnsiString);
begin T := Self.LastResponse; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliErrorMessage_R(Self: TNntpCli; var T: String);
begin T := Self.ErrorMessage; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliHost_W(Self: TNntpCli; const T: String);
begin Self.Host := T; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliHost_R(Self: TNntpCli; var T: String);
begin T := Self.Host; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliState_R(Self: TNntpCli; var T: TNntpState);
begin T := Self.State; end;

(*----------------------------------------------------------------------------*)
procedure TNntpCliCtrlSocket_R(Self: TNntpCli; var T: TWSocket);
begin T := Self.CtrlSocket; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_OverbyteIcsNntpCli_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ParseListLine, 'ParseListLine', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSslNntpCli(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSslNntpCli) do
  begin
    RegisterPropertyHelper(@TSslNntpCliSslContext_R,@TSslNntpCliSslContext_W,'SslContext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THtmlNntpCli(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THtmlNntpCli) do
  begin
    RegisterPropertyHelper(@THtmlNntpCliPlainText_R,@THtmlNntpCliPlainText_W,'PlainText');
    RegisterPropertyHelper(@THtmlNntpCliHtmlText_R,@THtmlNntpCliHtmlText_W,'HtmlText');
    RegisterPropertyHelper(@THtmlNntpCliAttachedFiles_R,@THtmlNntpCliAttachedFiles_W,'AttachedFiles');
    RegisterPropertyHelper(@THtmlNntpCliContentType_R,@THtmlNntpCliContentType_W,'ContentType');
    RegisterPropertyHelper(@THtmlNntpCliHdrSubject_R,@THtmlNntpCliHdrSubject_W,'HdrSubject');
    RegisterPropertyHelper(@THtmlNntpCliHdrGroup_R,@THtmlNntpCliHdrGroup_W,'HdrGroup');
    RegisterPropertyHelper(@THtmlNntpCliHdrFrom_R,@THtmlNntpCliHdrFrom_W,'HdrFrom');
    RegisterPropertyHelper(@THtmlNntpCliCharSet_R,@THtmlNntpCliCharSet_W,'CharSet');
    RegisterPropertyHelper(@THtmlNntpCliShareMode_R,@THtmlNntpCliShareMode_W,'ShareMode');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNntpCli(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNntpCli) do
  begin
    RegisterConstructor(@TNntpCli.Create, 'Create');
    RegisterVirtualMethod(@TNntpCli.Connect, 'Connect');
    RegisterVirtualMethod(@TNntpCli.Abort, 'Abort');
    RegisterVirtualMethod(@TNntpCli.Quit, 'Quit');
    RegisterVirtualMethod(@TNntpCli.Group, 'Group');
    RegisterVirtualMethod(@TNntpCli.ArticleByNumber, 'ArticleByNumber');
    RegisterVirtualMethod(@TNntpCli.ArticleByID, 'ArticleByID');
    RegisterVirtualMethod(@TNntpCli.HeadByNumber, 'HeadByNumber');
    RegisterVirtualMethod(@TNntpCli.HeadByID, 'HeadByID');
    RegisterVirtualMethod(@TNntpCli.BodyByNumber, 'BodyByNumber');
    RegisterVirtualMethod(@TNntpCli.BodyByID, 'BodyByID');
    RegisterVirtualMethod(@TNntpCli.StatByNumber, 'StatByNumber');
    RegisterVirtualMethod(@TNntpCli.StatByID, 'StatByID');
    RegisterVirtualMethod(@TNntpCli.Next, 'Next');
    RegisterVirtualMethod(@TNntpCli.Last, 'Last');
    RegisterVirtualMethod(@TNntpCli.List, 'List');
    RegisterMethod(@TNntpCli.ListNewsgroups, 'ListNewsgroups');
    RegisterVirtualMethod(@TNntpCli.Post, 'Post');
    RegisterVirtualMethod(@TNntpCli.Help, 'Help');
    RegisterVirtualMethod(@TNntpCli.Authenticate, 'Authenticate');
    RegisterVirtualMethod(@TNntpCli.XOver, 'XOver');
    RegisterVirtualMethod(@TNntpCli.ListOverViewFmt, 'ListOverViewFmt');
    RegisterVirtualMethod(@TNntpCli.ListMotd, 'ListMotd');
    RegisterVirtualMethod(@TNntpCli.Date, 'Date');
    RegisterVirtualMethod(@TNntpCli.ModeReader, 'ModeReader');
    RegisterVirtualMethod(@TNntpCli.XHdr, 'XHdr');
    RegisterVirtualMethod(@TNntpCli.XPat, 'XPat');
    RegisterVirtualMethod(@TNntpCli.NewGroups, 'NewGroups');
    RegisterVirtualMethod(@TNntpCli.NewNews, 'NewNews');
    RegisterPropertyHelper(@TNntpCliCtrlSocket_R,nil,'CtrlSocket');
    RegisterPropertyHelper(@TNntpCliState_R,nil,'State');
    RegisterPropertyHelper(@TNntpCliHost_R,@TNntpCliHost_W,'Host');
    RegisterPropertyHelper(@TNntpCliErrorMessage_R,nil,'ErrorMessage');
    RegisterPropertyHelper(@TNntpCliLastResponse_R,nil,'LastResponse');
    RegisterPropertyHelper(@TNntpCliStatusCode_R,nil,'StatusCode');
    RegisterPropertyHelper(@TNntpCliPostingPermited_R,nil,'PostingPermited');
    RegisterPropertyHelper(@TNntpCliArticleEstimated_R,nil,'ArticleEstimated');
    RegisterPropertyHelper(@TNntpCliArticleFirst_R,nil,'ArticleFirst');
    RegisterPropertyHelper(@TNntpCliArticleLast_R,nil,'ArticleLast');
    RegisterPropertyHelper(@TNntpCliArticleNumber_R,nil,'ArticleNumber');
    RegisterPropertyHelper(@TNntpCliArticleID_R,nil,'ArticleID');
    RegisterPropertyHelper(@TNntpCliServerDate_R,nil,'ServerDate');
    RegisterPropertyHelper(@TNntpCliUserName_R,@TNntpCliUserName_W,'UserName');
    RegisterPropertyHelper(@TNntpCliPassWord_R,@TNntpCliPassWord_W,'PassWord');
    RegisterPropertyHelper(@TNntpCliPort_R,@TNntpCliPort_W,'Port');
    RegisterPropertyHelper(@TNntpCliLineLimit_R,@TNntpCliLineLimit_W,'LineLimit');
    RegisterPropertyHelper(@TNntpCliGroupName_R,nil,'GroupName');
    RegisterPropertyHelper(@TNntpCliOnSessionConnected_R,@TNntpCliOnSessionConnected_W,'OnSessionConnected');
    RegisterPropertyHelper(@TNntpCliOnSessionClosed_R,@TNntpCliOnSessionClosed_W,'OnSessionClosed');
    RegisterPropertyHelper(@TNntpCliOnDataAvailable_R,@TNntpCliOnDataAvailable_W,'OnDataAvailable');
    RegisterPropertyHelper(@TNntpCliOnRequestDone_R,@TNntpCliOnRequestDone_W,'OnRequestDone');
    RegisterPropertyHelper(@TNntpCliOnDisplay_R,@TNntpCliOnDisplay_W,'OnDisplay');
    RegisterPropertyHelper(@TNntpCliOnMessageBegin_R,@TNntpCliOnMessageBegin_W,'OnMessageBegin');
    RegisterPropertyHelper(@TNntpCliOnMessageEnd_R,@TNntpCliOnMessageEnd_W,'OnMessageEnd');
    RegisterPropertyHelper(@TNntpCliOnMessageLine_R,@TNntpCliOnMessageLine_W,'OnMessageLine');
    RegisterPropertyHelper(@TNntpCliOnXHdrBegin_R,@TNntpCliOnXHdrBegin_W,'OnXHdrBegin');
    RegisterPropertyHelper(@TNntpCliOnXHdrEnd_R,@TNntpCliOnXHdrEnd_W,'OnXHdrEnd');
    RegisterPropertyHelper(@TNntpCliOnXHdrLine_R,@TNntpCliOnXHdrLine_W,'OnXHdrLine');
    RegisterPropertyHelper(@TNntpCliOnStateChange_R,@TNntpCliOnStateChange_W,'OnStateChange');
    RegisterPropertyHelper(@TNntpCliOnSendData_R,@TNntpCliOnSendData_W,'OnSendData');
    RegisterPropertyHelper(@TNntpCliOnRcvdData_R,@TNntpCliOnRcvdData_W,'OnRcvdData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_OverbyteIcsNntpCli(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(NntpException) do
  RIRegister_TNntpCli(CL);
  RIRegister_THtmlNntpCli(CL);
  RIRegister_TSslNntpCli(CL);
end;

 
 
{ TPSImport_OverbyteIcsNntpCli }
(*----------------------------------------------------------------------------*)
procedure TPSImport_OverbyteIcsNntpCli.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_OverbyteIcsNntpCli(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_OverbyteIcsNntpCli.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_OverbyteIcsNntpCli(ri);
  RIRegister_OverbyteIcsNntpCli_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
