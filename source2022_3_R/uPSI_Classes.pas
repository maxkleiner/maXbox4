unit uPSI_Classes;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Classes = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TStreamReader(CL: TPSPascalCompiler);
procedure SIRegister_TStreamWriter(CL: TPSPascalCompiler);
procedure SIRegister_TStringWriter(CL: TPSPascalCompiler);
procedure SIRegister_TStringReader(CL: TPSPascalCompiler);
procedure SIRegister_TTextWriter(CL: TPSPascalCompiler);
procedure SIRegister_TTextReader(CL: TPSPascalCompiler);
procedure SIRegister_TDataModule(CL: TPSPascalCompiler);
procedure SIRegister_TBasicAction(CL: TPSPascalCompiler);
procedure SIRegister_TBasicActionLink(CL: TPSPascalCompiler);
procedure SIRegister_IDesignerNotify(CL: TPSPascalCompiler);
procedure SIRegister_TComponentEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_TWriter(CL: TPSPascalCompiler);
procedure SIRegister_TReader(CL: TPSPascalCompiler);
procedure SIRegister_IVarStreamable(CL: TPSPascalCompiler);
procedure SIRegister_TFiler(CL: TPSPascalCompiler);
procedure SIRegister_IInterfaceComponentReference(CL: TPSPascalCompiler);
procedure SIRegister_TClassFinder(CL: TPSPascalCompiler);
procedure SIRegister_TStreamAdapter(CL: TPSPascalCompiler);
procedure SIRegister_TResourceStream(CL: TPSPascalCompiler);
procedure SIRegister_TBytesStream(CL: TPSPascalCompiler);
procedure SIRegister_TMemoryStream(CL: TPSPascalCompiler);
procedure SIRegister_TCustomMemoryStream(CL: TPSPascalCompiler);
procedure SIRegister_TFileStream(CL: TPSPascalCompiler);
procedure SIRegister_THandleStream(CL: TPSPascalCompiler);
procedure SIRegister_IStreamPersist(CL: TPSPascalCompiler);
procedure SIRegister_TStream(CL: TPSPascalCompiler);
procedure SIRegister_TStringList(CL: TPSPascalCompiler);
procedure SIRegister_TStrings(CL: TPSPascalCompiler);
procedure SIRegister_TStringsEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_IStringsAdapter(CL: TPSPascalCompiler);
procedure SIRegister_TOwnedCollection(CL: TPSPascalCompiler);
procedure SIRegister_TCollection(CL: TPSPascalCompiler);
procedure SIRegister_TCollectionEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_TCollectionItem(CL: TPSPascalCompiler);
procedure SIRegister_TRecall(CL: TPSPascalCompiler);
procedure SIRegister_TInterfacedPersistent(CL: TPSPascalCompiler);
procedure SIRegister_TPersistent(CL: TPSPascalCompiler);
procedure SIRegister_TBits(CL: TPSPascalCompiler);
procedure SIRegister_TInterfaceList(CL: TPSPascalCompiler);
procedure SIRegister_TInterfaceListEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_IInterfaceListEx(CL: TPSPascalCompiler);
procedure SIRegister_IInterfaceList(CL: TPSPascalCompiler);
procedure SIRegister_TThreadList(CL: TPSPascalCompiler);
procedure SIRegister_TList(CL: TPSPascalCompiler);
procedure SIRegister_TListEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_EFileStreamError(CL: TPSPascalCompiler);
procedure SIRegister_Classes(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TStreamReader(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStreamWriter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringWriter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringReader(CL: TPSRuntimeClassImporter);
procedure RIRegister_TTextWriter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TTextReader(CL: TPSRuntimeClassImporter);
procedure RIRegister_Classes_Routines(S: TPSExec);
procedure RIRegister_TDataModule(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBasicAction(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBasicActionLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TComponentEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWriter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TReader(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFiler(CL: TPSRuntimeClassImporter);
procedure RIRegister_TClassFinder(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStreamAdapter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TResourceStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBytesStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMemoryStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomMemoryStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFileStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_THandleStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStrings(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringsEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TOwnedCollection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCollection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCollectionEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCollectionItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRecall(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInterfacedPersistent(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPersistent(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBits(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInterfaceList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInterfaceListEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TThreadList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TListEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_EFileStreamError(CL: TPSRuntimeClassImporter);
procedure RIRegister_Classes(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Variants
  ,TypInfo
  ,ActiveX
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Classes]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TStreamReader(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TTextReader', 'TStreamReader') do
  with CL.AddClassN(CL.FindClass('TTextReader'),'TStreamReader') do
  begin
    RegisterMethod('Constructor Create( Stream : TStream);');
    RegisterMethod('Constructor Create( Stream : TStream; DetectBOM : Boolean);');
    RegisterMethod('Constructor Create( Stream : TStream; Encoding : TEncoding; DetectBOM : Boolean; BufferSize : Integer);');
    RegisterMethod('Constructor Create( Filename : string);');
    RegisterMethod('Constructor Create( Filename : string; DetectBOM : Boolean);');
    RegisterMethod('Constructor Create( Filename : string; Encoding : TEncoding; DetectBOM : Boolean; BufferSize : Integer);');
    RegisterMethod('Procedure DiscardBufferedData');
    RegisterProperty('BaseStream', 'TStream', iptr);
    RegisterProperty('CurrentEncoding', 'TEncoding', iptr);
    RegisterProperty('EndOfStream', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStreamWriter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TTextWriter', 'TStreamWriter') do
  with CL.AddClassN(CL.FindClass('TTextWriter'),'TStreamWriter') do
  begin
    RegisterMethod('Constructor Create( Stream : TStream);');
    RegisterMethod('Constructor Create( Stream : TStream; Encoding : TEncoding; BufferSize : Integer);');
    RegisterMethod('Constructor Create( Filename : string; Append : Boolean);');
    RegisterMethod('Constructor Create( Filename : string; Append : Boolean; Encoding : TEncoding; BufferSize : Integer);');
    RegisterProperty('AutoFlush', 'Boolean', iptrw);
    RegisterProperty('NewLine', 'string', iptrw);
    RegisterProperty('Encoding', 'TEncoding', iptr);
    RegisterProperty('BaseStream', 'TStream', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringWriter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TTextWriter', 'TStringWriter') do
  with CL.AddClassN(CL.FindClass('TTextWriter'),'TStringWriter') do
  begin
    RegisterMethod('Constructor Create;');
    RegisterMethod('Constructor Create( Builder : TStringBuilder);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringReader(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TTextReader', 'TStringReader') do
  with CL.AddClassN(CL.FindClass('TTextReader'),'TStringReader') do
  begin
    RegisterMethod('Constructor Create( S : string)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TTextWriter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TTextWriter') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TTextWriter') do
  begin
    RegisterMethod('Procedure Close');
    RegisterMethod('Procedure Flush');
    RegisterMethod('Procedure Write( Value : Boolean);');
    RegisterMethod('Procedure Write( Value : Char);');
    RegisterMethod('Procedure Write( const Value : TCharArray);');
    RegisterMethod('Procedure Write( Value : Double);');
    RegisterMethod('Procedure Write( Value : Integer);');
    RegisterMethod('Procedure Write( Value : Int64);');
    RegisterMethod('Procedure Write( Value : TObject);');
    RegisterMethod('Procedure Write( Value : Single);');
    RegisterMethod('Procedure Write( const Value : string);');
    RegisterMethod('Procedure Write( Value : Cardinal);');
    RegisterMethod('Procedure Write( Value : UInt64);');
    RegisterMethod('Procedure Write( const Format : string; Args : array of const);');
    RegisterMethod('Procedure Write( Value : TCharArray; Index, Count : Integer);');
    RegisterMethod('Procedure WriteLine;');
    RegisterMethod('Procedure WriteLine( Value : Boolean);');
    RegisterMethod('Procedure WriteLine( Value : Char);');
    RegisterMethod('Procedure WriteLine( const Value : TCharArray);');
    RegisterMethod('Procedure WriteLine( Value : Double);');
    RegisterMethod('Procedure WriteLine( Value : Integer);');
    RegisterMethod('Procedure WriteLine( Value : Int64);');
    RegisterMethod('Procedure WriteLine( Value : TObject);');
    RegisterMethod('Procedure WriteLine( Value : Single);');
    RegisterMethod('Procedure WriteLine( const Value : string);');
    RegisterMethod('Procedure WriteLine( Value : Cardinal);');
    RegisterMethod('Procedure WriteLine( Value : UInt64);');
    RegisterMethod('Procedure WriteLine( const Format : string; Args : array of const);');
    RegisterMethod('Procedure WriteLine( Value : TCharArray; Index, Count : Integer);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TTextReader(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TTextReader') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TTextReader') do
  begin
    RegisterMethod('Procedure Close');
    RegisterMethod('Function Peek : Integer');
    RegisterMethod('Function Read : Integer;');
    RegisterMethod('Function Read( const Buffer : TCharArray; Index, Count : Integer) : Integer;');
    RegisterMethod('Function ReadBlock( const Buffer : TCharArray; Index, Count : Integer) : Integer');
    RegisterMethod('Function ReadLine : string');
    RegisterMethod('Function ReadToEnd : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDataModule(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TDataModule') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TDataModule') do
  begin
    RegisterMethod('Constructor CreateNew( AOwner : TComponent; Dummy : Integer)');
    RegisterProperty('DesignOffset', 'TPoint', iptrw);
    RegisterProperty('DesignSize', 'TPoint', iptrw);
    RegisterProperty('OldCreateOrder', 'Boolean', iptrw);
    RegisterProperty('OnCreate', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDestroy', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBasicAction(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TBasicAction') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TBasicAction') do
  begin
    RegisterMethod('Function HandlesTarget( Target : TObject) : Boolean');
    RegisterMethod('Procedure UpdateTarget( Target : TObject)');
    RegisterMethod('Procedure ExecuteTarget( Target : TObject)');
    RegisterMethod('Function Execute : Boolean');
    RegisterMethod('Procedure RegisterChanges( Value : TBasicActionLink)');
    RegisterMethod('Procedure UnRegisterChanges( Value : TBasicActionLink)');
    RegisterMethod('Function Update : Boolean');
    RegisterProperty('ActionComponent', 'TComponent', iptrw);
    RegisterProperty('OnExecute', 'TNotifyEvent', iptrw);
    RegisterProperty('OnUpdate', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBasicActionLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TBasicActionLink') do
  with CL.AddClassN(CL.FindClass('TObject'),'TBasicActionLink') do
  begin
    RegisterMethod('Constructor Create( AClient : TObject)');
    RegisterMethod('Function Execute( AComponent : TComponent) : Boolean');
    RegisterMethod('Function Update : Boolean');
    RegisterProperty('Action', 'TBasicAction', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IDesignerNotify(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IDesignerNotify') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IDesignerNotify, 'IDesignerNotify') do
  begin
    RegisterMethod('Procedure Modified', cdRegister);
    RegisterMethod('Procedure Notification( AnObject : TPersistent; Operation : TOperation)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TComponentEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TComponentEnumerator') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TComponentEnumerator') do
  begin
    RegisterMethod('Constructor Create( AComponent : TComponent)');
    RegisterMethod('Function GetCurrent : TComponent');
    RegisterMethod('Function MoveNext : Boolean');
    RegisterProperty('Current', 'TComponent', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWriter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFiler', 'TWriter') do
  with CL.AddClassN(CL.FindClass('TFiler'),'TWriter') do
  begin
    RegisterMethod('Procedure Write( const Buf, Count : Longint)');
    RegisterMethod('Procedure WriteBoolean( Value : Boolean)');
    RegisterMethod('Procedure WriteCollection( Value : TCollection)');
    RegisterMethod('Procedure WriteComponent( Component : TComponent)');
    RegisterMethod('Procedure WriteChar( Value : Char)');
    RegisterMethod('Procedure WriteWideChar( Value : WideChar)');
    RegisterMethod('Procedure WriteDescendent( Root : TComponent; AAncestor : TComponent)');
    RegisterMethod('Procedure WriteFloat( const Value : Extended)');
    RegisterMethod('Procedure WriteSingle( const Value : Single)');
    RegisterMethod('Procedure WriteDouble( const Value : Double)');
    RegisterMethod('Procedure WriteCurrency( const Value : Currency)');
    RegisterMethod('Procedure WriteDate( const Value : TDateTime)');
    RegisterMethod('Procedure WriteIdent( const Ident : string)');
    RegisterMethod('Procedure WriteInteger( Value : Longint);');
    RegisterMethod('Procedure WriteInteger( Value : Int64);');
    RegisterMethod('Procedure WriteListBegin');
    RegisterMethod('Procedure WriteListEnd');
    RegisterMethod('Procedure WriteRootComponent( Root : TComponent)');
    RegisterMethod('Procedure WriteSignature');
    RegisterMethod('Procedure WriteStr( const Value : AnsiString)');
    RegisterMethod('Procedure WriteUTF8Str( const Value : string)');
    RegisterMethod('Procedure WriteString( const Value : UnicodeString)');
    RegisterMethod('Procedure WriteWideString( const Value : UnicodeString)');
    RegisterMethod('Procedure WriteVariant( const Value : Variant)');
    RegisterProperty('Position', 'Longint', iptrw);
    RegisterProperty('RootAncestor', 'TComponent', iptrw);
    RegisterProperty('OnFindAncestor', 'TFindAncestorEvent', iptrw);
    RegisterProperty('OnFindMethodName', 'TFindMethodNameEvent', iptrw);
    RegisterProperty('UseQualifiedNames', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TReader(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFiler', 'TReader') do
  with CL.AddClassN(CL.FindClass('TFiler'),'TReader') do
  begin
    RegisterMethod('Procedure BeginReferences');
    RegisterMethod('Procedure CheckValue( Value : TValueType)');
    RegisterMethod('Function EndOfList : Boolean');
    RegisterMethod('Procedure EndReferences');
    RegisterMethod('Procedure FixupReferences');
    RegisterMethod('Function NextValue : TValueType');
    RegisterMethod('Procedure Read( var Buf, Count : Longint)');
    RegisterMethod('Function ReadBoolean : Boolean');
    RegisterMethod('Function ReadChar : Char');
    RegisterMethod('Function ReadWideChar : WideChar');
    RegisterMethod('Procedure ReadCollection( Collection : TCollection)');
    RegisterMethod('Function ReadComponent( Component : TComponent) : TComponent');
    RegisterMethod('Procedure ReadComponents( AOwner, AParent : TComponent; Proc : TReadComponentsProc)');
    RegisterMethod('Function ReadFloat : Extended');
    RegisterMethod('Function ReadSingle : Single');
    RegisterMethod('Function ReadDouble : Double');
    RegisterMethod('Function ReadCurrency : Currency');
    RegisterMethod('Function ReadDate : TDateTime');
    RegisterMethod('Function ReadIdent : string');
    RegisterMethod('Function ReadInteger : Longint');
    RegisterMethod('Function ReadInt64 : Int64');
    RegisterMethod('Procedure ReadListBegin');
    RegisterMethod('Procedure ReadListEnd');
    RegisterMethod('Procedure ReadPrefix( var Flags : TFilerFlags; var AChildPos : Integer)');
    RegisterMethod('Function ReadRootComponent( Root : TComponent) : TComponent');
    RegisterMethod('Procedure ReadSignature');
    RegisterMethod('Function ReadStr : string');
    RegisterMethod('Function ReadString : string');
    RegisterMethod('Function ReadWideString : WideString');
    RegisterMethod('Function ReadValue : TValueType');
    RegisterMethod('Function ReadVariant : Variant');
    RegisterMethod('Procedure CopyValue( Writer : TWriter)');
    RegisterMethod('Procedure SkipValue');
    RegisterProperty('Owner', 'TComponent', iptrw);
    RegisterProperty('Parent', 'TComponent', iptrw);
    RegisterProperty('Position', 'Longint', iptrw);
    RegisterProperty('OnError', 'TReaderError', iptrw);
    RegisterProperty('OnFindMethod', 'TFindMethodEvent', iptrw);
    RegisterProperty('OnFindMethodInstance', 'TFindMethodInstanceEvent', iptrw);
    RegisterProperty('OnSetName', 'TSetNameEvent', iptrw);
    RegisterProperty('OnReferenceName', 'TReferenceNameEvent', iptrw);
    RegisterProperty('OnAncestorNotFound', 'TAncestorNotFoundEvent', iptrw);
    RegisterProperty('OnCreateComponent', 'TCreateComponentEvent', iptrw);
    RegisterProperty('OnFindComponentClass', 'TFindComponentClassEvent', iptrw);
    RegisterProperty('OnFindComponentInstance', 'TFindComponentInstanceEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IVarStreamable(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IVarStreamable') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IVarStreamable, 'IVarStreamable') do
  begin
    RegisterMethod('Procedure StreamIn( var Dest : TVarData; const Stream : TStream)', cdRegister);
    RegisterMethod('Procedure StreamOut( const Source : TVarData; const Stream : TStream)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFiler(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TFiler') do
  with CL.AddClassN(CL.FindClass('TObject'),'TFiler') do
  begin
    RegisterMethod('Constructor Create( Stream : TStream; BufSize : Integer)');
    RegisterMethod('Procedure DefineProperty( const Name : string; ReadData : TReaderProc; WriteData : TWriterProc; HasData : Boolean)');
    RegisterMethod('Procedure DefineBinaryProperty( const Name : string; ReadData, WriteData : TStreamProc; HasData : Boolean)');
    RegisterMethod('Procedure FlushBuffer');
    RegisterProperty('Root', 'TComponent', iptrw);
    RegisterProperty('LookupRoot', 'TComponent', iptr);
    RegisterProperty('Ancestor', 'TPersistent', iptrw);
    RegisterProperty('IgnoreChildren', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IInterfaceComponentReference(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IInterfaceComponentReference') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IInterfaceComponentReference, 'IInterfaceComponentReference') do
  begin
    RegisterMethod('Function GetComponent : TComponent', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TClassFinder(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TClassFinder') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TClassFinder') do
  begin
    RegisterMethod('Constructor Create( AClass : TPersistentClass; AIncludeActiveGroups : Boolean)');
    RegisterMethod('Function GetClass( const AClassName : string) : TPersistentClass');
    RegisterMethod('Procedure GetClasses( Proc : TGetClass)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStreamAdapter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInterfacedObject', 'TStreamAdapter') do
  with CL.AddClassN(CL.FindClass('TInterfacedObject'),'TStreamAdapter') do
  begin
    RegisterMethod('Constructor Create( Stream : TStream; Ownership : TStreamOwnership)');
    RegisterMethod('Function Read( pv : Pointer; cb : Longint; pcbRead : PLongint) : HResult');
    RegisterMethod('Function Write( pv : Pointer; cb : Longint; pcbWritten : PLongint) : HResult');
    RegisterMethod('Function Seek( dlibMove : Largeint; dwOrigin : Longint; out libNewPosition : Largeint) : HResult');
    RegisterMethod('Function SetSize( libNewSize : Largeint) : HResult');
    RegisterMethod('Function CopyTo( stm : IStream; cb : Largeint; out cbRead : Largeint; out cbWritten : Largeint) : HResult');
    RegisterMethod('Function Commit( grfCommitFlags : Longint) : HResult');
    RegisterMethod('Function Revert : HResult');
    RegisterMethod('Function LockRegion( libOffset : Largeint; cb : Largeint; dwLockType : Longint) : HResult');
    RegisterMethod('Function UnlockRegion( libOffset : Largeint; cb : Largeint; dwLockType : Longint) : HResult');
    RegisterMethod('Function Stat( out statstg : TStatStg; grfStatFlag : Longint) : HResult');
    RegisterMethod('Function Clone( out stm : IStream) : HResult');
    RegisterProperty('Stream', 'TStream', iptr);
    RegisterProperty('StreamOwnership', 'TStreamOwnership', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TResourceStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMemoryStream', 'TResourceStream') do
  with CL.AddClassN(CL.FindClass('TCustomMemoryStream'),'TResourceStream') do
  begin
    RegisterMethod('Constructor Create( Instance : THandle; const ResName : string; ResType : PChar)');
    RegisterMethod('Constructor CreateFromID( Instance : THandle; ResID : Integer; ResType : PChar)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBytesStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMemoryStream', 'TBytesStream') do
  with CL.AddClassN(CL.FindClass('TMemoryStream'),'TBytesStream') do
  begin
    RegisterMethod('Constructor Create( const ABytes : TBytes);');
    RegisterProperty('Bytes', 'TBytes', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMemoryStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMemoryStream', 'TMemoryStream') do
  with CL.AddClassN(CL.FindClass('TCustomMemoryStream'),'TMemoryStream') do
  begin
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream)');
    RegisterMethod('Procedure LoadFromFile( const FileName : string)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomMemoryStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStream', 'TCustomMemoryStream') do
  with CL.AddClassN(CL.FindClass('TStream'),'TCustomMemoryStream') do
  begin
    RegisterMethod('Procedure SaveToStream( Stream : TStream)');
    RegisterMethod('Procedure SaveToFile( const FileName : string)');
    RegisterProperty('Memory', 'Pointer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFileStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'THandleStream', 'TFileStream') do
  with CL.AddClassN(CL.FindClass('THandleStream'),'TFileStream') do
  begin
    RegisterMethod('Constructor Create( const AFileName : string; Mode : Word);');
    RegisterMethod('Constructor Create( const AFileName : string; Mode : Word; Rights : Cardinal);');
    RegisterProperty('FileName', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THandleStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStream', 'THandleStream') do
  with CL.AddClassN(CL.FindClass('TStream'),'THandleStream') do
  begin
    RegisterMethod('Constructor Create( AHandle : Integer)');
    RegisterProperty('Handle', 'THandle', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IStreamPersist(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IStreamPersist') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IStreamPersist, 'IStreamPersist') do
  begin
    RegisterMethod('Procedure LoadFromStream( Stream : TStream)', cdRegister);
    RegisterMethod('Procedure SaveToStream( Stream : TStream)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TStream') do
  with CL.AddClassN(CL.FindClass('TObject'),'TStream') do
  begin
    RegisterMethod('Function Read( var Buffer, Count : Longint) : Longint');
    RegisterMethod('Function Write( const Buffer, Count : Longint) : Longint');
    RegisterMethod('Function Seek( Offset : Longint; Origin : Word) : Longint;');
    RegisterMethod('Function Seek( const Offset : Int64; Origin : TSeekOrigin) : Int64;');
    RegisterMethod('Procedure ReadBuffer( var Buffer, Count : Longint)');
    RegisterMethod('Procedure WriteBuffer( const Buffer, Count : Longint)');
    RegisterMethod('Function CopyFrom( Source : TStream; Count : Int64) : Int64');
    RegisterMethod('Function ReadComponent( Instance : TComponent) : TComponent');
    RegisterMethod('Function ReadComponentRes( Instance : TComponent) : TComponent');
    RegisterMethod('Procedure WriteComponent( Instance : TComponent)');
    RegisterMethod('Procedure WriteComponentRes( const ResName : string; Instance : TComponent)');
    RegisterMethod('Procedure WriteDescendent( Instance, Ancestor : TComponent)');
    RegisterMethod('Procedure WriteDescendentRes( const ResName : string; Instance, Ancestor : TComponent)');
    RegisterMethod('Procedure WriteResourceHeader( const ResName : string; out FixupInfo : Integer)');
    RegisterMethod('Procedure FixupResourceHeader( FixupInfo : Integer)');
    RegisterMethod('Procedure ReadResHeader');
    RegisterProperty('Position', 'Int64', iptrw);
    RegisterProperty('Size', 'Int64', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStrings', 'TStringList') do
  with CL.AddClassN(CL.FindClass('TStrings'),'TStringList') do
  begin
    RegisterMethod('Constructor Create;');
    RegisterMethod('Constructor Create( OwnsObjects : Boolean);');
    RegisterMethod('Function Find( const S : string; var Index : Integer) : Boolean');
    RegisterMethod('Procedure Sort');
    RegisterMethod('Procedure CustomSort( Compare : TStringListSortCompare)');
    RegisterProperty('Duplicates', 'TDuplicates', iptrw);
    RegisterProperty('Sorted', 'Boolean', iptrw);
    RegisterProperty('CaseSensitive', 'Boolean', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnChanging', 'TNotifyEvent', iptrw);
    RegisterProperty('OwnsObjects', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStrings(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TStrings') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TStrings') do
  begin
    RegisterMethod('Function Add( const S : string) : Integer');
    RegisterMethod('Function AddObject( const S : string; AObject : TObject) : Integer');
    RegisterMethod('Procedure Append( const S : string)');
    RegisterMethod('Procedure AddStrings( Strings : TStrings)');
    RegisterMethod('Procedure BeginUpdate');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterMethod('Procedure EndUpdate');
    RegisterMethod('Function Equals( Strings : TStrings) : Boolean');
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)');
    RegisterMethod('Function GetEnumerator : TStringsEnumerator');
    RegisterMethod('Function GetText : PChar');
    RegisterMethod('Function IndexOf( const S : string) : Integer');
    RegisterMethod('Function IndexOfName( const Name : string) : Integer');
    RegisterMethod('Function IndexOfObject( AObject : TObject) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; const S : string)');
    RegisterMethod('Procedure InsertObject( Index : Integer; const S : string; AObject : TObject)');
    RegisterMethod('Procedure LoadFromFile( const FileName : string);');
    RegisterMethod('Procedure LoadFromFile( const FileName : string; Encoding : TEncoding);');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream);');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream; Encoding : TEncoding);');
    RegisterMethod('Procedure Move( CurIndex, NewIndex : Integer)');
    RegisterMethod('Procedure SaveToFile( const FileName : string);');
    RegisterMethod('Procedure SaveToFile( const FileName : string; Encoding : TEncoding);');
    RegisterMethod('Procedure SaveToStream( Stream : TStream);');
    RegisterMethod('Procedure SaveToStream( Stream : TStream; Encoding : TEncoding);');
    RegisterMethod('Procedure SetText( Text : PChar)');
    RegisterProperty('Capacity', 'Integer', iptrw);
    RegisterProperty('CommaText', 'string', iptrw);
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Delimiter', 'Char', iptrw);
    RegisterProperty('DelimitedText', 'string', iptrw);
    RegisterProperty('LineBreak', 'string', iptrw);
    RegisterProperty('Names', 'string Integer', iptr);
    RegisterProperty('Objects', 'TObject Integer', iptrw);
    RegisterProperty('QuoteChar', 'Char', iptrw);
    RegisterProperty('Values', 'string string', iptrw);
    RegisterProperty('ValueFromIndex', 'string Integer', iptrw);
    RegisterProperty('NameValueSeparator', 'Char', iptrw);
    RegisterProperty('StrictDelimiter', 'Boolean', iptrw);
    RegisterProperty('Strings', 'string Integer', iptrw);
    SetDefaultPropery('Strings');
    RegisterProperty('Text', 'string', iptrw);
    RegisterProperty('StringsAdapter', 'IStringsAdapter', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringsEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TStringsEnumerator') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TStringsEnumerator') do
  begin
    RegisterMethod('Constructor Create( AStrings : TStrings)');
    RegisterMethod('Function GetCurrent : string');
    RegisterMethod('Function MoveNext : Boolean');
    RegisterProperty('Current', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IStringsAdapter(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IStringsAdapter') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IStringsAdapter, 'IStringsAdapter') do
  begin
    RegisterMethod('Procedure ReferenceStrings( S : TStrings)', cdRegister);
    RegisterMethod('Procedure ReleaseStrings', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TOwnedCollection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TOwnedCollection') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TOwnedCollection') do
  begin
    RegisterMethod('Constructor Create( AOwner : TPersistent; ItemClass : TCollectionItemClass)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCollection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TCollection') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TCollection') do
  begin
    RegisterMethod('Constructor Create( ItemClass : TCollectionItemClass)');
    RegisterMethod('Function Owner : TPersistent');
    RegisterMethod('Function Add : TCollectionItem');
    RegisterMethod('Procedure BeginUpdate');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterMethod('Procedure EndUpdate');
    RegisterMethod('Function FindItemID( ID : Integer) : TCollectionItem');
    RegisterMethod('Function GetEnumerator : TCollectionEnumerator');
    RegisterMethod('Function Insert( Index : Integer) : TCollectionItem');
    RegisterProperty('Capacity', 'Integer', iptrw);
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('ItemClass', 'TCollectionItemClass', iptr);
    RegisterProperty('Items', 'TCollectionItem Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCollectionEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TCollectionEnumerator') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TCollectionEnumerator') do
  begin
    RegisterMethod('Constructor Create( ACollection : TCollection)');
    RegisterMethod('Function GetCurrent : TCollectionItem');
    RegisterMethod('Function MoveNext : Boolean');
    RegisterProperty('Current', 'TCollectionItem', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCollectionItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TCollectionItem') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TCollectionItem') do
  begin
    RegisterMethod('Constructor Create( Collection : TCollection)');
    RegisterProperty('Collection', 'TCollection', iptrw);
    RegisterProperty('ID', 'Integer', iptr);
    RegisterProperty('Index', 'Integer', iptrw);
    RegisterProperty('DisplayName', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRecall(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TRecall') do
  with CL.AddClassN(CL.FindClass('TObject'),'TRecall') do
  begin
    RegisterMethod('Constructor Create( AStorage, AReference : TPersistent)');
    RegisterMethod('Procedure Store');
    RegisterMethod('Procedure Forget');
    RegisterProperty('Reference', 'TPersistent', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfacedPersistent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TInterfacedPersistent') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TInterfacedPersistent') do
  begin
    RegisterMethod('Function QueryInterface( const IID : TGUID; out Obj) : HResult');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPersistent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TPersistent') do
  with CL.AddClassN(CL.FindClass('TObject'),'TPersistent') do
  begin
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function GetNamePath : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBits(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TBits') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TBits') do
  begin
    RegisterMethod('Function OpenBit : Integer');
    RegisterProperty('Bits', 'Boolean Integer', iptrw);
    SetDefaultPropery('Bits');
    RegisterProperty('Size', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfaceList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInterfacedObject', 'TInterfaceList') do
  with CL.AddClassN(CL.FindClass('TInterfacedObject'),'TInterfaceList') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)');
    RegisterMethod('Function Expand : TInterfaceList');
    RegisterMethod('Function First : IInterface');
    RegisterMethod('Function IndexOf( const Item : IInterface) : Integer');
    RegisterMethod('Function Add( const Item : IInterface) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; const Item : IInterface)');
    RegisterMethod('Function Last : IInterface');
    RegisterMethod('Function Remove( const Item : IInterface) : Integer');
    RegisterMethod('Procedure Lock');
    RegisterMethod('Procedure Unlock');
    RegisterMethod('Function GetEnumerator : TInterfaceListEnumerator');
    RegisterProperty('Capacity', 'Integer', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
    RegisterProperty('Items', 'IInterface Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfaceListEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TInterfaceListEnumerator') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TInterfaceListEnumerator') do
  begin
    RegisterMethod('Constructor Create( AInterfaceList : TInterfaceList)');
    RegisterMethod('Function GetCurrent : IInterface');
    RegisterMethod('Function MoveNext : Boolean');
    RegisterProperty('Current', 'IInterface', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IInterfaceListEx(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IInterfaceList', 'IInterfaceListEx') do
  with CL.AddInterface(CL.FindInterface('IInterfaceList'),IInterfaceListEx, 'IInterfaceListEx') do
  begin
    RegisterMethod('Function GetEnumerator : TInterfaceListEnumerator', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IInterfaceList(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IInterfaceList') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IInterfaceList, 'IInterfaceList') do
  begin
    RegisterMethod('Function Get( Index : Integer) : IInterface', cdRegister);
    RegisterMethod('Function GetCapacity : Integer', cdRegister);
    RegisterMethod('Function GetCount : Integer', cdRegister);
    RegisterMethod('Procedure Put( Index : Integer; const Item : IInterface)', cdRegister);
    RegisterMethod('Procedure SetCapacity( NewCapacity : Integer)', cdRegister);
    RegisterMethod('Procedure SetCount( NewCount : Integer)', cdRegister);
    RegisterMethod('Procedure Clear', cdRegister);
    RegisterMethod('Procedure Delete( Index : Integer)', cdRegister);
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)', cdRegister);
    RegisterMethod('Function First : IInterface', cdRegister);
    RegisterMethod('Function IndexOf( const Item : IInterface) : Integer', cdRegister);
    RegisterMethod('Function Add( const Item : IInterface) : Integer', cdRegister);
    RegisterMethod('Procedure Insert( Index : Integer; const Item : IInterface)', cdRegister);
    RegisterMethod('Function Last : IInterface', cdRegister);
    RegisterMethod('Function Remove( const Item : IInterface) : Integer', cdRegister);
    RegisterMethod('Procedure Lock', cdRegister);
    RegisterMethod('Procedure Unlock', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TThreadList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TThreadList') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TThreadList') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Add( Item : Pointer)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function LockList : TList');
    RegisterMethod('Procedure Remove( Item : Pointer)');
    RegisterMethod('Procedure UnlockList');
    RegisterProperty('Duplicates', 'TDuplicates', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TList') do
  with CL.AddClassN(CL.FindClass('TObject'),'TList') do
  begin
    RegisterMethod('Function Add( Item : Pointer) : Integer');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterMethod('Procedure Error( const Msg : string; Data : Integer);');
    RegisterMethod('Procedure Error( Msg : PResStringRec; Data : Integer);');
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)');
    RegisterMethod('Function Expand : TList');
    RegisterMethod('Function Extract( Item : Pointer) : Pointer');
    RegisterMethod('Function First : Pointer');
    RegisterMethod('Function GetEnumerator : TListEnumerator');
    RegisterMethod('Function IndexOf( Item : Pointer) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; Item : Pointer)');
    RegisterMethod('Function Last : Pointer');
    RegisterMethod('Procedure Move( CurIndex, NewIndex : Integer)');
    RegisterMethod('Function Remove( Item : Pointer) : Integer');
    RegisterMethod('Procedure Pack');
    RegisterMethod('Procedure Sort( Compare : TListSortCompare)');
    RegisterMethod('Procedure Assign( ListA : TList; AOperator : TListAssignOp; ListB : TList)');
    RegisterProperty('Capacity', 'Integer', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
    RegisterProperty('Items', 'Pointer Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterProperty('List', 'PPointerList', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TListEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TListEnumerator') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TListEnumerator') do
  begin
    RegisterMethod('Constructor Create( AList : TList)');
    RegisterMethod('Function GetCurrent : Pointer');
    RegisterMethod('Function MoveNext : Boolean');
    RegisterProperty('Current', 'Pointer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EFileStreamError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'EStreamError', 'EFileStreamError') do
  with CL.AddClassN(CL.FindClass('EStreamError'),'EFileStreamError') do
  begin
    RegisterMethod('Constructor Create( ResStringRec : PResStringRec; const FileName : string)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Classes(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('MaxListSize','LongInt').SetInt( Maxint div 16);
 CL.AddConstantN('soFromBeginning','LongInt').SetInt( 0);
 CL.AddConstantN('soFromCurrent','LongInt').SetInt( 1);
 CL.AddConstantN('soFromEnd','LongInt').SetInt( 2);
  CL.AddTypeS('TSeekOrigin', '( soBeginning, soCurrent, soEnd )');
 CL.AddConstantN('fmCreate','LongWord').SetUInt( $FFFF);
 CL.AddConstantN('toEOF','LongInt').SetInt( Char ( 0 ));
 CL.AddConstantN('toSymbol','LongInt').SetInt( Char ( 1 ));
 CL.AddConstantN('toString','LongInt').SetInt( Char ( 2 ));
 CL.AddConstantN('toInteger','LongInt').SetInt( Char ( 3 ));
 CL.AddConstantN('toFloat','LongInt').SetInt( Char ( 4 ));
 CL.AddConstantN('toWString','LongInt').SetInt( Char ( 5 ));
 CL.AddConstantN('scShift','LongWord').SetUInt( $2000);
 CL.AddConstantN('scCtrl','LongWord').SetUInt( $4000);
 CL.AddConstantN('scAlt','LongWord').SetUInt( $8000);
 CL.AddConstantN('scNone','LongInt').SetInt( 0);
  CL.AddTypeS('TAlignment', '( taLeftJustify, taRightJustify, taCenter )');
  CL.AddTypeS('TBiDiMode', '( bdLeftToRight, bdRightToLeft, bdRightToLeftNoAlig'
   +'n, bdRightToLeftReadingOnly )');
  CL.AddTypeS('TVerticalAlignment', '( taAlignTop, taAlignBottom, taVerticalCen'
   +'ter )');
  CL.AddTypeS('TShiftState', 'set of ( ssShift, ssAlt, ssCtrl, ssLeft, ssRight,'
   +' ssMiddle, ssDouble )');
  CL.AddTypeS('THelpType', '( htKeyword, htContext )');
  CL.AddTypeS('TNotifyEvent', 'Procedure ( Sender : TObject)');
  CL.AddTypeS('TGetStrProc', 'Procedure ( const S : string)');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStreamError');
  SIRegister_EFileStreamError(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EFCreateError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EFOpenError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EFilerError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EReadError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EWriteError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EClassNotFound');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EMethodNotFound');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInvalidImage');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EResNotFound');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EListError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EBitsError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStringListError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EComponentError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EParserError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EOutOfResources');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInvalidOperation');
  CL.AddTypeS('TDuplicates', '( dupIgnore, dupAccept, dupError )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TStream');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TFiler');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TReader');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWriter');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TComponent');
  CL.AddTypeS('PPointerList', '^TPointerList // will not work');
  CL.AddTypeS('TListNotification', '( lnAdded, lnExtracted, lnDeleted )');
  CL.AddTypeS('TListAssignOp', '( laCopy, laAnd, laOr, laXor, laSrcUnique, laDe'
   +'stUnique )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TList');
  SIRegister_TListEnumerator(CL);
  SIRegister_TList(CL);
  SIRegister_TThreadList(CL);
  SIRegister_IInterfaceList(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TInterfaceListEnumerator');
  SIRegister_IInterfaceListEx(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TInterfaceList');
  SIRegister_TInterfaceListEnumerator(CL);
  SIRegister_TInterfaceList(CL);
  SIRegister_TBits(CL);
  SIRegister_TPersistent(CL);
  //CL.AddTypeS('TPersistentClass', 'class of TPersistent');
  SIRegister_TInterfacedPersistent(CL);
  SIRegister_TRecall(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCollection');
  SIRegister_TCollectionItem(CL);
  //CL.AddTypeS('TCollectionItemClass', 'class of TCollectionItem');
  CL.AddTypeS('TCollectionNotification', '( cnAdded, cnExtracting, cnDeleting )');
  SIRegister_TCollectionEnumerator(CL);
  SIRegister_TCollection(CL);
  SIRegister_TOwnedCollection(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TStrings');
  CL.AddTypeS('TGetModuleProc', 'Procedure ( const FileName, UnitName, FormName'
   +', DesignClass : string; CoClasses : TStrings)');
  SIRegister_IStringsAdapter(CL);
  CL.AddTypeS('TStringsDefined', 'set of ( sdDelimiter, sdQuoteChar, sdNameValu'
   +'eSeparator, sdLineBreak, sdStrictDelimiter )');
  SIRegister_TStringsEnumerator(CL);
  SIRegister_TStrings(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TStringList');
  CL.AddTypeS('PStringItem', '^TStringItem // will not work');
  CL.AddTypeS('TStringItem', 'record FString : string; FObject : TObject; end');
  CL.AddTypeS('PStringItemList', '^TStringItemList // will not work');
  SIRegister_TStringList(CL);
  SIRegister_TStream(CL);
  SIRegister_IStreamPersist(CL);
  SIRegister_THandleStream(CL);
  SIRegister_TFileStream(CL);
  SIRegister_TCustomMemoryStream(CL);
  SIRegister_TMemoryStream(CL);
  SIRegister_TBytesStream(CL);
  SIRegister_TResourceStream(CL);
  CL.AddTypeS('TStreamOwnership', '( soReference, soOwned )');
  SIRegister_TStreamAdapter(CL);
  CL.AddTypeS('TGetClass', 'Procedure ( AClass : TPersistentClass)');
  SIRegister_TClassFinder(CL);
  CL.AddTypeS('TValueType', '( vaNull, vaList, vaInt8, vaInt16, vaInt32, vaExte'
   +'nded, vaString, vaIdent, vaFalse, vaTrue, vaBinary, vaSet, vaLString, vaNi'
   +'l, vaCollection, vaSingle, vaCurrency, vaDate, vaWString, vaInt64, vaUTF8S'
   +'tring, vaDouble )');
  CL.AddTypeS('TFilerFlag', '( ffInherited, ffChildPos, ffInline )');
  CL.AddTypeS('TFilerFlags', 'set of TFilerFlag');
  CL.AddTypeS('TReaderProc', 'Procedure ( Reader : TReader)');
  CL.AddTypeS('TWriterProc', 'Procedure ( Writer : TWriter)');
  CL.AddTypeS('TStreamProc', 'Procedure ( Stream : TStream)');
  SIRegister_IInterfaceComponentReference(CL);
  SIRegister_TFiler(CL);
  //CL.AddTypeS('TComponentClass', 'class of TComponent');
  SIRegister_IVarStreamable(CL);
  CL.AddTypeS('TFindMethodEvent', 'Procedure ( Reader : TReader; const MethodNa'
   +'me : string; var Address : Pointer; var Error : Boolean)');
  CL.AddTypeS('TSetNameEvent', 'Procedure ( Reader : TReader; Component : TComp'
   +'onent; var Name : string)');
  CL.AddTypeS('TReferenceNameEvent', 'Procedure ( Reader : TReader; var Name : '
   +'string)');
  CL.AddTypeS('TAncestorNotFoundEvent', 'Procedure ( Reader : TReader; const Co'
   +'mponentName : string; ComponentClass : TPersistentClass; var Component : T'
   +'Component)');
  CL.AddTypeS('TReadComponentsProc', 'Procedure ( Component : TComponent)');
  CL.AddTypeS('TReaderError', 'Procedure ( Reader : TReader; const Message : st'
   +'ring; var Handled : Boolean)');
  CL.AddTypeS('TFindComponentClassEvent', 'Procedure ( Reader : TReader; const '
   +'ClassName : string; var ComponentClass : TComponentClass)');
  CL.AddTypeS('TCreateComponentEvent', 'Procedure ( Reader : TReader; Component'
   +'Class : TComponentClass; var Component : TComponent)');
  CL.AddTypeS('TFindMethodInstanceEvent', 'Procedure ( Reader : TReader; const '
   +'MethodName : string; var AMethod : TMethod; var Error : Boolean)');
  CL.AddTypeS('TFindComponentInstanceEvent', 'Procedure ( Reader : TReader; con'
   +'st Name : string; var Instance : Pointer)');
  SIRegister_TReader(CL);
  CL.AddTypeS('TFindAncestorEvent', 'Procedure ( Writer : TWriter; Component : '
   +'TComponent; const Name : string; var Ancestor, RootAncestor : TComponent)');
  CL.AddTypeS('TFindMethodNameEvent', 'Procedure ( Writer : TWriter; AMethod : '
   +'TMethod; var MethodName : string)');
  CL.AddTypeS('TGetLookupInfoEvent', 'Procedure ( var Ancestor : TPersistent; v'
   +'ar Root, LookupRoot, RootAncestor : TComponent)');
  SIRegister_TWriter(CL);
  CL.AddTypeS('TParserErrorEvent', 'Procedure ( Sender : TObject; const Message'
   +' : string; var Handled : Boolean)');
  SIRegister_TComponentEnumerator(CL);
  CL.AddTypeS('TOperation', '( opInsert, opRemove )');
  CL.AddTypeS('TComponentState', 'set of ( csLoading, csReading, csWriting, csD'
   +'estroying, csDesigning, csAncestor, csUpdating, csFixups, csFreeNotificati'
   +'on, csInline, csDesignInstance )');
  CL.AddTypeS('TComponentStyle', 'set of ( csInheritable, csCheckPropAvail, csS'
   +'ubComponent, csTransient )');
  CL.AddTypeS('TGetChildProc', 'Procedure ( Child : TComponent)');
  CL.AddTypeS('TComponentName', 'string');
  SIRegister_IDesignerNotify(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TBasicAction');
  SIRegister_TBasicActionLink(CL);
  //CL.AddTypeS('TBasicActionLinkClass', 'class of TBasicActionLink');
  SIRegister_TBasicAction(CL);
  //CL.AddTypeS('TBasicActionClass', 'class of TBasicAction');
  SIRegister_TDataModule(CL);
 CL.AddDelphiFunction('Function Point( AX, AY : Integer) : TPoint');
 CL.AddDelphiFunction('Function SmallPoint( AX, AY : SmallInt) : TSmallPoint');
 CL.AddDelphiFunction('Function PointsEqual( const P1, P2 : TPoint) : Boolean;');
 CL.AddDelphiFunction('Function PointsEqual( const P1, P2 : TSmallPoint) : Boolean;');
 CL.AddDelphiFunction('Function InvalidPoint( X, Y : Integer) : Boolean;');
 CL.AddDelphiFunction('Function InvalidPoint( const At : TPoint) : Boolean;');
 CL.AddDelphiFunction('Function InvalidPoint( const At : TSmallPoint) : Boolean;');
 CL.AddDelphiFunction('Function Rect( ALeft, ATop, ARight, ABottom : Integer) : TRect;');
 CL.AddDelphiFunction('Function Rect( const ATopLeft, ABottomRight : TPoint) : TRect;');
 CL.AddDelphiFunction('Function Bounds( ALeft, ATop, AWidth, AHeight : Integer) : TRect');
 CL.AddDelphiFunction('Procedure RegisterClass( AClass : TPersistentClass)');
 CL.AddDelphiFunction('Procedure RegisterClasses( AClasses : array of TPersistentClass)');
 CL.AddDelphiFunction('Procedure RegisterClassAlias( AClass : TPersistentClass; const Alias : string)');
 CL.AddDelphiFunction('Procedure UnRegisterClass( AClass : TPersistentClass)');
 CL.AddDelphiFunction('Procedure UnRegisterClasses( AClasses : array of TPersistentClass)');
 CL.AddDelphiFunction('Procedure UnRegisterModuleClasses( Module : HMODULE)');
 CL.AddDelphiFunction('Function FindClass( const ClassName : string) : TPersistentClass');
 CL.AddDelphiFunction('Function GetClass( const AClassName : string) : TPersistentClass');
 CL.AddDelphiFunction('Procedure StartClassGroup( AClass : TPersistentClass)');
 CL.AddDelphiFunction('Procedure GroupDescendentsWith( AClass, AClassGroup : TPersistentClass)');
 CL.AddDelphiFunction('Function ActivateClassGroup( AClass : TPersistentClass) : TPersistentClass');
 CL.AddDelphiFunction('Function ActiveClassGroup : TPersistentClass');
 CL.AddDelphiFunction('Function ClassGroupOf( AClass : TPersistentClass) : TPersistentClass;');
 CL.AddDelphiFunction('Function ClassGroupOf( Instance : TPersistent) : TPersistentClass;');
 CL.AddDelphiFunction('Procedure RegisterComponents( const Page : string; ComponentClasses : array of TComponentClass)');
 CL.AddDelphiFunction('Procedure RegisterNoIcon( const ComponentClasses : array of TComponentClass)');
 CL.AddDelphiFunction('Procedure RegisterNonActiveX( const ComponentClasses : array of TComponentClass; AxRegType : TActiveXRegType)');
  CL.AddTypeS('TIdentMapEntry', 'record Value : Integer; Name : String; end');
 CL.AddDelphiFunction('Procedure RegisterIntegerConsts( AIntegerType : Pointer; AIdentToInt : TIdentToInt; AIntToIdent : TIntToIdent)');
 CL.AddDelphiFunction('Procedure UnregisterIntegerConsts( AIntegerType : Pointer; AIdentToInt : TIdentToInt; AIntToIdent : TIntToIdent)');
 CL.AddDelphiFunction('Procedure RegisterFindGlobalComponentProc( AFindGlobalComponent : TFindGlobalComponent)');
 CL.AddDelphiFunction('Procedure UnregisterFindGlobalComponentProc( AFindGlobalComponent : TFindGlobalComponent)');
 CL.AddDelphiFunction('Function FindGlobalComponent( const Name : string) : TComponent');
 CL.AddDelphiFunction('Function IsUniqueGlobalComponentName( const Name : string) : Boolean');
 CL.AddDelphiFunction('Function IdentToInt( const Ident : string; var Int : Longint; const Map : array of TIdentMapEntry) : Boolean');
 CL.AddDelphiFunction('Function IntToIdent( Int : Longint; var Ident : string; const Map : array of TIdentMapEntry) : Boolean');
 CL.AddDelphiFunction('Function FindIntToIdent( AIntegerType : Pointer) : TIntToIdent');
 CL.AddDelphiFunction('Function FindIdentToInt( AIntegerType : Pointer) : TIdentToInt');
 CL.AddDelphiFunction('Function InitInheritedComponent( Instance : TComponent; RootAncestor : TClass) : Boolean');
 CL.AddDelphiFunction('Function InitComponentRes( const ResName : string; Instance : TComponent) : Boolean');
 CL.AddDelphiFunction('Function ReadComponentRes( const ResName : string; Instance : TComponent) : TComponent');
 CL.AddDelphiFunction('Function ReadComponentResEx( HInstance : THandle; const ResName : string) : TComponent');
 CL.AddDelphiFunction('Function ReadComponentResFile( const FileName : string; Instance : TComponent) : TComponent');
 CL.AddDelphiFunction('Procedure WriteComponentResFile( const FileName : string; Instance : TComponent)');
 CL.AddDelphiFunction('Procedure GlobalFixupReferences');
 CL.AddDelphiFunction('Procedure GetFixupReferenceNames( Root : TComponent; Names : TStrings)');
 CL.AddDelphiFunction('Procedure GetFixupInstanceNames( Root : TComponent; const ReferenceRootName : string; Names : TStrings)');
 CL.AddDelphiFunction('Procedure RedirectFixupReferences( Root : TComponent; const OldRootName, NewRootName : string)');
 CL.AddDelphiFunction('Procedure RemoveFixupReferences( Root : TComponent; const RootName : string)');
 CL.AddDelphiFunction('Procedure RemoveFixups( Instance : TPersistent)');
 CL.AddDelphiFunction('Function FindNestedComponent( Root : TComponent; const NamePath : string) : TComponent');
 CL.AddDelphiFunction('Procedure BeginGlobalLoading');
 CL.AddDelphiFunction('Procedure NotifyGlobalLoading');
 CL.AddDelphiFunction('Procedure EndGlobalLoading');
 CL.AddDelphiFunction('Function CollectionsEqual( C1, C2 : TCollection; Owner1, Owner2 : TComponent) : Boolean');
 CL.AddDelphiFunction('Function GetUltimateOwner( ACollectionItem : TCollectionItem) : TPersistent;');
 CL.AddDelphiFunction('Function GetUltimateOwner( ACollection : TCollection) : TPersistent;');
 CL.AddDelphiFunction('Function GetUltimateOwner( APersistent : TPersistent) : TPersistent;');
  CL.AddTypeS('TStreamOriginalFormat', '( sofUnknown, sofBinary, sofText, sofUT'
   +'F8Text )');
 CL.AddDelphiFunction('Procedure ObjectBinaryToText( Input, Output : TStream);');
 CL.AddDelphiFunction('Procedure ObjectBinaryToText( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);');
 CL.AddDelphiFunction('Procedure ObjectTextToBinary( Input, Output : TStream);');
 CL.AddDelphiFunction('Procedure ObjectTextToBinary( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);');
 CL.AddDelphiFunction('Procedure ObjectResourceToText( Input, Output : TStream);');
 CL.AddDelphiFunction('Procedure ObjectResourceToText( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);');
 CL.AddDelphiFunction('Procedure ObjectTextToResource( Input, Output : TStream);');
 CL.AddDelphiFunction('Procedure ObjectTextToResource( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);');
 CL.AddDelphiFunction('Function TestStreamFormat( Stream : TStream) : TStreamOriginalFormat');
 CL.AddDelphiFunction('Function GetResourceName( ObjStream : TStream; var AName : string) : Boolean');
 CL.AddDelphiFunction('Procedure WriteObjectResourceHeader( ObjStream, Output : TStream)');
 CL.AddDelphiFunction('Procedure Write16bitResourceHeader( const AName : TBytes; DataSize : Integer; Output : TStream)');
 CL.AddDelphiFunction('Procedure Write32bitResourceHeader( const AName : TBytes; DataSize : Integer; Output : TStream)');
 CL.AddDelphiFunction('Function LineStart( Buffer, BufPos : PAnsiChar) : PAnsiChar;');
 CL.AddDelphiFunction('Function LineStart( Buffer, BufPos : PWideChar) : PWideChar;');
 CL.AddDelphiFunction('Function LineStart( const Buffer : TBytes; BufPos : Integer) : Integer;');
 CL.AddDelphiFunction('Function ExtractStrings( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings) : Integer');
 CL.AddDelphiFunction('Procedure BinToHex( Buffer : PAnsiChar; Text : PWideChar; BufSize : Integer);');
 CL.AddDelphiFunction('Procedure BinToHex( Buffer : PAnsiChar; Text : PAnsiChar; BufSize : Integer);');
 CL.AddDelphiFunction('Procedure BinToHex( var Buffer, Text : PWideChar; BufSize : Integer);');
 CL.AddDelphiFunction('Procedure BinToHex( var Buffer, Text : PAnsiChar; BufSize : Integer);');
 CL.AddDelphiFunction('Procedure BinToHex( Buffer : Pointer; Text : PWideChar; BufSize : Integer);');
 CL.AddDelphiFunction('Procedure BinToHex( Buffer : Pointer; Text : PAnsiChar; BufSize : Integer);');
 CL.AddDelphiFunction('Function HexToBin( Text : PWideChar; Buffer : PAnsiChar; BufSize : Integer) : Integer;');
 CL.AddDelphiFunction('Function HexToBin( Text : PAnsiChar; Buffer : PAnsiChar; BufSize : Integer) : Integer;');
 CL.AddDelphiFunction('Function HexToBin( Text : PWideChar; var Buffer, BufSize : Integer) : Integer;');
 CL.AddDelphiFunction('Function HexToBin( Text : PAnsiChar; var Buffer, BufSize : Integer) : Integer;');
 CL.AddDelphiFunction('Function HexToBin( Text : PWideChar; Buffer : Pointer; BufSize : Integer) : Integer;');
 CL.AddDelphiFunction('Function HexToBin( Text : PAnsiChar; Buffer : Pointer; BufSize : Integer) : Integer;');
 CL.AddDelphiFunction('Function FindRootDesigner( Obj : TPersistent) : IDesignerNotify');
 CL.AddDelphiFunction('Function CountGenerations( Ancestor, Descendent : TClass) : Integer');
 CL.AddDelphiFunction('Function CheckSynchronize( Timeout : Integer) : Boolean');
  CL.AddTypeS('TWndMethod', 'Procedure ( var Message : TMessage)');
  SIRegister_TTextReader(CL);
  SIRegister_TTextWriter(CL);
  SIRegister_TStringReader(CL);
  SIRegister_TStringWriter(CL);
  SIRegister_TStreamWriter(CL);
  SIRegister_TStreamReader(CL);
 CL.AddDelphiFunction('Function MakeObjectInstance( AMethod : TWndMethod) : Pointer');
 CL.AddDelphiFunction('Procedure FreeObjectInstance( ObjectInstance : Pointer)');
 CL.AddDelphiFunction('Function AllocateHWnd( AMethod : TWndMethod) : HWND');
 CL.AddDelphiFunction('Procedure DeallocateHWnd( Wnd : HWND)');
 CL.AddDelphiFunction('Function AncestorIsValid( Ancestor : TPersistent; Root, RootAncestor : TComponent) : Boolean');
 CL.AddDelphiFunction('Function IsDefaultPropertyValue( Instance : TObject; PropInfo : PPropInfo; OnGetLookupInfo : TGetLookupInfoEvent; Writer : TWriter; OnFindMethodName : TFindMethodNameEvent) : Boolean');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TStreamReaderEndOfStream_R(Self: TStreamReader; var T: Boolean);
begin T := Self.EndOfStream; end;

(*----------------------------------------------------------------------------*)
procedure TStreamReaderCurrentEncoding_R(Self: TStreamReader; var T: TEncoding);
begin T := Self.CurrentEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TStreamReaderBaseStream_R(Self: TStreamReader; var T: TStream);
begin T := Self.BaseStream; end;

(*----------------------------------------------------------------------------*)
Function TStreamReaderRead_P(Self: TStreamReader;  const Buffer : TCharArray; Index, Count : Integer) : Integer;
Begin Result := Self.Read(Buffer, Index, Count); END;

(*----------------------------------------------------------------------------*)
Function TStreamReaderRead_P(Self: TStreamReader) : Integer;
Begin Result := Self.Read; END;

(*----------------------------------------------------------------------------*)
Function TStreamReaderCreate_P(Self: TClass; CreateNewInstance: Boolean;  Filename : string; Encoding : TEncoding; DetectBOM : Boolean; BufferSize : Integer):TObject;
Begin Result := TStreamReader.Create(Filename, Encoding, DetectBOM, BufferSize); END;

(*----------------------------------------------------------------------------*)
Function TStreamReaderCreate_P(Self: TClass; CreateNewInstance: Boolean;  Filename : string; DetectBOM : Boolean):TObject;
Begin Result := TStreamReader.Create(Filename, DetectBOM); END;

(*----------------------------------------------------------------------------*)
Function TStreamReaderCreate_P(Self: TClass; CreateNewInstance: Boolean;  Filename : string):TObject;
Begin Result := TStreamReader.Create(Filename); END;

(*----------------------------------------------------------------------------*)
Function TStreamReaderCreate_P(Self: TClass; CreateNewInstance: Boolean;  Stream : TStream; Encoding : TEncoding; DetectBOM : Boolean; BufferSize : Integer):TObject;
Begin Result := TStreamReader.Create(Stream, Encoding, DetectBOM, BufferSize); END;

(*----------------------------------------------------------------------------*)
Function TStreamReaderCreate_P(Self: TClass; CreateNewInstance: Boolean;  Stream : TStream; DetectBOM : Boolean):TObject;
Begin Result := TStreamReader.Create(Stream, DetectBOM); END;

(*----------------------------------------------------------------------------*)
Function TStreamReaderCreate_P(Self: TClass; CreateNewInstance: Boolean;  Stream : TStream):TObject;
Begin Result := TStreamReader.Create(Stream); END;

(*----------------------------------------------------------------------------*)
procedure TStreamWriterBaseStream_R(Self: TStreamWriter; var T: TStream);
begin T := Self.BaseStream; end;

(*----------------------------------------------------------------------------*)
procedure TStreamWriterEncoding_R(Self: TStreamWriter; var T: TEncoding);
begin T := Self.Encoding; end;

(*----------------------------------------------------------------------------*)
procedure TStreamWriterNewLine_W(Self: TStreamWriter; const T: string);
begin Self.NewLine := T; end;

(*----------------------------------------------------------------------------*)
procedure TStreamWriterNewLine_R(Self: TStreamWriter; var T: string);
begin T := Self.NewLine; end;

(*----------------------------------------------------------------------------*)
procedure TStreamWriterAutoFlush_W(Self: TStreamWriter; const T: Boolean);
begin Self.AutoFlush := T; end;

(*----------------------------------------------------------------------------*)
procedure TStreamWriterAutoFlush_R(Self: TStreamWriter; var T: Boolean);
begin T := Self.AutoFlush; end;

(*----------------------------------------------------------------------------*)
Function TStreamWriterCreate_P(Self: TClass; CreateNewInstance: Boolean;  Filename : string; Append : Boolean; Encoding : TEncoding; BufferSize : Integer):TObject;
Begin Result := TStreamWriter.Create(Filename, Append, Encoding, BufferSize); END;

(*----------------------------------------------------------------------------*)
Function TStreamWriterCreate_P(Self: TClass; CreateNewInstance: Boolean;  Filename : string; Append : Boolean):TObject;
Begin Result := TStreamWriter.Create(Filename, Append); END;

(*----------------------------------------------------------------------------*)
Function TStreamWriterCreate_P(Self: TClass; CreateNewInstance: Boolean;  Stream : TStream; Encoding : TEncoding; BufferSize : Integer):TObject;
Begin Result := TStreamWriter.Create(Stream, Encoding, BufferSize); END;

(*----------------------------------------------------------------------------*)
Function TStreamWriterCreate_P(Self: TClass; CreateNewInstance: Boolean;  Stream : TStream):TObject;
Begin Result := TStreamWriter.Create(Stream); END;

(*----------------------------------------------------------------------------*)
Function TStringWriterCreate_P(Self: TClass; CreateNewInstance: Boolean;  Builder : TStringBuilder):TObject;
Begin Result := TStringWriter.Create(Builder); END;

(*----------------------------------------------------------------------------*)
Function TStringWriterCreate_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TStringWriter.Create; END;

(*----------------------------------------------------------------------------*)
Function TStringReaderRead_P(Self: TStringReader;  const Buffer : TCharArray; Index, Count : Integer) : Integer;
Begin Result := Self.Read(Buffer, Index, Count); END;

(*----------------------------------------------------------------------------*)
Function TStringReaderRead_P(Self: TStringReader) : Integer;
Begin Result := Self.Read; END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : TCharArray; Index, Count : Integer);
Begin Self.WriteLine(Value, Index, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  const Format : string; Args : array of const);
Begin Self.WriteLine(Format, Args); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : UInt64);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : Cardinal);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  const Value : string);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : Single);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : TObject);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : Int64);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : Integer);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : Double);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  const Value : TCharArray);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : Char);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter;  Value : Boolean);
Begin Self.WriteLine(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWriteLine_P(Self: TTextWriter);
Begin Self.WriteLine; END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : TCharArray; Index, Count : Integer);
Begin Self.Write(Value, Index, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  const Format : string; Args : array of const);
Begin Self.Write(Format, Args); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : UInt64);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : Cardinal);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  const Value : string);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : Single);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : TObject);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : Int64);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : Integer);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : Double);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  const Value : TCharArray);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : Char);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TTextWriterWrite_P(Self: TTextWriter;  Value : Boolean);
Begin Self.Write(Value); END;

(*----------------------------------------------------------------------------*)
Function TTextReaderRead_P(Self: TTextReader;  const Buffer : TCharArray; Index, Count : Integer) : Integer;
Begin Result := Self.Read(Buffer, Index, Count); END;

(*----------------------------------------------------------------------------*)
Function TTextReaderRead_P(Self: TTextReader) : Integer;
Begin Result := Self.Read; END;

(*----------------------------------------------------------------------------*)
Function HexToBin_P( Text : PAnsiChar; Buffer : Pointer; BufSize : Integer) : Integer;
Begin Result := Classes.HexToBin(Text, Buffer, BufSize); END;

(*----------------------------------------------------------------------------*)
Function HexToBin_P( Text : PWideChar; Buffer : Pointer; BufSize : Integer) : Integer;
Begin Result := Classes.HexToBin(Text, Buffer, BufSize); END;

(*----------------------------------------------------------------------------*)
Function HexToBin_P( Text : PAnsiChar; var Buffer, BufSize : Integer) : Integer;
Begin Result := Classes.HexToBin(Text, Buffer, BufSize); END;

(*----------------------------------------------------------------------------*)
Function HexToBin_P( Text : PWideChar; var Buffer, BufSize : Integer) : Integer;
Begin Result := Classes.HexToBin(Text, Buffer, BufSize); END;

(*----------------------------------------------------------------------------*)
Function HexToBin_P( Text : PAnsiChar; Buffer : PAnsiChar; BufSize : Integer) : Integer;
Begin Result := Classes.HexToBin(Text, Buffer, BufSize); END;

(*----------------------------------------------------------------------------*)
Function HexToBin_P( Text : PWideChar; Buffer : PAnsiChar; BufSize : Integer) : Integer;
Begin Result := Classes.HexToBin(Text, Buffer, BufSize); END;

(*----------------------------------------------------------------------------*)
Procedure BinToHex_P( Buffer : Pointer; Text : PAnsiChar; BufSize : Integer);
Begin Classes.BinToHex(Buffer, Text, BufSize); END;

(*----------------------------------------------------------------------------*)
Procedure BinToHex_P( Buffer : Pointer; Text : PWideChar; BufSize : Integer);
Begin Classes.BinToHex(Buffer, Text, BufSize); END;

(*----------------------------------------------------------------------------*)
Procedure BinToHex_P( var Buffer, Text : PAnsiChar; BufSize : Integer);
Begin Classes.BinToHex(Buffer, Text, BufSize); END;

(*----------------------------------------------------------------------------*)
Procedure BinToHex_P( var Buffer, Text : PWideChar; BufSize : Integer);
Begin Classes.BinToHex(Buffer, Text, BufSize); END;

(*----------------------------------------------------------------------------*)
Procedure BinToHex_P( Buffer : PAnsiChar; Text : PAnsiChar; BufSize : Integer);
Begin Classes.BinToHex(Buffer, Text, BufSize); END;

(*----------------------------------------------------------------------------*)
Procedure BinToHex_P( Buffer : PAnsiChar; Text : PWideChar; BufSize : Integer);
Begin Classes.BinToHex(Buffer, Text, BufSize); END;

(*----------------------------------------------------------------------------*)
Function LineStart_P( const Buffer : TBytes; BufPos : Integer) : Integer;
Begin Result := Classes.LineStart(Buffer, BufPos); END;

(*----------------------------------------------------------------------------*)
Function LineStart_P( Buffer, BufPos : PWideChar) : PWideChar;
Begin Result := Classes.LineStart(Buffer, BufPos); END;

(*----------------------------------------------------------------------------*)
Function LineStart_P( Buffer, BufPos : PAnsiChar) : PAnsiChar;
Begin Result := Classes.LineStart(Buffer, BufPos); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectTextToResource_P( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);
Begin Classes.ObjectTextToResource(Input, Output, OriginalFormat); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectTextToResource_P( Input, Output : TStream);
Begin Classes.ObjectTextToResource(Input, Output); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectResourceToText_P( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);
Begin Classes.ObjectResourceToText(Input, Output, OriginalFormat); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectResourceToText_P( Input, Output : TStream);
Begin Classes.ObjectResourceToText(Input, Output); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectTextToBinary_P( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);
Begin Classes.ObjectTextToBinary(Input, Output, OriginalFormat); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectTextToBinary_P( Input, Output : TStream);
Begin Classes.ObjectTextToBinary(Input, Output); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectBinaryToText_P( Input, Output : TStream; var OriginalFormat : TStreamOriginalFormat);
Begin Classes.ObjectBinaryToText(Input, Output, OriginalFormat); END;

(*----------------------------------------------------------------------------*)
Procedure ObjectBinaryToText_P( Input, Output : TStream);
Begin Classes.ObjectBinaryToText(Input, Output); END;

(*----------------------------------------------------------------------------*)
Function GetUltimateOwner_P( APersistent : TPersistent) : TPersistent;
Begin Result := Classes.GetUltimateOwner(APersistent); END;

(*----------------------------------------------------------------------------*)
Function GetUltimateOwner_P( ACollection : TCollection) : TPersistent;
Begin Result := Classes.GetUltimateOwner(ACollection); END;

(*----------------------------------------------------------------------------*)
Function GetUltimateOwner_P( ACollectionItem : TCollectionItem) : TPersistent;
Begin Result := Classes.GetUltimateOwner(ACollectionItem); END;

(*----------------------------------------------------------------------------*)
Function ClassGroupOf_P( Instance : TPersistent) : TPersistentClass;
Begin Result := Classes.ClassGroupOf(Instance); END;

(*----------------------------------------------------------------------------*)
Function ClassGroupOf_P( AClass : TPersistentClass) : TPersistentClass;
Begin Result := Classes.ClassGroupOf(AClass); END;

(*----------------------------------------------------------------------------*)
Function Rect_P( const ATopLeft, ABottomRight : TPoint) : TRect;
Begin Result := Classes.Rect(ATopLeft, ABottomRight); END;

(*----------------------------------------------------------------------------*)
Function Rect_P( ALeft, ATop, ARight, ABottom : Integer) : TRect;
Begin Result := Classes.Rect(ALeft, ATop, ARight, ABottom); END;

(*----------------------------------------------------------------------------*)
Function InvalidPoint_P( const At : TSmallPoint) : Boolean;
Begin Result := Classes.InvalidPoint(At); END;

(*----------------------------------------------------------------------------*)
Function InvalidPoint_P( const At : TPoint) : Boolean;
Begin Result := Classes.InvalidPoint(At); END;

(*----------------------------------------------------------------------------*)
Function InvalidPoint_P( X, Y : Integer) : Boolean;
Begin Result := Classes.InvalidPoint(X, Y); END;

(*----------------------------------------------------------------------------*)
Function PointsEqual_P( const P1, P2 : TSmallPoint) : Boolean;
Begin Result := Classes.PointsEqual(P1, P2); END;

(*----------------------------------------------------------------------------*)
Function PointsEqual_P( const P1, P2 : TPoint) : Boolean;
Begin Result := Classes.PointsEqual(P1, P2); END;

(*----------------------------------------------------------------------------*)
procedure TDataModuleOnDestroy_W(Self: TDataModule; const T: TNotifyEvent);
begin Self.OnDestroy := T; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleOnDestroy_R(Self: TDataModule; var T: TNotifyEvent);
begin T := Self.OnDestroy; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleOnCreate_W(Self: TDataModule; const T: TNotifyEvent);
begin Self.OnCreate := T; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleOnCreate_R(Self: TDataModule; var T: TNotifyEvent);
begin T := Self.OnCreate; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleOldCreateOrder_W(Self: TDataModule; const T: Boolean);
begin Self.OldCreateOrder := T; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleOldCreateOrder_R(Self: TDataModule; var T: Boolean);
begin T := Self.OldCreateOrder; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleDesignSize_W(Self: TDataModule; const T: TPoint);
begin Self.DesignSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleDesignSize_R(Self: TDataModule; var T: TPoint);
begin T := Self.DesignSize; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleDesignOffset_W(Self: TDataModule; const T: TPoint);
begin Self.DesignOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TDataModuleDesignOffset_R(Self: TDataModule; var T: TPoint);
begin T := Self.DesignOffset; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionOnUpdate_W(Self: TBasicAction; const T: TNotifyEvent);
begin Self.OnUpdate := T; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionOnUpdate_R(Self: TBasicAction; var T: TNotifyEvent);
begin T := Self.OnUpdate; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionOnExecute_W(Self: TBasicAction; const T: TNotifyEvent);
begin Self.OnExecute := T; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionOnExecute_R(Self: TBasicAction; var T: TNotifyEvent);
begin T := Self.OnExecute; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionActionComponent_W(Self: TBasicAction; const T: TComponent);
begin Self.ActionComponent := T; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionActionComponent_R(Self: TBasicAction; var T: TComponent);
begin T := Self.ActionComponent; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionLinkOnChange_W(Self: TBasicActionLink; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionLinkOnChange_R(Self: TBasicActionLink; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionLinkAction_W(Self: TBasicActionLink; const T: TBasicAction);
begin Self.Action := T; end;

(*----------------------------------------------------------------------------*)
procedure TBasicActionLinkAction_R(Self: TBasicActionLink; var T: TBasicAction);
begin T := Self.Action; end;

(*----------------------------------------------------------------------------*)
procedure TComponentEnumeratorCurrent_R(Self: TComponentEnumerator; var T: TComponent);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
procedure TWriterUseQualifiedNames_W(Self: TWriter; const T: Boolean);
begin Self.UseQualifiedNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TWriterUseQualifiedNames_R(Self: TWriter; var T: Boolean);
begin T := Self.UseQualifiedNames; end;

(*----------------------------------------------------------------------------*)
procedure TWriterOnFindMethodName_W(Self: TWriter; const T: TFindMethodNameEvent);
begin Self.OnFindMethodName := T; end;

(*----------------------------------------------------------------------------*)
procedure TWriterOnFindMethodName_R(Self: TWriter; var T: TFindMethodNameEvent);
begin T := Self.OnFindMethodName; end;

(*----------------------------------------------------------------------------*)
procedure TWriterOnFindAncestor_W(Self: TWriter; const T: TFindAncestorEvent);
begin Self.OnFindAncestor := T; end;

(*----------------------------------------------------------------------------*)
procedure TWriterOnFindAncestor_R(Self: TWriter; var T: TFindAncestorEvent);
begin T := Self.OnFindAncestor; end;

(*----------------------------------------------------------------------------*)
procedure TWriterRootAncestor_W(Self: TWriter; const T: TComponent);
begin Self.RootAncestor := T; end;

(*----------------------------------------------------------------------------*)
procedure TWriterRootAncestor_R(Self: TWriter; var T: TComponent);
begin T := Self.RootAncestor; end;

(*----------------------------------------------------------------------------*)
procedure TWriterPosition_W(Self: TWriter; const T: Longint);
begin Self.Position := T; end;

(*----------------------------------------------------------------------------*)
procedure TWriterPosition_R(Self: TWriter; var T: Longint);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
Procedure TWriterWriteInteger_P(Self: TWriter;  Value : Int64);
Begin Self.WriteInteger(Value); END;

(*----------------------------------------------------------------------------*)
Procedure TWriterWriteInteger_P(Self: TWriter;  Value : Longint);
Begin Self.WriteInteger(Value); END;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindComponentInstance_W(Self: TReader; const T: TFindComponentInstanceEvent);
begin Self.OnFindComponentInstance := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindComponentInstance_R(Self: TReader; var T: TFindComponentInstanceEvent);
begin T := Self.OnFindComponentInstance; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindComponentClass_W(Self: TReader; const T: TFindComponentClassEvent);
begin Self.OnFindComponentClass := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindComponentClass_R(Self: TReader; var T: TFindComponentClassEvent);
begin T := Self.OnFindComponentClass; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnCreateComponent_W(Self: TReader; const T: TCreateComponentEvent);
begin Self.OnCreateComponent := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnCreateComponent_R(Self: TReader; var T: TCreateComponentEvent);
begin T := Self.OnCreateComponent; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnAncestorNotFound_W(Self: TReader; const T: TAncestorNotFoundEvent);
begin Self.OnAncestorNotFound := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnAncestorNotFound_R(Self: TReader; var T: TAncestorNotFoundEvent);
begin T := Self.OnAncestorNotFound; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnReferenceName_W(Self: TReader; const T: TReferenceNameEvent);
begin Self.OnReferenceName := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnReferenceName_R(Self: TReader; var T: TReferenceNameEvent);
begin T := Self.OnReferenceName; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnSetName_W(Self: TReader; const T: TSetNameEvent);
begin Self.OnSetName := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnSetName_R(Self: TReader; var T: TSetNameEvent);
begin T := Self.OnSetName; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindMethodInstance_W(Self: TReader; const T: TFindMethodInstanceEvent);
begin Self.OnFindMethodInstance := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindMethodInstance_R(Self: TReader; var T: TFindMethodInstanceEvent);
begin T := Self.OnFindMethodInstance; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindMethod_W(Self: TReader; const T: TFindMethodEvent);
begin Self.OnFindMethod := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnFindMethod_R(Self: TReader; var T: TFindMethodEvent);
begin T := Self.OnFindMethod; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnError_W(Self: TReader; const T: TReaderError);
begin Self.OnError := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOnError_R(Self: TReader; var T: TReaderError);
begin T := Self.OnError; end;

(*----------------------------------------------------------------------------*)
procedure TReaderPosition_W(Self: TReader; const T: Longint);
begin Self.Position := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderPosition_R(Self: TReader; var T: Longint);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TReaderParent_W(Self: TReader; const T: TComponent);
begin Self.Parent := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderParent_R(Self: TReader; var T: TComponent);
begin T := Self.Parent; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOwner_W(Self: TReader; const T: TComponent);
begin Self.Owner := T; end;

(*----------------------------------------------------------------------------*)
procedure TReaderOwner_R(Self: TReader; var T: TComponent);
begin T := Self.Owner; end;

(*----------------------------------------------------------------------------*)
procedure TFilerIgnoreChildren_W(Self: TFiler; const T: Boolean);
begin Self.IgnoreChildren := T; end;

(*----------------------------------------------------------------------------*)
procedure TFilerIgnoreChildren_R(Self: TFiler; var T: Boolean);
begin T := Self.IgnoreChildren; end;

(*----------------------------------------------------------------------------*)
procedure TFilerAncestor_W(Self: TFiler; const T: TPersistent);
begin Self.Ancestor := T; end;

(*----------------------------------------------------------------------------*)
procedure TFilerAncestor_R(Self: TFiler; var T: TPersistent);
begin T := Self.Ancestor; end;

(*----------------------------------------------------------------------------*)
procedure TFilerLookupRoot_R(Self: TFiler; var T: TComponent);
begin T := Self.LookupRoot; end;

(*----------------------------------------------------------------------------*)
procedure TFilerRoot_W(Self: TFiler; const T: TComponent);
begin Self.Root := T; end;

(*----------------------------------------------------------------------------*)
procedure TFilerRoot_R(Self: TFiler; var T: TComponent);
begin T := Self.Root; end;

(*----------------------------------------------------------------------------*)
procedure TStreamAdapterStreamOwnership_W(Self: TStreamAdapter; const T: TStreamOwnership);
begin Self.StreamOwnership := T; end;

(*----------------------------------------------------------------------------*)
procedure TStreamAdapterStreamOwnership_R(Self: TStreamAdapter; var T: TStreamOwnership);
begin T := Self.StreamOwnership; end;

(*----------------------------------------------------------------------------*)
procedure TStreamAdapterStream_R(Self: TStreamAdapter; var T: TStream);
begin T := Self.Stream; end;

(*----------------------------------------------------------------------------*)
procedure TBytesStreamBytes_R(Self: TBytesStream; var T: TBytes);
begin T := Self.Bytes; end;

(*----------------------------------------------------------------------------*)
Function TBytesStreamCreate_P(Self: TClass; CreateNewInstance: Boolean;  const ABytes : TBytes):TObject;
Begin Result := TBytesStream.Create(ABytes); END;

(*----------------------------------------------------------------------------*)
procedure TCustomMemoryStreamMemory_R(Self: TCustomMemoryStream; var T: Pointer);
begin T := Self.Memory; end;

(*----------------------------------------------------------------------------*)
procedure TFileStreamFileName_R(Self: TFileStream; var T: string);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
Function TFileStreamCreate_P(Self: TClass; CreateNewInstance: Boolean;  const AFileName : string; Mode : Word; Rights : Cardinal):TObject;
Begin Result := TFileStream.Create(AFileName, Mode, Rights); END;

(*----------------------------------------------------------------------------*)
Function TFileStreamCreate_P(Self: TClass; CreateNewInstance: Boolean;  const AFileName : string; Mode : Word):TObject;
Begin Result := TFileStream.Create(AFileName, Mode); END;

(*----------------------------------------------------------------------------*)
procedure THandleStreamHandle_R(Self: THandleStream; var T: THandle);
begin T := Self.Handle; end;

(*----------------------------------------------------------------------------*)
procedure TStreamSize_W(Self: TStream; const T: Int64);
begin Self.Size := T; end;

(*----------------------------------------------------------------------------*)
procedure TStreamSize_R(Self: TStream; var T: Int64);
begin T := Self.Size; end;

(*----------------------------------------------------------------------------*)
procedure TStreamPosition_W(Self: TStream; const T: Int64);
begin Self.Position := T; end;

(*----------------------------------------------------------------------------*)
procedure TStreamPosition_R(Self: TStream; var T: Int64);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
Function TStreamSeek_P(Self: TStream;  const Offset : Int64; Origin : TSeekOrigin) : Int64;
Begin Result := Self.Seek(Offset, Origin); END;

(*----------------------------------------------------------------------------*)
Function TStreamSeek_P(Self: TStream;  Offset : Longint; Origin : Word) : Longint;
Begin Result := Self.Seek(Offset, Origin); END;

(*----------------------------------------------------------------------------*)
Procedure TStreamSetSize_P(Self: TStream;  const NewSize : Int64);
Begin Self.SetSize(NewSize); END;

(*----------------------------------------------------------------------------*)
Procedure TStreamSetSize_P(Self: TStream;  NewSize : Longint);
Begin Self.SetSize(NewSize); END;

(*----------------------------------------------------------------------------*)
procedure TStringListOwnsObjects_W(Self: TStringList; const T: Boolean);
begin Self.OwnsObjects := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringListOwnsObjects_R(Self: TStringList; var T: Boolean);
begin T := Self.OwnsObjects; end;

(*----------------------------------------------------------------------------*)
procedure TStringListOnChanging_W(Self: TStringList; const T: TNotifyEvent);
begin Self.OnChanging := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringListOnChanging_R(Self: TStringList; var T: TNotifyEvent);
begin T := Self.OnChanging; end;

(*----------------------------------------------------------------------------*)
procedure TStringListOnChange_W(Self: TStringList; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringListOnChange_R(Self: TStringList; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TStringListCaseSensitive_W(Self: TStringList; const T: Boolean);
begin Self.CaseSensitive := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringListCaseSensitive_R(Self: TStringList; var T: Boolean);
begin T := Self.CaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure TStringListSorted_W(Self: TStringList; const T: Boolean);
begin Self.Sorted := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringListSorted_R(Self: TStringList; var T: Boolean);
begin T := Self.Sorted; end;

(*----------------------------------------------------------------------------*)
procedure TStringListDuplicates_W(Self: TStringList; const T: TDuplicates);
begin Self.Duplicates := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringListDuplicates_R(Self: TStringList; var T: TDuplicates);
begin T := Self.Duplicates; end;

(*----------------------------------------------------------------------------*)
Function TStringListCreate_P(Self: TClass; CreateNewInstance: Boolean;  OwnsObjects : Boolean):TObject;
Begin Result := TStringList.Create(OwnsObjects); END;

(*----------------------------------------------------------------------------*)
Function TStringListCreate_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TStringList.Create; END;

(*----------------------------------------------------------------------------*)
procedure TStringsStringsAdapter_W(Self: TStrings; const T: IStringsAdapter);
begin Self.StringsAdapter := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsStringsAdapter_R(Self: TStrings; var T: IStringsAdapter);
begin T := Self.StringsAdapter; end;

(*----------------------------------------------------------------------------*)
procedure TStringsText_W(Self: TStrings; const T: string);
begin Self.Text := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsText_R(Self: TStrings; var T: string);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TStringsStrings_W(Self: TStrings; const T: string; const t1: Integer);
begin Self.Strings[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsStrings_R(Self: TStrings; var T: string; const t1: Integer);
begin T := Self.Strings[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TStringsStrictDelimiter_W(Self: TStrings; const T: Boolean);
begin Self.StrictDelimiter := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsStrictDelimiter_R(Self: TStrings; var T: Boolean);
begin T := Self.StrictDelimiter; end;

(*----------------------------------------------------------------------------*)
procedure TStringsNameValueSeparator_W(Self: TStrings; const T: Char);
begin Self.NameValueSeparator := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsNameValueSeparator_R(Self: TStrings; var T: Char);
begin T := Self.NameValueSeparator; end;

(*----------------------------------------------------------------------------*)
procedure TStringsValueFromIndex_W(Self: TStrings; const T: string; const t1: Integer);
begin Self.ValueFromIndex[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsValueFromIndex_R(Self: TStrings; var T: string; const t1: Integer);
begin T := Self.ValueFromIndex[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TStringsValues_W(Self: TStrings; const T: string; const t1: string);
begin Self.Values[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsValues_R(Self: TStrings; var T: string; const t1: string);
begin T := Self.Values[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TStringsQuoteChar_W(Self: TStrings; const T: Char);
begin Self.QuoteChar := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsQuoteChar_R(Self: TStrings; var T: Char);
begin T := Self.QuoteChar; end;

(*----------------------------------------------------------------------------*)
procedure TStringsObjects_W(Self: TStrings; const T: TObject; const t1: Integer);
begin Self.Objects[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsObjects_R(Self: TStrings; var T: TObject; const t1: Integer);
begin T := Self.Objects[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TStringsNames_R(Self: TStrings; var T: string; const t1: Integer);
begin T := Self.Names[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TStringsLineBreak_W(Self: TStrings; const T: string);
begin Self.LineBreak := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsLineBreak_R(Self: TStrings; var T: string);
begin T := Self.LineBreak; end;

(*----------------------------------------------------------------------------*)
procedure TStringsDelimitedText_W(Self: TStrings; const T: string);
begin Self.DelimitedText := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsDelimitedText_R(Self: TStrings; var T: string);
begin T := Self.DelimitedText; end;

(*----------------------------------------------------------------------------*)
procedure TStringsDelimiter_W(Self: TStrings; const T: Char);
begin Self.Delimiter := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsDelimiter_R(Self: TStrings; var T: Char);
begin T := Self.Delimiter; end;

(*----------------------------------------------------------------------------*)
procedure TStringsCount_R(Self: TStrings; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TStringsCommaText_W(Self: TStrings; const T: string);
begin Self.CommaText := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsCommaText_R(Self: TStrings; var T: string);
begin T := Self.CommaText; end;

(*----------------------------------------------------------------------------*)
procedure TStringsCapacity_W(Self: TStrings; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringsCapacity_R(Self: TStrings; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
Procedure TStringsSaveToStream_P(Self: TStrings;  Stream : TStream; Encoding : TEncoding);
Begin Self.SaveToStream(Stream, Encoding); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsSaveToStream_P(Self: TStrings;  Stream : TStream);
Begin Self.SaveToStream(Stream); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsSaveToFile_P(Self: TStrings;  const FileName : string; Encoding : TEncoding);
Begin Self.SaveToFile(FileName, Encoding); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsSaveToFile_P(Self: TStrings;  const FileName : string);
Begin Self.SaveToFile(FileName); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsLoadFromStream_P(Self: TStrings;  Stream : TStream; Encoding : TEncoding);
Begin Self.LoadFromStream(Stream, Encoding); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsLoadFromStream_P(Self: TStrings;  Stream : TStream);
Begin Self.LoadFromStream(Stream); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsLoadFromFile_P(Self: TStrings;  const FileName : string; Encoding : TEncoding);
Begin Self.LoadFromFile(FileName, Encoding); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsLoadFromFile_P(Self: TStrings;  const FileName : string);
Begin Self.LoadFromFile(FileName); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsError_P(Self: TStrings;  Msg : PResStringRec; Data : Integer);
Begin Self.Error(Msg, Data); END;

(*----------------------------------------------------------------------------*)
Procedure TStringsError_P(Self: TStrings;  const Msg : string; Data : Integer);
Begin Self.Error(Msg, Data); END;

(*----------------------------------------------------------------------------*)
procedure TStringsEnumeratorCurrent_R(Self: TStringsEnumerator; var T: string);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItems_W(Self: TCollection; const T: TCollectionItem; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItems_R(Self: TCollection; var T: TCollectionItem; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemClass_R(Self: TCollection; var T: TCollectionItemClass);
begin T := Self.ItemClass; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionCount_R(Self: TCollection; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionCapacity_W(Self: TCollection; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionCapacity_R(Self: TCollection; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionEnumeratorCurrent_R(Self: TCollectionEnumerator; var T: TCollectionItem);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemDisplayName_W(Self: TCollectionItem; const T: string);
begin Self.DisplayName := T; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemDisplayName_R(Self: TCollectionItem; var T: string);
begin T := Self.DisplayName; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemIndex_W(Self: TCollectionItem; const T: Integer);
begin Self.Index := T; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemIndex_R(Self: TCollectionItem; var T: Integer);
begin T := Self.Index; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemID_R(Self: TCollectionItem; var T: Integer);
begin T := Self.ID; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemCollection_W(Self: TCollectionItem; const T: TCollection);
begin Self.Collection := T; end;

(*----------------------------------------------------------------------------*)
procedure TCollectionItemCollection_R(Self: TCollectionItem; var T: TCollection);
begin T := Self.Collection; end;

(*----------------------------------------------------------------------------*)
procedure TRecallReference_R(Self: TRecall; var T: TPersistent);
begin T := Self.Reference; end;

(*----------------------------------------------------------------------------*)
procedure TBitsSize_W(Self: TBits; const T: Integer);
begin Self.Size := T; end;

(*----------------------------------------------------------------------------*)
procedure TBitsSize_R(Self: TBits; var T: Integer);
begin T := Self.Size; end;

(*----------------------------------------------------------------------------*)
procedure TBitsBits_W(Self: TBits; const T: Boolean; const t1: Integer);
begin Self.Bits[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TBitsBits_R(Self: TBits; var T: Boolean; const t1: Integer);
begin T := Self.Bits[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceListItems_W(Self: TInterfaceList; const T: IInterface; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceListItems_R(Self: TInterfaceList; var T: IInterface; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceListCount_W(Self: TInterfaceList; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceListCount_R(Self: TInterfaceList; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceListCapacity_W(Self: TInterfaceList; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceListCapacity_R(Self: TInterfaceList; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceListEnumeratorCurrent_R(Self: TInterfaceListEnumerator; var T: IInterface);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
procedure TThreadListDuplicates_W(Self: TThreadList; const T: TDuplicates);
begin Self.Duplicates := T; end;

(*----------------------------------------------------------------------------*)
procedure TThreadListDuplicates_R(Self: TThreadList; var T: TDuplicates);
begin T := Self.Duplicates; end;

(*----------------------------------------------------------------------------*)
procedure TListList_R(Self: TList; var T: PPointerList);
begin T := Self.List; end;

(*----------------------------------------------------------------------------*)
procedure TListItems_W(Self: TList; const T: Pointer; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TListItems_R(Self: TList; var T: Pointer; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TListCount_W(Self: TList; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TListCount_R(Self: TList; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TListCapacity_W(Self: TList; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TListCapacity_R(Self: TList; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
Procedure TListError_P(Self: TList;  Msg : PResStringRec; Data : Integer);
Begin Self.Error(Msg, Data); END;

(*----------------------------------------------------------------------------*)
Procedure TListError_P(Self: TList;  const Msg : string; Data : Integer);
Begin Self.Error(Msg, Data); END;

(*----------------------------------------------------------------------------*)
procedure TListEnumeratorCurrent_R(Self: TListEnumerator; var T: Pointer);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStreamReader(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStreamReader) do
  begin
    RegisterConstructor(@TStreamReaderCreate_P, 'Create');
    RegisterConstructor(@TStreamReaderCreate_P, 'Create');
    RegisterConstructor(@TStreamReaderCreate_P, 'Create');
    RegisterConstructor(@TStreamReaderCreate_P, 'Create');
    RegisterConstructor(@TStreamReaderCreate_P, 'Create');
    RegisterConstructor(@TStreamReaderCreate_P, 'Create');
    RegisterMethod(@TStreamReader.DiscardBufferedData, 'DiscardBufferedData');
    RegisterPropertyHelper(@TStreamReaderBaseStream_R,nil,'BaseStream');
    RegisterPropertyHelper(@TStreamReaderCurrentEncoding_R,nil,'CurrentEncoding');
    RegisterPropertyHelper(@TStreamReaderEndOfStream_R,nil,'EndOfStream');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStreamWriter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStreamWriter) do
  begin
    RegisterConstructor(@TStreamWriterCreate_P, 'Create');
    RegisterConstructor(@TStreamWriterCreate_P, 'Create');
    RegisterConstructor(@TStreamWriterCreate_P, 'Create');
    RegisterConstructor(@TStreamWriterCreate_P, 'Create');
    RegisterPropertyHelper(@TStreamWriterAutoFlush_R,@TStreamWriterAutoFlush_W,'AutoFlush');
    RegisterPropertyHelper(@TStreamWriterNewLine_R,@TStreamWriterNewLine_W,'NewLine');
    RegisterPropertyHelper(@TStreamWriterEncoding_R,nil,'Encoding');
    RegisterPropertyHelper(@TStreamWriterBaseStream_R,nil,'BaseStream');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringWriter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringWriter) do
  begin
    RegisterConstructor(@TStringWriterCreate_P, 'Create');
    RegisterConstructor(@TStringWriterCreate_P, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringReader(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringReader) do
  begin
    RegisterConstructor(@TStringReader.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTextWriter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTextWriter) do
  begin
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Close, 'Close');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Flush, 'Flush');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.Write, 'Write');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
    RegisterVirtualAbstractMethod(@TTextWriter, @!.WriteLine, 'WriteLine');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTextReader(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTextReader) do
  begin
    RegisterVirtualAbstractMethod(@TTextReader, @!.Close, 'Close');
    RegisterVirtualAbstractMethod(@TTextReader, @!.Peek, 'Peek');
    RegisterVirtualAbstractMethod(@TTextReader, @!.Read, 'Read');
    RegisterVirtualAbstractMethod(@TTextReader, @!.Read, 'Read');
    RegisterVirtualAbstractMethod(@TTextReader, @!.ReadBlock, 'ReadBlock');
    RegisterVirtualAbstractMethod(@TTextReader, @!.ReadLine, 'ReadLine');
    RegisterVirtualAbstractMethod(@TTextReader, @!.ReadToEnd, 'ReadToEnd');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Classes_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Point, 'Point', cdRegister);
 S.RegisterDelphiFunction(@SmallPoint, 'SmallPoint', cdRegister);
 S.RegisterDelphiFunction(@PointsEqual, 'PointsEqual', cdRegister);
 S.RegisterDelphiFunction(@PointsEqual, 'PointsEqual', cdRegister);
 S.RegisterDelphiFunction(@InvalidPoint, 'InvalidPoint', cdRegister);
 S.RegisterDelphiFunction(@InvalidPoint, 'InvalidPoint', cdRegister);
 S.RegisterDelphiFunction(@InvalidPoint, 'InvalidPoint', cdRegister);
 S.RegisterDelphiFunction(@Rect, 'Rect', cdRegister);
 S.RegisterDelphiFunction(@Rect, 'Rect', cdRegister);
 S.RegisterDelphiFunction(@Bounds, 'Bounds', cdRegister);
 S.RegisterDelphiFunction(@RegisterClass, 'RegisterClass', cdRegister);
 S.RegisterDelphiFunction(@RegisterClasses, 'RegisterClasses', cdRegister);
 S.RegisterDelphiFunction(@RegisterClassAlias, 'RegisterClassAlias', cdRegister);
 S.RegisterDelphiFunction(@UnRegisterClass, 'UnRegisterClass', cdRegister);
 S.RegisterDelphiFunction(@UnRegisterClasses, 'UnRegisterClasses', cdRegister);
 S.RegisterDelphiFunction(@UnRegisterModuleClasses, 'UnRegisterModuleClasses', cdRegister);
 S.RegisterDelphiFunction(@FindClass, 'FindClass', cdRegister);
 S.RegisterDelphiFunction(@GetClass, 'GetClass', cdRegister);
 S.RegisterDelphiFunction(@StartClassGroup, 'StartClassGroup', cdRegister);
 S.RegisterDelphiFunction(@GroupDescendentsWith, 'GroupDescendentsWith', cdRegister);
 S.RegisterDelphiFunction(@ActivateClassGroup, 'ActivateClassGroup', cdRegister);
 S.RegisterDelphiFunction(@ActiveClassGroup, 'ActiveClassGroup', cdRegister);
 S.RegisterDelphiFunction(@ClassGroupOf, 'ClassGroupOf', cdRegister);
 S.RegisterDelphiFunction(@ClassGroupOf, 'ClassGroupOf', cdRegister);
 S.RegisterDelphiFunction(@RegisterComponents, 'RegisterComponents', cdRegister);
 S.RegisterDelphiFunction(@RegisterNoIcon, 'RegisterNoIcon', cdRegister);
 S.RegisterDelphiFunction(@RegisterNonActiveX, 'RegisterNonActiveX', cdRegister);
 S.RegisterDelphiFunction(@RegisterIntegerConsts, 'RegisterIntegerConsts', cdRegister);
 S.RegisterDelphiFunction(@UnregisterIntegerConsts, 'UnregisterIntegerConsts', cdRegister);
 S.RegisterDelphiFunction(@RegisterFindGlobalComponentProc, 'RegisterFindGlobalComponentProc', cdRegister);
 S.RegisterDelphiFunction(@UnregisterFindGlobalComponentProc, 'UnregisterFindGlobalComponentProc', cdRegister);
 S.RegisterDelphiFunction(@FindGlobalComponent, 'FindGlobalComponent', cdRegister);
 S.RegisterDelphiFunction(@IsUniqueGlobalComponentName, 'IsUniqueGlobalComponentName', cdRegister);
 S.RegisterDelphiFunction(@IdentToInt, 'IdentToInt', cdRegister);
 S.RegisterDelphiFunction(@IntToIdent, 'IntToIdent', cdRegister);
 S.RegisterDelphiFunction(@FindIntToIdent, 'FindIntToIdent', cdRegister);
 S.RegisterDelphiFunction(@FindIdentToInt, 'FindIdentToInt', cdRegister);
 S.RegisterDelphiFunction(@InitInheritedComponent, 'InitInheritedComponent', cdRegister);
 S.RegisterDelphiFunction(@InitComponentRes, 'InitComponentRes', cdRegister);
 S.RegisterDelphiFunction(@ReadComponentRes, 'ReadComponentRes', cdRegister);
 S.RegisterDelphiFunction(@ReadComponentResEx, 'ReadComponentResEx', cdRegister);
 S.RegisterDelphiFunction(@ReadComponentResFile, 'ReadComponentResFile', cdRegister);
 S.RegisterDelphiFunction(@WriteComponentResFile, 'WriteComponentResFile', cdRegister);
 S.RegisterDelphiFunction(@GlobalFixupReferences, 'GlobalFixupReferences', cdRegister);
 S.RegisterDelphiFunction(@GetFixupReferenceNames, 'GetFixupReferenceNames', cdRegister);
 S.RegisterDelphiFunction(@GetFixupInstanceNames, 'GetFixupInstanceNames', cdRegister);
 S.RegisterDelphiFunction(@RedirectFixupReferences, 'RedirectFixupReferences', cdRegister);
 S.RegisterDelphiFunction(@RemoveFixupReferences, 'RemoveFixupReferences', cdRegister);
 S.RegisterDelphiFunction(@RemoveFixups, 'RemoveFixups', cdRegister);
 S.RegisterDelphiFunction(@FindNestedComponent, 'FindNestedComponent', cdRegister);
 S.RegisterDelphiFunction(@BeginGlobalLoading, 'BeginGlobalLoading', cdRegister);
 S.RegisterDelphiFunction(@NotifyGlobalLoading, 'NotifyGlobalLoading', cdRegister);
 S.RegisterDelphiFunction(@EndGlobalLoading, 'EndGlobalLoading', cdRegister);
 S.RegisterDelphiFunction(@CollectionsEqual, 'CollectionsEqual', cdRegister);
 S.RegisterDelphiFunction(@GetUltimateOwner, 'GetUltimateOwner', cdRegister);
 S.RegisterDelphiFunction(@GetUltimateOwner, 'GetUltimateOwner', cdRegister);
 S.RegisterDelphiFunction(@GetUltimateOwner, 'GetUltimateOwner', cdRegister);
 S.RegisterDelphiFunction(@ObjectBinaryToText, 'ObjectBinaryToText', cdRegister);
 S.RegisterDelphiFunction(@ObjectBinaryToText, 'ObjectBinaryToText', cdRegister);
 S.RegisterDelphiFunction(@ObjectTextToBinary, 'ObjectTextToBinary', cdRegister);
 S.RegisterDelphiFunction(@ObjectTextToBinary, 'ObjectTextToBinary', cdRegister);
 S.RegisterDelphiFunction(@ObjectResourceToText, 'ObjectResourceToText', cdRegister);
 S.RegisterDelphiFunction(@ObjectResourceToText, 'ObjectResourceToText', cdRegister);
 S.RegisterDelphiFunction(@ObjectTextToResource, 'ObjectTextToResource', cdRegister);
 S.RegisterDelphiFunction(@ObjectTextToResource, 'ObjectTextToResource', cdRegister);
 S.RegisterDelphiFunction(@TestStreamFormat, 'TestStreamFormat', cdRegister);
 S.RegisterDelphiFunction(@GetResourceName, 'GetResourceName', cdRegister);
 S.RegisterDelphiFunction(@WriteObjectResourceHeader, 'WriteObjectResourceHeader', cdRegister);
 S.RegisterDelphiFunction(@Write16bitResourceHeader, 'Write16bitResourceHeader', cdRegister);
 S.RegisterDelphiFunction(@Write32bitResourceHeader, 'Write32bitResourceHeader', cdRegister);
 S.RegisterDelphiFunction(@LineStart, 'LineStart', cdRegister);
 S.RegisterDelphiFunction(@LineStart, 'LineStart', cdRegister);
 S.RegisterDelphiFunction(@LineStart, 'LineStart', cdRegister);
 S.RegisterDelphiFunction(@ExtractStrings, 'ExtractStrings', cdRegister);
 S.RegisterDelphiFunction(@BinToHex, 'BinToHex', cdRegister);
 S.RegisterDelphiFunction(@BinToHex, 'BinToHex', cdRegister);
 S.RegisterDelphiFunction(@BinToHex, 'BinToHex', cdRegister);
 S.RegisterDelphiFunction(@BinToHex, 'BinToHex', cdRegister);
 S.RegisterDelphiFunction(@BinToHex, 'BinToHex', cdRegister);
 S.RegisterDelphiFunction(@BinToHex, 'BinToHex', cdRegister);
 S.RegisterDelphiFunction(@HexToBin, 'HexToBin', cdRegister);
 S.RegisterDelphiFunction(@HexToBin, 'HexToBin', cdRegister);
 S.RegisterDelphiFunction(@HexToBin, 'HexToBin', cdRegister);
 S.RegisterDelphiFunction(@HexToBin, 'HexToBin', cdRegister);
 S.RegisterDelphiFunction(@HexToBin, 'HexToBin', cdRegister);
 S.RegisterDelphiFunction(@HexToBin, 'HexToBin', cdRegister);
 S.RegisterDelphiFunction(@FindRootDesigner, 'FindRootDesigner', cdRegister);
 S.RegisterDelphiFunction(@CountGenerations, 'CountGenerations', cdRegister);
 S.RegisterDelphiFunction(@CheckSynchronize, 'CheckSynchronize', cdRegister);
  RIRegister_TTextReader(CL);
  RIRegister_TTextWriter(CL);
  RIRegister_TStringReader(CL);
  RIRegister_TStringWriter(CL);
  RIRegister_TStreamWriter(CL);
  RIRegister_TStreamReader(CL);
 S.RegisterDelphiFunction(@MakeObjectInstance, 'MakeObjectInstance', cdRegister);
 S.RegisterDelphiFunction(@FreeObjectInstance, 'FreeObjectInstance', cdRegister);
 S.RegisterDelphiFunction(@AllocateHWnd, 'AllocateHWnd', cdRegister);
 S.RegisterDelphiFunction(@DeallocateHWnd, 'DeallocateHWnd', cdRegister);
 S.RegisterDelphiFunction(@AncestorIsValid, 'AncestorIsValid', cdRegister);
 S.RegisterDelphiFunction(@IsDefaultPropertyValue, 'IsDefaultPropertyValue', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDataModule(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDataModule) do
  begin
    RegisterVirtualConstructor(@TDataModule.CreateNew, 'CreateNew');
    RegisterPropertyHelper(@TDataModuleDesignOffset_R,@TDataModuleDesignOffset_W,'DesignOffset');
    RegisterPropertyHelper(@TDataModuleDesignSize_R,@TDataModuleDesignSize_W,'DesignSize');
    RegisterPropertyHelper(@TDataModuleOldCreateOrder_R,@TDataModuleOldCreateOrder_W,'OldCreateOrder');
    RegisterPropertyHelper(@TDataModuleOnCreate_R,@TDataModuleOnCreate_W,'OnCreate');
    RegisterPropertyHelper(@TDataModuleOnDestroy_R,@TDataModuleOnDestroy_W,'OnDestroy');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBasicAction(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBasicAction) do
  begin
    RegisterVirtualMethod(@TBasicAction.HandlesTarget, 'HandlesTarget');
    RegisterVirtualMethod(@TBasicAction.UpdateTarget, 'UpdateTarget');
    RegisterVirtualMethod(@TBasicAction.ExecuteTarget, 'ExecuteTarget');
    RegisterVirtualMethod(@TBasicAction.Execute, 'Execute');
    RegisterMethod(@TBasicAction.RegisterChanges, 'RegisterChanges');
    RegisterMethod(@TBasicAction.UnRegisterChanges, 'UnRegisterChanges');
    RegisterVirtualMethod(@TBasicAction.Update, 'Update');
    RegisterPropertyHelper(@TBasicActionActionComponent_R,@TBasicActionActionComponent_W,'ActionComponent');
    RegisterPropertyHelper(@TBasicActionOnExecute_R,@TBasicActionOnExecute_W,'OnExecute');
    RegisterPropertyHelper(@TBasicActionOnUpdate_R,@TBasicActionOnUpdate_W,'OnUpdate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBasicActionLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBasicActionLink) do
  begin
    RegisterVirtualConstructor(@TBasicActionLink.Create, 'Create');
    RegisterVirtualMethod(@TBasicActionLink.Execute, 'Execute');
    RegisterVirtualMethod(@TBasicActionLink.Update, 'Update');
    RegisterPropertyHelper(@TBasicActionLinkAction_R,@TBasicActionLinkAction_W,'Action');
    RegisterPropertyHelper(@TBasicActionLinkOnChange_R,@TBasicActionLinkOnChange_W,'OnChange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TComponentEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TComponentEnumerator) do
  begin
    RegisterConstructor(@TComponentEnumerator.Create, 'Create');
    RegisterMethod(@TComponentEnumerator.GetCurrent, 'GetCurrent');
    RegisterMethod(@TComponentEnumerator.MoveNext, 'MoveNext');
    RegisterPropertyHelper(@TComponentEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWriter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWriter) do
  begin
    RegisterMethod(@TWriter.Write, 'Write');
    RegisterMethod(@TWriter.WriteBoolean, 'WriteBoolean');
    RegisterMethod(@TWriter.WriteCollection, 'WriteCollection');
    RegisterMethod(@TWriter.WriteComponent, 'WriteComponent');
    RegisterMethod(@TWriter.WriteChar, 'WriteChar');
    RegisterMethod(@TWriter.WriteWideChar, 'WriteWideChar');
    RegisterMethod(@TWriter.WriteDescendent, 'WriteDescendent');
    RegisterMethod(@TWriter.WriteFloat, 'WriteFloat');
    RegisterMethod(@TWriter.WriteSingle, 'WriteSingle');
    RegisterMethod(@TWriter.WriteDouble, 'WriteDouble');
    RegisterMethod(@TWriter.WriteCurrency, 'WriteCurrency');
    RegisterMethod(@TWriter.WriteDate, 'WriteDate');
    RegisterMethod(@TWriter.WriteIdent, 'WriteIdent');
    RegisterMethod(@TWriterWriteInteger_P, 'WriteInteger');
    RegisterMethod(@TWriterWriteInteger_P, 'WriteInteger');
    RegisterMethod(@TWriter.WriteListBegin, 'WriteListBegin');
    RegisterMethod(@TWriter.WriteListEnd, 'WriteListEnd');
    RegisterMethod(@TWriter.WriteRootComponent, 'WriteRootComponent');
    RegisterMethod(@TWriter.WriteSignature, 'WriteSignature');
    RegisterMethod(@TWriter.WriteStr, 'WriteStr');
    RegisterMethod(@TWriter.WriteUTF8Str, 'WriteUTF8Str');
    RegisterMethod(@TWriter.WriteString, 'WriteString');
    RegisterMethod(@TWriter.WriteWideString, 'WriteWideString');
    RegisterMethod(@TWriter.WriteVariant, 'WriteVariant');
    RegisterPropertyHelper(@TWriterPosition_R,@TWriterPosition_W,'Position');
    RegisterPropertyHelper(@TWriterRootAncestor_R,@TWriterRootAncestor_W,'RootAncestor');
    RegisterPropertyHelper(@TWriterOnFindAncestor_R,@TWriterOnFindAncestor_W,'OnFindAncestor');
    RegisterPropertyHelper(@TWriterOnFindMethodName_R,@TWriterOnFindMethodName_W,'OnFindMethodName');
    RegisterPropertyHelper(@TWriterUseQualifiedNames_R,@TWriterUseQualifiedNames_W,'UseQualifiedNames');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TReader(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TReader) do
  begin
    RegisterMethod(@TReader.BeginReferences, 'BeginReferences');
    RegisterMethod(@TReader.CheckValue, 'CheckValue');
    RegisterMethod(@TReader.EndOfList, 'EndOfList');
    RegisterMethod(@TReader.EndReferences, 'EndReferences');
    RegisterMethod(@TReader.FixupReferences, 'FixupReferences');
    RegisterMethod(@TReader.NextValue, 'NextValue');
    RegisterMethod(@TReader.Read, 'Read');
    RegisterMethod(@TReader.ReadBoolean, 'ReadBoolean');
    RegisterMethod(@TReader.ReadChar, 'ReadChar');
    RegisterMethod(@TReader.ReadWideChar, 'ReadWideChar');
    RegisterMethod(@TReader.ReadCollection, 'ReadCollection');
    RegisterMethod(@TReader.ReadComponent, 'ReadComponent');
    RegisterMethod(@TReader.ReadComponents, 'ReadComponents');
    RegisterMethod(@TReader.ReadFloat, 'ReadFloat');
    RegisterMethod(@TReader.ReadSingle, 'ReadSingle');
    RegisterMethod(@TReader.ReadDouble, 'ReadDouble');
    RegisterMethod(@TReader.ReadCurrency, 'ReadCurrency');
    RegisterMethod(@TReader.ReadDate, 'ReadDate');
    RegisterMethod(@TReader.ReadIdent, 'ReadIdent');
    RegisterMethod(@TReader.ReadInteger, 'ReadInteger');
    RegisterMethod(@TReader.ReadInt64, 'ReadInt64');
    RegisterMethod(@TReader.ReadListBegin, 'ReadListBegin');
    RegisterMethod(@TReader.ReadListEnd, 'ReadListEnd');
    RegisterVirtualMethod(@TReader.ReadPrefix, 'ReadPrefix');
    RegisterMethod(@TReader.ReadRootComponent, 'ReadRootComponent');
    RegisterMethod(@TReader.ReadSignature, 'ReadSignature');
    RegisterMethod(@TReader.ReadStr, 'ReadStr');
    RegisterMethod(@TReader.ReadString, 'ReadString');
    RegisterMethod(@TReader.ReadWideString, 'ReadWideString');
    RegisterMethod(@TReader.ReadValue, 'ReadValue');
    RegisterMethod(@TReader.ReadVariant, 'ReadVariant');
    RegisterMethod(@TReader.CopyValue, 'CopyValue');
    RegisterMethod(@TReader.SkipValue, 'SkipValue');
    RegisterPropertyHelper(@TReaderOwner_R,@TReaderOwner_W,'Owner');
    RegisterPropertyHelper(@TReaderParent_R,@TReaderParent_W,'Parent');
    RegisterPropertyHelper(@TReaderPosition_R,@TReaderPosition_W,'Position');
    RegisterPropertyHelper(@TReaderOnError_R,@TReaderOnError_W,'OnError');
    RegisterPropertyHelper(@TReaderOnFindMethod_R,@TReaderOnFindMethod_W,'OnFindMethod');
    RegisterPropertyHelper(@TReaderOnFindMethodInstance_R,@TReaderOnFindMethodInstance_W,'OnFindMethodInstance');
    RegisterPropertyHelper(@TReaderOnSetName_R,@TReaderOnSetName_W,'OnSetName');
    RegisterPropertyHelper(@TReaderOnReferenceName_R,@TReaderOnReferenceName_W,'OnReferenceName');
    RegisterPropertyHelper(@TReaderOnAncestorNotFound_R,@TReaderOnAncestorNotFound_W,'OnAncestorNotFound');
    RegisterPropertyHelper(@TReaderOnCreateComponent_R,@TReaderOnCreateComponent_W,'OnCreateComponent');
    RegisterPropertyHelper(@TReaderOnFindComponentClass_R,@TReaderOnFindComponentClass_W,'OnFindComponentClass');
    RegisterPropertyHelper(@TReaderOnFindComponentInstance_R,@TReaderOnFindComponentInstance_W,'OnFindComponentInstance');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFiler(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFiler) do
  begin
    RegisterConstructor(@TFiler.Create, 'Create');
    RegisterVirtualAbstractMethod(@TFiler, @!.DefineProperty, 'DefineProperty');
    RegisterVirtualAbstractMethod(@TFiler, @!.DefineBinaryProperty, 'DefineBinaryProperty');
    RegisterVirtualAbstractMethod(@TFiler, @!.FlushBuffer, 'FlushBuffer');
    RegisterPropertyHelper(@TFilerRoot_R,@TFilerRoot_W,'Root');
    RegisterPropertyHelper(@TFilerLookupRoot_R,nil,'LookupRoot');
    RegisterPropertyHelper(@TFilerAncestor_R,@TFilerAncestor_W,'Ancestor');
    RegisterPropertyHelper(@TFilerIgnoreChildren_R,@TFilerIgnoreChildren_W,'IgnoreChildren');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TClassFinder(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TClassFinder) do
  begin
    RegisterConstructor(@TClassFinder.Create, 'Create');
    RegisterMethod(@TClassFinder.GetClass, 'GetClass');
    RegisterMethod(@TClassFinder.GetClasses, 'GetClasses');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStreamAdapter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStreamAdapter) do
  begin
    RegisterConstructor(@TStreamAdapter.Create, 'Create');
    RegisterVirtualMethod(@TStreamAdapter.Read, 'Read');
    RegisterVirtualMethod(@TStreamAdapter.Write, 'Write');
    RegisterVirtualMethod(@TStreamAdapter.Seek, 'Seek');
    RegisterVirtualMethod(@TStreamAdapter.SetSize, 'SetSize');
    RegisterVirtualMethod(@TStreamAdapter.CopyTo, 'CopyTo');
    RegisterVirtualMethod(@TStreamAdapter.Commit, 'Commit');
    RegisterVirtualMethod(@TStreamAdapter.Revert, 'Revert');
    RegisterVirtualMethod(@TStreamAdapter.LockRegion, 'LockRegion');
    RegisterVirtualMethod(@TStreamAdapter.UnlockRegion, 'UnlockRegion');
    RegisterVirtualMethod(@TStreamAdapter.Stat, 'Stat');
    RegisterVirtualMethod(@TStreamAdapter.Clone, 'Clone');
    RegisterPropertyHelper(@TStreamAdapterStream_R,nil,'Stream');
    RegisterPropertyHelper(@TStreamAdapterStreamOwnership_R,@TStreamAdapterStreamOwnership_W,'StreamOwnership');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TResourceStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TResourceStream) do
  begin
    RegisterConstructor(@TResourceStream.Create, 'Create');
    RegisterConstructor(@TResourceStream.CreateFromID, 'CreateFromID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBytesStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBytesStream) do
  begin
    RegisterConstructor(@TBytesStreamCreate_P, 'Create');
    RegisterPropertyHelper(@TBytesStreamBytes_R,nil,'Bytes');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMemoryStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMemoryStream) do
  begin
    RegisterMethod(@TMemoryStream.Clear, 'Clear');
    RegisterMethod(@TMemoryStream.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TMemoryStream.LoadFromFile, 'LoadFromFile');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomMemoryStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomMemoryStream) do
  begin
    RegisterMethod(@TCustomMemoryStream.SaveToStream, 'SaveToStream');
    RegisterMethod(@TCustomMemoryStream.SaveToFile, 'SaveToFile');
    RegisterPropertyHelper(@TCustomMemoryStreamMemory_R,nil,'Memory');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFileStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFileStream) do
  begin
    RegisterConstructor(@TFileStreamCreate_P, 'Create');
    RegisterConstructor(@TFileStreamCreate_P, 'Create');
    RegisterPropertyHelper(@TFileStreamFileName_R,nil,'FileName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THandleStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THandleStream) do
  begin
    RegisterConstructor(@THandleStream.Create, 'Create');
    RegisterPropertyHelper(@THandleStreamHandle_R,nil,'Handle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStream) do
  begin
    RegisterVirtualAbstractMethod(@TStream, @!.Read, 'Read');
    RegisterVirtualAbstractMethod(@TStream, @!.Write, 'Write');
    RegisterVirtualMethod(@TStreamSeek_P, 'Seek');
    RegisterVirtualMethod(@TStreamSeek_P, 'Seek');
    RegisterMethod(@TStream.ReadBuffer, 'ReadBuffer');
    RegisterMethod(@TStream.WriteBuffer, 'WriteBuffer');
    RegisterMethod(@TStream.CopyFrom, 'CopyFrom');
    RegisterMethod(@TStream.ReadComponent, 'ReadComponent');
    RegisterMethod(@TStream.ReadComponentRes, 'ReadComponentRes');
    RegisterMethod(@TStream.WriteComponent, 'WriteComponent');
    RegisterMethod(@TStream.WriteComponentRes, 'WriteComponentRes');
    RegisterMethod(@TStream.WriteDescendent, 'WriteDescendent');
    RegisterMethod(@TStream.WriteDescendentRes, 'WriteDescendentRes');
    RegisterMethod(@TStream.WriteResourceHeader, 'WriteResourceHeader');
    RegisterMethod(@TStream.FixupResourceHeader, 'FixupResourceHeader');
    RegisterMethod(@TStream.ReadResHeader, 'ReadResHeader');
    RegisterPropertyHelper(@TStreamPosition_R,@TStreamPosition_W,'Position');
    RegisterPropertyHelper(@TStreamSize_R,@TStreamSize_W,'Size');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringList) do
  begin
    RegisterConstructor(@TStringListCreate_P, 'Create');
    RegisterConstructor(@TStringListCreate_P, 'Create');
    RegisterVirtualMethod(@TStringList.Find, 'Find');
    RegisterVirtualMethod(@TStringList.Sort, 'Sort');
    RegisterVirtualMethod(@TStringList.CustomSort, 'CustomSort');
    RegisterPropertyHelper(@TStringListDuplicates_R,@TStringListDuplicates_W,'Duplicates');
    RegisterPropertyHelper(@TStringListSorted_R,@TStringListSorted_W,'Sorted');
    RegisterPropertyHelper(@TStringListCaseSensitive_R,@TStringListCaseSensitive_W,'CaseSensitive');
    RegisterPropertyHelper(@TStringListOnChange_R,@TStringListOnChange_W,'OnChange');
    RegisterPropertyHelper(@TStringListOnChanging_R,@TStringListOnChanging_W,'OnChanging');
    RegisterPropertyHelper(@TStringListOwnsObjects_R,@TStringListOwnsObjects_W,'OwnsObjects');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStrings(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStrings) do
  begin
    RegisterVirtualMethod(@TStrings.Add, 'Add');
    RegisterVirtualMethod(@TStrings.AddObject, 'AddObject');
    RegisterMethod(@TStrings.Append, 'Append');
    RegisterVirtualMethod(@TStrings.AddStrings, 'AddStrings');
    RegisterMethod(@TStrings.BeginUpdate, 'BeginUpdate');
    RegisterVirtualAbstractMethod(@TStrings, @!.Clear, 'Clear');
    RegisterVirtualAbstractMethod(@TStrings, @!.Delete, 'Delete');
    RegisterMethod(@TStrings.EndUpdate, 'EndUpdate');
    RegisterMethod(@TStrings.Equals, 'Equals');
    RegisterVirtualMethod(@TStrings.Exchange, 'Exchange');
    RegisterMethod(@TStrings.GetEnumerator, 'GetEnumerator');
    RegisterVirtualMethod(@TStrings.GetText, 'GetText');
    RegisterVirtualMethod(@TStrings.IndexOf, 'IndexOf');
    RegisterVirtualMethod(@TStrings.IndexOfName, 'IndexOfName');
    RegisterVirtualMethod(@TStrings.IndexOfObject, 'IndexOfObject');
    RegisterVirtualAbstractMethod(@TStrings, @!.Insert, 'Insert');
    RegisterVirtualMethod(@TStrings.InsertObject, 'InsertObject');
    RegisterVirtualMethod(@TStringsLoadFromFile_P, 'LoadFromFile');
    RegisterVirtualMethod(@TStringsLoadFromFile_P, 'LoadFromFile');
    RegisterVirtualMethod(@TStringsLoadFromStream_P, 'LoadFromStream');
    RegisterVirtualMethod(@TStringsLoadFromStream_P, 'LoadFromStream');
    RegisterVirtualMethod(@TStrings.Move, 'Move');
    RegisterVirtualMethod(@TStringsSaveToFile_P, 'SaveToFile');
    RegisterVirtualMethod(@TStringsSaveToFile_P, 'SaveToFile');
    RegisterVirtualMethod(@TStringsSaveToStream_P, 'SaveToStream');
    RegisterVirtualMethod(@TStringsSaveToStream_P, 'SaveToStream');
    RegisterVirtualMethod(@TStrings.SetText, 'SetText');
    RegisterPropertyHelper(@TStringsCapacity_R,@TStringsCapacity_W,'Capacity');
    RegisterPropertyHelper(@TStringsCommaText_R,@TStringsCommaText_W,'CommaText');
    RegisterPropertyHelper(@TStringsCount_R,nil,'Count');
    RegisterPropertyHelper(@TStringsDelimiter_R,@TStringsDelimiter_W,'Delimiter');
    RegisterPropertyHelper(@TStringsDelimitedText_R,@TStringsDelimitedText_W,'DelimitedText');
    RegisterPropertyHelper(@TStringsLineBreak_R,@TStringsLineBreak_W,'LineBreak');
    RegisterPropertyHelper(@TStringsNames_R,nil,'Names');
    RegisterPropertyHelper(@TStringsObjects_R,@TStringsObjects_W,'Objects');
    RegisterPropertyHelper(@TStringsQuoteChar_R,@TStringsQuoteChar_W,'QuoteChar');
    RegisterPropertyHelper(@TStringsValues_R,@TStringsValues_W,'Values');
    RegisterPropertyHelper(@TStringsValueFromIndex_R,@TStringsValueFromIndex_W,'ValueFromIndex');
    RegisterPropertyHelper(@TStringsNameValueSeparator_R,@TStringsNameValueSeparator_W,'NameValueSeparator');
    RegisterPropertyHelper(@TStringsStrictDelimiter_R,@TStringsStrictDelimiter_W,'StrictDelimiter');
    RegisterPropertyHelper(@TStringsStrings_R,@TStringsStrings_W,'Strings');
    RegisterPropertyHelper(@TStringsText_R,@TStringsText_W,'Text');
    RegisterPropertyHelper(@TStringsStringsAdapter_R,@TStringsStringsAdapter_W,'StringsAdapter');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringsEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringsEnumerator) do
  begin
    RegisterConstructor(@TStringsEnumerator.Create, 'Create');
    RegisterMethod(@TStringsEnumerator.GetCurrent, 'GetCurrent');
    RegisterMethod(@TStringsEnumerator.MoveNext, 'MoveNext');
    RegisterPropertyHelper(@TStringsEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TOwnedCollection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TOwnedCollection) do
  begin
    RegisterConstructor(@TOwnedCollection.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCollection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCollection) do
  begin
    RegisterConstructor(@TCollection.Create, 'Create');
    RegisterMethod(@TCollection.Owner, 'Owner');
    RegisterMethod(@TCollection.Add, 'Add');
    RegisterVirtualMethod(@TCollection.BeginUpdate, 'BeginUpdate');
    RegisterMethod(@TCollection.Clear, 'Clear');
    RegisterMethod(@TCollection.Delete, 'Delete');
    RegisterVirtualMethod(@TCollection.EndUpdate, 'EndUpdate');
    RegisterMethod(@TCollection.FindItemID, 'FindItemID');
    RegisterMethod(@TCollection.GetEnumerator, 'GetEnumerator');
    RegisterMethod(@TCollection.Insert, 'Insert');
    RegisterPropertyHelper(@TCollectionCapacity_R,@TCollectionCapacity_W,'Capacity');
    RegisterPropertyHelper(@TCollectionCount_R,nil,'Count');
    RegisterPropertyHelper(@TCollectionItemClass_R,nil,'ItemClass');
    RegisterPropertyHelper(@TCollectionItems_R,@TCollectionItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCollectionEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCollectionEnumerator) do
  begin
    RegisterConstructor(@TCollectionEnumerator.Create, 'Create');
    RegisterMethod(@TCollectionEnumerator.GetCurrent, 'GetCurrent');
    RegisterMethod(@TCollectionEnumerator.MoveNext, 'MoveNext');
    RegisterPropertyHelper(@TCollectionEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCollectionItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCollectionItem) do
  begin
    RegisterVirtualConstructor(@TCollectionItem.Create, 'Create');
    RegisterPropertyHelper(@TCollectionItemCollection_R,@TCollectionItemCollection_W,'Collection');
    RegisterPropertyHelper(@TCollectionItemID_R,nil,'ID');
    RegisterPropertyHelper(@TCollectionItemIndex_R,@TCollectionItemIndex_W,'Index');
    RegisterPropertyHelper(@TCollectionItemDisplayName_R,@TCollectionItemDisplayName_W,'DisplayName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRecall(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRecall) do
  begin
    RegisterConstructor(@TRecall.Create, 'Create');
    RegisterMethod(@TRecall.Store, 'Store');
    RegisterMethod(@TRecall.Forget, 'Forget');
    RegisterPropertyHelper(@TRecallReference_R,nil,'Reference');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfacedPersistent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfacedPersistent) do
  begin
    RegisterVirtualMethod(@TInterfacedPersistent.QueryInterface, 'QueryInterface');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPersistent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPersistent) do
  begin
    RegisterVirtualMethod(@TPersistent.Assign, 'Assign');
    RegisterVirtualMethod(@TPersistent.GetNamePath, 'GetNamePath');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBits(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBits) do
  begin
    RegisterMethod(@TBits.OpenBit, 'OpenBit');
    RegisterPropertyHelper(@TBitsBits_R,@TBitsBits_W,'Bits');
    RegisterPropertyHelper(@TBitsSize_R,@TBitsSize_W,'Size');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfaceList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfaceList) do
  begin
    RegisterConstructor(@TInterfaceList.Create, 'Create');
    RegisterMethod(@TInterfaceList.Clear, 'Clear');
    RegisterMethod(@TInterfaceList.Delete, 'Delete');
    RegisterMethod(@TInterfaceList.Exchange, 'Exchange');
    RegisterMethod(@TInterfaceList.Expand, 'Expand');
    RegisterMethod(@TInterfaceList.First, 'First');
    RegisterMethod(@TInterfaceList.IndexOf, 'IndexOf');
    RegisterMethod(@TInterfaceList.Add, 'Add');
    RegisterMethod(@TInterfaceList.Insert, 'Insert');
    RegisterMethod(@TInterfaceList.Last, 'Last');
    RegisterMethod(@TInterfaceList.Remove, 'Remove');
    RegisterMethod(@TInterfaceList.Lock, 'Lock');
    RegisterMethod(@TInterfaceList.Unlock, 'Unlock');
    RegisterMethod(@TInterfaceList.GetEnumerator, 'GetEnumerator');
    RegisterPropertyHelper(@TInterfaceListCapacity_R,@TInterfaceListCapacity_W,'Capacity');
    RegisterPropertyHelper(@TInterfaceListCount_R,@TInterfaceListCount_W,'Count');
    RegisterPropertyHelper(@TInterfaceListItems_R,@TInterfaceListItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfaceListEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfaceListEnumerator) do
  begin
    RegisterConstructor(@TInterfaceListEnumerator.Create, 'Create');
    RegisterMethod(@TInterfaceListEnumerator.GetCurrent, 'GetCurrent');
    RegisterMethod(@TInterfaceListEnumerator.MoveNext, 'MoveNext');
    RegisterPropertyHelper(@TInterfaceListEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TThreadList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TThreadList) do
  begin
    RegisterConstructor(@TThreadList.Create, 'Create');
    RegisterMethod(@TThreadList.Add, 'Add');
    RegisterMethod(@TThreadList.Clear, 'Clear');
    RegisterMethod(@TThreadList.LockList, 'LockList');
    RegisterMethod(@TThreadList.Remove, 'Remove');
    RegisterMethod(@TThreadList.UnlockList, 'UnlockList');
    RegisterPropertyHelper(@TThreadListDuplicates_R,@TThreadListDuplicates_W,'Duplicates');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TList) do
  begin
    RegisterMethod(@TList.Add, 'Add');
    RegisterVirtualMethod(@TList.Clear, 'Clear');
    RegisterMethod(@TList.Delete, 'Delete');
    RegisterVirtualMethod(@TListError_P, 'Error');
    RegisterMethod(@TListError_P, 'Error');
    RegisterMethod(@TList.Exchange, 'Exchange');
    RegisterMethod(@TList.Expand, 'Expand');
    RegisterMethod(@TList.Extract, 'Extract');
    RegisterMethod(@TList.First, 'First');
    RegisterMethod(@TList.GetEnumerator, 'GetEnumerator');
    RegisterMethod(@TList.IndexOf, 'IndexOf');
    RegisterMethod(@TList.Insert, 'Insert');
    RegisterMethod(@TList.Last, 'Last');
    RegisterMethod(@TList.Move, 'Move');
    RegisterMethod(@TList.Remove, 'Remove');
    RegisterMethod(@TList.Pack, 'Pack');
    RegisterMethod(@TList.Sort, 'Sort');
    RegisterMethod(@TList.Assign, 'Assign');
    RegisterPropertyHelper(@TListCapacity_R,@TListCapacity_W,'Capacity');
    RegisterPropertyHelper(@TListCount_R,@TListCount_W,'Count');
    RegisterPropertyHelper(@TListItems_R,@TListItems_W,'Items');
    RegisterPropertyHelper(@TListList_R,nil,'List');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TListEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TListEnumerator) do
  begin
    RegisterConstructor(@TListEnumerator.Create, 'Create');
    RegisterMethod(@TListEnumerator.GetCurrent, 'GetCurrent');
    RegisterMethod(@TListEnumerator.MoveNext, 'MoveNext');
    RegisterPropertyHelper(@TListEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EFileStreamError(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EFileStreamError) do
  begin
    RegisterConstructor(@EFileStreamError.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Classes(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EStreamError) do
  RIRegister_EFileStreamError(CL);
  with CL.Add(EFCreateError) do
  with CL.Add(EFOpenError) do
  with CL.Add(EFilerError) do
  with CL.Add(EReadError) do
  with CL.Add(EWriteError) do
  with CL.Add(EClassNotFound) do
  with CL.Add(EMethodNotFound) do
  with CL.Add(EInvalidImage) do
  with CL.Add(EResNotFound) do
  with CL.Add(EListError) do
  with CL.Add(EBitsError) do
  with CL.Add(EStringListError) do
  with CL.Add(EComponentError) do
  with CL.Add(EParserError) do
  with CL.Add(EOutOfResources) do
  with CL.Add(EInvalidOperation) do
  with CL.Add(TStream) do
  with CL.Add(TFiler) do
  with CL.Add(TReader) do
  with CL.Add(TWriter) do
  with CL.Add(TComponent) do
  with CL.Add(TList) do
  RIRegister_TListEnumerator(CL);
  RIRegister_TList(CL);
  RIRegister_TThreadList(CL);
  with CL.Add(TInterfaceListEnumerator) do
  with CL.Add(TInterfaceList) do
  RIRegister_TInterfaceListEnumerator(CL);
  RIRegister_TInterfaceList(CL);
  RIRegister_TBits(CL);
  RIRegister_TPersistent(CL);
  RIRegister_TInterfacedPersistent(CL);
  RIRegister_TRecall(CL);
  with CL.Add(TCollection) do
  RIRegister_TCollectionItem(CL);
  RIRegister_TCollectionEnumerator(CL);
  RIRegister_TCollection(CL);
  RIRegister_TOwnedCollection(CL);
  with CL.Add(TStrings) do
  RIRegister_TStringsEnumerator(CL);
  RIRegister_TStrings(CL);
  with CL.Add(TStringList) do
  RIRegister_TStringList(CL);
  RIRegister_TStream(CL);
  RIRegister_THandleStream(CL);
  RIRegister_TFileStream(CL);
  RIRegister_TCustomMemoryStream(CL);
  RIRegister_TMemoryStream(CL);
  RIRegister_TBytesStream(CL);
  RIRegister_TResourceStream(CL);
  RIRegister_TStreamAdapter(CL);
  RIRegister_TClassFinder(CL);
  RIRegister_TFiler(CL);
  RIRegister_TReader(CL);
  RIRegister_TWriter(CL);
  RIRegister_TComponentEnumerator(CL);
  with CL.Add(TBasicAction) do
  RIRegister_TBasicActionLink(CL);
  RIRegister_TBasicAction(CL);
  RIRegister_TDataModule(CL);
end;

 
 
{ TPSImport_Classes }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Classes.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Classes(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Classes.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Classes_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
