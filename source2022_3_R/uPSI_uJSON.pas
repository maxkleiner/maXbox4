unit uPSI_uJSON;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uJSON = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_NULL(CL: TPSPascalCompiler);
procedure SIRegister__String(CL: TPSPascalCompiler);
procedure SIRegister__Integer(CL: TPSPascalCompiler);
procedure SIRegister__Double(CL: TPSPascalCompiler);
procedure SIRegister__Boolean(CL: TPSPascalCompiler);
procedure SIRegister__Number(CL: TPSPascalCompiler);
procedure SIRegister_TJSONArray(CL: TPSPascalCompiler);
procedure SIRegister_TJSONObject(CL: TPSPascalCompiler);
procedure SIRegister_JSONTokener(CL: TPSPascalCompiler);
procedure SIRegister_ParseException(CL: TPSPascalCompiler);
procedure SIRegister_NotImplmentedFeature(CL: TPSPascalCompiler);
procedure SIRegister_NullPointerException(CL: TPSPascalCompiler);
procedure SIRegister_NumberFormatException(CL: TPSPascalCompiler);
procedure SIRegister_NoSuchElementException(CL: TPSPascalCompiler);
procedure SIRegister_ClassCastException(CL: TPSPascalCompiler);
procedure SIRegister_TZAbstractObject(CL: TPSPascalCompiler);
procedure SIRegister_uJSON(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_NULL(CL: TPSRuntimeClassImporter);
procedure RIRegister__String(CL: TPSRuntimeClassImporter);
procedure RIRegister__Integer(CL: TPSRuntimeClassImporter);
procedure RIRegister__Double(CL: TPSRuntimeClassImporter);
procedure RIRegister__Boolean(CL: TPSRuntimeClassImporter);
procedure RIRegister__Number(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJSONObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_JSONTokener(CL: TPSRuntimeClassImporter);
procedure RIRegister_ParseException(CL: TPSRuntimeClassImporter);
procedure RIRegister_NotImplmentedFeature(CL: TPSRuntimeClassImporter);
procedure RIRegister_NullPointerException(CL: TPSRuntimeClassImporter);
procedure RIRegister_NumberFormatException(CL: TPSRuntimeClassImporter);
procedure RIRegister_NoSuchElementException(CL: TPSRuntimeClassImporter);
procedure RIRegister_ClassCastException(CL: TPSRuntimeClassImporter);
procedure RIRegister_TZAbstractObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_uJSON(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,TypInfo
  ,uJSON
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uJSON]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_NULL(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TZAbstractObject', 'NULL') do
  with CL.AddClassN(CL.FindClass('TZAbstractObject'),'NULL') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister__String(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TZAbstractObject', '_String') do
  with CL.AddClassN(CL.FindClass('TZAbstractObject'),'_String') do
  begin
    RegisterMethod('Constructor create( s : string)');
    RegisterMethod('Function equalsIgnoreCase( s : string) : boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister__Integer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'_Number', '_Integer') do
  with CL.AddClassN(CL.FindClass('_Number'),'_Integer') do
  begin
    RegisterMethod('Function parseInt61( s : string; i : integer) : integer;');
    RegisterMethod('Function parseInt62( s : _String) : integer;');
    RegisterMethod('Function toHexString( c : char) : string');
    RegisterMethod('Constructor create63( i : integer);');
    RegisterMethod('Constructor create64( s : string);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister__Double(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'_Number', '_Double') do
  with CL.AddClassN(CL.FindClass('_Number'),'_Double') do
  begin
    RegisterMethod('Constructor create58( s : string);');
    RegisterMethod('Constructor create59( s : _String);');
    RegisterMethod('Constructor create60( d : double);');
    RegisterMethod('Function NaN : double');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister__Boolean(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TZAbstractObject', '_Boolean') do
  with CL.AddClassN(CL.FindClass('TZAbstractObject'),'_Boolean') do
  begin
    RegisterMethod('Function _TRUE( ) : _Boolean');
    RegisterMethod('Function _FALSE( ) : _Boolean');
    RegisterMethod('Function valueOf( b : boolean) : _Boolean');
    RegisterMethod('Constructor create( b : boolean)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister__Number(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TZAbstractObject', '_Number') do
  with CL.AddClassN(CL.FindClass('TZAbstractObject'),'_Number') do
  begin
    RegisterMethod('Function doubleValue : double');
    RegisterMethod('Function intValue : integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TZAbstractObject', 'TJSONArray') do
  with CL.AddClassN(CL.FindClass('TZAbstractObject'),'TJSONArray') do
  begin
    RegisterMethod('Constructor create30;');
    RegisterMethod('Constructor create31( collection : TList);');
    RegisterMethod('Constructor create32( x : JSONTokener);');
    RegisterMethod('Constructor create33( s : string);');
    RegisterMethod('Function get( index : integer) : TZAbstractObject');
    RegisterMethod('Function getBoolean( index : integer) : boolean');
    RegisterMethod('Function getDouble( index : integer) : double');
    RegisterMethod('Function getInt( index : integer) : integer');
    RegisterMethod('Function getJSONArray( index : integer) : TJSONArray');
    RegisterMethod('Function getJSONObject( index : integer) : TJSONObject');
    RegisterMethod('Function getString( index : integer) : string');
    RegisterMethod('Function isNull( index : integer) : boolean');
    RegisterMethod('Function join( separator : string) : string');
    RegisterMethod('Function length : integer');
    RegisterMethod('Function opt( index : integer) : TZAbstractObject');
    RegisterMethod('Function optBoolean34( index : integer) : boolean;');
    RegisterMethod('Function optBoolean35( index : integer; defaultValue : boolean) : boolean;');
    RegisterMethod('Function optDouble36( index : integer) : double;');
    RegisterMethod('Function optDouble37( index : integer; defaultValue : double) : double;');
    RegisterMethod('Function optInt38( index : integer) : integer;');
    RegisterMethod('Function optInt39( index : integer; defaultValue : integer) : integer;');
    RegisterMethod('Function optJSONArray40( index : integer) : TJSONArray;');
    RegisterMethod('Function optJSONObject41( index : integer) : TJSONObject;');
    RegisterMethod('Function optString42( index : integer) : string;');
    RegisterMethod('Function optString43( index : integer; defaultValue : string) : string;');
    RegisterMethod('Function put44( value : boolean) : TJSONArray;');
    RegisterMethod('Function put45( value : double) : TJSONArray;');
    RegisterMethod('Function put46( value : integer) : TJSONArray;');
    RegisterMethod('Function put47( value : TZAbstractObject) : TJSONArray;');
    RegisterMethod('Function put48( value : string) : TJSONArray;');
    RegisterMethod('Function put49( index : integer; value : boolean) : TJSONArray;');
    RegisterMethod('Function put50( index : integer; value : double) : TJSONArray;');
    RegisterMethod('Function put51( index : integer; value : integer) : TJSONArray;');
    RegisterMethod('Function put52( index : integer; value : TZAbstractObject) : TJSONArray;');
    RegisterMethod('Function put53( index : integer; value : string) : TJSONArray;');
    RegisterMethod('Function toJSONObject54( names : TJSONArray) : TJSONObject;');
    RegisterMethod('Function toString56( indentFactor : integer) : string;');
    RegisterMethod('Function toString57( indentFactor, indent : integer) : string;');
    RegisterMethod('Function toList( ) : TList');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJSONObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TZAbstractObject', 'TJSONObject') do
  with CL.AddClassN(CL.FindClass('TZAbstractObject'),'TJSONObject') do
  begin
    RegisterMethod('Constructor create5;');
    RegisterMethod('Constructor create6( jo : TJSONObject; sa : array of string);');
    RegisterMethod('Constructor create7( x : JSONTokener);');
    RegisterMethod('Constructor create8( map : TStringList);');
    RegisterMethod('Constructor create9( s : string);');
    RegisterMethod('Procedure clean');
    RegisterMethod('Function clone : TZAbstractObject');
    RegisterMethod('Function accumulate( key : string; value : TZAbstractObject) : TJSONObject');
    RegisterMethod('Function get( key : string) : TZAbstractObject');
    RegisterMethod('Function getBoolean( key : string) : boolean');
    RegisterMethod('Function getDouble( key : string) : double');
    RegisterMethod('Function getInt( key : string) : integer');
    RegisterMethod('Function getJSONArray( key : string) : TJSONArray');
    RegisterMethod('Function getJSONObject( key : string) : TJSONObject');
    RegisterMethod('Function getString( key : string) : string');
    RegisterMethod('Function has( key : string) : boolean');
    RegisterMethod('Function isNull( key : string) : boolean');
    RegisterMethod('Function keys : TStringList');
    RegisterMethod('Function length : integer');
    RegisterMethod('Function names : TJSONArray');
    RegisterMethod('Function numberToString( n : _Number) : string');
    RegisterMethod('Function valueToString10( value : TZAbstractObject) : string;');
    RegisterMethod('Function valueToString11( value : TZAbstractObject; indentFactor, indent : integer) : string;');
    RegisterMethod('Function opt( key : string) : TZAbstractObject');
    RegisterMethod('Function optBoolean12( key : string) : boolean;');
    RegisterMethod('Function optBoolean13( key : string; defaultValue : boolean) : boolean;');
    RegisterMethod('Function optDouble14( key : string) : double;');
    RegisterMethod('Function optDouble15( key : string; defaultValue : double) : double;');
    RegisterMethod('Function optInt16( key : string) : integer;');
    RegisterMethod('Function optInt17( key : string; defaultValue : integer) : integer;');
    RegisterMethod('Function optString18( key : string) : string;');
    RegisterMethod('Function optString19( key : string; defaultValue : string) : string;');
    RegisterMethod('Function optJSONArray20( key : string) : TJSONArray;');
    RegisterMethod('Function optJSONObject21( key : string) : TJSONObject;');
    RegisterMethod('Function put22( key : string; value : boolean) : TJSONObject;');
    RegisterMethod('Function put23( key : string; value : double) : TJSONObject;');
    RegisterMethod('Function put24( key : string; value : integer) : TJSONObject;');
    RegisterMethod('Function put25( key : string; value : string) : TJSONObject;');
    RegisterMethod('Function put26( key : string; value : TZAbstractObject) : TJSONObject;');
    RegisterMethod('Function putOpt( key : string; value : TZAbstractObject) : TJSONObject');
    RegisterMethod('Function quote( s : string) : string');
    RegisterMethod('Function remove( key : string) : TZAbstractObject');
    RegisterMethod('Procedure assignTo( json : TJSONObject)');
    RegisterMethod('Function toJSONArray( names : TJSONArray) : TJSONArray');
    RegisterMethod('Function toString28( indentFactor : integer) : string;');
    RegisterMethod('Function toString29( indentFactor, indent : integer) : string;');
    RegisterMethod('Function NULL : NULL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JSONTokener(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TZAbstractObject', 'JSONTokener') do
  with CL.AddClassN(CL.FindClass('TZAbstractObject'),'JSONTokener') do
  begin
    RegisterMethod('Constructor create( s : string)');
    RegisterMethod('Procedure back( )');
    RegisterMethod('Function dehexchar( c : char) : integer');
    RegisterMethod('Function more : boolean');
    RegisterMethod('Function next0( ) : char;');
    RegisterMethod('Function next1( c : char) : char;');
    RegisterMethod('Function next2( n : integer) : string;');
    RegisterMethod('Function nextClean( ) : char');
    RegisterMethod('Function nextString( quote : char) : string');
    RegisterMethod('Function nextTo3( d : char) : string;');
    RegisterMethod('Function nextTo4( delimiters : string) : char;');
    RegisterMethod('Function nextValue( ) : TZAbstractObject');
    RegisterMethod('Procedure skipPast( _to : string)');
    RegisterMethod('Function skipTo( _to : char) : char');
    RegisterMethod('Function syntaxError( _message : string) : ParseException');
    RegisterMethod('Function unescape( s : string) : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ParseException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'ParseException') do
  with CL.AddClassN(CL.FindClass('Exception'),'ParseException') do
  begin
    RegisterMethod('Constructor create( _message : string; index : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_NotImplmentedFeature(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'NotImplmentedFeature') do
  with CL.AddClassN(CL.FindClass('Exception'),'NotImplmentedFeature') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_NullPointerException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'NullPointerException') do
  with CL.AddClassN(CL.FindClass('Exception'),'NullPointerException') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_NumberFormatException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'NumberFormatException') do
  with CL.AddClassN(CL.FindClass('Exception'),'NumberFormatException') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_NoSuchElementException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'NoSuchElementException') do
  with CL.AddClassN(CL.FindClass('Exception'),'NoSuchElementException') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ClassCastException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'ClassCastException') do
  with CL.AddClassN(CL.FindClass('Exception'),'ClassCastException') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TZAbstractObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TZAbstractObject') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TZAbstractObject') do
  begin
    RegisterMethod('Function equals( const Value : TZAbstractObject) : Boolean');
    RegisterMethod('Function hash : LongInt');
    RegisterMethod('Function Clone : TZAbstractObject');
    RegisterMethod('Function toString : string');
    RegisterMethod('Function instanceOf( const Value : TZAbstractObject) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uJSON(CL: TPSPascalCompiler);
begin
  SIRegister_TZAbstractObject(CL);
  SIRegister_ClassCastException(CL);
  SIRegister_NoSuchElementException(CL);
  SIRegister_NumberFormatException(CL);
  SIRegister_NullPointerException(CL);
  SIRegister_NotImplmentedFeature(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJSONArray');
  CL.AddClassN(CL.FindClass('TOBJECT'),'_Number');
  CL.AddClassN(CL.FindClass('TOBJECT'),'_String');
  CL.AddClassN(CL.FindClass('TOBJECT'),'_Double');
  CL.AddClassN(CL.FindClass('TOBJECT'),'NULL');
  SIRegister_ParseException(CL);
  SIRegister_JSONTokener(CL);
  SIRegister_TJSONObject(CL);
  SIRegister_TJSONArray(CL);
  SIRegister__Number(CL);
  SIRegister__Boolean(CL);
  SIRegister__Double(CL);
  SIRegister__Integer(CL);
  SIRegister__String(CL);
  SIRegister_NULL(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function _Integercreate64_P(Self: TClass; CreateNewInstance: Boolean;  s : string):TObject;
Begin Result := _Integer.create(s); END;

(*----------------------------------------------------------------------------*)
Function _Integercreate63_P(Self: TClass; CreateNewInstance: Boolean;  i : integer):TObject;
Begin Result := _Integer.create(i); END;

(*----------------------------------------------------------------------------*)
Function _IntegerparseInt62_P(Self: _Integer;  s : _String) : integer;
Begin Result := Self.parseInt(s); END;

(*----------------------------------------------------------------------------*)
Function _IntegerparseInt61_P(Self: _Integer;  s : string; i : integer) : integer;
Begin Result := Self.parseInt(s, i); END;

(*----------------------------------------------------------------------------*)
Function _Doublecreate60_P(Self: TClass; CreateNewInstance: Boolean;  d : double):TObject;
Begin Result := _Double.create(d); END;

(*----------------------------------------------------------------------------*)
Function _Doublecreate59_P(Self: TClass; CreateNewInstance: Boolean;  s : _String):TObject;
Begin Result := _Double.create(s); END;

(*----------------------------------------------------------------------------*)
Function _Doublecreate58_P(Self: TClass; CreateNewInstance: Boolean;  s : string):TObject;
Begin Result := _Double.create(s); END;

(*----------------------------------------------------------------------------*)
Function TJSONArraytoString57_P(Self: TJSONArray;  indentFactor, indent : integer) : string;
Begin Result := Self.toString(indentFactor, indent); END;

(*----------------------------------------------------------------------------*)
Function TJSONArraytoString56_P(Self: TJSONArray;  indentFactor : integer) : string;
Begin Result := Self.toString(indentFactor); END;

(*----------------------------------------------------------------------------*)
Function TJSONArraytoString55_P(Self: TJSONArray) : string;
Begin Result := Self.toString; END;

(*----------------------------------------------------------------------------*)
Function TJSONArraytoJSONObject54_P(Self: TJSONArray;  names : TJSONArray) : TJSONObject;
Begin Result := Self.toJSONObject(names); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput53_P(Self: TJSONArray;  index : integer; value : string) : TJSONArray;
Begin Result := Self.put(index, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput52_P(Self: TJSONArray;  index : integer; value : TZAbstractObject) : TJSONArray;
Begin Result := Self.put(index, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput51_P(Self: TJSONArray;  index : integer; value : integer) : TJSONArray;
Begin Result := Self.put(index, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput50_P(Self: TJSONArray;  index : integer; value : double) : TJSONArray;
Begin Result := Self.put(index, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput49_P(Self: TJSONArray;  index : integer; value : boolean) : TJSONArray;
Begin Result := Self.put(index, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput48_P(Self: TJSONArray;  value : string) : TJSONArray;
Begin Result := Self.put(value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput47_P(Self: TJSONArray;  value : TZAbstractObject) : TJSONArray;
Begin Result := Self.put(value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput46_P(Self: TJSONArray;  value : integer) : TJSONArray;
Begin Result := Self.put(value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput45_P(Self: TJSONArray;  value : double) : TJSONArray;
Begin Result := Self.put(value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayput44_P(Self: TJSONArray;  value : boolean) : TJSONArray;
Begin Result := Self.put(value); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptString43_P(Self: TJSONArray;  index : integer; defaultValue : string) : string;
Begin Result := Self.optString(index, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptString42_P(Self: TJSONArray;  index : integer) : string;
Begin Result := Self.optString(index); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptJSONObject41_P(Self: TJSONArray;  index : integer) : TJSONObject;
Begin Result := Self.optJSONObject(index); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptJSONArray40_P(Self: TJSONArray;  index : integer) : TJSONArray;
Begin Result := Self.optJSONArray(index); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptInt39_P(Self: TJSONArray;  index : integer; defaultValue : integer) : integer;
Begin Result := Self.optInt(index, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptInt38_P(Self: TJSONArray;  index : integer) : integer;
Begin Result := Self.optInt(index); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptDouble37_P(Self: TJSONArray;  index : integer; defaultValue : double) : double;
Begin Result := Self.optDouble(index, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptDouble36_P(Self: TJSONArray;  index : integer) : double;
Begin Result := Self.optDouble(index); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptBoolean35_P(Self: TJSONArray;  index : integer; defaultValue : boolean) : boolean;
Begin Result := Self.optBoolean(index, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONArrayoptBoolean34_P(Self: TJSONArray;  index : integer) : boolean;
Begin Result := Self.optBoolean(index); END;

(*----------------------------------------------------------------------------*)
Function TJSONArraycreate33_P(Self: TClass; CreateNewInstance: Boolean;  s : string):TObject;
Begin Result := TJSONArray.create(s); END;

(*----------------------------------------------------------------------------*)
Function TJSONArraycreate32_P(Self: TClass; CreateNewInstance: Boolean;  x : JSONTokener):TObject;
Begin Result := TJSONArray.create(x); END;

(*----------------------------------------------------------------------------*)
Function TJSONArraycreate31_P(Self: TClass; CreateNewInstance: Boolean;  collection : TList):TObject;
Begin Result := TJSONArray.create(collection); END;

(*----------------------------------------------------------------------------*)
Function TJSONArraycreate30_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TJSONArray.create; END;

(*----------------------------------------------------------------------------*)
Function TJSONObjecttoString29_P(Self: TJSONObject;  indentFactor, indent : integer) : string;
Begin Result := Self.toString(indentFactor, indent); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjecttoString28_P(Self: TJSONObject;  indentFactor : integer) : string;
Begin Result := Self.toString(indentFactor); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjecttoString27_P(Self: TJSONObject;  ) : string;
Begin Result := Self.toString; END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectput26_P(Self: TJSONObject;  key : string; value : TZAbstractObject) : TJSONObject;
Begin Result := Self.put(key, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectput25_P(Self: TJSONObject;  key : string; value : string) : TJSONObject;
Begin Result := Self.put(key, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectput24_P(Self: TJSONObject;  key : string; value : integer) : TJSONObject;
Begin Result := Self.put(key, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectput23_P(Self: TJSONObject;  key : string; value : double) : TJSONObject;
Begin Result := Self.put(key, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectput22_P(Self: TJSONObject;  key : string; value : boolean) : TJSONObject;
Begin Result := Self.put(key, value); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptJSONObject21_P(Self: TJSONObject;  key : string) : TJSONObject;
Begin Result := Self.optJSONObject(key); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptJSONArray20_P(Self: TJSONObject;  key : string) : TJSONArray;
Begin Result := Self.optJSONArray(key); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptString19_P(Self: TJSONObject;  key : string; defaultValue : string) : string;
Begin Result := Self.optString(key, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptString18_P(Self: TJSONObject;  key : string) : string;
Begin Result := Self.optString(key); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptInt17_P(Self: TJSONObject;  key : string; defaultValue : integer) : integer;
Begin Result := Self.optInt(key, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptInt16_P(Self: TJSONObject;  key : string) : integer;
Begin Result := Self.optInt(key); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptDouble15_P(Self: TJSONObject;  key : string; defaultValue : double) : double;
Begin Result := Self.optDouble(key, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptDouble14_P(Self: TJSONObject;  key : string) : double;
Begin Result := Self.optDouble(key); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptBoolean13_P(Self: TJSONObject;  key : string; defaultValue : boolean) : boolean;
Begin Result := Self.optBoolean(key, defaultValue); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectoptBoolean12_P(Self: TJSONObject;  key : string) : boolean;
Begin Result := Self.optBoolean(key); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectvalueToString11_P(Self: TJSONObject;  value : TZAbstractObject; indentFactor, indent : integer) : string;
Begin Result := Self.valueToString(value, indentFactor, indent); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectvalueToString10_P(Self: TJSONObject;  value : TZAbstractObject) : string;
Begin Result := Self.valueToString(value); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectcreate9_P(Self: TClass; CreateNewInstance: Boolean;  s : string):TObject;
Begin Result := TJSONObject.create(s); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectcreate8_P(Self: TClass; CreateNewInstance: Boolean;  map : TStringList):TObject;
Begin Result := TJSONObject.create(map); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectcreate7_P(Self: TClass; CreateNewInstance: Boolean;  x : JSONTokener):TObject;
Begin Result := TJSONObject.create(x); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectcreate6_P(Self: TClass; CreateNewInstance: Boolean;  jo : TJSONObject; sa : array of string):TObject;
Begin Result := TJSONObject.create(jo, sa); END;

(*----------------------------------------------------------------------------*)
Function TJSONObjectcreate5_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TJSONObject.create; END;

(*----------------------------------------------------------------------------*)
Function JSONTokenernextTo4_P(Self: JSONTokener;  delimiters : string) : char;
Begin Result := Self.nextTo(delimiters); END;

(*----------------------------------------------------------------------------*)
Function JSONTokenernextTo3_P(Self: JSONTokener;  d : char) : string;
Begin Result := Self.nextTo(d); END;

(*----------------------------------------------------------------------------*)
Function JSONTokenernext2_P(Self: JSONTokener;  n : integer) : string;
Begin Result := Self.next(n); END;

(*----------------------------------------------------------------------------*)
Function JSONTokenernext1_P(Self: JSONTokener;  c : char) : char;
Begin Result := Self.next(c); END;

(*----------------------------------------------------------------------------*)
Function JSONTokenernext0_P(Self: JSONTokener;  ) : char;
Begin Result := Self.next; END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_NULL(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(NULL) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister__String(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(_String) do
  begin
    RegisterConstructor(@_String.create, 'create');
    RegisterMethod(@_String.equalsIgnoreCase, 'equalsIgnoreCase');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister__Integer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(_Integer) do
  begin
    RegisterMethod(@_IntegerparseInt61_P, 'parseInt61');
    RegisterMethod(@_IntegerparseInt62_P, 'parseInt62');
    RegisterMethod(@_Integer.toHexString, 'toHexString');
    RegisterConstructor(@_Integercreate63_P, 'create63');
    RegisterConstructor(@_Integercreate64_P, 'create64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister__Double(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(_Double) do
  begin
    RegisterConstructor(@_Doublecreate58_P, 'create58');
    RegisterConstructor(@_Doublecreate59_P, 'create59');
    RegisterConstructor(@_Doublecreate60_P, 'create60');
    RegisterMethod(@_Double.NaN, 'NaN');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister__Boolean(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(_Boolean) do
  begin
    RegisterMethod(@_Boolean._TRUE, '_TRUE');
    RegisterMethod(@_Boolean._FALSE, '_FALSE');
    RegisterMethod(@_Boolean.valueOf, 'valueOf');
    RegisterConstructor(@_Boolean.create, 'create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister__Number(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(_Number) do
  begin
    RegisterVirtualAbstractMethod(@_Number, @!.doubleValue, 'doubleValue');
    RegisterVirtualAbstractMethod(@_Number, @!.intValue, 'intValue');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONArray) do
  begin
    RegisterConstructor(@TJSONArraycreate30_P, 'create30');
    RegisterConstructor(@TJSONArraycreate31_P, 'create31');
    RegisterConstructor(@TJSONArraycreate32_P, 'create32');
    RegisterConstructor(@TJSONArraycreate33_P, 'create33');
    RegisterMethod(@TJSONArray.get, 'get');
    RegisterMethod(@TJSONArray.getBoolean, 'getBoolean');
    RegisterMethod(@TJSONArray.getDouble, 'getDouble');
    RegisterMethod(@TJSONArray.getInt, 'getInt');
    RegisterMethod(@TJSONArray.getJSONArray, 'getJSONArray');
    RegisterMethod(@TJSONArray.getJSONObject, 'getJSONObject');
    RegisterMethod(@TJSONArray.getString, 'getString');
    RegisterMethod(@TJSONArray.isNull, 'isNull');
    RegisterMethod(@TJSONArray.join, 'join');
    RegisterMethod(@TJSONArray.length, 'length');
    RegisterMethod(@TJSONArray.opt, 'opt');
    RegisterMethod(@TJSONArrayoptBoolean34_P, 'optBoolean34');
    RegisterMethod(@TJSONArrayoptBoolean35_P, 'optBoolean35');
    RegisterMethod(@TJSONArrayoptDouble36_P, 'optDouble36');
    RegisterMethod(@TJSONArrayoptDouble37_P, 'optDouble37');
    RegisterMethod(@TJSONArrayoptInt38_P, 'optInt38');
    RegisterMethod(@TJSONArrayoptInt39_P, 'optInt39');
    RegisterMethod(@TJSONArrayoptJSONArray40_P, 'optJSONArray40');
    RegisterMethod(@TJSONArrayoptJSONObject41_P, 'optJSONObject41');
    RegisterMethod(@TJSONArrayoptString42_P, 'optString42');
    RegisterMethod(@TJSONArrayoptString43_P, 'optString43');
    RegisterMethod(@TJSONArrayput44_P, 'put44');
    RegisterMethod(@TJSONArrayput45_P, 'put45');
    RegisterMethod(@TJSONArrayput46_P, 'put46');
    RegisterMethod(@TJSONArrayput47_P, 'put47');
    RegisterMethod(@TJSONArrayput48_P, 'put48');
    RegisterMethod(@TJSONArrayput49_P, 'put49');
    RegisterMethod(@TJSONArrayput50_P, 'put50');
    RegisterMethod(@TJSONArrayput51_P, 'put51');
    RegisterMethod(@TJSONArrayput52_P, 'put52');
    RegisterMethod(@TJSONArrayput53_P, 'put53');
    RegisterMethod(@TJSONArraytoJSONObject54_P, 'toJSONObject54');
    RegisterMethod(@TJSONArraytoString56_P, 'toString56');
    RegisterMethod(@TJSONArraytoString57_P, 'toString57');
    RegisterMethod(@TJSONArray.toList, 'toList');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJSONObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJSONObject) do
  begin
    RegisterConstructor(@TJSONObjectcreate5_P, 'create5');
    RegisterConstructor(@TJSONObjectcreate6_P, 'create6');
    RegisterConstructor(@TJSONObjectcreate7_P, 'create7');
    RegisterConstructor(@TJSONObjectcreate8_P, 'create8');
    RegisterConstructor(@TJSONObjectcreate9_P, 'create9');
    RegisterMethod(@TJSONObject.clean, 'clean');
    RegisterMethod(@TJSONObject.clone, 'clone');
    RegisterMethod(@TJSONObject.accumulate, 'accumulate');
    RegisterMethod(@TJSONObject.get, 'get');
    RegisterMethod(@TJSONObject.getBoolean, 'getBoolean');
    RegisterMethod(@TJSONObject.getDouble, 'getDouble');
    RegisterMethod(@TJSONObject.getInt, 'getInt');
    RegisterMethod(@TJSONObject.getJSONArray, 'getJSONArray');
    RegisterMethod(@TJSONObject.getJSONObject, 'getJSONObject');
    RegisterMethod(@TJSONObject.getString, 'getString');
    RegisterMethod(@TJSONObject.has, 'has');
    RegisterMethod(@TJSONObject.isNull, 'isNull');
    RegisterMethod(@TJSONObject.keys, 'keys');
    RegisterMethod(@TJSONObject.length, 'length');
    RegisterMethod(@TJSONObject.names, 'names');
    RegisterMethod(@TJSONObject.numberToString, 'numberToString');
    RegisterMethod(@TJSONObjectvalueToString10_P, 'valueToString10');
    RegisterMethod(@TJSONObjectvalueToString11_P, 'valueToString11');
    RegisterMethod(@TJSONObject.opt, 'opt');
    RegisterMethod(@TJSONObjectoptBoolean12_P, 'optBoolean12');
    RegisterMethod(@TJSONObjectoptBoolean13_P, 'optBoolean13');
    RegisterMethod(@TJSONObjectoptDouble14_P, 'optDouble14');
    RegisterMethod(@TJSONObjectoptDouble15_P, 'optDouble15');
    RegisterMethod(@TJSONObjectoptInt16_P, 'optInt16');
    RegisterMethod(@TJSONObjectoptInt17_P, 'optInt17');
    RegisterMethod(@TJSONObjectoptString18_P, 'optString18');
    RegisterMethod(@TJSONObjectoptString19_P, 'optString19');
    RegisterMethod(@TJSONObjectoptJSONArray20_P, 'optJSONArray20');
    RegisterMethod(@TJSONObjectoptJSONObject21_P, 'optJSONObject21');
    RegisterMethod(@TJSONObjectput22_P, 'put22');
    RegisterMethod(@TJSONObjectput23_P, 'put23');
    RegisterMethod(@TJSONObjectput24_P, 'put24');
    RegisterMethod(@TJSONObjectput25_P, 'put25');
    RegisterMethod(@TJSONObjectput26_P, 'put26');
    RegisterMethod(@TJSONObject.putOpt, 'putOpt');
    RegisterMethod(@TJSONObject.quote, 'quote');
    RegisterMethod(@TJSONObject.remove, 'remove');
    RegisterMethod(@TJSONObject.assignTo, 'assignTo');
    RegisterMethod(@TJSONObject.toJSONArray, 'toJSONArray');
    RegisterMethod(@TJSONObjecttoString28_P, 'toString28');
    RegisterMethod(@TJSONObjecttoString29_P, 'toString29');
    RegisterMethod(@TJSONObject.NULL, 'NULL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JSONTokener(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(JSONTokener) do
  begin
    RegisterConstructor(@JSONTokener.create, 'create');
    RegisterMethod(@JSONTokener.back, 'back');
    RegisterMethod(@JSONTokener.dehexchar, 'dehexchar');
    RegisterMethod(@JSONTokener.more, 'more');
    RegisterMethod(@JSONTokenernext0_P, 'next0');
    RegisterMethod(@JSONTokenernext1_P, 'next1');
    RegisterMethod(@JSONTokenernext2_P, 'next2');
    RegisterMethod(@JSONTokener.nextClean, 'nextClean');
    RegisterMethod(@JSONTokener.nextString, 'nextString');
    RegisterMethod(@JSONTokenernextTo3_P, 'nextTo3');
    RegisterMethod(@JSONTokenernextTo4_P, 'nextTo4');
    RegisterMethod(@JSONTokener.nextValue, 'nextValue');
    RegisterMethod(@JSONTokener.skipPast, 'skipPast');
    RegisterMethod(@JSONTokener.skipTo, 'skipTo');
    RegisterMethod(@JSONTokener.syntaxError, 'syntaxError');
    RegisterMethod(@JSONTokener.unescape, 'unescape');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ParseException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ParseException) do
  begin
    RegisterConstructor(@ParseException.create, 'create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_NotImplmentedFeature(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(NotImplmentedFeature) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_NullPointerException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(NullPointerException) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_NumberFormatException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(NumberFormatException) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_NoSuchElementException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(NoSuchElementException) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ClassCastException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ClassCastException) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TZAbstractObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TZAbstractObject) do
  begin
    RegisterVirtualMethod(@TZAbstractObject.equals, 'equals');
    RegisterMethod(@TZAbstractObject.hash, 'hash');
    RegisterVirtualMethod(@TZAbstractObject.Clone, 'Clone');
    RegisterVirtualMethod(@TZAbstractObject.toString, 'toString');
    RegisterMethod(@TZAbstractObject.instanceOf, 'instanceOf');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uJSON(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TZAbstractObject(CL);
  RIRegister_ClassCastException(CL);
  RIRegister_NoSuchElementException(CL);
  RIRegister_NumberFormatException(CL);
  RIRegister_NullPointerException(CL);
  RIRegister_NotImplmentedFeature(CL);
  with CL.Add(TJSONArray) do
  with CL.Add(_Number) do
  with CL.Add(_String) do
  with CL.Add(_Double) do
  with CL.Add(NULL) do
  RIRegister_ParseException(CL);
  RIRegister_JSONTokener(CL);
  RIRegister_TJSONObject(CL);
  RIRegister_TJSONArray(CL);
  RIRegister__Number(CL);
  RIRegister__Boolean(CL);
  RIRegister__Double(CL);
  RIRegister__Integer(CL);
  RIRegister__String(CL);
  RIRegister_NULL(CL);
end;

 
 
{ TPSImport_uJSON }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uJSON.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uJSON(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uJSON.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uJSON(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
