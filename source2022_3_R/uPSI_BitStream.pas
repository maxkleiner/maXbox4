unit uPSI_BitStream;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
        bitbox plus streams
}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_BitStream = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TBitStream(CL: TPSPascalCompiler);
procedure SIRegister_BitStream(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TBitStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_BitStream(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Streams
  ,BitStream
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_BitStream]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TBitStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFilterStream', 'TBitStream') do
  with CL.AddClassN(CL.FindClass('TFilterStream'),'TBitStream') do begin
    RegisterMethod('Procedure WriteBits( Str : DWord; Count : Integer)');
      RegisterMethod('Procedure Free');
      RegisterMethod('Function ReadBits( var Str : dword; Count : Integer) : Integer');
    RegisterMethod('Function ReadBit : Byte');
    RegisterMethod('Procedure Flush');
    RegisterMethod('Function Available : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_BitStream(CL: TPSPascalCompiler);
begin
  SIRegister_TBitStream(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TBitStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBitStream) do
  begin
    RegisterMethod(@TBitStream.WriteBits, 'WriteBits');
    RegisterMethod(@TBitStream.Destroy, 'Free');
    RegisterMethod(@TBitStream.ReadBits, 'ReadBits');
    RegisterMethod(@TBitStream.ReadBit, 'ReadBit');
    RegisterMethod(@TBitStream.Flush, 'Flush');
    RegisterMethod(@TBitStream.Available, 'Available');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_BitStream(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TBitStream(CL);
end;

 
 
{ TPSImport_BitStream }
(*----------------------------------------------------------------------------*)
procedure TPSImport_BitStream.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_BitStream(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_BitStream.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_BitStream(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
