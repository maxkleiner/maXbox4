unit uPSI_uTPLb_StreamCipher;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uTPLb_StreamCipher = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_IisBase64Converter(CL: TPSPascalCompiler);
procedure SIRegister_IStreamCipher(CL: TPSPascalCompiler);
procedure SIRegister_IStreamDecryptor(CL: TPSPascalCompiler);
procedure SIRegister_IStreamEncryptor(CL: TPSPascalCompiler);
procedure SIRegister_TSymetricKey(CL: TPSPascalCompiler);
procedure SIRegister_ICryptoGraphicAlgorithm(CL: TPSPascalCompiler);
procedure SIRegister_uTPLb_StreamCipher(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TSymetricKey(CL: TPSRuntimeClassImporter);
procedure RIRegister_uTPLb_StreamCipher(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   uTPLb_StreamCipher
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uTPLb_StreamCipher]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_IisBase64Converter(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IisBase64Converter') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IisBase64Converter, 'IisBase64Converter') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IStreamCipher(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'ICryptoGraphicAlgorithm', 'IStreamCipher') do
  with CL.AddInterface(CL.FindInterface('ICryptoGraphicAlgorithm'),IStreamCipher, 'IStreamCipher') do
  begin
    RegisterMethod('Function GenerateKey( Seed : TStream) : TSymetricKey', cdRegister);
    RegisterMethod('Function LoadKeyFromStream( Store : TStream) : TSymetricKey', cdRegister);
    RegisterMethod('Function SeedByteSize : integer', cdRegister);
    RegisterMethod('Function Parameterize( const Params : IInterface) : IStreamCipher', cdRegister);
    RegisterMethod('Function Start_Encrypt( Key : TSymetricKey; CipherText : TStream) : IStreamEncryptor', cdRegister);
    RegisterMethod('Function Start_Decrypt( Key : TSymetricKey; PlainText : TStream) : IStreamDecryptor', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IStreamDecryptor(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IStreamDecryptor') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IStreamDecryptor, 'IStreamDecryptor') do
  begin
    RegisterMethod('Procedure Decrypt( const Ciphertext : TStream)', cdRegister);
    RegisterMethod('Procedure End_Decrypt', cdRegister);
    RegisterMethod('Procedure Reset', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IStreamEncryptor(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IStreamEncryptor') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IStreamEncryptor, 'IStreamEncryptor') do
  begin
    RegisterMethod('Procedure Encrypt( const Plaintext : TStream)', cdRegister);
    RegisterMethod('Procedure End_Encrypt', cdRegister);
    RegisterMethod('Procedure Reset', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSymetricKey(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TSymetricKey') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TSymetricKey') do
  begin
    RegisterMethod('Procedure SaveToStream( Stream : TStream)');
    RegisterMethod('Procedure Burn');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ICryptoGraphicAlgorithm(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'ICryptoGraphicAlgorithm') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),ICryptoGraphicAlgorithm, 'ICryptoGraphicAlgorithm') do
  begin
    RegisterMethod('Function DisplayName : string', cdRegister);
    RegisterMethod('Function ProgId : string', cdRegister);
    RegisterMethod('Function Features : TAlgorithmicFeatureSet', cdRegister);
    RegisterMethod('Function DefinitionURL : string', cdRegister);
    RegisterMethod('Function WikipediaReference : string', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uTPLb_StreamCipher(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TAlgorithmicFeature', '( afStar, afCryptographicallyWeak, afNotI'
   +'mplementedYet, afForTestOnly, afForRunTimeOnly, afEncumberedByPatent, afEn'
   +'cumberedByCopyRight, afOpenSourceSoftware, afCommercial, afCompressor, afC'
   +'onverter, afBlockAdapter, afDisplayNameOnKeySize, afDoesNotNeedSalt, afAsymetric )');
  CL.AddTypeS('TAlgorithmicFeatureSet', 'set of TAlgorithmicFeature');
  SIRegister_ICryptoGraphicAlgorithm(CL);
  SIRegister_TSymetricKey(CL);
  SIRegister_IStreamEncryptor(CL);
  SIRegister_IStreamDecryptor(CL);
  SIRegister_IStreamCipher(CL);
  SIRegister_IisBase64Converter(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TSymetricKey(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSymetricKey) do
  begin
    RegisterMethod(@TSymetricKey.SaveToStream, 'SaveToStream');
    RegisterMethod(@TSymetricKey.Burn, 'Burn');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uTPLb_StreamCipher(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TSymetricKey(CL);
end;

 
 
{ TPSImport_uTPLb_StreamCipher }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uTPLb_StreamCipher.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uTPLb_StreamCipher(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uTPLb_StreamCipher.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uTPLb_StreamCipher(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
