unit uPSI_REXX;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_REXX = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_REXX(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_REXX_Routines(S: TPSExec);
procedure RIRegister_REXX(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   REXX
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_REXX]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_REXX(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TState', '( TrimLeader, StartToken, EndToken )');
  CL.AddTypeS('TStrIndex', 'LongInt');
  CL.AddTypeS('TTokIndex', 'WORD');
  CL.AddTypeS('TStrIndexB', 'BYTE');
  CL.AddTypeS('TTokIndexB', 'BYTE');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EConversionError');
 CL.AddDelphiFunction('Function Abbrev( const information, info : STRING; const nMatch : TStrIndex) : BOOLEAN');
 CL.AddDelphiFunction('Function AllSame( const s : STRING; const c : CHAR) : BOOLEAN');
 CL.AddDelphiFunction('Function Capitalize( const s : STRING) : STRING');
 CL.AddDelphiFunction('Function Center( const s : STRING; const sLength : TStrIndex) : STRING');
 CL.AddDelphiFunction('Function Left( const s : STRING; const sLength : TStrIndex) : STRING');
 CL.AddDelphiFunction('Function Right( const s : STRING; const sLength : TStrIndex) : STRING');
 CL.AddDelphiFunction('Function Copies( const s : STRING; const n : TStrIndex) : STRING');
 CL.AddDelphiFunction('Function CountChar( const s : STRING; const c : CHAR) : TStrIndex');
 CL.AddDelphiFunction('Function DeleteStringrexx( const substring : STRING; const s : STRING) : STRING');
 CL.AddDelphiFunction('Function Overlay( const ovly, target : STRING; const n : TStrIndex) : STRING');
 CL.AddDelphiFunction('Function Plural( const n : LongInt; const singularform, pluralform : STRING) : STRING');
 CL.AddDelphiFunction('Function Reverse( const s : STRING) : STRING');
 CL.AddDelphiFunction('Function Spacerexx( const s : STRING; const n : TStrIndex) : STRING');
 CL.AddDelphiFunction('Function Striprexx( const s : STRING; const option : STRING) : STRING');
 CL.AddDelphiFunction('Function TestString( const sLength : TStrIndex) : STRING');
 CL.AddDelphiFunction('Function Translate( const s, OutTable, InTable : STRING) : STRING');
 CL.AddDelphiFunction('Function XRange( const start, stop : BYTE) : STRING');
 CL.AddDelphiFunction('Function B2X( const b : BYTE) : STRING');
 CL.AddDelphiFunction('Function C2D( const s : STRING) : DOUBLE');
 CL.AddDelphiFunction('Function C2I( const s : STRING) : INTEGER');
 CL.AddDelphiFunction('Function C2L( const s : STRING) : LONGINT');
 CL.AddDelphiFunction('Function C2W( const s : STRING) : WORD');
 CL.AddDelphiFunction('Function C2X( const s : STRING) : STRING');
 CL.AddDelphiFunction('Function I2C( const i : INTEGER) : STRING');
 CL.AddDelphiFunction('Function I2X( const i : INTEGER) : STRING');
 CL.AddDelphiFunction('Function L2C( const i : LONGINT) : STRING');
 CL.AddDelphiFunction('Function L2X( const i : LONGINT) : STRING');
 CL.AddDelphiFunction('Function D2C( const x : DOUBLE; const d : BYTE) : STRING');
 CL.AddDelphiFunction('Function W2C( const w : WORD) : STRING');
 CL.AddDelphiFunction('Function W2X( const w : WORD) : STRING');
 CL.AddDelphiFunction('Function X2W( const s : STRING) : WORD');
 CL.AddDelphiFunction('Function JulianDate( const DateTime : TDateTime) : LongInt');
 CL.AddDelphiFunction('Function TimeDifference( const StartTime, StopTime : TDateTime) : DOUBLE');
 CL.AddDelphiFunction('Function Pwr( const x, y : DOUBLE) : DOUBLE');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_REXX_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Abbrev, 'Abbrev', cdRegister);
 S.RegisterDelphiFunction(@AllSame, 'AllSame', cdRegister);
 S.RegisterDelphiFunction(@Capitalize, 'Capitalize', cdRegister);
 S.RegisterDelphiFunction(@Center, 'Center', cdRegister);
 S.RegisterDelphiFunction(@Left, 'Left', cdRegister);
 S.RegisterDelphiFunction(@Right, 'Right', cdRegister);
 S.RegisterDelphiFunction(@Copies, 'Copies', cdRegister);
 S.RegisterDelphiFunction(@CountChar, 'CountChar', cdRegister);
 S.RegisterDelphiFunction(@DeleteString, 'DeleteStringrexx', cdRegister);
 S.RegisterDelphiFunction(@Overlay, 'Overlay', cdRegister);
 S.RegisterDelphiFunction(@Plural, 'Plural', cdRegister);
 S.RegisterDelphiFunction(@Reverse, 'Reverse', cdRegister);
 S.RegisterDelphiFunction(@Space, 'Spacerexx', cdRegister);
 S.RegisterDelphiFunction(@Strip, 'Striprexx', cdRegister);
 S.RegisterDelphiFunction(@TestString, 'TestString', cdRegister);
 S.RegisterDelphiFunction(@Translate, 'Translate', cdRegister);
 S.RegisterDelphiFunction(@XRange, 'XRange', cdRegister);
 S.RegisterDelphiFunction(@B2X, 'B2X', cdRegister);
 S.RegisterDelphiFunction(@C2D, 'C2D', cdRegister);
 S.RegisterDelphiFunction(@C2I, 'C2I', cdRegister);
 S.RegisterDelphiFunction(@C2L, 'C2L', cdRegister);
 S.RegisterDelphiFunction(@C2W, 'C2W', cdRegister);
 S.RegisterDelphiFunction(@C2X, 'C2X', cdRegister);
 S.RegisterDelphiFunction(@I2C, 'I2C', cdRegister);
 S.RegisterDelphiFunction(@I2X, 'I2X', cdRegister);
 S.RegisterDelphiFunction(@L2C, 'L2C', cdRegister);
 S.RegisterDelphiFunction(@L2X, 'L2X', cdRegister);
 S.RegisterDelphiFunction(@D2C, 'D2C', cdRegister);
 S.RegisterDelphiFunction(@W2C, 'W2C', cdRegister);
 S.RegisterDelphiFunction(@W2X, 'W2X', cdRegister);
 S.RegisterDelphiFunction(@X2W, 'X2W', cdRegister);
 S.RegisterDelphiFunction(@JulianDate, 'JulianDate', cdRegister);
 S.RegisterDelphiFunction(@TimeDifference, 'TimeDifference', cdRegister);
 S.RegisterDelphiFunction(@Pwr, 'Pwr', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_REXX(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EConversionError) do
end;

 
 
{ TPSImport_REXX }
(*----------------------------------------------------------------------------*)
procedure TPSImport_REXX.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_REXX(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_REXX.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_REXX(ri);
  RIRegister_REXX_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
