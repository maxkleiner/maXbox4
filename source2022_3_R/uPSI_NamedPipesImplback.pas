unit uPSI_NamedPipesImpl;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_NamedPipesImpl = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_ENamedPipe(CL: TPSPascalCompiler);
procedure SIRegister_TNamedPipeClient(CL: TPSPascalCompiler);
procedure SIRegister_TNamedPipeServer(CL: TPSPascalCompiler);
procedure SIRegister_TNamedPipe(CL: TPSPascalCompiler);
procedure SIRegister_NamedPipesImpl(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_ENamedPipe(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNamedPipeClient(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNamedPipeServer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNamedPipe(CL: TPSRuntimeClassImporter);
procedure RIRegister_NamedPipesImpl(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   SyncObjs
  ,Windows
  ,NamedPipesImpl
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_NamedPipesImpl]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_ENamedPipe(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'ENamedPipe') do
  with CL.AddClassN(CL.FindClass('Exception'),'ENamedPipe') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNamedPipeClient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNamedPipe', 'TNamedPipeClient') do
  with CL.AddClassN(CL.FindClass('TNamedPipe'),'TNamedPipeClient') do
  begin
    RegisterMethod('Procedure CheckConnected');
    RegisterMethod('Procedure Connect');
    RegisterMethod('Function Open( const UserName : WideString; const Password : WideString) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNamedPipeServer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNamedPipe', 'TNamedPipeServer') do
  with CL.AddClassN(CL.FindClass('TNamedPipe'),'TNamedPipeServer') do
  begin
    RegisterMethod('Procedure CheckConnected');
    RegisterMethod('Procedure Connect');
    RegisterMethod('Function Open( const UserName : WideString; const Password : WideString) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNamedPipe(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TNamedPipe') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TNamedPipe') do
  begin
    RegisterMethod('Constructor Create( const PipeName : WideString; const Server : WideString)');
    RegisterMethod('Procedure CheckConnected');
    RegisterMethod('Function Open( const UserName : WideString; const Password : WideString) : Boolean');
    RegisterMethod('Procedure Close');
    RegisterMethod('Function Read : WideString;');
    RegisterMethod('Procedure Read1( var Buffer : WideString);');
    RegisterMethod('Procedure Write( const Message : WideString)');
    RegisterMethod('Procedure Connect');
    RegisterMethod('Procedure Disconnect');
    RegisterProperty('Connected', 'Boolean', iptr);
    RegisterProperty('Handle', 'THandle', iptr);
    RegisterProperty('TimeOut', 'Cardinal', iptrw);
    RegisterProperty('OnError', 'TError', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_NamedPipesImpl(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('NamedPipeLocalHost','String').SetString( '.');
 CL.AddConstantN('NamedPipeIOBufferSize','LongInt').SetInt( 16384);
 CL.AddConstantN('NamedPipeOutputBufferSize','').SetString( NamedPipeIOBufferSize);
 CL.AddConstantN('NamedPipeInputBufferSize','').SetString( NamedPipeIOBufferSize);
  CL.AddTypeS('TError', 'Procedure ( const Msg : string)');
  SIRegister_TNamedPipe(CL);
  SIRegister_TNamedPipeServer(CL);
  SIRegister_TNamedPipeClient(CL);
  SIRegister_ENamedPipe(CL);
  //CL.AddTypeS('TNamedPipeClass', 'class of TNamedPipe');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TNamedPipeOnError_W(Self: TNamedPipe; const T: TError);
begin Self.OnError := T; end;

(*----------------------------------------------------------------------------*)
procedure TNamedPipeOnError_R(Self: TNamedPipe; var T: TError);
begin T := Self.OnError; end;

(*----------------------------------------------------------------------------*)
procedure TNamedPipeTimeOut_W(Self: TNamedPipe; const T: Cardinal);
begin Self.TimeOut := T; end;

(*----------------------------------------------------------------------------*)
procedure TNamedPipeTimeOut_R(Self: TNamedPipe; var T: Cardinal);
begin T := Self.TimeOut; end;

(*----------------------------------------------------------------------------*)
procedure TNamedPipeHandle_R(Self: TNamedPipe; var T: THandle);
begin T := Self.Handle; end;

(*----------------------------------------------------------------------------*)
procedure TNamedPipeConnected_R(Self: TNamedPipe; var T: Boolean);
begin T := Self.Connected; end;

(*----------------------------------------------------------------------------*)
Procedure TNamedPipeRead1_P(Self: TNamedPipe;  var Buffer : WideString);
Begin Self.Read(Buffer); END;

(*----------------------------------------------------------------------------*)
Function TNamedPipeRead_P(Self: TNamedPipe) : WideString;
Begin Result := Self.Read; END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ENamedPipe(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ENamedPipe) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNamedPipeClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNamedPipeClient) do
  begin
    RegisterMethod(@TNamedPipeClient.CheckConnected, 'CheckConnected');
    RegisterMethod(@TNamedPipeClient.Connect, 'Connect');
    RegisterMethod(@TNamedPipeClient.Open, 'Open');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNamedPipeServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNamedPipeServer) do
  begin
    RegisterMethod(@TNamedPipeServer.CheckConnected, 'CheckConnected');
    RegisterMethod(@TNamedPipeServer.Connect, 'Connect');
    RegisterMethod(@TNamedPipeServer.Open, 'Open');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNamedPipe(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNamedPipe) do
  begin
    RegisterConstructor(@TNamedPipe.Create, 'Create');
    RegisterVirtualAbstractMethod(@TNamedPipe, @!.CheckConnected, 'CheckConnected');
    RegisterVirtualMethod(@TNamedPipe.Open, 'Open');
    RegisterMethod(@TNamedPipe.Close, 'Close');
    RegisterMethod(@TNamedPipeRead_P, 'Read');
    RegisterMethod(@TNamedPipeRead1_P, 'Read1');
    RegisterVirtualMethod(@TNamedPipe.Write, 'Write');
    RegisterVirtualAbstractMethod(@TNamedPipe, @!.Connect, 'Connect');
    RegisterVirtualMethod(@TNamedPipe.Disconnect, 'Disconnect');
    RegisterPropertyHelper(@TNamedPipeConnected_R,nil,'Connected');
    RegisterPropertyHelper(@TNamedPipeHandle_R,nil,'Handle');
    RegisterPropertyHelper(@TNamedPipeTimeOut_R,@TNamedPipeTimeOut_W,'TimeOut');
    RegisterPropertyHelper(@TNamedPipeOnError_R,@TNamedPipeOnError_W,'OnError');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_NamedPipesImpl(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TNamedPipe(CL);
  RIRegister_TNamedPipeServer(CL);
  RIRegister_TNamedPipeClient(CL);
  RIRegister_ENamedPipe(CL);
end;

 
 
{ TPSImport_NamedPipesImpl }
(*----------------------------------------------------------------------------*)
procedure TPSImport_NamedPipesImpl.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_NamedPipesImpl(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_NamedPipesImpl.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_NamedPipesImpl(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
