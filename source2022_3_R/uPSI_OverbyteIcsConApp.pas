unit uPSI_OverbyteIcsConApp;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_OverbyteIcsConApp = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TConApplication(CL: TPSPascalCompiler);
procedure SIRegister_TKeyboardThread(CL: TPSPascalCompiler);
procedure SIRegister_OverbyteIcsConApp(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TConApplication(CL: TPSRuntimeClassImporter);
procedure RIRegister_TKeyboardThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_OverbyteIcsConApp(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,OverbyteIcsConApp
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_OverbyteIcsConApp]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TConApplication(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TConApplication') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TConApplication') do begin
    RegisterMethod('Procedure CreateInstance( AppClass : TConApplicationClass)');
    RegisterMethod('Procedure Run');
    RegisterMethod('Procedure Done');
        RegisterMethod('Procedure Free');
     RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Execute');
    RegisterMethod('Procedure ConsoleWrite( const S : String)');
    RegisterMethod('Procedure ConsoleWriteLn( const S : String)');
    RegisterMethod('Procedure DoLineReceived( const Line : String)');
    RegisterMethod('Procedure DoCharReceived( Ch : Char)');
    RegisterProperty('ThreadID', 'Integer', iptrw);
    RegisterProperty('Terminated', 'Boolean', iptrw);
    RegisterProperty('LineMode', 'Boolean', iptrw);
    RegisterProperty('LineEcho', 'Boolean', iptrw);
    RegisterProperty('IsInputRedirected', 'Boolean', iptr);
    RegisterProperty('IsOutputRedirected', 'Boolean', iptr);
    RegisterProperty('ExeName', 'String', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TKeyboardThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'TKeyboardThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'TKeyboardThread') do begin
    RegisterProperty('ConAppThreadID', 'Integer', iptrw);
    RegisterMethod('Constructor Create( Suspended : Boolean)');
        RegisterMethod('Procedure Free');
     RegisterMethod('Procedure Execute');
    RegisterMethod('Procedure Terminate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_OverbyteIcsConApp(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('WM_STARTUP','LongInt').SetInt( WM_USER + 789);
  SIRegister_TKeyboardThread(CL);
  //CL.AddTypeS('TConApplicationClass', 'class of TConApplication');
  SIRegister_TConApplication(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TConApplicationExeName_R(Self: TConApplication; var T: String);
begin T := Self.ExeName; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationIsOutputRedirected_R(Self: TConApplication; var T: Boolean);
begin T := Self.IsOutputRedirected; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationIsInputRedirected_R(Self: TConApplication; var T: Boolean);
begin T := Self.IsInputRedirected; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationLineEcho_W(Self: TConApplication; const T: Boolean);
begin Self.LineEcho := T; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationLineEcho_R(Self: TConApplication; var T: Boolean);
begin T := Self.LineEcho; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationLineMode_W(Self: TConApplication; const T: Boolean);
begin Self.LineMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationLineMode_R(Self: TConApplication; var T: Boolean);
begin T := Self.LineMode; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationTerminated_W(Self: TConApplication; const T: Boolean);
begin Self.Terminated := T; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationTerminated_R(Self: TConApplication; var T: Boolean);
begin T := Self.Terminated; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationThreadID_W(Self: TConApplication; const T: Integer);
begin Self.ThreadID := T; end;

(*----------------------------------------------------------------------------*)
procedure TConApplicationThreadID_R(Self: TConApplication; var T: Integer);
begin T := Self.ThreadID; end;

(*----------------------------------------------------------------------------*)
procedure TKeyboardThreadConAppThreadID_W(Self: TKeyboardThread; const T: Integer);
Begin Self.ConAppThreadID := T; end;

(*----------------------------------------------------------------------------*)
procedure TKeyboardThreadConAppThreadID_R(Self: TKeyboardThread; var T: Integer);
Begin T := Self.ConAppThreadID; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TConApplication(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TConApplication) do begin
    RegisterVirtualMethod(@TConApplication.CreateInstance, 'CreateInstance');
    RegisterVirtualMethod(@TConApplication.Run, 'Run');
    RegisterVirtualMethod(@TConApplication.Done, 'Done');
    RegisterConstructor(@TConApplication.Create, 'Create');
       RegisterMethod(@TConApplication.Destroy, 'Free');

    RegisterVirtualMethod(@TConApplication.Execute, 'Execute');
    RegisterVirtualMethod(@TConApplication.ConsoleWrite, 'ConsoleWrite');
    RegisterVirtualMethod(@TConApplication.ConsoleWriteLn, 'ConsoleWriteLn');
    RegisterVirtualMethod(@TConApplication.DoLineReceived, 'DoLineReceived');
    RegisterVirtualMethod(@TConApplication.DoCharReceived, 'DoCharReceived');
    RegisterPropertyHelper(@TConApplicationThreadID_R,@TConApplicationThreadID_W,'ThreadID');
    RegisterPropertyHelper(@TConApplicationTerminated_R,@TConApplicationTerminated_W,'Terminated');
    RegisterPropertyHelper(@TConApplicationLineMode_R,@TConApplicationLineMode_W,'LineMode');
    RegisterPropertyHelper(@TConApplicationLineEcho_R,@TConApplicationLineEcho_W,'LineEcho');
    RegisterPropertyHelper(@TConApplicationIsInputRedirected_R,nil,'IsInputRedirected');
    RegisterPropertyHelper(@TConApplicationIsOutputRedirected_R,nil,'IsOutputRedirected');
    RegisterPropertyHelper(@TConApplicationExeName_R,nil,'ExeName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TKeyboardThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TKeyboardThread) do begin
    RegisterPropertyHelper(@TKeyboardThreadConAppThreadID_R,@TKeyboardThreadConAppThreadID_W,'ConAppThreadID');
    RegisterConstructor(@TKeyboardThread.Create, 'Create');
       RegisterMethod(@TKeyboardThread.Destroy, 'Free');
    RegisterMethod(@TKeyboardThread.Execute, 'Execute');
    RegisterMethod(@TKeyboardThread.Terminate, 'Terminate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_OverbyteIcsConApp(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TKeyboardThread(CL);
  RIRegister_TConApplication(CL);
end;

 
 
{ TPSImport_OverbyteIcsConApp }
(*----------------------------------------------------------------------------*)
procedure TPSImport_OverbyteIcsConApp.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_OverbyteIcsConApp(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_OverbyteIcsConApp.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_OverbyteIcsConApp(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
