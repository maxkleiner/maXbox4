unit uPSI_SimpleSFTP;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SimpleSFTP = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TSimpleSFTP(CL: TPSPascalCompiler);
procedure SIRegister_TSFTPFileList(CL: TPSPascalCompiler);
procedure SIRegister_SimpleSFTP(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TSimpleSFTP(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSFTPFileList(CL: TPSRuntimeClassImporter);
procedure RIRegister_SimpleSFTP(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Graphics
  ,Controls
  ,Forms
  ,Dialogs
  ,ssl_cryptlib
  ,StdCtrls
  ,blcksock
  ,syncobjs
  ,winsock
  ,Math
  ,CryptLib
  ,SimpleSFTP
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SimpleSFTP]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSimpleSFTP(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TSimpleSFTP') do
  with CL.AddClassN(CL.FindClass('TObject'),'TSimpleSFTP') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Connect( Host, Port, UserName, Password : string)');
    RegisterMethod('Procedure Disconnect');
    RegisterMethod('Function PutFile( LocalFileName, RemoteDir : string; PreserveFileTimes : Boolean; Overwrite : Boolean; Append : Boolean; SourceStartPos : Int64; Callback : TSimpleSFTPProgressCallback; UserData : Poin' +
      'ter) : Int64');
    RegisterMethod('Function GetFile( RemoteDir, RemoteFileName, LocalFileName : string; PreserveFileTimes : Boolean; Overwrite : Boolean; Append : Boolean; SourceStartPos : Int64; Callback : TSimpleSFTPProgressCallback;' +
      ' UserData : Pointer) : Int64');
    RegisterMethod('Procedure DeleteFile( FileName : string)');
    RegisterMethod('Procedure RenameFile( OldName, NewName : string; FailIfExists : Boolean)');
    RegisterMethod('Function FileExists( FileName : string) : Boolean');
    RegisterMethod('Function GetCurrentDir : string');
    RegisterMethod('Function SetCurrentDir( DirName : string) : string');
    RegisterMethod('Procedure ListDir( DirName : string; FileList : TSFTPFileList)');
    RegisterMethod('Procedure CreateDir( DirName : string; Attributes : PSFTPFileAttributes)');
    RegisterMethod('Procedure DeleteDir( DirName : string)');
    RegisterMethod('Procedure GetFileAtributes( FileName : string; var Attributes : TSFTPFileAttributes; FollowLink : Boolean)');
    RegisterMethod('Procedure SetFileAtributes( FileName : string; Attributes : PSFTPFileAttributes)');
    RegisterMethod('Procedure GetFileTimes( FileName : string; var AccessTime, CreateTime, ModifyTime : Int64)');
    RegisterMethod('Procedure SetFileTimes( FileName : string; AccessTime, CreateTime, ModifyTime : Int64)');
    RegisterMethod('Function GetFileSize( FileName : string) : Int64');
    RegisterProperty('Socket', 'TTCPBlockSocket', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSFTPFileList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TSFTPFileList') do
  with CL.AddClassN(CL.FindClass('TObject'),'TSFTPFileList') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Procedure Add( FileRecord : TSFTPFileAttributes)');
    RegisterMethod('Procedure Delete( i : Integer)');
    RegisterMethod('Procedure Exchange( i, j : Integer)');
    RegisterMethod('Procedure Sort( Compare : TListSortCompare)');
    RegisterProperty('Files', 'PSFTPFileAttributes Integer', iptr);
    SetDefaultPropery('Files');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SimpleSFTP(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('SFTP_PROTOCOLCURRENTVERSION','LongInt').SetInt( 3);
 CL.AddConstantN('SSH_FXP_INIT','LongInt').SetInt( 1);
 CL.AddConstantN('SSH_FXP_VERSION','LongInt').SetInt( 2);
 CL.AddConstantN('SSH_FXP_OPEN','LongInt').SetInt( 3);
 CL.AddConstantN('SSH_FXP_CLOSE','LongInt').SetInt( 4);
 CL.AddConstantN('SSH_FXP_READ','LongInt').SetInt( 5);
 CL.AddConstantN('SSH_FXP_WRITE','LongInt').SetInt( 6);
 CL.AddConstantN('SSH_FXP_LSTAT','LongInt').SetInt( 7);
 CL.AddConstantN('SSH_FXP_FSTAT','LongInt').SetInt( 8);
 CL.AddConstantN('SSH_FXP_SETSTAT','LongInt').SetInt( 9);
 CL.AddConstantN('SSH_FXP_FSETSTAT','LongInt').SetInt( 10);
 CL.AddConstantN('SSH_FXP_OPENDIR','LongInt').SetInt( 11);
 CL.AddConstantN('SSH_FXP_READDIR','LongInt').SetInt( 12);
 CL.AddConstantN('SSH_FXP_REMOVE','LongInt').SetInt( 13);
 CL.AddConstantN('SSH_FXP_MKDIR','LongInt').SetInt( 14);
 CL.AddConstantN('SSH_FXP_RMDIR','LongInt').SetInt( 15);
 CL.AddConstantN('SSH_FXP_REALPATH','LongInt').SetInt( 16);
 CL.AddConstantN('SSH_FXP_STAT','LongInt').SetInt( 17);
 CL.AddConstantN('SSH_FXP_RENAME','LongInt').SetInt( 18);
 CL.AddConstantN('SSH_FXP_READLINK','LongInt').SetInt( 19);
 CL.AddConstantN('SSH_FXP_SYMLINK','LongInt').SetInt( 20);
 CL.AddConstantN('SSH_FXP_STATUS','LongInt').SetInt( 101);
 CL.AddConstantN('SSH_FXP_HANDLE','LongInt').SetInt( 102);
 CL.AddConstantN('SSH_FXP_DATA','LongInt').SetInt( 103);
 CL.AddConstantN('SSH_FXP_NAME','LongInt').SetInt( 104);
 CL.AddConstantN('SSH_FXP_ATTRS','LongInt').SetInt( 105);
 CL.AddConstantN('SSH_FXP_EXTENDED','LongInt').SetInt( 200);
 CL.AddConstantN('SSH_FXP_EXTENDED_REPLY','LongInt').SetInt( 201);
 CL.AddConstantN('SSH_FILEXFER_ATTR_SIZE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SSH_FILEXFER_ATTR_PERMISSIONS','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SSH_FILEXFER_ATTR_ACCESSTIME','LongWord').SetUInt( $00000008);
 CL.AddConstantN('SSH_FILEXFER_ATTR_CREATETIME','LongWord').SetUInt( $00000010);
 CL.AddConstantN('SSH_FILEXFER_ATTR_MODIFYTIME','LongWord').SetUInt( $00000020);
 CL.AddConstantN('SSH_FILEXFER_ATTR_ACL','LongWord').SetUInt( $00000040);
 CL.AddConstantN('SSH_FILEXFER_ATTR_OWNERGROUP','LongWord').SetUInt( $00000080);
 CL.AddConstantN('SSH_FILEXFER_ATTR_SUBSECOND_TIMES','LongWord').SetUInt( $00000100);
 CL.AddConstantN('SSH_FILEXFER_ATTR_BITS','LongWord').SetUInt( $00000200);
 CL.AddConstantN('SSH_FILEXFER_ATTR_ALLOCATION_SIZE','LongWord').SetUInt( $00000400);
 CL.AddConstantN('SSH_FILEXFER_ATTR_TEXT_HINT','LongWord').SetUInt( $00000800);
 CL.AddConstantN('SSH_FILEXFER_ATTR_MIME_TYPE','LongWord').SetUInt( $00001000);
 CL.AddConstantN('SSH_FILEXFER_ATTR_LINK_COUNT','LongWord').SetUInt( $00002000);
 CL.AddConstantN('SSH_FILEXFER_ATTR_UNTRANLATED_NAME','LongWord').SetUInt( $00004000);
 CL.AddConstantN('SSH_FILEXFER_ATTR_EXTENDED','LongWord').SetUInt( $80000000);
 CL.AddConstantN('SSH_FILEXFER_TYPE_REGULAR','LongInt').SetInt( 1);
 CL.AddConstantN('SSH_FILEXFER_TYPE_DIRECTORY','LongInt').SetInt( 2);
 CL.AddConstantN('SSH_FILEXFER_TYPE_SYMLINK','LongInt').SetInt( 3);
 CL.AddConstantN('SSH_FILEXFER_TYPE_SPECIAL','LongInt').SetInt( 4);
 CL.AddConstantN('SSH_FILEXFER_TYPE_UNKNOWN','LongInt').SetInt( 5);
 CL.AddConstantN('SSH_FILEXFER_TYPE_SOCKET','LongInt').SetInt( 6);
 CL.AddConstantN('SSH_FILEXFER_TYPE_CHAR_DEVICE','LongInt').SetInt( 7);
 CL.AddConstantN('SSH_FILEXFER_TYPE_BLOCK_DEVICE','LongInt').SetInt( 8);
 CL.AddConstantN('SSH_FILEXFER_TYPE_FIFO','LongInt').SetInt( 9);
 CL.AddConstantN('S_IRUSR','LongWord').SetUInt( $0000400);
 CL.AddConstantN('S_IWUSR','LongWord').SetUInt( $0000200);
 CL.AddConstantN('S_IXUSR','LongWord').SetUInt( $0000100);
 CL.AddConstantN('S_IRGRP','LongWord').SetUInt( $0000040);
 CL.AddConstantN('S_IWGRP','LongWord').SetUInt( $0000020);
 CL.AddConstantN('S_IXGRP','LongWord').SetUInt( $0000010);
 CL.AddConstantN('S_IROTH','LongWord').SetUInt( $0000004);
 CL.AddConstantN('S_IWOTH','LongWord').SetUInt( $0000002);
 CL.AddConstantN('S_IXOTH','LongWord').SetUInt( $0000001);
 CL.AddConstantN('S_ISUID','LongWord').SetUInt( $0004000);
 CL.AddConstantN('S_ISGID','LongWord').SetUInt( $0002000);
 CL.AddConstantN('S_ISVTX','LongWord').SetUInt( $0001000);
 CL.AddConstantN('S_IFMT','LongWord').SetUInt( $0170000);
 CL.AddConstantN('S_IFSOCK','LongWord').SetUInt( $0140000);
 CL.AddConstantN('S_IFLNK','LongWord').SetUInt( $0120000);
 CL.AddConstantN('S_IFREG','LongWord').SetUInt( $0100000);
 CL.AddConstantN('S_IFBLK','LongWord').SetUInt( $0060000);
 CL.AddConstantN('S_IFDIR','LongWord').SetUInt( $0040000);
 CL.AddConstantN('S_IFCHR','LongWord').SetUInt( $0020000);
 CL.AddConstantN('S_IFIFO','LongWord').SetUInt( $0010000);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_READONLY','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_SYSTEM','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_HIDDEN','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_CASE_INSENSITIVE','LongWord').SetUInt( $00000008);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_ARCHIVE','LongWord').SetUInt( $00000010);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_ENCRYPTED','LongWord').SetUInt( $00000020);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_COMPRESSED','LongWord').SetUInt( $00000040);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_SPARSE','LongWord').SetUInt( $00000080);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_APPEND_ONLY','LongWord').SetUInt( $00000100);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_IMMUTABLE','LongWord').SetUInt( $00000200);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_SYNC','LongWord').SetUInt( $00000400);
 CL.AddConstantN('SSH_FILEXFER_ATTR_FLAGS_TRANSLATION_ERR','LongWord').SetUInt( $00000800);
 CL.AddConstantN('ACE4_READ_DATA','LongWord').SetUInt( $00000001);
 CL.AddConstantN('ACE4_LIST_DIRECTORY','LongWord').SetUInt( $00000001);
 CL.AddConstantN('ACE4_WRITE_DATA','LongWord').SetUInt( $00000002);
 CL.AddConstantN('ACE4_ADD_FILE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('ACE4_APPEND_DATA','LongWord').SetUInt( $00000004);
 CL.AddConstantN('ACE4_ADD_SUBDIRECTORY','LongWord').SetUInt( $00000004);
 CL.AddConstantN('ACE4_READ_NAMED_ATTRS','LongWord').SetUInt( $00000008);
 CL.AddConstantN('ACE4_WRITE_NAMED_ATTRS','LongWord').SetUInt( $00000010);
 CL.AddConstantN('ACE4_EXECUTE','LongWord').SetUInt( $00000020);
 CL.AddConstantN('ACE4_DELETE_CHILD','LongWord').SetUInt( $00000040);
 CL.AddConstantN('ACE4_READ_ATTRIBUTES','LongWord').SetUInt( $00000080);
 CL.AddConstantN('ACE4_WRITE_ATTRIBUTES','LongWord').SetUInt( $00000100);
 CL.AddConstantN('ACE4_DELETE','LongWord').SetUInt( $00010000);
 CL.AddConstantN('ACE4_READ_ACL','LongWord').SetUInt( $00020000);
 CL.AddConstantN('ACE4_WRITE_ACL','LongWord').SetUInt( $00040000);
 CL.AddConstantN('ACE4_WRITE_OWNER','LongWord').SetUInt( $00080000);
 CL.AddConstantN('ACE4_SYNCHRONIZE','LongWord').SetUInt( $00100000);
 CL.AddConstantN('SSH_FXF_ACCESS_DISPOSITION','LongWord').SetUInt( $00000007);
 CL.AddConstantN('SSH_FXF_CREATE_NEW','LongWord').SetUInt( $00000000);
 CL.AddConstantN('SSH_FXF_CREATE_TRUNCATE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SSH_FXF_OPEN_EXISTING','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SSH_FXF_OPEN_OR_CREATE','LongWord').SetUInt( $00000003);
 CL.AddConstantN('SSH_FXF_TRUNCATE_EXISTING','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SSH_FXF_ACCESS_APPEND_DATA','LongWord').SetUInt( $00000008);
 CL.AddConstantN('SSH_FXF_ACCESS_APPEND_DATA_ATOMIC','LongWord').SetUInt( $00000010);
 CL.AddConstantN('SSH_FXF_ACCESS_TEXT_MODE','LongWord').SetUInt( $00000020);
 CL.AddConstantN('SSH_FXF_ACCESS_READ_LOCK','LongWord').SetUInt( $00000040);
 CL.AddConstantN('SSH_FXF_ACCESS_WRITE_LOCK','LongWord').SetUInt( $00000080);
 CL.AddConstantN('SSH_FXF_ACCESS_DELETE_LOCK','LongWord').SetUInt( $00000100);
 CL.AddConstantN('SSH_FXF_NOFOLLOW','LongWord').SetUInt( $00000200);
 CL.AddConstantN('SSH_FXF_READ','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SSH_FXF_WRITE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SSH_FXF_APPEND','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SSH_FXF_CREAT','LongWord').SetUInt( $00000008);
 CL.AddConstantN('SSH_FXF_TRUNC','LongWord').SetUInt( $00000010);
 CL.AddConstantN('SSH_FXF_EXCL','LongWord').SetUInt( $00000020);
 CL.AddConstantN('SSH_FXP_RENAME_OVERWRITE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SSH_FXP_RENAME_ATOMIC','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SSH_FXP_RENAME_NATIVE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SSH_FX_OK','LongInt').SetInt( 0);
 CL.AddConstantN('SSH_FX_EOF','LongInt').SetInt( 1);
 CL.AddConstantN('SSH_FX_NO_SUCH_FILE','LongInt').SetInt( 2);
 CL.AddConstantN('SSH_FX_PERMISSION_DENIED','LongInt').SetInt( 3);
 CL.AddConstantN('SSH_FX_FAILURE','LongInt').SetInt( 4);
 CL.AddConstantN('SSH_FX_BAD_MESSAGE','LongInt').SetInt( 5);
 CL.AddConstantN('SSH_FX_NO_CONNECTION','LongInt').SetInt( 6);
 CL.AddConstantN('SSH_FX_CONNECTION_LOST','LongInt').SetInt( 7);
 CL.AddConstantN('SSH_FX_OP_UNSUPPORTED','LongInt').SetInt( 8);
 CL.AddConstantN('SSH_FX_INVALID_HANDLE','LongInt').SetInt( 9);
 CL.AddConstantN('SSH_FX_NO_SUCH_PATH','LongInt').SetInt( 10);
 CL.AddConstantN('SSH_FX_FILE_ALREADY_EXISTS','LongInt').SetInt( 11);
 CL.AddConstantN('SSH_FX_WRITE_PROTECT','LongInt').SetInt( 12);
 CL.AddConstantN('SSH_FX_NO_MEDIA','LongInt').SetInt( 13);
 CL.AddConstantN('SSH_FX_NO_SPACE_ON_FILESYSTEM','LongInt').SetInt( 14);
 CL.AddConstantN('SSH_FX_QUOTA_EXCEEDED','LongInt').SetInt( 15);
 CL.AddConstantN('SSH_FX_UNKNOWN_PRINCIPLE','LongInt').SetInt( 16);
 CL.AddConstantN('SSH_FX_LOCK_CONFlICT','LongInt').SetInt( 17);
 CL.AddConstantN('SSH_FX_DIR_NOT_EMPTY','LongInt').SetInt( 18);
 CL.AddConstantN('SSH_FX_NOT_A_DIRECTORY','LongInt').SetInt( 19);
 CL.AddConstantN('SSH_FX_INVALID_FILENAME','LongInt').SetInt( 20);
 CL.AddConstantN('SSH_FX_LINK_LOOP','LongInt').SetInt( 21);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSimpleSFTP');
  CL.AddTypeS('TSFTPFileAttributes', 'record FileName : string; LongName : stri'
   +'ng; valid_attribute_flags : DWORD; file_type : byte; size : int64; allocat'
   +'ion_size : int64; owner : string; group : string; permissions : DWORD; ati'
   +'me : int64; atime_nseconds : DWORD; createtime : int64; createtime_nsecond'
   +'s : DWORD; mtime : int64; mtime_nseconds : DWORD; acl : string; attrib_bit'
   +'s : DWORD; text_hint : byte; mime_type : string; link_count : DWORD; untra'
   +'nslated_name : string; extended_count : DWORD; end');
  CL.AddTypeS('PSFTPFileAttributes', '^TSFTPFileAttributes // will not work');
  SIRegister_TSFTPFileList(CL);
  CL.AddTypeS('TSimpleSFTPProgressCallback', 'Function ( UserData : Pointer; Cu'
   +'rrent, Total : Int64) : Boolean');
  CL.AddTypeS('TSimpleSMPTEvent', 'Procedure ( Sender : TSimpleSFTP)');
  SIRegister_TSimpleSFTP(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSimpleSFTPSocket_R(Self: TSimpleSFTP; var T: TTCPBlockSocket);
begin T := Self.Socket; end;

(*----------------------------------------------------------------------------*)
procedure TSFTPFileListFiles_R(Self: TSFTPFileList; var T: PSFTPFileAttributes; const t1: Integer);
begin T := Self.Files[t1]; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSimpleSFTP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSimpleSFTP) do
  begin
    RegisterVirtualConstructor(@TSimpleSFTP.Create, 'Create');
    RegisterMethod(@TSimpleSFTP.Connect, 'Connect');
    RegisterMethod(@TSimpleSFTP.Disconnect, 'Disconnect');
    RegisterMethod(@TSimpleSFTP.PutFile, 'PutFile');
    RegisterMethod(@TSimpleSFTP.GetFile, 'GetFile');
    RegisterMethod(@TSimpleSFTP.DeleteFile, 'DeleteFile');
    RegisterMethod(@TSimpleSFTP.RenameFile, 'RenameFile');
    RegisterMethod(@TSimpleSFTP.FileExists, 'FileExists');
    RegisterMethod(@TSimpleSFTP.GetCurrentDir, 'GetCurrentDir');
    RegisterMethod(@TSimpleSFTP.SetCurrentDir, 'SetCurrentDir');
    RegisterMethod(@TSimpleSFTP.ListDir, 'ListDir');
    RegisterMethod(@TSimpleSFTP.CreateDir, 'CreateDir');
    RegisterMethod(@TSimpleSFTP.DeleteDir, 'DeleteDir');
    RegisterMethod(@TSimpleSFTP.GetFileAtributes, 'GetFileAtributes');
    RegisterMethod(@TSimpleSFTP.SetFileAtributes, 'SetFileAtributes');
    RegisterMethod(@TSimpleSFTP.GetFileTimes, 'GetFileTimes');
    RegisterMethod(@TSimpleSFTP.SetFileTimes, 'SetFileTimes');
    RegisterMethod(@TSimpleSFTP.GetFileSize, 'GetFileSize');
    RegisterPropertyHelper(@TSimpleSFTPSocket_R,nil,'Socket');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSFTPFileList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSFTPFileList) do
  begin
    RegisterConstructor(@TSFTPFileList.Create, 'Create');
    RegisterMethod(@TSFTPFileList.Clear, 'Clear');
    RegisterMethod(@TSFTPFileList.Count, 'Count');
    RegisterMethod(@TSFTPFileList.Add, 'Add');
    RegisterMethod(@TSFTPFileList.Delete, 'Delete');
    RegisterMethod(@TSFTPFileList.Exchange, 'Exchange');
    RegisterMethod(@TSFTPFileList.Sort, 'Sort');
    RegisterPropertyHelper(@TSFTPFileListFiles_R,nil,'Files');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SimpleSFTP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSimpleSFTP) do
  RIRegister_TSFTPFileList(CL);
  RIRegister_TSimpleSFTP(CL);
end;

 
 
{ TPSImport_SimpleSFTP }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SimpleSFTP.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SimpleSFTP(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SimpleSFTP.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SimpleSFTP(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
