unit uPSI_IdTunnelSlave;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdTunnelSlave = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdTunnelSlave(CL: TPSPascalCompiler);
procedure SIRegister_TSlaveThread(CL: TPSPascalCompiler);
procedure SIRegister_TClientData(CL: TPSPascalCompiler);
procedure SIRegister_IdTunnelSlave(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdTunnelSlave(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSlaveThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_TClientData(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdTunnelSlave(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   SyncObjs
  ,IdTunnelCommon
  ,IdTCPServer
  ,IdTCPClient
  ,IdGlobal
  ,IdStack
  ,IdResourceStrings
  ,IdThread
  ,IdComponent
  ,IdTCPConnection
  ,IdTunnelSlave
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdTunnelSlave]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdTunnelSlave(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPServer', 'TIdTunnelSlave') do
  with CL.AddClassN(CL.FindClass('TIdTCPServer'),'TIdTunnelSlave') do
  begin
    RegisterMethod('Procedure SetStatistics( Module : Integer; Value : Integer)');
    RegisterMethod('Procedure GetStatistics( Module : Integer; var Value : Integer)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('Active', 'Boolean', iptrw);
    RegisterProperty('Logger', 'TLogger', iptrw);
    RegisterProperty('NumClients', 'Integer', iptr);
    RegisterProperty('MasterHost', 'string', iptrw);
    RegisterProperty('MasterPort', 'Integer', iptrw);
    RegisterProperty('Socks4', 'Boolean', iptrw);
    RegisterProperty('OnDisconnect', 'TIdServerThreadEvent', iptrw);
    RegisterProperty('OnBeforeTunnelConnect', 'TSendTrnEventC', iptrw);
    RegisterProperty('OnTransformRead', 'TTunnelEventC', iptrw);
    RegisterProperty('OnInterpretMsg', 'TSendMsgEventC', iptrw);
    RegisterProperty('OnTransformSend', 'TSendTrnEventC', iptrw);
    RegisterProperty('OnStatus', 'TIdStatusEvent', iptrw);
    RegisterProperty('OnTunnelDisconnect', 'TTunnelEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSlaveThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdThread', 'TSlaveThread') do
  with CL.AddClassN(CL.FindClass('TIdThread'),'TSlaveThread') do
  begin
    RegisterProperty('SlaveParent', 'TIdTunnelSlave', iptrw);
    RegisterProperty('Receiver', 'TReceiver', iptrw);
    RegisterProperty('Executed', 'Boolean', iptrw);
    RegisterProperty('Connection', 'TIdTCPClient', iptr);
    RegisterMethod('Constructor Create( Slave : TIdTunnelSlave)');
    RegisterMethod('Procedure Execute');
    RegisterMethod('Procedure Run');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TClientData(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TClientData') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TClientData') do
  begin
    RegisterProperty('Id', 'Integer', iptrw);
    RegisterProperty('TimeOfConnection', 'TDateTime', iptrw);
    RegisterProperty('DisconnectedOnRequest', 'Boolean', iptrw);
    RegisterProperty('SelfDisconnected', 'Boolean', iptrw);
    RegisterProperty('ClientAuthorised', 'Boolean', iptrw);
    RegisterProperty('Locker', 'TCriticalSection', iptrw);
    RegisterProperty('Port', 'Word', iptrw);
    RegisterProperty('IpAddr', 'TIdInAddr', iptrw);
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdTunnelSlave(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSlaveThread');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIdTunnelSlave');
  CL.AddTypeS('TTunnelEvent', 'Procedure ( Thread : TSlaveThread)');
  SIRegister_TClientData(CL);
  SIRegister_TSlaveThread(CL);
  SIRegister_TIdTunnelSlave(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnTunnelDisconnect_W(Self: TIdTunnelSlave; const T: TTunnelEvent);
begin Self.OnTunnelDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnTunnelDisconnect_R(Self: TIdTunnelSlave; var T: TTunnelEvent);
begin T := Self.OnTunnelDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnStatus_W(Self: TIdTunnelSlave; const T: TIdStatusEvent);
begin Self.OnStatus := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnStatus_R(Self: TIdTunnelSlave; var T: TIdStatusEvent);
begin T := Self.OnStatus; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnTransformSend_W(Self: TIdTunnelSlave; const T: TSendTrnEventC);
begin Self.OnTransformSend := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnTransformSend_R(Self: TIdTunnelSlave; var T: TSendTrnEventC);
begin T := Self.OnTransformSend; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnInterpretMsg_W(Self: TIdTunnelSlave; const T: TSendMsgEventC);
begin Self.OnInterpretMsg := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnInterpretMsg_R(Self: TIdTunnelSlave; var T: TSendMsgEventC);
begin T := Self.OnInterpretMsg; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnTransformRead_W(Self: TIdTunnelSlave; const T: TTunnelEventC);
begin Self.OnTransformRead := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnTransformRead_R(Self: TIdTunnelSlave; var T: TTunnelEventC);
begin T := Self.OnTransformRead; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnBeforeTunnelConnect_W(Self: TIdTunnelSlave; const T: TSendTrnEventC);
begin Self.OnBeforeTunnelConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnBeforeTunnelConnect_R(Self: TIdTunnelSlave; var T: TSendTrnEventC);
begin T := Self.OnBeforeTunnelConnect; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnDisconnect_W(Self: TIdTunnelSlave; const T: TIdServerThreadEvent);
begin Self.OnDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveOnDisconnect_R(Self: TIdTunnelSlave; var T: TIdServerThreadEvent);
begin T := Self.OnDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveSocks4_W(Self: TIdTunnelSlave; const T: Boolean);
begin Self.Socks4 := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveSocks4_R(Self: TIdTunnelSlave; var T: Boolean);
begin T := Self.Socks4; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveMasterPort_W(Self: TIdTunnelSlave; const T: Integer);
begin Self.MasterPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveMasterPort_R(Self: TIdTunnelSlave; var T: Integer);
begin T := Self.MasterPort; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveMasterHost_W(Self: TIdTunnelSlave; const T: string);
begin Self.MasterHost := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveMasterHost_R(Self: TIdTunnelSlave; var T: string);
begin T := Self.MasterHost; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveNumClients_R(Self: TIdTunnelSlave; var T: Integer);
begin T := Self.NumClients; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveLogger_W(Self: TIdTunnelSlave; const T: TLogger);
begin Self.Logger := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveLogger_R(Self: TIdTunnelSlave; var T: TLogger);
begin T := Self.Logger; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveActive_W(Self: TIdTunnelSlave; const T: Boolean);
begin Self.Active := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelSlaveActive_R(Self: TIdTunnelSlave; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveThreadConnection_R(Self: TSlaveThread; var T: TIdTCPClient);
begin T := Self.Connection; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveThreadExecuted_W(Self: TSlaveThread; const T: Boolean);
begin Self.Executed := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveThreadExecuted_R(Self: TSlaveThread; var T: Boolean);
begin T := Self.Executed; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveThreadReceiver_W(Self: TSlaveThread; const T: TReceiver);
Begin Self.Receiver := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveThreadReceiver_R(Self: TSlaveThread; var T: TReceiver);
Begin T := Self.Receiver; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveThreadSlaveParent_W(Self: TSlaveThread; const T: TIdTunnelSlave);
Begin Self.SlaveParent := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveThreadSlaveParent_R(Self: TSlaveThread; var T: TIdTunnelSlave);
Begin T := Self.SlaveParent; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataIpAddr_W(Self: TClientData; const T: TIdInAddr);
Begin Self.IpAddr := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataIpAddr_R(Self: TClientData; var T: TIdInAddr);
Begin T := Self.IpAddr; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataPort_W(Self: TClientData; const T: Word);
Begin Self.Port := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataPort_R(Self: TClientData; var T: Word);
Begin T := Self.Port; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataLocker_W(Self: TClientData; const T: TCriticalSection);
Begin Self.Locker := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataLocker_R(Self: TClientData; var T: TCriticalSection);
Begin T := Self.Locker; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataClientAuthorised_W(Self: TClientData; const T: Boolean);
Begin Self.ClientAuthorised := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataClientAuthorised_R(Self: TClientData; var T: Boolean);
Begin T := Self.ClientAuthorised; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataSelfDisconnected_W(Self: TClientData; const T: Boolean);
Begin Self.SelfDisconnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataSelfDisconnected_R(Self: TClientData; var T: Boolean);
Begin T := Self.SelfDisconnected; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataDisconnectedOnRequest_W(Self: TClientData; const T: Boolean);
Begin Self.DisconnectedOnRequest := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataDisconnectedOnRequest_R(Self: TClientData; var T: Boolean);
Begin T := Self.DisconnectedOnRequest; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataTimeOfConnection_W(Self: TClientData; const T: TDateTime);
Begin Self.TimeOfConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataTimeOfConnection_R(Self: TClientData; var T: TDateTime);
Begin T := Self.TimeOfConnection; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataId_W(Self: TClientData; const T: Integer);
Begin Self.Id := T; end;

(*----------------------------------------------------------------------------*)
procedure TClientDataId_R(Self: TClientData; var T: Integer);
Begin T := Self.Id; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdTunnelSlave(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTunnelSlave) do
  begin
    RegisterMethod(@TIdTunnelSlave.SetStatistics, 'SetStatistics');
    RegisterMethod(@TIdTunnelSlave.GetStatistics, 'GetStatistics');
    RegisterConstructor(@TIdTunnelSlave.Create, 'Create');
    RegisterPropertyHelper(@TIdTunnelSlaveActive_R,@TIdTunnelSlaveActive_W,'Active');
    RegisterPropertyHelper(@TIdTunnelSlaveLogger_R,@TIdTunnelSlaveLogger_W,'Logger');
    RegisterPropertyHelper(@TIdTunnelSlaveNumClients_R,nil,'NumClients');
    RegisterPropertyHelper(@TIdTunnelSlaveMasterHost_R,@TIdTunnelSlaveMasterHost_W,'MasterHost');
    RegisterPropertyHelper(@TIdTunnelSlaveMasterPort_R,@TIdTunnelSlaveMasterPort_W,'MasterPort');
    RegisterPropertyHelper(@TIdTunnelSlaveSocks4_R,@TIdTunnelSlaveSocks4_W,'Socks4');
    RegisterPropertyHelper(@TIdTunnelSlaveOnDisconnect_R,@TIdTunnelSlaveOnDisconnect_W,'OnDisconnect');
    RegisterPropertyHelper(@TIdTunnelSlaveOnBeforeTunnelConnect_R,@TIdTunnelSlaveOnBeforeTunnelConnect_W,'OnBeforeTunnelConnect');
    RegisterPropertyHelper(@TIdTunnelSlaveOnTransformRead_R,@TIdTunnelSlaveOnTransformRead_W,'OnTransformRead');
    RegisterPropertyHelper(@TIdTunnelSlaveOnInterpretMsg_R,@TIdTunnelSlaveOnInterpretMsg_W,'OnInterpretMsg');
    RegisterPropertyHelper(@TIdTunnelSlaveOnTransformSend_R,@TIdTunnelSlaveOnTransformSend_W,'OnTransformSend');
    RegisterPropertyHelper(@TIdTunnelSlaveOnStatus_R,@TIdTunnelSlaveOnStatus_W,'OnStatus');
    RegisterPropertyHelper(@TIdTunnelSlaveOnTunnelDisconnect_R,@TIdTunnelSlaveOnTunnelDisconnect_W,'OnTunnelDisconnect');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSlaveThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSlaveThread) do
  begin
    RegisterPropertyHelper(@TSlaveThreadSlaveParent_R,@TSlaveThreadSlaveParent_W,'SlaveParent');
    RegisterPropertyHelper(@TSlaveThreadReceiver_R,@TSlaveThreadReceiver_W,'Receiver');
    RegisterPropertyHelper(@TSlaveThreadExecuted_R,@TSlaveThreadExecuted_W,'Executed');
    RegisterPropertyHelper(@TSlaveThreadConnection_R,nil,'Connection');
    RegisterConstructor(@TSlaveThread.Create, 'Create');
    RegisterMethod(@TSlaveThread.Execute, 'Execute');
    RegisterMethod(@TSlaveThread.Run, 'Run');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TClientData(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TClientData) do
  begin
    RegisterPropertyHelper(@TClientDataId_R,@TClientDataId_W,'Id');
    RegisterPropertyHelper(@TClientDataTimeOfConnection_R,@TClientDataTimeOfConnection_W,'TimeOfConnection');
    RegisterPropertyHelper(@TClientDataDisconnectedOnRequest_R,@TClientDataDisconnectedOnRequest_W,'DisconnectedOnRequest');
    RegisterPropertyHelper(@TClientDataSelfDisconnected_R,@TClientDataSelfDisconnected_W,'SelfDisconnected');
    RegisterPropertyHelper(@TClientDataClientAuthorised_R,@TClientDataClientAuthorised_W,'ClientAuthorised');
    RegisterPropertyHelper(@TClientDataLocker_R,@TClientDataLocker_W,'Locker');
    RegisterPropertyHelper(@TClientDataPort_R,@TClientDataPort_W,'Port');
    RegisterPropertyHelper(@TClientDataIpAddr_R,@TClientDataIpAddr_W,'IpAddr');
    RegisterConstructor(@TClientData.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdTunnelSlave(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSlaveThread) do
  with CL.Add(TIdTunnelSlave) do
  RIRegister_TClientData(CL);
  RIRegister_TSlaveThread(CL);
  RIRegister_TIdTunnelSlave(CL);
end;

 
 
{ TPSImport_IdTunnelSlave }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTunnelSlave.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdTunnelSlave(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTunnelSlave.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdTunnelSlave(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
