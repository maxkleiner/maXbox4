unit uPSI_JvOracleDataSet;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvOracleDataSet = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJvOracleDataset(CL: TPSPascalCompiler);
procedure SIRegister_TJvOracleDatasetThreadHandler(CL: TPSPascalCompiler);
procedure SIRegister_TJvDoaThreadedDatasetEnhancedOptions(CL: TPSPascalCompiler);
procedure SIRegister_TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions(CL: TPSPascalCompiler);
procedure SIRegister_JvOracleDataSet(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvOracleDataset(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvOracleDatasetThreadHandler(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvDoaThreadedDatasetEnhancedOptions(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvOracleDataSet(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
  // JclUnitVersioning
  StdCtrls
  ,ExtCtrls
  ,Forms
  ,Controls
  ,DB
  ,OracleData
  ,JvThread
  ,JvThreadDialog
  ,JvDynControlEngine
  ,JvBaseDBThreadedDataSet
  ,JvOracleDataSet
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvOracleDataSet]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvOracleDataset(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOracleDataset', 'TJvOracleDataset') do
  with CL.AddClassN(CL.FindClass('TOracleDataset'),'TJvOracleDataset') do
  begin
    RegisterMethod('Procedure BreakExecution');
    RegisterMethod('Procedure BringThreadDialogToFront');
    RegisterMethod('Function DoGetInheritedNextRecord : Boolean');
    RegisterMethod('Procedure DoInheritedAfterOpen');
    RegisterMethod('Procedure DoInheritedAfterRefresh');
    RegisterMethod('Procedure DoInheritedAfterScroll');
    RegisterMethod('Procedure DoInheritedBeforeOpen');
    RegisterMethod('Procedure DoInheritedBeforeRefresh');
    RegisterMethod('Procedure DoInheritedInternalLast');
    RegisterMethod('Procedure DoInheritedInternalRefresh');
    RegisterMethod('Procedure DoInheritedSetActive( Active : Boolean)');
    RegisterMethod('Procedure DoInternalOpen');
    RegisterMethod('Function GetDatasetFetchAllRecords : Boolean');
    RegisterMethod('Function IsThreadAllowed : Boolean');
    RegisterMethod('Procedure SetDatasetFetchAllRecords( const Value : Boolean)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function CurrentFetchDuration : TDateTime');
    RegisterMethod('Function CurrentOpenDuration : TDateTime');
    RegisterMethod('Function EofReached : Boolean');
    RegisterMethod('Function ErrorException : Exception');
    RegisterMethod('Function ErrorMessage : string');
    RegisterMethod('Function ThreadIsActive : Boolean');
    RegisterProperty('BeforeThreadExecution', 'TJvThreadedDatasetThreadEvent', iptrw);
    RegisterProperty('DialogOptions', 'TJvThreadedDatasetDialogOptions', iptrw);
    RegisterProperty('EnhancedOptions', 'TJvDoaThreadedDatasetEnhancedOptions', iptrw);
    RegisterProperty('ThreadOptions', 'TJvThreadedDatasetThreadOptions', iptrw);
    RegisterProperty('AfterFetchRecord', 'TAfterFetchRecordEvent', iptrw);
    RegisterProperty('AfterOpenFetch', 'TDataSetNotifyEvent', iptrw);
    RegisterProperty('AfterThreadExecution', 'TJvThreadedDatasetThreadEvent', iptrw);
    RegisterProperty('OnThreadException', 'TJvThreadedDatasetThreadExceptionEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvOracleDatasetThreadHandler(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseDatasetThreadHandler', 'TJvOracleDatasetThreadHandler') do
  with CL.AddClassN(CL.FindClass('TJvBaseDatasetThreadHandler'),'TJvOracleDatasetThreadHandler') do
  begin
    RegisterProperty('EnhancedOptions', 'TJvDoaThreadedDatasetEnhancedOptions', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvDoaThreadedDatasetEnhancedOptions(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseThreadedDatasetEnhancedOptions', 'TJvDoaThreadedDatasetEnhancedOptions') do
  with CL.AddClassN(CL.FindClass('TJvBaseThreadedDatasetEnhancedOptions'),'TJvDoaThreadedDatasetEnhancedOptions') do
  begin
    RegisterProperty('AllowedContinueRecordFetchOptions', 'TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseThreadedDatasetAllowedContinueRecordFetchOptions', 'TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions') do
  with CL.AddClassN(CL.FindClass('TJvBaseThreadedDatasetAllowedContinueRecordFetchOptions'),'TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions') do
  begin
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvOracleDataSet(CL: TPSPascalCompiler);
begin
  SIRegister_TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions(CL);
  SIRegister_TJvDoaThreadedDatasetEnhancedOptions(CL);
  SIRegister_TJvOracleDatasetThreadHandler(CL);
  SIRegister_TJvOracleDataset(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetOnThreadException_W(Self: TJvOracleDataset; const T: TJvThreadedDatasetThreadExceptionEvent);
begin Self.OnThreadException := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetOnThreadException_R(Self: TJvOracleDataset; var T: TJvThreadedDatasetThreadExceptionEvent);
begin T := Self.OnThreadException; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetAfterThreadExecution_W(Self: TJvOracleDataset; const T: TJvThreadedDatasetThreadEvent);
begin Self.AfterThreadExecution := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetAfterThreadExecution_R(Self: TJvOracleDataset; var T: TJvThreadedDatasetThreadEvent);
begin T := Self.AfterThreadExecution; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetAfterOpenFetch_W(Self: TJvOracleDataset; const T: TDataSetNotifyEvent);
begin Self.AfterOpenFetch := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetAfterOpenFetch_R(Self: TJvOracleDataset; var T: TDataSetNotifyEvent);
begin T := Self.AfterOpenFetch; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetAfterFetchRecord_W(Self: TJvOracleDataset; const T: TAfterFetchRecordEvent);
begin Self.AfterFetchRecord := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetAfterFetchRecord_R(Self: TJvOracleDataset; var T: TAfterFetchRecordEvent);
begin T := Self.AfterFetchRecord; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetThreadOptions_W(Self: TJvOracleDataset; const T: TJvThreadedDatasetThreadOptions);
begin Self.ThreadOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetThreadOptions_R(Self: TJvOracleDataset; var T: TJvThreadedDatasetThreadOptions);
begin T := Self.ThreadOptions; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetEnhancedOptions_W(Self: TJvOracleDataset; const T: TJvDoaThreadedDatasetEnhancedOptions);
begin Self.EnhancedOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetEnhancedOptions_R(Self: TJvOracleDataset; var T: TJvDoaThreadedDatasetEnhancedOptions);
begin T := Self.EnhancedOptions; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetDialogOptions_W(Self: TJvOracleDataset; const T: TJvThreadedDatasetDialogOptions);
begin Self.DialogOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetDialogOptions_R(Self: TJvOracleDataset; var T: TJvThreadedDatasetDialogOptions);
begin T := Self.DialogOptions; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetBeforeThreadExecution_W(Self: TJvOracleDataset; const T: TJvThreadedDatasetThreadEvent);
begin Self.BeforeThreadExecution := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetBeforeThreadExecution_R(Self: TJvOracleDataset; var T: TJvThreadedDatasetThreadEvent);
begin T := Self.BeforeThreadExecution; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetThreadHandlerEnhancedOptions_W(Self: TJvOracleDatasetThreadHandler; const T: TJvDoaThreadedDatasetEnhancedOptions);
begin Self.EnhancedOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvOracleDatasetThreadHandlerEnhancedOptions_R(Self: TJvOracleDatasetThreadHandler; var T: TJvDoaThreadedDatasetEnhancedOptions);
begin T := Self.EnhancedOptions; end;

(*----------------------------------------------------------------------------*)
procedure TJvDoaThreadedDatasetEnhancedOptionsAllowedContinueRecordFetchOptions_W(Self: TJvDoaThreadedDatasetEnhancedOptions; const T: TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions);
begin Self.AllowedContinueRecordFetchOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvDoaThreadedDatasetEnhancedOptionsAllowedContinueRecordFetchOptions_R(Self: TJvDoaThreadedDatasetEnhancedOptions; var T: TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions);
begin T := Self.AllowedContinueRecordFetchOptions; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvOracleDataset(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvOracleDataset) do
  begin
    RegisterMethod(@TJvOracleDataset.BreakExecution, 'BreakExecution');
    RegisterMethod(@TJvOracleDataset.BringThreadDialogToFront, 'BringThreadDialogToFront');
    RegisterMethod(@TJvOracleDataset.DoGetInheritedNextRecord, 'DoGetInheritedNextRecord');
    RegisterMethod(@TJvOracleDataset.DoInheritedAfterOpen, 'DoInheritedAfterOpen');
    RegisterMethod(@TJvOracleDataset.DoInheritedAfterRefresh, 'DoInheritedAfterRefresh');
    RegisterMethod(@TJvOracleDataset.DoInheritedAfterScroll, 'DoInheritedAfterScroll');
    RegisterMethod(@TJvOracleDataset.DoInheritedBeforeOpen, 'DoInheritedBeforeOpen');
    RegisterMethod(@TJvOracleDataset.DoInheritedBeforeRefresh, 'DoInheritedBeforeRefresh');
    RegisterMethod(@TJvOracleDataset.DoInheritedInternalLast, 'DoInheritedInternalLast');
    RegisterMethod(@TJvOracleDataset.DoInheritedInternalRefresh, 'DoInheritedInternalRefresh');
    RegisterMethod(@TJvOracleDataset.DoInheritedSetActive, 'DoInheritedSetActive');
    RegisterMethod(@TJvOracleDataset.DoInternalOpen, 'DoInternalOpen');
    RegisterMethod(@TJvOracleDataset.GetDatasetFetchAllRecords, 'GetDatasetFetchAllRecords');
    RegisterMethod(@TJvOracleDataset.IsThreadAllowed, 'IsThreadAllowed');
    RegisterMethod(@TJvOracleDataset.SetDatasetFetchAllRecords, 'SetDatasetFetchAllRecords');
    RegisterConstructor(@TJvOracleDataset.Create, 'Create');
    RegisterMethod(@TJvOracleDataset.CurrentFetchDuration, 'CurrentFetchDuration');
    RegisterMethod(@TJvOracleDataset.CurrentOpenDuration, 'CurrentOpenDuration');
    RegisterMethod(@TJvOracleDataset.EofReached, 'EofReached');
    RegisterMethod(@TJvOracleDataset.ErrorException, 'ErrorException');
    RegisterMethod(@TJvOracleDataset.ErrorMessage, 'ErrorMessage');
    RegisterMethod(@TJvOracleDataset.ThreadIsActive, 'ThreadIsActive');
    RegisterPropertyHelper(@TJvOracleDatasetBeforeThreadExecution_R,@TJvOracleDatasetBeforeThreadExecution_W,'BeforeThreadExecution');
    RegisterPropertyHelper(@TJvOracleDatasetDialogOptions_R,@TJvOracleDatasetDialogOptions_W,'DialogOptions');
    RegisterPropertyHelper(@TJvOracleDatasetEnhancedOptions_R,@TJvOracleDatasetEnhancedOptions_W,'EnhancedOptions');
    RegisterPropertyHelper(@TJvOracleDatasetThreadOptions_R,@TJvOracleDatasetThreadOptions_W,'ThreadOptions');
    RegisterPropertyHelper(@TJvOracleDatasetAfterFetchRecord_R,@TJvOracleDatasetAfterFetchRecord_W,'AfterFetchRecord');
    RegisterPropertyHelper(@TJvOracleDatasetAfterOpenFetch_R,@TJvOracleDatasetAfterOpenFetch_W,'AfterOpenFetch');
    RegisterPropertyHelper(@TJvOracleDatasetAfterThreadExecution_R,@TJvOracleDatasetAfterThreadExecution_W,'AfterThreadExecution');
    RegisterPropertyHelper(@TJvOracleDatasetOnThreadException_R,@TJvOracleDatasetOnThreadException_W,'OnThreadException');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvOracleDatasetThreadHandler(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvOracleDatasetThreadHandler) do
  begin
    RegisterPropertyHelper(@TJvOracleDatasetThreadHandlerEnhancedOptions_R,@TJvOracleDatasetThreadHandlerEnhancedOptions_W,'EnhancedOptions');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvDoaThreadedDatasetEnhancedOptions(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvDoaThreadedDatasetEnhancedOptions) do
  begin
    RegisterPropertyHelper(@TJvDoaThreadedDatasetEnhancedOptionsAllowedContinueRecordFetchOptions_R,@TJvDoaThreadedDatasetEnhancedOptionsAllowedContinueRecordFetchOptions_W,'AllowedContinueRecordFetchOptions');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions) do
  begin
    RegisterConstructor(@TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvOracleDataSet(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TJvDoaThreadedDatasetAllowedContinueRecordFetchOptions(CL);
  RIRegister_TJvDoaThreadedDatasetEnhancedOptions(CL);
  RIRegister_TJvOracleDatasetThreadHandler(CL);
  RIRegister_TJvOracleDataset(CL);
end;

 
 
{ TPSImport_JvOracleDataSet }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvOracleDataSet.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvOracleDataSet(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvOracleDataSet.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvOracleDataSet(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
