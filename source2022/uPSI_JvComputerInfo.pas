unit uPSI_JvComputerInfo;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvComputerInfo = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJvComputerInfo(CL: TPSPascalCompiler);
procedure SIRegister_JvComputerInfo(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvComputerInfo(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvComputerInfo(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Controls
  ,Registry
  ,MMSystem
  ,JvComponent
  ,JvComputerInfo
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvComputerInfo]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvComputerInfo(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvComponent', 'TJvComputerInfo') do
  with CL.AddClassN(CL.FindClass('TJvComponent'),'TJvComputerInfo') do
  begin
    RegisterProperty('RealComputerName', 'string', iptr);
    RegisterProperty('LoggedOnUser', 'string', iptr);
    RegisterProperty('ComputerName', 'string', iptrw);
    RegisterProperty('Username', 'string', iptrw);
    RegisterProperty('Company', 'string', iptrw);
    RegisterProperty('Comment', 'string', iptrw);
    RegisterProperty('WorkGroup', 'string', iptrw);
    RegisterProperty('ProductID', 'string', iptrw);
    RegisterProperty('ProductKey', 'string', iptrw);
    RegisterProperty('ProductName', 'string', iptrw);
    RegisterProperty('DVDRegion', 'Integer', iptrw);
    RegisterProperty('VersionNumber', 'string', iptrw);
    RegisterProperty('Version', 'string', iptrw);
    RegisterProperty('TimeRunning', 'TTime', iptrw);
    RegisterProperty('DayRunning', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvComputerInfo(CL: TPSPascalCompiler);
begin
  SIRegister_TJvComputerInfo(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoDayRunning_W(Self: TJvComputerInfo; const T: Integer);
begin Self.DayRunning := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoDayRunning_R(Self: TJvComputerInfo; var T: Integer);
begin T := Self.DayRunning; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoTimeRunning_W(Self: TJvComputerInfo; const T: TTime);
begin Self.TimeRunning := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoTimeRunning_R(Self: TJvComputerInfo; var T: TTime);
begin T := Self.TimeRunning; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoVersion_W(Self: TJvComputerInfo; const T: string);
begin Self.Version := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoVersion_R(Self: TJvComputerInfo; var T: string);
begin T := Self.Version; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoVersionNumber_W(Self: TJvComputerInfo; const T: string);
begin Self.VersionNumber := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoVersionNumber_R(Self: TJvComputerInfo; var T: string);
begin T := Self.VersionNumber; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoDVDRegion_W(Self: TJvComputerInfo; const T: Integer);
begin Self.DVDRegion := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoDVDRegion_R(Self: TJvComputerInfo; var T: Integer);
begin T := Self.DVDRegion; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoProductName_W(Self: TJvComputerInfo; const T: string);
begin Self.ProductName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoProductName_R(Self: TJvComputerInfo; var T: string);
begin T := Self.ProductName; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoProductKey_W(Self: TJvComputerInfo; const T: string);
begin Self.ProductKey := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoProductKey_R(Self: TJvComputerInfo; var T: string);
begin T := Self.ProductKey; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoProductID_W(Self: TJvComputerInfo; const T: string);
begin Self.ProductID := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoProductID_R(Self: TJvComputerInfo; var T: string);
begin T := Self.ProductID; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoWorkGroup_W(Self: TJvComputerInfo; const T: string);
begin Self.WorkGroup := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoWorkGroup_R(Self: TJvComputerInfo; var T: string);
begin T := Self.WorkGroup; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoComment_W(Self: TJvComputerInfo; const T: string);
begin Self.Comment := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoComment_R(Self: TJvComputerInfo; var T: string);
begin T := Self.Comment; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoCompany_W(Self: TJvComputerInfo; const T: string);
begin Self.Company := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoCompany_R(Self: TJvComputerInfo; var T: string);
begin T := Self.Company; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoUsername_W(Self: TJvComputerInfo; const T: string);
begin Self.Username := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoUsername_R(Self: TJvComputerInfo; var T: string);
begin T := Self.Username; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoComputerName_W(Self: TJvComputerInfo; const T: string);
begin Self.ComputerName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoComputerName_R(Self: TJvComputerInfo; var T: string);
begin T := Self.ComputerName; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoLoggedOnUser_R(Self: TJvComputerInfo; var T: string);
begin T := Self.LoggedOnUser; end;

(*----------------------------------------------------------------------------*)
procedure TJvComputerInfoRealComputerName_R(Self: TJvComputerInfo; var T: string);
begin T := Self.RealComputerName; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvComputerInfo(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvComputerInfo) do
  begin
    RegisterPropertyHelper(@TJvComputerInfoRealComputerName_R,nil,'RealComputerName');
    RegisterPropertyHelper(@TJvComputerInfoLoggedOnUser_R,nil,'LoggedOnUser');
    RegisterPropertyHelper(@TJvComputerInfoComputerName_R,@TJvComputerInfoComputerName_W,'ComputerName');
    RegisterPropertyHelper(@TJvComputerInfoUsername_R,@TJvComputerInfoUsername_W,'Username');
    RegisterPropertyHelper(@TJvComputerInfoCompany_R,@TJvComputerInfoCompany_W,'Company');
    RegisterPropertyHelper(@TJvComputerInfoComment_R,@TJvComputerInfoComment_W,'Comment');
    RegisterPropertyHelper(@TJvComputerInfoWorkGroup_R,@TJvComputerInfoWorkGroup_W,'WorkGroup');
    RegisterPropertyHelper(@TJvComputerInfoProductID_R,@TJvComputerInfoProductID_W,'ProductID');
    RegisterPropertyHelper(@TJvComputerInfoProductKey_R,@TJvComputerInfoProductKey_W,'ProductKey');
    RegisterPropertyHelper(@TJvComputerInfoProductName_R,@TJvComputerInfoProductName_W,'ProductName');
    RegisterPropertyHelper(@TJvComputerInfoDVDRegion_R,@TJvComputerInfoDVDRegion_W,'DVDRegion');
    RegisterPropertyHelper(@TJvComputerInfoVersionNumber_R,@TJvComputerInfoVersionNumber_W,'VersionNumber');
    RegisterPropertyHelper(@TJvComputerInfoVersion_R,@TJvComputerInfoVersion_W,'Version');
    RegisterPropertyHelper(@TJvComputerInfoTimeRunning_R,@TJvComputerInfoTimeRunning_W,'TimeRunning');
    RegisterPropertyHelper(@TJvComputerInfoDayRunning_R,@TJvComputerInfoDayRunning_W,'DayRunning');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvComputerInfo(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TJvComputerInfo(CL);
end;

 
 
{ TPSImport_JvComputerInfo }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvComputerInfo.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvComputerInfo(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvComputerInfo.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvComputerInfo(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
