unit uPSI_DBCommon;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Constructors by max

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_DBCommon = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TExprParser(CL: TPSPascalCompiler);
procedure SIRegister_TFilterExpr(CL: TPSPascalCompiler);
procedure SIRegister_DBCommon(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_DBCommon_Routines(S: TPSExec);
procedure RIRegister_TExprParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFilterExpr(CL: TPSRuntimeClassImporter);
procedure RIRegister_DBCommon(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Variants
  ,DB
  ,SqlTimSt
  ,StrUtils
  ,DBCommon
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_DBCommon]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TExprParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TExprParser') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TExprParser') do begin
    RegisterMethod('Constructor Create( DataSet : TDataSet; const Text : Widestring; Options : TFilterOptions; ParserOptions : TParserOptions; const FieldName : Widestring; DepFields : TBits; FieldMap : TFieldMap)');
    RegisterMethod('Procedure SetExprParams( const Text : Widestring; Options : TFilterOptions; ParserOptions : TParserOptions; const FieldName : Widestring)');
    RegisterProperty('FilterData', 'TExprData', iptr);
    RegisterProperty('DataSize', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFilterExpr(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TFilterExpr') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TFilterExpr') do begin
    RegisterMethod('Constructor Create( DataSet : TDataSet; Options : TFilterOptions; ParseOptions : TParserOptions; const FieldName : WideString; DepFields : TBits; FieldMap : TFieldMap)');
    RegisterMethod('Function NewCompareNode( Field : TField; Operator : TCANOperator; const Value : Variant) : PExprNode');
    RegisterMethod('Function NewNode( Kind : TExprNodeKind; Operator : TCANOperator; const Data : Variant; Left, Right : PExprNode) : PExprNode');
    RegisterMethod('Function GetFilterData( Root : PExprNode) : TExprData');
    RegisterProperty('DataSet', 'TDataSet', iptw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_DBCommon(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TCANOperator', '( coNOTDEFINED, coISBLANK, coNOTBLANK, coEQ, coN'
   +'E, coGT, coLT, coGE, coLE, coNOT, coAND, coOR, coTUPLE2, coFIELD2, coCONST'
   +'2, coMINUS, coADD, coSUB, coMUL, coDIV, coMOD, coREM, coSUM, coCOUNT, coMI'
   +'N, coMAX, coAVG, coCONT, coUDF2, coCONTINUE2, coLIKE, coIN, coLIST2, coUPP'
   +'ER, coLOWER, coFUNC2, coLISTELEM2, coASSIGN )');
  CL.AddTypeS('NODEClass', '( nodeNULL, nodeUNARY, nodeBINARY, nodeCOMPARE, nod'
   +'eFIELD, nodeCONST, nodeTUPLE, nodeCONTINUE, nodeUDF, nodeLIST, nodeFUNC, n'
   +'odeLISTELEM )');
  CL.AddTypeS('IDENTIFIEROption', '( idKeepQuotes, idMixCase, idMakeLowerCase, '
   +'idMakeUpperCase )');
 CL.AddConstantN('CANEXPRSIZE','LongInt').SetInt( 10);
 CL.AddConstantN('CANHDRSIZE','LongInt').SetInt( 8);
 CL.AddConstantN('CANEXPRVERSION','LongInt').SetInt( 2);
  CL.AddTypeS('TExprData', 'array of Byte');
  CL.AddTypeS('TParserOption', '( poExtSyntax, poAggregate, poDefaultExpr, poUs'
   +'eOrigNames, poFieldNameGiven, poFieldDepend )');
  CL.AddTypeS('TParserOptions', 'set of TParserOption');
  CL.AddTypeS('TExprNodeKind', '( enField, enConst, enOperator, enFunc )');
  CL.AddTypeS('TExprScopeKind', '( skField, skAgg, skConst )');
   {CL.AddTypeS('PExprNode', 'TExprNode');
   CL.AddTypeS('TExprNode', 'record FNext : PExprNode; FKind : TExprNodeKind; FP'
   +'artial : Boolean; FOperator : TCANOperator; FData : Variant; FLeft : PExpr'
   +'Node; FRight : PExprNode; FDataType : TFieldType; FDataSize : Integer; FAr'
   +'gs : TList; FScopeKind : TExprScopeKind; end');}

  {CL.AddTypeS('PExprNode', 'TExprNode');
  CL.AddTypeS('TExprNode', 'record FNext : PExprNode; FKind : TExprNodeKind; FP'
   +'artial : Boolean; FOperator : TCANOperator; FData : Variant; FLeft : PExpr'
   +'Node; FRight : PExprNode; FDataType : TFieldType; FDataSize : Integer; FAr'
   +'gs : TList; FScopeKind : TExprScopeKind; end');}
  SIRegister_TFilterExpr(CL);
  CL.AddTypeS('TExprToken', '( etEnd, etSymbol, etName, etLiteral, etLParen, et'
   +'RParen, etEQ, etNE, etGE, etLE, etGT, etLT, etADD, etSUB, etMUL, etDIV, et'
   +'Comma, etLIKE, etISNULL, etISNOTNULL, etIN )');
  SIRegister_TExprParser(CL);
  CL.AddTypeS('TFieldInfo', 'record DatabaseName : Widestring; TableName : Wide'
   +'string; OriginalFieldName : Widestring; end');
 CL.AddDelphiFunction('Function GetFieldInfo( const Origin : Widestring; var FieldInfo : TFieldInfo) : Boolean');
  CL.AddTypeS('TSQLToken', '( stUnknown, stTableName, stFieldName, stAscending,'
   +' stDescending, stSelect, stFrom, stWhere, stGroupBy, stHaving, stUnion, st'
   +'Plan, stOrderBy, stForUpdate, stEnd, stPredicate, stValue, stIsNull, stIsN'
   +'otNull, stLike, stAnd, stOr, stNumber, stAllFields, stComment, stDistinct '
   +')');
 CL.AddConstantN('SQLSections','LongInt').Value.ts32 := ord(stSelect) or ord(stFrom) or ord(stWhere) or ord(stGroupBy) or ord(stHaving) or ord(stUnion) or ord(stPlan) or ord(stOrderBy) or ord(stForUpdate);
 //CL.AddDelphiFunction('Function NextSQLToken( var p : AnsiChar; out Token : AnsiString; CurSection : TSQLToken) : TSQLToken;');
 CL.AddDelphiFunction('Function NextSQLToken1( var p : WideChar; out Token : WideString; CurSection : TSQLToken) : TSQLToken;');
 CL.AddDelphiFunction('Function GetIndexForOrderBy( const SQL : WideString; DataSet : TDataSet) : TIndexDef');
 CL.AddDelphiFunction('Function GetTableNameFromSQL( const SQL : WideString) : WideString');
 CL.AddDelphiFunction('Function GetTableNameFromQuery( const SQL : Widestring) : Widestring');
 CL.AddDelphiFunction('Function AddParamSQLForDetail(Params : TParams; SQL : WideString; Native : Boolean; QuoteChar : WideString) : WideString');
 CL.AddDelphiFunction('Function IsMultiTableQuery( const SQL : WideString) : Boolean');
 CL.AddDelphiFunction('Function SQLRequiresParams( const SQL : WideString) : Boolean');
 //CL.AddDelphiFunction('Function NextSQLTokenEx( var p : PWideChar; out Token : WideString; CurSection : TSQLToken; IdOption : IDENTIFIEROption) : TSQLToken');
 CL.AddDelphiFunction('Function GetTableNameFromSQLEx( const SQL : WideString; IdOption : IDENTIFIEROption) : WideString');
end;


(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function NextSQLToken1_P( var p : PWideChar; out Token : WideString; CurSection : TSQLToken) : TSQLToken;
Begin Result := DBCommon.NextSQLToken(p, Token, CurSection); END;

(*----------------------------------------------------------------------------*)
Function NextSQLToken_P( var p : PAnsiChar; out Token : AnsiString; CurSection : TSQLToken) : TSQLToken;
Begin Result := DBCommon.NextSQLToken(p, Token, CurSection); END;

(*----------------------------------------------------------------------------*)
procedure TExprParserDataSize_R(Self: TExprParser; var T: Integer);
begin T := Self.DataSize; end;

(*----------------------------------------------------------------------------*)
procedure TExprParserFilterData_R(Self: TExprParser; var T: TExprData);
begin T := Self.FilterData; end;

(*----------------------------------------------------------------------------*)
procedure TFilterExprDataSet_W(Self: TFilterExpr; const T: TDataSet);
begin Self.DataSet := T; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DBCommon_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@GetFieldInfo, 'GetFieldInfo', cdRegister);
 S.RegisterDelphiFunction(@NextSQLToken_P, 'NextSQLToken', cdRegister);
 S.RegisterDelphiFunction(@NextSQLToken1_P, 'NextSQLToken1', cdRegister);
 S.RegisterDelphiFunction(@GetIndexForOrderBy, 'GetIndexForOrderBy', cdRegister);
 S.RegisterDelphiFunction(@GetTableNameFromSQL, 'GetTableNameFromSQL', cdRegister);
 S.RegisterDelphiFunction(@GetTableNameFromQuery, 'GetTableNameFromQuery', cdRegister);
 S.RegisterDelphiFunction(@AddParamSQLForDetail, 'AddParamSQLForDetail', cdRegister);
 S.RegisterDelphiFunction(@IsMultiTableQuery, 'IsMultiTableQuery', cdRegister);
 S.RegisterDelphiFunction(@SQLRequiresParams, 'SQLRequiresParams', cdRegister);
 S.RegisterDelphiFunction(@NextSQLTokenEx, 'NextSQLTokenEx', cdRegister);
 S.RegisterDelphiFunction(@GetTableNameFromSQLEx, 'GetTableNameFromSQLEx', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TExprParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TExprParser) do
  begin
    RegisterConstructor(@TExprParser.Create, 'Create');
    RegisterMethod(@TExprParser.SetExprParams, 'SetExprParams');
    RegisterPropertyHelper(@TExprParserFilterData_R,nil,'FilterData');
    RegisterPropertyHelper(@TExprParserDataSize_R,nil,'DataSize');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFilterExpr(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFilterExpr) do
  begin
    RegisterConstructor(@TFilterExpr.Create, 'Create');
    RegisterMethod(@TFilterExpr.NewCompareNode, 'NewCompareNode');
    RegisterMethod(@TFilterExpr.NewNode, 'NewNode');
    RegisterMethod(@TFilterExpr.GetFilterData, 'GetFilterData');
    RegisterPropertyHelper(nil,@TFilterExprDataSet_W,'DataSet');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DBCommon(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TFilterExpr(CL);
  RIRegister_TExprParser(CL);
end;

 
 
{ TPSImport_DBCommon }
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBCommon.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_DBCommon(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBCommon.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_DBCommon(ri);
  RIRegister_DBCommon_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
