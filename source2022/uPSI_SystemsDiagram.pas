unit uPSI_SystemsDiagram;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SystemsDiagram = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TBlockDiagram(CL: TPSPascalCompiler);
procedure SIRegister_TJunctionClass(CL: TPSPascalCompiler);
procedure SIRegister_TConnectionClass(CL: TPSPascalCompiler);
procedure SIRegister_TPiClass(CL: TPSPascalCompiler);
procedure SIRegister_TSigmaClass(CL: TPSPascalCompiler);
procedure SIRegister_TInvertableClass(CL: TPSPascalCompiler);
procedure SIRegister_TTerminalClass(CL: TPSPascalCompiler);
procedure SIRegister_TNoCoDIClass(CL: TPSPascalCompiler);
procedure SIRegister_TMiMeClass(CL: TPSPascalCompiler);
procedure SIRegister_TASIAClass(CL: TPSPascalCompiler);
procedure SIRegister_TIT2Class(CL: TPSPascalCompiler);
procedure SIRegister_TDT1Class(CL: TPSPascalCompiler);
procedure SIRegister_TIT1Class(CL: TPSPascalCompiler);
procedure SIRegister_TIntClass(CL: TPSPascalCompiler);
procedure SIRegister_TPT2Class(CL: TPSPascalCompiler);
procedure SIRegister_TPT1Class(CL: TPSPascalCompiler);
procedure SIRegister_TPT0Class(CL: TPSPascalCompiler);
procedure SIRegister_TPClass(CL: TPSPascalCompiler);
procedure SIRegister_TIPSClass(CL: TPSPascalCompiler);
procedure SIRegister_SystemsDiagram(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TBlockDiagram(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJunctionClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TConnectionClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPiClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSigmaClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInvertableClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TTerminalClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNoCoDIClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMiMeClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TASIAClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIT2Class(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDT1Class(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIT1Class(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIntClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPT2Class(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPT1Class(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPT0Class(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIPSClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_SystemsDiagram(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Graphics
 // ,lclintf
 // ,LCLProc
  //,FPCanvas
  ,Bricks
  ,Dialogs
  ,SystemsDiagram
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SystemsDiagram]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TBlockDiagram(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TBlockDiagram') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TBlockDiagram') do
  begin
    RegisterProperty('firstIPSObject', 'TIPSClass', iptrw);
    RegisterProperty('canvas', 'TCanvas', iptrw);
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJunctionClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TJunctionClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TJunctionClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TConnectionClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TConnectionClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TConnectionClass') do
  begin
    RegisterProperty('sourceObject', 'TIPSClass', iptrw);
    RegisterProperty('drainObject', 'TIPSClass', iptrw);
    RegisterProperty('sourceAnchor', 'tAnchorposition', iptrw);
    RegisterProperty('drainAnchor', 'tAnchorposition', iptrw);
    RegisterProperty('chirality', 'tChirality', iptrw);
    RegisterProperty('TextMargin', 'integer', iptrw);
    RegisterProperty('TextPosition', 'tAnchorposition', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPiClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInvertableClass', 'TPiClass') do
  with CL.AddClassN(CL.FindClass('TInvertableClass'),'TPiClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSigmaClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInvertableClass', 'TSigmaClass') do
  with CL.AddClassN(CL.FindClass('TInvertableClass'),'TSigmaClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInvertableClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TInvertableClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TInvertableClass') do
  begin
    RegisterProperty('invertedSegments', 'set of tSegmentPosition', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TTerminalClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TTerminalClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TTerminalClass') do
  begin
    RegisterProperty('TextMargin', 'integer', iptrw);
    RegisterProperty('TextPosition', 'tAnchorposition', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNoCoDIClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TNoCoDIClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TNoCoDIClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMiMeClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TMiMeClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TMiMeClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TASIAClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TASIAClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TASIAClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIT2Class(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TIT2Class') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TIT2Class') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDT1Class(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TDT1Class') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TDT1Class') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIT1Class(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TIT1Class') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TIT1Class') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIntClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TIntClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TIntClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPT2Class(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TPT2Class') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TPT2Class') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPT1Class(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TPT1Class') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TPT1Class') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPT0Class(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TPT0Class') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TPT0Class') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIPSClass', 'TPClass') do
  with CL.AddClassN(CL.FindClass('TIPSClass'),'TPClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIPSClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TIPSClass') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TIPSClass') do
  begin
    RegisterProperty('simulationBlock', 'TBlock', iptrw);
    RegisterProperty('blockDiagram', 'TBlockDiagram', iptrw);
    RegisterProperty('Next', 'TIPSClass', iptrw);
    RegisterProperty('boundsRect', 'TRect', iptrw);
    RegisterProperty('objectRect', 'TRect', iptrw);
    RegisterProperty('anchorPoint', '', iptrw);
    RegisterProperty('title', 'string', iptrw);
    RegisterProperty('font', 'TFont', iptrw);
    RegisterMethod('Procedure Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SystemsDiagram(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('tAnchorposition', '( leftmiddle, topmiddle, rightmiddle, bottommiddle )');
  CL.AddTypeS('tSegmentPosition', '( topSegment, rightSegment, bottomSegment, leftSegment )');
  CL.AddTypeS('tAnchorPoint', 'record position : TPoint; attached : boolean; end');
  CL.AddTypeS('tChirality', '( cleft, cright )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TBlockDiagram');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIPSClass');
  SIRegister_TIPSClass(CL);
  SIRegister_TPClass(CL);
  SIRegister_TPT0Class(CL);
  SIRegister_TPT1Class(CL);
  SIRegister_TPT2Class(CL);
  SIRegister_TIntClass(CL);
  SIRegister_TIT1Class(CL);
  SIRegister_TDT1Class(CL);
  SIRegister_TIT2Class(CL);
  SIRegister_TASIAClass(CL);
  SIRegister_TMiMeClass(CL);
  SIRegister_TNoCoDIClass(CL);
  SIRegister_TTerminalClass(CL);
  SIRegister_TInvertableClass(CL);
  SIRegister_TSigmaClass(CL);
  SIRegister_TPiClass(CL);
  SIRegister_TConnectionClass(CL);
  SIRegister_TJunctionClass(CL);
  SIRegister_TBlockDiagram(CL);
 CL.AddConstantN('DEFAULT_MARGIN','LongInt').SetInt( 3);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TBlockDiagramcanvas_W(Self: TBlockDiagram; const T: TCanvas);
Begin Self.canvas := T; end;

(*----------------------------------------------------------------------------*)
procedure TBlockDiagramcanvas_R(Self: TBlockDiagram; var T: TCanvas);
Begin T := Self.canvas; end;

(*----------------------------------------------------------------------------*)
procedure TBlockDiagramfirstIPSObject_W(Self: TBlockDiagram; const T: TIPSClass);
Begin Self.firstIPSObject := T; end;

(*----------------------------------------------------------------------------*)
procedure TBlockDiagramfirstIPSObject_R(Self: TBlockDiagram; var T: TIPSClass);
Begin T := Self.firstIPSObject; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassTextPosition_W(Self: TConnectionClass; const T: tAnchorposition);
Begin Self.TextPosition := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassTextPosition_R(Self: TConnectionClass; var T: tAnchorposition);
Begin T := Self.TextPosition; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassTextMargin_W(Self: TConnectionClass; const T: integer);
Begin Self.TextMargin := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassTextMargin_R(Self: TConnectionClass; var T: integer);
Begin T := Self.TextMargin; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClasschirality_W(Self: TConnectionClass; const T: tChirality);
Begin Self.chirality := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClasschirality_R(Self: TConnectionClass; var T: tChirality);
Begin T := Self.chirality; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassdrainAnchor_W(Self: TConnectionClass; const T: tAnchorposition);
Begin Self.drainAnchor := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassdrainAnchor_R(Self: TConnectionClass; var T: tAnchorposition);
Begin T := Self.drainAnchor; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClasssourceAnchor_W(Self: TConnectionClass; const T: tAnchorposition);
Begin Self.sourceAnchor := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClasssourceAnchor_R(Self: TConnectionClass; var T: tAnchorposition);
Begin T := Self.sourceAnchor; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassdrainObject_W(Self: TConnectionClass; const T: TIPSClass);
Begin Self.drainObject := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClassdrainObject_R(Self: TConnectionClass; var T: TIPSClass);
Begin T := Self.drainObject; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClasssourceObject_W(Self: TConnectionClass; const T: TIPSClass);
Begin Self.sourceObject := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionClasssourceObject_R(Self: TConnectionClass; var T: TIPSClass);
Begin T := Self.sourceObject; end;

(*----------------------------------------------------------------------------*)
procedure TInvertableClassinvertedSegments_W(Self: TInvertableClass; const T: set of tSegmentPosition);
Begin Self.invertedSegments := T; end;

(*----------------------------------------------------------------------------*)
procedure TInvertableClassinvertedSegments_R(Self: TInvertableClass; var T: set of tSegmentPosition);
Begin T := Self.invertedSegments; end;

(*----------------------------------------------------------------------------*)
procedure TTerminalClassTextPosition_W(Self: TTerminalClass; const T: tAnchorposition);
Begin Self.TextPosition := T; end;

(*----------------------------------------------------------------------------*)
procedure TTerminalClassTextPosition_R(Self: TTerminalClass; var T: tAnchorposition);
Begin T := Self.TextPosition; end;

(*----------------------------------------------------------------------------*)
procedure TTerminalClassTextMargin_W(Self: TTerminalClass; const T: integer);
Begin Self.TextMargin := T; end;

(*----------------------------------------------------------------------------*)
procedure TTerminalClassTextMargin_R(Self: TTerminalClass; var T: integer);
Begin T := Self.TextMargin; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassfont_W(Self: TIPSClass; const T: TFont);
Begin Self.font := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassfont_R(Self: TIPSClass; var T: TFont);
Begin T := Self.font; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClasstitle_W(Self: TIPSClass; const T: string);
Begin Self.title := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClasstitle_R(Self: TIPSClass; var T: string);
Begin T := Self.title; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassanchorPoint_W(Self: TIPSClass; const T: );
Begin Self.anchorPoint := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassanchorPoint_R(Self: TIPSClass; var T: );
Begin T := Self.anchorPoint; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassobjectRect_W(Self: TIPSClass; const T: TRect);
Begin Self.objectRect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassobjectRect_R(Self: TIPSClass; var T: TRect);
Begin T := Self.objectRect; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassboundsRect_W(Self: TIPSClass; const T: TRect);
Begin Self.boundsRect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassboundsRect_R(Self: TIPSClass; var T: TRect);
Begin T := Self.boundsRect; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassNext_W(Self: TIPSClass; const T: TIPSClass);
Begin Self.Next := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassNext_R(Self: TIPSClass; var T: TIPSClass);
Begin T := Self.Next; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassblockDiagram_W(Self: TIPSClass; const T: TBlockDiagram);
Begin Self.blockDiagram := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClassblockDiagram_R(Self: TIPSClass; var T: TBlockDiagram);
Begin T := Self.blockDiagram; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClasssimulationBlock_W(Self: TIPSClass; const T: TBlock);
Begin Self.simulationBlock := T; end;

(*----------------------------------------------------------------------------*)
procedure TIPSClasssimulationBlock_R(Self: TIPSClass; var T: TBlock);
Begin T := Self.simulationBlock; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBlockDiagram(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBlockDiagram) do
  begin
    RegisterPropertyHelper(@TBlockDiagramfirstIPSObject_R,@TBlockDiagramfirstIPSObject_W,'firstIPSObject');
    RegisterPropertyHelper(@TBlockDiagramcanvas_R,@TBlockDiagramcanvas_W,'canvas');
    RegisterConstructor(@TBlockDiagram.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJunctionClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJunctionClass) do
  begin
    RegisterConstructor(@TJunctionClass.Create, 'Create');
    RegisterMethod(@TJunctionClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TConnectionClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TConnectionClass) do
  begin
    RegisterPropertyHelper(@TConnectionClasssourceObject_R,@TConnectionClasssourceObject_W,'sourceObject');
    RegisterPropertyHelper(@TConnectionClassdrainObject_R,@TConnectionClassdrainObject_W,'drainObject');
    RegisterPropertyHelper(@TConnectionClasssourceAnchor_R,@TConnectionClasssourceAnchor_W,'sourceAnchor');
    RegisterPropertyHelper(@TConnectionClassdrainAnchor_R,@TConnectionClassdrainAnchor_W,'drainAnchor');
    RegisterPropertyHelper(@TConnectionClasschirality_R,@TConnectionClasschirality_W,'chirality');
    RegisterPropertyHelper(@TConnectionClassTextMargin_R,@TConnectionClassTextMargin_W,'TextMargin');
    RegisterPropertyHelper(@TConnectionClassTextPosition_R,@TConnectionClassTextPosition_W,'TextPosition');
    RegisterConstructor(@TConnectionClass.Create, 'Create');
    RegisterMethod(@TConnectionClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPiClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPiClass) do
  begin
    RegisterConstructor(@TPiClass.Create, 'Create');
    RegisterMethod(@TPiClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSigmaClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSigmaClass) do
  begin
    RegisterConstructor(@TSigmaClass.Create, 'Create');
    RegisterMethod(@TSigmaClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInvertableClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInvertableClass) do
  begin
    RegisterPropertyHelper(@TInvertableClassinvertedSegments_R,@TInvertableClassinvertedSegments_W,'invertedSegments');
    RegisterConstructor(@TInvertableClass.Create, 'Create');
    RegisterMethod(@TInvertableClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTerminalClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTerminalClass) do
  begin
    RegisterPropertyHelper(@TTerminalClassTextMargin_R,@TTerminalClassTextMargin_W,'TextMargin');
    RegisterPropertyHelper(@TTerminalClassTextPosition_R,@TTerminalClassTextPosition_W,'TextPosition');
    RegisterConstructor(@TTerminalClass.Create, 'Create');
    RegisterMethod(@TTerminalClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNoCoDIClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNoCoDIClass) do
  begin
    RegisterConstructor(@TNoCoDIClass.Create, 'Create');
    RegisterMethod(@TNoCoDIClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMiMeClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMiMeClass) do
  begin
    RegisterConstructor(@TMiMeClass.Create, 'Create');
    RegisterMethod(@TMiMeClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TASIAClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TASIAClass) do
  begin
    RegisterConstructor(@TASIAClass.Create, 'Create');
    RegisterMethod(@TASIAClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIT2Class(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIT2Class) do
  begin
    RegisterConstructor(@TIT2Class.Create, 'Create');
    RegisterMethod(@TIT2Class.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDT1Class(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDT1Class) do
  begin
    RegisterConstructor(@TDT1Class.Create, 'Create');
    RegisterMethod(@TDT1Class.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIT1Class(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIT1Class) do
  begin
    RegisterConstructor(@TIT1Class.Create, 'Create');
    RegisterMethod(@TIT1Class.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIntClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIntClass) do
  begin
    RegisterConstructor(@TIntClass.Create, 'Create');
    RegisterMethod(@TIntClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPT2Class(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPT2Class) do
  begin
    RegisterConstructor(@TPT2Class.Create, 'Create');
    RegisterMethod(@TPT2Class.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPT1Class(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPT1Class) do
  begin
    RegisterConstructor(@TPT1Class.Create, 'Create');
    RegisterMethod(@TPT1Class.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPT0Class(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPT0Class) do
  begin
    RegisterConstructor(@TPT0Class.Create, 'Create');
    RegisterMethod(@TPT0Class.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPClass) do
  begin
    RegisterConstructor(@TPClass.Create, 'Create');
    RegisterMethod(@TPClass.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIPSClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIPSClass) do
  begin
    RegisterPropertyHelper(@TIPSClasssimulationBlock_R,@TIPSClasssimulationBlock_W,'simulationBlock');
    RegisterPropertyHelper(@TIPSClassblockDiagram_R,@TIPSClassblockDiagram_W,'blockDiagram');
    RegisterPropertyHelper(@TIPSClassNext_R,@TIPSClassNext_W,'Next');
    RegisterPropertyHelper(@TIPSClassboundsRect_R,@TIPSClassboundsRect_W,'boundsRect');
    RegisterPropertyHelper(@TIPSClassobjectRect_R,@TIPSClassobjectRect_W,'objectRect');
    RegisterPropertyHelper(@TIPSClassanchorPoint_R,@TIPSClassanchorPoint_W,'anchorPoint');
    RegisterPropertyHelper(@TIPSClasstitle_R,@TIPSClasstitle_W,'title');
    RegisterPropertyHelper(@TIPSClassfont_R,@TIPSClassfont_W,'font');
    RegisterVirtualAbstractMethod(@TIPSClass, @!.Draw, 'Draw');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SystemsDiagram(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBlockDiagram) do
  with CL.Add(TIPSClass) do
  RIRegister_TIPSClass(CL);
  RIRegister_TPClass(CL);
  RIRegister_TPT0Class(CL);
  RIRegister_TPT1Class(CL);
  RIRegister_TPT2Class(CL);
  RIRegister_TIntClass(CL);
  RIRegister_TIT1Class(CL);
  RIRegister_TDT1Class(CL);
  RIRegister_TIT2Class(CL);
  RIRegister_TASIAClass(CL);
  RIRegister_TMiMeClass(CL);
  RIRegister_TNoCoDIClass(CL);
  RIRegister_TTerminalClass(CL);
  RIRegister_TInvertableClass(CL);
  RIRegister_TSigmaClass(CL);
  RIRegister_TPiClass(CL);
  RIRegister_TConnectionClass(CL);
  RIRegister_TJunctionClass(CL);
  RIRegister_TBlockDiagram(CL);
end;

 
 
{ TPSImport_SystemsDiagram }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SystemsDiagram.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SystemsDiagram(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SystemsDiagram.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SystemsDiagram(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
