
unit uPSI_Windows;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Windows = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_Windows(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Windows_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Types
  ,Libc
  ,Windows
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Windows]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Windows(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('WCHAR', 'WideChar');
  CL.AddTypeS('PWChar', 'PWideChar');
  CL.AddTypeS('LPSTR', 'PAnsiChar');
  CL.AddTypeS('PLPSTR', '^LPSTR // will not work');
  CL.AddTypeS('LPCSTR', 'PAnsiChar');
  CL.AddTypeS('LPCTSTR', 'PAnsiChar');
  CL.AddTypeS('LPTSTR', 'PAnsiChar');
  CL.AddTypeS('LPWSTR', 'PWideChar');
  CL.AddTypeS('PLPWSTR', '^LPWSTR // will not work');
  CL.AddTypeS('LPCWSTR', 'PWideChar');
  CL.AddTypeS('BOOL', 'LongBool');
  CL.AddTypeS('PBOOL', '^BOOL // will not work');
  CL.AddTypeS('PINT', '^Integer // will not work');
  CL.AddTypeS('PSingle', '^Single // will not work');
  CL.AddTypeS('PWORD', '^Word // will not work');
  CL.AddTypeS('PDWORD', '^DWORD // will not work');
  CL.AddTypeS('LPDWORD', 'PDWORD');
  CL.AddTypeS('UCHAR', 'Byte');
  CL.AddTypeS('PUCHAR', '^Byte // will not work');
  CL.AddTypeS('SHORT', 'Smallint');
  CL.AddTypeS('UINT', 'LongWord');
  CL.AddTypeS('PUINT', '^UINT // will not work');
  CL.AddTypeS('ULONG', 'Cardinal');
  CL.AddTypeS('PULONG', '^ULONG // will not work');
  CL.AddTypeS('LCID', 'DWORD');
  CL.AddTypeS('LANGID', 'Word');
  CL.AddTypeS('PHandle', '^THandle // will not work');
  CL.AddTypeS('INT_PTR', 'Integer');
  CL.AddTypeS('LONG_PTR', 'Integer');
  CL.AddTypeS('UINT_PTR', 'Cardinal');
  CL.AddTypeS('ULONG_PTR', 'Cardinal');
  CL.AddTypeS('DWORD_PTR', 'ULONG_PTR');
 CL.AddConstantN('MAX_PATH','LongInt').SetInt( 260);
 CL.AddConstantN('LANG_NEUTRAL','LongWord').SetUInt( $00);
 CL.AddConstantN('LANG_AFRIKAANS','LongWord').SetUInt( $36);
 CL.AddConstantN('LANG_ALBANIAN','LongWord').SetUInt( $1c);
 CL.AddConstantN('LANG_ARABIC','LongWord').SetUInt( $01);
 CL.AddConstantN('LANG_BASQUE','LongWord').SetUInt( $2d);
 CL.AddConstantN('LANG_BELARUSIAN','LongWord').SetUInt( $23);
 CL.AddConstantN('LANG_BULGARIAN','LongWord').SetUInt( $02);
 CL.AddConstantN('LANG_CATALAN','LongWord').SetUInt( $03);
 CL.AddConstantN('LANG_CHINESE','LongWord').SetUInt( $04);
 CL.AddConstantN('LANG_CROATIAN','LongWord').SetUInt( $1a);
 CL.AddConstantN('LANG_CZECH','LongWord').SetUInt( $05);
 CL.AddConstantN('LANG_DANISH','LongWord').SetUInt( $06);
 CL.AddConstantN('LANG_DUTCH','LongWord').SetUInt( $13);
 CL.AddConstantN('LANG_ENGLISH','LongWord').SetUInt( $09);
 CL.AddConstantN('LANG_ESTONIAN','LongWord').SetUInt( $25);
 CL.AddConstantN('LANG_FAEROESE','LongWord').SetUInt( $38);
 CL.AddConstantN('LANG_FARSI','LongWord').SetUInt( $29);
 CL.AddConstantN('LANG_FINNISH','LongWord').SetUInt( $0b);
 CL.AddConstantN('LANG_FRENCH','LongWord').SetUInt( $0c);
 CL.AddConstantN('LANG_GERMAN','LongWord').SetUInt( $07);
 CL.AddConstantN('LANG_GREEK','LongWord').SetUInt( $08);
 CL.AddConstantN('LANG_HEBREW','LongWord').SetUInt( $0d);
 CL.AddConstantN('LANG_HUNGARIAN','LongWord').SetUInt( $0e);
 CL.AddConstantN('LANG_ICELANDIC','LongWord').SetUInt( $0f);
 CL.AddConstantN('LANG_INDONESIAN','LongWord').SetUInt( $21);
 CL.AddConstantN('LANG_ITALIAN','LongWord').SetUInt( $10);
 CL.AddConstantN('LANG_JAPANESE','LongWord').SetUInt( $11);
 CL.AddConstantN('LANG_KOREAN','LongWord').SetUInt( $12);
 CL.AddConstantN('LANG_LATVIAN','LongWord').SetUInt( $26);
 CL.AddConstantN('LANG_LITHUANIAN','LongWord').SetUInt( $27);
 CL.AddConstantN('LANG_NORWEGIAN','LongWord').SetUInt( $14);
 CL.AddConstantN('LANG_POLISH','LongWord').SetUInt( $15);
 CL.AddConstantN('LANG_PORTUGUESE','LongWord').SetUInt( $16);
 CL.AddConstantN('LANG_ROMANIAN','LongWord').SetUInt( $18);
 CL.AddConstantN('LANG_RUSSIAN','LongWord').SetUInt( $19);
 CL.AddConstantN('LANG_SERBIAN','LongWord').SetUInt( $1a);
 CL.AddConstantN('LANG_SLOVAK','LongWord').SetUInt( $1b);
 CL.AddConstantN('LANG_SLOVENIAN','LongWord').SetUInt( $24);
 CL.AddConstantN('LANG_SPANISH','LongWord').SetUInt( $0a);
 CL.AddConstantN('LANG_SWEDISH','LongWord').SetUInt( $1d);
 CL.AddConstantN('LANG_THAI','LongWord').SetUInt( $1e);
 CL.AddConstantN('LANG_TURKISH','LongWord').SetUInt( $1f);
 CL.AddConstantN('LANG_UKRAINIAN','LongWord').SetUInt( $22);
 CL.AddConstantN('LANG_VIETNAMESE','LongWord').SetUInt( $2a);
 CL.AddConstantN('SUBLANG_NEUTRAL','LongWord').SetUInt( $00);
 CL.AddConstantN('SUBLANG_DEFAULT','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_SYS_DEFAULT','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_ARABIC_SAUDI_ARABIA','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_ARABIC_IRAQ','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_ARABIC_EGYPT','LongWord').SetUInt( $03);
 CL.AddConstantN('SUBLANG_ARABIC_LIBYA','LongWord').SetUInt( $04);
 CL.AddConstantN('SUBLANG_ARABIC_ALGERIA','LongWord').SetUInt( $05);
 CL.AddConstantN('SUBLANG_ARABIC_MOROCCO','LongWord').SetUInt( $06);
 CL.AddConstantN('SUBLANG_ARABIC_TUNISIA','LongWord').SetUInt( $07);
 CL.AddConstantN('SUBLANG_ARABIC_OMAN','LongWord').SetUInt( $08);
 CL.AddConstantN('SUBLANG_ARABIC_YEMEN','LongWord').SetUInt( $09);
 CL.AddConstantN('SUBLANG_ARABIC_SYRIA','LongWord').SetUInt( $0a);
 CL.AddConstantN('SUBLANG_ARABIC_JORDAN','LongWord').SetUInt( $0b);
 CL.AddConstantN('SUBLANG_ARABIC_LEBANON','LongWord').SetUInt( $0c);
 CL.AddConstantN('SUBLANG_ARABIC_KUWAIT','LongWord').SetUInt( $0d);
 CL.AddConstantN('SUBLANG_ARABIC_UAE','LongWord').SetUInt( $0e);
 CL.AddConstantN('SUBLANG_ARABIC_BAHRAIN','LongWord').SetUInt( $0f);
 CL.AddConstantN('SUBLANG_ARABIC_QATAR','LongWord').SetUInt( $10);
 CL.AddConstantN('SUBLANG_CHINESE_TRADITIONAL','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_CHINESE_SIMPLIFIED','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_CHINESE_HONGKONG','LongWord').SetUInt( $03);
 CL.AddConstantN('SUBLANG_CHINESE_SINGAPORE','LongWord').SetUInt( $04);
 CL.AddConstantN('SUBLANG_DUTCH','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_DUTCH_BELGIAN','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_ENGLISH_US','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_ENGLISH_UK','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_ENGLISH_AUS','LongWord').SetUInt( $03);
 CL.AddConstantN('SUBLANG_ENGLISH_CAN','LongWord').SetUInt( $04);
 CL.AddConstantN('SUBLANG_ENGLISH_NZ','LongWord').SetUInt( $05);
 CL.AddConstantN('SUBLANG_ENGLISH_EIRE','LongWord').SetUInt( $06);
 CL.AddConstantN('SUBLANG_ENGLISH_SOUTH_AFRICA','LongWord').SetUInt( $07);
 CL.AddConstantN('SUBLANG_ENGLISH_JAMAICA','LongWord').SetUInt( $08);
 CL.AddConstantN('SUBLANG_ENGLISH_CARIBBEAN','LongWord').SetUInt( $09);
 CL.AddConstantN('SUBLANG_ENGLISH_BELIZE','LongWord').SetUInt( $0a);
 CL.AddConstantN('SUBLANG_ENGLISH_TRINIDAD','LongWord').SetUInt( $0b);
 CL.AddConstantN('SUBLANG_FRENCH','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_FRENCH_BELGIAN','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_FRENCH_CANADIAN','LongWord').SetUInt( $03);
 CL.AddConstantN('SUBLANG_FRENCH_SWISS','LongWord').SetUInt( $04);
 CL.AddConstantN('SUBLANG_FRENCH_LUXEMBOURG','LongWord').SetUInt( $05);
 CL.AddConstantN('SUBLANG_GERMAN','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_GERMAN_SWISS','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_GERMAN_AUSTRIAN','LongWord').SetUInt( $03);
 CL.AddConstantN('SUBLANG_GERMAN_LUXEMBOURG','LongWord').SetUInt( $04);
 CL.AddConstantN('SUBLANG_GERMAN_LIECHTENSTEIN','LongWord').SetUInt( $05);
 CL.AddConstantN('SUBLANG_ITALIAN','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_ITALIAN_SWISS','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_KOREAN','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_KOREAN_JOHAB','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_NORWEGIAN_BOKMAL','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_NORWEGIAN_NYNORSK','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_PORTUGUESE','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_PORTUGUESE_BRAZILIAN','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_SERBIAN_LATIN','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_SERBIAN_CYRILLIC','LongWord').SetUInt( $03);
 CL.AddConstantN('SUBLANG_SPANISH','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_SPANISH_MEXICAN','LongWord').SetUInt( $02);
 CL.AddConstantN('SUBLANG_SPANISH_MODERN','LongWord').SetUInt( $03);
 CL.AddConstantN('SUBLANG_SPANISH_GUATEMALA','LongWord').SetUInt( $04);
 CL.AddConstantN('SUBLANG_SPANISH_COSTA_RICA','LongWord').SetUInt( $05);
 CL.AddConstantN('SUBLANG_SPANISH_PANAMA','LongWord').SetUInt( $06);
 CL.AddConstantN('SUBLANG_SPANISH_DOMINICAN_REPUBLIC','LongWord').SetUInt( $07);
 CL.AddConstantN('SUBLANG_SPANISH_VENEZUELA','LongWord').SetUInt( $08);
 CL.AddConstantN('SUBLANG_SPANISH_COLOMBIA','LongWord').SetUInt( $09);
 CL.AddConstantN('SUBLANG_SPANISH_PERU','LongWord').SetUInt( $0a);
 CL.AddConstantN('SUBLANG_SPANISH_ARGENTINA','LongWord').SetUInt( $0b);
 CL.AddConstantN('SUBLANG_SPANISH_ECUADOR','LongWord').SetUInt( $0c);
 CL.AddConstantN('SUBLANG_SPANISH_CHILE','LongWord').SetUInt( $0d);
 CL.AddConstantN('SUBLANG_SPANISH_URUGUAY','LongWord').SetUInt( $0e);
 CL.AddConstantN('SUBLANG_SPANISH_PARAGUAY','LongWord').SetUInt( $0f);
 CL.AddConstantN('SUBLANG_SPANISH_BOLIVIA','LongWord').SetUInt( $10);
 CL.AddConstantN('SUBLANG_SPANISH_EL_SALVADOR','LongWord').SetUInt( $11);
 CL.AddConstantN('SUBLANG_SPANISH_HONDURAS','LongWord').SetUInt( $12);
 CL.AddConstantN('SUBLANG_SPANISH_NICARAGUA','LongWord').SetUInt( $13);
 CL.AddConstantN('SUBLANG_SPANISH_PUERTO_RICO','LongWord').SetUInt( $14);
 CL.AddConstantN('SUBLANG_SWEDISH','LongWord').SetUInt( $01);
 CL.AddConstantN('SUBLANG_SWEDISH_FINLAND','LongWord').SetUInt( $02);
 CL.AddConstantN('SORT_DEFAULT','LongWord').SetUInt( $0);
 CL.AddConstantN('SORT_JAPANESE_XJIS','LongWord').SetUInt( $0);
 CL.AddConstantN('SORT_JAPANESE_UNICODE','LongWord').SetUInt( $1);
 CL.AddConstantN('SORT_CHINESE_BIG5','LongWord').SetUInt( $0);
 CL.AddConstantN('SORT_CHINESE_PRCP','LongWord').SetUInt( $0);
 CL.AddConstantN('SORT_CHINESE_UNICODE','LongWord').SetUInt( $1);
 CL.AddConstantN('SORT_CHINESE_PRC','LongWord').SetUInt( $2);
 CL.AddConstantN('SORT_KOREAN_KSC','LongWord').SetUInt( $0);
 CL.AddConstantN('SORT_KOREAN_UNICODE','LongWord').SetUInt( $1);
 CL.AddConstantN('SORT_GERMAN_PHONE_BOOK','LongWord').SetUInt( $1);
 CL.AddConstantN('STATUS_WAIT_0','LongWord').SetUInt( $00000000);
 CL.AddConstantN('STATUS_ABANDONED_WAIT_0','LongWord').SetUInt( $00000080);
 CL.AddConstantN('STATUS_USER_APC','LongWord').SetUInt( $000000C0);
 CL.AddConstantN('STATUS_TIMEOUT','LongWord').SetUInt( $00000102);
 CL.AddConstantN('STATUS_PENDING','LongWord').SetUInt( $00000103);
 CL.AddConstantN('STATUS_SEGMENT_NOTIFICATION','LongWord').SetUInt( $40000005);
 CL.AddConstantN('STATUS_GUARD_PAGE_VIOLATION','LongWord').SetUInt( DWORD ( $80000001 ));
 CL.AddConstantN('STATUS_DATATYPE_MISALIGNMENT','LongWord').SetUInt( DWORD ( $80000002 ));
 CL.AddConstantN('STATUS_BREAKPOINT','LongWord').SetUInt( DWORD ( $80000003 ));
 CL.AddConstantN('STATUS_SINGLE_STEP','LongWord').SetUInt( DWORD ( $80000004 ));
 CL.AddConstantN('STATUS_ACCESS_VIOLATION','LongWord').SetUInt( DWORD ( $C0000005 ));
 CL.AddConstantN('STATUS_IN_PAGE_ERROR','LongWord').SetUInt( DWORD ( $C0000006 ));
 CL.AddConstantN('STATUS_INVALID_HANDLE','LongWord').SetUInt( DWORD ( $C0000008 ));
 CL.AddConstantN('STATUS_NO_MEMORY','LongWord').SetUInt( DWORD ( $C0000017 ));
 CL.AddConstantN('STATUS_ILLEGAL_INSTRUCTION','LongWord').SetUInt( DWORD ( $C000001D ));
 CL.AddConstantN('STATUS_NONCONTINUABLE_EXCEPTION','LongWord').SetUInt( DWORD ( $C0000025 ));
 CL.AddConstantN('STATUS_INVALID_DISPOSITION','LongWord').SetUInt( DWORD ( $C0000026 ));
 CL.AddConstantN('STATUS_ARRAY_BOUNDS_EXCEEDED','LongWord').SetUInt( DWORD ( $C000008C ));
 CL.AddConstantN('STATUS_FLOAT_DENORMAL_OPERAND','LongWord').SetUInt( DWORD ( $C000008D ));
 CL.AddConstantN('STATUS_FLOAT_DIVIDE_BY_ZERO','LongWord').SetUInt( DWORD ( $C000008E ));
 CL.AddConstantN('STATUS_FLOAT_INEXACT_RESULT','LongWord').SetUInt( DWORD ( $C000008F ));
 CL.AddConstantN('STATUS_FLOAT_INVALID_OPERATION','LongWord').SetUInt( DWORD ( $C0000090 ));
 CL.AddConstantN('STATUS_FLOAT_OVERFLOW','LongWord').SetUInt( DWORD ( $C0000091 ));
 CL.AddConstantN('STATUS_FLOAT_STACK_CHECK','LongWord').SetUInt( DWORD ( $C0000092 ));
 CL.AddConstantN('STATUS_FLOAT_UNDERFLOW','LongWord').SetUInt( DWORD ( $C0000093 ));
 CL.AddConstantN('STATUS_INTEGER_DIVIDE_BY_ZERO','LongWord').SetUInt( DWORD ( $C0000094 ));
 CL.AddConstantN('STATUS_INTEGER_OVERFLOW','LongWord').SetUInt( DWORD ( $C0000095 ));
 CL.AddConstantN('STATUS_PRIVILEGED_INSTRUCTION','LongWord').SetUInt( DWORD ( $C0000096 ));
 CL.AddConstantN('STATUS_STACK_OVERFLOW','LongWord').SetUInt( DWORD ( $C00000FD ));
 CL.AddConstantN('STATUS_CONTROL_C_EXIT','LongWord').SetUInt( DWORD ( $C000013A ));
 CL.AddConstantN('MAXIMUM_WAIT_OBJECTS','LongInt').SetInt( 64);
 CL.AddConstantN('SIZE_OF_80387_REGISTERS','LongInt').SetInt( 80);
 CL.AddConstantN('CONTEXT_i386','LongWord').SetUInt( $10000);
 CL.AddConstantN('CONTEXT_i486','LongWord').SetUInt( $10000);
  CL.AddTypeS('PFloatingSaveArea', '^TFloatingSaveArea // will not work');
  CL.AddTypeS('TFloatingSaveArea', '_FLOATING_SAVE_AREA');
  CL.AddTypeS('FLOATING_SAVE_AREA', '_FLOATING_SAVE_AREA');
  CL.AddTypeS('PContext', '^TContext // will not work');
  CL.AddTypeS('_CONTEXT', 'record ContextFlags : DWORD; Dr0 : DWORD; Dr1 : DWOR'
   +'D; Dr2 : DWORD; Dr3 : DWORD; Dr6 : DWORD; Dr7 : DWORD; FloatSave : TFloati'
   +'ngSaveArea; SegGs : DWORD; SegFs : DWORD; SegEs : DWORD; SegDs : DWORD; Ed'
   +'i : DWORD; Esi : DWORD; Ebx : DWORD; Edx : DWORD; Ecx : DWORD; Eax : DWORD'
   +'; Ebp : DWORD; Eip : DWORD; SegCs : DWORD; EFlags : DWORD; Esp : DWORD; Se'
   +'gSs : DWORD; end');
  CL.AddTypeS('TContext', '_CONTEXT');
  CL.AddTypeS('CONTEXT', '_CONTEXT');
 CL.AddConstantN('LDTF_BASEMID','LongWord').SetUInt( DWORD ( $FF000000 ));
 CL.AddConstantN('LDTF_TYPE_8','LongWord').SetUInt( $00F80000);
 CL.AddConstantN('LDTF_DPL','LongWord').SetUInt( $00060000);
 CL.AddConstantN('LDTF_PRES','LongWord').SetUInt( $00010000);
 CL.AddConstantN('LDTF_LIMITHI','LongWord').SetUInt( $0000F000);
 CL.AddConstantN('LDTF_SYS','LongWord').SetUInt( $00000800);
 CL.AddConstantN('LDTF_RESERVED_0','LongWord').SetUInt( $00000400);
 CL.AddConstantN('LDTF_DEFAULT_BIG','LongWord').SetUInt( $00000200);
 CL.AddConstantN('LDTF_GRANULARITY','LongWord').SetUInt( $00000100);
 CL.AddConstantN('LDTF_BASEHI','LongWord').SetUInt( $000000FF);
  CL.AddTypeS('TLDTEntry', '_LDT_ENTRY');
  CL.AddTypeS('LDT_ENTRY', '_LDT_ENTRY');
 CL.AddConstantN('EXCEPTION_NONCONTINUABLE','LongInt').SetInt( 1);
 CL.AddConstantN('EXCEPTION_MAXIMUM_PARAMETERS','LongInt').SetInt( 15);
  CL.AddTypeS('PExceptionRecord', '^TExceptionRecord // will not work');
  CL.AddTypeS('TExceptionRecord', '_EXCEPTION_RECORD');
  CL.AddTypeS('EXCEPTION_RECORD', '_EXCEPTION_RECORD');
  CL.AddTypeS('_EXCEPTION_POINTERS', 'record ExceptionRecord : PExceptionRecord'
   +'; ContextRecord : PContext; end');
  CL.AddTypeS('TExceptionPointers', '_EXCEPTION_POINTERS');
  CL.AddTypeS('EXCEPTION_POINTERS', '_EXCEPTION_POINTERS');
 CL.AddConstantN('THREAD_BASE_PRIORITY_LOWRT','LongInt').SetInt( 15);
 CL.AddConstantN('THREAD_BASE_PRIORITY_MAX','LongInt').SetInt( 2);
 CL.AddConstantN('THREAD_BASE_PRIORITY_MIN','LongInt').SetInt( - 2);
 CL.AddConstantN('THREAD_BASE_PRIORITY_IDLE','LongInt').SetInt( - 15);
 CL.AddConstantN('SYNCHRONIZE','LongWord').SetUInt( $00100000);
 CL.AddConstantN('STANDARD_RIGHTS_REQUIRED','LongWord').SetUInt( $000F0000);
 CL.AddConstantN('EVENT_MODIFY_STATE','LongWord').SetUInt( $0002);
 CL.AddConstantN('MUTANT_QUERY_STATE','LongWord').SetUInt( $0001);
 CL.AddConstantN('SEMAPHORE_MODIFY_STATE','LongWord').SetUInt( $0002);
 CL.AddConstantN('PROCESS_TERMINATE','LongWord').SetUInt( $0001);
 CL.AddConstantN('PROCESS_CREATE_THREAD','LongWord').SetUInt( $0002);
 CL.AddConstantN('PROCESS_VM_OPERATION','LongWord').SetUInt( $0008);
 CL.AddConstantN('PROCESS_VM_READ','LongWord').SetUInt( $0010);
 CL.AddConstantN('PROCESS_VM_WRITE','LongWord').SetUInt( $0020);
 CL.AddConstantN('PROCESS_DUP_HANDLE','LongWord').SetUInt( $0040);
 CL.AddConstantN('PROCESS_CREATE_PROCESS','LongWord').SetUInt( $0080);
 CL.AddConstantN('PROCESS_SET_QUOTA','LongWord').SetUInt( $0100);
 CL.AddConstantN('PROCESS_SET_INFORMATION','LongWord').SetUInt( $0200);
 CL.AddConstantN('PROCESS_QUERY_INFORMATION','LongWord').SetUInt( $0400);
  CL.AddTypeS('PMemoryBasicInformation', '^TMemoryBasicInformation // will notwork');
  CL.AddTypeS('_MEMORY_BASIC_INFORMATION', 'record BaseAddress : Pointer; Alloc'
   +'ationBase : Pointer; AllocationProtect : DWORD; RegionSize : DWORD; State '
   +': DWORD; Protect : DWORD; Type_9 : DWORD; end');
  CL.AddTypeS('TMemoryBasicInformation', '_MEMORY_BASIC_INFORMATION');
  CL.AddTypeS('MEMORY_BASIC_INFORMATION', '_MEMORY_BASIC_INFORMATION');
 CL.AddConstantN('SECTION_QUERY','LongInt').SetInt( 1);
 CL.AddConstantN('SECTION_MAP_WRITE','LongInt').SetInt( 2);
 CL.AddConstantN('SECTION_MAP_READ','LongInt').SetInt( 4);
 CL.AddConstantN('SECTION_MAP_EXECUTE','LongInt').SetInt( 8);
 CL.AddConstantN('SECTION_EXTEND_SIZE','LongWord').SetUInt( $10);
 CL.AddConstantN('PAGE_NOACCESS','LongInt').SetInt( 1);
 CL.AddConstantN('PAGE_READONLY','LongInt').SetInt( 2);
 CL.AddConstantN('PAGE_READWRITE','LongInt').SetInt( 4);
 CL.AddConstantN('PAGE_WRITECOPY','LongInt').SetInt( 8);
 CL.AddConstantN('PAGE_EXECUTE','LongWord').SetUInt( $10);
 CL.AddConstantN('PAGE_EXECUTE_READ','LongWord').SetUInt( $20);
 CL.AddConstantN('PAGE_EXECUTE_READWRITE','LongWord').SetUInt( $40);
 CL.AddConstantN('PAGE_EXECUTE_WRITECOPY','LongWord').SetUInt( $80);
 CL.AddConstantN('PAGE_GUARD','LongWord').SetUInt( $100);
 CL.AddConstantN('PAGE_NOCACHE','LongWord').SetUInt( $200);
 CL.AddConstantN('MEM_COMMIT','LongWord').SetUInt( $1000);
 CL.AddConstantN('MEM_RESERVE','LongWord').SetUInt( $2000);
 CL.AddConstantN('MEM_DECOMMIT','LongWord').SetUInt( $4000);
 CL.AddConstantN('MEM_RELEASE','LongWord').SetUInt( $8000);
 CL.AddConstantN('MEM_FREE','LongWord').SetUInt( $10000);
 CL.AddConstantN('MEM_PRIVATE','LongWord').SetUInt( $20000);
 CL.AddConstantN('MEM_MAPPED','LongWord').SetUInt( $40000);
 CL.AddConstantN('MEM_RESET','LongWord').SetUInt( $80000);
 CL.AddConstantN('MEM_TOP_DOWN','LongWord').SetUInt( $100000);
 CL.AddConstantN('SEC_FILE','LongWord').SetUInt( $800000);
 CL.AddConstantN('SEC_IMAGE','LongWord').SetUInt( $1000000);
 CL.AddConstantN('SEC_RESERVE','LongWord').SetUInt( $4000000);
 CL.AddConstantN('SEC_COMMIT','LongWord').SetUInt( $8000000);
 CL.AddConstantN('SEC_NOCACHE','LongWord').SetUInt( $10000000);
 CL.AddConstantN('MEM_IMAGE','').SetString( SEC_IMAGE);
 CL.AddConstantN('FILE_SHARE_READ','LongWord').SetUInt( $00000001);
 CL.AddConstantN('FILE_SHARE_WRITE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('FILE_SHARE_DELETE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('FILE_ATTRIBUTE_READONLY','LongWord').SetUInt( $00000001);
 CL.AddConstantN('FILE_ATTRIBUTE_HIDDEN','LongWord').SetUInt( $00000002);
 CL.AddConstantN('FILE_ATTRIBUTE_SYSTEM','LongWord').SetUInt( $00000004);
 CL.AddConstantN('FILE_ATTRIBUTE_DIRECTORY','LongWord').SetUInt( $00000010);
 CL.AddConstantN('FILE_ATTRIBUTE_ARCHIVE','LongWord').SetUInt( $00000020);
 CL.AddConstantN('FILE_ATTRIBUTE_DEVICE','LongWord').SetUInt( $00000040);
 CL.AddConstantN('FILE_ATTRIBUTE_NORMAL','LongWord').SetUInt( $00000080);
 CL.AddConstantN('FILE_ATTRIBUTE_TEMPORARY','LongWord').SetUInt( $00000100);
 CL.AddConstantN('FILE_ATTRIBUTE_SPARSE_FILE','LongWord').SetUInt( $00000200);
 CL.AddConstantN('FILE_ATTRIBUTE_REPARSE_POINT','LongWord').SetUInt( $00000400);
 CL.AddConstantN('FILE_ATTRIBUTE_COMPRESSED','LongWord').SetUInt( $00000800);
 CL.AddConstantN('FILE_ATTRIBUTE_OFFLINE','LongWord').SetUInt( $00001000);
 CL.AddConstantN('FILE_ATTRIBUTE_NOT_CONTENT_INDEXED','LongWord').SetUInt( $00002000);
 CL.AddConstantN('FILE_ATTRIBUTE_ENCRYPTED','LongWord').SetUInt( $00004000);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_FILE_NAME','LongWord').SetUInt( $00000001);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_DIR_NAME','LongWord').SetUInt( $00000002);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_ATTRIBUTES','LongWord').SetUInt( $00000004);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_SIZE','LongWord').SetUInt( $00000008);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_LAST_WRITE','LongWord').SetUInt( $00000010);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_LAST_ACCESS','LongWord').SetUInt( $00000020);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_CREATION','LongWord').SetUInt( $00000040);
 CL.AddConstantN('FILE_NOTIFY_CHANGE_SECURITY','LongWord').SetUInt( $00000100);
 CL.AddConstantN('FILE_ACTION_ADDED','LongWord').SetUInt( $00000001);
 CL.AddConstantN('FILE_ACTION_REMOVED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('FILE_ACTION_MODIFIED','LongWord').SetUInt( $00000003);
 CL.AddConstantN('FILE_ACTION_RENAMED_OLD_NAME','LongWord').SetUInt( $00000004);
 CL.AddConstantN('FILE_ACTION_RENAMED_NEW_NAME','LongWord').SetUInt( $00000005);
 CL.AddConstantN('MAILSLOT_NO_MESSAGE','LongInt').SetInt( LongWord ( - 1 ));
 CL.AddConstantN('MAILSLOT_WAIT_FOREVER','LongInt').SetInt( LongWord ( - 1 ));
 CL.AddConstantN('FILE_CASE_SENSITIVE_SEARCH','LongWord').SetUInt( $00000001);
 CL.AddConstantN('FILE_CASE_PRESERVED_NAMES','LongWord').SetUInt( $00000002);
 CL.AddConstantN('FILE_UNICODE_ON_DISK','LongWord').SetUInt( $00000004);
 CL.AddConstantN('FILE_PERSISTENT_ACLS','LongWord').SetUInt( $00000008);
 CL.AddConstantN('FILE_FILE_COMPRESSION','LongWord').SetUInt( $00000010);
 CL.AddConstantN('FILE_VOLUME_IS_COMPRESSED','LongWord').SetUInt( $00008000);
 CL.AddConstantN('IO_COMPLETION_MODIFY_STATE','LongWord').SetUInt( $0002);
 CL.AddConstantN('DUPLICATE_CLOSE_SOURCE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('DUPLICATE_SAME_ACCESS','LongWord').SetUInt( $00000002);
  CL.AddTypeS('PSECURITY_DESCRIPTOR', 'Pointer');
  CL.AddTypeS('ACCESS_MASK', 'DWORD');
  CL.AddTypeS('PACCESS_MASK', '^ACCESS_MASK // will not work');
 CL.AddConstantN('_DELETE','LongWord').SetUInt( $00010000);
 CL.AddConstantN('READ_CONTROL','LongWord').SetUInt( $00020000);
 CL.AddConstantN('WRITE_DAC','LongWord').SetUInt( $00040000);
 CL.AddConstantN('WRITE_OWNER','LongWord').SetUInt( $00080000);
 CL.AddConstantN('STANDARD_RIGHTS_READ','').SetString( READ_CONTROL);
 CL.AddConstantN('STANDARD_RIGHTS_WRITE','').SetString( READ_CONTROL);
 CL.AddConstantN('STANDARD_RIGHTS_EXECUTE','').SetString( READ_CONTROL);
 CL.AddConstantN('STANDARD_RIGHTS_ALL','LongWord').SetUInt( $001F0000);
 CL.AddConstantN('SPECIFIC_RIGHTS_ALL','LongWord').SetUInt( $0000FFFF);
 CL.AddConstantN('ACCESS_SYSTEM_SECURITY','LongWord').SetUInt( $01000000);
 CL.AddConstantN('MAXIMUM_ALLOWED','LongWord').SetUInt( $02000000);
 CL.AddConstantN('GENERIC_READ','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('GENERIC_WRITE','LongWord').SetUInt( $40000000);
 CL.AddConstantN('GENERIC_EXECUTE','LongWord').SetUInt( $20000000);
 CL.AddConstantN('GENERIC_ALL','LongWord').SetUInt( $10000000);
  CL.AddTypeS('PGenericMapping', '^TGenericMapping // will not work');
  CL.AddTypeS('_GENERIC_MAPPING', 'record GenericRead : ACCESS_MASK; GenericWri'
   +'te : ACCESS_MASK; GenericExecute : ACCESS_MASK; GenericAll : ACCESS_MASK; '
   +'end');
  CL.AddTypeS('TGenericMapping', '_GENERIC_MAPPING');
  CL.AddTypeS('GENERIC_MAPPING', '_GENERIC_MAPPING');
  CL.AddTypeS('PLUIDAndAttributes', '^TLUIDAndAttributes // will not work');
  CL.AddTypeS('_LUID_AND_ATTRIBUTES', 'record Luid : TLargeInteger; Attributes '
   +': DWORD; end');
  CL.AddTypeS('TLUIDAndAttributes', '_LUID_AND_ATTRIBUTES');
  CL.AddTypeS('LUID_AND_ATTRIBUTES', '_LUID_AND_ATTRIBUTES');
  CL.AddTypeS('PSIDIdentifierAuthority', '^TSIDIdentifierAuthority // will not '
   +'work');
  CL.AddTypeS('TSIDIdentifierAuthority', '_SID_IDENTIFIER_AUTHORITY');
  CL.AddTypeS('SID_IDENTIFIER_AUTHORITY', '_SID_IDENTIFIER_AUTHORITY');
 CL.AddConstantN('SidTypeUser','LongInt').SetInt( 1);
 CL.AddConstantN('SidTypeGroup','LongInt').SetInt( 2);
 CL.AddConstantN('SidTypeDomain','LongInt').SetInt( 3);
 CL.AddConstantN('SidTypeAlias','LongInt').SetInt( 4);
 CL.AddConstantN('SidTypeWellKnownGroup','LongInt').SetInt( 5);
 CL.AddConstantN('SidTypeDeletedAccount','LongInt').SetInt( 6);
 CL.AddConstantN('SidTypeInvalid','LongInt').SetInt( 7);
 CL.AddConstantN('SidTypeUnknown','LongInt').SetInt( 8);
  CL.AddTypeS('SID_NAME_USE', 'DWORD');
  CL.AddTypeS('PSIDAndAttributes', '^TSIDAndAttributes // will not work');
  CL.AddTypeS('_SID_AND_ATTRIBUTES', 'record Sid : PSID; Attributes : DWORD; en'
   +'d');
  CL.AddTypeS('TSIDAndAttributes', '_SID_AND_ATTRIBUTES');
  CL.AddTypeS('SID_AND_ATTRIBUTES', '_SID_AND_ATTRIBUTES');
  CL.AddTypeS('PACL', '^TACL // will not work');
  CL.AddTypeS('_ACL', 'record AclRevision : Byte; Sbz1 : Byte; AclSize : Word; '
   +'AceCount : Word; Sbz2 : Word; end');
  CL.AddTypeS('TACL', '_ACL');
  CL.AddTypeS('ACL', '_ACL');
  CL.AddTypeS('TAclInformationClass', '( AclInfoPad, AclRevisionInformation, Ac'
   +'lSizeInformation )');
 CL.AddConstantN('SECURITY_DESCRIPTOR_REVISION','LongInt').SetInt( 1);
 CL.AddConstantN('SECURITY_DESCRIPTOR_REVISION1','LongInt').SetInt( 1);
 CL.AddConstantN('SECURITY_DESCRIPTOR_MIN_LENGTH','LongInt').SetInt( 20);
 CL.AddConstantN('SE_OWNER_DEFAULTED','LongWord').SetUInt( $0001);
 CL.AddConstantN('SE_GROUP_DEFAULTED','LongWord').SetUInt( $0002);
 CL.AddConstantN('SE_DACL_PRESENT','LongWord').SetUInt( $0004);
 CL.AddConstantN('SE_DACL_DEFAULTED','LongWord').SetUInt( $0008);
 CL.AddConstantN('SE_SACL_PRESENT','LongWord').SetUInt( $0010);
 CL.AddConstantN('SE_SACL_DEFAULTED','LongWord').SetUInt( $0020);
 CL.AddConstantN('SE_DACL_AUTO_INHERIT_REQ','LongWord').SetUInt( $0100);
 CL.AddConstantN('SE_SACL_AUTO_INHERIT_REQ','LongWord').SetUInt( $0200);
 CL.AddConstantN('SE_DACL_AUTO_INHERITED','LongWord').SetUInt( $0400);
 CL.AddConstantN('SE_SACL_AUTO_INHERITED','LongWord').SetUInt( $0800);
 CL.AddConstantN('SE_DACL_PROTECTED','LongWord').SetUInt( $1000);
 CL.AddConstantN('SE_SACL_PROTECTED','LongWord').SetUInt( $2000);
 CL.AddConstantN('SE_SELF_RELATIVE','LongWord').SetUInt( $8000);
  CL.AddTypeS('SECURITY_DESCRIPTOR_CONTROL', 'Word');
  CL.AddTypeS('PSECURITY_DESCRIPTOR_CONTROL', '^WORD // will not work');
  CL.AddTypeS('PSecurityDescriptor', '^TSecurityDescriptor // will not work');
  CL.AddTypeS('_SECURITY_DESCRIPTOR', 'record Revision : Byte; Sbz1 : Byte; Con'
   +'trol : SECURITY_DESCRIPTOR_CONTROL; Owner : PSID; Group : PSID; Sacl : PAC'
   +'L; Dacl : PACL; end');
  CL.AddTypeS('TSecurityDescriptor', '_SECURITY_DESCRIPTOR');
  CL.AddTypeS('SECURITY_DESCRIPTOR', '_SECURITY_DESCRIPTOR');
  CL.AddTypeS('PObjectTypeList', '^TObjectTypeList // will not work');
  CL.AddTypeS('_OBJECT_TYPE_LIST', 'record Level : WORD; Sbz : WORD; ObjectType'
   +' : PGUID; end');
  CL.AddTypeS('TObjectTypeList', '_OBJECT_TYPE_LIST');
  CL.AddTypeS('OBJECT_TYPE_LIST', '_OBJECT_TYPE_LIST');
 CL.AddConstantN('ACCESS_OBJECT_GUID','LongInt').SetInt( 0);
 CL.AddConstantN('ACCESS_PROPERTY_SET_GUID','LongInt').SetInt( 1);
 CL.AddConstantN('ACCESS_PROPERTY_GUID','LongInt').SetInt( 2);
 CL.AddConstantN('ACCESS_MAX_LEVEL','LongInt').SetInt( 4);
  CL.AddTypeS('AUDIT_EVENT_TYPE', 'DWORD');
 CL.AddConstantN('AUDIT_ALLOW_NO_PRIVILEGE','LongWord').SetUInt( $1);
 CL.AddConstantN('SE_PRIVILEGE_ENABLED_BY_DEFAULT','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SE_PRIVILEGE_ENABLED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SE_PRIVILEGE_USED_FOR_ACCESS','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('PRIVILEGE_SET_ALL_NECESSARY','LongInt').SetInt( 1);
  CL.AddTypeS('PPrivilegeSet', '^TPrivilegeSet // will not work');
  CL.AddTypeS('TPrivilegeSet', '_PRIVILEGE_SET');
  CL.AddTypeS('PRIVILEGE_SET', '_PRIVILEGE_SET');
  CL.AddTypeS('TSecurityImpersonationLevel', '( SecurityAnonymous, SecurityIden'
   +'tification, SecurityImpersonation, SecurityDelegation )');
 CL.AddConstantN('SECURITY_MAX_IMPERSONATION_LEVEL','').SetString( SecurityDelegation);
 CL.AddConstantN('DEFAULT_IMPERSONATION_LEVEL','').SetString( SecurityImpersonation);
 CL.AddConstantN('TOKEN_ASSIGN_PRIMARY','LongWord').SetUInt( $0001);
 CL.AddConstantN('TOKEN_DUPLICATE','LongWord').SetUInt( $0002);
 CL.AddConstantN('TOKEN_IMPERSONATE','LongWord').SetUInt( $0004);
 CL.AddConstantN('TOKEN_QUERY','LongWord').SetUInt( $0008);
 CL.AddConstantN('TOKEN_QUERY_SOURCE','LongWord').SetUInt( $0010);
 CL.AddConstantN('TOKEN_ADJUST_PRIVILEGES','LongWord').SetUInt( $0020);
 CL.AddConstantN('TOKEN_ADJUST_GROUPS','LongWord').SetUInt( $0040);
 CL.AddConstantN('TOKEN_ADJUST_DEFAULT','LongWord').SetUInt( $0080);
 CL.AddConstantN('TOKEN_EXECUTE','').SetString( STANDARD_RIGHTS_EXECUTE);
  CL.AddTypeS('TTokenType', '( TokenTPad, TokenPrimary, TokenImpersonation )');
  CL.AddTypeS('TTokenInformationClass', '( TokenICPad, TokenUser, TokenGroups, '
   +'TokenPrivileges, TokenOwner, TokenPrimaryGroup, TokenDefaultDacl, TokenSou'
   +'rce, TokenType, TokenImpersonationLevel, TokenStatistics )');
  CL.AddTypeS('PTokenGroups', '^TTokenGroups // will not work');
  CL.AddTypeS('TTokenGroups', '_TOKEN_GROUPS');
  CL.AddTypeS('TOKEN_GROUPS', '_TOKEN_GROUPS');
  CL.AddTypeS('PTokenPrivileges', '^TTokenPrivileges // will not work');
  CL.AddTypeS('TTokenPrivileges', '_TOKEN_PRIVILEGES');
  CL.AddTypeS('TOKEN_PRIVILEGES', '_TOKEN_PRIVILEGES');
 CL.AddConstantN('SECURITY_DYNAMIC_TRACKING','Boolean')BoolToStr( True);
 CL.AddConstantN('SECURITY_STATIC_TRACKING','Boolean')BoolToStr( True);
  CL.AddTypeS('SECURITY_CONTEXT_TRACKING_MODE', 'Boolean');
  CL.AddTypeS('PSecurityQualityOfService', '^TSecurityQualityOfService // will '
   +'not work');
  CL.AddTypeS('_SECURITY_QUALITY_OF_SERVICE', 'record Length : DWORD; Impersona'
   +'tionLevel : TSecurityImpersonationLevel; ContextTrackingMode : SECURITY_CO'
   +'NTEXT_TRACKING_MODE; EffectiveOnly : Boolean; end');
  CL.AddTypeS('TSecurityQualityOfService', '_SECURITY_QUALITY_OF_SERVICE');
  CL.AddTypeS('SECURITY_QUALITY_OF_SERVICE', '_SECURITY_QUALITY_OF_SERVICE');
  CL.AddTypeS('SECURITY_INFORMATION', 'DWORD');
  CL.AddTypeS('PSECURITY_INFORMATION', '^DWORD // will not work');
 CL.AddConstantN('OWNER_SECURITY_INFORMATION','LongWord').SetUInt( $00000001);
 CL.AddConstantN('GROUP_SECURITY_INFORMATION','LongWord').SetUInt( $00000002);
 CL.AddConstantN('DACL_SECURITY_INFORMATION','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SACL_SECURITY_INFORMATION','LongWord').SetUInt( $00000008);
 CL.AddConstantN('IMAGE_DOS_SIGNATURE','LongWord').SetUInt( $5A4D);
 CL.AddConstantN('IMAGE_OS2_SIGNATURE','LongWord').SetUInt( $454E);
 CL.AddConstantN('IMAGE_OS2_SIGNATURE_LE','LongWord').SetUInt( $454C);
 CL.AddConstantN('IMAGE_VXD_SIGNATURE','LongWord').SetUInt( $454C);
 CL.AddConstantN('IMAGE_NT_SIGNATURE','LongWord').SetUInt( $00004550);
  CL.AddTypeS('PImageDosHeader', '^TImageDosHeader // will not work');
  CL.AddTypeS('TImageDosHeader', '_IMAGE_DOS_HEADER');
  CL.AddTypeS('IMAGE_DOS_HEADER', '_IMAGE_DOS_HEADER');
  CL.AddTypeS('PImageFileHeader', '^TImageFileHeader // will not work');
  CL.AddTypeS('_IMAGE_FILE_HEADER', 'record Machine : Word; NumberOfSections : '
   +'Word; TimeDateStamp : DWORD; PointerToSymbolTable : DWORD; NumberOfSymbols'
   +' : DWORD; SizeOfOptionalHeader : Word; Characteristics : Word; end');
  CL.AddTypeS('TImageFileHeader', '_IMAGE_FILE_HEADER');
  CL.AddTypeS('IMAGE_FILE_HEADER', '_IMAGE_FILE_HEADER');
  CL.AddTypeS('PImageExportDirectory', '^TImageExportDirectory // will not work');
  CL.AddTypeS('_IMAGE_EXPORT_DIRECTORY', 'record Characteristics : DWord; TimeD'
   +'ateStamp : DWord; MajorVersion : Word; MinorVersion : Word; Name : DWord; '
   +'Base : DWord; NumberOfFunctions : DWord; NumberOfNames : DWord; AddressOfF'
   +'unctions :  ^PDWORD // will not work; AddressOfNames :  ^PDWORD // will no'
   +'t work; AddressOfNameOrdinals :  ^PWord // will not work; end');
  CL.AddTypeS('TImageExportDirectory', '_IMAGE_EXPORT_DIRECTORY');
  CL.AddTypeS('IMAGE_EXPORT_DIRECTORY', '_IMAGE_EXPORT_DIRECTORY');
 CL.AddConstantN('IMAGE_SIZEOF_FILE_HEADER','LongInt').SetInt( 20);
 CL.AddConstantN('IMAGE_FILE_RELOCS_STRIPPED','LongWord').SetUInt( $0001);
 CL.AddConstantN('IMAGE_FILE_EXECUTABLE_IMAGE','LongWord').SetUInt( $0002);
 CL.AddConstantN('IMAGE_FILE_LINE_NUMS_STRIPPED','LongWord').SetUInt( $0004);
 CL.AddConstantN('IMAGE_FILE_LOCAL_SYMS_STRIPPED','LongWord').SetUInt( $0008);
 CL.AddConstantN('IMAGE_FILE_AGGRESIVE_WS_TRIM','LongWord').SetUInt( $0010);
 CL.AddConstantN('IMAGE_FILE_LARGE_ADDRESS_AWARE','LongWord').SetUInt( $0020);
 CL.AddConstantN('IMAGE_FILE_BYTES_REVERSED_LO','LongWord').SetUInt( $0080);
 CL.AddConstantN('IMAGE_FILE_32BIT_MACHINE','LongWord').SetUInt( $0100);
 CL.AddConstantN('IMAGE_FILE_DEBUG_STRIPPED','LongWord').SetUInt( $0200);
 CL.AddConstantN('IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP','LongWord').SetUInt( $0400);
 CL.AddConstantN('IMAGE_FILE_NET_RUN_FROM_SWAP','LongWord').SetUInt( $0800);
 CL.AddConstantN('IMAGE_FILE_SYSTEM','LongWord').SetUInt( $1000);
 CL.AddConstantN('IMAGE_FILE_DLL','LongWord').SetUInt( $2000);
 CL.AddConstantN('IMAGE_FILE_UP_SYSTEM_ONLY','LongWord').SetUInt( $4000);
 CL.AddConstantN('IMAGE_FILE_BYTES_REVERSED_HI','LongWord').SetUInt( $8000);
 CL.AddConstantN('IMAGE_FILE_MACHINE_UNKNOWN','LongInt').SetInt( 0);
 CL.AddConstantN('IMAGE_FILE_MACHINE_I386','LongWord').SetUInt( $14c);
 CL.AddConstantN('IMAGE_FILE_MACHINE_R3000','LongWord').SetUInt( $162);
 CL.AddConstantN('IMAGE_FILE_MACHINE_R4000','LongWord').SetUInt( $166);
 CL.AddConstantN('IMAGE_FILE_MACHINE_R10000','LongWord').SetUInt( $168);
 CL.AddConstantN('IMAGE_FILE_MACHINE_ALPHA','LongWord').SetUInt( $184);
 CL.AddConstantN('IMAGE_FILE_MACHINE_POWERPC','LongWord').SetUInt( $1F0);
  CL.AddTypeS('PImageDataDirectory', '^TImageDataDirectory // will not work');
  CL.AddTypeS('_IMAGE_DATA_DIRECTORY', 'record VirtualAddress : DWORD; Size : D'
   +'WORD; end');
  CL.AddTypeS('TImageDataDirectory', '_IMAGE_DATA_DIRECTORY');
  CL.AddTypeS('IMAGE_DATA_DIRECTORY', '_IMAGE_DATA_DIRECTORY');
 CL.AddConstantN('IMAGE_NUMBEROF_DIRECTORY_ENTRIES','LongInt').SetInt( 16);
  CL.AddTypeS('PImageOptionalHeader', '^TImageOptionalHeader // will not work');
  CL.AddTypeS('TImageOptionalHeader', '_IMAGE_OPTIONAL_HEADER');
  CL.AddTypeS('IMAGE_OPTIONAL_HEADER', '_IMAGE_OPTIONAL_HEADER');
  CL.AddTypeS('PImageRomOptionalHeader', '^TImageRomOptionalHeader // will not '
   +'work');
  CL.AddTypeS('TImageRomOptionalHeader', '_IMAGE_ROM_OPTIONAL_HEADER');
  CL.AddTypeS('IMAGE_ROM_OPTIONAL_HEADER', '_IMAGE_ROM_OPTIONAL_HEADER');
 CL.AddConstantN('IMAGE_SIZEOF_ROM_OPTIONAL_HEADER','LongInt').SetInt( 56);
 CL.AddConstantN('IMAGE_SIZEOF_STD_OPTIONAL_HEADER','LongInt').SetInt( 28);
 CL.AddConstantN('IMAGE_SIZEOF_NT_OPTIONAL_HEADER','LongInt').SetInt( 224);
 CL.AddConstantN('IMAGE_NT_OPTIONAL_HDR_MAGIC','LongWord').SetUInt( $010B);
 CL.AddConstantN('IMAGE_ROM_OPTIONAL_HDR_MAGIC','LongWord').SetUInt( $0107);
  CL.AddTypeS('PImageNtHeaders', '^TImageNtHeaders // will not work');
  CL.AddTypeS('_IMAGE_NT_HEADERS', 'record Signature : DWORD; FileHeader : TIma'
   +'geFileHeader; OptionalHeader : TImageOptionalHeader; end');
  CL.AddTypeS('TImageNtHeaders', '_IMAGE_NT_HEADERS');
  CL.AddTypeS('IMAGE_NT_HEADERS', '_IMAGE_NT_HEADERS');
  CL.AddTypeS('PImageRomHeaders', '^TImageRomHeaders // will not work');
  CL.AddTypeS('_IMAGE_ROM_HEADERS', 'record FileHeader : TImageFileHeader; Opti'
   +'onalHeader : TImageRomOptionalHeader; end');
  CL.AddTypeS('TImageRomHeaders', '_IMAGE_ROM_HEADERS');
  CL.AddTypeS('IMAGE_ROM_HEADERS', '_IMAGE_ROM_HEADERS');
 CL.AddConstantN('IMAGE_SUBSYSTEM_UNKNOWN','LongInt').SetInt( 0);
 CL.AddConstantN('IMAGE_SUBSYSTEM_NATIVE','LongInt').SetInt( 1);
 CL.AddConstantN('IMAGE_SUBSYSTEM_WINDOWS_GUI','LongInt').SetInt( 2);
 CL.AddConstantN('IMAGE_SUBSYSTEM_WINDOWS_CUI','LongInt').SetInt( 3);
 CL.AddConstantN('IMAGE_SUBSYSTEM_OS2_CUI','LongInt').SetInt( 5);
 CL.AddConstantN('IMAGE_SUBSYSTEM_POSIX_CUI','LongInt').SetInt( 7);
 CL.AddConstantN('IMAGE_SUBSYSTEM_RESERVED8','LongInt').SetInt( 8);
 CL.AddConstantN('IMAGE_LIBRARY_PROCESS_INIT','LongWord').SetUInt( $1);
 CL.AddConstantN('IMAGE_LIBRARY_PROCESS_TERM','LongWord').SetUInt( $2);
 CL.AddConstantN('IMAGE_LIBRARY_THREAD_INIT','LongWord').SetUInt( $4);
 CL.AddConstantN('IMAGE_LIBRARY_THREAD_TERM','LongWord').SetUInt( $8);
 CL.AddConstantN('IMAGE_DLLCHARACTERISTICS_NO_BIND','LongWord').SetUInt( $800);
 CL.AddConstantN('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER','LongWord').SetUInt( $2000);
 CL.AddConstantN('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE','LongWord').SetUInt( $8000);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_EXPORT','LongInt').SetInt( 0);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_IMPORT','LongInt').SetInt( 1);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_RESOURCE','LongInt').SetInt( 2);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_EXCEPTION','LongInt').SetInt( 3);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_SECURITY','LongInt').SetInt( 4);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_BASERELOC','LongInt').SetInt( 5);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_DEBUG','LongInt').SetInt( 6);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_COPYRIGHT','LongInt').SetInt( 7);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_GLOBALPTR','LongInt').SetInt( 8);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_TLS','LongInt').SetInt( 9);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG','LongInt').SetInt( 10);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT','LongInt').SetInt( 11);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_IAT','LongInt').SetInt( 12);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT','LongInt').SetInt( 13);
 CL.AddConstantN('IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR','LongInt').SetInt( 14);
 CL.AddConstantN('IMAGE_SIZEOF_SHORT_NAME','LongInt').SetInt( 8);
  CL.AddTypeS('PPImageSectionHeader', '^PImageSectionHeader // will not work');
  CL.AddTypeS('PImageSectionHeader', '^TImageSectionHeader // will not work');
  CL.AddTypeS('TImageSectionHeader', '_IMAGE_SECTION_HEADER');
  CL.AddTypeS('IMAGE_SECTION_HEADER', '_IMAGE_SECTION_HEADER');
 CL.AddConstantN('IMAGE_SIZEOF_SECTION_HEADER','LongInt').SetInt( 40);
 CL.AddConstantN('IMAGE_SCN_TYPE_NO_PAD','LongWord').SetUInt( $00000008);
 CL.AddConstantN('IMAGE_SCN_CNT_CODE','LongWord').SetUInt( $00000020);
 CL.AddConstantN('IMAGE_SCN_CNT_INITIALIZED_DATA','LongWord').SetUInt( $00000040);
 CL.AddConstantN('IMAGE_SCN_CNT_UNINITIALIZED_DATA','LongWord').SetUInt( $00000080);
 CL.AddConstantN('IMAGE_SCN_LNK_OTHER','LongWord').SetUInt( $00000100);
 CL.AddConstantN('IMAGE_SCN_LNK_INFO','LongWord').SetUInt( $00000200);
 CL.AddConstantN('IMAGE_SCN_LNK_REMOVE','LongWord').SetUInt( $00000800);
 CL.AddConstantN('IMAGE_SCN_LNK_COMDAT','LongWord').SetUInt( $00001000);
 CL.AddConstantN('IMAGE_SCN_MEM_FARDATA','LongWord').SetUInt( $00008000);
 CL.AddConstantN('IMAGE_SCN_MEM_PURGEABLE','LongWord').SetUInt( $00020000);
 CL.AddConstantN('IMAGE_SCN_MEM_16BIT','LongWord').SetUInt( $00020000);
 CL.AddConstantN('IMAGE_SCN_MEM_LOCKED','LongWord').SetUInt( $00040000);
 CL.AddConstantN('IMAGE_SCN_MEM_PRELOAD','LongWord').SetUInt( $00080000);
 CL.AddConstantN('IMAGE_SCN_ALIGN_1BYTES','LongWord').SetUInt( $00100000);
 CL.AddConstantN('IMAGE_SCN_ALIGN_2BYTES','LongWord').SetUInt( $00200000);
 CL.AddConstantN('IMAGE_SCN_ALIGN_4BYTES','LongWord').SetUInt( $00300000);
 CL.AddConstantN('IMAGE_SCN_ALIGN_8BYTES','LongWord').SetUInt( $00400000);
 CL.AddConstantN('IMAGE_SCN_ALIGN_16BYTES','LongWord').SetUInt( $00500000);
 CL.AddConstantN('IMAGE_SCN_ALIGN_32BYTES','LongWord').SetUInt( $00600000);
 CL.AddConstantN('IMAGE_SCN_ALIGN_64BYTES','LongWord').SetUInt( $00700000);
 CL.AddConstantN('IMAGE_SCN_LNK_NRELOC_OVFL','LongWord').SetUInt( $01000000);
 CL.AddConstantN('IMAGE_SCN_MEM_DISCARDABLE','LongWord').SetUInt( $02000000);
 CL.AddConstantN('IMAGE_SCN_MEM_NOT_CACHED','LongWord').SetUInt( $04000000);
 CL.AddConstantN('IMAGE_SCN_MEM_NOT_PAGED','LongWord').SetUInt( $08000000);
 CL.AddConstantN('IMAGE_SCN_MEM_SHARED','LongWord').SetUInt( $10000000);
 CL.AddConstantN('IMAGE_SCN_MEM_EXECUTE','LongWord').SetUInt( $20000000);
 CL.AddConstantN('IMAGE_SCN_MEM_READ','LongWord').SetUInt( $40000000);
 CL.AddConstantN('IMAGE_SCN_MEM_WRITE','LongWord').SetUInt( DWORD ( $80000000 ));
  CL.AddTypeS('PImageLoadConfigDirectory', '^TImageLoadConfigDirectory // will '
   +'not work');
  CL.AddTypeS('TImageLoadConfigDirectory', 'IMAGE_LOAD_CONFIG_DIRECTORY');
  CL.AddTypeS('PImageRuntimeFunctionEntry', '^TImageRuntimeFunctionEntry // wil'
   +'l not work');
  CL.AddTypeS('IMAGE_RUNTIME_FUNCTION_ENTRY', 'record BeginAddress : DWORD; End'
   +'Address : DWORD; ExceptionHandler : Pointer; HandlerData : Pointer; Prolog'
   +'EndAddress : DWORD; end');
  CL.AddTypeS('TImageRuntimeFunctionEntry', 'IMAGE_RUNTIME_FUNCTION_ENTRY');
  CL.AddTypeS('PImageDebugDirectory', '^TImageDebugDirectory // will not work');
  CL.AddTypeS('_IMAGE_DEBUG_DIRECTORY', 'record Characteristics : DWORD; TimeDa'
   +'teStamp : DWORD; MajorVersion : Word; MinorVersion : Word; _Type : DWORD; '
   +'SizeOfData : DWORD; AddressOfRawData : DWORD; PointerToRawData : DWORD; en'
   +'d');
  CL.AddTypeS('TImageDebugDirectory', '_IMAGE_DEBUG_DIRECTORY');
  CL.AddTypeS('IMAGE_DEBUG_DIRECTORY', '_IMAGE_DEBUG_DIRECTORY');
 CL.AddConstantN('IMAGE_DEBUG_TYPE_UNKNOWN','LongInt').SetInt( 0);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_COFF','LongInt').SetInt( 1);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_CODEVIEW','LongInt').SetInt( 2);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_FPO','LongInt').SetInt( 3);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_MISC','LongInt').SetInt( 4);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_EXCEPTION','LongInt').SetInt( 5);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_FIXUP','LongInt').SetInt( 6);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_OMAP_TO_SRC','LongInt').SetInt( 7);
 CL.AddConstantN('IMAGE_DEBUG_TYPE_OMAP_FROM_SRC','LongInt').SetInt( 8);
  CL.AddTypeS('PImageCOFFSymbolsHeader', '^TImageCOFFSymbolsHeader // will not '
   +'work');
  CL.AddTypeS('_IMAGE_COFF_SYMBOLS_HEADER', 'record NumberOfSymbols : DWORD; Lv'
   +'aToFirstSymbol : DWORD; NumberOfLinenumbers : DWORD; LvaToFirstLinenumber '
   +': DWORD; RvaToFirstByteOfCode : DWORD; RvaToLastByteOfCode : DWORD; RvaToF'
   +'irstByteOfData : DWORD; RvaToLastByteOfData : DWORD; end');
  CL.AddTypeS('TImageCOFFSymbolsHeader', '_IMAGE_COFF_SYMBOLS_HEADER');
  CL.AddTypeS('IMAGE_COFF_SYMBOLS_HEADER', '_IMAGE_COFF_SYMBOLS_HEADER');
 CL.AddConstantN('FRAME_FPO','LongInt').SetInt( 0);
 CL.AddConstantN('FRAME_TRAP','LongInt').SetInt( 1);
 CL.AddConstantN('FRAME_TSS','LongInt').SetInt( 2);
 CL.AddConstantN('FRAME_NONFPO','LongInt').SetInt( 3);
  CL.AddTypeS('PFpoData', '^TFpoData // will not work');
  CL.AddTypeS('_FPO_DATA', 'record ulOffStart : DWORD; cbProcSize : DWORD; cdwL'
   +'ocals : DWORD; cdwParams : Word; cbProlog : Byte; OtherStuff : Byte; end');
  CL.AddTypeS('TFpoData', '_FPO_DATA');
  CL.AddTypeS('FPO_DATA', '_FPO_DATA');
 CL.AddConstantN('SIZEOF_RFPO_DATA','LongInt').SetInt( 16);
 CL.AddConstantN('IMAGE_DEBUG_MISC_EXENAME','LongInt').SetInt( 1);
  CL.AddTypeS('PImageDebugMisc', '^TImageDebugMisc // will not work');
  CL.AddTypeS('TImageDebugMisc', '_IMAGE_DEBUG_MISC');
  CL.AddTypeS('IMAGE_DEBUG_MISC', '_IMAGE_DEBUG_MISC');
  CL.AddTypeS('PImageFunctionEntry', '^TImageFunctionEntry // will not work');
  CL.AddTypeS('_IMAGE_FUNCTION_ENTRY', 'record StartingAddress : DWORD; EndingA'
   +'ddress : DWORD; EndOfPrologue : DWORD; end');
  CL.AddTypeS('TImageFunctionEntry', '_IMAGE_FUNCTION_ENTRY');
  CL.AddTypeS('IMAGE_FUNCTION_ENTRY', '_IMAGE_FUNCTION_ENTRY');
  CL.AddTypeS('PRTLCriticalSection', '^TRTLCriticalSection // will not work');
  CL.AddTypeS('PRTLCriticalSectionDebug', '^TRTLCriticalSectionDebug // will no'
   +'t work');
  CL.AddTypeS('TRTLCriticalSectionDebug', '_RTL_CRITICAL_SECTION_DEBUG');
  CL.AddTypeS('RTL_CRITICAL_SECTION_DEBUG', '_RTL_CRITICAL_SECTION_DEBUG');
  CL.AddTypeS('_RTL_CRITICAL_SECTION', 'record DebugInfo : PRTLCriticalSectionD'
   +'ebug; LockCount : Longint; RecursionCount : Longint; OwningThread : THandl'
   +'e; LockSemaphore : THandle; Reserved : DWORD; end');
  CL.AddTypeS('TRTLCriticalSection', '_RTL_CRITICAL_SECTION');
  CL.AddTypeS('RTL_CRITICAL_SECTION', '_RTL_CRITICAL_SECTION');
 CL.AddConstantN('RTL_CRITSECT_TYPE','LongInt').SetInt( 0);
 CL.AddConstantN('RTL_RESOURCE_TYPE','LongInt').SetInt( 1);
 CL.AddConstantN('DLL_PROCESS_ATTACH','LongInt').SetInt( 1);
 CL.AddConstantN('DLL_THREAD_ATTACH','LongInt').SetInt( 2);
 CL.AddConstantN('DLL_THREAD_DETACH','LongInt').SetInt( 3);
 CL.AddConstantN('DLL_PROCESS_DETACH','LongInt').SetInt( 0);
 CL.AddConstantN('EVENTLOG_SUCCESS','LongWord').SetUInt( $0000);
 CL.AddConstantN('EVENTLOG_ERROR_TYPE','LongWord').SetUInt( $0001);
 CL.AddConstantN('EVENTLOG_WARNING_TYPE','LongWord').SetUInt( $0002);
 CL.AddConstantN('EVENTLOG_INFORMATION_TYPE','LongWord').SetUInt( $0004);
 CL.AddConstantN('EVENTLOG_AUDIT_SUCCESS','LongWord').SetUInt( $0008);
 CL.AddConstantN('EVENTLOG_AUDIT_FAILURE','LongWord').SetUInt( $0010);
 CL.AddConstantN('KEY_QUERY_VALUE','LongWord').SetUInt( $0001);
 CL.AddConstantN('KEY_SET_VALUE','LongWord').SetUInt( $0002);
 CL.AddConstantN('KEY_CREATE_SUB_KEY','LongWord').SetUInt( $0004);
 CL.AddConstantN('KEY_ENUMERATE_SUB_KEYS','LongWord').SetUInt( $0008);
 CL.AddConstantN('KEY_NOTIFY','LongWord').SetUInt( $0010);
 CL.AddConstantN('KEY_CREATE_LINK','LongWord').SetUInt( $0020);
 CL.AddConstantN('KEY_WOW64_32KEY','LongWord').SetUInt( $0200);
 CL.AddConstantN('KEY_WOW64_64KEY','LongWord').SetUInt( $0100);
 CL.AddConstantN('KEY_WOW64_RES','LongWord').SetUInt( $0300);
 CL.AddConstantN('REG_OPTION_RESERVED','LongWord').SetUInt( ( $00000000 ));
 CL.AddConstantN('REG_OPTION_NON_VOLATILE','LongWord').SetUInt( ( $00000000 ));
 CL.AddConstantN('REG_OPTION_VOLATILE','LongWord').SetUInt( ( $00000001 ));
 CL.AddConstantN('REG_OPTION_CREATE_LINK','LongWord').SetUInt( ( $00000002 ));
 CL.AddConstantN('REG_OPTION_BACKUP_RESTORE','LongWord').SetUInt( ( $00000004 ));
 CL.AddConstantN('REG_CREATED_NEW_KEY','LongWord').SetUInt( ( $00000001 ));
 CL.AddConstantN('REG_OPENED_EXISTING_KEY','LongWord').SetUInt( ( $00000002 ));
 CL.AddConstantN('REG_WHOLE_HIVE_VOLATILE','LongWord').SetUInt( ( $00000001 ));
 CL.AddConstantN('REG_REFRESH_HIVE','LongWord').SetUInt( ( $00000002 ));
 CL.AddConstantN('REG_NOTIFY_CHANGE_NAME','LongWord').SetUInt( ( $00000001 ));
 CL.AddConstantN('REG_NOTIFY_CHANGE_ATTRIBUTES','LongWord').SetUInt( ( $00000002 ));
 CL.AddConstantN('REG_NOTIFY_CHANGE_LAST_SET','LongWord').SetUInt( ( $00000004 ));
 CL.AddConstantN('REG_NOTIFY_CHANGE_SECURITY','LongWord').SetUInt( ( $00000008 ));
 CL.AddConstantN('REG_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('REG_SZ','LongInt').SetInt( 1);
 CL.AddConstantN('REG_EXPAND_SZ','LongInt').SetInt( 2);
 CL.AddConstantN('REG_BINARY','LongInt').SetInt( 3);
 CL.AddConstantN('REG_DWORD','LongInt').SetInt( 4);
 CL.AddConstantN('REG_DWORD_LITTLE_ENDIAN','LongInt').SetInt( 4);
 CL.AddConstantN('REG_DWORD_BIG_ENDIAN','LongInt').SetInt( 5);
 CL.AddConstantN('REG_LINK','LongInt').SetInt( 6);
 CL.AddConstantN('REG_MULTI_SZ','LongInt').SetInt( 7);
 CL.AddConstantN('REG_RESOURCE_LIST','LongInt').SetInt( 8);
 CL.AddConstantN('REG_FULL_RESOURCE_DESCRIPTOR','LongInt').SetInt( 9);
 CL.AddConstantN('REG_RESOURCE_REQUIREMENTS_LIST','LongInt').SetInt( 10);
  CL.AddTypeS('WPARAM', 'Longint');
  CL.AddTypeS('LPARAM', 'Longint');
  CL.AddTypeS('LRESULT', 'Longint');
 CL.AddDelphiFunction('Function MakeWord( a, b : Byte) : Word');
 CL.AddDelphiFunction('Function MakeLong( a, b : Word) : Longint');
  CL.AddTypeS('LOWORD', 'Word');
 CL.AddDelphiFunction('Function HiWord( l : DWORD) : Word');
  CL.AddTypeS('LOBYTE', 'Byte');
 CL.AddDelphiFunction('Function HiByte( W : Word) : Byte');
  CL.AddTypeS('HWND', 'LongWord');
  CL.AddTypeS('HHOOK', 'LongWord');
  CL.AddTypeS('ATOM', 'Word');
  CL.AddTypeS('TAtom', 'Word');
  CL.AddTypeS('HGLOBAL', 'THandle');
  CL.AddTypeS('HLOCAL', 'THandle');
  CL.AddTypeS('FARPROC', 'Pointer');
  CL.AddTypeS('TFarProc', 'Pointer');
  CL.AddTypeS('PROC_22', 'Pointer');
  CL.AddTypeS('HGDIOBJ', 'LongWord');
  CL.AddTypeS('HACCEL', 'LongWord');
  CL.AddTypeS('HBITMAP', 'LongWord');
  CL.AddTypeS('HBRUSH', 'LongWord');
  CL.AddTypeS('HCOLORSPACE', 'LongWord');
  CL.AddTypeS('HDC', 'LongWord');
  CL.AddTypeS('HGLRC', 'LongWord');
  CL.AddTypeS('HDESK', 'LongWord');
  CL.AddTypeS('HENHMETAFILE', 'LongWord');
  CL.AddTypeS('HFONT', 'LongWord');
  CL.AddTypeS('HICON', 'LongWord');
  CL.AddTypeS('HMENU', 'LongWord');
  CL.AddTypeS('HMETAFILE', 'LongWord');
  CL.AddTypeS('HPALETTE', 'LongWord');
  CL.AddTypeS('HPEN', 'LongWord');
  CL.AddTypeS('HRGN', 'LongWord');
  CL.AddTypeS('HSTR', 'LongWord');
  CL.AddTypeS('HTASK', 'LongWord');
  CL.AddTypeS('HWINSTA', 'LongWord');
  CL.AddTypeS('HKL', 'LongWord');
  CL.AddTypeS('HFILE', 'LongWord');
  CL.AddTypeS('HCURSOR', 'HICON');
  CL.AddTypeS('COLORREF', 'DWORD');
  CL.AddTypeS('TColorRef', 'DWORD');
 CL.AddConstantN('HFILE_ERROR','LongInt').SetInt( HFILE ( - 1 ));
  CL.AddTypeS('_POINTL', 'record x : Longint; y : Longint; end');
  CL.AddTypeS('PPointL', '^TPointL // will not work');
  CL.AddTypeS('TPointL', '_POINTL');
 CL.AddDelphiFunction('Function DefineHandleTable( Offset : Word) : Bool');
 CL.AddDelphiFunction('Procedure LimitEmsPages( Kbytes : Longint)');
 CL.AddDelphiFunction('Function SetSwapAreaSize( Size : Word) : Longint');
 CL.AddDelphiFunction('Procedure LockSegment( Segment : THandle)');
 CL.AddDelphiFunction('Procedure UnlockSegment( Segment : THandle)');
 CL.AddDelphiFunction('Function GetCurrentTime : DWORD');
 CL.AddDelphiFunction('Function Yield : Bool');
 CL.AddConstantN('INVALID_HANDLE_VALUE','LongInt').SetInt( DWORD ( - 1 ));
 CL.AddConstantN('INVALID_FILE_SIZE','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('FILE_BEGIN','LongInt').SetInt( 0);
 CL.AddConstantN('FILE_CURRENT','LongInt').SetInt( 1);
 CL.AddConstantN('FILE_END','LongInt').SetInt( 2);
 CL.AddConstantN('TIME_ZONE_ID_INVALID','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('TIME_ZONE_ID_UNKNOWN','LongInt').SetInt( 0);
 CL.AddConstantN('TIME_ZONE_ID_STANDARD','LongInt').SetInt( 1);
 CL.AddConstantN('TIME_ZONE_ID_DAYLIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('WAIT_FAILED','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('WAIT_TIMEOUT','').SetString( STATUS_TIMEOUT);
 CL.AddConstantN('WAIT_IO_COMPLETION','').SetString( STATUS_USER_APC);
 CL.AddConstantN('STILL_ACTIVE','').SetString( STATUS_PENDING);
 CL.AddConstantN('EXCEPTION_ACCESS_VIOLATION','').SetString( STATUS_ACCESS_VIOLATION);
 CL.AddConstantN('EXCEPTION_DATATYPE_MISALIGNMENT','').SetString( STATUS_DATATYPE_MISALIGNMENT);
 CL.AddConstantN('EXCEPTION_BREAKPOINT','').SetString( STATUS_BREAKPOINT);
 CL.AddConstantN('EXCEPTION_SINGLE_STEP','').SetString( STATUS_SINGLE_STEP);
 CL.AddConstantN('EXCEPTION_ARRAY_BOUNDS_EXCEEDED','').SetString( STATUS_ARRAY_BOUNDS_EXCEEDED);
 CL.AddConstantN('EXCEPTION_FLT_DENORMAL_OPERAND','').SetString( STATUS_FLOAT_DENORMAL_OPERAND);
 CL.AddConstantN('EXCEPTION_FLT_DIVIDE_BY_ZERO','').SetString( STATUS_FLOAT_DIVIDE_BY_ZERO);
 CL.AddConstantN('EXCEPTION_FLT_INEXACT_RESULT','').SetString( STATUS_FLOAT_INEXACT_RESULT);
 CL.AddConstantN('EXCEPTION_FLT_INVALID_OPERATION','').SetString( STATUS_FLOAT_INVALID_OPERATION);
 CL.AddConstantN('EXCEPTION_FLT_OVERFLOW','').SetString( STATUS_FLOAT_OVERFLOW);
 CL.AddConstantN('EXCEPTION_FLT_STACK_CHECK','').SetString( STATUS_FLOAT_STACK_CHECK);
 CL.AddConstantN('EXCEPTION_FLT_UNDERFLOW','').SetString( STATUS_FLOAT_UNDERFLOW);
 CL.AddConstantN('EXCEPTION_INT_DIVIDE_BY_ZERO','').SetString( STATUS_INTEGER_DIVIDE_BY_ZERO);
 CL.AddConstantN('EXCEPTION_INT_OVERFLOW','').SetString( STATUS_INTEGER_OVERFLOW);
 CL.AddConstantN('EXCEPTION_PRIV_INSTRUCTION','').SetString( STATUS_PRIVILEGED_INSTRUCTION);
 CL.AddConstantN('EXCEPTION_IN_PAGE_ERROR','').SetString( STATUS_IN_PAGE_ERROR);
 CL.AddConstantN('EXCEPTION_ILLEGAL_INSTRUCTION','').SetString( STATUS_ILLEGAL_INSTRUCTION);
 CL.AddConstantN('EXCEPTION_NONCONTINUABLE_EXCEPTION','').SetString( STATUS_NONCONTINUABLE_EXCEPTION);
 CL.AddConstantN('EXCEPTION_STACK_OVERFLOW','').SetString( STATUS_STACK_OVERFLOW);
 CL.AddConstantN('EXCEPTION_INVALID_DISPOSITION','').SetString( STATUS_INVALID_DISPOSITION);
 CL.AddConstantN('EXCEPTION_GUARD_PAGE','').SetString( STATUS_GUARD_PAGE_VIOLATION);
 CL.AddConstantN('EXCEPTION_INVALID_HANDLE','').SetString( STATUS_INVALID_HANDLE);
 CL.AddConstantN('CONTROL_C_EXIT','').SetString( STATUS_CONTROL_C_EXIT);
 CL.AddDelphiFunction('Procedure MoveMemory( Destination : Pointer; Source : Pointer; Length : DWORD)');
 CL.AddDelphiFunction('Procedure CopyMemory( Destination : Pointer; Source : Pointer; Length : DWORD)');
 CL.AddDelphiFunction('Procedure FillMemory( Destination : Pointer; Length : DWORD; Fill : Byte)');
 CL.AddDelphiFunction('Procedure ZeroMemory( Destination : Pointer; Length : DWORD)');
 CL.AddConstantN('FILE_FLAG_WRITE_THROUGH','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('FILE_FLAG_OVERLAPPED','LongWord').SetUInt( $40000000);
 CL.AddConstantN('FILE_FLAG_NO_BUFFERING','LongWord').SetUInt( $20000000);
 CL.AddConstantN('FILE_FLAG_RANDOM_ACCESS','LongWord').SetUInt( $10000000);
 CL.AddConstantN('FILE_FLAG_SEQUENTIAL_SCAN','LongWord').SetUInt( $8000000);
 CL.AddConstantN('FILE_FLAG_DELETE_ON_CLOSE','LongWord').SetUInt( $4000000);
 CL.AddConstantN('FILE_FLAG_BACKUP_SEMANTICS','LongWord').SetUInt( $2000000);
 CL.AddConstantN('FILE_FLAG_POSIX_SEMANTICS','LongWord').SetUInt( $1000000);
 CL.AddConstantN('CREATE_NEW','LongInt').SetInt( 1);
 CL.AddConstantN('CREATE_ALWAYS','LongInt').SetInt( 2);
 CL.AddConstantN('OPEN_EXISTING','LongInt').SetInt( 3);
 CL.AddConstantN('OPEN_ALWAYS','LongInt').SetInt( 4);
 CL.AddConstantN('TRUNCATE_EXISTING','LongInt').SetInt( 5);
 CL.AddConstantN('PROGRESS_CONTINUE','LongInt').SetInt( 0);
 CL.AddConstantN('PROGRESS_CANCEL','LongInt').SetInt( 1);
 CL.AddConstantN('PROGRESS_STOP','LongInt').SetInt( 2);
 CL.AddConstantN('PROGRESS_QUIET','LongInt').SetInt( 3);
 CL.AddConstantN('CALLBACK_CHUNK_FINISHED','LongWord').SetUInt( $00000000);
 CL.AddConstantN('CALLBACK_STREAM_SWITCH','LongWord').SetUInt( $00000001);
 CL.AddConstantN('COPY_FILE_FAIL_IF_EXISTS','LongWord').SetUInt( $00000001);
 CL.AddConstantN('COPY_FILE_RESTARTABLE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('PIPE_ACCESS_INBOUND','LongInt').SetInt( 1);
 CL.AddConstantN('PIPE_ACCESS_OUTBOUND','LongInt').SetInt( 2);
 CL.AddConstantN('PIPE_ACCESS_DUPLEX','LongInt').SetInt( 3);
 CL.AddConstantN('PIPE_CLIENT_END','LongInt').SetInt( 0);
 CL.AddConstantN('PIPE_SERVER_END','LongInt').SetInt( 1);
 CL.AddConstantN('PIPE_WAIT','LongInt').SetInt( 0);
 CL.AddConstantN('PIPE_NOWAIT','LongInt').SetInt( 1);
 CL.AddConstantN('PIPE_READMODE_BYTE','LongInt').SetInt( 0);
 CL.AddConstantN('PIPE_READMODE_MESSAGE','LongInt').SetInt( 2);
 CL.AddConstantN('PIPE_TYPE_BYTE','LongInt').SetInt( 0);
 CL.AddConstantN('PIPE_TYPE_MESSAGE','LongInt').SetInt( 4);
 CL.AddConstantN('PIPE_UNLIMITED_INSTANCES','LongInt').SetInt( 255);
 CL.AddConstantN('SECURITY_CONTEXT_TRACKING','LongWord').SetUInt( $40000);
 CL.AddConstantN('SECURITY_EFFECTIVE_ONLY','LongWord').SetUInt( $80000);
 CL.AddConstantN('SECURITY_SQOS_PRESENT','LongWord').SetUInt( $100000);
 CL.AddConstantN('SECURITY_VALID_SQOS_FLAGS','LongWord').SetUInt( $1F0000);
  CL.AddTypeS('POverlapped', '^TOverlapped // will not work');
  CL.AddTypeS('_OVERLAPPED', 'record Internal : DWORD; InternalHigh : DWORD; Of'
   +'fset : DWORD; OffsetHigh : DWORD; hEvent : THandle; end');
  CL.AddTypeS('TOverlapped', '_OVERLAPPED');
  CL.AddTypeS('OVERLAPPED', '_OVERLAPPED');
  CL.AddTypeS('PSecurityAttributes', '^TSecurityAttributes // will not work');
  CL.AddTypeS('_SECURITY_ATTRIBUTES', 'record nLength : DWORD; lpSecurityDescri'
   +'ptor : Pointer; bInheritHandle : BOOL; end');
  CL.AddTypeS('TSecurityAttributes', '_SECURITY_ATTRIBUTES');
  CL.AddTypeS('SECURITY_ATTRIBUTES', '_SECURITY_ATTRIBUTES');
  CL.AddTypeS('PProcessInformation', '^TProcessInformation // will not work');
  CL.AddTypeS('_PROCESS_INFORMATION', 'record hProcess : THandle; hThread : THa'
   +'ndle; dwProcessId : DWORD; dwThreadId : DWORD; end');
  CL.AddTypeS('TProcessInformation', '_PROCESS_INFORMATION');
  CL.AddTypeS('PROCESS_INFORMATION', '_PROCESS_INFORMATION');
  CL.AddTypeS('PFileTime', '^TFileTime // will not work');
  CL.AddTypeS('_FILETIME', 'record dwLowDateTime : DWORD; dwHighDateTime : DWOR'
   +'D; end');
  CL.AddTypeS('TFileTime', '_FILETIME');
  CL.AddTypeS('FILETIME', '_FILETIME');
  CL.AddTypeS('PSystemTime', '^TSystemTime // will not work');
  CL.AddTypeS('_SYSTEMTIME', 'record wYear : Word; wMonth : Word; wDayOfWeek : '
   +'Word; wDay : Word; wHour : Word; wMinute : Word; wSecond : Word; wMillisec'
   +'onds : Word; end');
  CL.AddTypeS('TSystemTime', '_SYSTEMTIME');
  CL.AddTypeS('SYSTEMTIME', '_SYSTEMTIME');
  CL.AddTypeS('TFNThreadStartRoutine', 'TFarProc');
  CL.AddTypeS('TFNFiberStartRoutine', 'TFarProc');
 CL.AddConstantN('MUTEX_MODIFY_STATE','').SetString( MUTANT_QUERY_STATE);
 CL.AddConstantN('MUTEX_ALL_ACCESS','').SetString( MUTANT_ALL_ACCESS);
 CL.AddConstantN('SP_SERIALCOMM','LongWord').SetUInt( $00000001);
 CL.AddConstantN('PST_UNSPECIFIED','LongWord').SetUInt( $00000000);
 CL.AddConstantN('PST_RS232','LongWord').SetUInt( $00000001);
 CL.AddConstantN('PST_PARALLELPORT','LongWord').SetUInt( $00000002);
 CL.AddConstantN('PST_RS422','LongWord').SetUInt( $00000003);
 CL.AddConstantN('PST_RS423','LongWord').SetUInt( $00000004);
 CL.AddConstantN('PST_RS449','LongWord').SetUInt( $00000005);
 CL.AddConstantN('PST_MODEM','LongWord').SetUInt( $00000006);
 CL.AddConstantN('PST_FAX','LongWord').SetUInt( $00000021);
 CL.AddConstantN('PST_SCANNER','LongWord').SetUInt( $00000022);
 CL.AddConstantN('PST_NETWORK_BRIDGE','LongWord').SetUInt( $00000100);
 CL.AddConstantN('PST_LAT','LongWord').SetUInt( $00000101);
 CL.AddConstantN('PST_TCPIP_TELNET','LongWord').SetUInt( $00000102);
 CL.AddConstantN('PST_X25','LongWord').SetUInt( $00000103);
 CL.AddConstantN('PCF_DTRDSR','LongWord').SetUInt( $0001);
 CL.AddConstantN('PCF_RTSCTS','LongWord').SetUInt( $0002);
 CL.AddConstantN('PCF_RLSD','LongWord').SetUInt( $0004);
 CL.AddConstantN('PCF_PARITY_CHECK','LongWord').SetUInt( $0008);
 CL.AddConstantN('PCF_XONXOFF','LongWord').SetUInt( $0010);
 CL.AddConstantN('PCF_SETXCHAR','LongWord').SetUInt( $0020);
 CL.AddConstantN('PCF_TOTALTIMEOUTS','LongWord').SetUInt( $0040);
 CL.AddConstantN('PCF_INTTIMEOUTS','LongWord').SetUInt( $0080);
 CL.AddConstantN('PCF_SPECIALCHARS','LongWord').SetUInt( $0100);
 CL.AddConstantN('PCF_16BITMODE','LongWord').SetUInt( $0200);
 CL.AddConstantN('SP_PARITY','LongWord').SetUInt( $0001);
 CL.AddConstantN('SP_BAUD','LongWord').SetUInt( $0002);
 CL.AddConstantN('SP_DATABITS','LongWord').SetUInt( $0004);
 CL.AddConstantN('SP_STOPBITS','LongWord').SetUInt( $0008);
 CL.AddConstantN('SP_HANDSHAKING','LongWord').SetUInt( $0010);
 CL.AddConstantN('SP_PARITY_CHECK','LongWord').SetUInt( $0020);
 CL.AddConstantN('SP_RLSD','LongWord').SetUInt( $0040);
 CL.AddConstantN('BAUD_075','LongWord').SetUInt( $00000001);
 CL.AddConstantN('BAUD_110','LongWord').SetUInt( $00000002);
 CL.AddConstantN('BAUD_134_5','LongWord').SetUInt( $00000004);
 CL.AddConstantN('BAUD_150','LongWord').SetUInt( $00000008);
 CL.AddConstantN('BAUD_300','LongWord').SetUInt( $00000010);
 CL.AddConstantN('BAUD_600','LongWord').SetUInt( $00000020);
 CL.AddConstantN('BAUD_1200','LongWord').SetUInt( $00000040);
 CL.AddConstantN('BAUD_1800','LongWord').SetUInt( $00000080);
 CL.AddConstantN('BAUD_2400','LongWord').SetUInt( $00000100);
 CL.AddConstantN('BAUD_4800','LongWord').SetUInt( $00000200);
 CL.AddConstantN('BAUD_7200','LongWord').SetUInt( $00000400);
 CL.AddConstantN('BAUD_9600','LongWord').SetUInt( $00000800);
 CL.AddConstantN('BAUD_14400','LongWord').SetUInt( $00001000);
 CL.AddConstantN('BAUD_19200','LongWord').SetUInt( $00002000);
 CL.AddConstantN('BAUD_38400','LongWord').SetUInt( $00004000);
 CL.AddConstantN('BAUD_56K','LongWord').SetUInt( $00008000);
 CL.AddConstantN('BAUD_128K','LongWord').SetUInt( $00010000);
 CL.AddConstantN('BAUD_115200','LongWord').SetUInt( $00020000);
 CL.AddConstantN('BAUD_57600','LongWord').SetUInt( $00040000);
 CL.AddConstantN('BAUD_USER','LongWord').SetUInt( $10000000);
 CL.AddConstantN('DATABITS_5','LongWord').SetUInt( $0001);
 CL.AddConstantN('DATABITS_6','LongWord').SetUInt( $0002);
 CL.AddConstantN('DATABITS_7','LongWord').SetUInt( $0004);
 CL.AddConstantN('DATABITS_8','LongWord').SetUInt( $0008);
 CL.AddConstantN('DATABITS_16','LongWord').SetUInt( $0010);
 CL.AddConstantN('DATABITS_16X','LongWord').SetUInt( $0020);
 CL.AddConstantN('STOPBITS_10','LongWord').SetUInt( $0001);
 CL.AddConstantN('STOPBITS_15','LongWord').SetUInt( $0002);
 CL.AddConstantN('STOPBITS_20','LongWord').SetUInt( $0004);
 CL.AddConstantN('PARITY_NONE','LongWord').SetUInt( $0100);
 CL.AddConstantN('PARITY_ODD','LongWord').SetUInt( $0200);
 CL.AddConstantN('PARITY_EVEN','LongWord').SetUInt( $0400);
 CL.AddConstantN('PARITY_MARK','LongWord').SetUInt( $0800);
 CL.AddConstantN('PARITY_SPACE','LongWord').SetUInt( $1000);
  CL.AddTypeS('PCommProp', '^TCommProp // will not work');
  CL.AddTypeS('TCommProp', '_COMMPROP');
  CL.AddTypeS('COMMPROP', '_COMMPROP');
 CL.AddConstantN('COMMPROP_INITIALIZED','LongWord').SetUInt( DWORD ( $E73CF52E ));
  CL.AddTypeS('TComStateFlag', '( fCtlHold, fDsrHold, fRlsHold, fXoffHold, fXOf'
   +'fSent, fEof, fTxim )');
  CL.AddTypeS('TComStateFlags', 'set of TComStateFlag');
  CL.AddTypeS('TComStat', '_COMSTAT');
  CL.AddTypeS('COMSTAT', '_COMSTAT');
  CL.AddTypeS('PComStat', '^TComStat // will not work');
 CL.AddConstantN('DTR_CONTROL_DISABLE','LongInt').SetInt( 0);
 CL.AddConstantN('DTR_CONTROL_ENABLE','LongInt').SetInt( 1);
 CL.AddConstantN('DTR_CONTROL_HANDSHAKE','LongInt').SetInt( 2);
 CL.AddConstantN('RTS_CONTROL_DISABLE','LongInt').SetInt( 0);
 CL.AddConstantN('RTS_CONTROL_ENABLE','LongInt').SetInt( 1);
 CL.AddConstantN('RTS_CONTROL_HANDSHAKE','LongInt').SetInt( 2);
 CL.AddConstantN('RTS_CONTROL_TOGGLE','LongInt').SetInt( 3);
  CL.AddTypeS('_DCB', 'record DCBlength : DWORD; BaudRate : DWORD; Flags : Long'
   +'int; wReserved : Word; XonLim : Word; XoffLim : Word; ByteSize : Byte; Par'
   +'ity : Byte; StopBits : Byte; XonChar : CHAR; XoffChar : CHAR; ErrorChar : '
   +'CHAR; EofChar : CHAR; EvtChar : CHAR; wReserved1 : Word; end');
  CL.AddTypeS('TDCB', '_DCB');
  CL.AddTypeS('DCB', '_DCB');
  CL.AddTypeS('PDCB', '^TDCB // will not work');
  CL.AddTypeS('PCommTimeouts', '^TCommTimeouts // will not work');
  CL.AddTypeS('_COMMTIMEOUTS', 'record ReadIntervalTimeout : DWORD; ReadTotalTi'
   +'meoutMultiplier : DWORD; ReadTotalTimeoutConstant : DWORD; WriteTotalTimeo'
   +'utMultiplier : DWORD; WriteTotalTimeoutConstant : DWORD; end');
  CL.AddTypeS('TCommTimeouts', '_COMMTIMEOUTS');
  CL.AddTypeS('COMMTIMEOUTS', '_COMMTIMEOUTS');
  CL.AddTypeS('PCommConfig', '^TCommConfig // will not work');
  CL.AddTypeS('TCommConfig', '_COMMCONFIG');
  CL.AddTypeS('COMMCONFIG', '_COMMCONFIG');
  CL.AddTypeS('TSystemInfo', '_SYSTEM_INFO');
  CL.AddTypeS('SYSTEM_INFO', '_SYSTEM_INFO');
 CL.AddDelphiFunction('Function FreeModule( var hLibModule : HINST) : BOOL');
 CL.AddDelphiFunction('Function MakeProcInstance( Proc : FARPROC; Instance : THandle) : FARPROC');
 CL.AddDelphiFunction('Procedure FreeProcInstance( Proc : FARPROC)');
 CL.AddConstantN('GMEM_FIXED','LongInt').SetInt( 0);
 CL.AddConstantN('GMEM_MOVEABLE','LongInt').SetInt( 2);
 CL.AddConstantN('GMEM_NOCOMPACT','LongWord').SetUInt( $10);
 CL.AddConstantN('GMEM_NODISCARD','LongWord').SetUInt( $20);
 CL.AddConstantN('GMEM_ZEROINIT','LongWord').SetUInt( $40);
 CL.AddConstantN('GMEM_MODIFY','LongWord').SetUInt( $80);
 CL.AddConstantN('GMEM_DISCARDABLE','LongWord').SetUInt( $100);
 CL.AddConstantN('GMEM_NOT_BANKED','LongWord').SetUInt( $1000);
 CL.AddConstantN('GMEM_SHARE','LongWord').SetUInt( $2000);
 CL.AddConstantN('GMEM_DDESHARE','LongWord').SetUInt( $2000);
 CL.AddConstantN('GMEM_NOTIFY','LongWord').SetUInt( $4000);
 CL.AddConstantN('GMEM_LOWER','').SetString( GMEM_NOT_BANKED);
 CL.AddConstantN('GMEM_VALID_FLAGS','LongInt').SetInt( 32626);
 CL.AddConstantN('GMEM_INVALID_HANDLE','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Function GlobalLRUNewest( h : THandle) : THandle');
 CL.AddDelphiFunction('Function GlobalLRUOldest( h : THandle) : THandle');
 CL.AddDelphiFunction('Function GlobalDiscard( h : THandle) : THandle');
 CL.AddDelphiFunction('Function GlobalAllocPtr( Flags : Integer; Bytes : Longint) : Pointer');
 CL.AddDelphiFunction('Function GlobalReAllocPtr( P : Pointer; Bytes : Longint; Flags : Integer) : Pointer');
 CL.AddDelphiFunction('Function GlobalFreePtr( P : Pointer) : THandle');
 CL.AddConstantN('GMEM_DISCARDED','LongWord').SetUInt( $4000);
 CL.AddConstantN('GMEM_LOCKCOUNT','LongInt').SetInt( 255);
  CL.AddTypeS('PMemoryStatus', '^TMemoryStatus // will not work');
  CL.AddTypeS('_MEMORYSTATUS', 'record dwLength : DWORD; dwMemoryLoad : DWORD; '
   +'dwTotalPhys : DWORD; dwAvailPhys : DWORD; dwTotalPageFile : DWORD; dwAvail'
   +'PageFile : DWORD; dwTotalVirtual : DWORD; dwAvailVirtual : DWORD; end');
  CL.AddTypeS('TMemoryStatus', '_MEMORYSTATUS');
  CL.AddTypeS('MEMORYSTATUS', '_MEMORYSTATUS');
 CL.AddConstantN('LMEM_FIXED','LongInt').SetInt( 0);
 CL.AddConstantN('LMEM_MOVEABLE','LongInt').SetInt( 2);
 CL.AddConstantN('LMEM_NOCOMPACT','LongWord').SetUInt( $10);
 CL.AddConstantN('LMEM_NODISCARD','LongWord').SetUInt( $20);
 CL.AddConstantN('LMEM_ZEROINIT','LongWord').SetUInt( $40);
 CL.AddConstantN('LMEM_MODIFY','LongWord').SetUInt( $80);
 CL.AddConstantN('LMEM_DISCARDABLE','LongWord').SetUInt( $F00);
 CL.AddConstantN('LMEM_VALID_FLAGS','LongWord').SetUInt( $F72);
 CL.AddConstantN('LMEM_INVALID_HANDLE','LongWord').SetUInt( $8000);
 CL.AddConstantN('NONZEROLPTR','').SetString( LMEM_FIXED);
 CL.AddDelphiFunction('Function LocalDiscard( h : THandle) : THandle');
 CL.AddConstantN('LMEM_DISCARDED','LongWord').SetUInt( $4000);
 CL.AddConstantN('LMEM_LOCKCOUNT','LongInt').SetInt( 255);
 CL.AddConstantN('DEBUG_PROCESS','LongWord').SetUInt( $00000001);
 CL.AddConstantN('DEBUG_ONLY_THIS_PROCESS','LongWord').SetUInt( $00000002);
 CL.AddConstantN('CREATE_SUSPENDED','LongWord').SetUInt( $00000004);
 CL.AddConstantN('DETACHED_PROCESS','LongWord').SetUInt( $00000008);
 CL.AddConstantN('CREATE_NEW_CONSOLE','LongWord').SetUInt( $00000010);
 CL.AddConstantN('NORMAL_PRIORITY_CLASS','LongWord').SetUInt( $00000020);
 CL.AddConstantN('IDLE_PRIORITY_CLASS','LongWord').SetUInt( $00000040);
 CL.AddConstantN('HIGH_PRIORITY_CLASS','LongWord').SetUInt( $00000080);
 CL.AddConstantN('REALTIME_PRIORITY_CLASS','LongWord').SetUInt( $00000100);
 CL.AddConstantN('CREATE_NEW_PROCESS_GROUP','LongWord').SetUInt( $00000200);
 CL.AddConstantN('CREATE_UNICODE_ENVIRONMENT','LongWord').SetUInt( $00000400);
 CL.AddConstantN('CREATE_SEPARATE_WOW_VDM','LongWord').SetUInt( $00000800);
 CL.AddConstantN('CREATE_SHARED_WOW_VDM','LongWord').SetUInt( $00001000);
 CL.AddConstantN('CREATE_FORCEDOS','LongWord').SetUInt( $00002000);
 CL.AddConstantN('CREATE_DEFAULT_ERROR_MODE','LongWord').SetUInt( $04000000);
 CL.AddConstantN('CREATE_NO_WINDOW','LongWord').SetUInt( $08000000);
 CL.AddConstantN('PROFILE_USER','LongWord').SetUInt( $10000000);
 CL.AddConstantN('PROFILE_KERNEL','LongWord').SetUInt( $20000000);
 CL.AddConstantN('PROFILE_SERVER','LongWord').SetUInt( $40000000);
 CL.AddConstantN('THREAD_PRIORITY_LOWEST','').SetString( THREAD_BASE_PRIORITY_MIN);
 CL.AddConstantN('THREAD_PRIORITY_BELOW_NORMAL','LongInt').SetInt( THREAD_PRIORITY_LOWEST + 1);
 CL.AddConstantN('THREAD_PRIORITY_NORMAL','LongInt').SetInt( 0);
 CL.AddConstantN('THREAD_PRIORITY_HIGHEST','').SetString( THREAD_BASE_PRIORITY_MAX);
 CL.AddConstantN('THREAD_PRIORITY_ABOVE_NORMAL','LongInt').SetInt( THREAD_PRIORITY_HIGHEST - 1);
 CL.AddConstantN('THREAD_PRIORITY_ERROR_RETURN','').SetString( MAXLONG);
 CL.AddConstantN('THREAD_PRIORITY_TIME_CRITICAL','').SetString( THREAD_BASE_PRIORITY_LOWRT);
 CL.AddConstantN('THREAD_PRIORITY_IDLE','').SetString( THREAD_BASE_PRIORITY_IDLE);
 CL.AddConstantN('DBG_CONTINUE','LongWord').SetUInt( $00010002);
 CL.AddConstantN('DBG_TERMINATE_THREAD','LongWord').SetUInt( $40010003);
 CL.AddConstantN('DBG_TERMINATE_PROCESS','LongWord').SetUInt( $40010004);
 CL.AddConstantN('DBG_CONTROL_C','LongWord').SetUInt( $40010005);
 CL.AddConstantN('DBG_CONTROL_BREAK','LongWord').SetUInt( $40010008);
 CL.AddConstantN('DBG_EXCEPTION_NOT_HANDLED','LongWord').SetUInt( $80010001);
 CL.AddConstantN('EXCEPTION_DEBUG_EVENT','LongInt').SetInt( 1);
 CL.AddConstantN('CREATE_THREAD_DEBUG_EVENT','LongInt').SetInt( 2);
 CL.AddConstantN('CREATE_PROCESS_DEBUG_EVENT','LongInt').SetInt( 3);
 CL.AddConstantN('EXIT_THREAD_DEBUG_EVENT','LongInt').SetInt( 4);
 CL.AddConstantN('EXIT_PROCESS_DEBUG_EVENT','LongInt').SetInt( 5);
 CL.AddConstantN('LOAD_DLL_DEBUG_EVENT','LongInt').SetInt( 6);
 CL.AddConstantN('UNLOAD_DLL_DEBUG_EVENT','LongInt').SetInt( 7);
 CL.AddConstantN('OUTPUT_DEBUG_STRING_EVENT','LongInt').SetInt( 8);
 CL.AddConstantN('RIP_EVENT','LongInt').SetInt( 9);
  CL.AddTypeS('PExceptionDebugInfo', '^TExceptionDebugInfo // will not work');
  CL.AddTypeS('_EXCEPTION_DEBUG_INFO', 'record ExceptionRecord : TExceptionReco'
   +'rd; dwFirstChance : DWORD; end');
  CL.AddTypeS('TExceptionDebugInfo', '_EXCEPTION_DEBUG_INFO');
  CL.AddTypeS('EXCEPTION_DEBUG_INFO', '_EXCEPTION_DEBUG_INFO');
  CL.AddTypeS('PCreateThreadDebugInfo', '^TCreateThreadDebugInfo // will not wo'
   +'rk');
  CL.AddTypeS('_CREATE_THREAD_DEBUG_INFO', 'record hThread : THandle; lpThreadL'
   +'ocalBase : Pointer; lpStartAddress : TFNThreadStartRoutine; end');
  CL.AddTypeS('TCreateThreadDebugInfo', '_CREATE_THREAD_DEBUG_INFO');
  CL.AddTypeS('CREATE_THREAD_DEBUG_INFO', '_CREATE_THREAD_DEBUG_INFO');
  CL.AddTypeS('PCreateProcessDebugInfo', '^TCreateProcessDebugInfo // will not '
   +'work');
  CL.AddTypeS('_CREATE_PROCESS_DEBUG_INFO', 'record hFile : THandle; hProcess :'
   +' THandle; hThread : THandle; lpBaseOfImage : Pointer; dwDebugInfoFileOffse'
   +'t : DWORD; nDebugInfoSize : DWORD; lpThreadLocalBase : Pointer; lpStartAdd'
   +'ress : TFNThreadStartRoutine; lpImageName : Pointer; fUnicode : Word; end');
  CL.AddTypeS('TCreateProcessDebugInfo', '_CREATE_PROCESS_DEBUG_INFO');
  CL.AddTypeS('CREATE_PROCESS_DEBUG_INFO', '_CREATE_PROCESS_DEBUG_INFO');
  CL.AddTypeS('PExitThreadDebugInfo', '^TExitThreadDebugInfo // will not work');
  CL.AddTypeS('_EXIT_THREAD_DEBUG_INFO', 'record dwExitCode : DWORD; end');
  CL.AddTypeS('TExitThreadDebugInfo', '_EXIT_THREAD_DEBUG_INFO');
  CL.AddTypeS('EXIT_THREAD_DEBUG_INFO', '_EXIT_THREAD_DEBUG_INFO');
  CL.AddTypeS('PExitProcessDebugInfo', '^TExitProcessDebugInfo // will not work');
  CL.AddTypeS('_EXIT_PROCESS_DEBUG_INFO', 'record dwExitCode : DWORD; end');
  CL.AddTypeS('TExitProcessDebugInfo', '_EXIT_PROCESS_DEBUG_INFO');
  CL.AddTypeS('EXIT_PROCESS_DEBUG_INFO', '_EXIT_PROCESS_DEBUG_INFO');
  CL.AddTypeS('PLoadDLLDebugInfo', '^TLoadDLLDebugInfo // will not work');
  CL.AddTypeS('_LOAD_DLL_DEBUG_INFO', 'record hFile : THandle; lpBaseOfDll : Po'
   +'inter; dwDebugInfoFileOffset : DWORD; nDebugInfoSize : DWORD; lpImageName '
   +': Pointer; fUnicode : Word; end');
  CL.AddTypeS('TLoadDLLDebugInfo', '_LOAD_DLL_DEBUG_INFO');
  CL.AddTypeS('LOAD_DLL_DEBUG_INFO', '_LOAD_DLL_DEBUG_INFO');
  CL.AddTypeS('PUnloadDLLDebugInfo', '^TUnloadDLLDebugInfo // will not work');
  CL.AddTypeS('_UNLOAD_DLL_DEBUG_INFO', 'record lpBaseOfDll : Pointer; end');
  CL.AddTypeS('TUnloadDLLDebugInfo', '_UNLOAD_DLL_DEBUG_INFO');
  CL.AddTypeS('UNLOAD_DLL_DEBUG_INFO', '_UNLOAD_DLL_DEBUG_INFO');
  CL.AddTypeS('POutputDebugStringInfo', '^TOutputDebugStringInfo // will not wo'
   +'rk');
  CL.AddTypeS('_OUTPUT_DEBUG_STRING_INFO', 'record lpDebugStringData : LPSTR; f'
   +'Unicode : Word; nDebugStringLength : Word; end');
  CL.AddTypeS('TOutputDebugStringInfo', '_OUTPUT_DEBUG_STRING_INFO');
  CL.AddTypeS('OUTPUT_DEBUG_STRING_INFO', '_OUTPUT_DEBUG_STRING_INFO');
  CL.AddTypeS('PRIPInfo', '^TRIPInfo // will not work');
  CL.AddTypeS('_RIP_INFO', 'record dwError : DWORD; dwType : DWORD; end');
  CL.AddTypeS('TRIPInfo', '_RIP_INFO');
  CL.AddTypeS('RIP_INFO', '_RIP_INFO');
  CL.AddTypeS('PDebugEvent', '^TDebugEvent // will not work');
  CL.AddTypeS('_DEBUG_EVENT', 'record dwDebugEventCode : DWORD; dwProcessId : D'
   +'WORD; dwThreadId : DWORD; end');
  CL.AddTypeS('TDebugEvent', '_DEBUG_EVENT');
  CL.AddTypeS('DEBUG_EVENT', '_DEBUG_EVENT');
 CL.AddConstantN('DRIVE_UNKNOWN','LongInt').SetInt( 0);
 CL.AddConstantN('DRIVE_NO_ROOT_DIR','LongInt').SetInt( 1);
 CL.AddConstantN('DRIVE_REMOVABLE','LongInt').SetInt( 2);
 CL.AddConstantN('DRIVE_FIXED','LongInt').SetInt( 3);
 CL.AddConstantN('DRIVE_REMOTE','LongInt').SetInt( 4);
 CL.AddConstantN('DRIVE_CDROM','LongInt').SetInt( 5);
 CL.AddConstantN('DRIVE_RAMDISK','LongInt').SetInt( 6);
 CL.AddDelphiFunction('Function GetFreeSpace( w : Word) : DWORD');
 CL.AddConstantN('FILE_TYPE_UNKNOWN','LongInt').SetInt( 0);
 CL.AddConstantN('FILE_TYPE_DISK','LongInt').SetInt( 1);
 CL.AddConstantN('FILE_TYPE_CHAR','LongInt').SetInt( 2);
 CL.AddConstantN('FILE_TYPE_PIPE','LongInt').SetInt( 3);
 CL.AddConstantN('FILE_TYPE_REMOTE','LongWord').SetUInt( $8000);
 CL.AddConstantN('STD_INPUT_HANDLE','LongInt').SetInt( DWORD ( - 10 ));
 CL.AddConstantN('STD_OUTPUT_HANDLE','LongInt').SetInt( DWORD ( - 11 ));
 CL.AddConstantN('STD_ERROR_HANDLE','LongInt').SetInt( DWORD ( - 12 ));
 CL.AddConstantN('NOPARITY','LongInt').SetInt( 0);
 CL.AddConstantN('ODDPARITY','LongInt').SetInt( 1);
 CL.AddConstantN('EVENPARITY','LongInt').SetInt( 2);
 CL.AddConstantN('MARKPARITY','LongInt').SetInt( 3);
 CL.AddConstantN('SPACEPARITY','LongInt').SetInt( 4);
 CL.AddConstantN('ONESTOPBIT','LongInt').SetInt( 0);
 CL.AddConstantN('ONE5STOPBITS','LongInt').SetInt( 1);
 CL.AddConstantN('TWOSTOPBITS','LongInt').SetInt( 2);
 CL.AddConstantN('IGNORE','LongInt').SetInt( 0);
 CL.AddConstantN('INFINITE','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('CBR_110','LongInt').SetInt( 110);
 CL.AddConstantN('CBR_300','LongInt').SetInt( 300);
 CL.AddConstantN('CBR_600','LongInt').SetInt( 600);
 CL.AddConstantN('CBR_1200','LongInt').SetInt( 1200);
 CL.AddConstantN('CBR_2400','LongInt').SetInt( 2400);
 CL.AddConstantN('CBR_4800','LongInt').SetInt( 4800);
 CL.AddConstantN('CBR_9600','LongInt').SetInt( 9600);
 CL.AddConstantN('CBR_14400','LongInt').SetInt( 14400);
 CL.AddConstantN('CBR_19200','LongInt').SetInt( 19200);
 CL.AddConstantN('CBR_38400','LongInt').SetInt( 38400);
 CL.AddConstantN('CBR_56000','LongInt').SetInt( 56000);
 CL.AddConstantN('CBR_57600','LongInt').SetInt( 57600);
 CL.AddConstantN('CBR_115200','LongWord').SetUInt( $1C200);
 CL.AddConstantN('CBR_128000','LongWord').SetUInt( $1F400);
 CL.AddConstantN('CBR_256000','LongWord').SetUInt( $3E800);
 CL.AddConstantN('CE_RXOVER','LongInt').SetInt( 1);
 CL.AddConstantN('CE_OVERRUN','LongInt').SetInt( 2);
 CL.AddConstantN('CE_RXPARITY','LongInt').SetInt( 4);
 CL.AddConstantN('CE_FRAME','LongInt').SetInt( 8);
 CL.AddConstantN('CE_BREAK','LongWord').SetUInt( $10);
 CL.AddConstantN('CE_TXFULL','LongWord').SetUInt( $100);
 CL.AddConstantN('CE_PTO','LongWord').SetUInt( $200);
 CL.AddConstantN('CE_IOE','LongWord').SetUInt( $400);
 CL.AddConstantN('CE_DNS','LongWord').SetUInt( $800);
 CL.AddConstantN('CE_OOP','LongWord').SetUInt( $1000);
 CL.AddConstantN('CE_MODE','LongWord').SetUInt( $8000);
 CL.AddConstantN('IE_BADID','LongInt').SetInt( LongWord ( - 1 ));
 CL.AddConstantN('IE_OPEN','LongInt').SetInt( LongWord ( - 2 ));
 CL.AddConstantN('IE_NOPEN','LongInt').SetInt( LongWord ( - 3 ));
 CL.AddConstantN('IE_MEMORY','LongInt').SetInt( LongWord ( - 4 ));
 CL.AddConstantN('IE_DEFAULT','LongInt').SetInt( LongWord ( - 5 ));
 CL.AddConstantN('IE_HARDWARE','LongInt').SetInt( LongWord ( - 10 ));
 CL.AddConstantN('IE_BYTESIZE','LongInt').SetInt( LongWord ( - 11 ));
 CL.AddConstantN('IE_BAUDRATE','LongInt').SetInt( LongWord ( - 12 ));
 CL.AddConstantN('EV_RXCHAR','LongInt').SetInt( 1);
 CL.AddConstantN('EV_RXFLAG','LongInt').SetInt( 2);
 CL.AddConstantN('EV_TXEMPTY','LongInt').SetInt( 4);
 CL.AddConstantN('EV_CTS','LongInt').SetInt( 8);
 CL.AddConstantN('EV_DSR','LongWord').SetUInt( $10);
 CL.AddConstantN('EV_RLSD','LongWord').SetUInt( $20);
 CL.AddConstantN('EV_BREAK','LongWord').SetUInt( $40);
 CL.AddConstantN('EV_ERR','LongWord').SetUInt( $80);
 CL.AddConstantN('EV_RING','LongWord').SetUInt( $100);
 CL.AddConstantN('EV_PERR','LongWord').SetUInt( $200);
 CL.AddConstantN('EV_RX80FULL','LongWord').SetUInt( $400);
 CL.AddConstantN('EV_EVENT1','LongWord').SetUInt( $800);
 CL.AddConstantN('EV_EVENT2','LongWord').SetUInt( $1000);
 CL.AddConstantN('SETXOFF','LongInt').SetInt( 1);
 CL.AddConstantN('SETXON','LongInt').SetInt( 2);
 CL.AddConstantN('SETRTS','LongInt').SetInt( 3);
 CL.AddConstantN('CLRRTS','LongInt').SetInt( 4);
 CL.AddConstantN('SETDTR','LongInt').SetInt( 5);
 CL.AddConstantN('CLRDTR','LongInt').SetInt( 6);
 CL.AddConstantN('RESETDEV','LongInt').SetInt( 7);
 CL.AddConstantN('SETBREAK','LongInt').SetInt( 8);
 CL.AddConstantN('CLRBREAK','LongInt').SetInt( 9);
 CL.AddConstantN('PURGE_TXABORT','LongInt').SetInt( 1);
 CL.AddConstantN('PURGE_RXABORT','LongInt').SetInt( 2);
 CL.AddConstantN('PURGE_TXCLEAR','LongInt').SetInt( 4);
 CL.AddConstantN('PURGE_RXCLEAR','LongInt').SetInt( 8);
 CL.AddConstantN('LPTx','LongWord').SetUInt( $80);
 CL.AddConstantN('MS_CTS_ON','LongWord').SetUInt( DWORD ( $0010 ));
 CL.AddConstantN('MS_DSR_ON','LongWord').SetUInt( DWORD ( $0020 ));
 CL.AddConstantN('MS_RING_ON','LongWord').SetUInt( DWORD ( $0040 ));
 CL.AddConstantN('MS_RLSD_ON','LongWord').SetUInt( DWORD ( $0080 ));
 CL.AddConstantN('S_QUEUEEMPTY','LongInt').SetInt( 0);
 CL.AddConstantN('S_THRESHOLD','LongInt').SetInt( 1);
 CL.AddConstantN('S_ALLTHRESHOLD','LongInt').SetInt( 2);
 CL.AddConstantN('S_NORMAL','LongInt').SetInt( 0);
 CL.AddConstantN('S_LEGATO','LongInt').SetInt( 1);
 CL.AddConstantN('S_STACCATO','LongInt').SetInt( 2);
 CL.AddConstantN('S_PERIOD512','LongInt').SetInt( 0);
 CL.AddConstantN('S_PERIOD1024','LongInt').SetInt( 1);
 CL.AddConstantN('S_PERIOD2048','LongInt').SetInt( 2);
 CL.AddConstantN('S_PERIODVOICE','LongInt').SetInt( 3);
 CL.AddConstantN('S_WHITE512','LongInt').SetInt( 4);
 CL.AddConstantN('S_WHITE1024','LongInt').SetInt( 5);
 CL.AddConstantN('S_WHITE2048','LongInt').SetInt( 6);
 CL.AddConstantN('S_WHITEVOICE','LongInt').SetInt( 7);
 CL.AddConstantN('S_SERDVNA','LongInt').SetInt( LongWord ( - 1 ));
 CL.AddConstantN('S_SEROFM','LongInt').SetInt( LongWord ( - 2 ));
 CL.AddConstantN('S_SERMACT','LongInt').SetInt( LongWord ( - 3 ));
 CL.AddConstantN('S_SERQFUL','LongInt').SetInt( LongWord ( - 4 ));
 CL.AddConstantN('S_SERBDNT','LongInt').SetInt( LongWord ( - 5 ));
 CL.AddConstantN('S_SERDLN','LongInt').SetInt( LongWord ( - 6 ));
 CL.AddConstantN('S_SERDCC','LongInt').SetInt( LongWord ( - 7 ));
 CL.AddConstantN('S_SERDTP','LongInt').SetInt( LongWord ( - 8 ));
 CL.AddConstantN('S_SERDVL','LongInt').SetInt( LongWord ( - 9 ));
 CL.AddConstantN('S_SERDMD','LongInt').SetInt( LongWord ( - 10 ));
 CL.AddConstantN('S_SERDSH','LongInt').SetInt( LongWord ( - 11 ));
 CL.AddConstantN('S_SERDPT','LongInt').SetInt( LongWord ( - 12 ));
 CL.AddConstantN('S_SERDFQ','LongInt').SetInt( LongWord ( - 13 ));
 CL.AddConstantN('S_SERDDR','LongInt').SetInt( LongWord ( - 14 ));
 CL.AddConstantN('S_SERDSR','LongInt').SetInt( LongWord ( - 15 ));
 CL.AddConstantN('S_SERDST','LongInt').SetInt( LongWord ( - 16 ));
 CL.AddConstantN('NMPWAIT_WAIT_FOREVER','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('NMPWAIT_NOWAIT','LongInt').SetInt( 1);
 CL.AddConstantN('NMPWAIT_USE_DEFAULT_WAIT','LongInt').SetInt( 0);
 CL.AddConstantN('FS_CASE_IS_PRESERVED','').SetString( FILE_CASE_PRESERVED_NAMES);
 CL.AddConstantN('FS_CASE_SENSITIVE','').SetString( FILE_CASE_SENSITIVE_SEARCH);
 CL.AddConstantN('FS_UNICODE_STORED_ON_DISK','').SetString( FILE_UNICODE_ON_DISK);
 CL.AddConstantN('FS_PERSISTENT_ACLS','').SetString( FILE_PERSISTENT_ACLS);
 CL.AddConstantN('FS_VOL_IS_COMPRESSED','').SetString( FILE_VOLUME_IS_COMPRESSED);
 CL.AddConstantN('FS_FILE_COMPRESSION','').SetString( FILE_FILE_COMPRESSION);
 CL.AddConstantN('FILE_MAP_COPY','').SetString( SECTION_QUERY);
 CL.AddConstantN('FILE_MAP_WRITE','').SetString( SECTION_MAP_WRITE);
 CL.AddConstantN('FILE_MAP_READ','').SetString( SECTION_MAP_READ);
 CL.AddConstantN('FILE_MAP_ALL_ACCESS','').SetString( SECTION_ALL_ACCESS);
 CL.AddConstantN('OF_READ','LongInt').SetInt( 0);
 CL.AddConstantN('OF_WRITE','LongInt').SetInt( 1);
 CL.AddConstantN('OF_READWRITE','LongInt').SetInt( 2);
 CL.AddConstantN('OF_SHARE_COMPAT','LongInt').SetInt( 0);
 CL.AddConstantN('OF_SHARE_EXCLUSIVE','LongWord').SetUInt( $10);
 CL.AddConstantN('OF_SHARE_DENY_WRITE','LongWord').SetUInt( $20);
 CL.AddConstantN('OF_SHARE_DENY_READ','LongInt').SetInt( 48);
 CL.AddConstantN('OF_SHARE_DENY_NONE','LongWord').SetUInt( $40);
 CL.AddConstantN('OF_PARSE','LongWord').SetUInt( $100);
 CL.AddConstantN('OF_DELETE','LongWord').SetUInt( $200);
 CL.AddConstantN('OF_VERIFY','LongWord').SetUInt( $400);
 CL.AddConstantN('OF_CANCEL','LongWord').SetUInt( $800);
 CL.AddConstantN('OF_CREATE','LongWord').SetUInt( $1000);
 CL.AddConstantN('OF_PROMPT','LongWord').SetUInt( $2000);
 CL.AddConstantN('OF_EXIST','LongWord').SetUInt( $4000);
 CL.AddConstantN('OF_REOPEN','LongWord').SetUInt( $8000);
 CL.AddConstantN('OFS_MAXPATHNAME','LongInt').SetInt( 128);
  CL.AddTypeS('POFStruct', '^TOFStruct // will not work');
  CL.AddTypeS('TOFStruct', '_OFSTRUCT');
  CL.AddTypeS('OFSTRUCT', '_OFSTRUCT');
 CL.AddDelphiFunction('Function InterlockedIncrement( var Addend : Integer) : Integer');
 CL.AddDelphiFunction('Function InterlockedDecrement( var Addend : Integer) : Integer');
 CL.AddDelphiFunction('Function InterlockedExchange( var Target : Integer; Value : Integer) : Integer');
 CL.AddDelphiFunction('Function FreeResource( hResData : HGLOBAL) : BOOL');
 CL.AddDelphiFunction('Function LockResource( hResData : HGLOBAL) : Pointer');
 CL.AddDelphiFunction('Function UnlockResource( hResData : THandle) : BOOL');
 CL.AddConstantN('MAXINTATOM','LongWord').SetUInt( $C000);
 CL.AddConstantN('INVALID_ATOM','LongInt').SetInt( 0);
  CL.AddTypeS('MakeIntAtomA', 'PAnsiChar');
  CL.AddTypeS('MakeIntAtomW', 'PWideChar');
  CL.AddTypeS('MakeIntAtom', 'MakeIntAtomA');
 CL.AddDelphiFunction('Function FreeLibrary( hLibModule : HMODULE) : BOOL');
 CL.AddDelphiFunction('Procedure FreeLibraryAndExitThread( hLibModule : HMODULE; dwExitCode : DWORD)');
 CL.AddDelphiFunction('Function DisableThreadLibraryCalls( hLibModule : HMODULE) : BOOL');
 CL.AddDelphiFunction('Function GetProcAddress( hModule : HMODULE; lpProcName : LPCSTR) : FARPROC');
 CL.AddDelphiFunction('Function GetVersion : DWORD');
 CL.AddDelphiFunction('Function GlobalAlloc( uFlags : UINT; dwBytes : DWORD) : HGLOBAL');
 CL.AddDelphiFunction('Function GlobalReAlloc( hMem : HGLOBAL; dwBytes : DWORD; uFlags : UINT) : HGLOBAL');
 CL.AddDelphiFunction('Function GlobalSize( hMem : HGLOBAL) : DWORD');
 CL.AddDelphiFunction('Function GlobalFlags( hMem : HGLOBAL) : UINT');
 CL.AddDelphiFunction('Function GlobalLock( hMem : HGLOBAL) : Pointer');
 CL.AddDelphiFunction('Function GlobalHandle( Mem : Pointer) : HGLOBAL');
 CL.AddDelphiFunction('Function GlobalUnlock( hMem : HGLOBAL) : BOOL');
 CL.AddDelphiFunction('Function GlobalFree( hMem : HGLOBAL) : HGLOBAL');
 CL.AddDelphiFunction('Function GlobalCompact( dwMinFree : DWORD) : UINT');
 CL.AddDelphiFunction('Procedure GlobalFix( hMem : HGLOBAL)');
 CL.AddDelphiFunction('Procedure GlobalUnfix( hMem : HGLOBAL)');
 CL.AddDelphiFunction('Function GlobalWire( hMem : HGLOBAL) : Pointer');
 CL.AddDelphiFunction('Function GlobalUnWire( hMem : HGLOBAL) : BOOL');
 CL.AddDelphiFunction('Procedure GlobalMemoryStatus( var lpBuffer : TMemoryStatus)');
 CL.AddDelphiFunction('Function LocalAlloc( uFlags, uBytes : UINT) : HLOCAL');
 CL.AddDelphiFunction('Function LocalReAlloc( hMem : HLOCAL; uBytes, uFlags : UINT) : HLOCAL');
 CL.AddDelphiFunction('Function LocalLock( hMem : HLOCAL) : Pointer');
 CL.AddDelphiFunction('Function LocalUnlock( hMem : HLOCAL) : BOOL');
 CL.AddDelphiFunction('Function LocalSize( hMem : HLOCAL) : UINT');
 CL.AddDelphiFunction('Function LocalFlags( hMem : HLOCAL) : UINT');
 CL.AddDelphiFunction('Function LocalFree( hMem : HLOCAL) : HLOCAL');
 CL.AddDelphiFunction('Function LocalShrink( hMem : HLOCAL; cbNewSize : UINT) : UINT');
 CL.AddDelphiFunction('Function LocalCompact( uMinFree : UINT) : UINT');
 CL.AddDelphiFunction('Function FlushInstructionCache( hProcess : THandle; const lpBaseAddress : Pointer; dwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function VirtualAlloc( lpvAddress : Pointer; dwSize, flAllocationType, flProtect : DWORD) : Pointer');
 CL.AddDelphiFunction('Function VirtualFree( lpAddress : Pointer; dwSize, dwFreeType : DWORD) : BOOL');
 CL.AddDelphiFunction('Function VirtualProtect( lpAddress : Pointer; dwSize, flNewProtect : DWORD; lpflOldProtect : Pointer) : BOOL;');
 CL.AddDelphiFunction('Function VirtualProtect( lpAddress : Pointer; dwSize, flNewProtect : DWORD; var OldProtect : DWORD) : BOOL;');
 CL.AddDelphiFunction('Function VirtualQuery( lpAddress : Pointer; var lpBuffer : TMemoryBasicInformation; dwLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function VirtualAllocEx( hProcess : THandle; lpAddress : Pointer; dwSize, flAllocationType : DWORD; flProtect : DWORD) : Pointer');
 CL.AddDelphiFunction('Function VirtualFreeEx( hProcess : THandle; lpAddress : Pointer; dwSize, dwFreeType : DWORD) : Pointer');
 CL.AddDelphiFunction('Function VirtualProtectEx( hProcess : THandle; lpAddress : Pointer; dwSize, flNewProtect : DWORD; lpflOldProtect : Pointer) : BOOL;');
 CL.AddDelphiFunction('Function VirtualProtectEx( hProcess : THandle; lpAddress : Pointer; dwSize, flNewProtect : DWORD; var OldProtect : DWORD) : BOOL;');
 CL.AddDelphiFunction('Function VirtualQueryEx( hProcess : THandle; lpAddress : Pointer; var lpBuffer : TMemoryBasicInformation; dwLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function HeapCreate( flOptions, dwInitialSize, dwMaximumSize : DWORD) : THandle');
 CL.AddDelphiFunction('Function HeapDestroy( hHeap : THandle) : BOOL');
 CL.AddDelphiFunction('Function HeapAlloc( hHeap : THandle; dwFlags, dwBytes : DWORD) : Pointer');
 CL.AddDelphiFunction('Function HeapReAlloc( hHeap : THandle; dwFlags : DWORD; lpMem : Pointer; dwBytes : DWORD) : Pointer');
 CL.AddDelphiFunction('Function HeapFree( hHeap : THandle; dwFlags : DWORD; lpMem : Pointer) : BOOL');
 CL.AddDelphiFunction('Function HeapSize( hHeap : THandle; dwFlags : DWORD; lpMem : Pointer) : DWORD');
 CL.AddDelphiFunction('Function HeapValidate( hHeap : THandle; dwFlags : DWORD; lpMem : Pointer) : BOOL');
 CL.AddDelphiFunction('Function HeapCompact( hHeap : THandle; dwFlags : DWORD) : UINT');
 CL.AddDelphiFunction('Function GetProcessHeap : THandle');
 CL.AddDelphiFunction('Function GetProcessHeaps( NumberOfHeaps : DWORD; var ProcessHeaps : THandle) : DWORD');
  CL.AddTypeS('PProcessHeapEntry', '^TProcessHeapEntry // will not work');
  CL.AddTypeS('_PROCESS_HEAP_ENTRY', 'record lpData : Pointer; cbData : DWORD; '
   +'cbOverhead : Byte; iRegionIndex : Byte; wFlags : Word; end');
  CL.AddTypeS('TProcessHeapEntry', '_PROCESS_HEAP_ENTRY');
  CL.AddTypeS('PROCESS_HEAP_ENTRY', '_PROCESS_HEAP_ENTRY');
 CL.AddConstantN('PROCESS_HEAP_REGION','LongInt').SetInt( 1);
 CL.AddConstantN('PROCESS_HEAP_UNCOMMITTED_RANGE','LongInt').SetInt( 2);
 CL.AddConstantN('PROCESS_HEAP_ENTRY_BUSY','LongInt').SetInt( 4);
 CL.AddConstantN('PROCESS_HEAP_ENTRY_MOVEABLE','LongWord').SetUInt( $10);
 CL.AddConstantN('PROCESS_HEAP_ENTRY_DDESHARE','LongWord').SetUInt( $20);
 CL.AddDelphiFunction('Function HeapLock( hHeap : THandle) : BOOL');
 CL.AddDelphiFunction('Function HeapUnlock( hHeap : THandle) : BOOL');
 CL.AddDelphiFunction('Function HeapWalk( hHeap : THandle; var lpEntry : TProcessHeapEntry) : BOOL');
 CL.AddConstantN('HEAP_NO_SERIALIZE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('HEAP_GROWABLE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('HEAP_GENERATE_EXCEPTIONS','LongWord').SetUInt( $00000004);
 CL.AddConstantN('HEAP_ZERO_MEMORY','LongWord').SetUInt( $00000008);
 CL.AddConstantN('HEAP_REALLOC_IN_PLACE_ONLY','LongWord').SetUInt( $00000010);
 CL.AddConstantN('HEAP_TAIL_CHECKING_ENABLED','LongWord').SetUInt( $00000020);
 CL.AddConstantN('HEAP_FREE_CHECKING_ENABLED','LongWord').SetUInt( $00000040);
 CL.AddConstantN('HEAP_DISABLE_COALESCE_ON_FREE','LongWord').SetUInt( $00000080);
 CL.AddConstantN('HEAP_CREATE_ALIGN_16','LongWord').SetUInt( $00010000);
 CL.AddConstantN('HEAP_CREATE_ENABLE_TRACING','LongWord').SetUInt( $00020000);
 CL.AddConstantN('HEAP_CREATE_ENABLE_EXECUTE','LongWord').SetUInt( $00040000);
 CL.AddConstantN('HEAP_MAXIMUM_TAG','LongWord').SetUInt( $0FFF);
 CL.AddConstantN('HEAP_PSEUDO_TAG_FLAG','LongWord').SetUInt( $8000);
 CL.AddConstantN('HEAP_TAG_SHIFT','LongInt').SetInt( 16);
 CL.AddConstantN('SCS_32BIT_BINARY','LongInt').SetInt( 0);
 CL.AddConstantN('SCS_DOS_BINARY','LongInt').SetInt( 1);
 CL.AddConstantN('SCS_WOW_BINARY','LongInt').SetInt( 2);
 CL.AddConstantN('SCS_PIF_BINARY','LongInt').SetInt( 3);
 CL.AddConstantN('SCS_POSIX_BINARY','LongInt').SetInt( 4);
 CL.AddConstantN('SCS_OS216_BINARY','LongInt').SetInt( 5);
 CL.AddDelphiFunction('Function GetBinaryType( lpApplicationName : PChar; var lpBinaryType : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetBinaryTypeA( lpApplicationName : PAnsiChar; var lpBinaryType : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetBinaryTypeW( lpApplicationName : PWideChar; var lpBinaryType : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetShortPathName( lpszLongPath : PChar; lpszShortPath : PChar; cchBuffer : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetShortPathNameA( lpszLongPath : PAnsiChar; lpszShortPath : PAnsiChar; cchBuffer : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetShortPathNameW( lpszLongPath : PWideChar; lpszShortPath : PWideChar; cchBuffer : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetProcessAffinityMask( hProcess : THandle; var lpProcessAffinityMask, lpSystemAffinityMask : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetProcessAffinityMask( hProcess : THandle; dwProcessAffinityMask : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetProcessTimes( hProcess : THandle; var lpCreationTime, lpExitTime, lpKernelTime, lpUserTime : TFileTime) : BOOL');
 CL.AddDelphiFunction('Function GetProcessWorkingSetSize( hProcess : THandle; var lpMinimumWorkingSetSize, lpMaximumWorkingSetSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetProcessWorkingSetSize( hProcess : THandle; dwMinimumWorkingSetSize, dwMaximumWorkingSetSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function OpenProcess( dwDesiredAccess : DWORD; bInheritHandle : BOOL; dwProcessId : DWORD) : THandle');
 CL.AddDelphiFunction('Function GetCurrentProcess : THandle');
 CL.AddDelphiFunction('Function GetCurrentProcessId : DWORD');
 CL.AddDelphiFunction('Procedure ExitProcess( uExitCode : UINT)');
 CL.AddDelphiFunction('Function TerminateProcess( hProcess : THandle; uExitCode : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetExitCodeProcess( hProcess : THandle; var lpExitCode : DWORD) : BOOL');
 CL.AddDelphiFunction('Procedure FatalExit( ExitCode : Integer)');
 CL.AddDelphiFunction('Function GetEnvironmentStrings : PChar');
 CL.AddDelphiFunction('Function GetEnvironmentStringsA : PAnsiChar');
 CL.AddDelphiFunction('Function GetEnvironmentStringsW : PWideChar');
 CL.AddDelphiFunction('Function FreeEnvironmentStrings( EnvBlock : PChar) : BOOL');
 CL.AddDelphiFunction('Function FreeEnvironmentStringsA( EnvBlock : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function FreeEnvironmentStringsW( EnvBlock : PWideChar) : BOOL');
 CL.AddDelphiFunction('Procedure RaiseException( dwExceptionCode, dwExceptionFlags, nNumberOfArguments : DWORD; lpArguments : PDWORD)');
 CL.AddDelphiFunction('Function UnhandledExceptionFilter( const ExceptionInfo : TExceptionPointers) : Longint');
 CL.AddDelphiFunction('Function CreateFiber( dwStackSize : DWORD; lpStartAddress : TFNFiberStartRoutine; lpParameter : Pointer) : Pointer');
 CL.AddDelphiFunction('Function DeleteFiber( lpFiber : Pointer) : BOOL');
 CL.AddDelphiFunction('Function ConvertThreadToFiber( lpParameter : Pointer) : BOOL');
 CL.AddDelphiFunction('Function SwitchToFiber( lpFiber : Pointer) : BOOL');
 CL.AddDelphiFunction('Function SwitchToThread : BOOL');
  CL.AddTypeS('TFNTopLevelExceptionFilter', 'TFarProc');
 CL.AddDelphiFunction('Function SetUnhandledExceptionFilter( lpTopLevelExceptionFilter : TFNTopLevelExceptionFilter) : TFNTopLevelExceptionFilter');
 CL.AddDelphiFunction('Function CreateThread( lpThreadAttributes : Pointer; dwStackSize : DWORD; lpStartAddress : TFNThreadStartRoutine; lpParameter : Pointer; dwCreationFlags : DWORD; var lpThreadId : DWORD) : THandle');
 CL.AddDelphiFunction('Function CreateRemoteThread( hProcess : THandle; lpThreadAttributes : Pointer; dwStackSize : DWORD; lpStartAddress : TFNThreadStartRoutine; lpParameter : Pointer; dwCreationFlags : DWORD; var lpThreadId : DWORD) : THandle');
 CL.AddDelphiFunction('Function GetCurrentThread : THandle');
 CL.AddDelphiFunction('Function GetCurrentThreadId : DWORD');
 CL.AddDelphiFunction('Function SetThreadAffinityMask( hThread : THandle; dwThreadAffinityMask : DWORD) : DWORD');
 CL.AddDelphiFunction('Function SetThreadIdealProcessor( hThread : THandle; dwIdealProcessor : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetProcessPriorityBoost( hThread : THandle; DisablePriorityBoost : Bool) : BOOL');
 CL.AddDelphiFunction('Function GetProcessPriorityBoost( hThread : THandle; var DisablePriorityBoost : Bool) : BOOL');
 CL.AddDelphiFunction('Function SetThreadPriority( hThread : THandle; nPriority : Integer) : BOOL');
 CL.AddDelphiFunction('Function GetThreadPriority( hThread : THandle) : Integer');
 CL.AddDelphiFunction('Function SetThreadPriorityBoost( hThread : THandle; DisablePriorityBoost : Bool) : BOOL');
 CL.AddDelphiFunction('Function GetThreadPriorityBoost( hThread : THandle; var DisablePriorityBoost : Bool) : BOOL');
 CL.AddDelphiFunction('Function GetThreadTimes( hThread : THandle; var lpCreationTime, lpExitTime, lpKernelTime, lpUserTime : TFileTime) : BOOL');
 CL.AddDelphiFunction('Procedure ExitThread( dwExitCode : DWORD)');
 CL.AddDelphiFunction('Function TerminateThread( hThread : THandle; dwExitCode : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetExitCodeThread( hThread : THandle; var lpExitCode : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetThreadSelectorEntry( hThread : THandle; dwSelector : DWORD; var lpSelectorEntry : TLDTEntry) : BOOL');
 CL.AddDelphiFunction('Function GetLastError : DWORD');
 CL.AddDelphiFunction('Procedure SetLastError( dwErrCode : DWORD)');
 CL.AddDelphiFunction('Function GetOverlappedResult( hFile : THandle; const lpOverlapped : TOverlapped; var lpNumberOfBytesTransferred : DWORD; bWait : BOOL) : BOOL');
 CL.AddDelphiFunction('Function CreateIoCompletionPort( FileHandle, ExistingCompletionPort : THandle; CompletionKey, NumberOfConcurrentThreads : DWORD) : THandle');
 CL.AddDelphiFunction('Function GetQueuedCompletionStatus( CompletionPort : THandle; var lpNumberOfBytesTransferred, lpCompletionKey : DWORD; var lpOverlapped : POverlapped; dwMilliseconds : DWORD) : BOOL');
 CL.AddDelphiFunction('Function PostQueuedCompletionStatus( CompletionPort : THandle; dwNumberOfBytesTransferred : DWORD; dwCompletionKey : DWORD; lpOverlapped : POverlapped) : BOOL');
 CL.AddConstantN('SEM_FAILCRITICALERRORS','LongInt').SetInt( 1);
 CL.AddConstantN('SEM_NOGPFAULTERRORBOX','LongInt').SetInt( 2);
 CL.AddConstantN('SEM_NOALIGNMENTFAULTEXCEPT','LongInt').SetInt( 4);
 CL.AddConstantN('SEM_NOOPENFILEERRORBOX','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Function SetErrorMode( uMode : UINT) : UINT');
 CL.AddDelphiFunction('Function ReadProcessMemory( hProcess : THandle; const lpBaseAddress : Pointer; lpBuffer : Pointer; nSize : DWORD; var lpNumberOfBytesRead : DWORD) : BOOL');
 CL.AddDelphiFunction('Function WriteProcessMemory( hProcess : THandle; const lpBaseAddress : Pointer; lpBuffer : Pointer; nSize : DWORD; var lpNumberOfBytesWritten : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetThreadContext( hThread : THandle; var lpContext : TContext) : BOOL');
 CL.AddDelphiFunction('Function SetThreadContext( hThread : THandle; const lpContext : TContext) : BOOL');
 CL.AddDelphiFunction('Function SuspendThread( hThread : THandle) : DWORD');
 CL.AddDelphiFunction('Function ResumeThread( hThread : THandle) : DWORD');
  CL.AddTypeS('TFNAPCProc', 'TFarProc');
 CL.AddDelphiFunction('Function QueueUserAPC( pfnAPC : TFNAPCProc; hThread : THandle; dwData : DWORD) : BOOL');
 CL.AddDelphiFunction('Procedure DebugBreak');
 CL.AddDelphiFunction('Function WaitForDebugEvent( var lpDebugEvent : TDebugEvent; dwMilliseconds : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ContinueDebugEvent( dwProcessId, dwThreadId, dwContinueStatus : DWORD) : BOOL');
 CL.AddDelphiFunction('Function DebugActiveProcess( dwProcessId : DWORD) : BOOL');
 CL.AddDelphiFunction('Procedure InitializeCriticalSection( var lpCriticalSection : TRTLCriticalSection)');
 CL.AddDelphiFunction('Procedure EnterCriticalSection( var lpCriticalSection : TRTLCriticalSection)');
 CL.AddDelphiFunction('Procedure LeaveCriticalSection( var lpCriticalSection : TRTLCriticalSection)');
 CL.AddDelphiFunction('Function InitializeCriticalSectionAndSpinCount( var lpCriticalSection : TRTLCriticalSection; dwSpinCount : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetCriticalSectionSpinCount( var lpCriticalSection : TRTLCriticalSection; dwSpinCount : DWORD) : DWORD');
 CL.AddDelphiFunction('Function TryEnterCriticalSection( var lpCriticalSection : TRTLCriticalSection) : BOOL');
 CL.AddDelphiFunction('Procedure DeleteCriticalSection( var lpCriticalSection : TRTLCriticalSection)');
 CL.AddDelphiFunction('Function SetEvent( hEvent : THandle) : BOOL');
 CL.AddDelphiFunction('Function ResetEvent( hEvent : THandle) : BOOL');
 CL.AddDelphiFunction('Function PulseEvent( hEvent : THandle) : BOOL');
 CL.AddDelphiFunction('Function ReleaseSemaphore( hSemaphore : THandle; lReleaseCount : Longint; lpPreviousCount : Pointer) : BOOL');
 CL.AddDelphiFunction('Function ReleaseMutex( hMutex : THandle) : BOOL');
 CL.AddDelphiFunction('Function WaitForSingleObject( hHandle : THandle; dwMilliseconds : DWORD) : DWORD');
  CL.AddTypeS('PWOHandleArray', '^TWOHandleArray // will not work');
 CL.AddDelphiFunction('Function WaitForMultipleObjects( nCount : DWORD; lpHandles : PWOHandleArray; bWaitAll : BOOL; dwMilliseconds : DWORD) : DWORD');
 CL.AddDelphiFunction('Procedure Sleep( dwMilliseconds : DWORD)');
 CL.AddDelphiFunction('Function LoadResource( hModule : HINST; hResInfo : HRSRC) : HGLOBAL');
 CL.AddDelphiFunction('Function SizeofResource( hModule : HINST; hResInfo : HRSRC) : DWORD');
 CL.AddDelphiFunction('Function GlobalDeleteAtom( nAtom : ATOM) : ATOM');
 CL.AddDelphiFunction('Function InitAtomTable( nSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function DeleteAtom( nAtom : ATOM) : ATOM');
 CL.AddDelphiFunction('Function SetHandleCount( uNumber : UINT) : UINT');
 CL.AddDelphiFunction('Function GetLogicalDrives : DWORD');
 CL.AddDelphiFunction('Function LockFile( hFile : THandle; dwFileOffsetLow, dwFileOffsetHigh : DWORD; nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh : DWORD) : BOOL');
 CL.AddDelphiFunction('Function UnlockFile( hFile : THandle; dwFileOffsetLow, dwFileOffsetHigh : DWORD; nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh : DWORD) : BOOL');
 CL.AddDelphiFunction('Function LockFileEx( hFile : THandle; dwFlags, dwReserved : DWORD; nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh : DWORD; const lpOverlapped : TOverlapped) : BOOL');
 CL.AddConstantN('LOCKFILE_FAIL_IMMEDIATELY','LongInt').SetInt( 1);
 CL.AddConstantN('LOCKFILE_EXCLUSIVE_LOCK','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Function UnlockFileEx( hFile : THandle; dwReserved, nNumberOfBytesToUnlockLow : DWORD; nNumberOfBytesToUnlockHigh : DWORD; const lpOverlapped : TOverlapped) : BOOL');
  CL.AddTypeS('PByHandleFileInformation', '^TByHandleFileInformation // will no'
   +'t work');
  CL.AddTypeS('_BY_HANDLE_FILE_INFORMATION', 'record dwFileAttributes : DWORD; '
   +'ftCreationTime : TFileTime; ftLastAccessTime : TFileTime; ftLastWriteTime '
   +': TFileTime; dwVolumeSerialNumber : DWORD; nFileSizeHigh : DWORD; nFileSiz'
   +'eLow : DWORD; nNumberOfLinks : DWORD; nFileIndexHigh : DWORD; nFileIndexLo'
   +'w : DWORD; end');
  CL.AddTypeS('TByHandleFileInformation', '_BY_HANDLE_FILE_INFORMATION');
  CL.AddTypeS('BY_HANDLE_FILE_INFORMATION', '_BY_HANDLE_FILE_INFORMATION');
 CL.AddDelphiFunction('Function GetFileInformationByHandle( hFile : THandle; var lpFileInformation : TByHandleFileInformation) : BOOL');
 CL.AddDelphiFunction('Function GetFileType( hFile : THandle) : DWORD');
 CL.AddDelphiFunction('Function GetFileSize( hFile : THandle; lpFileSizeHigh : Pointer) : DWORD');
 CL.AddDelphiFunction('Function GetStdHandle( nStdHandle : DWORD) : THandle');
 CL.AddDelphiFunction('Function SetStdHandle( nStdHandle : DWORD; hHandle : THandle) : BOOL');
 CL.AddDelphiFunction('Function WriteFile( hFile : THandle; const Buffer, nNumberOfBytesToWrite : DWORD; var lpNumberOfBytesWritten : DWORD; lpOverlapped : POverlapped) : BOOL');
 CL.AddDelphiFunction('Function ReadFile( hFile : THandle; var Buffer, nNumberOfBytesToRead : DWORD; var lpNumberOfBytesRead : DWORD; lpOverlapped : POverlapped) : BOOL');
 CL.AddDelphiFunction('Function FlushFileBuffers( hFile : THandle) : BOOL');
 CL.AddDelphiFunction('Function DeviceIoControl( hDevice : THandle; dwIoControlCode : DWORD; lpInBuffer : Pointer; nInBufferSize : DWORD; lpOutBuffer : Pointer; nOutBufferSize : DWORD; var lpBytesReturned : DWORD; lpOverlapped : POverlapped) : BOOL');
 CL.AddDelphiFunction('Function SetEndOfFile( hFile : THandle) : BOOL');
 CL.AddDelphiFunction('Function SetFilePointer( hFile : THandle; lDistanceToMove : Longint; lpDistanceToMoveHigh : Pointer; dwMoveMethod : DWORD) : DWORD');
 CL.AddDelphiFunction('Function FindClose( hFindFile : THandle) : BOOL');
 CL.AddDelphiFunction('Function GetFileTime( hFile : THandle; lpCreationTime, lpLastAccessTime, lpLastWriteTime : PFileTime) : BOOL');
 CL.AddDelphiFunction('Function SetFileTime( hFile : THandle; lpCreationTime, lpLastAccessTime, lpLastWriteTime : PFileTime) : BOOL');
 CL.AddDelphiFunction('Function CloseHandle( hObject : THandle) : BOOL');
 CL.AddDelphiFunction('Function DuplicateHandle( hSourceProcessHandle, hSourceHandle, hTargetProcessHandle : THandle; lpTargetHandle : PHandle; dwDesiredAccess : DWORD; bInheritHandle : BOOL; dwOptions : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetHandleInformation( hObject : THandle; var lpdwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetHandleInformation( hObject : THandle; dwMask : DWORD; dwFlags : DWORD) : BOOL');
 CL.AddConstantN('HANDLE_FLAG_INHERIT','LongInt').SetInt( 1);
 CL.AddConstantN('HANDLE_FLAG_PROTECT_FROM_CLOSE','LongInt').SetInt( 2);
 CL.AddConstantN('HINSTANCE_ERROR','LongWord').SetUInt( $20);
 CL.AddDelphiFunction('Function LoadModule( lpModuleName : LPCSTR; lpParameterBlock : Pointer) : DWORD');
 CL.AddDelphiFunction('Function WinExec( lpCmdLine : LPCSTR; uCmdShow : UINT) : UINT');
 CL.AddDelphiFunction('Function ClearCommBreak( hFile : THandle) : BOOL');
 CL.AddDelphiFunction('Function ClearCommError( hFile : THandle; var lpErrors : DWORD; lpStat : PComStat) : BOOL');
 CL.AddDelphiFunction('Function SetupComm( hFile : THandle; dwInQueue, dwOutQueue : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EscapeCommFunction( hFile : THandle; dwFunc : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetCommConfig( hCommDev : THandle; var lpCC : TCommConfig; var lpdwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetCommMask( hFile : THandle; var lpEvtMask : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetCommProperties( hFile : THandle; var lpCommProp : TCommProp) : BOOL');
 CL.AddDelphiFunction('Function GetCommModemStatus( hFile : THandle; var lpModemStat : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetCommState( hFile : THandle; var lpDCB : TDCB) : BOOL');
 CL.AddDelphiFunction('Function GetCommTimeouts( hFile : THandle; var lpCommTimeouts : TCommTimeouts) : BOOL');
 CL.AddDelphiFunction('Function PurgeComm( hFile : THandle; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetCommBreak( hFile : THandle) : BOOL');
 CL.AddDelphiFunction('Function SetCommConfig( hCommDev : THandle; const lpCC : TCommConfig; dwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetCommMask( hFile : THandle; dwEvtMask : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetCommState( hFile : THandle; const lpDCB : TDCB) : BOOL');
 CL.AddDelphiFunction('Function SetCommTimeouts( hFile : THandle; const lpCommTimeouts : TCommTimeouts) : BOOL');
 CL.AddDelphiFunction('Function TransmitCommChar( hFile : THandle; cChar : CHAR) : BOOL');
 CL.AddDelphiFunction('Function WaitCommEvent( hFile : THandle; var lpEvtMask : DWORD; lpOverlapped : POverlapped) : BOOL');
 CL.AddDelphiFunction('Function SetTapePosition( hDevice : THandle; dwPositionMethod, dwPartition : DWORD; dwOffsetLow, dwOffsetHigh : DWORD; bImmediate : BOOL) : DWORD');
 CL.AddDelphiFunction('Function GetTapePosition( hDevice : THandle; dwPositionType : DWORD; var lpdwPartition, lpdwOffsetLow : DWORD; lpdwOffsetHigh : Pointer) : DWORD');
 CL.AddDelphiFunction('Function PrepareTape( hDevice : THandle; dwOperation : DWORD; bImmediate : BOOL) : DWORD');
 CL.AddDelphiFunction('Function EraseTape( hDevice : THandle; dwEraseType : DWORD; bImmediate : BOOL) : DWORD');
 CL.AddDelphiFunction('Function CreateTapePartition( hDevice : THandle; dwPartitionMethod, dwCount, dwSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WriteTapemark( hDevice : THandle; dwTapemarkType, dwTapemarkCount : DWORD; bImmediate : BOOL) : DWORD');
 CL.AddDelphiFunction('Function GetTapeStatus( hDevice : THandle) : DWORD');
 CL.AddDelphiFunction('Function GetTapeParameters( hDevice : THandle; dwOperation : DWORD; var lpdwSize : DWORD; lpTapeInformation : Pointer) : DWORD');
 CL.AddConstantN('GET_TAPE_MEDIA_INFORMATION','LongInt').SetInt( 0);
 CL.AddConstantN('GET_TAPE_DRIVE_INFORMATION','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function SetTapeParameters( hDevice : THandle; dwOperation : DWORD; lpTapeInformation : Pointer) : DWORD');
 CL.AddConstantN('SET_TAPE_MEDIA_INFORMATION','LongInt').SetInt( 0);
 CL.AddConstantN('SET_TAPE_DRIVE_INFORMATION','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function Beep( dwFreq, dwDuration : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MulDiv( nNumber, nNumerator, nDenominator : Integer) : Integer');
 CL.AddDelphiFunction('Procedure GetSystemTime( var lpSystemTime : TSystemTime)');
 CL.AddDelphiFunction('Procedure GetSystemTimeAsFileTime( var lpSystemTimeAsFileTime : TFileTime)');
 CL.AddDelphiFunction('Function SetSystemTime( const lpSystemTime : TSystemTime) : BOOL');
 CL.AddDelphiFunction('Procedure GetLocalTime( var lpSystemTime : TSystemTime)');
 CL.AddDelphiFunction('Function SetLocalTime( const lpSystemTime : TSystemTime) : BOOL');
 CL.AddDelphiFunction('Procedure GetSystemInfo( var lpSystemInfo : TSystemInfo)');
 CL.AddDelphiFunction('Function IsProcessorFeaturePresent( ProcessorFeature : DWORD) : BOOL');
  CL.AddTypeS('PTimeZoneInformation', '^TTimeZoneInformation // will not work');
  CL.AddTypeS('TTimeZoneInformation', '_TIME_ZONE_INFORMATION');
  CL.AddTypeS('TIME_ZONE_INFORMATION', '_TIME_ZONE_INFORMATION');
 CL.AddDelphiFunction('Function SystemTimeToTzSpecificLocalTime( lpTimeZoneInformation : PTimeZoneInformation; var lpUniversalTime, lpLocalTime : TSystemTime) : BOOL');
 CL.AddDelphiFunction('Function GetTimeZoneInformation( var lpTimeZoneInformation : TTimeZoneInformation) : DWORD');
 CL.AddDelphiFunction('Function SetTimeZoneInformation( const lpTimeZoneInformation : TTimeZoneInformation) : BOOL');
 CL.AddDelphiFunction('Function SystemTimeToFileTime( const lpSystemTime : TSystemTime; var lpFileTime : TFileTime) : BOOL');
 CL.AddDelphiFunction('Function FileTimeToLocalFileTime( const lpFileTime : TFileTime; var lpLocalFileTime : TFileTime) : BOOL');
 CL.AddDelphiFunction('Function LocalFileTimeToFileTime( const lpLocalFileTime : TFileTime; var lpFileTime : TFileTime) : BOOL');
 CL.AddDelphiFunction('Function FileTimeToSystemTime( const lpFileTime : TFileTime; var lpSystemTime : TSystemTime) : BOOL');
 CL.AddDelphiFunction('Function CompareFileTime( const lpFileTime1, lpFileTime2 : TFileTime) : Longint');
 CL.AddDelphiFunction('Function FileTimeToDosDateTime( const lpFileTime : TFileTime; var lpFatDate, lpFatTime : Word) : BOOL');
 CL.AddDelphiFunction('Function DosDateTimeToFileTime( wFatDate, wFatTime : Word; var lpFileTime : TFileTime) : BOOL');
 CL.AddDelphiFunction('Function GetTickCount : DWORD');
 CL.AddDelphiFunction('Function SetSystemTimeAdjustment( dwTimeAdjustment : DWORD; bTimeAdjustmentDisabled : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetSystemTimeAdjustment( var lpTimeAdjustment, lpTimeIncrement : DWORD; var lpTimeAdjustmentDisabled : BOOL) : BOOL');
 CL.AddDelphiFunction('Function FormatMessage( dwFlags : DWORD; lpSource : Pointer; dwMessageId : DWORD; dwLanguageId : DWORD; lpBuffer : PChar; nSize : DWORD; Arguments : Pointer) : DWORD');
 CL.AddDelphiFunction('Function FormatMessageA( dwFlags : DWORD; lpSource : Pointer; dwMessageId : DWORD; dwLanguageId : DWORD; lpBuffer : PAnsiChar; nSize : DWORD; Arguments : Pointer) : DWORD');
 CL.AddDelphiFunction('Function FormatMessageW( dwFlags : DWORD; lpSource : Pointer; dwMessageId : DWORD; dwLanguageId : DWORD; lpBuffer : PWideChar; nSize : DWORD; Arguments : Pointer) : DWORD');
 CL.AddConstantN('FORMAT_MESSAGE_ALLOCATE_BUFFER','LongWord').SetUInt( $100);
 CL.AddConstantN('FORMAT_MESSAGE_IGNORE_INSERTS','LongWord').SetUInt( $200);
 CL.AddConstantN('FORMAT_MESSAGE_FROM_STRING','LongWord').SetUInt( $400);
 CL.AddConstantN('FORMAT_MESSAGE_FROM_HMODULE','LongWord').SetUInt( $800);
 CL.AddConstantN('FORMAT_MESSAGE_FROM_SYSTEM','LongWord').SetUInt( $1000);
 CL.AddConstantN('FORMAT_MESSAGE_ARGUMENT_ARRAY','LongWord').SetUInt( $2000);
 CL.AddConstantN('FORMAT_MESSAGE_MAX_WIDTH_MASK','LongInt').SetInt( 255);
 CL.AddDelphiFunction('Function CreatePipe( var hReadPipe, hWritePipe : THandle; lpPipeAttributes : PSecurityAttributes; nSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ConnectNamedPipe( hNamedPipe : THandle; lpOverlapped : POverlapped) : BOOL');
 CL.AddDelphiFunction('Function DisconnectNamedPipe( hNamedPipe : THandle) : BOOL');
 CL.AddDelphiFunction('Function SetNamedPipeHandleState( hNamedPipe : THandle; var lpMode : DWORD; lpMaxCollectionCount, lpCollectDataTimeout : Pointer) : BOOL');
 CL.AddDelphiFunction('Function GetNamedPipeInfo( hNamedPipe : THandle; var lpFlags : DWORD; lpOutBufferSize, lpInBufferSize, lpMaxInstances : Pointer) : BOOL');
 CL.AddDelphiFunction('Function PeekNamedPipe( hNamedPipe : THandle; lpBuffer : Pointer; nBufferSize : DWORD; lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage : Pointer) : BOOL');
 CL.AddDelphiFunction('Function TransactNamedPipe( hNamedPipe : THandle; lpInBuffer : Pointer; nInBufferSize : DWORD; lpOutBuffer : Pointer; nOutBufferSize : DWORD; var lpBytesRead : DWORD; lpOverlapped : POverlapped) : BOOL');
 CL.AddDelphiFunction('Function CreateMailslot( lpName : PChar; nMaxMessageSize : DWORD; lReadTimeout : DWORD; lpSecurityAttributes : PSecurityAttributes) : THandle');
 CL.AddDelphiFunction('Function CreateMailslotA( lpName : PAnsiChar; nMaxMessageSize : DWORD; lReadTimeout : DWORD; lpSecurityAttributes : PSecurityAttributes) : THandle');
 CL.AddDelphiFunction('Function CreateMailslotW( lpName : PWideChar; nMaxMessageSize : DWORD; lReadTimeout : DWORD; lpSecurityAttributes : PSecurityAttributes) : THandle');
 CL.AddDelphiFunction('Function GetMailslotInfo( hMailslot : THandle; lpMaxMessageSize : Pointer; var lpNextSize : DWORD; lpMessageCount, lpReadTimeout : Pointer) : BOOL');
 CL.AddDelphiFunction('Function SetMailslotInfo( hMailslot : THandle; lReadTimeout : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MapViewOfFile( hFileMappingObject : THandle; dwDesiredAccess : DWORD; dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap : DWORD) : Pointer');
 CL.AddDelphiFunction('Function FlushViewOfFile( const lpBaseAddress : Pointer; dwNumberOfBytesToFlush : DWORD) : BOOL');
 CL.AddDelphiFunction('Function UnmapViewOfFile( lpBaseAddress : Pointer) : BOOL');
 CL.AddDelphiFunction('Function EncryptFile( lpFilename : PChar) : BOOL');
 CL.AddDelphiFunction('Function EncryptFileA( lpFilename : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function EncryptFileW( lpFilename : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function DecryptFile( lpFilename : PChar; dwReserved : DWORD) : BOOL');
 CL.AddDelphiFunction('Function DecryptFileA( lpFilename : PAnsiChar; dwReserved : DWORD) : BOOL');
 CL.AddDelphiFunction('Function DecryptFileW( lpFilename : PWideChar; dwReserved : DWORD) : BOOL');
 CL.AddConstantN('EFS_USE_RECOVERY_KEYS','LongWord').SetUInt( $1);
 CL.AddConstantN('CREATE_FOR_IMPORT','LongInt').SetInt( 1);
 CL.AddConstantN('CREATE_FOR_DIR','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Function OpenRaw( lpFilename : PChar; ulFlags : ULONG; pvContext : Pointer) : DWORD');
 CL.AddDelphiFunction('Function OpenRawA( lpFilename : PAnsiChar; ulFlags : ULONG; pvContext : Pointer) : DWORD');
 CL.AddDelphiFunction('Function OpenRawW( lpFilename : PWideChar; ulFlags : ULONG; pvContext : Pointer) : DWORD');
 CL.AddDelphiFunction('Function ReadRaw( pfExportCallback : TFNExportFunc; pvCallbackContext, pvContext : Pointer) : DWORD');
 CL.AddDelphiFunction('Function WriteRaw( pfExportCallback : TFNImportFunc; pvCallbackContext, pvContext : Pointer) : DWORD');
 CL.AddDelphiFunction('Procedure CloseRaw( pvContext : Pointer)');
  CL.AddTypeS('PRecoveryAgentInformationA', '^TRecoveryAgentInformationA // wil'
   +'l not work');
  CL.AddTypeS('PRecoveryAgentInformationW', '^TRecoveryAgentInformationW // wil'
   +'l not work');
  CL.AddTypeS('PRecoveryAgentInformation', 'PRecoveryAgentInformationA');
  CL.AddTypeS('_RECOVERY_AGENT_INFORMATION', '_RECOVERY_AGENT_INFORMATIONA');
  CL.AddTypeS('TRecoveryAgentInformationA', '_RECOVERY_AGENT_INFORMATIONA');
  CL.AddTypeS('TRecoveryAgentInformationW', '_RECOVERY_AGENT_INFORMATIONW');
  CL.AddTypeS('TRecoveryAgentInformation', 'TRecoveryAgentInformationA');
  CL.AddTypeS('RECOVERY_AGENT_INFORMATIONA', '_RECOVERY_AGENT_INFORMATIONA');
  CL.AddTypeS('RECOVERY_AGENT_INFORMATIONW', '_RECOVERY_AGENT_INFORMATIONW');
  CL.AddTypeS('RECOVERY_AGENT_INFORMATION', 'RECOVERY_AGENT_INFORMATIONA');
 CL.AddDelphiFunction('Function QueryRecoveryAgents( p1 : PChar; var p2 : Pointer; var p3 : TRecoveryAgentInformation) : DWORD');
 CL.AddDelphiFunction('Function QueryRecoveryAgentsA( p1 : PAnsiChar; var p2 : Pointer; var p3 : TRecoveryAgentInformationA) : DWORD');
 CL.AddDelphiFunction('Function QueryRecoveryAgentsW( p1 : PWideChar; var p2 : Pointer; var p3 : TRecoveryAgentInformationW) : DWORD');
 CL.AddDelphiFunction('Function lstrcmp( lpString1, lpString2 : PChar) : Integer');
 CL.AddDelphiFunction('Function lstrcmpA( lpString1, lpString2 : PAnsiChar) : Integer');
 CL.AddDelphiFunction('Function lstrcmpW( lpString1, lpString2 : PWideChar) : Integer');
 CL.AddDelphiFunction('Function lstrcmpi( lpString1, lpString2 : PChar) : Integer');
 CL.AddDelphiFunction('Function lstrcmpiA( lpString1, lpString2 : PAnsiChar) : Integer');
 CL.AddDelphiFunction('Function lstrcmpiW( lpString1, lpString2 : PWideChar) : Integer');
 CL.AddDelphiFunction('Function lstrcpyn( lpString1, lpString2 : PChar; iMaxLength : Integer) : PChar');
 CL.AddDelphiFunction('Function lstrcpynA( lpString1, lpString2 : PAnsiChar; iMaxLength : Integer) : PAnsiChar');
 CL.AddDelphiFunction('Function lstrcpynW( lpString1, lpString2 : PWideChar; iMaxLength : Integer) : PWideChar');
 CL.AddDelphiFunction('Function lstrcpy( lpString1, lpString2 : PChar) : PChar');
 CL.AddDelphiFunction('Function lstrcpyA( lpString1, lpString2 : PAnsiChar) : PAnsiChar');
 CL.AddDelphiFunction('Function lstrcpyW( lpString1, lpString2 : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function lstrcat( lpString1, lpString2 : PChar) : PChar');
 CL.AddDelphiFunction('Function lstrcatA( lpString1, lpString2 : PAnsiChar) : PAnsiChar');
 CL.AddDelphiFunction('Function lstrcatW( lpString1, lpString2 : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function lstrlen( lpString : PChar) : Integer');
 CL.AddDelphiFunction('Function lstrlenA( lpString : PAnsiChar) : Integer');
 CL.AddDelphiFunction('Function lstrlenW( lpString : PWideChar) : Integer');
 CL.AddDelphiFunction('Function OpenFile( const lpFileName : LPCSTR; var lpReOpenBuff : TOFStruct; uStyle : UINT) : HFILE');
 CL.AddDelphiFunction('Function _lopen( const lpPathName : LPCSTR; iReadWrite : Integer) : HFILE');
 CL.AddDelphiFunction('Function _lcreat( const lpPathName : LPCSTR; iAttribute : Integer) : HFILE');
 CL.AddDelphiFunction('Function _lread( hFile : HFILE; lpBuffer : Pointer; uBytes : UINT) : UINT');
 CL.AddDelphiFunction('Function _lwrite( hFile : HFILE; const lpBuffer : LPCSTR; uBytes : UINT) : UINT');
 CL.AddDelphiFunction('Function _hread( hFile : HFILE; lpBuffer : Pointer; lBytes : Longint) : Longint');
 CL.AddDelphiFunction('Function _hwrite( hFile : HFILE; lpBuffer : LPCSTR; lBytes : Longint) : Longint');
 CL.AddDelphiFunction('Function _lclose( hFile : HFILE) : HFILE');
 CL.AddDelphiFunction('Function _llseek( hFile : HFILE; lOffset : Longint; iOrigin : Integer) : Longint');
 CL.AddDelphiFunction('Function IsTextUnicode( lpBuffer : Pointer; cb : Integer; lpi : PINT) : BOOL');
 CL.AddDelphiFunction('Function TlsAlloc : DWORD');
 CL.AddConstantN('TLS_OUT_OF_INDEXES','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddDelphiFunction('Function TlsGetValue( dwTlsIndex : DWORD) : Pointer');
 CL.AddDelphiFunction('Function TlsSetValue( dwTlsIndex : DWORD; lpTlsValue : Pointer) : BOOL');
 CL.AddDelphiFunction('Function TlsFree( dwTlsIndex : DWORD) : BOOL');
  CL.AddTypeS('TPROverlappedCompletionRoutine', 'TFarProc');
 CL.AddDelphiFunction('Function SleepEx( dwMilliseconds : DWORD; bAlertable : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WaitForSingleObjectEx( hHandle : THandle; dwMilliseconds : DWORD; bAlertable : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WaitForMultipleObjectsEx( nCount : DWORD; lpHandles : PWOHandleArray; bWaitAll : BOOL; dwMilliseconds : DWORD; bAlertable : BOOL) : DWORD');
 CL.AddDelphiFunction('Function SignalObjectAndWait( hObjectToSignal : THandle; hObjectToWaitOn : THandle; dwMilliseconds : DWORD; bAlertable : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ReadFileEx( hFile : THandle; lpBuffer : Pointer; nNumberOfBytesToRead : DWORD; lpOverlapped : POverlapped; lpCompletionRoutine : TPROverlappedCompletionRoutine) : BOOL');
 CL.AddDelphiFunction('Function WriteFileEx( hFile : THandle; lpBuffer : Pointer; nNumberOfBytesToWrite : DWORD; const lpOverlapped : TOverlapped; lpCompletionRoutine : FARPROC) : BOOL');
 CL.AddDelphiFunction('Function BackupRead( hFile : THandle; lpBuffer : PByte; nNumberOfBytesToRead : DWORD; var lpNumberOfBytesRead : DWORD; bAbort : BOOL; bProcessSecurity : BOOL; var lpContext : Pointer) : BOOL');
 CL.AddDelphiFunction('Function BackupSeek( hFile : THandle; dwLowBytesToSeek, dwHighBytesToSeek : DWORD; var lpdwLowByteSeeked, lpdwHighByteSeeked : DWORD; lpContext : Pointer) : BOOL');
 CL.AddDelphiFunction('Function BackupWrite( hFile : THandle; lpBuffer : PByte; nNumberOfBytesToWrite : DWORD; var lpNumberOfBytesWritten : DWORD; bAbort, bProcessSecurity : BOOL; var lpContext : Pointer) : BOOL');
  CL.AddTypeS('PWIN32StreamID', '^TWIN32StreamID // will not work');
  CL.AddTypeS('TWIN32StreamID', '_WIN32_STREAM_ID');
  CL.AddTypeS('WIN32_STREAM_ID', '_WIN32_STREAM_ID');
 CL.AddConstantN('BACKUP_INVALID','LongInt').SetInt( 0);
 CL.AddConstantN('BACKUP_DATA','LongInt').SetInt( 1);
 CL.AddConstantN('BACKUP_EA_DATA','LongInt').SetInt( 2);
 CL.AddConstantN('BACKUP_SECURITY_DATA','LongInt').SetInt( 3);
 CL.AddConstantN('BACKUP_ALTERNATE_DATA','LongInt').SetInt( 4);
 CL.AddConstantN('BACKUP_LINK','LongInt').SetInt( 5);
 CL.AddConstantN('BACKUP_PROPERTY_DATA','LongInt').SetInt( 6);
 CL.AddConstantN('STREAM_NORMAL_ATTRIBUTE','LongInt').SetInt( 0);
 CL.AddConstantN('STREAM_MODIFIED_WHEN_READ','LongInt').SetInt( 1);
 CL.AddConstantN('STREAM_CONTAINS_SECURITY','LongInt').SetInt( 2);
 CL.AddConstantN('STREAM_CONTAINS_PROPERTIES','LongInt').SetInt( 4);
 CL.AddConstantN('STARTF_USESHOWWINDOW','LongInt').SetInt( 1);
 CL.AddConstantN('STARTF_USESIZE','LongInt').SetInt( 2);
 CL.AddConstantN('STARTF_USEPOSITION','LongInt').SetInt( 4);
 CL.AddConstantN('STARTF_USECOUNTCHARS','LongInt').SetInt( 8);
 CL.AddConstantN('STARTF_USEFILLATTRIBUTE','LongWord').SetUInt( $10);
 CL.AddConstantN('STARTF_RUNFULLSCREEN','LongWord').SetUInt( $20);
 CL.AddConstantN('STARTF_FORCEONFEEDBACK','LongWord').SetUInt( $40);
 CL.AddConstantN('STARTF_FORCEOFFFEEDBACK','LongWord').SetUInt( $80);
 CL.AddConstantN('STARTF_USESTDHANDLES','LongWord').SetUInt( $100);
 CL.AddConstantN('STARTF_USEHOTKEY','LongWord').SetUInt( $200);
  CL.AddTypeS('PStartupInfoA', '^TStartupInfoA // will not work');
  CL.AddTypeS('PStartupInfoW', '^TStartupInfoW // will not work');
  CL.AddTypeS('PStartupInfo', 'PStartupInfoA');
  CL.AddTypeS('_STARTUPINFOA', 'record cb : DWORD; lpReserved : PAnsiChar; lpDe'
   +'sktop : PAnsiChar; lpTitle : PAnsiChar; dwX : DWORD; dwY : DWORD; dwXSize '
   +': DWORD; dwYSize : DWORD; dwXCountChars : DWORD; dwYCountChars : DWORD; dw'
   +'FillAttribute : DWORD; dwFlags : DWORD; wShowWindow : Word; cbReserved2 : '
   +'Word; lpReserved2 : PByte; hStdInput : THandle; hStdOutput : THandle; hStd'
   +'Error : THandle; end');
  CL.AddTypeS('_STARTUPINFOW', 'record cb : DWORD; lpReserved : PWideChar; lpDe'
   +'sktop : PWideChar; lpTitle : PWideChar; dwX : DWORD; dwY : DWORD; dwXSize '
   +': DWORD; dwYSize : DWORD; dwXCountChars : DWORD; dwYCountChars : DWORD; dw'
   +'FillAttribute : DWORD; dwFlags : DWORD; wShowWindow : Word; cbReserved2 : '
   +'Word; lpReserved2 : PByte; hStdInput : THandle; hStdOutput : THandle; hStd'
   +'Error : THandle; end');
  CL.AddTypeS('_STARTUPINFO', '_STARTUPINFOA');
  CL.AddTypeS('TStartupInfoA', '_STARTUPINFOA');
  CL.AddTypeS('TStartupInfoW', '_STARTUPINFOW');
  CL.AddTypeS('TStartupInfo', 'TStartupInfoA');
  CL.AddTypeS('STARTUPINFOA', '_STARTUPINFOA');
  CL.AddTypeS('STARTUPINFOW', '_STARTUPINFOW');
  CL.AddTypeS('STARTUPINFO', 'STARTUPINFOA');
 CL.AddConstantN('SHUTDOWN_NORETRY','LongInt').SetInt( 1);
  CL.AddTypeS('PWin32FindDataA', '^TWin32FindDataA // will not work');
  CL.AddTypeS('PWin32FindDataW', '^TWin32FindDataW // will not work');
  CL.AddTypeS('PWin32FindData', 'PWin32FindDataA');
  CL.AddTypeS('_WIN32_FIND_DATA', '_WIN32_FIND_DATAA');
  CL.AddTypeS('TWin32FindDataA', '_WIN32_FIND_DATAA');
  CL.AddTypeS('TWin32FindDataW', '_WIN32_FIND_DATAW');
  CL.AddTypeS('TWin32FindData', 'TWin32FindDataA');
  CL.AddTypeS('WIN32_FIND_DATAA', '_WIN32_FIND_DATAA');
  CL.AddTypeS('WIN32_FIND_DATAW', '_WIN32_FIND_DATAW');
  CL.AddTypeS('WIN32_FIND_DATA', 'WIN32_FIND_DATAA');
  CL.AddTypeS('PWin32FileAttributeData', '^TWin32FileAttributeData // will not '
   +'work');
  CL.AddTypeS('_WIN32_FILE_ATTRIBUTE_DATA', 'record dwFileAttributes : DWORD; f'
   +'tCreationTime : TFileTime; ftLastAccessTime : TFileTime; ftLastWriteTime :'
   +' TFileTime; nFileSizeHigh : DWORD; nFileSizeLow : DWORD; end');
  CL.AddTypeS('TWin32FileAttributeData', '_WIN32_FILE_ATTRIBUTE_DATA');
  CL.AddTypeS('WIN32_FILE_ATTRIBUTE_DATA', '_WIN32_FILE_ATTRIBUTE_DATA');
 CL.AddDelphiFunction('Function CreateMutex( lpMutexAttributes : PSecurityAttributes; bInitialOwner : BOOL; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function CreateMutexA( lpMutexAttributes : PSecurityAttributes; bInitialOwner : BOOL; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function CreateMutexW( lpMutexAttributes : PSecurityAttributes; bInitialOwner : BOOL; lpName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function OpenMutex( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function OpenMutexA( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function OpenMutexW( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function CreateEvent( lpEventAttributes : PSecurityAttributes; bManualReset, bInitialState : BOOL; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function CreateEventA( lpEventAttributes : PSecurityAttributes; bManualReset, bInitialState : BOOL; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function CreateEventW( lpEventAttributes : PSecurityAttributes; bManualReset, bInitialState : BOOL; lpName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function OpenEvent( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function OpenEventA( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function OpenEventW( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function CreateSemaphore( lpSemaphoreAttributes : PSecurityAttributes; lInitialCount, lMaximumCount : Longint; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function CreateSemaphoreA( lpSemaphoreAttributes : PSecurityAttributes; lInitialCount, lMaximumCount : Longint; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function CreateSemaphoreW( lpSemaphoreAttributes : PSecurityAttributes; lInitialCount, lMaximumCount : Longint; lpName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function OpenSemaphore( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function OpenSemaphoreA( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function OpenSemaphoreW( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PWideChar) : THandle');
  CL.AddTypeS('TFNTimerAPCRoutine', 'TFarProc');
 CL.AddDelphiFunction('Function CreateWaitableTimer( lpTimerAttributes : PSecurityAttributes; bManualReset : BOOL; lpTimerName : PChar) : THandle');
 CL.AddDelphiFunction('Function CreateWaitableTimerA( lpTimerAttributes : PSecurityAttributes; bManualReset : BOOL; lpTimerName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function CreateWaitableTimerW( lpTimerAttributes : PSecurityAttributes; bManualReset : BOOL; lpTimerName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function OpenWaitableTimer( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpTimerName : PChar) : THandle');
 CL.AddDelphiFunction('Function OpenWaitableTimerA( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpTimerName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function OpenWaitableTimerW( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpTimerName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function SetWaitableTimer( hTimer : THandle; var lpDueTime : TLargeInteger; lPeriod : Longint; pfnCompletionRoutine : TFNTimerAPCRoutine; lpArgToCompletionRoutine : Pointer; fResume : BOOL) : BOOL');
 CL.AddDelphiFunction('Function CancelWaitableTimer( hTimer : THandle) : BOOL');
 CL.AddDelphiFunction('Function CreateFileMapping( hFile : THandle; lpFileMappingAttributes : PSecurityAttributes; flProtect, dwMaximumSizeHigh, dwMaximumSizeLow : DWORD; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function CreateFileMappingA( hFile : THandle; lpFileMappingAttributes : PSecurityAttributes; flProtect, dwMaximumSizeHigh, dwMaximumSizeLow : DWORD; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function CreateFileMappingW( hFile : THandle; lpFileMappingAttributes : PSecurityAttributes; flProtect, dwMaximumSizeHigh, dwMaximumSizeLow : DWORD; lpName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function OpenFileMapping( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PChar) : THandle');
 CL.AddDelphiFunction('Function OpenFileMappingA( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function OpenFileMappingW( dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function GetLogicalDriveStrings( nBufferLength : DWORD; lpBuffer : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetLogicalDriveStringsA( nBufferLength : DWORD; lpBuffer : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetLogicalDriveStringsW( nBufferLength : DWORD; lpBuffer : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function LoadLibrary( lpLibFileName : PChar) : HMODULE');
 CL.AddDelphiFunction('Function LoadLibraryA( lpLibFileName : PAnsiChar) : HMODULE');
 CL.AddDelphiFunction('Function LoadLibraryW( lpLibFileName : PWideChar) : HMODULE');
 CL.AddDelphiFunction('Function LoadLibraryEx( lpLibFileName : PChar; hFile : THandle; dwFlags : DWORD) : HMODULE');
 CL.AddDelphiFunction('Function LoadLibraryExA( lpLibFileName : PAnsiChar; hFile : THandle; dwFlags : DWORD) : HMODULE');
 CL.AddDelphiFunction('Function LoadLibraryExW( lpLibFileName : PWideChar; hFile : THandle; dwFlags : DWORD) : HMODULE');
 CL.AddConstantN('DONT_RESOLVE_DLL_REFERENCES','LongInt').SetInt( 1);
 CL.AddConstantN('LOAD_LIBRARY_AS_DATAFILE','LongInt').SetInt( 2);
 CL.AddConstantN('LOAD_WITH_ALTERED_SEARCH_PATH','LongInt').SetInt( 8);
 CL.AddDelphiFunction('Function GetModuleFileName( hModule : HINST; lpFilename : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleFileNameA( hModule : HINST; lpFilename : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleFileNameW( hModule : HINST; lpFilename : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleHandle( lpModuleName : PChar) : HMODULE');
 CL.AddDelphiFunction('Function GetModuleHandleA( lpModuleName : PAnsiChar) : HMODULE');
 CL.AddDelphiFunction('Function GetModuleHandleW( lpModuleName : PWideChar) : HMODULE');
 CL.AddDelphiFunction('Function CreateProcess( lpApplicationName : PChar; lpCommandLine : PChar; lpProcessAttributes, lpThreadAttributes : PSecurityAttributes; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : Pointer; lpCurrentDirectory : PChar; const lpStartupInfo : TStartupInfo; var lpProcessInformation : TProcessInformation) : BOOL');
 CL.AddDelphiFunction('Function CreateProcessA( lpApplicationName : PAnsiChar; lpCommandLine : PAnsiChar; lpProcessAttributes, lpThreadAttributes : PSecurityAttributes; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : Pointer; lpCurrentDirectory : PAnsiChar; const lpStartupInfo : TStartupInfoA; var lpProcessInformation : TProcessInformation) : BOOL');
 CL.AddDelphiFunction('Function CreateProcessW( lpApplicationName : PWideChar; lpCommandLine : PWideChar; lpProcessAttributes, lpThreadAttributes : PSecurityAttributes; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : Pointer; lpCurrentDirectory : PWideChar; const lpStartupInfo : TStartupInfoW; var lpProcessInformation : TProcessInformation) : BOOL');
 CL.AddDelphiFunction('Function SetProcessShutdownParameters( dwLevel, dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetProcessShutdownParameters( var lpdwLevel, lpdwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetProcessVersion( ProcessId : DWORD) : DWORD');
 CL.AddDelphiFunction('Procedure FatalAppExit( uAction : UINT; lpMessageText : PChar)');
 CL.AddDelphiFunction('Procedure FatalAppExitA( uAction : UINT; lpMessageText : PAnsiChar)');
 CL.AddDelphiFunction('Procedure FatalAppExitW( uAction : UINT; lpMessageText : PWideChar)');
 CL.AddDelphiFunction('Procedure GetStartupInfo( var lpStartupInfo : TStartupInfo)');
 CL.AddDelphiFunction('Procedure GetStartupInfoA( var lpStartupInfo : TStartupInfo)');
 CL.AddDelphiFunction('Procedure GetStartupInfoW( var lpStartupInfo : TStartupInfo)');
 CL.AddDelphiFunction('Function GetCommandLine : PChar');
 CL.AddDelphiFunction('Function GetCommandLineA : PAnsiChar');
 CL.AddDelphiFunction('Function GetCommandLineW : PWideChar');
 CL.AddDelphiFunction('Function GetEnvironmentVariable( lpName : PChar; lpBuffer : PChar; nSize : DWORD) : DWORD;');
 CL.AddDelphiFunction('Function GetEnvironmentVariableA( lpName : PAnsiChar; lpBuffer : PAnsiChar; nSize : DWORD) : DWORD;');
 CL.AddDelphiFunction('Function GetEnvironmentVariableW( lpName : PWideChar; lpBuffer : PWideChar; nSize : DWORD) : DWORD;');
 CL.AddDelphiFunction('Function SetEnvironmentVariable( lpName, lpValue : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetEnvironmentVariableA( lpName, lpValue : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetEnvironmentVariableW( lpName, lpValue : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function ExpandEnvironmentStrings( lpSrc : PChar; lpDst : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function ExpandEnvironmentStringsA( lpSrc : PAnsiChar; lpDst : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function ExpandEnvironmentStringsW( lpSrc : PWideChar; lpDst : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Procedure OutputDebugString( lpOutputString : PChar)');
 CL.AddDelphiFunction('Procedure OutputDebugStringA( lpOutputString : PAnsiChar)');
 CL.AddDelphiFunction('Procedure OutputDebugStringW( lpOutputString : PWideChar)');
 CL.AddDelphiFunction('Function FindResource( hModule : HMODULE; lpName, lpType : PChar) : HRSRC');
 CL.AddDelphiFunction('Function FindResourceA( hModule : HMODULE; lpName, lpType : PAnsiChar) : HRSRC');
 CL.AddDelphiFunction('Function FindResourceW( hModule : HMODULE; lpName, lpType : PWideChar) : HRSRC');
 CL.AddDelphiFunction('Function FindResourceEx( hModule : HMODULE; lpType, lpName : PChar; wLanguage : Word) : HRSRC');
 CL.AddDelphiFunction('Function FindResourceExA( hModule : HMODULE; lpType, lpName : PAnsiChar; wLanguage : Word) : HRSRC');
 CL.AddDelphiFunction('Function FindResourceExW( hModule : HMODULE; lpType, lpName : PWideChar; wLanguage : Word) : HRSRC');
  CL.AddTypeS('ENUMRESTYPEPROC', 'FARPROC');
  CL.AddTypeS('ENUMRESNAMEPROC', 'FARPROC');
  CL.AddTypeS('ENUMRESLANGPROC', 'FARPROC');
 CL.AddDelphiFunction('Function EnumResourceTypes( hModule : HMODULE; lpEnumFunc : ENUMRESTYPEPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceTypesA( hModule : HMODULE; lpEnumFunc : ENUMRESTYPEPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceTypesW( hModule : HMODULE; lpEnumFunc : ENUMRESTYPEPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceNames( hModule : HMODULE; lpType : PChar; lpEnumFunc : ENUMRESNAMEPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceNamesA( hModule : HMODULE; lpType : PAnsiChar; lpEnumFunc : ENUMRESNAMEPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceNamesW( hModule : HMODULE; lpType : PWideChar; lpEnumFunc : ENUMRESNAMEPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceLanguages( hModule : HMODULE; lpType, lpName : PChar; lpEnumFunc : ENUMRESLANGPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceLanguagesA( hModule : HMODULE; lpType, lpName : PAnsiChar; lpEnumFunc : ENUMRESLANGPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function EnumResourceLanguagesW( hModule : HMODULE; lpType, lpName : PWideChar; lpEnumFunc : ENUMRESLANGPROC; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function BeginUpdateResource( pFileName : PChar; bDeleteExistingResources : BOOL) : THandle');
 CL.AddDelphiFunction('Function BeginUpdateResourceA( pFileName : PAnsiChar; bDeleteExistingResources : BOOL) : THandle');
 CL.AddDelphiFunction('Function BeginUpdateResourceW( pFileName : PWideChar; bDeleteExistingResources : BOOL) : THandle');
 CL.AddDelphiFunction('Function UpdateResource( hUpdate : THandle; lpType, lpName : PChar; wLanguage : Word; lpData : Pointer; cbData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function UpdateResourceA( hUpdate : THandle; lpType, lpName : PAnsiChar; wLanguage : Word; lpData : Pointer; cbData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function UpdateResourceW( hUpdate : THandle; lpType, lpName : PWideChar; wLanguage : Word; lpData : Pointer; cbData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EndUpdateResource( hUpdate : THandle; fDiscard : BOOL) : BOOL');
 CL.AddDelphiFunction('Function EndUpdateResourceA( hUpdate : THandle; fDiscard : BOOL) : BOOL');
 CL.AddDelphiFunction('Function EndUpdateResourceW( hUpdate : THandle; fDiscard : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GlobalAddAtom( lpString : PChar) : ATOM');
 CL.AddDelphiFunction('Function GlobalAddAtomA( lpString : PAnsiChar) : ATOM');
 CL.AddDelphiFunction('Function GlobalAddAtomW( lpString : PWideChar) : ATOM');
 CL.AddDelphiFunction('Function GlobalFindAtom( lpString : PChar) : ATOM');
 CL.AddDelphiFunction('Function GlobalFindAtomA( lpString : PAnsiChar) : ATOM');
 CL.AddDelphiFunction('Function GlobalFindAtomW( lpString : PWideChar) : ATOM');
 CL.AddDelphiFunction('Function GlobalGetAtomName( nAtom : ATOM; lpBuffer : PChar; nSize : Integer) : UINT');
 CL.AddDelphiFunction('Function GlobalGetAtomNameA( nAtom : ATOM; lpBuffer : PAnsiChar; nSize : Integer) : UINT');
 CL.AddDelphiFunction('Function GlobalGetAtomNameW( nAtom : ATOM; lpBuffer : PWideChar; nSize : Integer) : UINT');
 CL.AddDelphiFunction('Function AddAtom( lpString : PChar) : ATOM');
 CL.AddDelphiFunction('Function AddAtomA( lpString : PAnsiChar) : ATOM');
 CL.AddDelphiFunction('Function AddAtomW( lpString : PWideChar) : ATOM');
 CL.AddDelphiFunction('Function FindAtom( lpString : PChar) : ATOM');
 CL.AddDelphiFunction('Function FindAtomA( lpString : PAnsiChar) : ATOM');
 CL.AddDelphiFunction('Function FindAtomW( lpString : PWideChar) : ATOM');
 CL.AddDelphiFunction('Function GetAtomName( nAtom : ATOM; lpBuffer : PChar; nSize : Integer) : UINT');
 CL.AddDelphiFunction('Function GetAtomNameA( nAtom : ATOM; lpBuffer : PAnsiChar; nSize : Integer) : UINT');
 CL.AddDelphiFunction('Function GetAtomNameW( nAtom : ATOM; lpBuffer : PWideChar; nSize : Integer) : UINT');
 CL.AddDelphiFunction('Function GetProfileInt( lpAppName, lpKeyName : PChar; nDefault : Integer) : UINT');
 CL.AddDelphiFunction('Function GetProfileIntA( lpAppName, lpKeyName : PAnsiChar; nDefault : Integer) : UINT');
 CL.AddDelphiFunction('Function GetProfileIntW( lpAppName, lpKeyName : PWideChar; nDefault : Integer) : UINT');
 CL.AddDelphiFunction('Function GetProfileString( lpAppName, lpKeyName, lpDefault : PChar; lpReturnedString : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetProfileStringA( lpAppName, lpKeyName, lpDefault : PAnsiChar; lpReturnedString : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetProfileStringW( lpAppName, lpKeyName, lpDefault : PWideChar; lpReturnedString : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WriteProfileString( lpAppName, lpKeyName, lpString : PChar) : BOOL');
 CL.AddDelphiFunction('Function WriteProfileStringA( lpAppName, lpKeyName, lpString : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function WriteProfileStringW( lpAppName, lpKeyName, lpString : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetProfileSection( lpAppName : PChar; lpReturnedString : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetProfileSectionA( lpAppName : PAnsiChar; lpReturnedString : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetProfileSectionW( lpAppName : PWideChar; lpReturnedString : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WriteProfileSection( lpAppName, lpString : PChar) : BOOL');
 CL.AddDelphiFunction('Function WriteProfileSectionA( lpAppName, lpString : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function WriteProfileSectionW( lpAppName, lpString : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetPrivateProfileInt( lpAppName, lpKeyName : PChar; nDefault : Integer; lpFileName : PChar) : UINT');
 CL.AddDelphiFunction('Function GetPrivateProfileIntA( lpAppName, lpKeyName : PAnsiChar; nDefault : Integer; lpFileName : PAnsiChar) : UINT');
 CL.AddDelphiFunction('Function GetPrivateProfileIntW( lpAppName, lpKeyName : PWideChar; nDefault : Integer; lpFileName : PWideChar) : UINT');
 CL.AddDelphiFunction('Function GetPrivateProfileString( lpAppName, lpKeyName, lpDefault : PChar; lpReturnedString : PChar; nSize : DWORD; lpFileName : PChar) : DWORD');
 CL.AddDelphiFunction('Function GetPrivateProfileStringA( lpAppName, lpKeyName, lpDefault : PAnsiChar; lpReturnedString : PAnsiChar; nSize : DWORD; lpFileName : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetPrivateProfileStringW( lpAppName, lpKeyName, lpDefault : PWideChar; lpReturnedString : PWideChar; nSize : DWORD; lpFileName : PWideChar) : DWORD');
 CL.AddDelphiFunction('Function WritePrivateProfileString( lpAppName, lpKeyName, lpString, lpFileName : PChar) : BOOL');
 CL.AddDelphiFunction('Function WritePrivateProfileStringA( lpAppName, lpKeyName, lpString, lpFileName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function WritePrivateProfileStringW( lpAppName, lpKeyName, lpString, lpFileName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetPrivateProfileSection( lpAppName : PChar; lpReturnedString : PChar; nSize : DWORD; lpFileName : PChar) : DWORD');
 CL.AddDelphiFunction('Function GetPrivateProfileSectionA( lpAppName : PAnsiChar; lpReturnedString : PAnsiChar; nSize : DWORD; lpFileName : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetPrivateProfileSectionW( lpAppName : PWideChar; lpReturnedString : PWideChar; nSize : DWORD; lpFileName : PWideChar) : DWORD');
 CL.AddDelphiFunction('Function WritePrivateProfileSection( lpAppName, lpString, lpFileName : PChar) : BOOL');
 CL.AddDelphiFunction('Function WritePrivateProfileSectionA( lpAppName, lpString, lpFileName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function WritePrivateProfileSectionW( lpAppName, lpString, lpFileName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetPrivateProfileSectionNames( lpszReturnBuffer : PChar; nSize : DWORD; lpFileName : PChar) : DWORD');
 CL.AddDelphiFunction('Function GetPrivateProfileSectionNamesA( lpszReturnBuffer : PAnsiChar; nSize : DWORD; lpFileName : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetPrivateProfileSectionNamesW( lpszReturnBuffer : PWideChar; nSize : DWORD; lpFileName : PWideChar) : DWORD');
 CL.AddDelphiFunction('Function GetPrivateProfileStruct( lpszSection, lpszKey : PChar; lpStruct : Pointer; uSizeStruct : UINT; szFile : PChar) : BOOL');
 CL.AddDelphiFunction('Function GetPrivateProfileStructA( lpszSection, lpszKey : PAnsiChar; lpStruct : Pointer; uSizeStruct : UINT; szFile : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function GetPrivateProfileStructW( lpszSection, lpszKey : PWideChar; lpStruct : Pointer; uSizeStruct : UINT; szFile : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function WritePrivateProfileStruct( lpszSection, lpszKey : PChar; lpStruct : Pointer; uSizeStruct : UINT; szFile : PChar) : BOOL');
 CL.AddDelphiFunction('Function WritePrivateProfileStructA( lpszSection, lpszKey : PAnsiChar; lpStruct : Pointer; uSizeStruct : UINT; szFile : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function WritePrivateProfileStructW( lpszSection, lpszKey : PWideChar; lpStruct : Pointer; uSizeStruct : UINT; szFile : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetDriveType( lpRootPathName : PChar) : UINT');
 CL.AddDelphiFunction('Function GetDriveTypeA( lpRootPathName : PAnsiChar) : UINT');
 CL.AddDelphiFunction('Function GetDriveTypeW( lpRootPathName : PWideChar) : UINT');
 CL.AddDelphiFunction('Function GetSystemDirectory( lpBuffer : PChar; uSize : UINT) : UINT');
 CL.AddDelphiFunction('Function GetSystemDirectoryA( lpBuffer : PAnsiChar; uSize : UINT) : UINT');
 CL.AddDelphiFunction('Function GetSystemDirectoryW( lpBuffer : PWideChar; uSize : UINT) : UINT');
 CL.AddDelphiFunction('Function GetTempPath( nBufferLength : DWORD; lpBuffer : PChar) : DWORD');
 CL.AddDelphiFunction('Function GetTempPathA( nBufferLength : DWORD; lpBuffer : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetTempPathW( nBufferLength : DWORD; lpBuffer : PWideChar) : DWORD');
 CL.AddDelphiFunction('Function GetTempFileName( lpPathName, lpPrefixString : PChar; uUnique : UINT; lpTempFileName : PChar) : UINT');
 CL.AddDelphiFunction('Function GetTempFileNameA( lpPathName, lpPrefixString : PAnsiChar; uUnique : UINT; lpTempFileName : PAnsiChar) : UINT');
 CL.AddDelphiFunction('Function GetTempFileNameW( lpPathName, lpPrefixString : PWideChar; uUnique : UINT; lpTempFileName : PWideChar) : UINT');
 CL.AddDelphiFunction('Function GetWindowsDirectory( lpBuffer : PChar; uSize : UINT) : UINT');
 CL.AddDelphiFunction('Function GetWindowsDirectoryA( lpBuffer : PAnsiChar; uSize : UINT) : UINT');
 CL.AddDelphiFunction('Function GetWindowsDirectoryW( lpBuffer : PWideChar; uSize : UINT) : UINT');
 CL.AddDelphiFunction('Function SetCurrentDirectory( lpPathName : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetCurrentDirectoryA( lpPathName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetCurrentDirectoryW( lpPathName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetCurrentDirectory( nBufferLength : DWORD; lpBuffer : PChar) : DWORD');
 CL.AddDelphiFunction('Function GetCurrentDirectoryA( nBufferLength : DWORD; lpBuffer : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetCurrentDirectoryW( nBufferLength : DWORD; lpBuffer : PWideChar) : DWORD');
 CL.AddDelphiFunction('Function GetDiskFreeSpace( lpRootPathName : PChar; var lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetDiskFreeSpaceA( lpRootPathName : PAnsiChar; var lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetDiskFreeSpaceW( lpRootPathName : PWideChar; var lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetDiskFreeSpaceEx( lpDirectoryName : PChar; var lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes : PLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function GetDiskFreeSpaceExA( lpDirectoryName : PAnsiChar; var lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes : PLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function GetDiskFreeSpaceExW( lpDirectoryName : PWideChar; var lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes : PLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function CreateDirectory( lpPathName : PChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateDirectoryA( lpPathName : PAnsiChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateDirectoryW( lpPathName : PWideChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateDirectoryEx( lpTemplateDirectory, lpNewDirectory : PChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateDirectoryExA( lpTemplateDirectory, lpNewDirectory : PAnsiChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateDirectoryExW( lpTemplateDirectory, lpNewDirectory : PWideChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function RemoveDirectory( lpPathName : PChar) : BOOL');
 CL.AddDelphiFunction('Function RemoveDirectoryA( lpPathName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function RemoveDirectoryW( lpPathName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetFullPathName( lpFileName : PChar; nBufferLength : DWORD; lpBuffer : PChar; var lpFilePart : PChar) : DWORD');
 CL.AddDelphiFunction('Function GetFullPathNameA( lpFileName : PAnsiChar; nBufferLength : DWORD; lpBuffer : PAnsiChar; var lpFilePart : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetFullPathNameW( lpFileName : PWideChar; nBufferLength : DWORD; lpBuffer : PWideChar; var lpFilePart : PWideChar) : DWORD');
 CL.AddConstantN('DDD_RAW_TARGET_PATH','LongWord').SetUInt( $00000001);
 CL.AddConstantN('DDD_REMOVE_DEFINITION','LongWord').SetUInt( $00000002);
 CL.AddConstantN('DDD_EXACT_MATCH_ON_REMOVE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('DDD_NO_BROADCAST_SYSTEM','LongWord').SetUInt( $00000008);
 CL.AddDelphiFunction('Function DefineDosDevice( dwFlags : DWORD; lpDeviceName, lpTargetPath : PChar) : BOOL');
 CL.AddDelphiFunction('Function DefineDosDeviceA( dwFlags : DWORD; lpDeviceName, lpTargetPath : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function DefineDosDeviceW( dwFlags : DWORD; lpDeviceName, lpTargetPath : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function QueryDosDevice( lpDeviceName : PChar; lpTargetPath : PChar; ucchMax : DWORD) : DWORD');
 CL.AddDelphiFunction('Function QueryDosDeviceA( lpDeviceName : PAnsiChar; lpTargetPath : PAnsiChar; ucchMax : DWORD) : DWORD');
 CL.AddDelphiFunction('Function QueryDosDeviceW( lpDeviceName : PWideChar; lpTargetPath : PWideChar; ucchMax : DWORD) : DWORD');
 CL.AddDelphiFunction('Function CreateFile( lpFileName : PChar; dwDesiredAccess, dwShareMode : DWORD; lpSecurityAttributes : PSecurityAttributes; dwCreationDisposition, dwFlagsAndAttributes : DWORD; hTemplateFile : THandle) : THandle');
 CL.AddDelphiFunction('Function CreateFileA( lpFileName : PAnsiChar; dwDesiredAccess, dwShareMode : DWORD; lpSecurityAttributes : PSecurityAttributes; dwCreationDisposition, dwFlagsAndAttributes : DWORD; hTemplateFile : THandle) : THandle');
 CL.AddDelphiFunction('Function CreateFileW( lpFileName : PWideChar; dwDesiredAccess, dwShareMode : DWORD; lpSecurityAttributes : PSecurityAttributes; dwCreationDisposition, dwFlagsAndAttributes : DWORD; hTemplateFile : THandle) : THandle');
 CL.AddDelphiFunction('Function SetFileAttributes( lpFileName : PChar; dwFileAttributes : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetFileAttributesA( lpFileName : PAnsiChar; dwFileAttributes : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetFileAttributesW( lpFileName : PWideChar; dwFileAttributes : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetFileAttributes( lpFileName : PChar) : DWORD');
 CL.AddDelphiFunction('Function GetFileAttributesA( lpFileName : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function GetFileAttributesW( lpFileName : PWideChar) : DWORD');
  CL.AddTypeS('_GET_FILEEX_INFO_LEVELS', '( GetFileExInfoStandard, GetFileExMax'
   +'InfoLevel )');
  CL.AddTypeS('TGetFileExInfoLevels', '_GET_FILEEX_INFO_LEVELS');
  CL.AddTypeS('GET_FILEEX_INFO_LEVELS', '_GET_FILEEX_INFO_LEVELS');
 CL.AddDelphiFunction('Function GetFileAttributesEx( lpFileName : PChar; fInfoLevelId : TGetFileExInfoLevels; lpFileInformation : Pointer) : BOOL');
 CL.AddDelphiFunction('Function GetFileAttributesExA( lpFileName : PAnsiChar; fInfoLevelId : TGetFileExInfoLevels; lpFileInformation : Pointer) : BOOL');
 CL.AddDelphiFunction('Function GetFileAttributesExW( lpFileName : PWideChar; fInfoLevelId : TGetFileExInfoLevels; lpFileInformation : Pointer) : BOOL');
 CL.AddDelphiFunction('Function GetCompressedFileSize( lpFileName : PChar; lpFileSizeHigh : PDWORD) : DWORD');
 CL.AddDelphiFunction('Function GetCompressedFileSizeA( lpFileName : PAnsiChar; lpFileSizeHigh : PDWORD) : DWORD');
 CL.AddDelphiFunction('Function GetCompressedFileSizeW( lpFileName : PWideChar; lpFileSizeHigh : PDWORD) : DWORD');
 CL.AddDelphiFunction('Function DeleteFile( lpFileName : PChar) : BOOL');
 CL.AddDelphiFunction('Function DeleteFileA( lpFileName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function DeleteFileW( lpFileName : PWideChar) : BOOL');
  CL.AddTypeS('_FINDEX_INFO_LEVELS', '( FindExInfoStandard, FindExInfoMaxInfoLe'
   +'vel )');
  CL.AddTypeS('TFindexInfoLevels', '_FINDEX_INFO_LEVELS');
  CL.AddTypeS('FINDEX_INFO_LEVELS', '_FINDEX_INFO_LEVELS');
  CL.AddTypeS('_FINDEX_SEARCH_OPS', '( FindExSearchNameMatch, FindExSearchLimit'
   +'ToDirectories, FindExSearchLimitToDevices, FindExSearchMaxSearchOp )');
  CL.AddTypeS('TFindexSearchOps', '_FINDEX_SEARCH_OPS');
  CL.AddTypeS('FINDEX_SEARCH_OPS', '_FINDEX_SEARCH_OPS');
 CL.AddConstantN('FIND_FIRST_EX_CASE_SENSITIVE','LongWord').SetUInt( $00000001);
 CL.AddDelphiFunction('Function FindFirstFileEx( lpFileName : PChar; fInfoLevelId : TFindexInfoLevels; lpFindFileData : Pointer; fSearchOp : TFindexSearchOps; lpSearchFilter : Pointer; dwAdditionalFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function FindFirstFileExA( lpFileName : PAnsiChar; fInfoLevelId : TFindexInfoLevels; lpFindFileData : Pointer; fSearchOp : TFindexSearchOps; lpSearchFilter : Pointer; dwAdditionalFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function FindFirstFileExW( lpFileName : PWideChar; fInfoLevelId : TFindexInfoLevels; lpFindFileData : Pointer; fSearchOp : TFindexSearchOps; lpSearchFilter : Pointer; dwAdditionalFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function FindFirstFile( lpFileName : PChar; var lpFindFileData : TWIN32FindData) : THandle');
 CL.AddDelphiFunction('Function FindFirstFileA( lpFileName : PAnsiChar; var lpFindFileData : TWIN32FindDataA) : THandle');
 CL.AddDelphiFunction('Function FindFirstFileW( lpFileName : PWideChar; var lpFindFileData : TWIN32FindDataW) : THandle');
 CL.AddDelphiFunction('Function FindNextFile( hFindFile : THandle; var lpFindFileData : TWIN32FindData) : BOOL');
 CL.AddDelphiFunction('Function FindNextFileA( hFindFile : THandle; var lpFindFileData : TWIN32FindDataA) : BOOL');
 CL.AddDelphiFunction('Function FindNextFileW( hFindFile : THandle; var lpFindFileData : TWIN32FindDataW) : BOOL');
 CL.AddDelphiFunction('Function SearchPath( lpPath, lpFileName, lpExtension : PChar; nBufferLength : DWORD; lpBuffer : PChar; var lpFilePart : PChar) : DWORD');
 CL.AddDelphiFunction('Function SearchPathA( lpPath, lpFileName, lpExtension : PAnsiChar; nBufferLength : DWORD; lpBuffer : PAnsiChar; var lpFilePart : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function SearchPathW( lpPath, lpFileName, lpExtension : PWideChar; nBufferLength : DWORD; lpBuffer : PWideChar; var lpFilePart : PWideChar) : DWORD');
 CL.AddDelphiFunction('Function CopyFile( lpExistingFileName, lpNewFileName : PChar; bFailIfExists : BOOL) : BOOL');
 CL.AddDelphiFunction('Function CopyFileA( lpExistingFileName, lpNewFileName : PAnsiChar; bFailIfExists : BOOL) : BOOL');
 CL.AddDelphiFunction('Function CopyFileW( lpExistingFileName, lpNewFileName : PWideChar; bFailIfExists : BOOL) : BOOL');
  CL.AddTypeS('TFNProgressRoutine', 'TFarProc');
 CL.AddDelphiFunction('Function CopyFileEx( lpExistingFileName, lpNewFileName : PChar; lpProgressRoutine : TFNProgressRoutine; lpData : Pointer; pbCancel : PBool; dwCopyFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CopyFileExA( lpExistingFileName, lpNewFileName : PAnsiChar; lpProgressRoutine : TFNProgressRoutine; lpData : Pointer; pbCancel : PBool; dwCopyFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CopyFileExW( lpExistingFileName, lpNewFileName : PWideChar; lpProgressRoutine : TFNProgressRoutine; lpData : Pointer; pbCancel : PBool; dwCopyFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MoveFile( lpExistingFileName, lpNewFileName : PChar) : BOOL');
 CL.AddDelphiFunction('Function MoveFileA( lpExistingFileName, lpNewFileName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function MoveFileW( lpExistingFileName, lpNewFileName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function MoveFileEx( lpExistingFileName, lpNewFileName : PChar; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MoveFileExA( lpExistingFileName, lpNewFileName : PAnsiChar; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MoveFileExW( lpExistingFileName, lpNewFileName : PWideChar; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MoveFileWithProgress( lpExistingFileName, lpNewFileName : PChar; lpProgressRoutine : TFNProgressRoutine; lpData : Pointer; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MoveFileWithProgressA( lpExistingFileName, lpNewFileName : PAnsiChar; lpProgressRoutine : TFNProgressRoutine; lpData : Pointer; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MoveFileWithProgressW( lpExistingFileName, lpNewFileName : PWideChar; lpProgressRoutine : TFNProgressRoutine; lpData : Pointer; dwFlags : DWORD) : BOOL');
 CL.AddConstantN('MOVEFILE_REPLACE_EXISTING','LongWord').SetUInt( $00000001);
 CL.AddConstantN('MOVEFILE_COPY_ALLOWED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('MOVEFILE_DELAY_UNTIL_REBOOT','LongWord').SetUInt( $00000004);
 CL.AddConstantN('MOVEFILE_WRITE_THROUGH','LongWord').SetUInt( $00000008);
 CL.AddConstantN('MOVEFILE_CREATE_HARDLINK','LongWord').SetUInt( $00000010);
 CL.AddConstantN('MOVEFILE_FAIL_IF_NOT_TRACKABLE','LongWord').SetUInt( $00000020);
 CL.AddDelphiFunction('Function CreateHardLink( lpFileName, lpExistingFileName : PChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateHardLinkA( lpFileName, lpExistingFileName : PAnsiChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateHardLinkW( lpFileName, lpExistingFileName : PWideChar; lpSecurityAttributes : PSecurityAttributes) : BOOL');
 CL.AddDelphiFunction('Function CreateNamedPipe( lpName : PChar; dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut : DWORD; lpSecurityAttributes : PSecurityAttributes) : THandle');
 CL.AddDelphiFunction('Function CreateNamedPipeA( lpName : PAnsiChar; dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut : DWORD; lpSecurityAttributes : PSecurityAttributes) : THandle');
 CL.AddDelphiFunction('Function CreateNamedPipeW( lpName : PWideChar; dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut : DWORD; lpSecurityAttributes : PSecurityAttributes) : THandle');
 CL.AddDelphiFunction('Function GetNamedPipeHandleState( hNamedPipe : THandle; lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout : PDWORD; lpUserName : PChar; nMaxUserNameSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetNamedPipeHandleStateA( hNamedPipe : THandle; lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout : PDWORD; lpUserName : PAnsiChar; nMaxUserNameSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetNamedPipeHandleStateW( hNamedPipe : THandle; lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout : PDWORD; lpUserName : PWideChar; nMaxUserNameSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CallNamedPipe( lpNamedPipeName : PChar; lpInBuffer : Pointer; nInBufferSize : DWORD; lpOutBuffer : Pointer; nOutBufferSize : DWORD; var lpBytesRead : DWORD; nTimeOut : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CallNamedPipeA( lpNamedPipeName : PAnsiChar; lpInBuffer : Pointer; nInBufferSize : DWORD; lpOutBuffer : Pointer; nOutBufferSize : DWORD; var lpBytesRead : DWORD; nTimeOut : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CallNamedPipeW( lpNamedPipeName : PWideChar; lpInBuffer : Pointer; nInBufferSize : DWORD; lpOutBuffer : Pointer; nOutBufferSize : DWORD; var lpBytesRead : DWORD; nTimeOut : DWORD) : BOOL');
 CL.AddDelphiFunction('Function WaitNamedPipe( lpNamedPipeName : PChar; nTimeOut : DWORD) : BOOL');
 CL.AddDelphiFunction('Function WaitNamedPipeA( lpNamedPipeName : PAnsiChar; nTimeOut : DWORD) : BOOL');
 CL.AddDelphiFunction('Function WaitNamedPipeW( lpNamedPipeName : PWideChar; nTimeOut : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetVolumeLabel( lpRootPathName : PChar; lpVolumeName : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetVolumeLabelA( lpRootPathName : PAnsiChar; lpVolumeName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetVolumeLabelW( lpRootPathName : PWideChar; lpVolumeName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Procedure SetFileApisToOEM');
 CL.AddDelphiFunction('Procedure SetFileApisToANSI');
 CL.AddDelphiFunction('Function AreFileApisANSI : BOOL');
 CL.AddDelphiFunction('Function GetVolumeInformation( lpRootPathName : PChar; lpVolumeNameBuffer : PChar; nVolumeNameSize : DWORD; lpVolumeSerialNumber : PDWORD; var lpMaximumComponentLength, lpFileSystemFlags : DWORD; lpFileSystemNameBuffer : PChar; nFileSystemNameSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetVolumeInformationA( lpRootPathName : PAnsiChar; lpVolumeNameBuffer : PAnsiChar; nVolumeNameSize : DWORD; lpVolumeSerialNumber : PDWORD; var lpMaximumComponentLength, lpFileSystemFlags : DWORD; lpFileSystemNameBuffer : PAnsiChar; nFileSystemNameSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetVolumeInformationW( lpRootPathName : PWideChar; lpVolumeNameBuffer : PWideChar; nVolumeNameSize : DWORD; lpVolumeSerialNumber : PDWORD; var lpMaximumComponentLength, lpFileSystemFlags : DWORD; lpFileSystemNameBuffer : PWideChar; nFileSystemNameSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CancelIo( hFile : THandle) : BOOL');
 CL.AddDelphiFunction('Function ClearEventLog( hEventLog : THandle; lpBackupFileName : PChar) : BOOL');
 CL.AddDelphiFunction('Function ClearEventLogA( hEventLog : THandle; lpBackupFileName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function ClearEventLogW( hEventLog : THandle; lpBackupFileName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function BackupEventLog( hEventLog : THandle; lpBackupFileName : PChar) : BOOL');
 CL.AddDelphiFunction('Function BackupEventLogA( hEventLog : THandle; lpBackupFileName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function BackupEventLogW( hEventLog : THandle; lpBackupFileName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function CloseEventLog( hEventLog : THandle) : BOOL');
 CL.AddDelphiFunction('Function DeregisterEventSource( hEventLog : THandle) : BOOL');
 CL.AddDelphiFunction('Function NotifyChangeEventLog( hEventLog, hEvent : THandle) : BOOL');
 CL.AddDelphiFunction('Function GetNumberOfEventLogRecords( hEventLog : THandle; var NumberOfRecords : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetOldestEventLogRecord( hEventLog : THandle; var OldestRecord : DWORD) : BOOL');
 CL.AddDelphiFunction('Function OpenEventLog( lpUNCServerName, lpSourceName : PChar) : THandle');
 CL.AddDelphiFunction('Function OpenEventLogA( lpUNCServerName, lpSourceName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function OpenEventLogW( lpUNCServerName, lpSourceName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function RegisterEventSource( lpUNCServerName, lpSourceName : PChar) : THandle');
 CL.AddDelphiFunction('Function RegisterEventSourceA( lpUNCServerName, lpSourceName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function RegisterEventSourceW( lpUNCServerName, lpSourceName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function OpenBackupEventLog( lpUNCServerName, lpFileName : PChar) : THandle');
 CL.AddDelphiFunction('Function OpenBackupEventLogA( lpUNCServerName, lpFileName : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function OpenBackupEventLogW( lpUNCServerName, lpFileName : PWideChar) : THandle');
 CL.AddDelphiFunction('Function ReadEventLog( hEventLog : THandle; dwReadFlags, dwRecordOffset : DWORD; lpBuffer : Pointer; nNumberOfBytesToRead : DWORD; var pnBytesRead, pnMinNumberOfBytesNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ReadEventLogA( hEventLog : THandle; dwReadFlags, dwRecordOffset : DWORD; lpBuffer : Pointer; nNumberOfBytesToRead : DWORD; var pnBytesRead, pnMinNumberOfBytesNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ReadEventLogW( hEventLog : THandle; dwReadFlags, dwRecordOffset : DWORD; lpBuffer : Pointer; nNumberOfBytesToRead : DWORD; var pnBytesRead, pnMinNumberOfBytesNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ReportEvent( hEventLog : THandle; wType, wCategory : Word; dwEventID : DWORD; lpUserSid : Pointer; wNumStrings : Word; dwDataSize : DWORD; lpStrings, lpRawData : Pointer) : BOOL');
 CL.AddDelphiFunction('Function ReportEventA( hEventLog : THandle; wType, wCategory : Word; dwEventID : DWORD; lpUserSid : Pointer; wNumStrings : Word; dwDataSize : DWORD; lpStrings, lpRawData : Pointer) : BOOL');
 CL.AddDelphiFunction('Function ReportEventW( hEventLog : THandle; wType, wCategory : Word; dwEventID : DWORD; lpUserSid : Pointer; wNumStrings : Word; dwDataSize : DWORD; lpStrings, lpRawData : Pointer) : BOOL');
 CL.AddDelphiFunction('Function DuplicateToken( ExistingTokenHandle : THandle; ImpersonationLevel : TSecurityImpersonationLevel; DuplicateTokenHandle : PHandle) : BOOL');
 CL.AddDelphiFunction('Function GetKernelObjectSecurity( Handle : THandle; RequestedInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSecurityDescriptor; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ImpersonateNamedPipeClient( hNamedPipe : THandle) : BOOL');
 CL.AddDelphiFunction('Function ImpersonateSelf( ImpersonationLevel : TSecurityImpersonationLevel) : BOOL');
 CL.AddDelphiFunction('Function RevertToSelf : BOOL');
 CL.AddDelphiFunction('Function SetThreadToken( Thread : PHandle; Token : THandle) : BOOL');
 CL.AddDelphiFunction('Function AccessCheck( pSecurityDescriptor : PSecurityDescriptor; ClientToken : THandle; DesiredAccess : DWORD; const GenericMapping : TGenericMapping; var PrivilegeSet : TPrivilegeSet; var PrivilegeSetLength : DWORD; var GrantedAccess : DWORD; var AccessStatus : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByType( pSecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; ClientToken : THandle; DesiredAccess : DWORD; ObjectTypeList : PObjectTypeList; const GenericMapping : TGenericMapping; ObjectTypeListLength : DWORD; var PrivilegeSet : TPrivilegeSet; var PrivilegeSetLength : DWORD; var GrantedAccess : DWORD; var AccessStatus : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByTypeResultList( pSecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; ClientToken : THandle; DesiredAccess : DWORD; ObjectTypeList : PObjectTypeList; const GenericMapping : TGenericMapping; ObjectTypeListLength : DWORD; var PrivilegeSet : TPrivilegeSet; var PrivilegeSetLength : DWORD; var GrantedAccess : DWORD; var AccessStatusList : DWORD) : BOOL');
 CL.AddDelphiFunction('Function OpenProcessToken( ProcessHandle : THandle; DesiredAccess : DWORD; var TokenHandle : THandle) : BOOL');
 CL.AddDelphiFunction('Function OpenThreadToken( ThreadHandle : THandle; DesiredAccess : DWORD; OpenAsSelf : BOOL; var TokenHandle : THandle) : BOOL');
 CL.AddDelphiFunction('Function GetTokenInformation( TokenHandle : THandle; TokenInformationClass : TTokenInformationClass; TokenInformation : Pointer; TokenInformationLength : DWORD; var ReturnLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetTokenInformation( TokenHandle : THandle; TokenInformationClass : TTokenInformationClass; TokenInformation : Pointer; TokenInformationLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function AdjustTokenPrivileges( TokenHandle : THandle; DisableAllPrivileges : BOOL; const NewState : TTokenPrivileges; BufferLength : DWORD; var PreviousState : TTokenPrivileges; var ReturnLength : DWORD) : BOOL;');
 CL.AddDelphiFunction('Function AdjustTokenPrivileges( TokenHandle : THandle; DisableAllPrivileges : BOOL; const NewState : TTokenPrivileges; BufferLength : DWORD; PreviousState : PTokenPrivileges; var ReturnLength : DWORD) : BOOL;');
 CL.AddDelphiFunction('Function AdjustTokenGroups( TokenHandle : THandle; ResetToDefault : BOOL; const NewState : TTokenGroups; BufferLength : DWORD; var PreviousState : TTokenGroups; var ReturnLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function PrivilegeCheck( ClientToken : THandle; const RequiredPrivileges : TPrivilegeSet; var pfResult : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckAndAuditAlarm( SubsystemName : PChar; HandleId : Pointer; ObjectTypeName, ObjectName : PChar; SecurityDescriptor : PSecurityDescriptor; DesiredAccess : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatus, pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckAndAuditAlarmA( SubsystemName : PAnsiChar; HandleId : Pointer; ObjectTypeName, ObjectName : PAnsiChar; SecurityDescriptor : PSecurityDescriptor; DesiredAccess : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatus, pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckAndAuditAlarmW( SubsystemName : PWideChar; HandleId : Pointer; ObjectTypeName, ObjectName : PWideChar; SecurityDescriptor : PSecurityDescriptor; DesiredAccess : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatus, pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByTypeAndAuditAlarm( SubsystemName : PChar; HandleId : Pointer; ObjectTypeName, ObjectName : PChar; SecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; DesiredAccess : DWORD; AuditType : AUDIT_EVENT_TYPE; Flags : DWORD; ObjectTypeList : PObjectTypeList; ObjectTypeListLength : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatus, pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByTypeAndAuditAlarmA( SubsystemName : PAnsiChar; HandleId : Pointer; ObjectTypeName, ObjectName : PAnsiChar; SecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; DesiredAccess : DWORD; AuditType : AUDIT_EVENT_TYPE; Flags : DWORD; ObjectTypeList : PObjectTypeList; ObjectTypeListLength : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatus, pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByTypeAndAuditAlarmW( SubsystemName : PWideChar; HandleId : Pointer; ObjectTypeName, ObjectName : PWideChar; SecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; DesiredAccess : DWORD; AuditType : AUDIT_EVENT_TYPE; Flags : DWORD; ObjectTypeList : PObjectTypeList; ObjectTypeListLength : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatus, pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByTypeResultListAndAuditAlarm( SubsystemName : PChar; HandleId : Pointer; ObjectTypeName, ObjectName : PChar; SecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; DesiredAccess : DWORD; AuditType : AUDIT_EVENT_TYPE; Flags : DWORD; ObjectTypeList : PObjectTypeList; ObjectTypeListLength : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatusList : DWORD; var pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByTypeResultListAndAuditAlarmA( SubsystemName : PAnsiChar; HandleId : Pointer; ObjectTypeName, ObjectName : PAnsiChar; SecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; DesiredAccess : DWORD; AuditType : AUDIT_EVENT_TYPE; Flags : DWORD; ObjectTypeList : PObjectTypeList; ObjectTypeListLength : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatusList : DWORD; var pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AccessCheckByTypeResultListAndAuditAlarmW( SubsystemName : PWideChar; HandleId : Pointer; ObjectTypeName, ObjectName : PWideChar; SecurityDescriptor : PSecurityDescriptor; PrincipalSelfSid : PSID; DesiredAccess : DWORD; AuditType : AUDIT_EVENT_TYPE; Flags : DWORD; ObjectTypeList : PObjectTypeList; ObjectTypeListLength : DWORD; const GenericMapping : TGenericMapping; ObjectCreation : BOOL; var GrantedAccess : DWORD; var AccessStatusList : DWORD; var pfGenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectOpenAuditAlarm( SubsystemName : PChar; HandleId : Pointer; ObjectTypeName : PChar; ObjectName : PChar; pSecurityDescriptor : PSecurityDescriptor; ClientToken : THandle; DesiredAccess, GrantedAccess : DWORD; var Privileges : TPrivilegeSet; ObjectCreation, AccessGranted : BOOL; var GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectOpenAuditAlarmA( SubsystemName : PAnsiChar; HandleId : Pointer; ObjectTypeName : PAnsiChar; ObjectName : PAnsiChar; pSecurityDescriptor : PSecurityDescriptor; ClientToken : THandle; DesiredAccess, GrantedAccess : DWORD; var Privileges : TPrivilegeSet; ObjectCreation, AccessGranted : BOOL; var GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectOpenAuditAlarmW( SubsystemName : PWideChar; HandleId : Pointer; ObjectTypeName : PWideChar; ObjectName : PWideChar; pSecurityDescriptor : PSecurityDescriptor; ClientToken : THandle; DesiredAccess, GrantedAccess : DWORD; var Privileges : TPrivilegeSet; ObjectCreation, AccessGranted : BOOL; var GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectPrivilegeAuditAlarm( SubsystemName : PChar; HandleId : Pointer; ClientToken : THandle; DesiredAccess : DWORD; var Privileges : TPrivilegeSet; AccessGranted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectPrivilegeAuditAlarmA( SubsystemName : PAnsiChar; HandleId : Pointer; ClientToken : THandle; DesiredAccess : DWORD; var Privileges : TPrivilegeSet; AccessGranted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectPrivilegeAuditAlarmW( SubsystemName : PWideChar; HandleId : Pointer; ClientToken : THandle; DesiredAccess : DWORD; var Privileges : TPrivilegeSet; AccessGranted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectCloseAuditAlarm( SubsystemName : PChar; HandleId : Pointer; GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectCloseAuditAlarmA( SubsystemName : PAnsiChar; HandleId : Pointer; GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectCloseAuditAlarmW( SubsystemName : PWideChar; HandleId : Pointer; GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectDeleteAuditAlarm( SubsystemName : PChar; HandleId : Pointer; GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectDeleteAuditAlarmA( SubsystemName : PAnsiChar; HandleId : Pointer; GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ObjectDeleteAuditAlarmW( SubsystemName : PWideChar; HandleId : Pointer; GenerateOnClose : BOOL) : BOOL');
 CL.AddDelphiFunction('Function PrivilegedServiceAuditAlarm( SubsystemName, ServiceName : PChar; ClientToken : THandle; var Privileges : TPrivilegeSet; AccessGranted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function PrivilegedServiceAuditAlarmA( SubsystemName, ServiceName : PAnsiChar; ClientToken : THandle; var Privileges : TPrivilegeSet; AccessGranted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function PrivilegedServiceAuditAlarmW( SubsystemName, ServiceName : PWideChar; ClientToken : THandle; var Privileges : TPrivilegeSet; AccessGranted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function IsValidSid( pSid : Pointer) : BOOL');
 CL.AddDelphiFunction('Function EqualSid( pSid1, pSid2 : Pointer) : BOOL');
 CL.AddDelphiFunction('Function EqualPrefixSid( pSid1, pSid2 : Pointer) : BOOL');
 CL.AddDelphiFunction('Function GetSidLengthRequired( nSubAuthorityCount : UCHAR) : DWORD');
 CL.AddDelphiFunction('Function AllocateAndInitializeSid( const pIdentifierAuthority : TSIDIdentifierAuthority; nSubAuthorityCount : Byte; nSubAuthority0, nSubAuthority1 : DWORD; nSubAuthority2, nSubAuthority3, nSubAuthority4 : DWORD; nSubAuthority5, nSubAuthority6, nSubAuthority7 : DWORD; var pSid : Pointer) : BOOL');
 CL.AddDelphiFunction('Function FreeSid( pSid : Pointer) : Pointer');
 CL.AddDelphiFunction('Function InitializeSid( Sid : Pointer; const pIdentifierAuthority : TSIDIdentifierAuthority; nSubAuthorityCount : Byte) : BOOL');
 CL.AddDelphiFunction('Function GetSidIdentifierAuthority( pSid : Pointer) : PSIDIdentifierAuthority');
 CL.AddDelphiFunction('Function GetSidSubAuthority( pSid : Pointer; nSubAuthority : DWORD) : PDWORD');
 CL.AddDelphiFunction('Function GetSidSubAuthorityCount( pSid : Pointer) : PUCHAR');
 CL.AddDelphiFunction('Function GetLengthSid( pSid : Pointer) : DWORD');
 CL.AddDelphiFunction('Function CopySid( nDestinationSidLength : DWORD; pDestinationSid, pSourceSid : Pointer) : BOOL');
 CL.AddDelphiFunction('Function AreAllAccessesGranted( GrantedAccess, DesiredAccess : DWORD) : BOOL');
 CL.AddDelphiFunction('Function AreAnyAccessesGranted( GrantedAccess, DesiredAccess : DWORD) : BOOL');
 CL.AddDelphiFunction('Procedure MapGenericMask( var AccessMask : DWORD; const GenericMapping : TGenericMapping)');
 CL.AddDelphiFunction('Function IsValidAcl( const pAcl : TACL) : BOOL');
 CL.AddDelphiFunction('Function InitializeAcl( var pAcl : TACL; nAclLength, dwAclRevision : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetAclInformation( const pAcl : TACL; pAclInformation : Pointer; nAclInformationLength : DWORD; dwAclInformationClass : TAclInformationClass) : BOOL');
 CL.AddDelphiFunction('Function SetAclInformation( var pAcl : TACL; pAclInformation : Pointer; nAclInformationLength : DWORD; dwAclInformationClass : TAclInformationClass) : BOOL');
 CL.AddDelphiFunction('Function AddAce( var pAcl : TACL; dwAceRevision, dwStartingAceIndex : DWORD; pAceList : Pointer; nAceListLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function DeleteAce( var pAcl : TACL; dwAceIndex : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetAce( const pAcl : TACL; dwAceIndex : DWORD; var pAce : Pointer) : BOOL');
 CL.AddDelphiFunction('Function AddAccessAllowedAce( var pAcl : TACL; dwAceRevision : DWORD; AccessMask : DWORD; pSid : PSID) : BOOL');
 CL.AddDelphiFunction('Function AddAccessAllowedAceEx( var pAcl : TACL; dwAceRevision : DWORD; AceFlags : DWORD; AccessMask : DWORD; pSid : PSID) : BOOL');
 CL.AddDelphiFunction('Function AddAccessDeniedAce( var pAcl : TACL; dwAceRevision : DWORD; AccessMask : DWORD; pSid : PSID) : BOOL');
 CL.AddDelphiFunction('Function AddAccessDeniedAceEx( var pAcl : TACL; dwAceRevision : DWORD; ACEFlags : DWORD; AccessMask : DWORD; pSid : PSID) : BOOL');
 CL.AddDelphiFunction('Function AddAuditAccessAce( var pAcl : TACL; dwAceRevision : DWORD; dwAccessMask : DWORD; pSid : Pointer; bAuditSuccess, bAuditFailure : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AddAuditAccessAceEx( var pAcl : TACL; dwAceRevision : DWORD; AceFlags : DWORD; dwAccessMask : DWORD; pSid : Pointer; bAuditSuccess, bAuditFailure : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AddAccessAllowedObjectAce( var pAcl : TACL; dwAceRevision : DWORD; AceFlags : DWORD; AccessMask : DWORD; ObjectTypeGuid, InheritedObjectTypeGuid : PGuid; pSid : Pointer) : BOOL');
 CL.AddDelphiFunction('Function AddAccessDeniedObjectAce( var pAcl : TACL; dwAceRevision : DWORD; AceFlags : DWORD; AccessMask : DWORD; ObjectTypeGuid, InheritedObjectTypeGuid : PGuid; pSid : Pointer) : BOOL');
 CL.AddDelphiFunction('Function AddAuditAccessObjectAce( var pAcl : TACL; dwAceRevision : DWORD; AceFlags : DWORD; AccessMask : DWORD; ObjectTypeGuid, InheritedObjectTypeGuid : PGuid; pSid : Pointer; bAuditSuccess, bAuditFailure : BOOL) : BOOL');
 CL.AddDelphiFunction('Function FindFirstFreeAce( var pAcl : TACL; var pAce : Pointer) : BOOL');
 CL.AddDelphiFunction('Function InitializeSecurityDescriptor( pSecurityDescriptor : PSecurityDescriptor; dwRevision : DWORD) : BOOL');
 CL.AddDelphiFunction('Function IsValidSecurityDescriptor( pSecurityDescriptor : PSecurityDescriptor) : BOOL');
 CL.AddDelphiFunction('Function GetSecurityDescriptorLength( pSecurityDescriptor : PSecurityDescriptor) : DWORD');
 CL.AddDelphiFunction('Function GetSecurityDescriptorControl( pSecurityDescriptor : PSecurityDescriptor; var pControl : SECURITY_DESCRIPTOR_CONTROL; var lpdwRevision : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetSecurityDescriptorControl( pSecurityDescriptor : PSecurityDescriptor; ControlBitsOfInterest, ControlBitsToSet : SECURITY_DESCRIPTOR_CONTROL) : BOOL');
 CL.AddDelphiFunction('Function SetSecurityDescriptorDacl( pSecurityDescriptor : PSecurityDescriptor; bDaclPresent : BOOL; pDacl : PACL; bDaclDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetSecurityDescriptorDacl( pSecurityDescriptor : PSecurityDescriptor; var lpbDaclPresent : BOOL; var pDacl : PACL; var lpbDaclDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function SetSecurityDescriptorSacl( pSecurityDescriptor : PSecurityDescriptor; bSaclPresent : BOOL; pSacl : PACL; bSaclDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetSecurityDescriptorSacl( pSecurityDescriptor : PSecurityDescriptor; var lpbSaclPresent : BOOL; var pSacl : PACL; var lpbSaclDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function SetSecurityDescriptorOwner( pSecurityDescriptor : PSecurityDescriptor; pOwner : PSID; bOwnerDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetSecurityDescriptorOwner( pSecurityDescriptor : PSecurityDescriptor; var pOwner : PSID; var lpbOwnerDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function SetSecurityDescriptorGroup( pSecurityDescriptor : PSecurityDescriptor; pGroup : PSID; bGroupDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetSecurityDescriptorGroup( pSecurityDescriptor : PSecurityDescriptor; var pGroup : PSID; var lpbGroupDefaulted : BOOL) : BOOL');
 CL.AddDelphiFunction('Function CreatePrivateObjectSecurity( ParentDescriptor, CreatorDescriptor : PSecurityDescriptor; var NewDescriptor : PSecurityDescriptor; IsDirectoryObject : BOOL; Token : THandle; const GenericMapping : TGenericMapping) : BOOL');
 CL.AddDelphiFunction('Function ConvertToAutoInheritPrivateObjectSecurity( ParentDescriptor, CurrentSecurityDescriptor : PSecurityDescriptor; var NewDescriptor : PSecurityDescriptor; ObjectType : PGUID; IsDirectoryObject : BOOL; const GenericMapping : TGenericMapping) : BOOL');
 CL.AddDelphiFunction('Function CreatePrivateObjectSecurityEx( ParentDescriptor, CreatorDescriptor : PSecurityDescriptor; var NewDescriptor : PSecurityDescriptor; ObjectType : PGUID; IsContainerObject : BOOL; AutoInheritFlags : ULONG; Token : THandle; const GenericMapping : TGenericMapping) : BOOL');
 CL.AddDelphiFunction('Function SetPrivateObjectSecurity( SecurityInformation : SECURITY_INFORMATION; ModificationDescriptor : PSecurityDescriptor; var ObjectsSecurityDescriptor : PSecurityDescriptor; const GenericMapping : TGenericMapping; Token : THandle) : BOOL');
 CL.AddDelphiFunction('Function SetPrivateObjectSecurityEx( SecurityInformation : SECURITY_INFORMATION; ModificationDescriptor : PSecurityDescriptor; var ObjectsSecurityDescriptor : PSecurityDescriptor; AutoInheritFlags : ULONG; const GenericMapping : TGenericMapping; Token : THandle) : BOOL');
 CL.AddDelphiFunction('Function GetPrivateObjectSecurity( ObjectDescriptor : PSecurityDescriptor; SecurityInformation : SECURITY_INFORMATION; ResultantDescriptor : PSecurityDescriptor; DescriptorLength : DWORD; var ReturnLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function DestroyPrivateObjectSecurity( var ObjectDescriptor : PSecurityDescriptor) : BOOL');
 CL.AddDelphiFunction('Function MakeSelfRelativeSD( pAbsoluteSecurityDescriptor : PSecurityDescriptor; pSelfRelativeSecurityDescriptor : PSecurityDescriptor; var lpdwBufferLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MakeAbsoluteSD( pSelfRelativeSecurityDescriptor : PSecurityDescriptor; pAbsoluteSecurityDescriptor : PSecurityDescriptor; var lpdwAbsoluteSecurityDescriptorSi : DWORD; var pDacl : TACL; var lpdwDaclSize : DWORD; var pSacl : TACL; var lpdwSaclSize : DWORD; pOwner : PSID; var lpdwOwnerSize : DWORD; pPrimaryGroup : Pointer; var lpdwPrimaryGroupSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetFileSecurity( lpFileName : PChar; SecurityInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSecurityDescriptor) : BOOL');
 CL.AddDelphiFunction('Function SetFileSecurityA( lpFileName : PAnsiChar; SecurityInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSecurityDescriptor) : BOOL');
 CL.AddDelphiFunction('Function SetFileSecurityW( lpFileName : PWideChar; SecurityInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSecurityDescriptor) : BOOL');
 CL.AddDelphiFunction('Function GetFileSecurity( lpFileName : PChar; RequestedInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSecurityDescriptor; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetFileSecurityA( lpFileName : PAnsiChar; RequestedInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSecurityDescriptor; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetFileSecurityW( lpFileName : PWideChar; RequestedInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSecurityDescriptor; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetKernelObjectSecurity( Handle : THandle; SecurityInformation : SECURITY_INFORMATION; SecurityDescriptor : PSecurityDescriptor) : BOOL');
 CL.AddDelphiFunction('Function FindFirstChangeNotification( lpPathName : PChar; bWatchSubtree : BOOL; dwNotifyFilter : DWORD) : THandle');
 CL.AddDelphiFunction('Function FindFirstChangeNotificationA( lpPathName : PAnsiChar; bWatchSubtree : BOOL; dwNotifyFilter : DWORD) : THandle');
 CL.AddDelphiFunction('Function FindFirstChangeNotificationW( lpPathName : PWideChar; bWatchSubtree : BOOL; dwNotifyFilter : DWORD) : THandle');
 CL.AddDelphiFunction('Function FindNextChangeNotification( hChangeHandle : THandle) : BOOL');
 CL.AddDelphiFunction('Function FindCloseChangeNotification( hChangeHandle : THandle) : BOOL');
 CL.AddDelphiFunction('Function ReadDirectoryChanges( hDirectory : THandle; lpBuffer : Pointer; nBufferLength : DWORD; bWatchSubtree : Bool; dwNotifyFilter : DWORD; lpBytesReturned : LPDWORD; lpOverlapped : POverlapped; lpCompletionRoutine : FARPROC) : BOOL');
 CL.AddDelphiFunction('Function ReadDirectoryChangesW( hDirectory : THandle; lpBuffer : Pointer; nBufferLength : DWORD; bWatchSubtree : Bool; dwNotifyFilter : DWORD; lpBytesReturned : LPDWORD; lpOverlapped : POverlapped; lpCompletionRoutine : FARPROC) : BOOL');
 CL.AddDelphiFunction('Function VirtualLock( lpAddress : Pointer; dwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function VirtualUnlock( lpAddress : Pointer; dwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function MapViewOfFileEx( hFileMappingObject : THandle; dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap : DWORD; lpBaseAddress : Pointer) : Pointer');
 CL.AddDelphiFunction('Function SetPriorityClass( hProcess : THandle; dwPriorityClass : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetPriorityClass( hProcess : THandle) : DWORD');
 CL.AddDelphiFunction('Function IsBadReadPtr( lp : Pointer; ucb : UINT) : BOOL');
 CL.AddDelphiFunction('Function IsBadWritePtr( lp : Pointer; ucb : UINT) : BOOL');
 CL.AddDelphiFunction('Function IsBadHugeReadPtr( lp : Pointer; ucb : UINT) : BOOL');
 CL.AddDelphiFunction('Function IsBadHugeWritePtr( lp : Pointer; ucb : UINT) : BOOL');
 CL.AddDelphiFunction('Function IsBadCodePtr( lpfn : FARPROC) : BOOL');
 CL.AddDelphiFunction('Function IsBadStringPtr( lpsz : PChar; ucchMax : UINT) : BOOL');
 CL.AddDelphiFunction('Function IsBadStringPtrA( lpsz : PAnsiChar; ucchMax : UINT) : BOOL');
 CL.AddDelphiFunction('Function IsBadStringPtrW( lpsz : PWideChar; ucchMax : UINT) : BOOL');
 CL.AddDelphiFunction('Function LookupAccountSid( lpSystemName : PChar; Sid : PSID; Name : PChar; var cbName : DWORD; ReferencedDomainName : PChar; var cbReferencedDomainName : DWORD; var peUse : SID_NAME_USE) : BOOL');
 CL.AddDelphiFunction('Function LookupAccountSidA( lpSystemName : PAnsiChar; Sid : PSID; Name : PAnsiChar; var cbName : DWORD; ReferencedDomainName : PAnsiChar; var cbReferencedDomainName : DWORD; var peUse : SID_NAME_USE) : BOOL');
 CL.AddDelphiFunction('Function LookupAccountSidW( lpSystemName : PWideChar; Sid : PSID; Name : PWideChar; var cbName : DWORD; ReferencedDomainName : PWideChar; var cbReferencedDomainName : DWORD; var peUse : SID_NAME_USE) : BOOL');
 CL.AddDelphiFunction('Function LookupAccountName( lpSystemName, lpAccountName : PChar; Sid : PSID; var cbSid : DWORD; ReferencedDomainName : PChar; var cbReferencedDomainName : DWORD; var peUse : SID_NAME_USE) : BOOL');
 CL.AddDelphiFunction('Function LookupAccountNameA( lpSystemName, lpAccountName : PAnsiChar; Sid : PSID; var cbSid : DWORD; ReferencedDomainName : PAnsiChar; var cbReferencedDomainName : DWORD; var peUse : SID_NAME_USE) : BOOL');
 CL.AddDelphiFunction('Function LookupAccountNameW( lpSystemName, lpAccountName : PWideChar; Sid : PSID; var cbSid : DWORD; ReferencedDomainName : PWideChar; var cbReferencedDomainName : DWORD; var peUse : SID_NAME_USE) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeValue( lpSystemName, lpName : PChar; var lpLuid : TLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeValueA( lpSystemName, lpName : PAnsiChar; var lpLuid : TLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeValueW( lpSystemName, lpName : PWideChar; var lpLuid : TLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeName( lpSystemName : PChar; var lpLuid : TLargeInteger; lpName : PChar; var cbName : DWORD) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeNameA( lpSystemName : PAnsiChar; var lpLuid : TLargeInteger; lpName : PAnsiChar; var cbName : DWORD) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeNameW( lpSystemName : PWideChar; var lpLuid : TLargeInteger; lpName : PWideChar; var cbName : DWORD) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeDisplayName( lpSystemName, lpName : PAnsiChar; lpDisplayName : PChar; var cbDisplayName, lpLanguageId : DWORD) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeDisplayNameA( lpSystemName, lpName : PAnsiChar; lpDisplayName : PAnsiChar; var cbDisplayName, lpLanguageId : DWORD) : BOOL');
 CL.AddDelphiFunction('Function LookupPrivilegeDisplayNameW( lpSystemName, lpName : PAnsiChar; lpDisplayName : PWideChar; var cbDisplayName, lpLanguageId : DWORD) : BOOL');
 CL.AddDelphiFunction('Function AllocateLocallyUniqueId( var Luid : TLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function BuildCommDCB( lpDef : PChar; var lpDCB : TDCB) : BOOL');
 CL.AddDelphiFunction('Function BuildCommDCBA( lpDef : PAnsiChar; var lpDCB : TDCB) : BOOL');
 CL.AddDelphiFunction('Function BuildCommDCBW( lpDef : PWideChar; var lpDCB : TDCB) : BOOL');
 CL.AddDelphiFunction('Function BuildCommDCBAndTimeouts( lpDef : PChar; var lpDCB : TDCB; var lpCommTimeouts : TCommTimeouts) : BOOL');
 CL.AddDelphiFunction('Function BuildCommDCBAndTimeoutsA( lpDef : PAnsiChar; var lpDCB : TDCB; var lpCommTimeouts : TCommTimeouts) : BOOL');
 CL.AddDelphiFunction('Function BuildCommDCBAndTimeoutsW( lpDef : PWideChar; var lpDCB : TDCB; var lpCommTimeouts : TCommTimeouts) : BOOL');
 CL.AddDelphiFunction('Function CommConfigDialog( lpszName : PChar; hWnd : HWND; var lpCC : TCommConfig) : BOOL');
 CL.AddDelphiFunction('Function CommConfigDialogA( lpszName : PAnsiChar; hWnd : HWND; var lpCC : TCommConfig) : BOOL');
 CL.AddDelphiFunction('Function CommConfigDialogW( lpszName : PWideChar; hWnd : HWND; var lpCC : TCommConfig) : BOOL');
 CL.AddDelphiFunction('Function GetDefaultCommConfig( lpszName : PChar; var lpCC : TCommConfig; var lpdwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetDefaultCommConfigA( lpszName : PAnsiChar; var lpCC : TCommConfig; var lpdwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetDefaultCommConfigW( lpszName : PWideChar; var lpCC : TCommConfig; var lpdwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetDefaultCommConfig( lpszName : PChar; lpCC : PCommConfig; dwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetDefaultCommConfigA( lpszName : PAnsiChar; lpCC : PCommConfig; dwSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetDefaultCommConfigW( lpszName : PWideChar; lpCC : PCommConfig; dwSize : DWORD) : BOOL');
 CL.AddConstantN('MAX_COMPUTERNAME_LENGTH','LongInt').SetInt( 15);
 CL.AddDelphiFunction('Function GetComputerName( lpBuffer : PChar; var nSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetComputerNameA( lpBuffer : PAnsiChar; var nSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetComputerNameW( lpBuffer : PWideChar; var nSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetComputerName( lpComputerName : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetComputerNameA( lpComputerName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetComputerNameW( lpComputerName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetUserName( lpBuffer : PChar; var nSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetUserNameA( lpBuffer : PAnsiChar; var nSize : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetUserNameW( lpBuffer : PWideChar; var nSize : DWORD) : BOOL');
 CL.AddConstantN('LOGON32_LOGON_INTERACTIVE','LongInt').SetInt( 2);
 CL.AddConstantN('LOGON32_LOGON_NETWORK','LongInt').SetInt( 3);
 CL.AddConstantN('LOGON32_LOGON_BATCH','LongInt').SetInt( 4);
 CL.AddConstantN('LOGON32_LOGON_SERVICE','LongInt').SetInt( 5);
 CL.AddConstantN('LOGON32_PROVIDER_DEFAULT','LongInt').SetInt( 0);
 CL.AddConstantN('LOGON32_PROVIDER_WINNT35','LongInt').SetInt( 1);
 CL.AddConstantN('LOGON32_PROVIDER_WINNT40','LongInt').SetInt( 2);
 CL.AddConstantN('LOGON32_PROVIDER_WINNT50','LongInt').SetInt( 3);
 CL.AddDelphiFunction('Function LogonUser( lpszUsername, lpszDomain, lpszPassword : PChar; dwLogonType, dwLogonProvider : DWORD; var phToken : THandle) : BOOL');
 CL.AddDelphiFunction('Function LogonUserA( lpszUsername, lpszDomain, lpszPassword : PAnsiChar; dwLogonType, dwLogonProvider : DWORD; var phToken : THandle) : BOOL');
 CL.AddDelphiFunction('Function LogonUserW( lpszUsername, lpszDomain, lpszPassword : PWideChar; dwLogonType, dwLogonProvider : DWORD; var phToken : THandle) : BOOL');
 CL.AddDelphiFunction('Function ImpersonateLoggedOnUser( hToken : THandle) : BOOL');
 CL.AddDelphiFunction('Function CreateProcessAsUser( hToken : THandle; lpApplicationName : PChar; lpCommandLine : PChar; lpProcessAttributes : PSecurityAttributes; lpThreadAttributes : PSecurityAttributes; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : Pointer; lpCurrentDirectory : PChar; const lpStartupInfo : TStartupInfo; var lpProcessInformation : TProcessInformation) : BOOL');
 CL.AddDelphiFunction('Function CreateProcessAsUserA( hToken : THandle; lpApplicationName : PAnsiChar; lpCommandLine : PAnsiChar; lpProcessAttributes : PSecurityAttributes; lpThreadAttributes : PSecurityAttributes; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : Pointer; lpCurrentDirectory : PAnsiChar; const lpStartupInfo : TStartupInfo; var lpProcessInformation : TProcessInformation) : BOOL');
 CL.AddDelphiFunction('Function CreateProcessAsUserW( hToken : THandle; lpApplicationName : PWideChar; lpCommandLine : PWideChar; lpProcessAttributes : PSecurityAttributes; lpThreadAttributes : PSecurityAttributes; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : Pointer; lpCurrentDirectory : PWideChar; const lpStartupInfo : TStartupInfo; var lpProcessInformation : TProcessInformation) : BOOL');
 CL.AddDelphiFunction('Function DuplicateTokenEx( hExistingToken : THandle; dwDesiredAccess : DWORD; lpTokenAttributes : PSecurityAttributes; ImpersonationLevel : TSecurityImpersonationLevel; TokenType : TTokenType; var phNewToken : THandle) : BOOL');
 CL.AddConstantN('HW_PROFILE_GUIDLEN','LongInt').SetInt( 39);
 CL.AddConstantN('MAX_PROFILE_LEN','LongInt').SetInt( 80);
 CL.AddConstantN('DOCKINFO_UNDOCKED','LongWord').SetUInt( $1);
 CL.AddConstantN('DOCKINFO_DOCKED','LongWord').SetUInt( $2);
 CL.AddConstantN('DOCKINFO_USER_SUPPLIED','LongWord').SetUInt( $4);
  CL.AddTypeS('tagHW_PROFILE_INFO', 'tagHW_PROFILE_INFOA');
  CL.AddTypeS('THWProfileInfoA', 'tagHW_PROFILE_INFOA');
  CL.AddTypeS('THWProfileInfoW', 'tagHW_PROFILE_INFOW');
  CL.AddTypeS('THWProfileInfo', 'THWProfileInfoA');
  CL.AddTypeS('HW_PROFILE_INFOA', 'tagHW_PROFILE_INFOA');
  CL.AddTypeS('HW_PROFILE_INFOW', 'tagHW_PROFILE_INFOW');
  CL.AddTypeS('HW_PROFILE_INFO', 'HW_PROFILE_INFOA');
 CL.AddDelphiFunction('Function GetCurrentHwProfile( var lpHwProfileInfo : THWProfileInfo) : BOOL');
 CL.AddDelphiFunction('Function GetCurrentHwProfileA( var lpHwProfileInfo : THWProfileInfoA) : BOOL');
 CL.AddDelphiFunction('Function GetCurrentHwProfileW( var lpHwProfileInfo : THWProfileInfoW) : BOOL');
 CL.AddDelphiFunction('Function QueryPerformanceCounter( var lpPerformanceCount : TLargeInteger) : BOOL');
 CL.AddDelphiFunction('Function QueryPerformanceFrequency( var lpFrequency : TLargeInteger) : BOOL');
  CL.AddTypeS('POSVersionInfoA', '^TOSVersionInfoA // will not work');
  CL.AddTypeS('POSVersionInfoW', '^TOSVersionInfoW // will not work');
  CL.AddTypeS('POSVersionInfo', 'POSVersionInfoA');
  CL.AddTypeS('_OSVERSIONINFO', '_OSVERSIONINFOA');
  CL.AddTypeS('TOSVersionInfoA', '_OSVERSIONINFOA');
  CL.AddTypeS('TOSVersionInfoW', '_OSVERSIONINFOW');
  CL.AddTypeS('TOSVersionInfo', 'TOSVersionInfoA');
  CL.AddTypeS('OSVERSIONINFOA', '_OSVERSIONINFOA');
  CL.AddTypeS('OSVERSIONINFOW', '_OSVERSIONINFOW');
  CL.AddTypeS('OSVERSIONINFO', 'OSVERSIONINFOA');
 CL.AddConstantN('VER_PLATFORM_WIN32s','LongInt').SetInt( 0);
 CL.AddConstantN('VER_PLATFORM_WIN32_WINDOWS','LongInt').SetInt( 1);
 CL.AddConstantN('VER_PLATFORM_WIN32_NT','LongInt').SetInt( 2);
 CL.AddConstantN('VER_PLATFORM_WIN32_CE','LongInt').SetInt( 3);
 CL.AddDelphiFunction('Function GetVersionEx( var lpVersionInformation : TOSVersionInfo) : BOOL');
 CL.AddDelphiFunction('Function GetVersionExA( var lpVersionInformation : TOSVersionInfo) : BOOL');
 CL.AddDelphiFunction('Function GetVersionExW( var lpVersionInformation : TOSVersionInfo) : BOOL');
 CL.AddConstantN('FACILITY_WINDOWS','LongInt').SetInt( 8);
 CL.AddConstantN('FACILITY_STORAGE','LongInt').SetInt( 3);
 CL.AddConstantN('FACILITY_RPC','LongInt').SetInt( 1);
 CL.AddConstantN('FACILITY_SSPI','LongInt').SetInt( 9);
 CL.AddConstantN('FACILITY_WIN32','LongInt').SetInt( 7);
 CL.AddConstantN('FACILITY_CONTROL','LongInt').SetInt( 10);
 CL.AddConstantN('FACILITY_NULL','LongInt').SetInt( 0);
 CL.AddConstantN('FACILITY_INTERNET','LongInt').SetInt( 12);
 CL.AddConstantN('FACILITY_ITF','LongInt').SetInt( 4);
 CL.AddConstantN('FACILITY_DISPATCH','LongInt').SetInt( 2);
 CL.AddConstantN('FACILITY_CERT','LongInt').SetInt( 11);
 CL.AddConstantN('ERROR_SUCCESS','LongInt').SetInt( 0);
 CL.AddConstantN('NO_ERROR','LongInt').SetInt( 0);
 CL.AddConstantN('ERROR_INVALID_FUNCTION','LongInt').SetInt( 1);
 CL.AddConstantN('ERROR_FILE_NOT_FOUND','LongInt').SetInt( 2);
 CL.AddConstantN('ERROR_PATH_NOT_FOUND','LongInt').SetInt( 3);
 CL.AddConstantN('ERROR_TOO_MANY_OPEN_FILES','LongInt').SetInt( 4);
 CL.AddConstantN('ERROR_ACCESS_DENIED','LongInt').SetInt( 5);
 CL.AddConstantN('ERROR_INVALID_HANDLE','LongInt').SetInt( 6);
 CL.AddConstantN('ERROR_ARENA_TRASHED','LongInt').SetInt( 7);
 CL.AddConstantN('ERROR_NOT_ENOUGH_MEMORY','LongInt').SetInt( 8);
 CL.AddConstantN('ERROR_INVALID_BLOCK','LongInt').SetInt( 9);
 CL.AddConstantN('ERROR_BAD_ENVIRONMENT','LongInt').SetInt( 10);
 CL.AddConstantN('ERROR_BAD_FORMAT','LongInt').SetInt( 11);
 CL.AddConstantN('ERROR_INVALID_ACCESS','LongInt').SetInt( 12);
 CL.AddConstantN('ERROR_INVALID_DATA','LongInt').SetInt( 13);
 CL.AddConstantN('ERROR_OUTOFMEMORY','LongInt').SetInt( 14);
 CL.AddConstantN('ERROR_INVALID_DRIVE','LongInt').SetInt( 15);
 CL.AddConstantN('ERROR_CURRENT_DIRECTORY','LongWord').SetUInt( $10);
 CL.AddConstantN('ERROR_NOT_SAME_DEVICE','LongInt').SetInt( 17);
 CL.AddConstantN('ERROR_NO_MORE_FILES','LongInt').SetInt( 18);
 CL.AddConstantN('ERROR_WRITE_PROTECT','LongInt').SetInt( 19);
 CL.AddConstantN('ERROR_BAD_UNIT','LongInt').SetInt( 20);
 CL.AddConstantN('ERROR_NOT_READY','LongInt').SetInt( 21);
 CL.AddConstantN('ERROR_BAD_COMMAND','LongInt').SetInt( 22);
 CL.AddConstantN('ERROR_CRC','LongInt').SetInt( 23);
 CL.AddConstantN('ERROR_BAD_LENGTH','LongInt').SetInt( 24);
 CL.AddConstantN('ERROR_SEEK','LongInt').SetInt( 25);
 CL.AddConstantN('ERROR_NOT_DOS_DISK','LongInt').SetInt( 26);
 CL.AddConstantN('ERROR_SECTOR_NOT_FOUND','LongInt').SetInt( 27);
 CL.AddConstantN('ERROR_OUT_OF_PAPER','LongInt').SetInt( 28);
 CL.AddConstantN('ERROR_WRITE_FAULT','LongInt').SetInt( 29);
 CL.AddConstantN('ERROR_READ_FAULT','LongInt').SetInt( 30);
 CL.AddConstantN('ERROR_GEN_FAILURE','LongInt').SetInt( 31);
 CL.AddConstantN('ERROR_SHARING_VIOLATION','LongWord').SetUInt( $20);
 CL.AddConstantN('ERROR_LOCK_VIOLATION','LongInt').SetInt( 33);
 CL.AddConstantN('ERROR_WRONG_DISK','LongInt').SetInt( 34);
 CL.AddConstantN('ERROR_SHARING_BUFFER_EXCEEDED','LongInt').SetInt( 36);
 CL.AddConstantN('ERROR_HANDLE_EOF','LongInt').SetInt( 38);
 CL.AddConstantN('ERROR_HANDLE_DISK_FULL','LongInt').SetInt( 39);
 CL.AddConstantN('ERROR_NOT_SUPPORTED','LongInt').SetInt( 50);
 CL.AddConstantN('ERROR_REM_NOT_LIST','LongInt').SetInt( 51);
 CL.AddConstantN('ERROR_DUP_NAME','LongInt').SetInt( 52);
 CL.AddConstantN('ERROR_BAD_NETPATH','LongInt').SetInt( 53);
 CL.AddConstantN('ERROR_NETWORK_BUSY','LongInt').SetInt( 54);
 CL.AddConstantN('ERROR_DEV_NOT_EXIST','LongInt').SetInt( 55);
 CL.AddConstantN('ERROR_TOO_MANY_CMDS','LongInt').SetInt( 56);
 CL.AddConstantN('ERROR_ADAP_HDW_ERR','LongInt').SetInt( 57);
 CL.AddConstantN('ERROR_BAD_NET_RESP','LongInt').SetInt( 58);
 CL.AddConstantN('ERROR_UNEXP_NET_ERR','LongInt').SetInt( 59);
 CL.AddConstantN('ERROR_BAD_REM_ADAP','LongInt').SetInt( 60);
 CL.AddConstantN('ERROR_PRINTQ_FULL','LongInt').SetInt( 61);
 CL.AddConstantN('ERROR_NO_SPOOL_SPACE','LongInt').SetInt( 62);
 CL.AddConstantN('ERROR_PRINT_CANCELLED','LongInt').SetInt( 63);
 CL.AddConstantN('ERROR_NETNAME_DELETED','LongWord').SetUInt( $40);
 CL.AddConstantN('ERROR_NETWORK_ACCESS_DENIED','LongInt').SetInt( 65);
 CL.AddConstantN('ERROR_BAD_DEV_TYPE','LongInt').SetInt( 66);
 CL.AddConstantN('ERROR_BAD_NET_NAME','LongInt').SetInt( 67);
 CL.AddConstantN('ERROR_TOO_MANY_NAMES','LongInt').SetInt( 68);
 CL.AddConstantN('ERROR_TOO_MANY_SESS','LongInt').SetInt( 69);
 CL.AddConstantN('ERROR_SHARING_PAUSED','LongInt').SetInt( 70);
 CL.AddConstantN('ERROR_REQ_NOT_ACCEP','LongInt').SetInt( 71);
 CL.AddConstantN('ERROR_REDIR_PAUSED','LongInt').SetInt( 72);
 CL.AddConstantN('ERROR_FILE_EXISTS','LongInt').SetInt( 80);
 CL.AddConstantN('ERROR_CANNOT_MAKE','LongInt').SetInt( 82);
 CL.AddConstantN('ERROR_FAIL_I24','LongInt').SetInt( 83);
 CL.AddConstantN('ERROR_OUT_OF_STRUCTURES','LongInt').SetInt( 84);
 CL.AddConstantN('ERROR_ALREADY_ASSIGNED','LongInt').SetInt( 85);
 CL.AddConstantN('ERROR_INVALID_PASSWORD','LongInt').SetInt( 86);
 CL.AddConstantN('ERROR_INVALID_PARAMETER','LongInt').SetInt( 87);
 CL.AddConstantN('ERROR_NET_WRITE_FAULT','LongInt').SetInt( 88);
 CL.AddConstantN('ERROR_NO_PROC_SLOTS','LongInt').SetInt( 89);
 CL.AddConstantN('ERROR_TOO_MANY_SEMAPHORES','LongInt').SetInt( 100);
 CL.AddConstantN('ERROR_EXCL_SEM_ALREADY_OWNED','LongInt').SetInt( 101);
 CL.AddConstantN('ERROR_SEM_IS_SET','LongInt').SetInt( 102);
 CL.AddConstantN('ERROR_TOO_MANY_SEM_REQUESTS','LongInt').SetInt( 103);
 CL.AddConstantN('ERROR_INVALID_AT_INTERRUPT_TIME','LongInt').SetInt( 104);
 CL.AddConstantN('ERROR_SEM_OWNER_DIED','LongInt').SetInt( 105);
 CL.AddConstantN('ERROR_SEM_USER_LIMIT','LongInt').SetInt( 106);
 CL.AddConstantN('ERROR_DISK_CHANGE','LongInt').SetInt( 107);
 CL.AddConstantN('ERROR_DRIVE_LOCKED','LongInt').SetInt( 108);
 CL.AddConstantN('ERROR_BROKEN_PIPE','LongInt').SetInt( 109);
 CL.AddConstantN('ERROR_OPEN_FAILED','LongInt').SetInt( 110);
 CL.AddConstantN('ERROR_BUFFER_OVERFLOW','LongInt').SetInt( 111);
 CL.AddConstantN('ERROR_DISK_FULL','LongInt').SetInt( 112);
 CL.AddConstantN('ERROR_NO_MORE_SEARCH_HANDLES','LongInt').SetInt( 113);
 CL.AddConstantN('ERROR_INVALID_TARGET_HANDLE','LongInt').SetInt( 114);
 CL.AddConstantN('ERROR_INVALID_CATEGORY','LongInt').SetInt( 117);
 CL.AddConstantN('ERROR_INVALID_VERIFY_SWITCH','LongInt').SetInt( 118);
 CL.AddConstantN('ERROR_BAD_DRIVER_LEVEL','LongInt').SetInt( 119);
 CL.AddConstantN('ERROR_CALL_NOT_IMPLEMENTED','LongInt').SetInt( 120);
 CL.AddConstantN('ERROR_SEM_TIMEOUT','LongInt').SetInt( 121);
 CL.AddConstantN('ERROR_INSUFFICIENT_BUFFER','LongInt').SetInt( 122);
 CL.AddConstantN('ERROR_INVALID_NAME','LongInt').SetInt( 123);
 CL.AddConstantN('ERROR_INVALID_LEVEL','LongInt').SetInt( 124);
 CL.AddConstantN('ERROR_NO_VOLUME_LABEL','LongInt').SetInt( 125);
 CL.AddConstantN('ERROR_MOD_NOT_FOUND','LongInt').SetInt( 126);
 CL.AddConstantN('ERROR_PROC_NOT_FOUND','LongInt').SetInt( 127);
 CL.AddConstantN('ERROR_WAIT_NO_CHILDREN','LongWord').SetUInt( $80);
 CL.AddConstantN('ERROR_CHILD_NOT_COMPLETE','LongInt').SetInt( 129);
 CL.AddConstantN('ERROR_DIRECT_ACCESS_HANDLE','LongInt').SetInt( 130);
 CL.AddConstantN('ERROR_NEGATIVE_SEEK','LongInt').SetInt( 131);
 CL.AddConstantN('ERROR_SEEK_ON_DEVICE','LongInt').SetInt( 132);
 CL.AddConstantN('ERROR_IS_JOIN_TARGET','LongInt').SetInt( 133);
 CL.AddConstantN('ERROR_IS_JOINED','LongInt').SetInt( 134);
 CL.AddConstantN('ERROR_IS_SUBSTED','LongInt').SetInt( 135);
 CL.AddConstantN('ERROR_NOT_JOINED','LongInt').SetInt( 136);
 CL.AddConstantN('ERROR_NOT_SUBSTED','LongInt').SetInt( 137);
 CL.AddConstantN('ERROR_JOIN_TO_JOIN','LongInt').SetInt( 138);
 CL.AddConstantN('ERROR_SUBST_TO_SUBST','LongInt').SetInt( 139);
 CL.AddConstantN('ERROR_JOIN_TO_SUBST','LongInt').SetInt( 140);
 CL.AddConstantN('ERROR_SUBST_TO_JOIN','LongInt').SetInt( 141);
 CL.AddConstantN('ERROR_BUSY_DRIVE','LongInt').SetInt( 142);
 CL.AddConstantN('ERROR_SAME_DRIVE','LongInt').SetInt( 143);
 CL.AddConstantN('ERROR_DIR_NOT_ROOT','LongInt').SetInt( 144);
 CL.AddConstantN('ERROR_DIR_NOT_EMPTY','LongInt').SetInt( 145);
 CL.AddConstantN('ERROR_IS_SUBST_PATH','LongInt').SetInt( 146);
 CL.AddConstantN('ERROR_IS_JOIN_PATH','LongInt').SetInt( 147);
 CL.AddConstantN('ERROR_PATH_BUSY','LongInt').SetInt( 148);
 CL.AddConstantN('ERROR_IS_SUBST_TARGET','LongInt').SetInt( 149);
 CL.AddConstantN('ERROR_SYSTEM_TRACE','LongInt').SetInt( 150);
 CL.AddConstantN('ERROR_INVALID_EVENT_COUNT','LongInt').SetInt( 151);
 CL.AddConstantN('ERROR_TOO_MANY_MUXWAITERS','LongInt').SetInt( 152);
 CL.AddConstantN('ERROR_INVALID_LIST_FORMAT','LongInt').SetInt( 153);
 CL.AddConstantN('ERROR_LABEL_TOO_LONG','LongInt').SetInt( 154);
 CL.AddConstantN('ERROR_TOO_MANY_TCBS','LongInt').SetInt( 155);
 CL.AddConstantN('ERROR_SIGNAL_REFUSED','LongInt').SetInt( 156);
 CL.AddConstantN('ERROR_DISCARDED','LongInt').SetInt( 157);
 CL.AddConstantN('ERROR_NOT_LOCKED','LongInt').SetInt( 158);
 CL.AddConstantN('ERROR_BAD_THREADID_ADDR','LongInt').SetInt( 159);
 CL.AddConstantN('ERROR_BAD_ARGUMENTS','LongInt').SetInt( 160);
 CL.AddConstantN('ERROR_BAD_PATHNAME','LongInt').SetInt( 161);
 CL.AddConstantN('ERROR_SIGNAL_PENDING','LongInt').SetInt( 162);
 CL.AddConstantN('ERROR_MAX_THRDS_REACHED','LongInt').SetInt( 164);
 CL.AddConstantN('ERROR_LOCK_FAILED','LongInt').SetInt( 167);
 CL.AddConstantN('ERROR_BUSY','LongInt').SetInt( 170);
 CL.AddConstantN('ERROR_CANCEL_VIOLATION','LongInt').SetInt( 173);
 CL.AddConstantN('ERROR_ATOMIC_LOCKS_NOT_SUPPORTED','LongInt').SetInt( 174);
 CL.AddConstantN('ERROR_INVALID_SEGMENT_NUMBER','LongInt').SetInt( 180);
 CL.AddConstantN('ERROR_INVALID_ORDINAL','LongInt').SetInt( 182);
 CL.AddConstantN('ERROR_ALREADY_EXISTS','LongInt').SetInt( 183);
 CL.AddConstantN('ERROR_INVALID_FLAG_NUMBER','LongInt').SetInt( 186);
 CL.AddConstantN('ERROR_SEM_NOT_FOUND','LongInt').SetInt( 187);
 CL.AddConstantN('ERROR_INVALID_STARTING_CODESEG','LongInt').SetInt( 188);
 CL.AddConstantN('ERROR_INVALID_STACKSEG','LongInt').SetInt( 189);
 CL.AddConstantN('ERROR_INVALID_MODULETYPE','LongInt').SetInt( 190);
 CL.AddConstantN('ERROR_INVALID_EXE_SIGNATURE','LongInt').SetInt( 191);
 CL.AddConstantN('ERROR_EXE_MARKED_INVALID','LongInt').SetInt( 192);
 CL.AddConstantN('ERROR_BAD_EXE_FORMAT','LongInt').SetInt( 193);
 CL.AddConstantN('ERROR_ITERATED_DATA_EXCEEDS_64k','LongInt').SetInt( 194);
 CL.AddConstantN('ERROR_INVALID_MINALLOCSIZE','LongInt').SetInt( 195);
 CL.AddConstantN('ERROR_DYNLINK_FROM_INVALID_RING','LongInt').SetInt( 196);
 CL.AddConstantN('ERROR_IOPL_NOT_ENABLED','LongInt').SetInt( 197);
 CL.AddConstantN('ERROR_INVALID_SEGDPL','LongInt').SetInt( 198);
 CL.AddConstantN('ERROR_AUTODATASEG_EXCEEDS_64k','LongInt').SetInt( 199);
 CL.AddConstantN('ERROR_RING2SEG_MUST_BE_MOVABLE','LongInt').SetInt( 200);
 CL.AddConstantN('ERROR_RELOC_CHAIN_XEEDS_SEGLIM','LongInt').SetInt( 201);
 CL.AddConstantN('ERROR_INFLOOP_IN_RELOC_CHAIN','LongInt').SetInt( 202);
 CL.AddConstantN('ERROR_ENVVAR_NOT_FOUND','LongInt').SetInt( 203);
 CL.AddConstantN('ERROR_NO_SIGNAL_SENT','LongInt').SetInt( 205);
 CL.AddConstantN('ERROR_FILENAME_EXCED_RANGE','LongInt').SetInt( 206);
 CL.AddConstantN('ERROR_RING2_STACK_IN_USE','LongInt').SetInt( 207);
 CL.AddConstantN('ERROR_META_EXPANSION_TOO_LONG','LongInt').SetInt( 208);
 CL.AddConstantN('ERROR_INVALID_SIGNAL_NUMBER','LongInt').SetInt( 209);
 CL.AddConstantN('ERROR_THREAD_1_INACTIVE','LongInt').SetInt( 210);
 CL.AddConstantN('ERROR_LOCKED','LongInt').SetInt( 212);
 CL.AddConstantN('ERROR_TOO_MANY_MODULES','LongInt').SetInt( 214);
 CL.AddConstantN('ERROR_NESTING_NOT_ALLOWED','LongInt').SetInt( 215);
 CL.AddConstantN('ERROR_EXE_MACHINE_TYPE_MISMATCH','LongInt').SetInt( 216);
 CL.AddConstantN('ERROR_BAD_PIPE','LongInt').SetInt( 230);
 CL.AddConstantN('ERROR_PIPE_BUSY','LongInt').SetInt( 231);
 CL.AddConstantN('ERROR_NO_DATA','LongInt').SetInt( 232);
 CL.AddConstantN('ERROR_PIPE_NOT_CONNECTED','LongInt').SetInt( 233);
 CL.AddConstantN('ERROR_MORE_DATA','LongInt').SetInt( 234);
 CL.AddConstantN('ERROR_VC_DISCONNECTED','LongInt').SetInt( 240);
 CL.AddConstantN('ERROR_INVALID_EA_NAME','LongInt').SetInt( 254);
 CL.AddConstantN('ERROR_EA_LIST_INCONSISTENT','LongInt').SetInt( 255);
 CL.AddConstantN('ERROR_NO_MORE_ITEMS','LongInt').SetInt( 259);
 CL.AddConstantN('ERROR_CANNOT_COPY','LongInt').SetInt( 266);
 CL.AddConstantN('ERROR_DIRECTORY','LongInt').SetInt( 267);
 CL.AddConstantN('ERROR_EAS_DIDNT_FIT','LongInt').SetInt( 275);
 CL.AddConstantN('ERROR_EA_FILE_CORRUPT','LongInt').SetInt( 276);
 CL.AddConstantN('ERROR_EA_TABLE_FULL','LongInt').SetInt( 277);
 CL.AddConstantN('ERROR_INVALID_EA_HANDLE','LongInt').SetInt( 278);
 CL.AddConstantN('ERROR_EAS_NOT_SUPPORTED','LongInt').SetInt( 282);
 CL.AddConstantN('ERROR_NOT_OWNER','LongInt').SetInt( 288);
 CL.AddConstantN('ERROR_TOO_MANY_POSTS','LongInt').SetInt( 298);
 CL.AddConstantN('ERROR_PARTIAL_COPY','LongInt').SetInt( 299);
 CL.AddConstantN('ERROR_MR_MID_NOT_FOUND','LongInt').SetInt( 317);
 CL.AddConstantN('ERROR_INVALID_ADDRESS','LongInt').SetInt( 487);
 CL.AddConstantN('ERROR_ARITHMETIC_OVERFLOW','LongInt').SetInt( 534);
 CL.AddConstantN('ERROR_PIPE_CONNECTED','LongInt').SetInt( 535);
 CL.AddConstantN('ERROR_PIPE_LISTENING','LongInt').SetInt( 536);
 CL.AddConstantN('ERROR_EA_ACCESS_DENIED','LongInt').SetInt( 994);
 CL.AddConstantN('ERROR_OPERATION_ABORTED','LongInt').SetInt( 995);
 CL.AddConstantN('ERROR_IO_INCOMPLETE','LongInt').SetInt( 996);
 CL.AddConstantN('ERROR_IO_PENDING','LongInt').SetInt( 997);
 CL.AddConstantN('ERROR_NOACCESS','LongInt').SetInt( 998);
 CL.AddConstantN('ERROR_SWAPERROR','LongInt').SetInt( 999);
 CL.AddConstantN('ERROR_STACK_OVERFLOW','LongInt').SetInt( 1001);
 CL.AddConstantN('ERROR_INVALID_MESSAGE','LongInt').SetInt( 1002);
 CL.AddConstantN('ERROR_CAN_NOT_COMPLETE','LongInt').SetInt( 1003);
 CL.AddConstantN('ERROR_INVALID_FLAGS','LongInt').SetInt( 1004);
 CL.AddConstantN('ERROR_UNRECOGNIZED_VOLUME','LongInt').SetInt( 1005);
 CL.AddConstantN('ERROR_FILE_INVALID','LongInt').SetInt( 1006);
 CL.AddConstantN('ERROR_FULLSCREEN_MODE','LongInt').SetInt( 1007);
 CL.AddConstantN('ERROR_NO_TOKEN','LongInt').SetInt( 1008);
 CL.AddConstantN('ERROR_BADDB','LongInt').SetInt( 1009);
 CL.AddConstantN('ERROR_BADKEY','LongInt').SetInt( 1010);
 CL.AddConstantN('ERROR_CANTOPEN','LongInt').SetInt( 1011);
 CL.AddConstantN('ERROR_CANTREAD','LongInt').SetInt( 1012);
 CL.AddConstantN('ERROR_CANTWRITE','LongInt').SetInt( 1013);
 CL.AddConstantN('ERROR_REGISTRY_RECOVERED','LongInt').SetInt( 1014);
 CL.AddConstantN('ERROR_REGISTRY_CORRUPT','LongInt').SetInt( 1015);
 CL.AddConstantN('ERROR_REGISTRY_IO_FAILED','LongInt').SetInt( 1016);
 CL.AddConstantN('ERROR_NOT_REGISTRY_FILE','LongInt').SetInt( 1017);
 CL.AddConstantN('ERROR_KEY_DELETED','LongInt').SetInt( 1018);
 CL.AddConstantN('ERROR_NO_LOG_SPACE','LongInt').SetInt( 1019);
 CL.AddConstantN('ERROR_KEY_HAS_CHILDREN','LongInt').SetInt( 1020);
 CL.AddConstantN('ERROR_CHILD_MUST_BE_VOLATILE','LongInt').SetInt( 1021);
 CL.AddConstantN('ERROR_NOTIFY_ENUM_DIR','LongInt').SetInt( 1022);
 CL.AddConstantN('ERROR_DEPENDENT_SERVICES_RUNNING','LongInt').SetInt( 1051);
 CL.AddConstantN('ERROR_INVALID_SERVICE_CONTROL','LongInt').SetInt( 1052);
 CL.AddConstantN('ERROR_SERVICE_REQUEST_TIMEOUT','LongInt').SetInt( 1053);
 CL.AddConstantN('ERROR_SERVICE_NO_THREAD','LongInt').SetInt( 1054);
 CL.AddConstantN('ERROR_SERVICE_DATABASE_LOCKED','LongInt').SetInt( 1055);
 CL.AddConstantN('ERROR_SERVICE_ALREADY_RUNNING','LongInt').SetInt( 1056);
 CL.AddConstantN('ERROR_INVALID_SERVICE_ACCOUNT','LongInt').SetInt( 1057);
 CL.AddConstantN('ERROR_SERVICE_DISABLED','LongInt').SetInt( 1058);
 CL.AddConstantN('ERROR_CIRCULAR_DEPENDENCY','LongInt').SetInt( 1059);
 CL.AddConstantN('ERROR_SERVICE_DOES_NOT_EXIST','LongInt').SetInt( 1060);
 CL.AddConstantN('ERROR_SERVICE_CANNOT_ACCEPT_CTRL','LongInt').SetInt( 1061);
 CL.AddConstantN('ERROR_SERVICE_NOT_ACTIVE','LongInt').SetInt( 1062);
 CL.AddConstantN('ERROR_FAILED_SERVICE_CONTROLLER_','LongInt').SetInt( 1063);
 CL.AddConstantN('ERROR_EXCEPTION_IN_SERVICE','LongInt').SetInt( 1064);
 CL.AddConstantN('ERROR_DATABASE_DOES_NOT_EXIST','LongInt').SetInt( 1065);
 CL.AddConstantN('ERROR_SERVICE_SPECIFIC_ERROR','LongInt').SetInt( 1066);
 CL.AddConstantN('ERROR_PROCESS_ABORTED','LongInt').SetInt( 1067);
 CL.AddConstantN('ERROR_SERVICE_DEPENDENCY_FAIL','LongInt').SetInt( 1068);
 CL.AddConstantN('ERROR_SERVICE_LOGON_FAILED','LongInt').SetInt( 1069);
 CL.AddConstantN('ERROR_SERVICE_START_HANG','LongInt').SetInt( 1070);
 CL.AddConstantN('ERROR_INVALID_SERVICE_LOCK','LongInt').SetInt( 1071);
 CL.AddConstantN('ERROR_SERVICE_MARKED_FOR_DELETE','LongInt').SetInt( 1072);
 CL.AddConstantN('ERROR_SERVICE_EXISTS','LongInt').SetInt( 1073);
 CL.AddConstantN('ERROR_ALREADY_RUNNING_LKG','LongInt').SetInt( 1074);
 CL.AddConstantN('ERROR_SERVICE_DEPENDENCY_DELETED','LongInt').SetInt( 1075);
 CL.AddConstantN('ERROR_BOOT_ALREADY_ACCEPTED','LongInt').SetInt( 1076);
 CL.AddConstantN('ERROR_SERVICE_NEVER_STARTED','LongInt').SetInt( 1077);
 CL.AddConstantN('ERROR_DUPLICATE_SERVICE_NAME','LongInt').SetInt( 1078);
 CL.AddConstantN('ERROR_DIFFERENT_SERVICE_ACCOUNT','LongInt').SetInt( 1079);
 CL.AddConstantN('ERROR_END_OF_MEDIA','LongInt').SetInt( 1100);
 CL.AddConstantN('ERROR_FILEMARK_DETECTED','LongInt').SetInt( 1101);
 CL.AddConstantN('ERROR_BEGINNING_OF_MEDIA','LongInt').SetInt( 1102);
 CL.AddConstantN('ERROR_SETMARK_DETECTED','LongInt').SetInt( 1103);
 CL.AddConstantN('ERROR_NO_DATA_DETECTED','LongInt').SetInt( 1104);
 CL.AddConstantN('ERROR_PARTITION_FAILURE','LongInt').SetInt( 1105);
 CL.AddConstantN('ERROR_INVALID_BLOCK_LENGTH','LongInt').SetInt( 1106);
 CL.AddConstantN('ERROR_DEVICE_NOT_PARTITIONED','LongInt').SetInt( 1107);
 CL.AddConstantN('ERROR_UNABLE_TO_LOCK_MEDIA','LongInt').SetInt( 1108);
 CL.AddConstantN('ERROR_UNABLE_TO_UNLOAD_MEDIA','LongInt').SetInt( 1109);
 CL.AddConstantN('ERROR_MEDIA_CHANGED','LongInt').SetInt( 1110);
 CL.AddConstantN('ERROR_BUS_RESET','LongInt').SetInt( 1111);
 CL.AddConstantN('ERROR_NO_MEDIA_IN_DRIVE','LongInt').SetInt( 1112);
 CL.AddConstantN('ERROR_NO_UNICODE_TRANSLATION','LongInt').SetInt( 1113);
 CL.AddConstantN('ERROR_DLL_INIT_FAILED','LongInt').SetInt( 1114);
 CL.AddConstantN('ERROR_SHUTDOWN_IN_PROGRESS','LongInt').SetInt( 1115);
 CL.AddConstantN('ERROR_NO_SHUTDOWN_IN_PROGRESS','LongInt').SetInt( 1116);
 CL.AddConstantN('ERROR_IO_DEVICE','LongInt').SetInt( 1117);
 CL.AddConstantN('ERROR_SERIAL_NO_DEVICE','LongInt').SetInt( 1118);
 CL.AddConstantN('ERROR_IRQ_BUSY','LongInt').SetInt( 1119);
 CL.AddConstantN('ERROR_MORE_WRITES','LongInt').SetInt( 1120);
 CL.AddConstantN('ERROR_COUNTER_TIMEOUT','LongInt').SetInt( 1121);
 CL.AddConstantN('ERROR_FLOPPY_ID_MARK_NOT_FOUND','LongInt').SetInt( 1122);
 CL.AddConstantN('ERROR_FLOPPY_WRONG_CYLINDER','LongInt').SetInt( 1123);
 CL.AddConstantN('ERROR_FLOPPY_UNKNOWN_ERROR','LongInt').SetInt( 1124);
 CL.AddConstantN('ERROR_FLOPPY_BAD_REGISTERS','LongInt').SetInt( 1125);
 CL.AddConstantN('ERROR_DISK_RECALIBRATE_FAILED','LongInt').SetInt( 1126);
 CL.AddConstantN('ERROR_DISK_OPERATION_FAILED','LongInt').SetInt( 1127);
 CL.AddConstantN('ERROR_DISK_RESET_FAILED','LongInt').SetInt( 1128);
 CL.AddConstantN('ERROR_EOM_OVERFLOW','LongInt').SetInt( 1129);
 CL.AddConstantN('ERROR_NOT_ENOUGH_SERVER_MEMORY','LongInt').SetInt( 1130);
 CL.AddConstantN('ERROR_POSSIBLE_DEADLOCK','LongInt').SetInt( 1131);
 CL.AddConstantN('ERROR_MAPPED_ALIGNMENT','LongInt').SetInt( 1132);
 CL.AddConstantN('ERROR_SET_POWER_STATE_VETOED','LongInt').SetInt( 1140);
 CL.AddConstantN('ERROR_SET_POWER_STATE_FAILED','LongInt').SetInt( 1141);
 CL.AddConstantN('ERROR_TOO_MANY_LINKS','LongInt').SetInt( 1142);
 CL.AddConstantN('ERROR_OLD_WIN_VERSION','LongInt').SetInt( 1150);
 CL.AddConstantN('ERROR_APP_WRONG_OS','LongInt').SetInt( 1151);
 CL.AddConstantN('ERROR_SINGLE_INSTANCE_APP','LongInt').SetInt( 1152);
 CL.AddConstantN('ERROR_RMODE_APP','LongInt').SetInt( 1153);
 CL.AddConstantN('ERROR_INVALID_DLL','LongInt').SetInt( 1154);
 CL.AddConstantN('ERROR_NO_ASSOCIATION','LongInt').SetInt( 1155);
 CL.AddConstantN('ERROR_DDE_FAIL','LongInt').SetInt( 1156);
 CL.AddConstantN('ERROR_DLL_NOT_FOUND','LongInt').SetInt( 1157);
 CL.AddConstantN('ERROR_BAD_USERNAME','LongInt').SetInt( 2202);
 CL.AddConstantN('ERROR_NOT_CONNECTED','LongInt').SetInt( 2250);
 CL.AddConstantN('ERROR_OPEN_FILES','LongInt').SetInt( 2401);
 CL.AddConstantN('ERROR_ACTIVE_CONNECTIONS','LongInt').SetInt( 2402);
 CL.AddConstantN('ERROR_DEVICE_IN_USE','LongInt').SetInt( 2404);
 CL.AddConstantN('ERROR_BAD_DEVICE','LongInt').SetInt( 1200);
 CL.AddConstantN('ERROR_CONNECTION_UNAVAIL','LongInt').SetInt( 1201);
 CL.AddConstantN('ERROR_DEVICE_ALREADY_REMEMBERED','LongInt').SetInt( 1202);
 CL.AddConstantN('ERROR_NO_NET_OR_BAD_PATH','LongInt').SetInt( 1203);
 CL.AddConstantN('ERROR_BAD_PROVIDER','LongInt').SetInt( 1204);
 CL.AddConstantN('ERROR_CANNOT_OPEN_PROFILE','LongInt').SetInt( 1205);
 CL.AddConstantN('ERROR_BAD_PROFILE','LongInt').SetInt( 1206);
 CL.AddConstantN('ERROR_NOT_CONTAINER','LongInt').SetInt( 1207);
 CL.AddConstantN('ERROR_EXTENDED_ERROR','LongInt').SetInt( 1208);
 CL.AddConstantN('ERROR_INVALID_GROUPNAME','LongInt').SetInt( 1209);
 CL.AddConstantN('ERROR_INVALID_COMPUTERNAME','LongInt').SetInt( 1210);
 CL.AddConstantN('ERROR_INVALID_EVENTNAME','LongInt').SetInt( 1211);
 CL.AddConstantN('ERROR_INVALID_DOMAINNAME','LongInt').SetInt( 1212);
 CL.AddConstantN('ERROR_INVALID_SERVICENAME','LongInt').SetInt( 1213);
 CL.AddConstantN('ERROR_INVALID_NETNAME','LongInt').SetInt( 1214);
 CL.AddConstantN('ERROR_INVALID_SHARENAME','LongInt').SetInt( 1215);
 CL.AddConstantN('ERROR_INVALID_PASSWORDNAME','LongInt').SetInt( 1216);
 CL.AddConstantN('ERROR_INVALID_MESSAGENAME','LongInt').SetInt( 1217);
 CL.AddConstantN('ERROR_INVALID_MESSAGEDEST','LongInt').SetInt( 1218);
 CL.AddConstantN('ERROR_SESSION_CREDENTIAL_CONFLICT','LongInt').SetInt( 1219);
 CL.AddConstantN('ERROR_REMOTE_SESSION_LIMIT_EXCEEDED','LongInt').SetInt( 1220);
 CL.AddConstantN('ERROR_DUP_DOMAINNAME','LongInt').SetInt( 1221);
 CL.AddConstantN('ERROR_NO_NETWORK','LongInt').SetInt( 1222);
 CL.AddConstantN('ERROR_CANCELLED','LongInt').SetInt( 1223);
 CL.AddConstantN('ERROR_USER_MAPPED_FILE','LongInt').SetInt( 1224);
 CL.AddConstantN('ERROR_CONNECTION_REFUSED','LongInt').SetInt( 1225);
 CL.AddConstantN('ERROR_GRACEFUL_DISCONNECT','LongInt').SetInt( 1226);
 CL.AddConstantN('ERROR_ADDRESS_ALREADY_ASSOCIATED','LongInt').SetInt( 1227);
 CL.AddConstantN('ERROR_ADDRESS_NOT_ASSOCIATED','LongInt').SetInt( 1228);
 CL.AddConstantN('ERROR_CONNECTION_INVALID','LongInt').SetInt( 1229);
 CL.AddConstantN('ERROR_CONNECTION_ACTIVE','LongInt').SetInt( 1230);
 CL.AddConstantN('ERROR_NETWORK_UNREACHABLE','LongInt').SetInt( 1231);
 CL.AddConstantN('ERROR_HOST_UNREACHABLE','LongInt').SetInt( 1232);
 CL.AddConstantN('ERROR_PROTOCOL_UNREACHABLE','LongInt').SetInt( 1233);
 CL.AddConstantN('ERROR_PORT_UNREACHABLE','LongInt').SetInt( 1234);
 CL.AddConstantN('ERROR_REQUEST_ABORTED','LongInt').SetInt( 1235);
 CL.AddConstantN('ERROR_CONNECTION_ABORTED','LongInt').SetInt( 1236);
 CL.AddConstantN('ERROR_RETRY','LongInt').SetInt( 1237);
 CL.AddConstantN('ERROR_CONNECTION_COUNT_LIMIT','LongInt').SetInt( 1238);
 CL.AddConstantN('ERROR_LOGIN_TIME_RESTRICTION','LongInt').SetInt( 1239);
 CL.AddConstantN('ERROR_LOGIN_WKSTA_RESTRICTION','LongInt').SetInt( 1240);
 CL.AddConstantN('ERROR_INCORRECT_ADDRESS','LongInt').SetInt( 1241);
 CL.AddConstantN('ERROR_ALREADY_REGISTERED','LongInt').SetInt( 1242);
 CL.AddConstantN('ERROR_SERVICE_NOT_FOUND','LongInt').SetInt( 1243);
 CL.AddConstantN('ERROR_NOT_AUTHENTICATED','LongInt').SetInt( 1244);
 CL.AddConstantN('ERROR_NOT_LOGGED_ON','LongInt').SetInt( 1245);
 CL.AddConstantN('ERROR_CONTINUE','LongInt').SetInt( 1246);
 CL.AddConstantN('ERROR_ALREADY_INITIALIZED','LongInt').SetInt( 1247);
 CL.AddConstantN('ERROR_NO_MORE_DEVICES','LongInt').SetInt( 1248);
 CL.AddConstantN('ERROR_NOT_ALL_ASSIGNED','LongInt').SetInt( 1300);
 CL.AddConstantN('ERROR_SOME_NOT_MAPPED','LongInt').SetInt( 1301);
 CL.AddConstantN('ERROR_NO_QUOTAS_FOR_ACCOUNT','LongInt').SetInt( 1302);
 CL.AddConstantN('ERROR_LOCAL_USER_SESSION_KEY','LongInt').SetInt( 1303);
 CL.AddConstantN('ERROR_NULL_LM_PASSWORD','LongInt').SetInt( 1304);
 CL.AddConstantN('ERROR_UNKNOWN_REVISION','LongInt').SetInt( 1305);
 CL.AddConstantN('ERROR_REVISION_MISMATCH','LongInt').SetInt( 1306);
 CL.AddConstantN('ERROR_INVALID_OWNER','LongInt').SetInt( 1307);
 CL.AddConstantN('ERROR_INVALID_PRIMARY_GROUP','LongInt').SetInt( 1308);
 CL.AddConstantN('ERROR_NO_IMPERSONATION_TOKEN','LongInt').SetInt( 1309);
 CL.AddConstantN('ERROR_CANT_DISABLE_MANDATORY','LongInt').SetInt( 1310);
 CL.AddConstantN('ERROR_NO_LOGON_SERVERS','LongInt').SetInt( 1311);
 CL.AddConstantN('ERROR_NO_SUCH_LOGON_SESSION','LongInt').SetInt( 1312);
 CL.AddConstantN('ERROR_NO_SUCH_PRIVILEGE','LongInt').SetInt( 1313);
 CL.AddConstantN('ERROR_PRIVILEGE_NOT_HELD','LongInt').SetInt( 1314);
 CL.AddConstantN('ERROR_INVALID_ACCOUNT_NAME','LongInt').SetInt( 1315);
 CL.AddConstantN('ERROR_USER_EXISTS','LongInt').SetInt( 1316);
 CL.AddConstantN('ERROR_NO_SUCH_USER','LongInt').SetInt( 1317);
 CL.AddConstantN('ERROR_GROUP_EXISTS','LongInt').SetInt( 1318);
 CL.AddConstantN('ERROR_NO_SUCH_GROUP','LongInt').SetInt( 1319);
 CL.AddConstantN('ERROR_MEMBER_IN_GROUP','LongInt').SetInt( 1320);
 CL.AddConstantN('ERROR_MEMBER_NOT_IN_GROUP','LongInt').SetInt( 1321);
 CL.AddConstantN('ERROR_LAST_ADMIN','LongInt').SetInt( 1322);
 CL.AddConstantN('ERROR_WRONG_PASSWORD','LongInt').SetInt( 1323);
 CL.AddConstantN('ERROR_ILL_FORMED_PASSWORD','LongInt').SetInt( 1324);
 CL.AddConstantN('ERROR_PASSWORD_RESTRICTION','LongInt').SetInt( 1325);
 CL.AddConstantN('ERROR_LOGON_FAILURE','LongInt').SetInt( 1326);
 CL.AddConstantN('ERROR_ACCOUNT_RESTRICTION','LongInt').SetInt( 1327);
 CL.AddConstantN('ERROR_INVALID_LOGON_HOURS','LongInt').SetInt( 1328);
 CL.AddConstantN('ERROR_INVALID_WORKSTATION','LongInt').SetInt( 1329);
 CL.AddConstantN('ERROR_PASSWORD_EXPIRED','LongInt').SetInt( 1330);
 CL.AddConstantN('ERROR_ACCOUNT_DISABLED','LongInt').SetInt( 1331);
 CL.AddConstantN('ERROR_NONE_MAPPED','LongInt').SetInt( 1332);
 CL.AddConstantN('ERROR_TOO_MANY_LUIDS_REQUESTED','LongInt').SetInt( 1333);
 CL.AddConstantN('ERROR_LUIDS_EXHAUSTED','LongInt').SetInt( 1334);
 CL.AddConstantN('ERROR_INVALID_SUB_AUTHORITY','LongInt').SetInt( 1335);
 CL.AddConstantN('ERROR_INVALID_ACL','LongInt').SetInt( 1336);
 CL.AddConstantN('ERROR_INVALID_SID','LongInt').SetInt( 1337);
 CL.AddConstantN('ERROR_INVALID_SECURITY_DESCR','LongInt').SetInt( 1338);
 CL.AddConstantN('ERROR_BAD_INHERITANCE_ACL','LongInt').SetInt( 1340);
 CL.AddConstantN('ERROR_SERVER_DISABLED','LongInt').SetInt( 1341);
 CL.AddConstantN('ERROR_SERVER_NOT_DISABLED','LongInt').SetInt( 1342);
 CL.AddConstantN('ERROR_INVALID_ID_AUTHORITY','LongInt').SetInt( 1343);
 CL.AddConstantN('ERROR_ALLOTTED_SPACE_EXCEEDED','LongInt').SetInt( 1344);
 CL.AddConstantN('ERROR_INVALID_GROUP_ATTRIBUTES','LongInt').SetInt( 1345);
 CL.AddConstantN('ERROR_BAD_IMPERSONATION_LEVEL','LongInt').SetInt( 1346);
 CL.AddConstantN('ERROR_CANT_OPEN_ANONYMOUS','LongInt').SetInt( 1347);
 CL.AddConstantN('ERROR_BAD_VALIDATION_CLASS','LongInt').SetInt( 1348);
 CL.AddConstantN('ERROR_BAD_TOKEN_TYPE','LongInt').SetInt( 1349);
 CL.AddConstantN('ERROR_NO_SECURITY_ON_OBJECT','LongInt').SetInt( 1350);
 CL.AddConstantN('ERROR_CANT_ACCESS_DOMAIN_INFO','LongInt').SetInt( 1351);
 CL.AddConstantN('ERROR_INVALID_SERVER_STATE','LongInt').SetInt( 1352);
 CL.AddConstantN('ERROR_INVALID_DOMAIN_STATE','LongInt').SetInt( 1353);
 CL.AddConstantN('ERROR_INVALID_DOMAIN_ROLE','LongInt').SetInt( 1354);
 CL.AddConstantN('ERROR_NO_SUCH_DOMAIN','LongInt').SetInt( 1355);
 CL.AddConstantN('ERROR_DOMAIN_EXISTS','LongInt').SetInt( 1356);
 CL.AddConstantN('ERROR_DOMAIN_LIMIT_EXCEEDED','LongInt').SetInt( 1357);
 CL.AddConstantN('ERROR_INTERNAL_DB_CORRUPTION','LongInt').SetInt( 1358);
 CL.AddConstantN('ERROR_INTERNAL_ERROR','LongInt').SetInt( 1359);
 CL.AddConstantN('ERROR_GENERIC_NOT_MAPPED','LongInt').SetInt( 1360);
 CL.AddConstantN('ERROR_BAD_DESCRIPTOR_FORMAT','LongInt').SetInt( 1361);
 CL.AddConstantN('ERROR_NOT_LOGON_PROCESS','LongInt').SetInt( 1362);
 CL.AddConstantN('ERROR_LOGON_SESSION_EXISTS','LongInt').SetInt( 1363);
 CL.AddConstantN('ERROR_NO_SUCH_PACKAGE','LongInt').SetInt( 1364);
 CL.AddConstantN('ERROR_BAD_LOGON_SESSION_STATE','LongInt').SetInt( 1365);
 CL.AddConstantN('ERROR_LOGON_SESSION_COLLISION','LongInt').SetInt( 1366);
 CL.AddConstantN('ERROR_INVALID_LOGON_TYPE','LongInt').SetInt( 1367);
 CL.AddConstantN('ERROR_CANNOT_IMPERSONATE','LongInt').SetInt( 1368);
 CL.AddConstantN('ERROR_RXACT_INVALID_STATE','LongInt').SetInt( 1369);
 CL.AddConstantN('ERROR_RXACT_COMMIT_FAILURE','LongInt').SetInt( 1370);
 CL.AddConstantN('ERROR_SPECIAL_ACCOUNT','LongInt').SetInt( 1371);
 CL.AddConstantN('ERROR_SPECIAL_GROUP','LongInt').SetInt( 1372);
 CL.AddConstantN('ERROR_SPECIAL_USER','LongInt').SetInt( 1373);
 CL.AddConstantN('ERROR_MEMBERS_PRIMARY_GROUP','LongInt').SetInt( 1374);
 CL.AddConstantN('ERROR_TOKEN_ALREADY_IN_USE','LongInt').SetInt( 1375);
 CL.AddConstantN('ERROR_NO_SUCH_ALIAS','LongInt').SetInt( 1376);
 CL.AddConstantN('ERROR_MEMBER_NOT_IN_ALIAS','LongInt').SetInt( 1377);
 CL.AddConstantN('ERROR_MEMBER_IN_ALIAS','LongInt').SetInt( 1378);
 CL.AddConstantN('ERROR_ALIAS_EXISTS','LongInt').SetInt( 1379);
 CL.AddConstantN('ERROR_LOGON_NOT_GRANTED','LongInt').SetInt( 1380);
 CL.AddConstantN('ERROR_TOO_MANY_SECRETS','LongInt').SetInt( 1381);
 CL.AddConstantN('ERROR_SECRET_TOO_LONG','LongInt').SetInt( 1382);
 CL.AddConstantN('ERROR_INTERNAL_DB_ERROR','LongInt').SetInt( 1383);
 CL.AddConstantN('ERROR_TOO_MANY_CONTEXT_IDS','LongInt').SetInt( 1384);
 CL.AddConstantN('ERROR_LOGON_TYPE_NOT_GRANTED','LongInt').SetInt( 1385);
 CL.AddConstantN('ERROR_NT_CROSS_ENCRYPTION_REQUIRED','LongInt').SetInt( 1386);
 CL.AddConstantN('ERROR_NO_SUCH_MEMBER','LongInt').SetInt( 1387);
 CL.AddConstantN('ERROR_INVALID_MEMBER','LongInt').SetInt( 1388);
 CL.AddConstantN('ERROR_TOO_MANY_SIDS','LongInt').SetInt( 1389);
 CL.AddConstantN('ERROR_LM_CROSS_ENCRYPTION_REQUIRED','LongInt').SetInt( 1390);
 CL.AddConstantN('ERROR_NO_INHERITANCE','LongInt').SetInt( 1391);
 CL.AddConstantN('ERROR_FILE_CORRUPT','LongInt').SetInt( 1392);
 CL.AddConstantN('ERROR_DISK_CORRUPT','LongInt').SetInt( 1393);
 CL.AddConstantN('ERROR_NO_USER_SESSION_KEY','LongInt').SetInt( 1394);
 CL.AddConstantN('ERROR_LICENSE_QUOTA_EXCEEDED','LongInt').SetInt( 1395);
 CL.AddConstantN('ERROR_INVALID_WINDOW_HANDLE','LongInt').SetInt( 1400);
 CL.AddConstantN('ERROR_INVALID_MENU_HANDLE','LongInt').SetInt( 1401);
 CL.AddConstantN('ERROR_INVALID_CURSOR_HANDLE','LongInt').SetInt( 1402);
 CL.AddConstantN('ERROR_INVALID_ACCEL_HANDLE','LongInt').SetInt( 1403);
 CL.AddConstantN('ERROR_INVALID_HOOK_HANDLE','LongInt').SetInt( 1404);
 CL.AddConstantN('ERROR_INVALID_DWP_HANDLE','LongInt').SetInt( 1405);
 CL.AddConstantN('ERROR_TLW_WITH_WSCHILD','LongInt').SetInt( 1406);
 CL.AddConstantN('ERROR_CANNOT_FIND_WND_CLASS','LongInt').SetInt( 1407);
 CL.AddConstantN('ERROR_WINDOW_OF_OTHER_THREAD','LongInt').SetInt( 1408);
 CL.AddConstantN('ERROR_HOTKEY_ALREADY_REGISTERED','LongInt').SetInt( 1409);
 CL.AddConstantN('ERROR_CLASS_ALREADY_EXISTS','LongInt').SetInt( 1410);
 CL.AddConstantN('ERROR_CLASS_DOES_NOT_EXIST','LongInt').SetInt( 1411);
 CL.AddConstantN('ERROR_CLASS_HAS_WINDOWS','LongInt').SetInt( 1412);
 CL.AddConstantN('ERROR_INVALID_INDEX','LongInt').SetInt( 1413);
 CL.AddConstantN('ERROR_INVALID_ICON_HANDLE','LongInt').SetInt( 1414);
 CL.AddConstantN('ERROR_PRIVATE_DIALOG_INDEX','LongInt').SetInt( 1415);
 CL.AddConstantN('ERROR_LISTBOX_ID_NOT_FOUND','LongInt').SetInt( 1416);
 CL.AddConstantN('ERROR_NO_WILDCARD_CHARACTERS','LongInt').SetInt( 1417);
 CL.AddConstantN('ERROR_CLIPBOARD_NOT_OPEN','LongInt').SetInt( 1418);
 CL.AddConstantN('ERROR_HOTKEY_NOT_REGISTERED','LongInt').SetInt( 1419);
 CL.AddConstantN('ERROR_WINDOW_NOT_DIALOG','LongInt').SetInt( 1420);
 CL.AddConstantN('ERROR_CONTROL_ID_NOT_FOUND','LongInt').SetInt( 1421);
 CL.AddConstantN('ERROR_INVALID_COMBOBOX_MESSAGE','LongInt').SetInt( 1422);
 CL.AddConstantN('ERROR_WINDOW_NOT_COMBOBOX','LongInt').SetInt( 1423);
 CL.AddConstantN('ERROR_INVALID_EDIT_HEIGHT','LongInt').SetInt( 1424);
 CL.AddConstantN('ERROR_DC_NOT_FOUND','LongInt').SetInt( 1425);
 CL.AddConstantN('ERROR_INVALID_HOOK_FILTER','LongInt').SetInt( 1426);
 CL.AddConstantN('ERROR_INVALID_FILTER_PROC','LongInt').SetInt( 1427);
 CL.AddConstantN('ERROR_HOOK_NEEDS_HMOD','LongInt').SetInt( 1428);
 CL.AddConstantN('ERROR_GLOBAL_ONLY_HOOK','LongInt').SetInt( 1429);
 CL.AddConstantN('ERROR_JOURNAL_HOOK_SET','LongInt').SetInt( 1430);
 CL.AddConstantN('ERROR_HOOK_NOT_INSTALLED','LongInt').SetInt( 1431);
 CL.AddConstantN('ERROR_INVALID_LB_MESSAGE','LongInt').SetInt( 1432);
 CL.AddConstantN('ERROR_SETCOUNT_ON_BAD_LB','LongInt').SetInt( 1433);
 CL.AddConstantN('ERROR_LB_WITHOUT_TABSTOPS','LongInt').SetInt( 1434);
 CL.AddConstantN('ERROR_DESTROY_OBJECT_OF_OTHER_THREAD','LongInt').SetInt( 1435);
 CL.AddConstantN('ERROR_CHILD_WINDOW_MENU','LongInt').SetInt( 1436);
 CL.AddConstantN('ERROR_NO_SYSTEM_MENU','LongInt').SetInt( 1437);
 CL.AddConstantN('ERROR_INVALID_MSGBOX_STYLE','LongInt').SetInt( 1438);
 CL.AddConstantN('ERROR_INVALID_SPI_VALUE','LongInt').SetInt( 1439);
 CL.AddConstantN('ERROR_SCREEN_ALREADY_LOCKED','LongInt').SetInt( 1440);
 CL.AddConstantN('ERROR_HWNDS_HAVE_DIFF_PARENT','LongInt').SetInt( 1441);
 CL.AddConstantN('ERROR_NOT_CHILD_WINDOW','LongInt').SetInt( 1442);
 CL.AddConstantN('ERROR_INVALID_GW_COMMAND','LongInt').SetInt( 1443);
 CL.AddConstantN('ERROR_INVALID_THREAD_ID','LongInt').SetInt( 1444);
 CL.AddConstantN('ERROR_NON_MDICHILD_WINDOW','LongInt').SetInt( 1445);
 CL.AddConstantN('ERROR_POPUP_ALREADY_ACTIVE','LongInt').SetInt( 1446);
 CL.AddConstantN('ERROR_NO_SCROLLBARS','LongInt').SetInt( 1447);
 CL.AddConstantN('ERROR_INVALID_SCROLLBAR_RANGE','LongInt').SetInt( 1448);
 CL.AddConstantN('ERROR_INVALID_SHOWWIN_COMMAND','LongInt').SetInt( 1449);
 CL.AddConstantN('ERROR_NO_SYSTEM_RESOURCES','LongInt').SetInt( 1450);
 CL.AddConstantN('ERROR_NONPAGED_SYSTEM_RESOURCES','LongInt').SetInt( 1451);
 CL.AddConstantN('ERROR_PAGED_SYSTEM_RESOURCES','LongInt').SetInt( 1452);
 CL.AddConstantN('ERROR_WORKING_SET_QUOTA','LongInt').SetInt( 1453);
 CL.AddConstantN('ERROR_PAGEFILE_QUOTA','LongInt').SetInt( 1454);
 CL.AddConstantN('ERROR_COMMITMENT_LIMIT','LongInt').SetInt( 1455);
 CL.AddConstantN('ERROR_MENU_ITEM_NOT_FOUND','LongInt').SetInt( 1456);
 CL.AddConstantN('ERROR_INVALID_KEYBOARD_HANDLE','LongInt').SetInt( 1457);
 CL.AddConstantN('ERROR_HOOK_TYPE_NOT_ALLOWED','LongInt').SetInt( 1458);
 CL.AddConstantN('ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION','LongInt').SetInt( 1459);
 CL.AddConstantN('ERROR_TIMEOUT','LongInt').SetInt( 1460);
 CL.AddConstantN('ERROR_EVENTLOG_FILE_CORRUPT','LongInt').SetInt( 1500);
 CL.AddConstantN('ERROR_EVENTLOG_CANT_START','LongInt').SetInt( 1501);
 CL.AddConstantN('ERROR_LOG_FILE_FULL','LongInt').SetInt( 1502);
 CL.AddConstantN('ERROR_EVENTLOG_FILE_CHANGED','LongInt').SetInt( 1503);
 CL.AddConstantN('RPC_S_INVALID_STRING_BINDING','LongInt').SetInt( 1700);
 CL.AddConstantN('RPC_S_WRONG_KIND_OF_BINDING','LongInt').SetInt( 1701);
 CL.AddConstantN('RPC_S_INVALID_BINDING','LongInt').SetInt( 1702);
 CL.AddConstantN('RPC_S_PROTSEQ_NOT_SUPPORTED','LongInt').SetInt( 1703);
 CL.AddConstantN('RPC_S_INVALID_RPC_PROTSEQ','LongInt').SetInt( 1704);
 CL.AddConstantN('RPC_S_INVALID_STRING_UUID','LongInt').SetInt( 1705);
 CL.AddConstantN('RPC_S_INVALID_ENDPOINT_FORMAT','LongInt').SetInt( 1706);
 CL.AddConstantN('RPC_S_INVALID_NET_ADDR','LongInt').SetInt( 1707);
 CL.AddConstantN('RPC_S_NO_ENDPOINT_FOUND','LongInt').SetInt( 1708);
 CL.AddConstantN('RPC_S_INVALID_TIMEOUT','LongInt').SetInt( 1709);
 CL.AddConstantN('RPC_S_OBJECT_NOT_FOUND','LongInt').SetInt( 1710);
 CL.AddConstantN('RPC_S_ALREADY_REGISTERED','LongInt').SetInt( 1711);
 CL.AddConstantN('RPC_S_TYPE_ALREADY_REGISTERED','LongInt').SetInt( 1712);
 CL.AddConstantN('RPC_S_ALREADY_LISTENING','LongInt').SetInt( 1713);
 CL.AddConstantN('RPC_S_NO_PROTSEQS_REGISTERED','LongInt').SetInt( 1714);
 CL.AddConstantN('RPC_S_NOT_LISTENING','LongInt').SetInt( 1715);
 CL.AddConstantN('RPC_S_UNKNOWN_MGR_TYPE','LongInt').SetInt( 1716);
 CL.AddConstantN('RPC_S_UNKNOWN_IF','LongInt').SetInt( 1717);
 CL.AddConstantN('RPC_S_NO_BINDINGS','LongInt').SetInt( 1718);
 CL.AddConstantN('RPC_S_NO_PROTSEQS','LongInt').SetInt( 1719);
 CL.AddConstantN('RPC_S_CANT_CREATE_ENDPOINT','LongInt').SetInt( 1720);
 CL.AddConstantN('RPC_S_OUT_OF_RESOURCES','LongInt').SetInt( 1721);
 CL.AddConstantN('RPC_S_SERVER_UNAVAILABLE','LongInt').SetInt( 1722);
 CL.AddConstantN('RPC_S_SERVER_TOO_BUSY','LongInt').SetInt( 1723);
 CL.AddConstantN('RPC_S_INVALID_NETWORK_OPTIONS','LongInt').SetInt( 1724);
 CL.AddConstantN('RPC_S_NO_CALL_ACTIVE','LongInt').SetInt( 1725);
 CL.AddConstantN('RPC_S_CALL_FAILED','LongInt').SetInt( 1726);
 CL.AddConstantN('RPC_S_CALL_FAILED_DNE','LongInt').SetInt( 1727);
 CL.AddConstantN('RPC_S_PROTOCOL_ERROR','LongInt').SetInt( 1728);
 CL.AddConstantN('RPC_S_UNSUPPORTED_TRANS_SYN','LongInt').SetInt( 1730);
 CL.AddConstantN('RPC_S_UNSUPPORTED_TYPE','LongInt').SetInt( 1732);
 CL.AddConstantN('RPC_S_INVALID_TAG','LongInt').SetInt( 1733);
 CL.AddConstantN('RPC_S_INVALID_BOUND','LongInt').SetInt( 1734);
 CL.AddConstantN('RPC_S_NO_ENTRY_NAME','LongInt').SetInt( 1735);
 CL.AddConstantN('RPC_S_INVALID_NAME_SYNTAX','LongInt').SetInt( 1736);
 CL.AddConstantN('RPC_S_UNSUPPORTED_NAME_SYNTAX','LongInt').SetInt( 1737);
 CL.AddConstantN('RPC_S_UUID_NO_ADDRESS','LongInt').SetInt( 1739);
 CL.AddConstantN('RPC_S_DUPLICATE_ENDPOINT','LongInt').SetInt( 1740);
 CL.AddConstantN('RPC_S_UNKNOWN_AUTHN_TYPE','LongInt').SetInt( 1741);
 CL.AddConstantN('RPC_S_MAX_CALLS_TOO_SMALL','LongInt').SetInt( 1742);
 CL.AddConstantN('RPC_S_STRING_TOO_LONG','LongInt').SetInt( 1743);
 CL.AddConstantN('RPC_S_PROTSEQ_NOT_FOUND','LongInt').SetInt( 1744);
 CL.AddConstantN('RPC_S_PROCNUM_OUT_OF_RANGE','LongInt').SetInt( 1745);
 CL.AddConstantN('RPC_S_BINDING_HAS_NO_AUTH','LongInt').SetInt( 1746);
 CL.AddConstantN('RPC_S_UNKNOWN_AUTHN_SERVICE','LongInt').SetInt( 1747);
 CL.AddConstantN('RPC_S_UNKNOWN_AUTHN_LEVEL','LongInt').SetInt( 1748);
 CL.AddConstantN('RPC_S_INVALID_AUTH_IDENTITY','LongInt').SetInt( 1749);
 CL.AddConstantN('RPC_S_UNKNOWN_AUTHZ_SERVICE','LongInt').SetInt( 1750);
 CL.AddConstantN('EPT_S_INVALID_ENTRY','LongInt').SetInt( 1751);
 CL.AddConstantN('EPT_S_CANT_PERFORM_OP','LongInt').SetInt( 1752);
 CL.AddConstantN('EPT_S_NOT_REGISTERED','LongInt').SetInt( 1753);
 CL.AddConstantN('RPC_S_NOTHING_TO_EXPORT','LongInt').SetInt( 1754);
 CL.AddConstantN('RPC_S_INCOMPLETE_NAME','LongInt').SetInt( 1755);
 CL.AddConstantN('RPC_S_INVALID_VERS_OPTION','LongInt').SetInt( 1756);
 CL.AddConstantN('RPC_S_NO_MORE_MEMBERS','LongInt').SetInt( 1757);
 CL.AddConstantN('RPC_S_NOT_ALL_OBJS_UNEXPORTED','LongInt').SetInt( 1758);
 CL.AddConstantN('RPC_S_INTERFACE_NOT_FOUND','LongInt').SetInt( 1759);
 CL.AddConstantN('RPC_S_ENTRY_ALREADY_EXISTS','LongInt').SetInt( 1760);
 CL.AddConstantN('RPC_S_ENTRY_NOT_FOUND','LongInt').SetInt( 1761);
 CL.AddConstantN('RPC_S_NAME_SERVICE_UNAVAILABLE','LongInt').SetInt( 1762);
 CL.AddConstantN('RPC_S_INVALID_NAF_ID','LongInt').SetInt( 1763);
 CL.AddConstantN('RPC_S_CANNOT_SUPPORT','LongInt').SetInt( 1764);
 CL.AddConstantN('RPC_S_NO_CONTEXT_AVAILABLE','LongInt').SetInt( 1765);
 CL.AddConstantN('RPC_S_INTERNAL_ERROR','LongInt').SetInt( 1766);
 CL.AddConstantN('RPC_S_ZERO_DIVIDE','LongInt').SetInt( 1767);
 CL.AddConstantN('RPC_S_ADDRESS_ERROR','LongInt').SetInt( 1768);
 CL.AddConstantN('RPC_S_FP_DIV_ZERO','LongInt').SetInt( 1769);
 CL.AddConstantN('RPC_S_FP_UNDERFLOW','LongInt').SetInt( 1770);
 CL.AddConstantN('RPC_S_FP_OVERFLOW','LongInt').SetInt( 1771);
 CL.AddConstantN('RPC_X_NO_MORE_ENTRIES','LongInt').SetInt( 1772);
 CL.AddConstantN('RPC_X_SS_CHAR_TRANS_OPEN_FAIL','LongInt').SetInt( 1773);
 CL.AddConstantN('RPC_X_SS_CHAR_TRANS_SHORT_FILE','LongInt').SetInt( 1774);
 CL.AddConstantN('RPC_X_SS_IN_NULL_CONTEXT','LongInt').SetInt( 1775);
 CL.AddConstantN('RPC_X_SS_CONTEXT_DAMAGED','LongInt').SetInt( 1777);
 CL.AddConstantN('RPC_X_SS_HANDLES_MISMATCH','LongInt').SetInt( 1778);
 CL.AddConstantN('RPC_X_SS_CANNOT_GET_CALL_HANDLE','LongInt').SetInt( 1779);
 CL.AddConstantN('RPC_X_NULL_REF_POINTER','LongInt').SetInt( 1780);
 CL.AddConstantN('RPC_X_ENUM_VALUE_OUT_OF_RANGE','LongInt').SetInt( 1781);
 CL.AddConstantN('RPC_X_BYTE_COUNT_TOO_SMALL','LongInt').SetInt( 1782);
 CL.AddConstantN('RPC_X_BAD_STUB_DATA','LongInt').SetInt( 1783);
 CL.AddConstantN('ERROR_INVALID_USER_BUFFER','LongInt').SetInt( 1784);
 CL.AddConstantN('ERROR_UNRECOGNIZED_MEDIA','LongInt').SetInt( 1785);
 CL.AddConstantN('ERROR_NO_TRUST_LSA_SECRET','LongInt').SetInt( 1786);
 CL.AddConstantN('ERROR_NO_TRUST_SAM_ACCOUNT','LongInt').SetInt( 1787);
 CL.AddConstantN('ERROR_TRUSTED_DOMAIN_FAILURE','LongInt').SetInt( 1788);
 CL.AddConstantN('ERROR_TRUSTED_RELATIONSHIP_FAILURE','LongInt').SetInt( 1789);
 CL.AddConstantN('ERROR_TRUST_FAILURE','LongInt').SetInt( 1790);
 CL.AddConstantN('RPC_S_CALL_IN_PROGRESS','LongInt').SetInt( 1791);
 CL.AddConstantN('ERROR_NETLOGON_NOT_STARTED','LongInt').SetInt( 1792);
 CL.AddConstantN('ERROR_ACCOUNT_EXPIRED','LongInt').SetInt( 1793);
 CL.AddConstantN('ERROR_REDIRECTOR_HAS_OPEN_HANDLES','LongInt').SetInt( 1794);
 CL.AddConstantN('ERROR_PRINTER_DRIVER_ALREADY_INSTALLED','LongInt').SetInt( 1795);
 CL.AddConstantN('ERROR_UNKNOWN_PORT','LongInt').SetInt( 1796);
 CL.AddConstantN('ERROR_UNKNOWN_PRINTER_DRIVER','LongInt').SetInt( 1797);
 CL.AddConstantN('ERROR_UNKNOWN_PRINTPROCESSOR','LongInt').SetInt( 1798);
 CL.AddConstantN('ERROR_INVALID_SEPARATOR_FILE','LongInt').SetInt( 1799);
 CL.AddConstantN('ERROR_INVALID_PRIORITY','LongInt').SetInt( 1800);
 CL.AddConstantN('ERROR_INVALID_PRINTER_NAME','LongInt').SetInt( 1801);
 CL.AddConstantN('ERROR_PRINTER_ALREADY_EXISTS','LongInt').SetInt( 1802);
 CL.AddConstantN('ERROR_INVALID_PRINTER_COMMAND','LongInt').SetInt( 1803);
 CL.AddConstantN('ERROR_INVALID_DATATYPE','LongInt').SetInt( 1804);
 CL.AddConstantN('ERROR_INVALID_ENVIRONMENT','LongInt').SetInt( 1805);
 CL.AddConstantN('RPC_S_NO_MORE_BINDINGS','LongInt').SetInt( 1806);
 CL.AddConstantN('ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT','LongInt').SetInt( 1807);
 CL.AddConstantN('ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT','LongInt').SetInt( 1808);
 CL.AddConstantN('ERROR_NOLOGON_SERVER_TRUST_ACCOUNT','LongInt').SetInt( 1809);
 CL.AddConstantN('ERROR_DOMAIN_TRUST_INCONSISTENT','LongInt').SetInt( 1810);
 CL.AddConstantN('ERROR_SERVER_HAS_OPEN_HANDLES','LongInt').SetInt( 1811);
 CL.AddConstantN('ERROR_RESOURCE_DATA_NOT_FOUND','LongInt').SetInt( 1812);
 CL.AddConstantN('ERROR_RESOURCE_TYPE_NOT_FOUND','LongInt').SetInt( 1813);
 CL.AddConstantN('ERROR_RESOURCE_NAME_NOT_FOUND','LongInt').SetInt( 1814);
 CL.AddConstantN('ERROR_RESOURCE_LANG_NOT_FOUND','LongInt').SetInt( 1815);
 CL.AddConstantN('ERROR_NOT_ENOUGH_QUOTA','LongInt').SetInt( 1816);
 CL.AddConstantN('RPC_S_NO_INTERFACES','LongInt').SetInt( 1817);
 CL.AddConstantN('RPC_S_CALL_CANCELLED','LongInt').SetInt( 1818);
 CL.AddConstantN('RPC_S_BINDING_INCOMPLETE','LongInt').SetInt( 1819);
 CL.AddConstantN('RPC_S_COMM_FAILURE','LongInt').SetInt( 1820);
 CL.AddConstantN('RPC_S_UNSUPPORTED_AUTHN_LEVEL','LongInt').SetInt( 1821);
 CL.AddConstantN('RPC_S_NO_PRINC_NAME','LongInt').SetInt( 1822);
 CL.AddConstantN('RPC_S_NOT_RPC_ERROR','LongInt').SetInt( 1823);
 CL.AddConstantN('RPC_S_UUID_LOCAL_ONLY','LongInt').SetInt( 1824);
 CL.AddConstantN('RPC_S_SEC_PKG_ERROR','LongInt').SetInt( 1825);
 CL.AddConstantN('RPC_S_NOT_CANCELLED','LongInt').SetInt( 1826);
 CL.AddConstantN('RPC_X_INVALID_ES_ACTION','LongInt').SetInt( 1827);
 CL.AddConstantN('RPC_X_WRONG_ES_VERSION','LongInt').SetInt( 1828);
 CL.AddConstantN('RPC_X_WRONG_STUB_VERSION','LongInt').SetInt( 1829);
 CL.AddConstantN('RPC_X_INVALID_PIPE_OBJECT','LongInt').SetInt( 1830);
 CL.AddConstantN('RPC_X_INVALID_PIPE_OPERATION','LongInt').SetInt( 1831);
 CL.AddConstantN('RPC_X_WRONG_PIPE_VERSION','LongInt').SetInt( 1832);
 CL.AddConstantN('RPC_S_GROUP_MEMBER_NOT_FOUND','LongInt').SetInt( 1898);
 CL.AddConstantN('EPT_S_CANT_CREATE','LongInt').SetInt( 1899);
 CL.AddConstantN('RPC_S_INVALID_OBJECT','LongInt').SetInt( 1900);
 CL.AddConstantN('ERROR_INVALID_TIME','LongInt').SetInt( 1901);
 CL.AddConstantN('ERROR_INVALID_FORM_NAME','LongInt').SetInt( 1902);
 CL.AddConstantN('ERROR_INVALID_FORM_SIZE','LongInt').SetInt( 1903);
 CL.AddConstantN('ERROR_ALREADY_WAITING','LongInt').SetInt( 1904);
 CL.AddConstantN('ERROR_PRINTER_DELETED','LongInt').SetInt( 1905);
 CL.AddConstantN('ERROR_INVALID_PRINTER_STATE','LongInt').SetInt( 1906);
 CL.AddConstantN('ERROR_PASSWORD_MUST_CHANGE','LongInt').SetInt( 1907);
 CL.AddConstantN('ERROR_DOMAIN_CONTROLLER_NOT_FOUND','LongInt').SetInt( 1908);
 CL.AddConstantN('ERROR_ACCOUNT_LOCKED_OUT','LongInt').SetInt( 1909);
 CL.AddConstantN('OR_INVALID_OXID','LongInt').SetInt( 1910);
 CL.AddConstantN('OR_INVALID_OID','LongInt').SetInt( 1911);
 CL.AddConstantN('OR_INVALID_SET','LongInt').SetInt( 1912);
 CL.AddConstantN('RPC_S_SEND_INCOMPLETE','LongInt').SetInt( 1913);
 CL.AddConstantN('ERROR_NO_BROWSER_SERVERS_FOUND','LongInt').SetInt( 6118);
 CL.AddConstantN('ERROR_INVALID_PIXEL_FORMAT','LongInt').SetInt( 2000);
 CL.AddConstantN('ERROR_BAD_DRIVER','LongInt').SetInt( 2001);
 CL.AddConstantN('ERROR_INVALID_WINDOW_STYLE','LongInt').SetInt( 2002);
 CL.AddConstantN('ERROR_METAFILE_NOT_SUPPORTED','LongInt').SetInt( 2003);
 CL.AddConstantN('ERROR_TRANSFORM_NOT_SUPPORTED','LongInt').SetInt( 2004);
 CL.AddConstantN('ERROR_CLIPPING_NOT_SUPPORTED','LongInt').SetInt( 2005);
 CL.AddConstantN('ERROR_UNKNOWN_PRINT_MONITOR','LongInt').SetInt( 3000);
 CL.AddConstantN('ERROR_PRINTER_DRIVER_IN_USE','LongInt').SetInt( 3001);
 CL.AddConstantN('ERROR_SPOOL_FILE_NOT_FOUND','LongInt').SetInt( 3002);
 CL.AddConstantN('ERROR_SPL_NO_STARTDOC','LongInt').SetInt( 3003);
 CL.AddConstantN('ERROR_SPL_NO_ADDJOB','LongInt').SetInt( 3004);
 CL.AddConstantN('ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED','LongInt').SetInt( 3005);
 CL.AddConstantN('ERROR_PRINT_MONITOR_ALREADY_INSTALLED','LongInt').SetInt( 3006);
 CL.AddConstantN('ERROR_INVALID_PRINT_MONITOR','LongInt').SetInt( 3007);
 CL.AddConstantN('ERROR_PRINT_MONITOR_IN_USE','LongInt').SetInt( 3008);
 CL.AddConstantN('ERROR_PRINTER_HAS_JOBS_QUEUED','LongInt').SetInt( 3009);
 CL.AddConstantN('ERROR_SUCCESS_REBOOT_REQUIRED','LongInt').SetInt( 3010);
 CL.AddConstantN('ERROR_SUCCESS_RESTART_REQUIRED','LongInt').SetInt( 3011);
 CL.AddConstantN('ERROR_WINS_INTERNAL','LongInt').SetInt( 4000);
 CL.AddConstantN('ERROR_CAN_NOT_DEL_LOCAL_WINS','LongInt').SetInt( 4001);
 CL.AddConstantN('ERROR_STATIC_INIT','LongInt').SetInt( 4002);
 CL.AddConstantN('ERROR_INC_BACKUP','LongInt').SetInt( 4003);
 CL.AddConstantN('ERROR_FULL_BACKUP','LongInt').SetInt( 4004);
 CL.AddConstantN('ERROR_REC_NON_EXISTENT','LongInt').SetInt( 4005);
 CL.AddConstantN('ERROR_RPL_NOT_ALLOWED','LongInt').SetInt( 4006);
 CL.AddConstantN('SEVERITY_SUCCESS','LongInt').SetInt( 0);
 CL.AddConstantN('SEVERITY_ERROR','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function Succeeded( Status : HRESULT) : BOOL');
 CL.AddDelphiFunction('Function Failed( Status : HRESULT) : BOOL');
 CL.AddDelphiFunction('Function IsError( Status : HRESULT) : BOOL');
 CL.AddDelphiFunction('Function HResultCode( hr : HRESULT) : Integer');
 CL.AddDelphiFunction('Function HResultFacility( hr : HRESULT) : Integer');
 CL.AddDelphiFunction('Function HResultSeverity( hr : HRESULT) : Integer');
 CL.AddDelphiFunction('Function MakeResult( sev, fac, code : Integer) : HResult');
 CL.AddConstantN('FACILITY_NT_BIT','LongWord').SetUInt( $10000000);
 CL.AddDelphiFunction('Function HResultFromWin32( x : Integer) : HRESULT');
 CL.AddDelphiFunction('Function HResultFromNT( x : Integer) : HRESULT');
 CL.AddConstantN('S_OK','LongWord').SetUInt( $00000000);
 CL.AddConstantN('S_FALSE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('NOERROR','LongInt').SetInt( 0);
 CL.AddConstantN('E_UNEXPECTED','LongWord').SetUInt( HRESULT ( $8000FFFF ));
 CL.AddConstantN('E_NOTIMPL','LongWord').SetUInt( HRESULT ( $80004001 ));
 CL.AddConstantN('E_OUTOFMEMORY','LongWord').SetUInt( HRESULT ( $8007000E ));
 CL.AddConstantN('E_INVALIDARG','LongWord').SetUInt( HRESULT ( $80070057 ));
 CL.AddConstantN('E_NOINTERFACE','LongWord').SetUInt( HRESULT ( $80004002 ));
 CL.AddConstantN('E_POINTER','LongWord').SetUInt( HRESULT ( $80004003 ));
 CL.AddConstantN('E_HANDLE','LongWord').SetUInt( HRESULT ( $80070006 ));
 CL.AddConstantN('E_ABORT','LongWord').SetUInt( HRESULT ( $80004004 ));
 CL.AddConstantN('E_FAIL','LongWord').SetUInt( HRESULT ( $80004005 ));
 CL.AddConstantN('E_ACCESSDENIED','LongWord').SetUInt( HRESULT ( $80070005 ));
 CL.AddConstantN('E_PENDING','LongWord').SetUInt( HRESULT ( $8000000A ));
 CL.AddConstantN('CO_E_INIT_TLS','LongWord').SetUInt( HRESULT ( $80004006 ));
 CL.AddConstantN('CO_E_INIT_SHARED_ALLOCATOR','LongWord').SetUInt( HRESULT ( $80004007 ));
 CL.AddConstantN('CO_E_INIT_MEMORY_ALLOCATOR','LongWord').SetUInt( HRESULT ( $80004008 ));
 CL.AddConstantN('CO_E_INIT_CLASS_CACHE','LongWord').SetUInt( HRESULT ( $80004009 ));
 CL.AddConstantN('CO_E_INIT_RPC_CHANNEL','LongWord').SetUInt( HRESULT ( $8000400A ));
 CL.AddConstantN('CO_E_INIT_TLS_SET_CHANNEL_CONTROL','LongWord').SetUInt( HRESULT ( $8000400B ));
 CL.AddConstantN('CO_E_INIT_TLS_CHANNEL_CONTROL','LongWord').SetUInt( HRESULT ( $8000400C ));
 CL.AddConstantN('CO_E_INIT_UNACCEPTED_USER_ALLOCATOR','LongWord').SetUInt( HRESULT ( $8000400D ));
 CL.AddConstantN('CO_E_INIT_SCM_MUTEX_EXISTS','LongWord').SetUInt( HRESULT ( $8000400E ));
 CL.AddConstantN('CO_E_INIT_SCM_FILE_MAPPING_EXISTS','LongWord').SetUInt( HRESULT ( $8000400F ));
 CL.AddConstantN('CO_E_INIT_SCM_MAP_VIEW_OF_FILE','LongWord').SetUInt( HRESULT ( $80004010 ));
 CL.AddConstantN('CO_E_INIT_SCM_EXEC_FAILURE','LongWord').SetUInt( HRESULT ( $80004011 ));
 CL.AddConstantN('CO_E_INIT_ONLY_SINGLE_THREADED','LongWord').SetUInt( HRESULT ( $80004012 ));
 CL.AddConstantN('CO_E_CANT_REMOTE','LongWord').SetUInt( HRESULT ( $80004013 ));
 CL.AddConstantN('CO_E_BAD_SERVER_NAME','LongWord').SetUInt( HRESULT ( $80004014 ));
 CL.AddConstantN('CO_E_WRONG_SERVER_IDENTITY','LongWord').SetUInt( HRESULT ( $80004015 ));
 CL.AddConstantN('CO_E_OLE1DDE_DISABLED','LongWord').SetUInt( HRESULT ( $80004016 ));
 CL.AddConstantN('CO_E_RUNAS_SYNTAX','LongWord').SetUInt( HRESULT ( $80004017 ));
 CL.AddConstantN('CO_E_CREATEPROCESS_FAILURE','LongWord').SetUInt( HRESULT ( $80004018 ));
 CL.AddConstantN('CO_E_RUNAS_CREATEPROCESS_FAILURE','LongWord').SetUInt( HRESULT ( $80004019 ));
 CL.AddConstantN('CO_E_RUNAS_LOGON_FAILURE','LongWord').SetUInt( HRESULT ( $8000401A ));
 CL.AddConstantN('CO_E_LAUNCH_PERMSSION_DENIED','LongWord').SetUInt( HRESULT ( $8000401B ));
 CL.AddConstantN('CO_E_START_SERVICE_FAILURE','LongWord').SetUInt( HRESULT ( $8000401C ));
 CL.AddConstantN('CO_E_REMOTE_COMMUNICATION_FAILURE','LongWord').SetUInt( HRESULT ( $8000401D ));
 CL.AddConstantN('CO_E_SERVER_START_TIMEOUT','LongWord').SetUInt( HRESULT ( $8000401E ));
 CL.AddConstantN('CO_E_CLSREG_INCONSISTENT','LongWord').SetUInt( HRESULT ( $8000401F ));
 CL.AddConstantN('CO_E_IIDREG_INCONSISTENT','LongWord').SetUInt( HRESULT ( $80004020 ));
 CL.AddConstantN('CO_E_NOT_SUPPORTED','LongWord').SetUInt( HRESULT ( $80004021 ));
 CL.AddConstantN('OLE_E_FIRST','LongWord').SetUInt( HRESULT ( $80040000 ));
 CL.AddConstantN('OLE_E_LAST','LongWord').SetUInt( HRESULT ( $800400FF ));
 CL.AddConstantN('OLE_S_FIRST','LongWord').SetUInt( $40000);
 CL.AddConstantN('OLE_S_LAST','LongWord').SetUInt( $400FF);
 CL.AddConstantN('OLE_E_OLEVERB','LongWord').SetUInt( HRESULT ( $80040000 ));
 CL.AddConstantN('OLE_E_ADVF','LongWord').SetUInt( HRESULT ( $80040001 ));
 CL.AddConstantN('OLE_E_ENUM_NOMORE','LongWord').SetUInt( HRESULT ( $80040002 ));
 CL.AddConstantN('OLE_E_ADVISENOTSUPPORTED','LongWord').SetUInt( HRESULT ( $80040003 ));
 CL.AddConstantN('OLE_E_NOCONNECTION','LongWord').SetUInt( HRESULT ( $80040004 ));
 CL.AddConstantN('OLE_E_NOTRUNNING','LongWord').SetUInt( HRESULT ( $80040005 ));
 CL.AddConstantN('OLE_E_NOCACHE','LongWord').SetUInt( HRESULT ( $80040006 ));
 CL.AddConstantN('OLE_E_BLANK','LongWord').SetUInt( HRESULT ( $80040007 ));
 CL.AddConstantN('OLE_E_CLASSDIFF','LongWord').SetUInt( HRESULT ( $80040008 ));
 CL.AddConstantN('OLE_E_CANT_GETMONIKER','LongWord').SetUInt( HRESULT ( $80040009 ));
 CL.AddConstantN('OLE_E_CANT_BINDTOSOURCE','LongWord').SetUInt( HRESULT ( $8004000A ));
 CL.AddConstantN('OLE_E_STATIC','LongWord').SetUInt( HRESULT ( $8004000B ));
 CL.AddConstantN('OLE_E_PROMPTSAVECANCELLED','LongWord').SetUInt( HRESULT ( $8004000C ));
 CL.AddConstantN('OLE_E_INVALIDRECT','LongWord').SetUInt( HRESULT ( $8004000D ));
 CL.AddConstantN('OLE_E_WRONGCOMPOBJ','LongWord').SetUInt( HRESULT ( $8004000E ));
 CL.AddConstantN('OLE_E_INVALIDHWND','LongWord').SetUInt( HRESULT ( $8004000F ));
 CL.AddConstantN('OLE_E_NOT_INPLACEACTIVE','LongWord').SetUInt( HRESULT ( $80040010 ));
 CL.AddConstantN('OLE_E_CANTCONVERT','LongWord').SetUInt( HRESULT ( $80040011 ));
 CL.AddConstantN('OLE_E_NOSTORAGE','LongWord').SetUInt( HRESULT ( $80040012 ));
 CL.AddConstantN('DV_E_FORMATETC','LongWord').SetUInt( HRESULT ( $80040064 ));
 CL.AddConstantN('DV_E_DVTARGETDEVICE','LongWord').SetUInt( HRESULT ( $80040065 ));
 CL.AddConstantN('DV_E_STGMEDIUM','LongWord').SetUInt( HRESULT ( $80040066 ));
 CL.AddConstantN('DV_E_STATDATA','LongWord').SetUInt( HRESULT ( $80040067 ));
 CL.AddConstantN('DV_E_LINDEX','LongWord').SetUInt( HRESULT ( $80040068 ));
 CL.AddConstantN('DV_E_TYMED','LongWord').SetUInt( HRESULT ( $80040069 ));
 CL.AddConstantN('DV_E_CLIPFORMAT','LongWord').SetUInt( HRESULT ( $8004006A ));
 CL.AddConstantN('DV_E_DVASPECT','LongWord').SetUInt( HRESULT ( $8004006B ));
 CL.AddConstantN('DV_E_DVTARGETDEVICE_SIZE','LongWord').SetUInt( HRESULT ( $8004006C ));
 CL.AddConstantN('DV_E_NOIVIEWOBJECT','LongWord').SetUInt( HRESULT ( $8004006D ));
 CL.AddConstantN('DRAGDROP_E_FIRST','LongWord').SetUInt( HRESULT ( $80040100 ));
 CL.AddConstantN('DRAGDROP_E_LAST','LongWord').SetUInt( HRESULT ( $8004010F ));
 CL.AddConstantN('DRAGDROP_S_FIRST','LongWord').SetUInt( $40100);
 CL.AddConstantN('DRAGDROP_E_NOTREGISTERED','LongWord').SetUInt( HRESULT ( $80040100 ));
 CL.AddConstantN('DRAGDROP_E_ALREADYREGISTERED','LongWord').SetUInt( HRESULT ( $80040101 ));
 CL.AddConstantN('DRAGDROP_E_INVALIDHWND','LongWord').SetUInt( HRESULT ( $80040102 ));
 CL.AddConstantN('CLASSFACTORY_E_FIRST','LongWord').SetUInt( HRESULT ( $80040110 ));
 CL.AddConstantN('CLASSFACTORY_E_LAST','LongWord').SetUInt( HRESULT ( $8004011F ));
 CL.AddConstantN('CLASSFACTORY_S_FIRST','LongWord').SetUInt( $40110);
 CL.AddConstantN('CLASS_E_NOAGGREGATION','LongWord').SetUInt( HRESULT ( $80040110 ));
 CL.AddConstantN('CLASS_E_CLASSNOTAVAILABLE','LongWord').SetUInt( HRESULT ( $80040111 ));
 CL.AddConstantN('MARSHAL_E_FIRST','LongWord').SetUInt( HRESULT ( $80040120 ));
 CL.AddConstantN('MARSHAL_E_LAST','LongWord').SetUInt( HRESULT ( $8004012F ));
 CL.AddConstantN('MARSHAL_S_FIRST','LongWord').SetUInt( $40120);
 CL.AddConstantN('MARSHAL_S_LAST','LongWord').SetUInt( $4012F);
 CL.AddConstantN('DATA_E_FIRST','LongWord').SetUInt( HRESULT ( $80040130 ));
 CL.AddConstantN('DATA_E_LAST','LongWord').SetUInt( HRESULT ( $8004013F ));
 CL.AddConstantN('DATA_S_FIRST','LongWord').SetUInt( $40130);
 CL.AddConstantN('DATA_S_LAST','LongWord').SetUInt( $4013F);
 CL.AddConstantN('VIEW_E_FIRST','LongWord').SetUInt( HRESULT ( $80040140 ));
 CL.AddConstantN('VIEW_E_LAST','LongWord').SetUInt( HRESULT ( $8004014F ));
 CL.AddConstantN('VIEW_S_FIRST','LongWord').SetUInt( $40140);
 CL.AddConstantN('VIEW_E_DRAW','LongWord').SetUInt( HRESULT ( $80040140 ));
 CL.AddConstantN('REGDB_E_FIRST','LongWord').SetUInt( HRESULT ( $80040150 ));
 CL.AddConstantN('REGDB_E_LAST','LongWord').SetUInt( HRESULT ( $8004015F ));
 CL.AddConstantN('REGDB_S_FIRST','LongWord').SetUInt( $40150);
 CL.AddConstantN('REGDB_E_READREGDB','LongWord').SetUInt( HRESULT ( $80040150 ));
 CL.AddConstantN('REGDB_E_WRITEREGDB','LongWord').SetUInt( HRESULT ( $80040151 ));
 CL.AddConstantN('REGDB_E_KEYMISSING','LongWord').SetUInt( HRESULT ( $80040152 ));
 CL.AddConstantN('REGDB_E_INVALIDVALUE','LongWord').SetUInt( HRESULT ( $80040153 ));
 CL.AddConstantN('REGDB_E_CLASSNOTREG','LongWord').SetUInt( HRESULT ( $80040154 ));
 CL.AddConstantN('REGDB_E_IIDNOTREG','LongWord').SetUInt( HRESULT ( $80040155 ));
 CL.AddConstantN('CACHE_E_FIRST','LongWord').SetUInt( HRESULT ( $80040170 ));
 CL.AddConstantN('CACHE_E_LAST','LongWord').SetUInt( HRESULT ( $8004017F ));
 CL.AddConstantN('CACHE_S_FIRST','LongWord').SetUInt( $40170);
 CL.AddConstantN('CACHE_E_NOCACHE_UPDATED','LongWord').SetUInt( HRESULT ( $80040170 ));
 CL.AddConstantN('OLEOBJ_E_FIRST','LongWord').SetUInt( HRESULT ( $80040180 ));
 CL.AddConstantN('OLEOBJ_E_LAST','LongWord').SetUInt( HRESULT ( $8004018F ));
 CL.AddConstantN('OLEOBJ_S_FIRST','LongWord').SetUInt( $40180);
 CL.AddConstantN('OLEOBJ_E_NOVERBS','LongWord').SetUInt( HRESULT ( $80040180 ));
 CL.AddConstantN('OLEOBJ_E_INVALIDVERB','LongWord').SetUInt( HRESULT ( $80040181 ));
 CL.AddConstantN('CLIENTSITE_E_FIRST','LongWord').SetUInt( HRESULT ( $80040190 ));
 CL.AddConstantN('CLIENTSITE_E_LAST','LongWord').SetUInt( HRESULT ( $8004019F ));
 CL.AddConstantN('CLIENTSITE_S_FIRST','LongWord').SetUInt( $40190);
 CL.AddConstantN('INPLACE_E_NOTUNDOABLE','LongWord').SetUInt( HRESULT ( $800401A0 ));
 CL.AddConstantN('INPLACE_E_NOTOOLSPACE','LongWord').SetUInt( HRESULT ( $800401A1 ));
 CL.AddConstantN('INPLACE_E_FIRST','LongWord').SetUInt( HRESULT ( $800401A0 ));
 CL.AddConstantN('INPLACE_E_LAST','LongWord').SetUInt( HRESULT ( $800401AF ));
 CL.AddConstantN('INPLACE_S_FIRST','LongWord').SetUInt( $401A0);
 CL.AddConstantN('INPLACE_S_LAST','LongWord').SetUInt( $401AF);
 CL.AddConstantN('ENUM_E_FIRST','LongWord').SetUInt( HRESULT ( $800401B0 ));
 CL.AddConstantN('ENUM_E_LAST','LongWord').SetUInt( HRESULT ( $800401BF ));
 CL.AddConstantN('ENUM_S_FIRST','LongWord').SetUInt( $401B0);
 CL.AddConstantN('ENUM_S_LAST','LongWord').SetUInt( $401BF);
 CL.AddConstantN('CONVERT10_E_FIRST','LongWord').SetUInt( HRESULT ( $800401C0 ));
 CL.AddConstantN('CONVERT10_E_LAST','LongWord').SetUInt( HRESULT ( $800401CF ));
 CL.AddConstantN('CONVERT10_S_FIRST','LongWord').SetUInt( $401C0);
 CL.AddConstantN('CONVERT10_E_OLESTREAM_GET','LongWord').SetUInt( HRESULT ( $800401C0 ));
 CL.AddConstantN('CONVERT10_E_OLESTREAM_PUT','LongWord').SetUInt( HRESULT ( $800401C1 ));
 CL.AddConstantN('CONVERT10_E_OLESTREAM_FMT','LongWord').SetUInt( HRESULT ( $800401C2 ));
 CL.AddConstantN('CONVERT10_E_OLESTREAM_BITMAP_TO_DIB','LongWord').SetUInt( HRESULT ( $800401C3 ));
 CL.AddConstantN('CONVERT10_E_STG_FMT','LongWord').SetUInt( HRESULT ( $800401C4 ));
 CL.AddConstantN('CONVERT10_E_STG_NO_STD_STREAM','LongWord').SetUInt( HRESULT ( $800401C5 ));
 CL.AddConstantN('CONVERT10_E_STG_DIB_TO_BITMAP','LongWord').SetUInt( HRESULT ( $800401C6 ));
 CL.AddConstantN('CLIPBRD_E_FIRST','LongWord').SetUInt( HRESULT ( $800401D0 ));
 CL.AddConstantN('CLIPBRD_E_LAST','LongWord').SetUInt( HRESULT ( $800401DF ));
 CL.AddConstantN('CLIPBRD_S_FIRST','LongWord').SetUInt( $401D0);
 CL.AddConstantN('CLIPBRD_E_CANT_OPEN','LongWord').SetUInt( HRESULT ( $800401D0 ));
 CL.AddConstantN('CLIPBRD_E_CANT_EMPTY','LongWord').SetUInt( HRESULT ( $800401D1 ));
 CL.AddConstantN('CLIPBRD_E_CANT_SET','LongWord').SetUInt( HRESULT ( $800401D2 ));
 CL.AddConstantN('CLIPBRD_E_BAD_DATA','LongWord').SetUInt( HRESULT ( $800401D3 ));
 CL.AddConstantN('CLIPBRD_E_CANT_CLOSE','LongWord').SetUInt( HRESULT ( $800401D4 ));
 CL.AddConstantN('MK_E_FIRST','LongWord').SetUInt( HRESULT ( $800401E0 ));
 CL.AddConstantN('MK_E_LAST','LongWord').SetUInt( HRESULT ( $800401EF ));
 CL.AddConstantN('MK_S_FIRST','LongWord').SetUInt( $401E0);
 CL.AddConstantN('MK_E_CONNECTMANUALLY','LongWord').SetUInt( HRESULT ( $800401E0 ));
 CL.AddConstantN('MK_E_EXCEEDEDDEADLINE','LongWord').SetUInt( HRESULT ( $800401E1 ));
 CL.AddConstantN('MK_E_NEEDGENERIC','LongWord').SetUInt( HRESULT ( $800401E2 ));
 CL.AddConstantN('MK_E_UNAVAILABLE','LongWord').SetUInt( HRESULT ( $800401E3 ));
 CL.AddConstantN('MK_E_SYNTAX','LongWord').SetUInt( HRESULT ( $800401E4 ));
 CL.AddConstantN('MK_E_NOOBJECT','LongWord').SetUInt( HRESULT ( $800401E5 ));
 CL.AddConstantN('MK_E_INVALIDEXTENSION','LongWord').SetUInt( HRESULT ( $800401E6 ));
 CL.AddConstantN('MK_E_INTERMEDIATEINTERFACENOTSUPPORTED','LongWord').SetUInt( HRESULT ( $800401E7 ));
 CL.AddConstantN('MK_E_NOTBINDABLE','LongWord').SetUInt( HRESULT ( $800401E8 ));
 CL.AddConstantN('MK_E_NOTBOUND','LongWord').SetUInt( HRESULT ( $800401E9 ));
 CL.AddConstantN('MK_E_CANTOPENFILE','LongWord').SetUInt( HRESULT ( $800401EA ));
 CL.AddConstantN('MK_E_MUSTBOTHERUSER','LongWord').SetUInt( HRESULT ( $800401EB ));
 CL.AddConstantN('MK_E_NOINVERSE','LongWord').SetUInt( HRESULT ( $800401EC ));
 CL.AddConstantN('MK_E_NOSTORAGE','LongWord').SetUInt( HRESULT ( $800401ED ));
 CL.AddConstantN('MK_E_NOPREFIX','LongWord').SetUInt( HRESULT ( $800401EE ));
 CL.AddConstantN('MK_E_ENUMERATION_FAILED','LongWord').SetUInt( HRESULT ( $800401EF ));
 CL.AddConstantN('CO_E_FIRST','LongWord').SetUInt( HRESULT ( $800401F0 ));
 CL.AddConstantN('CO_E_LAST','LongWord').SetUInt( HRESULT ( $800401FF ));
 CL.AddConstantN('CO_S_FIRST','LongWord').SetUInt( $401F0);
 CL.AddConstantN('CO_E_NOTINITIALIZED','LongWord').SetUInt( HRESULT ( $800401F0 ));
 CL.AddConstantN('CO_E_ALREADYINITIALIZED','LongWord').SetUInt( HRESULT ( $800401F1 ));
 CL.AddConstantN('CO_E_CANTDETERMINECLASS','LongWord').SetUInt( HRESULT ( $800401F2 ));
 CL.AddConstantN('CO_E_CLASSSTRING','LongWord').SetUInt( HRESULT ( $800401F3 ));
 CL.AddConstantN('CO_E_IIDSTRING','LongWord').SetUInt( HRESULT ( $800401F4 ));
 CL.AddConstantN('CO_E_APPNOTFOUND','LongWord').SetUInt( HRESULT ( $800401F5 ));
 CL.AddConstantN('CO_E_APPSINGLEUSE','LongWord').SetUInt( HRESULT ( $800401F6 ));
 CL.AddConstantN('CO_E_ERRORINAPP','LongWord').SetUInt( HRESULT ( $800401F7 ));
 CL.AddConstantN('CO_E_DLLNOTFOUND','LongWord').SetUInt( HRESULT ( $800401F8 ));
 CL.AddConstantN('CO_E_ERRORINDLL','LongWord').SetUInt( HRESULT ( $800401F9 ));
 CL.AddConstantN('CO_E_WRONGOSFORAPP','LongWord').SetUInt( HRESULT ( $800401FA ));
 CL.AddConstantN('CO_E_OBJNOTREG','LongWord').SetUInt( HRESULT ( $800401FB ));
 CL.AddConstantN('CO_E_OBJISREG','LongWord').SetUInt( HRESULT ( $800401FC ));
 CL.AddConstantN('CO_E_OBJNOTCONNECTED','LongWord').SetUInt( HRESULT ( $800401FD ));
 CL.AddConstantN('CO_E_APPDIDNTREG','LongWord').SetUInt( HRESULT ( $800401FE ));
 CL.AddConstantN('CO_E_RELEASED','LongWord').SetUInt( HRESULT ( $800401FF ));
 CL.AddConstantN('OLE_S_USEREG','LongWord').SetUInt( $40000);
 CL.AddConstantN('OLE_S_STATIC','LongWord').SetUInt( $40001);
 CL.AddConstantN('OLE_S_MAC_CLIPFORMAT','LongWord').SetUInt( $40002);
 CL.AddConstantN('DRAGDROP_S_DROP','LongWord').SetUInt( $40100);
 CL.AddConstantN('DRAGDROP_S_CANCEL','LongWord').SetUInt( $40101);
 CL.AddConstantN('DRAGDROP_S_USEDEFAULTCURSORS','LongWord').SetUInt( $40102);
 CL.AddConstantN('DATA_S_SAMEFORMATETC','LongWord').SetUInt( $40130);
 CL.AddConstantN('VIEW_S_ALREADY_FROZEN','LongWord').SetUInt( $40140);
 CL.AddConstantN('CACHE_S_FORMATETC_NOTSUPPORTED','LongWord').SetUInt( $40170);
 CL.AddConstantN('CACHE_S_SAMECACHE','LongWord').SetUInt( $40171);
 CL.AddConstantN('CACHE_S_SOMECACHES_NOTUPDATED','LongWord').SetUInt( $40172);
 CL.AddConstantN('OLEOBJ_S_INVALIDVERB','LongWord').SetUInt( $40180);
 CL.AddConstantN('OLEOBJ_S_CANNOT_DOVERB_NOW','LongWord').SetUInt( $40181);
 CL.AddConstantN('OLEOBJ_S_INVALIDHWND','LongWord').SetUInt( $40182);
 CL.AddConstantN('INPLACE_S_TRUNCATED','LongWord').SetUInt( $401A0);
 CL.AddConstantN('CONVERT10_S_NO_PRESENTATION','LongWord').SetUInt( $401C0);
 CL.AddConstantN('MK_S_REDUCED_TO_SELF','LongWord').SetUInt( $401E2);
 CL.AddConstantN('MK_S_ME','LongWord').SetUInt( $401E4);
 CL.AddConstantN('MK_S_HIM','LongWord').SetUInt( $401E5);
 CL.AddConstantN('MK_S_US','LongWord').SetUInt( $401E6);
 CL.AddConstantN('MK_S_MONIKERALREADYREGISTERED','LongWord').SetUInt( $401E7);
 CL.AddConstantN('CO_E_CLASS_CREATE_FAILED','LongWord').SetUInt( HRESULT ( $80080001 ));
 CL.AddConstantN('CO_E_SCM_ERROR','LongWord').SetUInt( HRESULT ( $80080002 ));
 CL.AddConstantN('CO_E_SCM_RPC_FAILURE','LongWord').SetUInt( HRESULT ( $80080003 ));
 CL.AddConstantN('CO_E_BAD_PATH','LongWord').SetUInt( HRESULT ( $80080004 ));
 CL.AddConstantN('CO_E_SERVER_EXEC_FAILURE','LongWord').SetUInt( HRESULT ( $80080005 ));
 CL.AddConstantN('CO_E_OBJSRV_RPC_FAILURE','LongWord').SetUInt( HRESULT ( $80080006 ));
 CL.AddConstantN('MK_E_NO_NORMALIZED','LongWord').SetUInt( HRESULT ( $80080007 ));
 CL.AddConstantN('CO_E_SERVER_STOPPING','LongWord').SetUInt( HRESULT ( $80080008 ));
 CL.AddConstantN('MEM_E_INVALID_ROOT','LongWord').SetUInt( HRESULT ( $80080009 ));
 CL.AddConstantN('MEM_E_INVALID_LINK','LongWord').SetUInt( HRESULT ( $80080010 ));
 CL.AddConstantN('MEM_E_INVALID_SIZE','LongWord').SetUInt( HRESULT ( $80080011 ));
 CL.AddConstantN('CO_S_NOTALLINTERFACES','LongWord').SetUInt( $00080012);
 CL.AddConstantN('DISP_E_UNKNOWNINTERFACE','LongWord').SetUInt( HRESULT ( $80020001 ));
 CL.AddConstantN('DISP_E_MEMBERNOTFOUND','LongWord').SetUInt( HRESULT ( $80020003 ));
 CL.AddConstantN('DISP_E_PARAMNOTFOUND','LongWord').SetUInt( HRESULT ( $80020004 ));
 CL.AddConstantN('DISP_E_TYPEMISMATCH','LongWord').SetUInt( HRESULT ( $80020005 ));
 CL.AddConstantN('DISP_E_UNKNOWNNAME','LongWord').SetUInt( HRESULT ( $80020006 ));
 CL.AddConstantN('DISP_E_NONAMEDARGS','LongWord').SetUInt( HRESULT ( $80020007 ));
 CL.AddConstantN('DISP_E_BADVARTYPE','LongWord').SetUInt( HRESULT ( $80020008 ));
 CL.AddConstantN('DISP_E_EXCEPTION','LongWord').SetUInt( HRESULT ( $80020009 ));
 CL.AddConstantN('DISP_E_OVERFLOW','LongWord').SetUInt( HRESULT ( $8002000A ));
 CL.AddConstantN('DISP_E_BADINDEX','LongWord').SetUInt( HRESULT ( $8002000B ));
 CL.AddConstantN('DISP_E_UNKNOWNLCID','LongWord').SetUInt( HRESULT ( $8002000C ));
 CL.AddConstantN('DISP_E_ARRAYISLOCKED','LongWord').SetUInt( HRESULT ( $8002000D ));
 CL.AddConstantN('DISP_E_BADPARAMCOUNT','LongWord').SetUInt( HRESULT ( $8002000E ));
 CL.AddConstantN('DISP_E_PARAMNOTOPTIONAL','LongWord').SetUInt( HRESULT ( $8002000F ));
 CL.AddConstantN('DISP_E_BADCALLEE','LongWord').SetUInt( HRESULT ( $80020010 ));
 CL.AddConstantN('DISP_E_NOTACOLLECTION','LongWord').SetUInt( HRESULT ( $80020011 ));
 CL.AddConstantN('TYPE_E_BUFFERTOOSMALL','LongWord').SetUInt( HRESULT ( $80028016 ));
 CL.AddConstantN('TYPE_E_INVDATAREAD','LongWord').SetUInt( HRESULT ( $80028018 ));
 CL.AddConstantN('TYPE_E_UNSUPFORMAT','LongWord').SetUInt( HRESULT ( $80028019 ));
 CL.AddConstantN('TYPE_E_REGISTRYACCESS','LongWord').SetUInt( HRESULT ( $8002801C ));
 CL.AddConstantN('TYPE_E_LIBNOTREGISTERED','LongWord').SetUInt( HRESULT ( $8002801D ));
 CL.AddConstantN('TYPE_E_UNDEFINEDTYPE','LongWord').SetUInt( HRESULT ( $80028027 ));
 CL.AddConstantN('TYPE_E_QUALIFIEDNAMEDISALLOWED','LongWord').SetUInt( HRESULT ( $80028028 ));
 CL.AddConstantN('TYPE_E_INVALIDSTATE','LongWord').SetUInt( HRESULT ( $80028029 ));
 CL.AddConstantN('TYPE_E_WRONGTYPEKIND','LongWord').SetUInt( HRESULT ( $8002802A ));
 CL.AddConstantN('TYPE_E_ELEMENTNOTFOUND','LongWord').SetUInt( HRESULT ( $8002802B ));
 CL.AddConstantN('TYPE_E_AMBIGUOUSNAME','LongWord').SetUInt( HRESULT ( $8002802C ));
 CL.AddConstantN('TYPE_E_NAMECONFLICT','LongWord').SetUInt( HRESULT ( $8002802D ));
 CL.AddConstantN('TYPE_E_UNKNOWNLCID','LongWord').SetUInt( HRESULT ( $8002802E ));
 CL.AddConstantN('TYPE_E_DLLFUNCTIONNOTFOUND','LongWord').SetUInt( HRESULT ( $8002802F ));
 CL.AddConstantN('TYPE_E_BADMODULEKIND','LongWord').SetUInt( HRESULT ( $800288BD ));
 CL.AddConstantN('TYPE_E_SIZETOOBIG','LongWord').SetUInt( HRESULT ( $800288C5 ));
 CL.AddConstantN('TYPE_E_DUPLICATEID','LongWord').SetUInt( HRESULT ( $800288C6 ));
 CL.AddConstantN('TYPE_E_INVALIDID','LongWord').SetUInt( HRESULT ( $800288CF ));
 CL.AddConstantN('TYPE_E_TYPEMISMATCH','LongWord').SetUInt( HRESULT ( $80028CA0 ));
 CL.AddConstantN('TYPE_E_OUTOFBOUNDS','LongWord').SetUInt( HRESULT ( $80028CA1 ));
 CL.AddConstantN('TYPE_E_IOERROR','LongWord').SetUInt( HRESULT ( $80028CA2 ));
 CL.AddConstantN('TYPE_E_CANTCREATETMPFILE','LongWord').SetUInt( HRESULT ( $80028CA3 ));
 CL.AddConstantN('TYPE_E_CANTLOADLIBRARY','LongWord').SetUInt( HRESULT ( $80029C4A ));
 CL.AddConstantN('TYPE_E_INCONSISTENTPROPFUNCS','LongWord').SetUInt( HRESULT ( $80029C83 ));
 CL.AddConstantN('TYPE_E_CIRCULARTYPE','LongWord').SetUInt( HRESULT ( $80029C84 ));
 CL.AddConstantN('STG_E_INVALIDFUNCTION','LongWord').SetUInt( HRESULT ( $80030001 ));
 CL.AddConstantN('STG_E_FILENOTFOUND','LongWord').SetUInt( HRESULT ( $80030002 ));
 CL.AddConstantN('STG_E_PATHNOTFOUND','LongWord').SetUInt( HRESULT ( $80030003 ));
 CL.AddConstantN('STG_E_TOOMANYOPENFILES','LongWord').SetUInt( HRESULT ( $80030004 ));
 CL.AddConstantN('STG_E_ACCESSDENIED','LongWord').SetUInt( HRESULT ( $80030005 ));
 CL.AddConstantN('STG_E_INVALIDHANDLE','LongWord').SetUInt( HRESULT ( $80030006 ));
 CL.AddConstantN('STG_E_INSUFFICIENTMEMORY','LongWord').SetUInt( HRESULT ( $80030008 ));
 CL.AddConstantN('STG_E_INVALIDPOINTER','LongWord').SetUInt( HRESULT ( $80030009 ));
 CL.AddConstantN('STG_E_NOMOREFILES','LongWord').SetUInt( HRESULT ( $80030012 ));
 CL.AddConstantN('STG_E_DISKISWRITEPROTECTED','LongWord').SetUInt( HRESULT ( $80030013 ));
 CL.AddConstantN('STG_E_SEEKERROR','LongWord').SetUInt( HRESULT ( $80030019 ));
 CL.AddConstantN('STG_E_WRITEFAULT','LongWord').SetUInt( HRESULT ( $8003001D ));
 CL.AddConstantN('STG_E_READFAULT','LongWord').SetUInt( HRESULT ( $8003001E ));
 CL.AddConstantN('STG_E_SHAREVIOLATION','LongWord').SetUInt( HRESULT ( $80030020 ));
 CL.AddConstantN('STG_E_LOCKVIOLATION','LongWord').SetUInt( HRESULT ( $80030021 ));
 CL.AddConstantN('STG_E_FILEALREADYEXISTS','LongWord').SetUInt( HRESULT ( $80030050 ));
 CL.AddConstantN('STG_E_INVALIDPARAMETER','LongWord').SetUInt( HRESULT ( $80030057 ));
 CL.AddConstantN('STG_E_MEDIUMFULL','LongWord').SetUInt( HRESULT ( $80030070 ));
 CL.AddConstantN('STG_E_PROPSETMISMATCHED','LongWord').SetUInt( HRESULT ( $800300F0 ));
 CL.AddConstantN('STG_E_ABNORMALAPIEXIT','LongWord').SetUInt( HRESULT ( $800300FA ));
 CL.AddConstantN('STG_E_INVALIDHEADER','LongWord').SetUInt( HRESULT ( $800300FB ));
 CL.AddConstantN('STG_E_INVALIDNAME','LongWord').SetUInt( HRESULT ( $800300FC ));
 CL.AddConstantN('STG_E_UNKNOWN','LongWord').SetUInt( HRESULT ( $800300FD ));
 CL.AddConstantN('STG_E_UNIMPLEMENTEDFUNCTION','LongWord').SetUInt( HRESULT ( $800300FE ));
 CL.AddConstantN('STG_E_INVALIDFLAG','LongWord').SetUInt( HRESULT ( $800300FF ));
 CL.AddConstantN('STG_E_INUSE','LongWord').SetUInt( HRESULT ( $80030100 ));
 CL.AddConstantN('STG_E_NOTCURRENT','LongWord').SetUInt( HRESULT ( $80030101 ));
 CL.AddConstantN('STG_E_REVERTED','LongWord').SetUInt( HRESULT ( $80030102 ));
 CL.AddConstantN('STG_E_CANTSAVE','LongWord').SetUInt( HRESULT ( $80030103 ));
 CL.AddConstantN('STG_E_OLDFORMAT','LongWord').SetUInt( HRESULT ( $80030104 ));
 CL.AddConstantN('STG_E_OLDDLL','LongWord').SetUInt( HRESULT ( $80030105 ));
 CL.AddConstantN('STG_E_SHAREREQUIRED','LongWord').SetUInt( HRESULT ( $80030106 ));
 CL.AddConstantN('STG_E_NOTFILEBASEDSTORAGE','LongWord').SetUInt( HRESULT ( $80030107 ));
 CL.AddConstantN('STG_E_EXTANTMARSHALLINGS','LongWord').SetUInt( HRESULT ( $80030108 ));
 CL.AddConstantN('STG_E_DOCFILECORRUPT','LongWord').SetUInt( HRESULT ( $80030109 ));
 CL.AddConstantN('STG_E_BADBASEADDRESS','LongWord').SetUInt( HRESULT ( $80030110 ));
 CL.AddConstantN('STG_E_INCOMPLETE','LongWord').SetUInt( HRESULT ( $80030201 ));
 CL.AddConstantN('STG_E_TERMINATED','LongWord').SetUInt( HRESULT ( $80030202 ));
 CL.AddConstantN('STG_S_CONVERTED','LongWord').SetUInt( $00030200);
 CL.AddConstantN('STG_S_BLOCK','LongWord').SetUInt( $00030201);
 CL.AddConstantN('STG_S_RETRYNOW','LongWord').SetUInt( $00030202);
 CL.AddConstantN('STG_S_MONITORING','LongWord').SetUInt( $00030203);
 CL.AddConstantN('RPC_E_CALL_REJECTED','LongWord').SetUInt( HRESULT ( $80010001 ));
 CL.AddConstantN('RPC_E_CALL_CANCELED','LongWord').SetUInt( HRESULT ( $80010002 ));
 CL.AddConstantN('RPC_E_CANTPOST_INSENDCALL','LongWord').SetUInt( HRESULT ( $80010003 ));
 CL.AddConstantN('RPC_E_CANTCALLOUT_INASYNCCALL','LongWord').SetUInt( HRESULT ( $80010004 ));
 CL.AddConstantN('RPC_E_CANTCALLOUT_INEXTERNALCALL','LongWord').SetUInt( HRESULT ( $80010005 ));
 CL.AddConstantN('RPC_E_CONNECTION_TERMINATED','LongWord').SetUInt( HRESULT ( $80010006 ));
 CL.AddConstantN('RPC_E_SERVER_DIED','LongWord').SetUInt( HRESULT ( $80010007 ));
 CL.AddConstantN('RPC_E_CLIENT_DIED','LongWord').SetUInt( HRESULT ( $80010008 ));
 CL.AddConstantN('RPC_E_INVALID_DATAPACKET','LongWord').SetUInt( HRESULT ( $80010009 ));
 CL.AddConstantN('RPC_E_CANTTRANSMIT_CALL','LongWord').SetUInt( HRESULT ( $8001000A ));
 CL.AddConstantN('RPC_E_CLIENT_CANTMARSHAL_DATA','LongWord').SetUInt( HRESULT ( $8001000B ));
 CL.AddConstantN('RPC_E_CLIENT_CANTUNMARSHAL_DATA','LongWord').SetUInt( HRESULT ( $8001000C ));
 CL.AddConstantN('RPC_E_SERVER_CANTMARSHAL_DATA','LongWord').SetUInt( HRESULT ( $8001000D ));
 CL.AddConstantN('RPC_E_SERVER_CANTUNMARSHAL_DATA','LongWord').SetUInt( HRESULT ( $8001000E ));
 CL.AddConstantN('RPC_E_INVALID_DATA','LongWord').SetUInt( HRESULT ( $8001000F ));
 CL.AddConstantN('RPC_E_INVALID_PARAMETER','LongWord').SetUInt( HRESULT ( $80010010 ));
 CL.AddConstantN('RPC_E_CANTCALLOUT_AGAIN','LongWord').SetUInt( HRESULT ( $80010011 ));
 CL.AddConstantN('RPC_E_SERVER_DIED_DNE','LongWord').SetUInt( HRESULT ( $80010012 ));
 CL.AddConstantN('RPC_E_SYS_CALL_FAILED','LongWord').SetUInt( HRESULT ( $80010100 ));
 CL.AddConstantN('RPC_E_OUT_OF_RESOURCES','LongWord').SetUInt( HRESULT ( $80010101 ));
 CL.AddConstantN('RPC_E_ATTEMPTED_MULTITHREAD','LongWord').SetUInt( HRESULT ( $80010102 ));
 CL.AddConstantN('RPC_E_NOT_REGISTERED','LongWord').SetUInt( HRESULT ( $80010103 ));
 CL.AddConstantN('RPC_E_FAULT','LongWord').SetUInt( HRESULT ( $80010104 ));
 CL.AddConstantN('RPC_E_SERVERFAULT','LongWord').SetUInt( HRESULT ( $80010105 ));
 CL.AddConstantN('RPC_E_CHANGED_MODE','LongWord').SetUInt( HRESULT ( $80010106 ));
 CL.AddConstantN('RPC_E_INVALIDMETHOD','LongWord').SetUInt( HRESULT ( $80010107 ));
 CL.AddConstantN('RPC_E_DISCONNECTED','LongWord').SetUInt( HRESULT ( $80010108 ));
 CL.AddConstantN('RPC_E_RETRY','LongWord').SetUInt( HRESULT ( $80010109 ));
 CL.AddConstantN('RPC_E_SERVERCALL_RETRYLATER','LongWord').SetUInt( HRESULT ( $8001010A ));
 CL.AddConstantN('RPC_E_SERVERCALL_REJECTED','LongWord').SetUInt( HRESULT ( $8001010B ));
 CL.AddConstantN('RPC_E_INVALID_CALLDATA','LongWord').SetUInt( HRESULT ( $8001010C ));
 CL.AddConstantN('RPC_E_CANTCALLOUT_ININPUTSYNCCALL','LongWord').SetUInt( HRESULT ( $8001010D ));
 CL.AddConstantN('RPC_E_WRONG_THREAD','LongWord').SetUInt( HRESULT ( $8001010E ));
 CL.AddConstantN('RPC_E_THREAD_NOT_INIT','LongWord').SetUInt( HRESULT ( $8001010F ));
 CL.AddConstantN('RPC_E_VERSION_MISMATCH','LongWord').SetUInt( HRESULT ( $80010110 ));
 CL.AddConstantN('RPC_E_INVALID_HEADER','LongWord').SetUInt( HRESULT ( $80010111 ));
 CL.AddConstantN('RPC_E_INVALID_EXTENSION','LongWord').SetUInt( HRESULT ( $80010112 ));
 CL.AddConstantN('RPC_E_INVALID_IPID','LongWord').SetUInt( HRESULT ( $80010113 ));
 CL.AddConstantN('RPC_E_INVALID_OBJECT','LongWord').SetUInt( HRESULT ( $80010114 ));
 CL.AddConstantN('RPC_S_CALLPENDING','LongWord').SetUInt( HRESULT ( $80010115 ));
 CL.AddConstantN('RPC_S_WAITONTIMER','LongWord').SetUInt( HRESULT ( $80010116 ));
 CL.AddConstantN('RPC_E_CALL_COMPLETE','LongWord').SetUInt( HRESULT ( $80010117 ));
 CL.AddConstantN('RPC_E_UNSECURE_CALL','LongWord').SetUInt( HRESULT ( $80010118 ));
 CL.AddConstantN('RPC_E_TOO_LATE','LongWord').SetUInt( HRESULT ( $80010119 ));
 CL.AddConstantN('RPC_E_NO_GOOD_SECURITY_PACKAGES','LongWord').SetUInt( HRESULT ( $8001011A ));
 CL.AddConstantN('RPC_E_ACCESS_DENIED','LongWord').SetUInt( HRESULT ( $8001011B ));
 CL.AddConstantN('RPC_E_REMOTE_DISABLED','LongWord').SetUInt( HRESULT ( $8001011C ));
 CL.AddConstantN('RPC_E_INVALID_OBJREF','LongWord').SetUInt( HRESULT ( $8001011D ));
 CL.AddConstantN('RPC_E_NO_CONTEXT','LongWord').SetUInt( HRESULT ( $8001011E ));
 CL.AddConstantN('RPC_E_TIMEOUT','LongWord').SetUInt( HRESULT ( $8001011F ));
 CL.AddConstantN('RPC_E_UNEXPECTED','LongWord').SetUInt( HRESULT ( $8001FFFF ));
 CL.AddConstantN('NTE_BAD_UID','LongWord').SetUInt( HRESULT ( $80090001 ));
 CL.AddConstantN('NTE_BAD_HASH','LongWord').SetUInt( HRESULT ( $80090002 ));
 CL.AddConstantN('NTE_BAD_KEY','LongWord').SetUInt( HRESULT ( $80090003 ));
 CL.AddConstantN('NTE_BAD_LEN','LongWord').SetUInt( HRESULT ( $80090004 ));
 CL.AddConstantN('NTE_BAD_DATA','LongWord').SetUInt( HRESULT ( $80090005 ));
 CL.AddConstantN('NTE_BAD_SIGNATURE','LongWord').SetUInt( HRESULT ( $80090006 ));
 CL.AddConstantN('NTE_BAD_VER','LongWord').SetUInt( HRESULT ( $80090007 ));
 CL.AddConstantN('NTE_BAD_ALGID','LongWord').SetUInt( HRESULT ( $80090008 ));
 CL.AddConstantN('NTE_BAD_FLAGS','LongWord').SetUInt( HRESULT ( $80090009 ));
 CL.AddConstantN('NTE_BAD_TYPE','LongWord').SetUInt( HRESULT ( $8009000A ));
 CL.AddConstantN('NTE_BAD_KEY_STATE','LongWord').SetUInt( HRESULT ( $8009000B ));
 CL.AddConstantN('NTE_BAD_HASH_STATE','LongWord').SetUInt( HRESULT ( $8009000C ));
 CL.AddConstantN('NTE_NO_KEY','LongWord').SetUInt( HRESULT ( $8009000D ));
 CL.AddConstantN('NTE_NO_MEMORY','LongWord').SetUInt( HRESULT ( $8009000E ));
 CL.AddConstantN('NTE_EXISTS','LongWord').SetUInt( HRESULT ( $8009000F ));
 CL.AddConstantN('NTE_PERM','LongWord').SetUInt( HRESULT ( $80090010 ));
 CL.AddConstantN('NTE_NOT_FOUND','LongWord').SetUInt( HRESULT ( $80090011 ));
 CL.AddConstantN('NTE_DOUBLE_ENCRYPT','LongWord').SetUInt( HRESULT ( $80090012 ));
 CL.AddConstantN('NTE_BAD_PROVIDER','LongWord').SetUInt( HRESULT ( $80090013 ));
 CL.AddConstantN('NTE_BAD_PROV_TYPE','LongWord').SetUInt( HRESULT ( $80090014 ));
 CL.AddConstantN('NTE_BAD_PUBLIC_KEY','LongWord').SetUInt( HRESULT ( $80090015 ));
 CL.AddConstantN('NTE_BAD_KEYSET','LongWord').SetUInt( HRESULT ( $80090016 ));
 CL.AddConstantN('NTE_PROV_TYPE_NOT_DEF','LongWord').SetUInt( HRESULT ( $80090017 ));
 CL.AddConstantN('NTE_PROV_TYPE_ENTRY_BAD','LongWord').SetUInt( HRESULT ( $80090018 ));
 CL.AddConstantN('NTE_KEYSET_NOT_DEF','LongWord').SetUInt( HRESULT ( $80090019 ));
 CL.AddConstantN('NTE_KEYSET_ENTRY_BAD','LongWord').SetUInt( HRESULT ( $8009001A ));
 CL.AddConstantN('NTE_PROV_TYPE_NO_MATCH','LongWord').SetUInt( HRESULT ( $8009001B ));
 CL.AddConstantN('NTE_SIGNATURE_FILE_BAD','LongWord').SetUInt( HRESULT ( $8009001C ));
 CL.AddConstantN('NTE_PROVIDER_DLL_FAIL','LongWord').SetUInt( HRESULT ( $8009001D ));
 CL.AddConstantN('NTE_PROV_DLL_NOT_FOUND','LongWord').SetUInt( HRESULT ( $8009001E ));
 CL.AddConstantN('NTE_BAD_KEYSET_PARAM','LongWord').SetUInt( HRESULT ( $8009001F ));
 CL.AddConstantN('NTE_FAIL','LongWord').SetUInt( HRESULT ( $80090020 ));
 CL.AddConstantN('NTE_SYS_ERR','LongWord').SetUInt( HRESULT ( $80090021 ));
 CL.AddConstantN('NTE_OP_OK','LongInt').SetInt( 0);
 CL.AddConstantN('TRUST_E_PROVIDER_UNKNOWN','LongWord').SetUInt( HRESULT ( $800B0001 ));
 CL.AddConstantN('TRUST_E_ACTION_UNKNOWN','LongWord').SetUInt( HRESULT ( $800B0002 ));
 CL.AddConstantN('TRUST_E_SUBJECT_FORM_UNKNOWN','LongWord').SetUInt( HRESULT ( $800B0003 ));
 CL.AddConstantN('TRUST_E_SUBJECT_NOT_TRUSTED','LongWord').SetUInt( HRESULT ( $800B0004 ));
 CL.AddConstantN('DIGSIG_E_ENCODE','LongWord').SetUInt( HRESULT ( $800B0005 ));
 CL.AddConstantN('DIGSIG_E_DECODE','LongWord').SetUInt( HRESULT ( $800B0006 ));
 CL.AddConstantN('DIGSIG_E_EXTENSIBILITY','LongWord').SetUInt( HRESULT ( $800B0007 ));
 CL.AddConstantN('DIGSIG_E_CRYPTO','LongWord').SetUInt( HRESULT ( $800B0008 ));
 CL.AddConstantN('PERSIST_E_SIZEDEFINITE','LongWord').SetUInt( HRESULT ( $800B0009 ));
 CL.AddConstantN('PERSIST_E_SIZEINDEFINITE','LongWord').SetUInt( HRESULT ( $800B000A ));
 CL.AddConstantN('PERSIST_E_NOTSELFSIZING','LongWord').SetUInt( HRESULT ( $800B000B ));
 CL.AddConstantN('TRUST_E_NOSIGNATURE','LongWord').SetUInt( HRESULT ( $800B0100 ));
 CL.AddConstantN('CERT_E_EXPIRED','LongWord').SetUInt( HRESULT ( $800B0101 ));
 CL.AddConstantN('CERT_E_VALIDIYPERIODNESTING','LongWord').SetUInt( HRESULT ( $800B0102 ));
 CL.AddConstantN('CERT_E_ROLE','LongWord').SetUInt( HRESULT ( $800B0103 ));
 CL.AddConstantN('CERT_E_PATHLENCONST','LongWord').SetUInt( HRESULT ( $800B0104 ));
 CL.AddConstantN('CERT_E_CRITICAL','LongWord').SetUInt( HRESULT ( $800B0105 ));
 CL.AddConstantN('CERT_E_PURPOSE','LongWord').SetUInt( HRESULT ( $800B0106 ));
 CL.AddConstantN('CERT_E_ISSUERCHAINING','LongWord').SetUInt( HRESULT ( $800B0107 ));
 CL.AddConstantN('CERT_E_MALFORMED','LongWord').SetUInt( HRESULT ( $800B0108 ));
 CL.AddConstantN('CERT_E_UNTRUSTEDROOT','LongWord').SetUInt( HRESULT ( $800B0109 ));
 CL.AddConstantN('CERT_E_CHAINING','LongWord').SetUInt( HRESULT ( $800B010A ));
 CL.AddConstantN('TC_NORMAL','LongInt').SetInt( 0);
 CL.AddConstantN('TC_HARDERR','LongInt').SetInt( 1);
 CL.AddConstantN('TC_GP_TRAP','LongInt').SetInt( 2);
 CL.AddConstantN('TC_SIGNAL','LongInt').SetInt( 3);
 CL.AddConstantN('AC_LINE_OFFLINE','LongInt').SetInt( 0);
 CL.AddConstantN('AC_LINE_ONLINE','LongInt').SetInt( 1);
 CL.AddConstantN('AC_LINE_BACKUP_POWER','LongInt').SetInt( 2);
 CL.AddConstantN('AC_LINE_UNKNOWN','LongInt').SetInt( 255);
 CL.AddConstantN('BATTERY_FLAG_HIGH','LongInt').SetInt( 1);
 CL.AddConstantN('BATTERY_FLAG_LOW','LongInt').SetInt( 2);
 CL.AddConstantN('BATTERY_FLAG_CRITICAL','LongInt').SetInt( 4);
 CL.AddConstantN('BATTERY_FLAG_CHARGING','LongInt').SetInt( 8);
 CL.AddConstantN('BATTERY_FLAG_NO_BATTERY','LongWord').SetUInt( $80);
 CL.AddConstantN('BATTERY_FLAG_UNKNOWN','LongInt').SetInt( 255);
 CL.AddConstantN('BATTERY_PERCENTAGE_UNKNOWN','LongInt').SetInt( 255);
 CL.AddConstantN('BATTERY_LIFE_UNKNOWN','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
  CL.AddTypeS('PSystemPowerStatus', '^TSystemPowerStatus // will not work');
  CL.AddTypeS('_SYSTEM_POWER_STATUS', 'record ACLineStatus : Byte; BatteryFlag '
   +': Byte; BatteryLifePercent : Byte; Reserved1 : Byte; BatteryLifeTime : DWO'
   +'RD; BatteryFullLifeTime : DWORD; end');
  CL.AddTypeS('TSystemPowerStatus', '_SYSTEM_POWER_STATUS');
  CL.AddTypeS('SYSTEM_POWER_STATUS', '_SYSTEM_POWER_STATUS');
 CL.AddDelphiFunction('Function GetSystemPowerStatus( var lpSystemPowerStatus : TSystemPowerStatus) : BOOL');
 CL.AddDelphiFunction('Function SetSystemPowerState( fSuspend, fForce : BOOL) : BOOL');
  CL.AddTypeS('PWinCertificate', '^TWinCertificate // will not work');
  CL.AddTypeS('TWinCertificate', '_WIN_CERTIFICATE');
  CL.AddTypeS('WIN_CERTIFICATE', '_WIN_CERTIFICATE');
 CL.AddConstantN('WIN_CERT_REVISION_1_0','LongWord').SetUInt( $0100);
 CL.AddConstantN('WIN_CERT_TYPE_X509','LongWord').SetUInt( $0001);
 CL.AddConstantN('WIN_CERT_TYPE_PKCS_SIGNED_DATA','LongWord').SetUInt( $0002);
 CL.AddConstantN('WIN_CERT_TYPE_RESERVED_1','LongWord').SetUInt( $0003);
 CL.AddDelphiFunction('Function WinSubmitCertificate( var lpCertificate : TWinCertificate) : BOOL');
 CL.AddDelphiFunction('Function WinVerifyTrust( hwnd : HWND; const ActionID : TGUID; ActionData : Pointer) : Longint');
 CL.AddDelphiFunction('Function WinLoadTrustProvider( ActionID : PGUID) : BOOL');
  CL.AddTypeS('TWinTrustSubject', 'Pointer');
  CL.AddTypeS('PWinTrustActdataContextWithSubject', '^TWinTrustActdataContextWi'
   +'thSubject // will not work');
  CL.AddTypeS('_WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT', 'record hClientToken :'
   +' THandle; SubjectType : PGUID; Subject : TWinTrustSubject; end');
  CL.AddTypeS('TWinTrustActdataContextWithSubject', '_WIN_TRUST_ACTDATA_CONTEXT'
   +'_WITH_SUBJECT');
  CL.AddTypeS('WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT', '_WIN_TRUST_ACTDATA_CON'
   +'TEXT_WITH_SUBJECT');
  CL.AddTypeS('PWinTrustActdataSubjectOnly', '^TWinTrustActdataSubjectOnly // w'
   +'ill not work');
  CL.AddTypeS('_WIN_TRUST_ACTDATA_SUBJECT_ONLY', 'record SubjectType : PGUID; S'
   +'ubject : TWinTrustSubject; end');
  CL.AddTypeS('TWinTrustActdataSubjectOnly', '_WIN_TRUST_ACTDATA_SUBJECT_ONLY');
  CL.AddTypeS('WIN_TRUST_ACTDATA_SUBJECT_ONLY', '_WIN_TRUST_ACTDATA_SUBJECT_ONL'
   +'Y');
 CL.AddConstantN('WIN_TRUST_SUBJTYPE_RAW_FILE','TGUID').SetString( '{959dc450-8d9e-11cf-8736-00aa00a485eb}');
 CL.AddConstantN('WIN_TRUST_SUBJTYPE_PE_IMAGE','TGUID').SetString( '{43c9a1e0-8da0-11cf-8736-00aa00a485eb}');
 CL.AddConstantN('WIN_TRUST_SUBJTYPE_JAVA_CLASS','TGUID').SetString( '{08ad3990-8da1-11cf-8736-00aa00a485eb}');
 CL.AddConstantN('WIN_TRUST_SUBJTYPE_CABINET','TGUID').SetString( '{d17c5374-a392-11cf-9df5-00aa00c184e0}');
  CL.AddTypeS('PWinTrustSubjectFile', '^TWinTrustSubjectFile // will not work');
  CL.AddTypeS('_WIN_TRUST_SUBJECT_FILE', 'record hFile : THandle; lpPath : PWid'
   +'eChar; end');
  CL.AddTypeS('TWinTrustSubjectFile', '_WIN_TRUST_SUBJECT_FILE');
  CL.AddTypeS('WIN_TRUST_SUBJECT_FILE', '_WIN_TRUST_SUBJECT_FILE');
  CL.AddTypeS('PWinTrustSubjectFileAndDisplay', '^TWinTrustSubjectFileAndDispla'
   +'y // will not work');
  CL.AddTypeS('_WIN_TRUST_SUBJECT_FILE_AND_DISPLAY', 'record hFile : THandle; l'
   +'pPath : PWideString; lpDisplayName : PWideString; end');
  CL.AddTypeS('TWinTrustSubjectFileAndDisplay', '_WIN_TRUST_SUBJECT_FILE_AND_DI'
   +'SPLAY');
  CL.AddTypeS('WIN_TRUST_SUBJECT_FILE_AND_DISPLAY', '_WIN_TRUST_SUBJECT_FILE_AN'
   +'D_DISPLAY');
  CL.AddTypeS('PWinSpubTrustedPublisherData', '^TWinSpubTrustedPublisherData //'
   +' will not work');
  CL.AddTypeS('_WIN_SPUB_TRUSTED_PUBLISHER_DATA', 'record hClientToken : THandl'
   +'e; lpCertificate : PWinCertificate; end');
  CL.AddTypeS('TWinSpubTrustedPublisherData', '_WIN_SPUB_TRUSTED_PUBLISHER_DATA');
  CL.AddTypeS('WIN_SPUB_TRUSTED_PUBLISHER_DATA', '_WIN_SPUB_TRUSTED_PUBLISHER_D'
   +'ATA');
 CL.AddConstantN('R2_BLACK','LongInt').SetInt( 1);
 CL.AddConstantN('R2_NOTMERGEPEN','LongInt').SetInt( 2);
 CL.AddConstantN('R2_MASKNOTPEN','LongInt').SetInt( 3);
 CL.AddConstantN('R2_NOTCOPYPEN','LongInt').SetInt( 4);
 CL.AddConstantN('R2_MASKPENNOT','LongInt').SetInt( 5);
 CL.AddConstantN('R2_NOT','LongInt').SetInt( 6);
 CL.AddConstantN('R2_XORPEN','LongInt').SetInt( 7);
 CL.AddConstantN('R2_NOTMASKPEN','LongInt').SetInt( 8);
 CL.AddConstantN('R2_MASKPEN','LongInt').SetInt( 9);
 CL.AddConstantN('R2_NOTXORPEN','LongInt').SetInt( 10);
 CL.AddConstantN('R2_NOP','LongInt').SetInt( 11);
 CL.AddConstantN('R2_MERGENOTPEN','LongInt').SetInt( 12);
 CL.AddConstantN('R2_COPYPEN','LongInt').SetInt( 13);
 CL.AddConstantN('R2_MERGEPENNOT','LongInt').SetInt( 14);
 CL.AddConstantN('R2_MERGEPEN','LongInt').SetInt( 15);
 CL.AddConstantN('R2_WHITE','LongWord').SetUInt( $10);
 CL.AddConstantN('R2_LAST','LongWord').SetUInt( $10);
 CL.AddConstantN('SRCCOPY','LongWord').SetUInt( $00CC0020);
 CL.AddConstantN('SRCPAINT','LongWord').SetUInt( $00EE0086);
 CL.AddConstantN('SRCAND','LongWord').SetUInt( $008800C6);
 CL.AddConstantN('SRCINVERT','LongWord').SetUInt( $00660046);
 CL.AddConstantN('SRCERASE','LongWord').SetUInt( $00440328);
 CL.AddConstantN('NOTSRCCOPY','LongWord').SetUInt( $00330008);
 CL.AddConstantN('NOTSRCERASE','LongWord').SetUInt( $001100A6);
 CL.AddConstantN('MERGECOPY','LongWord').SetUInt( $00C000CA);
 CL.AddConstantN('MERGEPAINT','LongWord').SetUInt( $00BB0226);
 CL.AddConstantN('PATCOPY','LongWord').SetUInt( $00F00021);
 CL.AddConstantN('PATPAINT','LongWord').SetUInt( $00FB0A09);
 CL.AddConstantN('PATINVERT','LongWord').SetUInt( $005A0049);
 CL.AddConstantN('DSTINVERT','LongWord').SetUInt( $00550009);
 CL.AddConstantN('BLACKNESS','LongWord').SetUInt( $00000042);
 CL.AddConstantN('WHITENESS','LongWord').SetUInt( $00FF0062);
 CL.AddDelphiFunction('Function MakeROP4( fore, back : DWORD) : DWORD');
 CL.AddConstantN('GDI_ERROR','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('HGDI_ERROR','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('ERROR','LongInt').SetInt( 0);
 CL.AddConstantN('NULLREGION','LongInt').SetInt( 1);
 CL.AddConstantN('SIMPLEREGION','LongInt').SetInt( 2);
 CL.AddConstantN('COMPLEXREGION','LongInt').SetInt( 3);
 CL.AddConstantN('RGN_ERROR','').SetString( ERROR);
 CL.AddConstantN('RGN_AND','LongInt').SetInt( 1);
 CL.AddConstantN('RGN_OR','LongInt').SetInt( 2);
 CL.AddConstantN('RGN_XOR','LongInt').SetInt( 3);
 CL.AddConstantN('RGN_DIFF','LongInt').SetInt( 4);
 CL.AddConstantN('RGN_COPY','LongInt').SetInt( 5);
 CL.AddConstantN('RGN_MIN','').SetString( RGN_AND);
 CL.AddConstantN('RGN_MAX','').SetString( RGN_COPY);
 CL.AddConstantN('BLACKONWHITE','LongInt').SetInt( 1);
 CL.AddConstantN('WHITEONBLACK','LongInt').SetInt( 2);
 CL.AddConstantN('COLORONCOLOR','LongInt').SetInt( 3);
 CL.AddConstantN('HALFTONE','LongInt').SetInt( 4);
 CL.AddConstantN('MAXSTRETCHBLTMODE','LongInt').SetInt( 4);
 CL.AddConstantN('STRETCH_ANDSCANS','').SetString( BLACKONWHITE);
 CL.AddConstantN('STRETCH_ORSCANS','').SetString( WHITEONBLACK);
 CL.AddConstantN('STRETCH_DELETESCANS','').SetString( COLORONCOLOR);
 CL.AddConstantN('STRETCH_HALFTONE','').SetString( HALFTONE);
 CL.AddConstantN('ALTERNATE','LongInt').SetInt( 1);
 CL.AddConstantN('WINDING','LongInt').SetInt( 2);
 CL.AddConstantN('POLYFILL_LAST','LongInt').SetInt( 2);
 CL.AddConstantN('TA_NOUPDATECP','LongInt').SetInt( 0);
 CL.AddConstantN('TA_UPDATECP','LongInt').SetInt( 1);
 CL.AddConstantN('TA_LEFT','LongInt').SetInt( 0);
 CL.AddConstantN('TA_RIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('TA_CENTER','LongInt').SetInt( 6);
 CL.AddConstantN('TA_TOP','LongInt').SetInt( 0);
 CL.AddConstantN('TA_BOTTOM','LongInt').SetInt( 8);
 CL.AddConstantN('TA_BASELINE','LongInt').SetInt( 24);
 CL.AddConstantN('TA_RTLREADING','LongWord').SetUInt( $100);
 CL.AddConstantN('VTA_BASELINE','').SetString( TA_BASELINE);
 CL.AddConstantN('VTA_LEFT','').SetString( TA_BOTTOM);
 CL.AddConstantN('VTA_RIGHT','').SetString( TA_TOP);
 CL.AddConstantN('VTA_CENTER','').SetString( TA_CENTER);
 CL.AddConstantN('VTA_BOTTOM','').SetString( TA_RIGHT);
 CL.AddConstantN('VTA_TOP','').SetString( TA_LEFT);
 CL.AddConstantN('ETO_OPAQUE','LongInt').SetInt( 2);
 CL.AddConstantN('ETO_CLIPPED','LongInt').SetInt( 4);
 CL.AddConstantN('ETO_GLYPH_INDEX','LongWord').SetUInt( $10);
 CL.AddConstantN('ETO_RTLREADING','LongWord').SetUInt( $80);
 CL.AddConstantN('ETO_NUMERICSLOCAL','LongWord').SetUInt( $400);
 CL.AddConstantN('ETO_NUMERICSLATIN','LongWord').SetUInt( $800);
 CL.AddConstantN('ETO_IGNORELANGUAGE','LongWord').SetUInt( $1000);
 CL.AddConstantN('ETO_PDY','LongWord').SetUInt( $2000);
 CL.AddConstantN('ASPECT_FILTERING','LongInt').SetInt( 1);
 CL.AddConstantN('DCB_RESET','LongInt').SetInt( 1);
 CL.AddConstantN('DCB_ACCUMULATE','LongInt').SetInt( 2);
 CL.AddConstantN('DCB_DIRTY','').SetString( DCB_ACCUMULATE);
 CL.AddConstantN('DCB_ENABLE','LongInt').SetInt( 4);
 CL.AddConstantN('DCB_DISABLE','LongInt').SetInt( 8);
 CL.AddConstantN('META_SETBKCOLOR','LongInt').SetInt( 513);
 CL.AddConstantN('META_SETBKMODE','LongInt').SetInt( 258);
 CL.AddConstantN('META_SETMAPMODE','LongInt').SetInt( 259);
 CL.AddConstantN('META_SETROP2','LongInt').SetInt( 260);
 CL.AddConstantN('META_SETRELABS','LongInt').SetInt( 261);
 CL.AddConstantN('META_SETPOLYFILLMODE','LongInt').SetInt( 262);
 CL.AddConstantN('META_SETSTRETCHBLTMODE','LongInt').SetInt( 263);
 CL.AddConstantN('META_SETTEXTCHAREXTRA','LongInt').SetInt( 264);
 CL.AddConstantN('META_SETTEXTCOLOR','LongInt').SetInt( 521);
 CL.AddConstantN('META_SETTEXTJUSTIFICATION','LongInt').SetInt( 522);
 CL.AddConstantN('META_SETWINDOWORG','LongInt').SetInt( 523);
 CL.AddConstantN('META_SETWINDOWEXT','LongInt').SetInt( 524);
 CL.AddConstantN('META_SETVIEWPORTORG','LongInt').SetInt( 525);
 CL.AddConstantN('META_SETVIEWPORTEXT','LongInt').SetInt( 526);
 CL.AddConstantN('META_OFFSETWINDOWORG','LongInt').SetInt( 527);
 CL.AddConstantN('META_SCALEWINDOWEXT','LongInt').SetInt( 1040);
 CL.AddConstantN('META_OFFSETVIEWPORTORG','LongInt').SetInt( 529);
 CL.AddConstantN('META_SCALEVIEWPORTEXT','LongInt').SetInt( 1042);
 CL.AddConstantN('META_LINETO','LongInt').SetInt( 531);
 CL.AddConstantN('META_MOVETO','LongInt').SetInt( 532);
 CL.AddConstantN('META_EXCLUDECLIPRECT','LongInt').SetInt( 1045);
 CL.AddConstantN('META_INTERSECTCLIPRECT','LongInt').SetInt( 1046);
 CL.AddConstantN('META_ARC','LongInt').SetInt( 2071);
 CL.AddConstantN('META_ELLIPSE','LongInt').SetInt( 1048);
 CL.AddConstantN('META_FLOODFILL','LongInt').SetInt( 1049);
 CL.AddConstantN('META_PIE','LongInt').SetInt( 2074);
 CL.AddConstantN('META_RECTANGLE','LongInt').SetInt( 1051);
 CL.AddConstantN('META_ROUNDRECT','LongInt').SetInt( 1564);
 CL.AddConstantN('META_PATBLT','LongInt').SetInt( 1565);
 CL.AddConstantN('META_SAVEDC','LongInt').SetInt( 30);
 CL.AddConstantN('META_SETPIXEL','LongInt').SetInt( 1055);
 CL.AddConstantN('META_OFFSETCLIPRGN','LongInt').SetInt( 544);
 CL.AddConstantN('META_TEXTOUT','LongInt').SetInt( 1313);
 CL.AddConstantN('META_BITBLT','LongInt').SetInt( 2338);
 CL.AddConstantN('META_STRETCHBLT','LongInt').SetInt( 2851);
 CL.AddConstantN('META_POLYGON','LongInt').SetInt( 804);
 CL.AddConstantN('META_POLYLINE','LongInt').SetInt( 805);
 CL.AddConstantN('META_ESCAPE','LongInt').SetInt( 1574);
 CL.AddConstantN('META_RESTOREDC','LongInt').SetInt( 295);
 CL.AddConstantN('META_FILLREGION','LongInt').SetInt( 552);
 CL.AddConstantN('META_FRAMEREGION','LongInt').SetInt( 1065);
 CL.AddConstantN('META_INVERTREGION','LongInt').SetInt( 298);
 CL.AddConstantN('META_PAINTREGION','LongInt').SetInt( 299);
 CL.AddConstantN('META_SELECTCLIPREGION','LongInt').SetInt( 300);
 CL.AddConstantN('META_SELECTOBJECT','LongInt').SetInt( 301);
 CL.AddConstantN('META_SETTEXTALIGN','LongInt').SetInt( 302);
 CL.AddConstantN('META_CHORD','LongInt').SetInt( 2096);
 CL.AddConstantN('META_SETMAPPERFLAGS','LongInt').SetInt( 561);
 CL.AddConstantN('META_EXTTEXTOUT','LongInt').SetInt( 2610);
 CL.AddConstantN('META_SETDIBTODEV','LongInt').SetInt( 3379);
 CL.AddConstantN('META_SELECTPALETTE','LongInt').SetInt( 564);
 CL.AddConstantN('META_REALIZEPALETTE','LongInt').SetInt( 53);
 CL.AddConstantN('META_ANIMATEPALETTE','LongInt').SetInt( 1078);
 CL.AddConstantN('META_SETPALENTRIES','LongInt').SetInt( 55);
 CL.AddConstantN('META_POLYPOLYGON','LongInt').SetInt( 1336);
 CL.AddConstantN('META_RESIZEPALETTE','LongInt').SetInt( 313);
 CL.AddConstantN('META_DIBBITBLT','LongInt').SetInt( 2368);
 CL.AddConstantN('META_DIBSTRETCHBLT','LongInt').SetInt( 2881);
 CL.AddConstantN('META_DIBCREATEPATTERNBRUSH','LongInt').SetInt( 322);
 CL.AddConstantN('META_STRETCHDIB','LongInt').SetInt( 3907);
 CL.AddConstantN('META_EXTFLOODFILL','LongInt').SetInt( 1352);
 CL.AddConstantN('META_DELETEOBJECT','LongInt').SetInt( 496);
 CL.AddConstantN('META_CREATEPALETTE','LongInt').SetInt( 247);
 CL.AddConstantN('META_CREATEPATTERNBRUSH','LongInt').SetInt( 505);
 CL.AddConstantN('META_CREATEPENINDIRECT','LongInt').SetInt( 762);
 CL.AddConstantN('META_CREATEFONTINDIRECT','LongInt').SetInt( 763);
 CL.AddConstantN('META_CREATEBRUSHINDIRECT','LongInt').SetInt( 764);
 CL.AddConstantN('META_CREATEREGION','LongInt').SetInt( 1791);
 CL.AddConstantN('NEWFRAME','LongInt').SetInt( 1);
 CL.AddConstantN('_ABORTDOC','LongInt').SetInt( 2);
 CL.AddConstantN('NEXTBAND','LongInt').SetInt( 3);
 CL.AddConstantN('SETCOLORTABLE','LongInt').SetInt( 4);
 CL.AddConstantN('GETCOLORTABLE','LongInt').SetInt( 5);
 CL.AddConstantN('FLUSHOUTPUT','LongInt').SetInt( 6);
 CL.AddConstantN('DRAFTMODE','LongInt').SetInt( 7);
 CL.AddConstantN('QUERYESCSUPPORT','LongInt').SetInt( 8);
 CL.AddConstantN('_SETABORTPROC','LongInt').SetInt( 9);
 CL.AddConstantN('_STARTDOC','LongInt').SetInt( 10);
 CL.AddConstantN('_ENDDOC','LongInt').SetInt( 11);
 CL.AddConstantN('GETPHYSPAGESIZE','LongInt').SetInt( 12);
 CL.AddConstantN('GETPRINTINGOFFSET','LongInt').SetInt( 13);
 CL.AddConstantN('GETSCALINGFACTOR','LongInt').SetInt( 14);
 CL.AddConstantN('MFCOMMENT','LongInt').SetInt( 15);
 CL.AddConstantN('GETPENWIDTH','LongWord').SetUInt( $10);
 CL.AddConstantN('SETCOPYCOUNT','LongInt').SetInt( 17);
 CL.AddConstantN('SELECTPAPERSOURCE','LongInt').SetInt( 18);
 CL.AddConstantN('DEVICEDATA','LongInt').SetInt( 19);
 CL.AddConstantN('PASSTHROUGH','LongInt').SetInt( 19);
 CL.AddConstantN('GETTECHNOLGY','LongInt').SetInt( 20);
 CL.AddConstantN('GETTECHNOLOGY','LongInt').SetInt( 20);
 CL.AddConstantN('SETLINECAP','LongInt').SetInt( 21);
 CL.AddConstantN('SETLINEJOIN','LongInt').SetInt( 22);
 CL.AddConstantN('_SETMITERLIMIT','LongInt').SetInt( 23);
 CL.AddConstantN('BANDINFO','LongInt').SetInt( 24);
 CL.AddConstantN('DRAWPATTERNRECT','LongInt').SetInt( 25);
 CL.AddConstantN('GETVECTORPENSIZE','LongInt').SetInt( 26);
 CL.AddConstantN('GETVECTORBRUSHSIZE','LongInt').SetInt( 27);
 CL.AddConstantN('ENABLEDUPLEX','LongInt').SetInt( 28);
 CL.AddConstantN('GETSETPAPERBINS','LongInt').SetInt( 29);
 CL.AddConstantN('GETSETPRINTORIENT','LongInt').SetInt( 30);
 CL.AddConstantN('ENUMPAPERBINS','LongInt').SetInt( 31);
 CL.AddConstantN('SETDIBSCALING','LongWord').SetUInt( $20);
 CL.AddConstantN('EPSPRINTING','LongInt').SetInt( 33);
 CL.AddConstantN('ENUMPAPERMETRICS','LongInt').SetInt( 34);
 CL.AddConstantN('GETSETPAPERMETRICS','LongInt').SetInt( 35);
 CL.AddConstantN('POSTSCRIPT_DATA','LongInt').SetInt( 37);
 CL.AddConstantN('POSTSCRIPT_IGNORE','LongInt').SetInt( 38);
 CL.AddConstantN('MOUSETRAILS','LongInt').SetInt( 39);
 CL.AddConstantN('GETDEVICEUNITS','LongInt').SetInt( 42);
 CL.AddConstantN('GETEXTENDEDTEXTMETRICS','LongInt').SetInt( 256);
 CL.AddConstantN('GETEXTENTTABLE','LongInt').SetInt( 257);
 CL.AddConstantN('GETPAIRKERNTABLE','LongInt').SetInt( 258);
 CL.AddConstantN('GETTRACKKERNTABLE','LongInt').SetInt( 259);
 CL.AddConstantN('_EXTTEXTOUT','LongWord').SetUInt( $200);
 CL.AddConstantN('GETFACENAME','LongInt').SetInt( 513);
 CL.AddConstantN('DOWNLOADFACE','LongInt').SetInt( 514);
 CL.AddConstantN('ENABLERELATIVEWIDTHS','LongInt').SetInt( 768);
 CL.AddConstantN('ENABLEPAIRKERNING','LongInt').SetInt( 769);
 CL.AddConstantN('SETKERNTRACK','LongInt').SetInt( 770);
 CL.AddConstantN('SETALLJUSTVALUES','LongInt').SetInt( 771);
 CL.AddConstantN('SETCHARSET','LongInt').SetInt( 772);
 CL.AddConstantN('_STRETCHBLT','LongWord').SetUInt( $800);
 CL.AddConstantN('GETSETSCREENPARAMS','LongInt').SetInt( 3072);
 CL.AddConstantN('QUERYDIBSUPPORT','LongInt').SetInt( 3073);
 CL.AddConstantN('BEGIN_PATH','LongWord').SetUInt( $1000);
 CL.AddConstantN('CLIP_TO_PATH','LongInt').SetInt( 4097);
 CL.AddConstantN('END_PATH','LongInt').SetInt( 4098);
 CL.AddConstantN('EXT_DEVICE_CAPS','LongInt').SetInt( 4099);
 CL.AddConstantN('RESTORE_CTM','LongInt').SetInt( 4100);
 CL.AddConstantN('SAVE_CTM','LongInt').SetInt( 4101);
 CL.AddConstantN('SET_ARC_DIRECTION','LongInt').SetInt( 4102);
 CL.AddConstantN('SET_BACKGROUND_COLOR','LongInt').SetInt( 4103);
 CL.AddConstantN('SET_POLY_MODE','LongInt').SetInt( 4104);
 CL.AddConstantN('SET_SCREEN_ANGLE','LongInt').SetInt( 4105);
 CL.AddConstantN('SET_SPREAD','LongInt').SetInt( 4106);
 CL.AddConstantN('TRANSFORM_CTM','LongInt').SetInt( 4107);
 CL.AddConstantN('SET_CLIP_BOX','LongInt').SetInt( 4108);
 CL.AddConstantN('SET_BOUNDS','LongInt').SetInt( 4109);
 CL.AddConstantN('SET_MIRROR_MODE','LongInt').SetInt( 4110);
 CL.AddConstantN('OPENCHANNEL','LongInt').SetInt( 4110);
 CL.AddConstantN('DOWNLOADHEADER','LongInt').SetInt( 4111);
 CL.AddConstantN('CLOSECHANNEL','LongInt').SetInt( 4112);
 CL.AddConstantN('POSTSCRIPT_PASSTHROUGH','LongInt').SetInt( 4115);
 CL.AddConstantN('ENCAPSULATED_POSTSCRIPT','LongInt').SetInt( 4116);
 CL.AddConstantN('QDI_SETDIBITS','LongInt').SetInt( 1);
 CL.AddConstantN('QDI_GETDIBITS','LongInt').SetInt( 2);
 CL.AddConstantN('QDI_DIBTOSCREEN','LongInt').SetInt( 4);
 CL.AddConstantN('QDI_STRETCHDIB','LongInt').SetInt( 8);
 CL.AddConstantN('SP_NOTREPORTED','LongWord').SetUInt( $4000);
 CL.AddConstantN('SP_ERROR','LongInt').SetInt( LongWord ( - 1 ));
 CL.AddConstantN('SP_APPABORT','LongInt').SetInt( LongWord ( - 2 ));
 CL.AddConstantN('SP_USERABORT','LongInt').SetInt( LongWord ( - 3 ));
 CL.AddConstantN('SP_OUTOFDISK','LongInt').SetInt( LongWord ( - 4 ));
 CL.AddConstantN('SP_OUTOFMEMORY','LongInt').SetInt( LongWord ( - 5 ));
 CL.AddConstantN('PR_JOBSTATUS','LongInt').SetInt( 0);
 CL.AddConstantN('OBJ_PEN','LongInt').SetInt( 1);
 CL.AddConstantN('OBJ_BRUSH','LongInt').SetInt( 2);
 CL.AddConstantN('OBJ_DC','LongInt').SetInt( 3);
 CL.AddConstantN('OBJ_METADC','LongInt').SetInt( 4);
 CL.AddConstantN('OBJ_PAL','LongInt').SetInt( 5);
 CL.AddConstantN('OBJ_FONT','LongInt').SetInt( 6);
 CL.AddConstantN('OBJ_BITMAP','LongInt').SetInt( 7);
 CL.AddConstantN('OBJ_REGION','LongInt').SetInt( 8);
 CL.AddConstantN('OBJ_METAFILE','LongInt').SetInt( 9);
 CL.AddConstantN('OBJ_MEMDC','LongInt').SetInt( 10);
 CL.AddConstantN('OBJ_EXTPEN','LongInt').SetInt( 11);
 CL.AddConstantN('OBJ_ENHMETADC','LongInt').SetInt( 12);
 CL.AddConstantN('OBJ_ENHMETAFILE','LongInt').SetInt( 13);
 CL.AddConstantN('MWT_IDENTITY','LongInt').SetInt( 1);
 CL.AddConstantN('MWT_LEFTMULTIPLY','LongInt').SetInt( 2);
 CL.AddConstantN('MWT_RIGHTMULTIPLY','LongInt').SetInt( 3);
 CL.AddConstantN('MWT_MIN','').SetString( MWT_IDENTITY);
 CL.AddConstantN('MWT_MAX','').SetString( MWT_RIGHTMULTIPLY);
  CL.AddTypeS('PXForm', '^TXForm // will not work');
  CL.AddTypeS('tagXFORM', 'record eM11 : Single; eM12 : Single; eM21 : Single; '
   +'eM22 : Single; eDx : Single; eDy : Single; end');
  CL.AddTypeS('TXForm', 'tagXFORM');
  CL.AddTypeS('XFORM', 'tagXFORM');
  CL.AddTypeS('PBitmap', '^TBitmap // will not work');
  CL.AddTypeS('tagBITMAP', 'record bmType : Longint; bmWidth : Longint; bmHeigh'
   +'t : Longint; bmWidthBytes : Longint; bmPlanes : Word; bmBitsPixel : Word; '
   +'bmBits : Pointer; end');
  CL.AddTypeS('TBitmap', 'tagBITMAP');
  CL.AddTypeS('BITMAP', 'tagBITMAP');
  CL.AddTypeS('PRGBTriple', '^TRGBTriple // will not work');
  CL.AddTypeS('tagRGBTRIPLE', 'record rgbtBlue : Byte; rgbtGreen : Byte; rgbtRe'
   +'d : Byte; end');
  CL.AddTypeS('TRGBTriple', 'tagRGBTRIPLE');
  CL.AddTypeS('RGBTRIPLE', 'tagRGBTRIPLE');
  CL.AddTypeS('PRGBQuad', '^TRGBQuad // will not work');
  CL.AddTypeS('tagRGBQUAD', 'record rgbBlue : Byte; rgbGreen : Byte; rgbRed : B'
   +'yte; rgbReserved : Byte; end');
  CL.AddTypeS('TRGBQuad', 'tagRGBQUAD');
  CL.AddTypeS('RGBQUAD', 'tagRGBQUAD');
  CL.AddTypeS('LCSCSTYPE', 'Longint');
 CL.AddConstantN('LCS_CALIBRATED_RGB','LongInt').SetInt( 0);
 CL.AddConstantN('LCS_DEVICE_RGB','LongInt').SetInt( 1);
 CL.AddConstantN('LCS_DEVICE_CMYK','LongInt').SetInt( 2);
  CL.AddTypeS('LCSGAMUTMATCH', 'Longint');
 CL.AddConstantN('LCS_GM_BUSINESS','LongInt').SetInt( 1);
 CL.AddConstantN('LCS_GM_GRAPHICS','LongInt').SetInt( 2);
 CL.AddConstantN('LCS_GM_IMAGES','LongInt').SetInt( 4);
 CL.AddConstantN('CM_OUT_OF_GAMUT','LongInt').SetInt( 255);
 CL.AddConstantN('CM_IN_GAMUT','LongInt').SetInt( 0);
 CL.AddDelphiFunction('Function GetCValue( cmyk : COLORREF) : Byte');
 CL.AddDelphiFunction('Function GetMValue( cmyk : COLORREF) : Byte');
 CL.AddDelphiFunction('Function GetYValue( cmyk : COLORREF) : Byte');
 CL.AddDelphiFunction('Function GetKValue( cmyk : COLORREF) : Byte');
 CL.AddDelphiFunction('Function CMYK( c, m, y, k : Byte) : COLORREF');
  CL.AddTypeS('FXPT16DOT16', 'Longint');
  CL.AddTypeS('LPFXPT16DOT16', '^Longint // will not work');
  CL.AddTypeS('FXPT2DOT30', 'Longint');
  CL.AddTypeS('LPFXPT2DOT30', '^Longint // will not work');
  CL.AddTypeS('PCIEXYZ', '^TCIEXYZ // will not work');
  CL.AddTypeS('tagCIEXYZ', 'record ciexyzX : FXPT2DOT30; ciexyzY : FXPT2DOT30; '
   +'ciexyzZ : FXPT2DOT30; end');
  CL.AddTypeS('TCIEXYZ', 'tagCIEXYZ');
  CL.AddTypeS('CIEXYZ', 'tagCIEXYZ');
  CL.AddTypeS('PCIEXYZTriple', '^TCIEXYZTriple // will not work');
  CL.AddTypeS('tagICEXYZTRIPLE', 'record ciexyzRed : TCIEXYZ; ciexyzGreen : TCI'
   +'EXYZ; ciexyzBlue : TCIEXYZ; end');
  CL.AddTypeS('TCIEXYZTriple', 'tagICEXYZTRIPLE');
  CL.AddTypeS('CIEXYZTRIPLE', 'tagICEXYZTRIPLE');
  CL.AddTypeS('PLogColorSpaceA', '^TLogColorSpaceA // will not work');
  CL.AddTypeS('PLogColorSpaceW', '^TLogColorSpaceW // will not work');
  CL.AddTypeS('PLogColorSpace', 'PLogColorSpaceA');
  CL.AddTypeS('tagLOGCOLORSPACE', 'tagLOGCOLORSPACEA');
  CL.AddTypeS('TLogColorSpaceA', 'tagLOGCOLORSPACEA');
  CL.AddTypeS('TLogColorSpaceW', 'tagLOGCOLORSPACEW');
  CL.AddTypeS('TLogColorSpace', 'TLogColorSpaceA');
  CL.AddTypeS('LOGCOLORSPACEA', 'tagLOGCOLORSPACEA');
  CL.AddTypeS('LOGCOLORSPACEW', 'tagLOGCOLORSPACEW');
  CL.AddTypeS('LOGCOLORSPACE', 'LOGCOLORSPACEA');
  CL.AddTypeS('PBitmapCoreHeader', '^TBitmapCoreHeader // will not work');
  CL.AddTypeS('tagBITMAPCOREHEADER', 'record bcSize : DWORD; bcWidth : Word; bc'
   +'Height : Word; bcPlanes : Word; bcBitCount : Word; end');
  CL.AddTypeS('TBitmapCoreHeader', 'tagBITMAPCOREHEADER');
  CL.AddTypeS('BITMAPCOREHEADER', 'tagBITMAPCOREHEADER');
  CL.AddTypeS('PBitmapInfoHeader', '^TBitmapInfoHeader // will not work');
  CL.AddTypeS('tagBITMAPINFOHEADER', 'record biSize : DWORD; biWidth : Longint;'
   +' biHeight : Longint; biPlanes : Word; biBitCount : Word; biCompression : D'
   +'WORD; biSizeImage : DWORD; biXPelsPerMeter : Longint; biYPelsPerMeter : Lo'
   +'ngint; biClrUsed : DWORD; biClrImportant : DWORD; end');
  CL.AddTypeS('TBitmapInfoHeader', 'tagBITMAPINFOHEADER');
  CL.AddTypeS('BITMAPINFOHEADER', 'tagBITMAPINFOHEADER');
  CL.AddTypeS('PBitmapV4Header', '^TBitmapV4Header // will not work');
  CL.AddTypeS('BITMAPV4HEADER', 'record bV4Size : DWORD; bV4Width : Longint; bV'
   +'4Height : Longint; bV4Planes : Word; bV4BitCount : Word; bV4V4Compression '
   +': DWORD; bV4SizeImage : DWORD; bV4XPelsPerMeter : Longint; bV4YPelsPerMete'
   +'r : Longint; bV4ClrUsed : DWORD; bV4ClrImportant : DWORD; bV4RedMask : DWO'
   +'RD; bV4GreenMask : DWORD; bV4BlueMask : DWORD; bV4AlphaMask : DWORD; bV4CS'
   +'Type : DWORD; bV4Endpoints : TCIEXYZTriple; bV4GammaRed : DWORD; bV4GammaG'
   +'reen : DWORD; bV4GammaBlue : DWORD; end');
  CL.AddTypeS('TBitmapV4Header', 'BITMAPV4HEADER');
  CL.AddTypeS('PBitmapV5Header', '^TBitmapV5Header // will not work');
  CL.AddTypeS('BITMAPV5HEADER', 'record bV5Size : DWORD; bV5Width : Longint; bV'
   +'5Height : Longint; bV5Planes : Word; bV5BitCount : Word; bV5Compression : '
   +'DWORD; bV5SizeImage : DWORD; bV5XPelsPerMeter : Longint; bV5YPelsPerMeter '
   +': Longint; bV5ClrUsed : DWORD; bV5ClrImportant : DWORD; bV5RedMask : DWORD'
   +'; bV5GreenMask : DWORD; bV5BlueMask : DWORD; bV5AlphaMask : DWORD; bV5CSTy'
   +'pe : DWORD; bV5Endpoints : TCIEXYZTriple; bV5GammaRed : DWORD; bV5GammaGre'
   +'en : DWORD; bV5GammaBlue : DWORD; bV5Intent : DWORD; bV5ProfileData : DWOR'
   +'D; bV5ProfileSize : DWORD; bV5Reserved : DWORD; end');
  CL.AddTypeS('TBitmapV5Header', 'BITMAPV5HEADER');
 CL.AddConstantN('BI_RGB','LongInt').SetInt( 0);
 CL.AddConstantN('BI_RLE8','LongInt').SetInt( 1);
 CL.AddConstantN('BI_RLE4','LongInt').SetInt( 2);
 CL.AddConstantN('BI_BITFIELDS','LongInt').SetInt( 3);
  CL.AddTypeS('PBitmapInfo', '^TBitmapInfo // will not work');
  CL.AddTypeS('TBitmapInfo', 'tagBITMAPINFO');
  CL.AddTypeS('BITMAPINFO', 'tagBITMAPINFO');
  CL.AddTypeS('PBitmapCoreInfo', '^TBitmapCoreInfo // will not work');
  CL.AddTypeS('TBitmapCoreInfo', 'tagBITMAPCOREINFO');
  CL.AddTypeS('BITMAPCOREINFO', 'tagBITMAPCOREINFO');
  CL.AddTypeS('PBitmapFileHeader', '^TBitmapFileHeader // will not work');
  CL.AddTypeS('tagBITMAPFILEHEADER', 'record bfType : Word; bfSize : DWORD; bfR'
   +'eserved1 : Word; bfReserved2 : Word; bfOffBits : DWORD; end');
  CL.AddTypeS('TBitmapFileHeader', 'tagBITMAPFILEHEADER');
  CL.AddTypeS('BITMAPFILEHEADER', 'tagBITMAPFILEHEADER');
  CL.AddTypeS('PFontSignature', '^TFontSignature // will not work');
  CL.AddTypeS('TFontSignature', 'tagFONTSIGNATURE');
  CL.AddTypeS('FONTSIGNATURE', 'tagFONTSIGNATURE');
  CL.AddTypeS('PCharsetInfo', '^TCharsetInfo // will not work');
  CL.AddTypeS('tagCHARSETINFO', 'record ciCharset : UINT; ciACP : UINT; fs : TF'
   +'ontSignature; end');
  CL.AddTypeS('TCharsetInfo', 'tagCHARSETINFO');
  CL.AddTypeS('CHARSETINFO', 'tagCHARSETINFO');
 CL.AddConstantN('TCI_SRCCHARSET','LongInt').SetInt( 1);
 CL.AddConstantN('TCI_SRCCODEPAGE','LongInt').SetInt( 2);
 CL.AddConstantN('TCI_SRCFONTSIG','LongInt').SetInt( 3);
  CL.AddTypeS('PLocaleSignature', '^TLocaleSignature // will not work');
  CL.AddTypeS('TLocaleSignature', 'tagLOCALESIGNATURE');
  CL.AddTypeS('LOCALESIGNATURE', 'tagLOCALESIGNATURE');
  CL.AddTypeS('PHandleTable', '^THandleTable // will not work');
  CL.AddTypeS('THandleTable', 'tagHANDLETABLE');
  CL.AddTypeS('HANDLETABLE', 'tagHANDLETABLE');
  CL.AddTypeS('PMetaRecord', '^TMetaRecord // will not work');
  CL.AddTypeS('TMetaRecord', 'tagMETARECORD');
  CL.AddTypeS('METARECORD', 'tagMETARECORD');
  CL.AddTypeS('PMetafilePict', '^TMetafilePict // will not work');
  CL.AddTypeS('tagMETAFILEPICT', 'record mm : Longint; xExt : Longint; yExt : L'
   +'ongint; hMF : HMETAFILE; end');
  CL.AddTypeS('TMetafilePict', 'tagMETAFILEPICT');
  CL.AddTypeS('METAFILEPICT', 'tagMETAFILEPICT');
  CL.AddTypeS('PMetaHeader', '^TMetaHeader // will not work');
  CL.AddTypeS('tagMETAHEADER', 'record mtType : Word; mtHeaderSize : Word; mtVe'
   +'rsion : Word; mtSize : DWORD; mtNoObjects : Word; mtMaxRecord : DWORD; mtN'
   +'oParameters : Word; end');
  CL.AddTypeS('TMetaHeader', 'tagMETAHEADER');
  CL.AddTypeS('METAHEADER', 'tagMETAHEADER');
  CL.AddTypeS('PEnhMetaRecord', '^TEnhMetaRecord // will not work');
  CL.AddTypeS('TEnhMetaRecord', 'tagENHMETARECORD');
  CL.AddTypeS('ENHMETARECORD', 'tagENHMETARECORD');
  CL.AddTypeS('PEnhMetaHeader', '^TEnhMetaHeader // will not work');
  CL.AddTypeS('tagENHMETAHEADER', 'record iType : DWORD; nSize : DWORD; rclBoun'
   +'ds : TRect; rclFrame : TRect; dSignature : DWORD; nVersion : DWORD; nBytes'
   +' : DWORD; nRecords : DWORD; nHandles : Word; sReserved : Word; nDescriptio'
   +'n : DWORD; offDescription : DWORD; nPalEntries : DWORD; szlDevice : TSize;'
   +' szlMillimeters : TSize; cbPixelFormat : DWORD; offPixelFormat : DWORD; bO'
   +'penGL : DWORD; end');
  CL.AddTypeS('TEnhMetaHeader', 'tagENHMETAHEADER');
  CL.AddTypeS('ENHMETAHEADER', 'tagENHMETAHEADER');
 CL.AddConstantN('TMPF_FIXED_PITCH','LongInt').SetInt( 1);
 CL.AddConstantN('TMPF_VECTOR','LongInt').SetInt( 2);
 CL.AddConstantN('TMPF_DEVICE','LongInt').SetInt( 8);
 CL.AddConstantN('TMPF_TRUETYPE','LongInt').SetInt( 4);
  CL.AddTypeS('PTextMetricA', '^TTextMetricA // will not work');
  CL.AddTypeS('PTextMetricW', '^TTextMetricW // will not work');
  CL.AddTypeS('PTextMetric', 'PTextMetricA');
  CL.AddTypeS('tagTEXTMETRICA', 'record tmHeight : Longint; tmAscent : Longint;'
   +' tmDescent : Longint; tmInternalLeading : Longint; tmExternalLeading : Lon'
   +'gint; tmAveCharWidth : Longint; tmMaxCharWidth : Longint; tmWeight : Longi'
   +'nt; tmOverhang : Longint; tmDigitizedAspectX : Longint; tmDigitizedAspectY'
   +' : Longint; tmFirstChar : AnsiChar; tmLastChar : AnsiChar; tmDefaultChar :'
   +' AnsiChar; tmBreakChar : AnsiChar; tmItalic : Byte; tmUnderlined : Byte; t'
   +'mStruckOut : Byte; tmPitchAndFamily : Byte; tmCharSet : Byte; end');
  CL.AddTypeS('tagTEXTMETRICW', 'record tmHeight : Longint; tmAscent : Longint;'
   +' tmDescent : Longint; tmInternalLeading : Longint; tmExternalLeading : Lon'
   +'gint; tmAveCharWidth : Longint; tmMaxCharWidth : Longint; tmWeight : Longi'
   +'nt; tmOverhang : Longint; tmDigitizedAspectX : Longint; tmDigitizedAspectY'
   +' : Longint; tmFirstChar : WideChar; tmLastChar : WideChar; tmDefaultChar :'
   +' WideChar; tmBreakChar : WideChar; tmItalic : Byte; tmUnderlined : Byte; t'
   +'mStruckOut : Byte; tmPitchAndFamily : Byte; tmCharSet : Byte; end');
  CL.AddTypeS('tagTEXTMETRIC', 'tagTEXTMETRICA');
  CL.AddTypeS('TTextMetricA', 'tagTEXTMETRICA');
  CL.AddTypeS('TTextMetricW', 'tagTEXTMETRICW');
  CL.AddTypeS('TTextMetric', 'TTextMetricA');
  CL.AddTypeS('TEXTMETRICA', 'tagTEXTMETRICA');
  CL.AddTypeS('TEXTMETRICW', 'tagTEXTMETRICW');
  CL.AddTypeS('TEXTMETRIC', 'TEXTMETRICA');
 CL.AddConstantN('NTM_REGULAR','LongWord').SetUInt( $40);
 CL.AddConstantN('NTM_BOLD','LongWord').SetUInt( $20);
 CL.AddConstantN('NTM_ITALIC','LongInt').SetInt( 1);
  CL.AddTypeS('PNewTextMetricA', '^TNewTextMetricA // will not work');
  CL.AddTypeS('PNewTextMetricW', '^TNewTextMetricW // will not work');
  CL.AddTypeS('PNewTextMetric', 'PNewTextMetricA');
  CL.AddTypeS('tagNEWTEXTMETRICA', 'record tmHeight : Longint; tmAscent : Longi'
   +'nt; tmDescent : Longint; tmInternalLeading : Longint; tmExternalLeading : '
   +'Longint; tmAveCharWidth : Longint; tmMaxCharWidth : Longint; tmWeight : Lo'
   +'ngint; tmOverhang : Longint; tmDigitizedAspectX : Longint; tmDigitizedAspe'
   +'ctY : Longint; tmFirstChar : AnsiChar; tmLastChar : AnsiChar; tmDefaultCha'
   +'r : AnsiChar; tmBreakChar : AnsiChar; tmItalic : Byte; tmUnderlined : Byte'
   +'; tmStruckOut : Byte; tmPitchAndFamily : Byte; tmCharSet : Byte; ntmFlags '
   +': DWORD; ntmSizeEM : UINT; ntmCellHeight : UINT; ntmAvgWidth : UINT; end');
  CL.AddTypeS('tagNEWTEXTMETRICW', 'record tmHeight : Longint; tmAscent : Longi'
   +'nt; tmDescent : Longint; tmInternalLeading : Longint; tmExternalLeading : '
   +'Longint; tmAveCharWidth : Longint; tmMaxCharWidth : Longint; tmWeight : Lo'
   +'ngint; tmOverhang : Longint; tmDigitizedAspectX : Longint; tmDigitizedAspe'
   +'ctY : Longint; tmFirstChar : WideChar; tmLastChar : WideChar; tmDefaultCha'
   +'r : WideChar; tmBreakChar : WideChar; tmItalic : Byte; tmUnderlined : Byte'
   +'; tmStruckOut : Byte; tmPitchAndFamily : Byte; tmCharSet : Byte; ntmFlags '
   +': DWORD; ntmSizeEM : UINT; ntmCellHeight : UINT; ntmAvgWidth : UINT; end');
  CL.AddTypeS('tagNEWTEXTMETRIC', 'tagNEWTEXTMETRICA');
  CL.AddTypeS('TNewTextMetricA', 'tagNEWTEXTMETRICA');
  CL.AddTypeS('TNewTextMetricW', 'tagNEWTEXTMETRICW');
  CL.AddTypeS('TNewTextMetric', 'TNewTextMetricA');
  CL.AddTypeS('NEWTEXTMETRICA', 'tagNEWTEXTMETRICA');
  CL.AddTypeS('NEWTEXTMETRICW', 'tagNEWTEXTMETRICW');
  CL.AddTypeS('NEWTEXTMETRIC', 'NEWTEXTMETRICA');
  CL.AddTypeS('PNewTextMetricExA', '^TNewTextMetricExA // will not work');
  CL.AddTypeS('tagNEWTEXTMETRICEXA', 'record ntmTm : TNewTextMetricA; ntmFontSi'
   +'g : TFontSignature; end');
  CL.AddTypeS('TNewTextMetricExA', 'tagNEWTEXTMETRICEXA');
  CL.AddTypeS('NEWTEXTMETRICEXA', 'tagNEWTEXTMETRICEXA');
  CL.AddTypeS('PNewTextMetricExW', '^TNewTextMetricExW // will not work');
  CL.AddTypeS('tagNEWTEXTMETRICEXW', 'record ntmTm : TNewTextMetricW; ntmFontSi'
   +'g : TFontSignature; end');
  CL.AddTypeS('TNewTextMetricExW', 'tagNEWTEXTMETRICEXW');
  CL.AddTypeS('NEWTEXTMETRICEXW', 'tagNEWTEXTMETRICEXW');
  CL.AddTypeS('PNewTextMetricEx', 'PNewTextMetricExA');
  CL.AddTypeS('PPelArray', '^TPelArray // will not work');
  CL.AddTypeS('tagPELARRAY', 'record paXCount : Longint; paYCount : Longint; pa'
   +'XExt : Longint; paYExt : Longint; paRGBs : Byte; end');
  CL.AddTypeS('TPelArray', 'tagPELARRAY');
  CL.AddTypeS('PELARRAY', 'tagPELARRAY');
  CL.AddTypeS('PLogBrush', '^TLogBrush // will not work');
  CL.AddTypeS('tagLOGBRUSH', 'record lbStyle : UINT; lbColor : COLORREF; lbHatc'
   +'h : Longint; end');
  CL.AddTypeS('TLogBrush', 'tagLOGBRUSH');
  CL.AddTypeS('LOGBRUSH', 'tagLOGBRUSH');
  CL.AddTypeS('PPattern', '^TPattern // will not work');
  CL.AddTypeS('TPattern', 'TLogBrush');
  CL.AddTypeS('PLogPen', '^TLogPen // will not work');
  CL.AddTypeS('tagLOGPEN', 'record lopnStyle : UINT; lopnWidth : TPoint; lopnCo'
   +'lor : COLORREF; end');
  CL.AddTypeS('TLogPen', 'tagLOGPEN');
  CL.AddTypeS('LOGPEN', 'tagLOGPEN');
  CL.AddTypeS('PExtLogPen', '^TLogPen // will not work');
  CL.AddTypeS('TExtLogPen', 'tagEXTLOGPEN');
  CL.AddTypeS('EXTLOGPEN', 'tagEXTLOGPEN');
  CL.AddTypeS('PPaletteEntry', '^TPaletteEntry // will not work');
  CL.AddTypeS('tagPALETTEENTRY', 'record peRed : Byte; peGreen : Byte; peBlue :'
   +' Byte; peFlags : Byte; end');
  CL.AddTypeS('TPaletteEntry', 'tagPALETTEENTRY');
  CL.AddTypeS('PALETTEENTRY', 'tagPALETTEENTRY');
  CL.AddTypeS('PLogPalette', '^TLogPalette // will not work');
  CL.AddTypeS('TLogPalette', 'tagLOGPALETTE');
  CL.AddTypeS('LOGPALETTE', 'tagLOGPALETTE');
  CL.AddTypeS('PMaxLogPalette', '^TMaxLogPalette // will not work');
 CL.AddConstantN('LF_FACESIZE','LongInt').SetInt( 32);
  CL.AddTypeS('PLogFontA', '^TLogFontA // will not work');
  CL.AddTypeS('PLogFontW', '^TLogFontW // will not work');
  CL.AddTypeS('PLogFont', 'PLogFontA');
  CL.AddTypeS('tagLOGFONT', 'tagLOGFONTA');
  CL.AddTypeS('TLogFontA', 'tagLOGFONTA');
  CL.AddTypeS('TLogFontW', 'tagLOGFONTW');
  CL.AddTypeS('TLogFont', 'TLogFontA');
  CL.AddTypeS('LOGFONTA', 'tagLOGFONTA');
  CL.AddTypeS('LOGFONTW', 'tagLOGFONTW');
  CL.AddTypeS('LOGFONT', 'LOGFONTA');
 CL.AddConstantN('LF_FULLFACESIZE','LongInt').SetInt( 64);
  CL.AddTypeS('PEnumLogFontA', '^TEnumLogFontA // will not work');
  CL.AddTypeS('PEnumLogFontW', '^TEnumLogFontW // will not work');
  CL.AddTypeS('PEnumLogFont', 'PEnumLogFontA');
  CL.AddTypeS('tagENUMLOGFONT', 'tagENUMLOGFONTA');
  CL.AddTypeS('TEnumLogFontA', 'tagENUMLOGFONTA');
  CL.AddTypeS('TEnumLogFontW', 'tagENUMLOGFONTW');
  CL.AddTypeS('TEnumLogFont', 'TEnumLogFontA');
  CL.AddTypeS('ENUMLOGFONTA', 'tagENUMLOGFONTA');
  CL.AddTypeS('ENUMLOGFONTW', 'tagENUMLOGFONTW');
  CL.AddTypeS('ENUMLOGFONT', 'ENUMLOGFONTA');
  CL.AddTypeS('PEnumLogFontExA', '^TEnumLogFontExA // will not work');
  CL.AddTypeS('PEnumLogFontExW', '^TEnumLogFontExW // will not work');
  CL.AddTypeS('PEnumLogFontEx', 'PEnumLogFontExA');
  CL.AddTypeS('tagENUMLOGFONTEX', 'tagENUMLOGFONTEXA');
  CL.AddTypeS('TEnumLogFontExA', 'tagENUMLOGFONTEXA');
  CL.AddTypeS('TEnumLogFontExW', 'tagENUMLOGFONTEXW');
  CL.AddTypeS('TEnumLogFontEx', 'TEnumLogFontExA');
  CL.AddTypeS('ENUMLOGFONTEXA', 'tagENUMLOGFONTEXA');
  CL.AddTypeS('ENUMLOGFONTEXW', 'tagENUMLOGFONTEXW');
  CL.AddTypeS('ENUMLOGFONTEX', 'ENUMLOGFONTEXA');
 CL.AddConstantN('OUT_DEFAULT_PRECIS','LongInt').SetInt( 0);
 CL.AddConstantN('OUT_STRING_PRECIS','LongInt').SetInt( 1);
 CL.AddConstantN('OUT_CHARACTER_PRECIS','LongInt').SetInt( 2);
 CL.AddConstantN('OUT_STROKE_PRECIS','LongInt').SetInt( 3);
 CL.AddConstantN('OUT_TT_PRECIS','LongInt').SetInt( 4);
 CL.AddConstantN('OUT_DEVICE_PRECIS','LongInt').SetInt( 5);
 CL.AddConstantN('OUT_RASTER_PRECIS','LongInt').SetInt( 6);
 CL.AddConstantN('OUT_TT_ONLY_PRECIS','LongInt').SetInt( 7);
 CL.AddConstantN('OUT_OUTLINE_PRECIS','LongInt').SetInt( 8);
 CL.AddConstantN('OUT_SCREEN_OUTLINE_PRECIS','LongInt').SetInt( 9);
 CL.AddConstantN('CLIP_DEFAULT_PRECIS','LongInt').SetInt( 0);
 CL.AddConstantN('CLIP_CHARACTER_PRECIS','LongInt').SetInt( 1);
 CL.AddConstantN('CLIP_STROKE_PRECIS','LongInt').SetInt( 2);
 CL.AddConstantN('CLIP_MASK','LongInt').SetInt( 15);
 CL.AddConstantN('CLIP_LH_ANGLES','LongInt').SetInt( ( 1 shl 4 ));
 CL.AddConstantN('CLIP_TT_ALWAYS','LongInt').SetInt( ( 2 shl 4 ));
 CL.AddConstantN('CLIP_EMBEDDED','LongInt').SetInt( ( 8 shl 4 ));
 CL.AddConstantN('DEFAULT_QUALITY','LongInt').SetInt( 0);
 CL.AddConstantN('DRAFT_QUALITY','LongInt').SetInt( 1);
 CL.AddConstantN('PROOF_QUALITY','LongInt').SetInt( 2);
 CL.AddConstantN('NONANTIALIASED_QUALITY','LongInt').SetInt( 3);
 CL.AddConstantN('ANTIALIASED_QUALITY','LongInt').SetInt( 4);
 CL.AddConstantN('DEFAULT_PITCH','LongInt').SetInt( 0);
 CL.AddConstantN('FIXED_PITCH','LongInt').SetInt( 1);
 CL.AddConstantN('VARIABLE_PITCH','LongInt').SetInt( 2);
 CL.AddConstantN('MONO_FONT','LongInt').SetInt( 8);
 CL.AddConstantN('ANSI_CHARSET','LongInt').SetInt( 0);
 CL.AddConstantN('DEFAULT_CHARSET','LongInt').SetInt( 1);
 CL.AddConstantN('SYMBOL_CHARSET','LongInt').SetInt( 2);
 CL.AddConstantN('SHIFTJIS_CHARSET','LongWord').SetUInt( $80);
 CL.AddConstantN('HANGEUL_CHARSET','LongInt').SetInt( 129);
 CL.AddConstantN('GB2312_CHARSET','LongInt').SetInt( 134);
 CL.AddConstantN('CHINESEBIG5_CHARSET','LongInt').SetInt( 136);
 CL.AddConstantN('OEM_CHARSET','LongInt').SetInt( 255);
 CL.AddConstantN('JOHAB_CHARSET','LongInt').SetInt( 130);
 CL.AddConstantN('HEBREW_CHARSET','LongInt').SetInt( 177);
 CL.AddConstantN('ARABIC_CHARSET','LongInt').SetInt( 178);
 CL.AddConstantN('GREEK_CHARSET','LongInt').SetInt( 161);
 CL.AddConstantN('TURKISH_CHARSET','LongInt').SetInt( 162);
 CL.AddConstantN('VIETNAMESE_CHARSET','LongInt').SetInt( 163);
 CL.AddConstantN('THAI_CHARSET','LongInt').SetInt( 222);
 CL.AddConstantN('EASTEUROPE_CHARSET','LongInt').SetInt( 238);
 CL.AddConstantN('RUSSIAN_CHARSET','LongInt').SetInt( 204);
 CL.AddConstantN('MAC_CHARSET','LongInt').SetInt( 77);
 CL.AddConstantN('BALTIC_CHARSET','LongInt').SetInt( 186);
 CL.AddConstantN('FS_LATIN1','LongInt').SetInt( 1);
 CL.AddConstantN('FS_LATIN2','LongInt').SetInt( 2);
 CL.AddConstantN('FS_CYRILLIC','LongInt').SetInt( 4);
 CL.AddConstantN('FS_GREEK','LongInt').SetInt( 8);
 CL.AddConstantN('FS_TURKISH','LongWord').SetUInt( $10);
 CL.AddConstantN('FS_HEBREW','LongWord').SetUInt( $20);
 CL.AddConstantN('FS_ARABIC','LongWord').SetUInt( $40);
 CL.AddConstantN('FS_BALTIC','LongWord').SetUInt( $80);
 CL.AddConstantN('FS_VIETNAMESE','LongWord').SetUInt( $00000100);
 CL.AddConstantN('FS_THAI','LongWord').SetUInt( $10000);
 CL.AddConstantN('FS_JISJAPAN','LongWord').SetUInt( $20000);
 CL.AddConstantN('FS_CHINESESIMP','LongWord').SetUInt( $40000);
 CL.AddConstantN('FS_WANSUNG','LongWord').SetUInt( $80000);
 CL.AddConstantN('FS_CHINESETRAD','LongWord').SetUInt( $100000);
 CL.AddConstantN('FS_JOHAB','LongWord').SetUInt( $200000);
 CL.AddConstantN('FS_SYMBOL','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('FF_DONTCARE','LongInt').SetInt( ( 0 shl 4 ));
 CL.AddConstantN('FF_ROMAN','LongInt').SetInt( ( 1 shl 4 ));
 CL.AddConstantN('FF_SWISS','LongInt').SetInt( ( 2 shl 4 ));
 CL.AddConstantN('FF_MODERN','LongInt').SetInt( ( 3 shl 4 ));
 CL.AddConstantN('FF_SCRIPT','LongInt').SetInt( ( 4 shl 4 ));
 CL.AddConstantN('FF_DECORATIVE','LongInt').SetInt( ( 5 shl 4 ));
 CL.AddConstantN('FW_DONTCARE','LongInt').SetInt( 0);
 CL.AddConstantN('FW_THIN','LongInt').SetInt( 100);
 CL.AddConstantN('FW_EXTRALIGHT','LongInt').SetInt( 200);
 CL.AddConstantN('FW_LIGHT','LongInt').SetInt( 300);
 CL.AddConstantN('FW_NORMAL','LongInt').SetInt( 400);
 CL.AddConstantN('FW_MEDIUM','LongInt').SetInt( 500);
 CL.AddConstantN('FW_SEMIBOLD','LongInt').SetInt( 600);
 CL.AddConstantN('FW_BOLD','LongInt').SetInt( 700);
 CL.AddConstantN('FW_EXTRABOLD','LongInt').SetInt( 800);
 CL.AddConstantN('FW_HEAVY','LongInt').SetInt( 900);
 CL.AddConstantN('FW_ULTRALIGHT','').SetString( FW_EXTRALIGHT);
 CL.AddConstantN('FW_REGULAR','').SetString( FW_NORMAL);
 CL.AddConstantN('FW_DEMIBOLD','').SetString( FW_SEMIBOLD);
 CL.AddConstantN('FW_ULTRABOLD','').SetString( FW_EXTRABOLD);
 CL.AddConstantN('FW_BLACK','').SetString( FW_HEAVY);
 CL.AddConstantN('PANOSE_COUNT','LongInt').SetInt( 10);
 CL.AddConstantN('PAN_FAMILYTYPE_INDEX','LongInt').SetInt( 0);
 CL.AddConstantN('PAN_SERIFSTYLE_INDEX','LongInt').SetInt( 1);
 CL.AddConstantN('PAN_WEIGHT_INDEX','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_PROPORTION_INDEX','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_CONTRAST_INDEX','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_STROKEVARIATION_INDEX','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_ARMSTYLE_INDEX','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_LETTERFORM_INDEX','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_MIDLINE_INDEX','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_XHEIGHT_INDEX','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_CULTURE_LATIN','LongInt').SetInt( 0);
  CL.AddTypeS('PPanose', '^TPanose // will not work');
  CL.AddTypeS('tagPANOSE', 'record bFamilyType : Byte; bSerifStyle : Byte; bWei'
   +'ght : Byte; bProportion : Byte; bContrast : Byte; bStrokeVariation : Byte;'
   +' bArmStyle : Byte; bLetterform : Byte; bMidline : Byte; bXHeight : Byte; e'
   +'nd');
  CL.AddTypeS('TPanose', 'tagPANOSE');
  CL.AddTypeS('PANOSE', 'tagPANOSE');
 CL.AddConstantN('PAN_ANY','LongInt').SetInt( 0);
 CL.AddConstantN('PAN_NO_FIT','LongInt').SetInt( 1);
 CL.AddConstantN('PAN_FAMILY_TEXT_DISPLAY','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_FAMILY_SCRIPT','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_FAMILY_DECORATIVE','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_FAMILY_PICTORIAL','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_SERIF_COVE','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_SERIF_OBTUSE_COVE','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_SERIF_SQUARE_COVE','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_SERIF_OBTUSE_SQUARE_COVE','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_SERIF_SQUARE','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_SERIF_THIN','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_SERIF_BONE','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_SERIF_EXAGGERATED','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_SERIF_TRIANGLE','LongInt').SetInt( 10);
 CL.AddConstantN('PAN_SERIF_NORMAL_SANS','LongInt').SetInt( 11);
 CL.AddConstantN('PAN_SERIF_OBTUSE_SANS','LongInt').SetInt( 12);
 CL.AddConstantN('PAN_SERIF_PERP_SANS','LongInt').SetInt( 13);
 CL.AddConstantN('PAN_SERIF_FLARED','LongInt').SetInt( 14);
 CL.AddConstantN('PAN_SERIF_ROUNDED','LongInt').SetInt( 15);
 CL.AddConstantN('PAN_WEIGHT_VERY_LIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_WEIGHT_LIGHT','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_WEIGHT_THIN','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_WEIGHT_BOOK','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_WEIGHT_MEDIUM','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_WEIGHT_DEMI','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_WEIGHT_BOLD','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_WEIGHT_HEAVY','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_WEIGHT_BLACK','LongInt').SetInt( 10);
 CL.AddConstantN('PAN_WEIGHT_NORD','LongInt').SetInt( 11);
 CL.AddConstantN('PAN_PROP_OLD_STYLE','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_PROP_MODERN','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_PROP_EVEN_WIDTH','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_PROP_EXPANDED','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_PROP_CONDENSED','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_PROP_VERY_EXPANDED','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_PROP_VERY_CONDENSED','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_PROP_MONOSPACED','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_CONTRAST_NONE','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_CONTRAST_VERY_LOW','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_CONTRAST_LOW','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_CONTRAST_MEDIUM_LOW','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_CONTRAST_MEDIUM','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_CONTRAST_MEDIUM_HIGH','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_CONTRAST_HIGH','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_CONTRAST_VERY_HIGH','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_STROKE_GRADUAL_DIAG','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_STROKE_GRADUAL_TRAN','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_STROKE_GRADUAL_VERT','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_STROKE_GRADUAL_HORZ','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_STROKE_RAPID_VERT','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_STROKE_RAPID_HORZ','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_STROKE_INSTANT_VERT','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_STRAIGHT_ARMS_HORZ','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_STRAIGHT_ARMS_WEDGE','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_STRAIGHT_ARMS_VERT','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_STRAIGHT_ARMS_SINGLE_SERIF','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_STRAIGHT_ARMS_DOUBLE_SERIF','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_BENT_ARMS_HORZ','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_BENT_ARMS_WEDGE','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_BENT_ARMS_VERT','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_BENT_ARMS_SINGLE_SERIF','LongInt').SetInt( 10);
 CL.AddConstantN('PAN_BENT_ARMS_DOUBLE_SERIF','LongInt').SetInt( 11);
 CL.AddConstantN('PAN_LETT_NORMAL_CONTACT','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_LETT_NORMAL_WEIGHTED','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_LETT_NORMAL_BOXED','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_LETT_NORMAL_FLATTENED','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_LETT_NORMAL_ROUNDED','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_LETT_NORMAL_OFF_CENTER','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_LETT_NORMAL_SQUARE','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_LETT_OBLIQUE_CONTACT','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_LETT_OBLIQUE_WEIGHTED','LongInt').SetInt( 10);
 CL.AddConstantN('PAN_LETT_OBLIQUE_BOXED','LongInt').SetInt( 11);
 CL.AddConstantN('PAN_LETT_OBLIQUE_FLATTENED','LongInt').SetInt( 12);
 CL.AddConstantN('PAN_LETT_OBLIQUE_ROUNDED','LongInt').SetInt( 13);
 CL.AddConstantN('PAN_LETT_OBLIQUE_OFF_CENTER','LongInt').SetInt( 14);
 CL.AddConstantN('PAN_LETT_OBLIQUE_SQUARE','LongInt').SetInt( 15);
 CL.AddConstantN('PAN_MIDLINE_STANDARD_TRIMMED','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_MIDLINE_STANDARD_POINTED','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_MIDLINE_STANDARD_SERIFED','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_MIDLINE_HIGH_TRIMMED','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_MIDLINE_HIGH_POINTED','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_MIDLINE_HIGH_SERIFED','LongInt').SetInt( 7);
 CL.AddConstantN('PAN_MIDLINE_CONSTANT_TRIMMED','LongInt').SetInt( 8);
 CL.AddConstantN('PAN_MIDLINE_CONSTANT_POINTED','LongInt').SetInt( 9);
 CL.AddConstantN('PAN_MIDLINE_CONSTANT_SERIFED','LongInt').SetInt( 10);
 CL.AddConstantN('PAN_MIDLINE_LOW_TRIMMED','LongInt').SetInt( 11);
 CL.AddConstantN('PAN_MIDLINE_LOW_POINTED','LongInt').SetInt( 12);
 CL.AddConstantN('PAN_MIDLINE_LOW_SERIFED','LongInt').SetInt( 13);
 CL.AddConstantN('PAN_XHEIGHT_CONSTANT_SMALL','LongInt').SetInt( 2);
 CL.AddConstantN('PAN_XHEIGHT_CONSTANT_STD','LongInt').SetInt( 3);
 CL.AddConstantN('PAN_XHEIGHT_CONSTANT_LARGE','LongInt').SetInt( 4);
 CL.AddConstantN('PAN_XHEIGHT_DUCKING_SMALL','LongInt').SetInt( 5);
 CL.AddConstantN('PAN_XHEIGHT_DUCKING_STD','LongInt').SetInt( 6);
 CL.AddConstantN('PAN_XHEIGHT_DUCKING_LARGE','LongInt').SetInt( 7);
 CL.AddConstantN('ELF_VENDOR_SIZE','LongInt').SetInt( 4);
  CL.AddTypeS('PExtLogFontA', '^TExtLogFontA // will not work');
  CL.AddTypeS('PExtLogFontW', '^TExtLogFontW // will not work');
  CL.AddTypeS('PExtLogFont', 'PExtLogFontA');
  CL.AddTypeS('tagEXTLOGFONT', 'tagEXTLOGFONTA');
  CL.AddTypeS('TExtLogFontA', 'tagEXTLOGFONTA');
  CL.AddTypeS('TExtLogFontW', 'tagEXTLOGFONTW');
  CL.AddTypeS('TExtLogFont', 'TExtLogFontA');
  CL.AddTypeS('EXTLOGFONTA', 'tagEXTLOGFONTA');
  CL.AddTypeS('EXTLOGFONTW', 'tagEXTLOGFONTW');
  CL.AddTypeS('EXTLOGFONT', 'EXTLOGFONTA');
 CL.AddConstantN('ELF_VERSION','LongInt').SetInt( 0);
 CL.AddConstantN('ELF_CULTURE_LATIN','LongInt').SetInt( 0);
 CL.AddConstantN('RASTER_FONTTYPE','LongInt').SetInt( 1);
 CL.AddConstantN('DEVICE_FONTTYPE','LongInt').SetInt( 2);
 CL.AddConstantN('TRUETYPE_FONTTYPE','LongInt').SetInt( 4);
 CL.AddDelphiFunction('Function RGB( r, g, b : Byte) : COLORREF');
 CL.AddDelphiFunction('Function PaletteRGB( r, g, b : Byte) : COLORREF');
 CL.AddDelphiFunction('Function PaletteIndex( i : Word) : COLORREF');
 CL.AddConstantN('PC_RESERVED','LongInt').SetInt( 1);
 CL.AddConstantN('PC_EXPLICIT','LongInt').SetInt( 2);
 CL.AddConstantN('PC_NOCOLLAPSE','LongInt').SetInt( 4);
 CL.AddDelphiFunction('Function GetRValue( rgb : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetGValue( rgb : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetBValue( rgb : DWORD) : Byte');
 CL.AddConstantN('TRANSPARENT','LongInt').SetInt( 1);
 CL.AddConstantN('OPAQUE','LongInt').SetInt( 2);
 CL.AddConstantN('BKMODE_LAST','LongInt').SetInt( 2);
 CL.AddConstantN('GM_COMPATIBLE','LongInt').SetInt( 1);
 CL.AddConstantN('GM_ADVANCED','LongInt').SetInt( 2);
 CL.AddConstantN('GM_LAST','LongInt').SetInt( 2);
 CL.AddConstantN('PT_CLOSEFIGURE','LongInt').SetInt( 1);
 CL.AddConstantN('PT_LINETO','LongInt').SetInt( 2);
 CL.AddConstantN('PT_BEZIERTO','LongInt').SetInt( 4);
 CL.AddConstantN('PT_MOVETO','LongInt').SetInt( 6);
 CL.AddConstantN('MM_TEXT','LongInt').SetInt( 1);
 CL.AddConstantN('MM_LOMETRIC','LongInt').SetInt( 2);
 CL.AddConstantN('MM_HIMETRIC','LongInt').SetInt( 3);
 CL.AddConstantN('MM_LOENGLISH','LongInt').SetInt( 4);
 CL.AddConstantN('MM_HIENGLISH','LongInt').SetInt( 5);
 CL.AddConstantN('MM_TWIPS','LongInt').SetInt( 6);
 CL.AddConstantN('MM_ISOTROPIC','LongInt').SetInt( 7);
 CL.AddConstantN('MM_ANISOTROPIC','LongInt').SetInt( 8);
 CL.AddConstantN('MM_MIN','').SetString( MM_TEXT);
 CL.AddConstantN('MM_MAX','').SetString( MM_ANISOTROPIC);
 CL.AddConstantN('MM_MAX_FIXEDSCALE','').SetString( MM_TWIPS);
 CL.AddConstantN('ABSOLUTE','LongInt').SetInt( 1);
 CL.AddConstantN('RELATIVE','LongInt').SetInt( 2);
 CL.AddConstantN('WHITE_BRUSH','LongInt').SetInt( 0);
 CL.AddConstantN('LTGRAY_BRUSH','LongInt').SetInt( 1);
 CL.AddConstantN('GRAY_BRUSH','LongInt').SetInt( 2);
 CL.AddConstantN('DKGRAY_BRUSH','LongInt').SetInt( 3);
 CL.AddConstantN('BLACK_BRUSH','LongInt').SetInt( 4);
 CL.AddConstantN('NULL_BRUSH','LongInt').SetInt( 5);
 CL.AddConstantN('HOLLOW_BRUSH','').SetString( NULL_BRUSH);
 CL.AddConstantN('WHITE_PEN','LongInt').SetInt( 6);
 CL.AddConstantN('BLACK_PEN','LongInt').SetInt( 7);
 CL.AddConstantN('NULL_PEN','LongInt').SetInt( 8);
 CL.AddConstantN('OEM_FIXED_FONT','LongInt').SetInt( 10);
 CL.AddConstantN('ANSI_FIXED_FONT','LongInt').SetInt( 11);
 CL.AddConstantN('ANSI_VAR_FONT','LongInt').SetInt( 12);
 CL.AddConstantN('SYSTEM_FONT','LongInt').SetInt( 13);
 CL.AddConstantN('DEVICE_DEFAULT_FONT','LongInt').SetInt( 14);
 CL.AddConstantN('DEFAULT_PALETTE','LongInt').SetInt( 15);
 CL.AddConstantN('SYSTEM_FIXED_FONT','LongWord').SetUInt( $10);
 CL.AddConstantN('DEFAULT_GUI_FONT','LongInt').SetInt( 17);
 CL.AddConstantN('DC_BRUSH','LongInt').SetInt( 18);
 CL.AddConstantN('DC_PEN','LongInt').SetInt( 19);
 CL.AddConstantN('STOCK_LAST','LongInt').SetInt( 19);
 CL.AddConstantN('CLR_INVALID','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('BS_SOLID','LongInt').SetInt( 0);
 CL.AddConstantN('BS_NULL','LongInt').SetInt( 1);
 CL.AddConstantN('BS_HOLLOW','').SetString( BS_NULL);
 CL.AddConstantN('BS_HATCHED','LongInt').SetInt( 2);
 CL.AddConstantN('BS_PATTERN','LongInt').SetInt( 3);
 CL.AddConstantN('BS_INDEXED','LongInt').SetInt( 4);
 CL.AddConstantN('BS_DIBPATTERN','LongInt').SetInt( 5);
 CL.AddConstantN('BS_DIBPATTERNPT','LongInt').SetInt( 6);
 CL.AddConstantN('BS_PATTERN8X8','LongInt').SetInt( 7);
 CL.AddConstantN('BS_DIBPATTERN8X8','LongInt').SetInt( 8);
 CL.AddConstantN('BS_MONOPATTERN','LongInt').SetInt( 9);
 CL.AddConstantN('HS_HORIZONTAL','LongInt').SetInt( 0);
 CL.AddConstantN('HS_VERTICAL','LongInt').SetInt( 1);
 CL.AddConstantN('HS_FDIAGONAL','LongInt').SetInt( 2);
 CL.AddConstantN('HS_BDIAGONAL','LongInt').SetInt( 3);
 CL.AddConstantN('HS_CROSS','LongInt').SetInt( 4);
 CL.AddConstantN('HS_DIAGCROSS','LongInt').SetInt( 5);
 CL.AddConstantN('PS_SOLID','LongInt').SetInt( 0);
 CL.AddConstantN('PS_DASH','LongInt').SetInt( 1);
 CL.AddConstantN('PS_DOT','LongInt').SetInt( 2);
 CL.AddConstantN('PS_DASHDOT','LongInt').SetInt( 3);
 CL.AddConstantN('PS_DASHDOTDOT','LongInt').SetInt( 4);
 CL.AddConstantN('PS_NULL','LongInt').SetInt( 5);
 CL.AddConstantN('PS_INSIDEFRAME','LongInt').SetInt( 6);
 CL.AddConstantN('PS_USERSTYLE','LongInt').SetInt( 7);
 CL.AddConstantN('PS_ALTERNATE','LongInt').SetInt( 8);
 CL.AddConstantN('PS_STYLE_MASK','LongInt').SetInt( 15);
 CL.AddConstantN('PS_ENDCAP_ROUND','LongInt').SetInt( 0);
 CL.AddConstantN('PS_ENDCAP_SQUARE','LongWord').SetUInt( $100);
 CL.AddConstantN('PS_ENDCAP_FLAT','LongWord').SetUInt( $200);
 CL.AddConstantN('PS_ENDCAP_MASK','LongInt').SetInt( 3840);
 CL.AddConstantN('PS_JOIN_ROUND','LongInt').SetInt( 0);
 CL.AddConstantN('PS_JOIN_BEVEL','LongWord').SetUInt( $1000);
 CL.AddConstantN('PS_JOIN_MITER','LongWord').SetUInt( $2000);
 CL.AddConstantN('PS_JOIN_MASK','LongInt').SetInt( 61440);
 CL.AddConstantN('PS_COSMETIC','LongInt').SetInt( 0);
 CL.AddConstantN('PS_GEOMETRIC','LongWord').SetUInt( $10000);
 CL.AddConstantN('PS_TYPE_MASK','LongWord').SetUInt( $F0000);
 CL.AddConstantN('AD_COUNTERCLOCKWISE','LongInt').SetInt( 1);
 CL.AddConstantN('AD_CLOCKWISE','LongInt').SetInt( 2);
 CL.AddConstantN('DRIVERVERSION','LongInt').SetInt( 0);
 CL.AddConstantN('TECHNOLOGY','LongInt').SetInt( 2);
 CL.AddConstantN('HORZSIZE','LongInt').SetInt( 4);
 CL.AddConstantN('VERTSIZE','LongInt').SetInt( 6);
 CL.AddConstantN('HORZRES','LongInt').SetInt( 8);
 CL.AddConstantN('VERTRES','LongInt').SetInt( 10);
 CL.AddConstantN('BITSPIXEL','LongInt').SetInt( 12);
 CL.AddConstantN('PLANES','LongInt').SetInt( 14);
 CL.AddConstantN('NUMBRUSHES','LongWord').SetUInt( $10);
 CL.AddConstantN('NUMPENS','LongInt').SetInt( 18);
 CL.AddConstantN('NUMMARKERS','LongInt').SetInt( 20);
 CL.AddConstantN('NUMFONTS','LongInt').SetInt( 22);
 CL.AddConstantN('NUMCOLORS','LongInt').SetInt( 24);
 CL.AddConstantN('PDEVICESIZE','LongInt').SetInt( 26);
 CL.AddConstantN('CURVECAPS','LongInt').SetInt( 28);
 CL.AddConstantN('LINECAPS','LongInt').SetInt( 30);
 CL.AddConstantN('POLYGONALCAPS','LongWord').SetUInt( $20);
 CL.AddConstantN('TEXTCAPS','LongInt').SetInt( 34);
 CL.AddConstantN('CLIPCAPS','LongInt').SetInt( 36);
 CL.AddConstantN('RASTERCAPS','LongInt').SetInt( 38);
 CL.AddConstantN('ASPECTX','LongInt').SetInt( 40);
 CL.AddConstantN('ASPECTY','LongInt').SetInt( 42);
 CL.AddConstantN('ASPECTXY','LongInt').SetInt( 44);
 CL.AddConstantN('SHADEBLENDCAPS','LongInt').SetInt( 45);
 CL.AddConstantN('LOGPIXELSX','LongInt').SetInt( 88);
 CL.AddConstantN('LOGPIXELSY','LongInt').SetInt( 90);
 CL.AddConstantN('SIZEPALETTE','LongInt').SetInt( 104);
 CL.AddConstantN('NUMRESERVED','LongInt').SetInt( 106);
 CL.AddConstantN('COLORRES','LongInt').SetInt( 108);
 CL.AddConstantN('PHYSICALWIDTH','LongInt').SetInt( 110);
 CL.AddConstantN('PHYSICALHEIGHT','LongInt').SetInt( 111);
 CL.AddConstantN('PHYSICALOFFSETX','LongInt').SetInt( 112);
 CL.AddConstantN('PHYSICALOFFSETY','LongInt').SetInt( 113);
 CL.AddConstantN('SCALINGFACTORX','LongInt').SetInt( 114);
 CL.AddConstantN('SCALINGFACTORY','LongInt').SetInt( 115);
 CL.AddConstantN('VREFRESH','LongInt').SetInt( 116);
 CL.AddConstantN('DESKTOPVERTRES','LongInt').SetInt( 117);
 CL.AddConstantN('DESKTOPHORZRES','LongInt').SetInt( 118);
 CL.AddConstantN('BLTALIGNMENT','LongInt').SetInt( 119);
 CL.AddConstantN('DT_PLOTTER','LongInt').SetInt( 0);
 CL.AddConstantN('DT_RASDISPLAY','LongInt').SetInt( 1);
 CL.AddConstantN('DT_RASPRINTER','LongInt').SetInt( 2);
 CL.AddConstantN('DT_RASCAMERA','LongInt').SetInt( 3);
 CL.AddConstantN('DT_CHARSTREAM','LongInt').SetInt( 4);
 CL.AddConstantN('DT_METAFILE','LongInt').SetInt( 5);
 CL.AddConstantN('DT_DISPFILE','LongInt').SetInt( 6);
 CL.AddConstantN('CC_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('CC_CIRCLES','LongInt').SetInt( 1);
 CL.AddConstantN('CC_PIE','LongInt').SetInt( 2);
 CL.AddConstantN('CC_CHORD','LongInt').SetInt( 4);
 CL.AddConstantN('CC_ELLIPSES','LongInt').SetInt( 8);
 CL.AddConstantN('CC_WIDE','LongWord').SetUInt( $10);
 CL.AddConstantN('CC_STYLED','LongWord').SetUInt( $20);
 CL.AddConstantN('CC_WIDESTYLED','LongWord').SetUInt( $40);
 CL.AddConstantN('CC_INTERIORS','LongWord').SetUInt( $80);
 CL.AddConstantN('CC_ROUNDRECT','LongWord').SetUInt( $100);
 CL.AddConstantN('LC_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('LC_POLYLINE','LongInt').SetInt( 2);
 CL.AddConstantN('LC_MARKER','LongInt').SetInt( 4);
 CL.AddConstantN('LC_POLYMARKER','LongInt').SetInt( 8);
 CL.AddConstantN('LC_WIDE','LongWord').SetUInt( $10);
 CL.AddConstantN('LC_STYLED','LongWord').SetUInt( $20);
 CL.AddConstantN('LC_WIDESTYLED','LongWord').SetUInt( $40);
 CL.AddConstantN('LC_INTERIORS','LongWord').SetUInt( $80);
 CL.AddConstantN('PC_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('PC_POLYGON','LongInt').SetInt( 1);
 CL.AddConstantN('PC_RECTANGLE','LongInt').SetInt( 2);
 CL.AddConstantN('PC_WINDPOLYGON','LongInt').SetInt( 4);
 CL.AddConstantN('PC_TRAPEZOID','LongInt').SetInt( 4);
 CL.AddConstantN('PC_SCANLINE','LongInt').SetInt( 8);
 CL.AddConstantN('PC_WIDE','LongWord').SetUInt( $10);
 CL.AddConstantN('PC_STYLED','LongWord').SetUInt( $20);
 CL.AddConstantN('PC_WIDESTYLED','LongWord').SetUInt( $40);
 CL.AddConstantN('PC_INTERIORS','LongWord').SetUInt( $80);
 CL.AddConstantN('PC_POLYPOLYGON','LongWord').SetUInt( $100);
 CL.AddConstantN('PC_PATHS','LongWord').SetUInt( $200);
 CL.AddConstantN('CP_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('CP_RECTANGLE','LongInt').SetInt( 1);
 CL.AddConstantN('CP_REGION','LongInt').SetInt( 2);
 CL.AddConstantN('TC_OP_CHARACTER','LongInt').SetInt( 1);
 CL.AddConstantN('TC_OP_STROKE','LongInt').SetInt( 2);
 CL.AddConstantN('TC_CP_STROKE','LongInt').SetInt( 4);
 CL.AddConstantN('TC_CR_90','LongInt').SetInt( 8);
 CL.AddConstantN('TC_CR_ANY','LongWord').SetUInt( $10);
 CL.AddConstantN('TC_SF_X_YINDEP','LongWord').SetUInt( $20);
 CL.AddConstantN('TC_SA_DOUBLE','LongWord').SetUInt( $40);
 CL.AddConstantN('TC_SA_INTEGER','LongWord').SetUInt( $80);
 CL.AddConstantN('TC_SA_CONTIN','LongWord').SetUInt( $100);
 CL.AddConstantN('TC_EA_DOUBLE','LongWord').SetUInt( $200);
 CL.AddConstantN('TC_IA_ABLE','LongWord').SetUInt( $400);
 CL.AddConstantN('TC_UA_ABLE','LongWord').SetUInt( $800);
 CL.AddConstantN('TC_SO_ABLE','LongWord').SetUInt( $1000);
 CL.AddConstantN('TC_RA_ABLE','LongWord').SetUInt( $2000);
 CL.AddConstantN('TC_VA_ABLE','LongWord').SetUInt( $4000);
 CL.AddConstantN('TC_RESERVED','LongWord').SetUInt( $8000);
 CL.AddConstantN('TC_SCROLLBLT','LongWord').SetUInt( $10000);
 CL.AddConstantN('RC_BITBLT','LongInt').SetInt( 1);
 CL.AddConstantN('RC_BANDING','LongInt').SetInt( 2);
 CL.AddConstantN('RC_SCALING','LongInt').SetInt( 4);
 CL.AddConstantN('RC_BITMAP64','LongInt').SetInt( 8);
 CL.AddConstantN('RC_GDI20_OUTPUT','LongWord').SetUInt( $10);
 CL.AddConstantN('RC_GDI20_STATE','LongWord').SetUInt( $20);
 CL.AddConstantN('RC_SAVEBITMAP','LongWord').SetUInt( $40);
 CL.AddConstantN('RC_DI_BITMAP','LongWord').SetUInt( $80);
 CL.AddConstantN('RC_PALETTE','LongWord').SetUInt( $100);
 CL.AddConstantN('RC_DIBTODEV','LongWord').SetUInt( $200);
 CL.AddConstantN('RC_BIGFONT','LongWord').SetUInt( $400);
 CL.AddConstantN('RC_STRETCHBLT','LongWord').SetUInt( $800);
 CL.AddConstantN('RC_FLOODFILL','LongWord').SetUInt( $1000);
 CL.AddConstantN('RC_STRETCHDIB','LongWord').SetUInt( $2000);
 CL.AddConstantN('RC_OP_DX_OUTPUT','LongWord').SetUInt( $4000);
 CL.AddConstantN('RC_DEVBITS','LongWord').SetUInt( $8000);
 CL.AddConstantN('SB_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('SB_CONST_ALPHA','LongInt').SetInt( 1);
 CL.AddConstantN('SB_PIXEL_ALPHA','LongInt').SetInt( 2);
 CL.AddConstantN('SB_PREMULT_ALPHA','LongInt').SetInt( 4);
 CL.AddConstantN('SB_GRAD_RECT','LongWord').SetUInt( $10);
 CL.AddConstantN('SB_GRAD_TRI','LongWord').SetUInt( $20);
 CL.AddConstantN('DIB_RGB_COLORS','LongInt').SetInt( 0);
 CL.AddConstantN('DIB_PAL_COLORS','LongInt').SetInt( 1);
 CL.AddConstantN('SYSPAL_ERROR','LongInt').SetInt( 0);
 CL.AddConstantN('SYSPAL_STATIC','LongInt').SetInt( 1);
 CL.AddConstantN('SYSPAL_NOSTATIC','LongInt').SetInt( 2);
 CL.AddConstantN('CBM_INIT','LongInt').SetInt( 4);
 CL.AddConstantN('FLOODFILLBORDER','LongInt').SetInt( 0);
 CL.AddConstantN('FLOODFILLSURFACE','LongInt').SetInt( 1);
 CL.AddConstantN('CCHDEVICENAME','LongInt').SetInt( 32);
 CL.AddConstantN('CCHFORMNAME','LongInt').SetInt( 32);
  CL.AddTypeS('PDeviceModeA', '^TDeviceModeA // will not work');
  CL.AddTypeS('PDeviceModeW', '^TDeviceModeW // will not work');
  CL.AddTypeS('PDeviceMode', 'PDeviceModeA');
  CL.AddTypeS('_devicemode', '_devicemodeA');
  CL.AddTypeS('TDeviceModeA', '_devicemodeA');
  CL.AddTypeS('TDeviceModeW', '_devicemodeW');
  CL.AddTypeS('TDeviceMode', 'TDeviceModeA');
  CL.AddTypeS('DEVMODEA', '_devicemodeA');
  CL.AddTypeS('DEVMODEW', '_devicemodeW');
  CL.AddTypeS('DEVMODE', 'DEVMODEA');
  CL.AddTypeS('PDevMode', 'PDeviceMode');
  CL.AddTypeS('TDevMode', 'TDeviceMode');
 CL.AddConstantN('DM_SPECVERSION','LongWord').SetUInt( $401);
 CL.AddConstantN('DM_ORIENTATION','LongInt').SetInt( 1);
 CL.AddConstantN('DM_PAPERSIZE','LongInt').SetInt( 2);
 CL.AddConstantN('DM_PAPERLENGTH','LongInt').SetInt( 4);
 CL.AddConstantN('DM_PAPERWIDTH','LongInt').SetInt( 8);
 CL.AddConstantN('DM_SCALE','LongWord').SetUInt( $10);
 CL.AddConstantN('DM_POSITION','LongWord').SetUInt( $20);
 CL.AddConstantN('DM_COPIES','LongWord').SetUInt( $100);
 CL.AddConstantN('DM_DEFAULTSOURCE','LongWord').SetUInt( $200);
 CL.AddConstantN('DM_PRINTQUALITY','LongWord').SetUInt( $400);
 CL.AddConstantN('DM_COLOR','LongWord').SetUInt( $800);
 CL.AddConstantN('DM_DUPLEX','LongWord').SetUInt( $1000);
 CL.AddConstantN('DM_YRESOLUTION','LongWord').SetUInt( $2000);
 CL.AddConstantN('DM_TTOPTION','LongWord').SetUInt( $4000);
 CL.AddConstantN('DM_COLLATE','LongWord').SetUInt( $8000);
 CL.AddConstantN('DM_FORMNAME','LongWord').SetUInt( $10000);
 CL.AddConstantN('DM_LOGPIXELS','LongWord').SetUInt( $20000);
 CL.AddConstantN('DM_BITSPERPEL','LongWord').SetUInt( $40000);
 CL.AddConstantN('DM_PELSWIDTH','LongWord').SetUInt( $80000);
 CL.AddConstantN('DM_PELSHEIGHT','LongWord').SetUInt( $100000);
 CL.AddConstantN('DM_DISPLAYFLAGS','LongWord').SetUInt( $200000);
 CL.AddConstantN('DM_DISPLAYFREQUENCY','LongWord').SetUInt( $400000);
 CL.AddConstantN('DM_PANNINGWIDTH','LongWord').SetUInt( $00800000);
 CL.AddConstantN('DM_PANNINGHEIGHT','LongWord').SetUInt( $01000000);
 CL.AddConstantN('DM_ICMMETHOD','LongWord').SetUInt( $2000000);
 CL.AddConstantN('DM_ICMINTENT','LongWord').SetUInt( $4000000);
 CL.AddConstantN('DM_MEDIATYPE','LongWord').SetUInt( $8000000);
 CL.AddConstantN('DM_DITHERTYPE','LongWord').SetUInt( $10000000);
 CL.AddConstantN('DM_ICCMANUFACTURER','LongWord').SetUInt( $20000000);
 CL.AddConstantN('DM_ICCMODEL','LongWord').SetUInt( $40000000);
 CL.AddConstantN('DMORIENT_PORTRAIT','LongInt').SetInt( 1);
 CL.AddConstantN('DMORIENT_LANDSCAPE','LongInt').SetInt( 2);
 CL.AddConstantN('DMPAPER_LETTER','LongInt').SetInt( 1);
 CL.AddConstantN('DMPAPER_FIRST','').SetString( DMPAPER_LETTER);
 CL.AddConstantN('DMPAPER_LETTERSMALL','LongInt').SetInt( 2);
 CL.AddConstantN('DMPAPER_TABLOID','LongInt').SetInt( 3);
 CL.AddConstantN('DMPAPER_LEDGER','LongInt').SetInt( 4);
 CL.AddConstantN('DMPAPER_LEGAL','LongInt').SetInt( 5);
 CL.AddConstantN('DMPAPER_STATEMENT','LongInt').SetInt( 6);
 CL.AddConstantN('DMPAPER_EXECUTIVE','LongInt').SetInt( 7);
 CL.AddConstantN('DMPAPER_A3','LongInt').SetInt( 8);
 CL.AddConstantN('DMPAPER_A4','LongInt').SetInt( 9);
 CL.AddConstantN('DMPAPER_A4SMALL','LongInt').SetInt( 10);
 CL.AddConstantN('DMPAPER_A5','LongInt').SetInt( 11);
 CL.AddConstantN('DMPAPER_B4','LongInt').SetInt( 12);
 CL.AddConstantN('DMPAPER_B5','LongInt').SetInt( 13);
 CL.AddConstantN('DMPAPER_FOLIO','LongInt').SetInt( 14);
 CL.AddConstantN('DMPAPER_QUARTO','LongInt').SetInt( 15);
 CL.AddConstantN('DMPAPER_10X14','LongInt').SetInt( 16);
 CL.AddConstantN('DMPAPER_11X17','LongInt').SetInt( 17);
 CL.AddConstantN('DMPAPER_NOTE','LongInt').SetInt( 18);
 CL.AddConstantN('DMPAPER_ENV_9','LongInt').SetInt( 19);
 CL.AddConstantN('DMPAPER_ENV_10','LongInt').SetInt( 20);
 CL.AddConstantN('DMPAPER_ENV_11','LongInt').SetInt( 21);
 CL.AddConstantN('DMPAPER_ENV_12','LongInt').SetInt( 22);
 CL.AddConstantN('DMPAPER_ENV_14','LongInt').SetInt( 23);
 CL.AddConstantN('DMPAPER_CSHEET','LongInt').SetInt( 24);
 CL.AddConstantN('DMPAPER_DSHEET','LongInt').SetInt( 25);
 CL.AddConstantN('DMPAPER_ESHEET','LongInt').SetInt( 26);
 CL.AddConstantN('DMPAPER_ENV_DL','LongInt').SetInt( 27);
 CL.AddConstantN('DMPAPER_ENV_C5','LongInt').SetInt( 28);
 CL.AddConstantN('DMPAPER_ENV_C3','LongInt').SetInt( 29);
 CL.AddConstantN('DMPAPER_ENV_C4','LongInt').SetInt( 30);
 CL.AddConstantN('DMPAPER_ENV_C6','LongInt').SetInt( 31);
 CL.AddConstantN('DMPAPER_ENV_C65','LongInt').SetInt( 32);
 CL.AddConstantN('DMPAPER_ENV_B4','LongInt').SetInt( 33);
 CL.AddConstantN('DMPAPER_ENV_B5','LongInt').SetInt( 34);
 CL.AddConstantN('DMPAPER_ENV_B6','LongInt').SetInt( 35);
 CL.AddConstantN('DMPAPER_ENV_ITALY','LongInt').SetInt( 36);
 CL.AddConstantN('DMPAPER_ENV_MONARCH','LongInt').SetInt( 37);
 CL.AddConstantN('DMPAPER_ENV_PERSONAL','LongInt').SetInt( 38);
 CL.AddConstantN('DMPAPER_FANFOLD_US','LongInt').SetInt( 39);
 CL.AddConstantN('DMPAPER_FANFOLD_STD_GERMAN','LongInt').SetInt( 40);
 CL.AddConstantN('DMPAPER_FANFOLD_LGL_GERMAN','LongInt').SetInt( 41);
 CL.AddConstantN('DMPAPER_ISO_B4','LongInt').SetInt( 42);
 CL.AddConstantN('DMPAPER_JAPANESE_POSTCARD','LongInt').SetInt( 43);
 CL.AddConstantN('DMPAPER_9X11','LongInt').SetInt( 44);
 CL.AddConstantN('DMPAPER_10X11','LongInt').SetInt( 45);
 CL.AddConstantN('DMPAPER_15X11','LongInt').SetInt( 46);
 CL.AddConstantN('DMPAPER_ENV_INVITE','LongInt').SetInt( 47);
 CL.AddConstantN('DMPAPER_RESERVED_48','LongInt').SetInt( 48);
 CL.AddConstantN('DMPAPER_RESERVED_49','LongInt').SetInt( 49);
 CL.AddConstantN('DMPAPER_LETTER_EXTRA','LongInt').SetInt( 50);
 CL.AddConstantN('DMPAPER_LEGAL_EXTRA','LongInt').SetInt( 51);
 CL.AddConstantN('DMPAPER_TABLOID_EXTRA','LongInt').SetInt( 52);
 CL.AddConstantN('DMPAPER_A4_EXTRA','LongInt').SetInt( 53);
 CL.AddConstantN('DMPAPER_LETTER_TRANSVERSE','LongInt').SetInt( 54);
 CL.AddConstantN('DMPAPER_A4_TRANSVERSE','LongInt').SetInt( 55);
 CL.AddConstantN('DMPAPER_LETTER_EXTRA_TRANSVERSE','LongInt').SetInt( 56);
 CL.AddConstantN('DMPAPER_A_PLUS','LongInt').SetInt( 57);
 CL.AddConstantN('DMPAPER_B_PLUS','LongInt').SetInt( 58);
 CL.AddConstantN('DMPAPER_LETTER_PLUS','LongInt').SetInt( 59);
 CL.AddConstantN('DMPAPER_A4_PLUS','LongInt').SetInt( 60);
 CL.AddConstantN('DMPAPER_A5_TRANSVERSE','LongInt').SetInt( 61);
 CL.AddConstantN('DMPAPER_B5_TRANSVERSE','LongInt').SetInt( 62);
 CL.AddConstantN('DMPAPER_A3_EXTRA','LongInt').SetInt( 63);
 CL.AddConstantN('DMPAPER_A5_EXTRA','LongWord').SetUInt( $40);
 CL.AddConstantN('DMPAPER_B5_EXTRA','LongInt').SetInt( 65);
 CL.AddConstantN('DMPAPER_A2','LongInt').SetInt( 66);
 CL.AddConstantN('DMPAPER_A3_TRANSVERSE','LongInt').SetInt( 67);
 CL.AddConstantN('DMPAPER_A3_EXTRA_TRANSVERSE','LongInt').SetInt( 68);
 CL.AddConstantN('DMPAPER_DBL_JAPANESE_POSTCARD','LongInt').SetInt( 69);
 CL.AddConstantN('DMPAPER_A6','LongInt').SetInt( 70);
 CL.AddConstantN('DMPAPER_JENV_KAKU2','LongInt').SetInt( 71);
 CL.AddConstantN('DMPAPER_JENV_KAKU3','LongInt').SetInt( 72);
 CL.AddConstantN('DMPAPER_JENV_CHOU3','LongInt').SetInt( 73);
 CL.AddConstantN('DMPAPER_JENV_CHOU4','LongInt').SetInt( 74);
 CL.AddConstantN('DMPAPER_LETTER_ROTATED','LongInt').SetInt( 75);
 CL.AddConstantN('DMPAPER_A3_ROTATED','LongInt').SetInt( 76);
 CL.AddConstantN('DMPAPER_A4_ROTATED','LongInt').SetInt( 77);
 CL.AddConstantN('DMPAPER_A5_ROTATED','LongInt').SetInt( 78);
 CL.AddConstantN('DMPAPER_B4_JIS_ROTATED','LongInt').SetInt( 79);
 CL.AddConstantN('DMPAPER_B5_JIS_ROTATED','LongInt').SetInt( 80);
 CL.AddConstantN('DMPAPER_JAPANESE_POSTCARD_ROTATED','LongInt').SetInt( 81);
 CL.AddConstantN('DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED','LongInt').SetInt( 82);
 CL.AddConstantN('DMPAPER_A6_ROTATED','LongInt').SetInt( 83);
 CL.AddConstantN('DMPAPER_JENV_KAKU2_ROTATED','LongInt').SetInt( 84);
 CL.AddConstantN('DMPAPER_JENV_KAKU3_ROTATED','LongInt').SetInt( 85);
 CL.AddConstantN('DMPAPER_JENV_CHOU3_ROTATED','LongInt').SetInt( 86);
 CL.AddConstantN('DMPAPER_JENV_CHOU4_ROTATED','LongInt').SetInt( 87);
 CL.AddConstantN('DMPAPER_B6_JIS','LongInt').SetInt( 88);
 CL.AddConstantN('DMPAPER_B6_JIS_ROTATED','LongInt').SetInt( 89);
 CL.AddConstantN('DMPAPER_12X11','LongInt').SetInt( 90);
 CL.AddConstantN('DMPAPER_JENV_YOU4','LongInt').SetInt( 91);
 CL.AddConstantN('DMPAPER_JENV_YOU4_ROTATED','LongInt').SetInt( 92);
 CL.AddConstantN('DMPAPER_P16K','LongInt').SetInt( 93);
 CL.AddConstantN('DMPAPER_P32K','LongInt').SetInt( 94);
 CL.AddConstantN('DMPAPER_P32KBIG','LongInt').SetInt( 95);
 CL.AddConstantN('DMPAPER_PENV_1','LongInt').SetInt( 96);
 CL.AddConstantN('DMPAPER_PENV_2','LongInt').SetInt( 97);
 CL.AddConstantN('DMPAPER_PENV_3','LongInt').SetInt( 98);
 CL.AddConstantN('DMPAPER_PENV_4','LongInt').SetInt( 99);
 CL.AddConstantN('DMPAPER_PENV_5','LongInt').SetInt( 100);
 CL.AddConstantN('DMPAPER_PENV_6','LongInt').SetInt( 101);
 CL.AddConstantN('DMPAPER_PENV_7','LongInt').SetInt( 102);
 CL.AddConstantN('DMPAPER_PENV_8','LongInt').SetInt( 103);
 CL.AddConstantN('DMPAPER_PENV_9','LongInt').SetInt( 104);
 CL.AddConstantN('DMPAPER_PENV_10','LongInt').SetInt( 105);
 CL.AddConstantN('DMPAPER_P16K_ROTATED','LongInt').SetInt( 106);
 CL.AddConstantN('DMPAPER_P32K_ROTATED','LongInt').SetInt( 107);
 CL.AddConstantN('DMPAPER_P32KBIG_ROTATED','LongInt').SetInt( 108);
 CL.AddConstantN('DMPAPER_PENV_1_ROTATED','LongInt').SetInt( 109);
 CL.AddConstantN('DMPAPER_PENV_2_ROTATED','LongInt').SetInt( 110);
 CL.AddConstantN('DMPAPER_PENV_3_ROTATED','LongInt').SetInt( 111);
 CL.AddConstantN('DMPAPER_PENV_4_ROTATED','LongInt').SetInt( 112);
 CL.AddConstantN('DMPAPER_PENV_5_ROTATED','LongInt').SetInt( 113);
 CL.AddConstantN('DMPAPER_PENV_6_ROTATED','LongInt').SetInt( 114);
 CL.AddConstantN('DMPAPER_PENV_7_ROTATED','LongInt').SetInt( 115);
 CL.AddConstantN('DMPAPER_PENV_8_ROTATED','LongInt').SetInt( 116);
 CL.AddConstantN('DMPAPER_PENV_9_ROTATED','LongInt').SetInt( 117);
 CL.AddConstantN('DMPAPER_PENV_10_ROTATED','LongInt').SetInt( 118);
 CL.AddConstantN('DMPAPER_LAST','').SetString( DMPAPER_PENV_10_ROTATED);
 CL.AddConstantN('DMPAPER_USER','LongWord').SetUInt( $100);
 CL.AddConstantN('DMBIN_UPPER','LongInt').SetInt( 1);
 CL.AddConstantN('DMBIN_FIRST','').SetString( DMBIN_UPPER);
 CL.AddConstantN('DMBIN_ONLYONE','LongInt').SetInt( 1);
 CL.AddConstantN('DMBIN_LOWER','LongInt').SetInt( 2);
 CL.AddConstantN('DMBIN_MIDDLE','LongInt').SetInt( 3);
 CL.AddConstantN('DMBIN_MANUAL','LongInt').SetInt( 4);
 CL.AddConstantN('DMBIN_ENVELOPE','LongInt').SetInt( 5);
 CL.AddConstantN('DMBIN_ENVMANUAL','LongInt').SetInt( 6);
 CL.AddConstantN('DMBIN_AUTO','LongInt').SetInt( 7);
 CL.AddConstantN('DMBIN_TRACTOR','LongInt').SetInt( 8);
 CL.AddConstantN('DMBIN_SMALLFMT','LongInt').SetInt( 9);
 CL.AddConstantN('DMBIN_LARGEFMT','LongInt').SetInt( 10);
 CL.AddConstantN('DMBIN_LARGECAPACITY','LongInt').SetInt( 11);
 CL.AddConstantN('DMBIN_CASSETTE','LongInt').SetInt( 14);
 CL.AddConstantN('DMBIN_FORMSOURCE','LongInt').SetInt( 15);
 CL.AddConstantN('DMBIN_LAST','').SetString( DMBIN_FORMSOURCE);
 CL.AddConstantN('DMBIN_USER','LongWord').SetUInt( $100);
 CL.AddConstantN('DMRES_DRAFT','LongInt').SetInt( LongWord ( - 1 ));
 CL.AddConstantN('DMRES_LOW','LongInt').SetInt( LongWord ( - 2 ));
 CL.AddConstantN('DMRES_MEDIUM','LongInt').SetInt( LongWord ( - 3 ));
 CL.AddConstantN('DMRES_HIGH','LongInt').SetInt( LongWord ( - 4 ));
 CL.AddConstantN('DMCOLOR_MONOCHROME','LongInt').SetInt( 1);
 CL.AddConstantN('DMCOLOR_COLOR','LongInt').SetInt( 2);
 CL.AddConstantN('DMDUP_SIMPLEX','LongInt').SetInt( 1);
 CL.AddConstantN('DMDUP_VERTICAL','LongInt').SetInt( 2);
 CL.AddConstantN('DMDUP_HORIZONTAL','LongInt').SetInt( 3);
 CL.AddConstantN('DMTT_BITMAP','LongInt').SetInt( 1);
 CL.AddConstantN('DMTT_DOWNLOAD','LongInt').SetInt( 2);
 CL.AddConstantN('DMTT_SUBDEV','LongInt').SetInt( 3);
 CL.AddConstantN('DMTT_DOWNLOAD_OUTLINE','LongInt').SetInt( 4);
 CL.AddConstantN('DMCOLLATE_FALSE','LongInt').SetInt( 0);
 CL.AddConstantN('DMCOLLATE_TRUE','LongInt').SetInt( 1);
 CL.AddConstantN('DM_GRAYSCALE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('DM_INTERLACED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('DM_TEXTMODE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('DMDISPLAYFLAGS_TEXTMODE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('DMICMMETHOD_NONE','LongInt').SetInt( 1);
 CL.AddConstantN('DMICMMETHOD_SYSTEM','LongInt').SetInt( 2);
 CL.AddConstantN('DMICMMETHOD_DRIVER','LongInt').SetInt( 3);
 CL.AddConstantN('DMICMMETHOD_DEVICE','LongInt').SetInt( 4);
 CL.AddConstantN('DMICMMETHOD_USER','LongWord').SetUInt( $100);
 CL.AddConstantN('DMICM_SATURATE','LongInt').SetInt( 1);
 CL.AddConstantN('DMICM_CONTRAST','LongInt').SetInt( 2);
 CL.AddConstantN('DMICM_COLORMETRIC','LongInt').SetInt( 3);
 CL.AddConstantN('DMICM_USER','LongWord').SetUInt( $100);
 CL.AddConstantN('DMMEDIA_STANDARD','LongInt').SetInt( 1);
 CL.AddConstantN('DMMEDIA_TRANSPARENCY','LongInt').SetInt( 2);
 CL.AddConstantN('DMMEDIA_GLOSSY','LongInt').SetInt( 3);
 CL.AddConstantN('DMMEDIA_USER','LongWord').SetUInt( $100);
 CL.AddConstantN('DMDITHER_NONE','LongInt').SetInt( 1);
 CL.AddConstantN('DMDITHER_COARSE','LongInt').SetInt( 2);
 CL.AddConstantN('DMDITHER_FINE','LongInt').SetInt( 3);
 CL.AddConstantN('DMDITHER_LINEART','LongInt').SetInt( 4);
 CL.AddConstantN('DMDITHER_ERRORDIFFUSION','LongInt').SetInt( 5);
 CL.AddConstantN('DMDITHER_RESERVED6','LongInt').SetInt( 6);
 CL.AddConstantN('DMDITHER_RESERVED7','LongInt').SetInt( 7);
 CL.AddConstantN('DMDITHER_RESERVED8','LongInt').SetInt( 8);
 CL.AddConstantN('DMDITHER_RESERVED9','LongInt').SetInt( 9);
 CL.AddConstantN('DMDITHER_GRAYSCALE','LongInt').SetInt( 10);
 CL.AddConstantN('DMDITHER_USER','LongInt').SetInt( 256);
  CL.AddTypeS('PDisplayDeviceA', '^TDisplayDeviceA // will not work');
  CL.AddTypeS('PDisplayDeviceW', '^TDisplayDeviceW // will not work');
  CL.AddTypeS('PDisplayDevice', 'PDisplayDeviceA');
  CL.AddTypeS('_DISPLAY_DEVICE', '_DISPLAY_DEVICEA');
  CL.AddTypeS('TDisplayDeviceA', '_DISPLAY_DEVICEA');
  CL.AddTypeS('TDisplayDeviceW', '_DISPLAY_DEVICEW');
  CL.AddTypeS('TDisplayDevice', 'TDisplayDeviceA');
 CL.AddConstantN('DISPLAY_DEVICE_ATTACHED_TO_DESKTOP','LongWord').SetUInt( $00000001);
 CL.AddConstantN('DISPLAY_DEVICE_MULTI_DRIVER','LongWord').SetUInt( $00000002);
 CL.AddConstantN('DISPLAY_DEVICE_PRIMARY_DEVICE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('DISPLAY_DEVICE_MIRRORING_DRIVER','LongWord').SetUInt( $00000008);
 CL.AddConstantN('DISPLAY_DEVICE_VGA_COMPATIBLE','LongWord').SetUInt( $00000010);
 CL.AddConstantN('RDH_RECTANGLES','LongInt').SetInt( 1);
  CL.AddTypeS('PRgnDataHeader', '^TRgnDataHeader // will not work');
  CL.AddTypeS('_RGNDATAHEADER', 'record dwSize : DWORD; iType : DWORD; nCount :'
   +' DWORD; nRgnSize : DWORD; rcBound : TRect; end');
  CL.AddTypeS('TRgnDataHeader', '_RGNDATAHEADER');
  CL.AddTypeS('RGNDATAHEADER', '_RGNDATAHEADER');
  CL.AddTypeS('PRgnData', '^TRgnData // will not work');
  CL.AddTypeS('TRgnData', '_RGNDATA');
  CL.AddTypeS('RGNDATA', '_RGNDATA');
  CL.AddTypeS('PABC', '^TABC // will not work');
  CL.AddTypeS('_ABC', 'record abcA : Integer; abcB : UINT; abcC : Integer; end');
  CL.AddTypeS('TABC', '_ABC');
  CL.AddTypeS('ABC', '_ABC');
  CL.AddTypeS('PABCFloat', '^TABCFloat // will not work');
  CL.AddTypeS('_ABCFLOAT', 'record abcfA : Single; abcfB : Single; abcfC : Sing'
   +'le; end');
  CL.AddTypeS('TABCFloat', '_ABCFLOAT');
  CL.AddTypeS('ABCFLOAT', '_ABCFLOAT');
  CL.AddTypeS('POutlineTextmetricA', '^TOutlineTextmetricA // will not work');
  CL.AddTypeS('POutlineTextmetricW', '^TOutlineTextmetricW // will not work');
  CL.AddTypeS('POutlineTextmetric', 'POutlineTextmetricA');
  CL.AddTypeS('_OUTLINETEXTMETRICA', 'record otmSize : UINT; otmTextMetrics : T'
   +'TextMetricA; otmFiller : Byte; otmPanoseNumber : TPanose; otmfsSelection :'
   +' UINT; otmfsType : UINT; otmsCharSlopeRise : Integer; otmsCharSlopeRun : I'
   +'nteger; otmItalicAngle : Integer; otmEMSquare : UINT; otmAscent : Integer;'
   +' otmDescent : Integer; otmLineGap : UINT; otmsCapEmHeight : UINT; otmsXHei'
   +'ght : UINT; otmrcFontBox : TRect; otmMacAscent : Integer; otmMacDescent : '
   +'Integer; otmMacLineGap : UINT; otmusMinimumPPEM : UINT; otmptSubscriptSize'
   +' : TPoint; otmptSubscriptOffset : TPoint; otmptSuperscriptSize : TPoint; o'
   +'tmptSuperscriptOffset : TPoint; otmsStrikeoutSize : UINT; otmsStrikeoutPos'
   +'ition : Integer; otmsUnderscoreSize : Integer; otmsUnderscorePosition : In'
   +'teger; otmpFamilyName : PAnsiChar; otmpFaceName : PAnsiChar; otmpStyleName'
   +' : PAnsiChar; otmpFullName : PAnsiChar; end');
  CL.AddTypeS('_OUTLINETEXTMETRICW', 'record otmSize : UINT; otmTextMetrics : T'
   +'TextMetricW; otmFiller : Byte; otmPanoseNumber : TPanose; otmfsSelection :'
   +' UINT; otmfsType : UINT; otmsCharSlopeRise : Integer; otmsCharSlopeRun : I'
   +'nteger; otmItalicAngle : Integer; otmEMSquare : UINT; otmAscent : Integer;'
   +' otmDescent : Integer; otmLineGap : UINT; otmsCapEmHeight : UINT; otmsXHei'
   +'ght : UINT; otmrcFontBox : TRect; otmMacAscent : Integer; otmMacDescent : '
   +'Integer; otmMacLineGap : UINT; otmusMinimumPPEM : UINT; otmptSubscriptSize'
   +' : TPoint; otmptSubscriptOffset : TPoint; otmptSuperscriptSize : TPoint; o'
   +'tmptSuperscriptOffset : TPoint; otmsStrikeoutSize : UINT; otmsStrikeoutPos'
   +'ition : Integer; otmsUnderscoreSize : Integer; otmsUnderscorePosition : In'
   +'teger; otmpFamilyName : PWideChar; otmpFaceName : PWideChar; otmpStyleName'
   +' : PWideChar; otmpFullName : PWideChar; end');
  CL.AddTypeS('_OUTLINETEXTMETRIC', '_OUTLINETEXTMETRICA');
  CL.AddTypeS('TOutlineTextmetricA', '_OUTLINETEXTMETRICA');
  CL.AddTypeS('TOutlineTextmetricW', '_OUTLINETEXTMETRICW');
  CL.AddTypeS('TOutlineTextmetric', 'TOutlineTextmetricA');
  CL.AddTypeS('OUTLINETEXTMETRICA', '_OUTLINETEXTMETRICA');
  CL.AddTypeS('OUTLINETEXTMETRICW', '_OUTLINETEXTMETRICW');
  CL.AddTypeS('OUTLINETEXTMETRIC', 'OUTLINETEXTMETRICA');
  CL.AddTypeS('PPolyTextA', '^TPolyTextA // will not work');
  CL.AddTypeS('PPolyTextW', '^TPolyTextW // will not work');
  CL.AddTypeS('PPolyText', 'PPolyTextA');
  CL.AddTypeS('tagPOLYTEXTA', 'record x : Integer; y : Integer; n : UINT; PAnsi'
   +'Char : PAnsiChar; uiFlags : UINT; rcl : TRect; pdx : PINT; end');
  CL.AddTypeS('tagPOLYTEXTW', 'record x : Integer; y : Integer; n : UINT; PAnsi'
   +'Char : PWideChar; uiFlags : UINT; rcl : TRect; pdx : PINT; end');
  CL.AddTypeS('tagPOLYTEXT', 'tagPOLYTEXTA');
  CL.AddTypeS('TPolyTextA', 'tagPOLYTEXTA');
  CL.AddTypeS('TPolyTextW', 'tagPOLYTEXTW');
  CL.AddTypeS('TPolyText', 'TPolyTextA');
  CL.AddTypeS('POLYTEXTA', 'tagPOLYTEXTA');
  CL.AddTypeS('POLYTEXTW', 'tagPOLYTEXTW');
  CL.AddTypeS('POLYTEXT', 'POLYTEXTA');
  CL.AddTypeS('_FIXED', 'record fract : Word; value : SHORT; end');
  CL.AddTypeS('TFixed', '_FIXED');
  CL.AddTypeS('FIXED', '_FIXED');
  CL.AddTypeS('PMat2', '^TMat2 // will not work');
  CL.AddTypeS('_MAT2', 'record eM11 : TFixed; eM12 : TFixed; eM21 : TFixed; eM2'
   +'2 : TFixed; end');
  CL.AddTypeS('TMat2', '_MAT2');
  CL.AddTypeS('MAT2', '_MAT2');
  CL.AddTypeS('PGlyphMetrics', '^TGlyphMetrics // will not work');
  CL.AddTypeS('_GLYPHMETRICS', 'record gmBlackBoxX : UINT; gmBlackBoxY : UINT; '
   +'gmptGlyphOrigin : TPoint; gmCellIncX : SHORT; gmCellIncY : SHORT; end');
  CL.AddTypeS('TGlyphMetrics', '_GLYPHMETRICS');
  CL.AddTypeS('GLYPHMETRICS', '_GLYPHMETRICS');
 CL.AddConstantN('GGO_METRICS','LongInt').SetInt( 0);
 CL.AddConstantN('GGO_BITMAP','LongInt').SetInt( 1);
 CL.AddConstantN('GGO_NATIVE','LongInt').SetInt( 2);
 CL.AddConstantN('GGO_GRAY2_BITMAP','LongInt').SetInt( 4);
 CL.AddConstantN('GGO_GRAY4_BITMAP','LongInt').SetInt( 5);
 CL.AddConstantN('GGO_GRAY8_BITMAP','LongInt').SetInt( 6);
 CL.AddConstantN('GGO_GLYPH_INDEX','LongWord').SetUInt( $80);
 CL.AddConstantN('TT_POLYGON_TYPE','LongInt').SetInt( 24);
 CL.AddConstantN('TT_PRIM_LINE','LongInt').SetInt( 1);
 CL.AddConstantN('TT_PRIM_QSPLINE','LongInt').SetInt( 2);
  CL.AddTypeS('PPointfx', '^TPointfx // will not work');
  CL.AddTypeS('tagPOINTFX', 'record x : TFixed; y : TFixed; end');
  CL.AddTypeS('TPointfx', 'tagPOINTFX');
  CL.AddTypeS('POINTFX', 'tagPOINTFX');
  CL.AddTypeS('PTTPolyCurve', '^TTTPolyCurve // will not work');
  CL.AddTypeS('TTTPolyCurve', 'tagTTPOLYCURVE');
  CL.AddTypeS('TTPOLYCURVE', 'tagTTPOLYCURVE');
  CL.AddTypeS('PTTPolygonHeader', '^TTTPolygonHeader // will not work');
  CL.AddTypeS('tagTTPOLYGONHEADER', 'record cb : DWORD; dwType : DWORD; pfxStar'
   +'t : TPointFX; end');
  CL.AddTypeS('TTTPolygonHeader', 'tagTTPOLYGONHEADER');
  CL.AddTypeS('TTPOLYGONHEADER', 'tagTTPOLYGONHEADER');
 CL.AddConstantN('GCP_DBCS','LongInt').SetInt( 1);
 CL.AddConstantN('GCP_REORDER','LongInt').SetInt( 2);
 CL.AddConstantN('GCP_USEKERNING','LongInt').SetInt( 8);
 CL.AddConstantN('GCP_GLYPHSHAPE','LongWord').SetUInt( $10);
 CL.AddConstantN('GCP_LIGATE','LongInt').SetInt( 32);
 CL.AddConstantN('GCP_GLYPHINDEXING','LongWord').SetUInt( $0080);
 CL.AddConstantN('GCP_DIACRITIC','LongWord').SetUInt( $100);
 CL.AddConstantN('GCP_KASHIDA','LongWord').SetUInt( $400);
 CL.AddConstantN('GCP_ERROR','LongWord').SetUInt( $8000);
 CL.AddConstantN('FLI_MASK','LongInt').SetInt( 4155);
 CL.AddConstantN('GCP_JUSTIFY','LongWord').SetUInt( $10000);
 CL.AddConstantN('GCP_NODIACRITICS','LongWord').SetUInt( $00020000);
 CL.AddConstantN('FLI_GLYPHS','LongWord').SetUInt( $40000);
 CL.AddConstantN('GCP_CLASSIN','LongWord').SetUInt( $80000);
 CL.AddConstantN('GCP_MAXEXTENT','LongWord').SetUInt( $100000);
 CL.AddConstantN('GCP_JUSTIFYIN','LongWord').SetUInt( $200000);
 CL.AddConstantN('GCP_DISPLAYZWG','LongWord').SetUInt( $400000);
 CL.AddConstantN('GCP_SYMSWAPOFF','LongWord').SetUInt( $800000);
 CL.AddConstantN('GCP_NUMERICOVERRIDE','LongWord').SetUInt( $1000000);
 CL.AddConstantN('GCP_NEUTRALOVERRIDE','LongWord').SetUInt( $2000000);
 CL.AddConstantN('GCP_NUMERICSLATIN','LongWord').SetUInt( $4000000);
 CL.AddConstantN('GCP_NUMERICSLOCAL','LongWord').SetUInt( $8000000);
 CL.AddConstantN('GCPCLASS_LATIN','LongInt').SetInt( 1);
 CL.AddConstantN('GCPCLASS_HEBREW','LongInt').SetInt( 2);
 CL.AddConstantN('GCPCLASS_ARABIC','LongInt').SetInt( 2);
 CL.AddConstantN('GCPCLASS_NEUTRAL','LongInt').SetInt( 3);
 CL.AddConstantN('GCPCLASS_LOCALNUMBER','LongInt').SetInt( 4);
 CL.AddConstantN('GCPCLASS_LATINNUMBER','LongInt').SetInt( 5);
 CL.AddConstantN('GCPCLASS_LATINNUMERICTERMINATOR','LongInt').SetInt( 6);
 CL.AddConstantN('GCPCLASS_LATINNUMERICSEPARATOR','LongInt').SetInt( 7);
 CL.AddConstantN('GCPCLASS_NUMERICSEPARATOR','LongInt').SetInt( 8);
 CL.AddConstantN('GCPCLASS_PREBOUNDRTL','LongWord').SetUInt( $80);
 CL.AddConstantN('GCPCLASS_PREBOUNDLTR','LongWord').SetUInt( $40);
 CL.AddConstantN('GCPCLASS_POSTBOUNDLTR','LongWord').SetUInt( $20);
 CL.AddConstantN('GCPCLASS_POSTBOUNDRTL','LongWord').SetUInt( $10);
 CL.AddConstantN('GCPGLYPH_LINKBEFORE','LongWord').SetUInt( $8000);
 CL.AddConstantN('GCPGLYPH_LINKAFTER','LongWord').SetUInt( $4000);
  CL.AddTypeS('PGCPResultsA', '^TGCPResultsA // will not work');
  CL.AddTypeS('PGCPResultsW', '^TGCPResultsW // will not work');
  CL.AddTypeS('PGCPResults', 'PGCPResultsA');
  CL.AddTypeS('tagGCP_RESULTSA', 'record lStructSize : DWORD; lpOutString : PAn'
   +'siChar; lpOrder : PUINT; lpDx : PINT; lpCaretPos : PINT; lpClass : PAnsiCh'
   +'ar; lpGlyphs : PUINT; nGlyphs : UINT; nMaxFit : Integer; end');
  CL.AddTypeS('tagGCP_RESULTSW', 'record lStructSize : DWORD; lpOutString : PWi'
   +'deChar; lpOrder : PUINT; lpDx : PINT; lpCaretPos : PINT; lpClass : PWideCh'
   +'ar; lpGlyphs : PUINT; nGlyphs : UINT; nMaxFit : Integer; end');
  CL.AddTypeS('tagGCP_RESULTS', 'tagGCP_RESULTSA');
  CL.AddTypeS('TGCPResultsA', 'tagGCP_RESULTSA');
  CL.AddTypeS('TGCPResultsW', 'tagGCP_RESULTSW');
  CL.AddTypeS('TGCPResults', 'TGCPResultsA');
  CL.AddTypeS('GCP_RESULTSA', 'tagGCP_RESULTSA');
  CL.AddTypeS('GCP_RESULTSW', 'tagGCP_RESULTSW');
  CL.AddTypeS('GCP_RESULTS', 'GCP_RESULTSA');
  CL.AddTypeS('PRasterizerStatus', '^TRasterizerStatus // will not work');
  CL.AddTypeS('_RASTERIZER_STATUS', 'record nSize : SHORT; wFlags : SHORT; nLan'
   +'guageID : SHORT; end');
  CL.AddTypeS('TRasterizerStatus', '_RASTERIZER_STATUS');
  CL.AddTypeS('RASTERIZER_STATUS', '_RASTERIZER_STATUS');
 CL.AddConstantN('TT_AVAILABLE','LongInt').SetInt( 1);
 CL.AddConstantN('TT_ENABLED','LongInt').SetInt( 2);
  CL.AddTypeS('PPixelFormatDescriptor', '^TPixelFormatDescriptor // will not wo'
   +'rk');
  CL.AddTypeS('tagPIXELFORMATDESCRIPTOR', 'record nSize : Word; nVersion : Word'
   +'; dwFlags : DWORD; iPixelType : Byte; cColorBits : Byte; cRedBits : Byte; '
   +'cRedShift : Byte; cGreenBits : Byte; cGreenShift : Byte; cBlueBits : Byte;'
   +' cBlueShift : Byte; cAlphaBits : Byte; cAlphaShift : Byte; cAccumBits : By'
   +'te; cAccumRedBits : Byte; cAccumGreenBits : Byte; cAccumBlueBits : Byte; c'
   +'AccumAlphaBits : Byte; cDepthBits : Byte; cStencilBits : Byte; cAuxBuffers'
   +' : Byte; iLayerType : Byte; bReserved : Byte; dwLayerMask : DWORD; dwVisib'
   +'leMask : DWORD; dwDamageMask : DWORD; end');
  CL.AddTypeS('TPixelFormatDescriptor', 'tagPIXELFORMATDESCRIPTOR');
  CL.AddTypeS('PIXELFORMATDESCRIPTOR', 'tagPIXELFORMATDESCRIPTOR');
 CL.AddConstantN('PFD_TYPE_RGBA','LongInt').SetInt( 0);
 CL.AddConstantN('PFD_TYPE_COLORINDEX','LongInt').SetInt( 1);
 CL.AddConstantN('PFD_MAIN_PLANE','LongInt').SetInt( 0);
 CL.AddConstantN('PFD_OVERLAY_PLANE','LongInt').SetInt( 1);
 CL.AddConstantN('PFD_UNDERLAY_PLANE','LongInt').SetInt( LongWord ( - 1 ));
 CL.AddConstantN('PFD_DOUBLEBUFFER','LongWord').SetUInt( $00000001);
 CL.AddConstantN('PFD_STEREO','LongWord').SetUInt( $00000002);
 CL.AddConstantN('PFD_DRAW_TO_WINDOW','LongWord').SetUInt( $00000004);
 CL.AddConstantN('PFD_DRAW_TO_BITMAP','LongWord').SetUInt( $00000008);
 CL.AddConstantN('PFD_SUPPORT_GDI','LongWord').SetUInt( $00000010);
 CL.AddConstantN('PFD_SUPPORT_OPENGL','LongWord').SetUInt( $00000020);
 CL.AddConstantN('PFD_GENERIC_FORMAT','LongWord').SetUInt( $00000040);
 CL.AddConstantN('PFD_NEED_PALETTE','LongWord').SetUInt( $00000080);
 CL.AddConstantN('PFD_NEED_SYSTEM_PALETTE','LongWord').SetUInt( $00000100);
 CL.AddConstantN('PFD_SWAP_EXCHANGE','LongWord').SetUInt( $00000200);
 CL.AddConstantN('PFD_SWAP_COPY','LongWord').SetUInt( $00000400);
 CL.AddConstantN('PFD_SWAP_LAYER_BUFFERS','LongWord').SetUInt( $00000800);
 CL.AddConstantN('PFD_GENERIC_ACCELERATED','LongWord').SetUInt( $00001000);
 CL.AddConstantN('PFD_DEPTH_DONTCARE','LongWord').SetUInt( $20000000);
 CL.AddConstantN('PFD_DOUBLEBUFFER_DONTCARE','LongWord').SetUInt( $40000000);
 CL.AddConstantN('PFD_STEREO_DONTCARE','LongWord').SetUInt( DWORD ( $80000000 ));
  CL.AddTypeS('TFNOldFontEnumProcA', 'TFarProc');
  CL.AddTypeS('TFNOldFontEnumProcW', 'TFarProc');
  CL.AddTypeS('TFNOldFontEnumProc', 'TFNOldFontEnumProcA');
  CL.AddTypeS('TFNGObjEnumProc', 'TFarProc');
  CL.AddTypeS('TFNLineDDAProc', 'TFarProc');
  CL.AddTypeS('TFNFontEnumProcA', 'TFarProc');
  CL.AddTypeS('TFNFontEnumProcW', 'TFarProc');
  CL.AddTypeS('TFNFontEnumProc', 'TFNFontEnumProcA');
 CL.AddDelphiFunction('Function AddFontResource( FileName : PChar) : Integer');
 CL.AddDelphiFunction('Function AddFontResourceA( FileName : PAnsiChar) : Integer');
 CL.AddDelphiFunction('Function AddFontResourceW( FileName : PWideChar) : Integer');
 CL.AddDelphiFunction('Function AnimatePalette( PHandle : HPALETTE; StartIndex, Entries : UINT; Replacement : PPaletteEntry) : BOOL');
 CL.AddDelphiFunction('Function Arc( hDC : HDC; left, top, right, bottom, startX, startY, endX, endY : Integer) : BOOL');
 CL.AddDelphiFunction('Function BitBlt( DestDC : HDC; X, Y, Width, Height : Integer; SrcDC : HDC; XSrc, YSrc : Integer; Rop : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CancelDC( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function Chord( DC : HDC; X1, Y1, X2, Y2, X3, Y3, X4, Y4 : Integer) : BOOL');
 CL.AddDelphiFunction('Function ChoosePixelFormat( DC : HDC; p2 : PPixelFormatDescriptor) : Integer');
 CL.AddDelphiFunction('Function CloseMetaFile( DC : HDC) : HMETAFILE');
 CL.AddDelphiFunction('Function CombineRgn( p1, p2, p3 : HRGN; p4 : Integer) : Integer');
 CL.AddDelphiFunction('Function CopyMetaFile( p1 : HMETAFILE; p2 : PChar) : HMETAFILE');
 CL.AddDelphiFunction('Function CopyMetaFileA( p1 : HMETAFILE; p2 : PAnsiChar) : HMETAFILE');
 CL.AddDelphiFunction('Function CopyMetaFileW( p1 : HMETAFILE; p2 : PWideChar) : HMETAFILE');
 CL.AddDelphiFunction('Function CreateBitmap( Width, Height : Integer; Planes, BitCount : Longint; Bits : Pointer) : HBITMAP');
 CL.AddDelphiFunction('Function CreateBitmapIndirect( const p1 : TBitmap) : HBITMAP');
 CL.AddDelphiFunction('Function CreateBrushIndirect( const p1 : TLogBrush) : HBRUSH');
 CL.AddDelphiFunction('Function CreateCompatibleBitmap( DC : HDC; Width, Height : Integer) : HBITMAP');
 CL.AddDelphiFunction('Function CreateDiscardableBitmap( DC : HDC; p2, p3 : Integer) : HBITMAP');
 CL.AddDelphiFunction('Function CreateCompatibleDC( DC : HDC) : HDC');
 CL.AddDelphiFunction('Function CreateDC( lpszDriver, lpszDevice, lpszOutput : PChar; lpdvmInit : PDeviceMode) : HDC');
 CL.AddDelphiFunction('Function CreateDCA( lpszDriver, lpszDevice, lpszOutput : PAnsiChar; lpdvmInit : PDeviceModeA) : HDC');
 CL.AddDelphiFunction('Function CreateDCW( lpszDriver, lpszDevice, lpszOutput : PWideChar; lpdvmInit : PDeviceModeW) : HDC');
 CL.AddDelphiFunction('Function CreateDIBitmap( DC : HDC; var InfoHeader : TBitmapInfoHeader; dwUsage : DWORD; InitBits : PChar; var InitInfo : TBitmapInfo; wUsage : UINT) : HBITMAP');
 CL.AddDelphiFunction('Function CreateDIBPatternBrush( p1 : HGLOBAL; p2 : UINT) : HBRUSH');
 CL.AddDelphiFunction('Function CreateDIBPatternBrushPt( const p1 : Pointer; p2 : UINT) : HBRUSH');
 CL.AddDelphiFunction('Function CreateEllipticRgn( p1, p2, p3, p4 : Integer) : HRGN');
 CL.AddDelphiFunction('Function CreateEllipticRgnIndirect( const p1 : TRect) : HRGN');
 CL.AddDelphiFunction('Function CreateFontIndirect( const p1 : TLogFont) : HFONT');
 CL.AddDelphiFunction('Function CreateFontIndirectA( const p1 : TLogFontA) : HFONT');
 CL.AddDelphiFunction('Function CreateFontIndirectW( const p1 : TLogFontW) : HFONT');
 CL.AddDelphiFunction('Function CreateFont( nHeight, nWidth, nEscapement, nOrientaion, fnWeight : Integer; fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily : DWORD; lpszFace : PChar) : HFONT');
 CL.AddDelphiFunction('Function CreateFontA( nHeight, nWidth, nEscapement, nOrientaion, fnWeight : Integer; fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily : DWORD; lpszFace : PAnsiChar) : HFONT');
 CL.AddDelphiFunction('Function CreateFontW( nHeight, nWidth, nEscapement, nOrientaion, fnWeight : Integer; fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily : DWORD; lpszFace : PWideChar) : HFONT');
 CL.AddDelphiFunction('Function CreateHatchBrush( p1 : Integer; p2 : COLORREF) : HBRUSH');
 CL.AddDelphiFunction('Function CreateIC( lpszDriver, lpszDevice, lpszOutput : PChar; lpdvmInit : PDeviceMode) : HDC');
 CL.AddDelphiFunction('Function CreateICA( lpszDriver, lpszDevice, lpszOutput : PAnsiChar; lpdvmInit : PDeviceModeA) : HDC');
 CL.AddDelphiFunction('Function CreateICW( lpszDriver, lpszDevice, lpszOutput : PWideChar; lpdvmInit : PDeviceModeW) : HDC');
 CL.AddDelphiFunction('Function CreateMetaFile( p1 : PChar) : HDC');
 CL.AddDelphiFunction('Function CreateMetaFileA( p1 : PAnsiChar) : HDC');
 CL.AddDelphiFunction('Function CreateMetaFileW( p1 : PWideChar) : HDC');
 CL.AddDelphiFunction('Function CreatePalette( const LogPalette : TLogPalette) : HPalette');
 CL.AddDelphiFunction('Function CreatePen( Style, Width : Integer; Color : COLORREF) : HPEN');
 CL.AddDelphiFunction('Function CreatePenIndirect( const LogPen : TLogPen) : HPEN');
 CL.AddDelphiFunction('Function CreatePatternBrush( Bitmap : HBITMAP) : HBRUSH');
 CL.AddDelphiFunction('Function CreateRectRgn( p1, p2, p3, p4 : Integer) : HRGN');
 CL.AddDelphiFunction('Function CreateRectRgnIndirect( const p1 : TRect) : HRGN');
 CL.AddDelphiFunction('Function CreateRoundRectRgn( p1, p2, p3, p4, p5, p6 : Integer) : HRGN');
 CL.AddDelphiFunction('Function CreateScalableFontResource( p1 : DWORD; p2, p3, p4 : PChar) : BOOL');
 CL.AddDelphiFunction('Function CreateScalableFontResourceA( p1 : DWORD; p2, p3, p4 : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function CreateScalableFontResourceW( p1 : DWORD; p2, p3, p4 : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function CreateSolidBrush( p1 : COLORREF) : HBRUSH');
 CL.AddDelphiFunction('Function DeleteDC( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function DeleteMetaFile( p1 : HMETAFILE) : BOOL');
 CL.AddDelphiFunction('Function DeleteObject( p1 : HGDIOBJ) : BOOL');
 CL.AddDelphiFunction('Function DescribePixelFormat( DC : HDC; p2 : Integer; p3 : UINT; var p4 : TPixelFormatDescriptor) : BOOL');
  CL.AddTypeS('TFNDevMode', 'TFarProc');
  CL.AddTypeS('TFNDevCaps', 'TFarProc');
 CL.AddConstantN('DM_UPDATE','LongInt').SetInt( 1);
 CL.AddConstantN('DM_COPY','LongInt').SetInt( 2);
 CL.AddConstantN('DM_PROMPT','LongInt').SetInt( 4);
 CL.AddConstantN('DM_MODIFY','LongInt').SetInt( 8);
 CL.AddConstantN('DM_IN_BUFFER','').SetString( DM_MODIFY);
 CL.AddConstantN('DM_IN_PROMPT','').SetString( DM_PROMPT);
 CL.AddConstantN('DM_OUT_BUFFER','').SetString( DM_COPY);
 CL.AddConstantN('DM_OUT_DEFAULT','').SetString( DM_UPDATE);
 CL.AddConstantN('DC_FIELDS','LongInt').SetInt( 1);
 CL.AddConstantN('DC_PAPERS','LongInt').SetInt( 2);
 CL.AddConstantN('DC_PAPERSIZE','LongInt').SetInt( 3);
 CL.AddConstantN('DC_MINEXTENT','LongInt').SetInt( 4);
 CL.AddConstantN('DC_MAXEXTENT','LongInt').SetInt( 5);
 CL.AddConstantN('DC_BINS','LongInt').SetInt( 6);
 CL.AddConstantN('DC_DUPLEX','LongInt').SetInt( 7);
 CL.AddConstantN('DC_SIZE','LongInt').SetInt( 8);
 CL.AddConstantN('DC_EXTRA','LongInt').SetInt( 9);
 CL.AddConstantN('DC_VERSION','LongInt').SetInt( 10);
 CL.AddConstantN('DC_DRIVER','LongInt').SetInt( 11);
 CL.AddConstantN('DC_BINNAMES','LongInt').SetInt( 12);
 CL.AddConstantN('DC_ENUMRESOLUTIONS','LongInt').SetInt( 13);
 CL.AddConstantN('DC_FILEDEPENDENCIES','LongInt').SetInt( 14);
 CL.AddConstantN('DC_TRUETYPE','LongInt').SetInt( 15);
 CL.AddConstantN('DC_PAPERNAMES','LongInt').SetInt( 16);
 CL.AddConstantN('DC_ORIENTATION','LongInt').SetInt( 17);
 CL.AddConstantN('DC_COPIES','LongInt').SetInt( 18);
 CL.AddConstantN('DC_BINADJUST','LongInt').SetInt( 19);
 CL.AddConstantN('DC_EMF_COMPLIANT','LongInt').SetInt( 20);
 CL.AddConstantN('DC_DATATYPE_PRODUCED','LongInt').SetInt( 21);
 CL.AddConstantN('DC_COLLATE','LongInt').SetInt( 22);
 CL.AddConstantN('DC_MANUFACTURER','LongInt').SetInt( 23);
 CL.AddConstantN('DC_MODEL','LongInt').SetInt( 24);
 CL.AddConstantN('DC_COLORDEVICE','LongInt').SetInt( 23);
 CL.AddConstantN('DC_NUP','LongInt').SetInt( 24);
 CL.AddConstantN('DC_PERSONALITY','LongInt').SetInt( 25);
 CL.AddConstantN('DC_PRINTRATE','LongInt').SetInt( 26);
 CL.AddConstantN('DC_PRINTRATEUNIT','LongInt').SetInt( 27);
 CL.AddConstantN('PRINTRATEUNIT_PPM','LongInt').SetInt( 1);
 CL.AddConstantN('PRINTRATEUNIT_CPS','LongInt').SetInt( 2);
 CL.AddConstantN('PRINTRATEUNIT_LPM','LongInt').SetInt( 3);
 CL.AddConstantN('PRINTRATEUNIT_IPM','LongInt').SetInt( 4);
 CL.AddConstantN('DC_PRINTERMEM','LongInt').SetInt( 28);
 CL.AddConstantN('DC_MEDIAREADY','LongInt').SetInt( 29);
 CL.AddConstantN('DCTT_BITMAP','LongInt').SetInt( 1);
 CL.AddConstantN('DCTT_DOWNLOAD','LongInt').SetInt( 2);
 CL.AddConstantN('DCTT_SUBDEV','LongInt').SetInt( 4);
 CL.AddConstantN('DCTT_DOWNLOAD_OUTLINE','LongInt').SetInt( 8);
 CL.AddConstantN('DCBA_FACEUPNONE','LongInt').SetInt( 0);
 CL.AddConstantN('DCBA_FACEUPCENTER','LongInt').SetInt( 1);
 CL.AddConstantN('DCBA_FACEUPLEFT','LongInt').SetInt( 2);
 CL.AddConstantN('DCBA_FACEUPRIGHT','LongInt').SetInt( 3);
 CL.AddConstantN('DCBA_FACEDOWNNONE','LongWord').SetUInt( $100);
 CL.AddConstantN('DCBA_FACEDOWNCENTER','LongInt').SetInt( 257);
 CL.AddConstantN('DCBA_FACEDOWNLEFT','LongInt').SetInt( 258);
 CL.AddConstantN('DCBA_FACEDOWNRIGHT','LongInt').SetInt( 259);
 CL.AddDelphiFunction('Function DeviceCapabilities( pDriverName, pDeviceName, pPort : PChar; iIndex : Integer; pOutput : PChar; DevMode : PDeviceMode) : Integer');
 CL.AddDelphiFunction('Function DeviceCapabilitiesA( pDriverName, pDeviceName, pPort : PAnsiChar; iIndex : Integer; pOutput : PAnsiChar; DevMode : PDeviceModeA) : Integer');
 CL.AddDelphiFunction('Function DeviceCapabilitiesW( pDriverName, pDeviceName, pPort : PWideChar; iIndex : Integer; pOutput : PWideChar; DevMode : PDeviceModeW) : Integer');
 CL.AddDelphiFunction('Function DrawEscape( DC : HDC; p2, p3 : Integer; p4 : LPCSTR) : BOOL');
 CL.AddDelphiFunction('Function Ellipse( DC : HDC; X1, Y1, X2, Y2 : Integer) : BOOL');
 CL.AddDelphiFunction('Function EnumFontFamiliesEx( DC : HDC; var p2 : TLogFont; p3 : TFNFontEnumProc; p4 : LPARAM; p5 : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumFontFamiliesExA( DC : HDC; var p2 : TLogFontA; p3 : TFNFontEnumProcA; p4 : LPARAM; p5 : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumFontFamiliesExW( DC : HDC; var p2 : TLogFontW; p3 : TFNFontEnumProcW; p4 : LPARAM; p5 : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumFontFamilies( DC : HDC; p2 : PChar; p3 : TFNFontEnumProc; p4 : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumFontFamiliesA( DC : HDC; p2 : PAnsiChar; p3 : TFNFontEnumProcA; p4 : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumFontFamiliesW( DC : HDC; p2 : PWideChar; p3 : TFNFontEnumProcW; p4 : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumFonts( DC : HDC; lpszFace : PChar; fntenmprc : TFNFontEnumProc; lpszData : PChar) : Integer');
 CL.AddDelphiFunction('Function EnumFontsA( DC : HDC; lpszFace : PAnsiChar; fntenmprc : TFNFontEnumProcA; lpszData : PChar) : Integer');
 CL.AddDelphiFunction('Function EnumFontsW( DC : HDC; lpszFace : PWideChar; fntenmprc : TFNFontEnumProcW; lpszData : PChar) : Integer');
 CL.AddDelphiFunction('Function EnumObjects( DC : HDC; p2 : Integer; p3 : TFNGObjEnumProc; p4 : LPARAM) : Integer');
 CL.AddDelphiFunction('Function EqualRgn( p1, p2 : HRGN) : BOOL');
 CL.AddDelphiFunction('Function Escape( DC : HDC; p2, p3 : Integer; p4 : LPCSTR; p5 : Pointer) : Integer');
 CL.AddDelphiFunction('Function ExtEscape( DC : HDC; p2, p3 : Integer; const p4 : LPCSTR; p5 : Integer; p6 : LPSTR) : Integer');
 CL.AddDelphiFunction('Function ExcludeClipRect( DC : HDC; LeftRect, TopRect, RightRect, BottomRect : Integer) : Integer');
 CL.AddDelphiFunction('Function ExtCreateRegion( XForm : PXForm; Count : DWORD; const RgnData : TRgnData) : HRGN');
 CL.AddDelphiFunction('Function ExtFloodFill( DC : HDC; X, Y : Integer; Color : COLORREF; FillType : UINT) : BOOL');
 CL.AddDelphiFunction('Function FillRgn( DC : HDC; hrgn : HRGN; hbr : HBRUSH) : BOOL');
 CL.AddDelphiFunction('Function FloodFill( DC : HDC; nXStart, nYStart : Integer; crFill : COLORREF) : BOOL');
 CL.AddDelphiFunction('Function FrameRgn( DC : HDC; hrgn : HRGN; hbr : HBRUSH; Width, Height : Integer) : BOOL');
 CL.AddDelphiFunction('Function GetROP2( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetAspectRatioFilterEx( DC : HDC; var AspectRatio : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetBkColor( hDC : HDC) : COLORREF');
 CL.AddDelphiFunction('Function GetDCBrushColor( DC : HDC) : COLORREF');
 CL.AddDelphiFunction('Function GetDCPenColor( DC : HDC) : COLORREF');
 CL.AddDelphiFunction('Function GetBkMode( hDC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetBitmapBits( Bitmap : HBITMAP; Count : Longint; Bits : Pointer) : Longint');
 CL.AddDelphiFunction('Function GetBitmapDimensionEx( Bitmap : HBITMAP; var Dimension : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetBoundsRect( DC : HDC; var Bounds : TRect; Flags : UINT) : UINT');
 CL.AddDelphiFunction('Function GetBrushOrgEx( DC : HDC; var lppt : TPoint) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidth( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidthA( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidthW( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidth32( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidth32A( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidth32W( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidthFloat( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidthFloatA( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidthFloatW( DC : HDC; FirstChar, LastChar : UINT; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharABCWidths( DC : HDC; FirstChar, LastChar : UINT; const ABCStructs) : BOOL');
 CL.AddDelphiFunction('Function GetCharABCWidthsA( DC : HDC; FirstChar, LastChar : UINT; const ABCStructs) : BOOL');
 CL.AddDelphiFunction('Function GetCharABCWidthsW( DC : HDC; FirstChar, LastChar : UINT; const ABCStructs) : BOOL');
 CL.AddDelphiFunction('Function GetCharABCWidthsFloat( DC : HDC; FirstChar, LastChar : UINT; const ABCFloatSturcts) : BOOL');
 CL.AddDelphiFunction('Function GetCharABCWidthsFloatA( DC : HDC; FirstChar, LastChar : UINT; const ABCFloatSturcts) : BOOL');
 CL.AddDelphiFunction('Function GetCharABCWidthsFloatW( DC : HDC; FirstChar, LastChar : UINT; const ABCFloatSturcts) : BOOL');
 CL.AddDelphiFunction('Function GetClipBox( DC : HDC; var Rect : TRect) : Integer');
 CL.AddDelphiFunction('Function GetClipRgn( DC : HDC; rgn : HRGN) : Integer');
 CL.AddDelphiFunction('Function GetMetaRgn( DC : HDC; rgn : HRGN) : Integer');
 CL.AddDelphiFunction('Function GetCurrentObject( DC : HDC; p2 : UINT) : HGDIOBJ');
 CL.AddDelphiFunction('Function GetCurrentPositionEx( DC : HDC; Point : PPoint) : BOOL');
 CL.AddDelphiFunction('Function GetDeviceCaps( DC : HDC; Index : Integer) : Integer');
 CL.AddDelphiFunction('Function GetDIBits( DC : HDC; Bitmap : HBitmap; StartScan, NumScans : UINT; Bits : Pointer; var BitInfo : TBitmapInfo; Usage : UINT) : Integer');
 CL.AddDelphiFunction('Function GetFontData( DC : HDC; p2, p3 : DWORD; p4 : Pointer; p5 : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetGlyphOutline( DC : HDC; uChar, uFormat : UINT; const lpgm : TGlyphMetrics; cbBuffer : DWORD; lpvBuffer : Pointer; const lpmat2 : TMat2) : DWORD');
 CL.AddDelphiFunction('Function GetGlyphOutlineA( DC : HDC; uChar, uFormat : UINT; const lpgm : TGlyphMetrics; cbBuffer : DWORD; lpvBuffer : Pointer; const lpmat2 : TMat2) : DWORD');
 CL.AddDelphiFunction('Function GetGlyphOutlineW( DC : HDC; uChar, uFormat : UINT; const lpgm : TGlyphMetrics; cbBuffer : DWORD; lpvBuffer : Pointer; const lpmat2 : TMat2) : DWORD');
 CL.AddDelphiFunction('Function GetGraphicsMode( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetMapMode( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetMetaFileBitsEx( p1 : HMETAFILE; p2 : UINT; p3 : Pointer) : UINT');
 CL.AddDelphiFunction('Function GetMetaFile( p1 : PChar) : HMETAFILE');
 CL.AddDelphiFunction('Function GetMetaFileA( p1 : PAnsiChar) : HMETAFILE');
 CL.AddDelphiFunction('Function GetMetaFileW( p1 : PWideChar) : HMETAFILE');
 CL.AddDelphiFunction('Function GetNearestColor( DC : HDC; p2 : COLORREF) : COLORREF');
 CL.AddDelphiFunction('Function GetNearestPaletteIndex( p1 : HPALETTE; p2 : COLORREF) : UINT');
 CL.AddDelphiFunction('Function GetObjectType( h : HGDIOBJ) : DWORD');
 CL.AddDelphiFunction('Function GetOutlineTextMetrics( DC : HDC; p2 : UINT; OTMetricStructs : Pointer) : UINT');
 CL.AddDelphiFunction('Function GetOutlineTextMetricsA( DC : HDC; p2 : UINT; OTMetricStructs : Pointer) : UINT');
 CL.AddDelphiFunction('Function GetOutlineTextMetricsW( DC : HDC; p2 : UINT; OTMetricStructs : Pointer) : UINT');
 CL.AddDelphiFunction('Function GetPaletteEntries( Palette : HPALETTE; StartIndex, NumEntries : UINT; var PaletteEntries) : UINT');
 CL.AddDelphiFunction('Function GetPixel( DC : HDC; X, Y : Integer) : COLORREF');
 CL.AddDelphiFunction('Function GetPixelFormat( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetPolyFillMode( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetRasterizerCaps( var p1 : TRasterizerStatus; p2 : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetRegionData( RGN : HRGN; p2 : DWORD; p3 : PRgnData) : DWORD');
 CL.AddDelphiFunction('Function GetRgnBox( RGN : HRGN; var p2 : TRect) : Integer');
 CL.AddDelphiFunction('Function GetStockObject( Index : Integer) : HGDIOBJ');
 CL.AddDelphiFunction('Function GetStretchBltMode( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetSystemPaletteEntries( DC : HDC; StartIndex, NumEntries : UINT; var PaletteEntries) : UINT');
 CL.AddDelphiFunction('Function GetSystemPaletteUse( DC : HDC) : UINT');
 CL.AddDelphiFunction('Function GetTextCharacterExtra( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetTextAlign( DC : HDC) : UINT');
 CL.AddDelphiFunction('Function GetTextColor( DC : HDC) : COLORREF');
 CL.AddDelphiFunction('Function GetTextExtentPoint( DC : HDC; Str : PChar; Count : Integer; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentPointA( DC : HDC; Str : PAnsiChar; Count : Integer; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentPointW( DC : HDC; Str : PWideChar; Count : Integer; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentPoint32( DC : HDC; Str : PChar; Count : Integer; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentPoint32A( DC : HDC; Str : PAnsiChar; Count : Integer; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentPoint32W( DC : HDC; Str : PWideChar; Count : Integer; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentExPoint( DC : HDC; p2 : PChar; p3, p4 : Integer; p5, p6 : PInteger; var p7 : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentExPointA( DC : HDC; p2 : PAnsiChar; p3, p4 : Integer; p5, p6 : PInteger; var p7 : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentExPointW( DC : HDC; p2 : PWideChar; p3, p4 : Integer; p5, p6 : PInteger; var p7 : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextCharset( hdc : HDC) : Integer');
 CL.AddDelphiFunction('Function GetTextCharsetInfo( hdc : HDC; lpSig : PFontSignature; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function TranslateCharsetInfo( var lpSrc : DWORD; var lpCs : TCharsetInfo; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetFontLanguageInfo( DC : HDC) : DWORD');
 CL.AddDelphiFunction('Function GetCharacterPlacement( DC : HDC; p2 : PChar; p3, p4 : Integer; var p5 : TGCPResults; p6 : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetCharacterPlacementA( DC : HDC; p2 : PAnsiChar; p3, p4 : Integer; var p5 : TGCPResultsA; p6 : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetCharacterPlacementW( DC : HDC; p2 : PWideChar; p3, p4 : Integer; var p5 : TGCPResultsW; p6 : DWORD) : DWORD');
  CL.AddTypeS('PWCRange', '^TWCRange // will not work');
  CL.AddTypeS('tagWCRANGE', 'record wcLow : WCHAR; cGlyphs : SHORT; end');
  CL.AddTypeS('TWCRange', 'tagWCRANGE');
  CL.AddTypeS('PGlyphSet', '^TGlyphSet // will not work');
  CL.AddTypeS('TGlyphSet', 'tagGLYPHSET');
 CL.AddConstantN('GS_8BIT_INDICES','LongInt').SetInt( 1);
 CL.AddConstantN('GGI_MARK_NONEXISTING_GLYPHS','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function GetFontUnicodeRanges( DC : HDC; lpgs : PGlyphSet) : DWORD');
 CL.AddDelphiFunction('Function GetGlyphIndices( DC : HDC; p2 : PChar; p3 : Integer; p4 : PWORD; p5 : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetGlyphIndicesA( DC : HDC; p2 : PAnsiChar; p3 : Integer; p4 : PWORD; p5 : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetGlyphIndicesW( DC : HDC; p2 : PWideChar; p3 : Integer; p4 : PWORD; p5 : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetTextExtentPointI( DC : HDC; p2 : PWORD; p3 : Integer; var p4 : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetTextExtentExPointI( DC : HDC; p2 : PWORD; p3, p4 : Integer; p5, p6 : PINT; var p7 : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetCharWidthI( DC : HDC; p2, p3 : UINT; p4 : PWORD; const Widths) : BOOL');
 CL.AddDelphiFunction('Function GetCharABCWidthsI( DC : HDC; p2, p3 : UINT; p4 : PWORD; const Widths) : BOOL');
 CL.AddConstantN('MM_MAX_NUMAXES','LongInt').SetInt( 16);
  CL.AddTypeS('PDesignVector', '^TDesignVector // will not work');
  CL.AddTypeS('TDesignVector', 'tagDESIGNVECTOR');
 CL.AddDelphiFunction('Function AddFontResourceEx( p1 : PChar; p2 : DWORD; p3 : PDesignVector) : Integer');
 CL.AddDelphiFunction('Function AddFontResourceExA( p1 : PAnsiChar; p2 : DWORD; p3 : PDesignVector) : Integer');
 CL.AddDelphiFunction('Function AddFontResourceExW( p1 : PWideChar; p2 : DWORD; p3 : PDesignVector) : Integer');
 CL.AddDelphiFunction('Function RemoveFontResourceEx( p1 : PChar; p2 : DWORD; p3 : PDesignVector) : BOOL');
 CL.AddDelphiFunction('Function RemoveFontResourceExA( p1 : PAnsiChar; p2 : DWORD; p3 : PDesignVector) : BOOL');
 CL.AddDelphiFunction('Function RemoveFontResourceExW( p1 : PWideChar; p2 : DWORD; p3 : PDesignVector) : BOOL');
 CL.AddDelphiFunction('Function AddFontMemResourceEx( p1 : Pointer; p2 : DWORD; p3 : PDesignVector; p4 : LPDWORD) : THandle');
 CL.AddDelphiFunction('Function RemoveFontMemResourceEx( p1 : THandle) : BOOL');
 CL.AddConstantN('FR_PRIVATE','LongWord').SetUInt( $10);
 CL.AddConstantN('FR_NOT_ENUM','LongWord').SetUInt( $20);
 CL.AddConstantN('MM_MAX_AXES_NAMELEN','LongInt').SetInt( 16);
  CL.AddTypeS('PAxisInfoA', '^TAxisInfoA // will not work');
  CL.AddTypeS('TAxisInfoA', 'tagAXISINFOA');
  CL.AddTypeS('PAxisInfoW', '^TAxisInfoW // will not work');
  CL.AddTypeS('TAxisInfoW', 'tagAXISINFOW');
  CL.AddTypeS('PAxisInfo', 'PAxisInfoA');
  CL.AddTypeS('PAxesListA', '^TAxesListA // will not work');
  CL.AddTypeS('TAxesListA', 'tagAXESLISTA');
  CL.AddTypeS('PAxesListW', '^TAxesListW // will not work');
  CL.AddTypeS('TAxesListW', 'tagAXESLISTW');
  CL.AddTypeS('PAxesList', 'PAxesListA');
  CL.AddTypeS('PEnumLogFontExDVA', '^TEnumLogFontExDVA // will not work');
  CL.AddTypeS('tagENUMLOGFONTEXDVA', 'record elfEnumLogfontEx : TEnumLogFontExA'
   +'; elfDesignVector : TDesignVector; end');
  CL.AddTypeS('TEnumLogFontExDVA', 'tagENUMLOGFONTEXDVA');
  CL.AddTypeS('PEnumLogFontExDVW', '^TEnumLogFontExDVW // will not work');
  CL.AddTypeS('tagENUMLOGFONTEXDVW', 'record elfEnumLogfontEx : TEnumLogFontExW'
   +'; elfDesignVector : TDesignVector; end');
  CL.AddTypeS('TEnumLogFontExDVW', 'tagENUMLOGFONTEXDVW');
  CL.AddTypeS('PEnumLogFontExDV', 'PEnumLogFontExDVA');
 CL.AddDelphiFunction('Function CreateFontIndirectEx( const p1 : PEnumLogFontExDV) : HFONT');
 CL.AddDelphiFunction('Function CreateFontIndirectExA( const p1 : PEnumLogFontExDVA) : HFONT');
 CL.AddDelphiFunction('Function CreateFontIndirectExW( const p1 : PEnumLogFontExDVW) : HFONT');
  CL.AddTypeS('PEnumTextMetricA', '^TEnumTextMetricA // will not work');
  CL.AddTypeS('tagENUMTEXTMETRICA', 'record etmNewTextMetricEx : TNewTextMetric'
   +'ExA; etmAxesList : TAxesListA; end');
  CL.AddTypeS('TEnumTextMetricA', 'tagENUMTEXTMETRICA');
  CL.AddTypeS('PEnumTextMetricW', '^TEnumTextMetricW // will not work');
  CL.AddTypeS('tagENUMTEXTMETRICW', 'record etmNewTextMetricEx : TNewTextMetric'
   +'ExW; etmAxesList : TAxesListW; end');
  CL.AddTypeS('TEnumTextMetricW', 'tagENUMTEXTMETRICW');
  CL.AddTypeS('PEnumTextMetric', 'PEnumTextMetricA');
 CL.AddDelphiFunction('Function GetViewportExtEx( DC : HDC; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetViewportOrgEx( DC : HDC; var Point : TPoint) : BOOL');
 CL.AddDelphiFunction('Function GetWindowExtEx( DC : HDC; var Size : TSize) : BOOL');
 CL.AddDelphiFunction('Function GetWindowOrgEx( DC : HDC; var Point : TPoint) : BOOL');
 CL.AddDelphiFunction('Function IntersectClipRect( DC : HDC; X1, Y1, X2, Y2 : Integer) : Integer');
 CL.AddDelphiFunction('Function InvertRgn( DC : HDC; p2 : HRGN) : BOOL');
 CL.AddDelphiFunction('Function LineDDA( XStart, YStart, XEnd, YEnd : Integer; LineFunc : TFNLineDDAProc; Data : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function LineTo( DC : HDC; X, Y : Integer) : BOOL');
 CL.AddDelphiFunction('Function MaskBlt( DestDC : HDC; XDest, YDest, Width, Height : Integer; SrcDC : HDC; XScr, YScr : Integer; Mask : HBITMAP; xMask, yMask : Integer; Rop : DWORD) : BOOL');
 CL.AddDelphiFunction('Function PlgBlt( DestDC : HDC; const PointsArray, SrcDC : HDC; XSrc, YSrc, Width, Height : Integer; Mask : HBITMAP; xMask, yMask : Integer) : BOOL');
 CL.AddDelphiFunction('Function OffsetClipRgn( DC : HDC; XOffset, YOffset : Integer) : Integer');
 CL.AddDelphiFunction('Function OffsetRgn( RGN : HRGN; XOffset, YOffset : Integer) : Integer');
 CL.AddDelphiFunction('Function PatBlt( DC : HDC; X, Y, Width, Height : Integer; Rop : DWORD) : BOOL');
 CL.AddDelphiFunction('Function Pie( DC : HDC; X1, Y1, X2, Y2, X3, Y3, X4, Y4 : Integer) : BOOL');
 CL.AddDelphiFunction('Function PlayMetaFile( DC : HDC; MF : HMETAFILE) : BOOL');
 CL.AddDelphiFunction('Function PaintRgn( DC : HDC; RGN : HRGN) : BOOL');
 CL.AddDelphiFunction('Function PtInRegion( RGN : HRGN; X, Y : Integer) : BOOL');
 CL.AddDelphiFunction('Function PtVisible( DC : HDC; X, Y : Integer) : BOOL');
 CL.AddDelphiFunction('Function RectInRegion( RGN : HRGN; const Rect : TRect) : BOOL');
 CL.AddDelphiFunction('Function RectVisible( DC : HDC; const Rect : TRect) : BOOL');
 CL.AddDelphiFunction('Function Rectangle( DC : HDC; X1, Y1, X2, Y2 : Integer) : BOOL');
 CL.AddDelphiFunction('Function RestoreDC( DC : HDC; SavedDC : Integer) : BOOL');
 CL.AddDelphiFunction('Function ResetDC( DC : HDC; const InitData : TDeviceMode) : HDC');
 CL.AddDelphiFunction('Function ResetDCA( DC : HDC; const InitData : TDeviceModeA) : HDC');
 CL.AddDelphiFunction('Function ResetDCW( DC : HDC; const InitData : TDeviceModeW) : HDC');
 CL.AddDelphiFunction('Function RealizePalette( DC : HDC) : UINT');
 CL.AddDelphiFunction('Function RemoveFontResource( FileName : PChar) : BOOL');
 CL.AddDelphiFunction('Function RemoveFontResourceA( FileName : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function RemoveFontResourceW( FileName : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function RoundRect( DC : HDC; X1, Y1, X2, Y2, X3, Y3 : Integer) : BOOL');
 CL.AddDelphiFunction('Function ResizePalette( Palette : HPALETTE; Entries : UINT) : BOOL');
 CL.AddDelphiFunction('Function SaveDC( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function SelectClipRgn( DC : HDC; Region : HRGN) : Integer');
 CL.AddDelphiFunction('Function ExtSelectClipRgn( DC : HDC; Region : HRGN; Mode : Integer) : Integer');
 CL.AddDelphiFunction('Function SetMetaRgn( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function SelectObject( DC : HDC; p2 : HGDIOBJ) : HGDIOBJ');
 CL.AddDelphiFunction('Function SelectPalette( DC : HDC; Palette : HPALETTE; ForceBackground : Bool) : HPALETTE');
 CL.AddDelphiFunction('Function SetBkColor( DC : HDC; Color : COLORREF) : COLORREF');
 CL.AddDelphiFunction('Function SetDCBrushColor( DC : HDC; Color : COLORREF) : COLORREF');
 CL.AddDelphiFunction('Function SetDCPenColor( DC : HDC; Color : COLORREF) : COLORREF');
 CL.AddDelphiFunction('Function SetBkMode( DC : HDC; BkMode : Integer) : Integer');
 CL.AddDelphiFunction('Function SetBitmapBits( p1 : HBITMAP; p2 : DWORD; bits : Pointer) : Longint');
 CL.AddDelphiFunction('Function SetBoundsRect( DC : HDC; p2 : PRect; p3 : UINT) : UINT');
 CL.AddDelphiFunction('Function SetDIBits( DC : HDC; Bitmap : HBITMAP; StartScan, NumScans : UINT; Bits : Pointer; var BitsInfo : TBitmapInfo; Usage : UINT) : Integer');
 CL.AddDelphiFunction('Function SetDIBitsToDevice( DC : HDC; DestX, DestY : Integer; Width, Height : DWORD; SrcX, SrcY : Integer; nStartScan, NumScans : UINT; Bits : Pointer; var BitsInfo : TBitmapInfo; Usage : UINT) : Integer');
 CL.AddDelphiFunction('Function SetMapperFlags( DC : HDC; Flag : DWORD) : DWORD');
 CL.AddDelphiFunction('Function SetGraphicsMode( hdc : HDC; iMode : Integer) : Integer');
 CL.AddDelphiFunction('Function SetMapMode( DC : HDC; p2 : Integer) : Integer');
 CL.AddDelphiFunction('Function SetMetaFileBitsEx( Size : UINT; const Data : PChar) : HMETAFILE');
 CL.AddDelphiFunction('Function SetPaletteEntries( Palette : HPALETTE; StartIndex, NumEntries : UINT; var PaletteEntries) : UINT');
 CL.AddDelphiFunction('Function SetPixel( DC : HDC; X, Y : Integer; Color : COLORREF) : COLORREF');
 CL.AddDelphiFunction('Function SetPixelV( DC : HDC; X, Y : Integer; Color : COLORREF) : BOOL');
 CL.AddDelphiFunction('Function SetPixelFormat( DC : HDC; PixelFormat : Integer; FormatDef : PPixelFormatDescriptor) : BOOL');
 CL.AddDelphiFunction('Function SetPolyFillMode( DC : HDC; PolyFillMode : Integer) : Integer');
 CL.AddDelphiFunction('Function StretchBlt( DestDC : HDC; X, Y, Width, Height : Integer; SrcDC : HDC; XSrc, YSrc, SrcWidth, SrcHeight : Integer; Rop : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetRectRgn( Rgn : HRgn; X1, Y1, X2, Y2 : Integer) : BOOL');
 CL.AddDelphiFunction('Function StretchDIBits( DC : HDC; DestX, DestY, DestWidth, DestHeight, SrcX, SrcY, SrcWidth, SrcHeight : Integer; Bits : Pointer; var BitsInfo : TBitmapInfo; Usage : UINT; Rop : DWORD) : Integer');
 CL.AddDelphiFunction('Function SetROP2( DC : HDC; p2 : Integer) : Integer');
 CL.AddDelphiFunction('Function SetStretchBltMode( DC : HDC; StretchMode : Integer) : Integer');
 CL.AddDelphiFunction('Function SetSystemPaletteUse( DC : HDC; p2 : UINT) : UINT');
 CL.AddDelphiFunction('Function SetTextCharacterExtra( DC : HDC; CharExtra : Integer) : Integer');
 CL.AddDelphiFunction('Function SetTextColor( DC : HDC; Color : COLORREF) : COLORREF');
 CL.AddDelphiFunction('Function SetTextAlign( DC : HDC; Flags : UINT) : UINT');
 CL.AddDelphiFunction('Function SetTextJustification( DC : HDC; BreakExtra, BreakCount : Integer) : Integer');
 CL.AddDelphiFunction('Function UpdateColors( DC : HDC) : BOOL');
  CL.AddTypeS('COLOR16', 'Word');
  CL.AddTypeS('PTriVertex', '^TTriVertex // will not work');
  CL.AddTypeS('_TRIVERTEX', 'record x : Longint; y : Longint; Red : COLOR16; Gr'
   +'een : COLOR16; Blue : COLOR16; Alpha : COLOR16; end');
  CL.AddTypeS('TTriVertex', '_TRIVERTEX');
  CL.AddTypeS('TRIVERTEX', '_TRIVERTEX');
  CL.AddTypeS('PGradientTriangle', '^TGradientTriangle // will not work');
  CL.AddTypeS('_GRADIENT_TRIANGLE', 'record Vertex1 : ULONG; Vertex2 : ULONG; V'
   +'ertex3 : ULONG; end');
  CL.AddTypeS('TGradientTriangle', '_GRADIENT_TRIANGLE');
  CL.AddTypeS('GRADIENT_TRIANGLE', '_GRADIENT_TRIANGLE');
  CL.AddTypeS('PGradientRect', '^TGradientRect // will not work');
  CL.AddTypeS('_GRADIENT_RECT', 'record UpperLeft : ULONG; LowerRight : ULONG; '
   +'end');
  CL.AddTypeS('TGradientRect', '_GRADIENT_RECT');
  CL.AddTypeS('GRADIENT_RECT', '_GRADIENT_RECT');
  CL.AddTypeS('PBlendFunction', '^TBlendFunction // will not work');
  CL.AddTypeS('_BLENDFUNCTION', 'record BlendOp : BYTE; BlendFlags : BYTE; Sour'
   +'ceConstantAlpha : BYTE; AlphaFormat : BYTE; end');
  CL.AddTypeS('TBlendFunction', '_BLENDFUNCTION');
  CL.AddTypeS('BLENDFUNCTION', '_BLENDFUNCTION');
 CL.AddConstantN('AC_SRC_OVER','LongWord').SetUInt( $00);
 CL.AddConstantN('AC_SRC_ALPHA','LongWord').SetUInt( $01);
 CL.AddConstantN('AC_SRC_NO_PREMULT_ALPHA','LongWord').SetUInt( $01);
 CL.AddConstantN('AC_SRC_NO_ALPHA','LongWord').SetUInt( $02);
 CL.AddConstantN('AC_DST_NO_PREMULT_ALPHA','LongWord').SetUInt( $10);
 CL.AddConstantN('AC_DST_NO_ALPHA','LongWord').SetUInt( $20);
 CL.AddDelphiFunction('Function AlphaBlend( DC : HDC; p2, p3, p4, p5 : Integer; DC6 : HDC; p7, p8, p9, p10 : Integer; p11 : TBlendFunction) : BOOL');
 CL.AddDelphiFunction('Function AlphaDIBBlend( DC : HDC; p2, p3, p4, p5 : Integer; const p6 : Pointer; const p7 : PBitmapInfo; p8 : UINT; p9, p10, p11, p12 : Integer; p13 : TBlendFunction) : BOOL');
 CL.AddDelphiFunction('Function TransparentBlt( DC : HDC; p2, p3, p4, p5 : Integer; DC6 : HDC; p7, p8, p9, p10 : Integer; p11 : UINT) : BOOL');
 CL.AddDelphiFunction('Function TransparentDIBits( DC : HDC; p2, p3, p4, p5 : Integer; const p6 : Pointer; const p7 : PBitmapInfo; p8 : UINT; p9, p10, p11, p12 : Integer; p13 : UINT) : BOOL');
 CL.AddConstantN('GRADIENT_FILL_RECT_H','LongWord').SetUInt( $00000000);
 CL.AddConstantN('GRADIENT_FILL_RECT_V','LongWord').SetUInt( $00000001);
 CL.AddConstantN('GRADIENT_FILL_TRIANGLE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('GRADIENT_FILL_OP_FLAG','LongWord').SetUInt( $000000ff);
 CL.AddDelphiFunction('Function GradientFill( DC : HDC; Vertex : PTriVertex; NumVertex : ULONG; Mesh : Pointer; NumMesh, Mode : ULONG) : BOOL');
 CL.AddDelphiFunction('Function PlayMetaFileRecord( DC : HDC; const p2 : THandleTable; const p3 : TMetaRecord; p4 : UINT) : BOOL');
  CL.AddTypeS('TFNMFEnumProc', 'TFarProc');
  CL.AddTypeS('TFNEnhMFEnumProc', 'TFarProc');
 CL.AddDelphiFunction('Function EnumMetaFile( DC : HDC; Handle : HMETAFILE; MetaFunc : TFNMFEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function CloseEnhMetaFile( DC : HDC) : HENHMETAFILE');
 CL.AddDelphiFunction('Function CopyEnhMetaFile( p1 : HENHMETAFILE; p2 : PChar) : HENHMETAFILE');
 CL.AddDelphiFunction('Function CopyEnhMetaFileA( p1 : HENHMETAFILE; p2 : PAnsiChar) : HENHMETAFILE');
 CL.AddDelphiFunction('Function CopyEnhMetaFileW( p1 : HENHMETAFILE; p2 : PWideChar) : HENHMETAFILE');
 CL.AddDelphiFunction('Function CreateEnhMetaFile( DC : HDC; FileName : PChar; Rect : PRect; Desc : PChar) : HDC');
 CL.AddDelphiFunction('Function CreateEnhMetaFileA( DC : HDC; FileName : PAnsiChar; Rect : PRect; Desc : PAnsiChar) : HDC');
 CL.AddDelphiFunction('Function CreateEnhMetaFileW( DC : HDC; FileName : PWideChar; Rect : PRect; Desc : PWideChar) : HDC');
 CL.AddDelphiFunction('Function DeleteEnhMetaFile( p1 : HENHMETAFILE) : BOOL');
 CL.AddDelphiFunction('Function EnumEnhMetaFile( DC : HDC; Emf : HENHMETAFILE; EnhMetaFunc : TFNEnhMFEnumProc; Data : Pointer; const Rect : TRect) : BOOL');
 CL.AddDelphiFunction('Function GetEnhMetaFile( p1 : PChar) : HENHMETAFILE');
 CL.AddDelphiFunction('Function GetEnhMetaFileA( p1 : PAnsiChar) : HENHMETAFILE');
 CL.AddDelphiFunction('Function GetEnhMetaFileW( p1 : PWideChar) : HENHMETAFILE');
 CL.AddDelphiFunction('Function GetEnhMetaFileBits( p1 : HENHMETAFILE; p2 : UINT; p3 : PByte) : UINT');
 CL.AddDelphiFunction('Function GetEnhMetaFileDescription( p1 : HENHMETAFILE; p2 : UINT; p3 : PChar) : UINT');
 CL.AddDelphiFunction('Function GetEnhMetaFileDescriptionA( p1 : HENHMETAFILE; p2 : UINT; p3 : PAnsiChar) : UINT');
 CL.AddDelphiFunction('Function GetEnhMetaFileDescriptionW( p1 : HENHMETAFILE; p2 : UINT; p3 : PWideChar) : UINT');
 CL.AddDelphiFunction('Function GetEnhMetaFileHeader( p1 : HENHMETAFILE; p2 : UINT; p3 : PEnhMetaHeader) : UINT');
 CL.AddDelphiFunction('Function GetEnhMetaFilePaletteEntries( p1 : HENHMETAFILE; p2 : UINT; p3 : Pointer) : UINT');
 CL.AddDelphiFunction('Function GetEnhMetaFilePixelFormat( p1 : HENHMETAFILE; p2 : Cardinal; var p3 : TPixelFormatDescriptor) : UINT');
 CL.AddDelphiFunction('Function GetWinMetaFileBits( p1 : HENHMETAFILE; p2 : UINT; p3 : PByte; p4 : Integer; p5 : HDC) : UINT');
 CL.AddDelphiFunction('Function PlayEnhMetaFile( DC : HDC; p2 : HENHMETAFILE; const p3 : TRect) : BOOL');
 CL.AddDelphiFunction('Function PlayEnhMetaFileRecord( DC : HDC; var p2 : THandleTable; const p3 : TEnhMetaRecord; p4 : UINT) : BOOL');
 CL.AddDelphiFunction('Function SetEnhMetaFileBits( p1 : UINT; p2 : PChar) : HENHMETAFILE');
 CL.AddDelphiFunction('Function SetWinMetaFileBits( p1 : UINT; p2 : PChar; p3 : HDC; const p4 : TMetaFilePict) : HENHMETAFILE');
 CL.AddDelphiFunction('Function GdiComment( DC : HDC; p2 : UINT; p3 : PChar) : BOOL');
 CL.AddDelphiFunction('Function GetTextMetrics( DC : HDC; var TM : TTextMetric) : BOOL');
 CL.AddDelphiFunction('Function GetTextMetricsA( DC : HDC; var TM : TTextMetricA) : BOOL');
 CL.AddDelphiFunction('Function GetTextMetricsW( DC : HDC; var TM : TTextMetricW) : BOOL');
  CL.AddTypeS('PDIBSection', '^TDIBSection // will not work');
  CL.AddTypeS('TDIBSection', 'tagDIBSECTION');
  CL.AddTypeS('DIBSECTION', 'tagDIBSECTION');
 CL.AddDelphiFunction('Function AngleArc( DC : HDC; p2, p3 : Integer; p4 : DWORD; p5, p6 : Single) : BOOL');
 CL.AddDelphiFunction('Function GetWorldTransform( DC : HDC; var p2 : TXForm) : BOOL');
 CL.AddDelphiFunction('Function SetWorldTransform( DC : HDC; const p2 : TXForm) : BOOL');
 CL.AddDelphiFunction('Function ModifyWorldTransform( DC : HDC; const p2 : TXForm; p3 : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CombineTransform( var p1 : TXForm; const p2, p3 : TXForm) : BOOL');
 CL.AddDelphiFunction('Function CreateDIBSection( DC : HDC; const p2 : TBitmapInfo; p3 : UINT; var p4 : Pointer; p5 : THandle; p6 : DWORD) : HBITMAP');
 CL.AddDelphiFunction('Function GetDIBColorTable( DC : HDC; p2, p3 : UINT; var RGBQuadStructs) : UINT');
 CL.AddDelphiFunction('Function SetDIBColorTable( DC : HDC; p2, p3 : UINT; var RGBQuadSTructs) : UINT');
 CL.AddConstantN('CA_NEGATIVE','LongInt').SetInt( 1);
 CL.AddConstantN('CA_LOG_FILTER','LongInt').SetInt( 2);
 CL.AddConstantN('ILLUMINANT_DEVICE_DEFAULT','LongInt').SetInt( 0);
 CL.AddConstantN('ILLUMINANT_A','LongInt').SetInt( 1);
 CL.AddConstantN('ILLUMINANT_B','LongInt').SetInt( 2);
 CL.AddConstantN('ILLUMINANT_C','LongInt').SetInt( 3);
 CL.AddConstantN('ILLUMINANT_D50','LongInt').SetInt( 4);
 CL.AddConstantN('ILLUMINANT_D55','LongInt').SetInt( 5);
 CL.AddConstantN('ILLUMINANT_D65','LongInt').SetInt( 6);
 CL.AddConstantN('ILLUMINANT_D75','LongInt').SetInt( 7);
 CL.AddConstantN('ILLUMINANT_F2','LongInt').SetInt( 8);
 CL.AddConstantN('ILLUMINANT_MAX_INDEX','').SetString( ILLUMINANT_F2);
 CL.AddConstantN('ILLUMINANT_TUNGSTEN','').SetString( ILLUMINANT_A);
 CL.AddConstantN('ILLUMINANT_DAYLIGHT','').SetString( ILLUMINANT_C);
 CL.AddConstantN('ILLUMINANT_FLUORESCENT','').SetString( ILLUMINANT_F2);
 CL.AddConstantN('ILLUMINANT_NTSC','').SetString( ILLUMINANT_C);
 CL.AddConstantN('RGB_GAMMA_MIN','LongInt').SetInt( 02500);
 CL.AddConstantN('RGB_GAMMA_MAX','LongInt').SetInt( 65000);
 CL.AddConstantN('REFERENCE_WHITE_MIN','LongInt').SetInt( 6000);
 CL.AddConstantN('REFERENCE_WHITE_MAX','LongInt').SetInt( 10000);
 CL.AddConstantN('REFERENCE_BLACK_MIN','LongInt').SetInt( 0);
 CL.AddConstantN('REFERENCE_BLACK_MAX','LongInt').SetInt( 4000);
 CL.AddConstantN('COLOR_ADJ_MIN','LongInt').SetInt( - 100);
 CL.AddConstantN('COLOR_ADJ_MAX','LongInt').SetInt( 100);
  CL.AddTypeS('PColorAdjustment', '^TColorAdjustment // will not work');
  CL.AddTypeS('tagCOLORADJUSTMENT', 'record caSize : Word; caFlags : Word; caIl'
   +'luminantIndex : Word; caRedGamma : Word; caGreenGamma : Word; caBlueGamma '
   +': Word; caReferenceBlack : Word; caReferenceWhite : Word; caContrast : SHO'
   +'RT; caBrightness : SHORT; caColorfulness : SHORT; caRedGreenTint : SHORT; '
   +'end');
  CL.AddTypeS('TColorAdjustment', 'tagCOLORADJUSTMENT');
  CL.AddTypeS('COLORADJUSTMENT', 'tagCOLORADJUSTMENT');
 CL.AddDelphiFunction('Function SetColorAdjustment( DC : HDC; const p2 : TColorAdjustment) : BOOL');
 CL.AddDelphiFunction('Function GetColorAdjustment( DC : HDC; var p2 : TColorAdjustment) : BOOL');
 CL.AddDelphiFunction('Function CreateHalftonePalette( DC : HDC) : HPALETTE');
  CL.AddTypeS('PDocInfoA', '^TDocInfoA // will not work');
  CL.AddTypeS('PDocInfoW', '^TDocInfoW // will not work');
  CL.AddTypeS('PDocInfo', 'PDocInfoA');
  CL.AddTypeS('_DOCINFOA', 'record cbSize : Integer; lpszDocName : PAnsiChar; l'
   +'pszOutput : PAnsiChar; lpszDatatype : PAnsiChar; fwType : DWORD; end');
  CL.AddTypeS('_DOCINFOW', 'record cbSize : Integer; lpszDocName : PWideChar; l'
   +'pszOutput : PWideChar; lpszDatatype : PWideChar; fwType : DWORD; end');
  CL.AddTypeS('_DOCINFO', '_DOCINFOA');
  CL.AddTypeS('TDocInfoA', '_DOCINFOA');
  CL.AddTypeS('TDocInfoW', '_DOCINFOW');
  CL.AddTypeS('TDocInfo', 'TDocInfoA');
  CL.AddTypeS('DOCINFOA', '_DOCINFOA');
  CL.AddTypeS('DOCINFOW', '_DOCINFOW');
  CL.AddTypeS('DOCINFO', 'DOCINFOA');
 CL.AddConstantN('DI_APPBANDING','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function StartDoc( DC : HDC; const p2 : TDocInfo) : Integer');
 CL.AddDelphiFunction('Function StartDocA( DC : HDC; const p2 : TDocInfoA) : Integer');
 CL.AddDelphiFunction('Function StartDocW( DC : HDC; const p2 : TDocInfoW) : Integer');
 CL.AddDelphiFunction('Function EndDoc( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function StartPage( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function EndPage( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function AbortDoc( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function SetAbortProc( DC : HDC; lpAbortProc : TFNAbortProc) : Integer');
 CL.AddDelphiFunction('Function AbortPath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function ArcTo( DC : HDC; RLeft, RTop, RRight, RBottom : Integer; X1, Y1, X2, Y2 : Integer) : BOOL');
 CL.AddDelphiFunction('Function BeginPath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function CloseFigure( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function EndPath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function FillPath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function FlattenPath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function GetPath( DC : HDC; var Points, Types, nSize : Integer) : Integer');
 CL.AddDelphiFunction('Function PathToRegion( DC : HDC) : HRGN');
 CL.AddDelphiFunction('Function PolyDraw( DC : HDC; const Points, Types, cCount : Integer) : BOOL');
 CL.AddDelphiFunction('Function SelectClipPath( DC : HDC; Mode : Integer) : BOOL');
 CL.AddDelphiFunction('Function SetArcDirection( DC : HDC; Direction : Integer) : Integer');
 CL.AddDelphiFunction('Function SetMiterLimit( DC : HDC; NewLimit : Single; OldLimit : PSingle) : BOOL');
 CL.AddDelphiFunction('Function StrokeAndFillPath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function StrokePath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function WidenPath( DC : HDC) : BOOL');
 CL.AddDelphiFunction('Function ExtCreatePen( PenStyle, Width : DWORD; const Brush : TLogBrush; StyleCount : DWORD; Style : Pointer) : HPEN');
 CL.AddDelphiFunction('Function GetMiterLimit( DC : HDC; var Limit : Single) : BOOL');
 CL.AddDelphiFunction('Function GetArcDirection( DC : HDC) : Integer');
 CL.AddDelphiFunction('Function GetObject( p1 : HGDIOBJ; p2 : Integer; p3 : Pointer) : Integer');
 CL.AddDelphiFunction('Function GetObjectA( p1 : HGDIOBJ; p2 : Integer; p3 : Pointer) : Integer');
 CL.AddDelphiFunction('Function GetObjectW( p1 : HGDIOBJ; p2 : Integer; p3 : Pointer) : Integer');
 CL.AddDelphiFunction('Function MoveToEx( DC : HDC; p2, p3 : Integer; p4 : PPoint) : BOOL');
 CL.AddDelphiFunction('Function TextOut( DC : HDC; X, Y : Integer; Str : PChar; Count : Integer) : BOOL');
 CL.AddDelphiFunction('Function TextOutA( DC : HDC; X, Y : Integer; Str : PAnsiChar; Count : Integer) : BOOL');
 CL.AddDelphiFunction('Function TextOutW( DC : HDC; X, Y : Integer; Str : PWideChar; Count : Integer) : BOOL');
 CL.AddDelphiFunction('Function ExtTextOut( DC : HDC; X, Y : Integer; Options : Longint; Rect : PRect; Str : PChar; Count : Longint; Dx : PInteger) : BOOL');
 CL.AddDelphiFunction('Function ExtTextOutA( DC : HDC; X, Y : Integer; Options : Longint; Rect : PRect; Str : PAnsiChar; Count : Longint; Dx : PInteger) : BOOL');
 CL.AddDelphiFunction('Function ExtTextOutW( DC : HDC; X, Y : Integer; Options : Longint; Rect : PRect; Str : PWideChar; Count : Longint; Dx : PInteger) : BOOL');
 CL.AddDelphiFunction('Function PolyTextOut( DC : HDC; const PolyTextArray, Strings : Integer) : BOOL');
 CL.AddDelphiFunction('Function PolyTextOutA( DC : HDC; const PolyTextArray, Strings : Integer) : BOOL');
 CL.AddDelphiFunction('Function PolyTextOutW( DC : HDC; const PolyTextArray, Strings : Integer) : BOOL');
 CL.AddDelphiFunction('Function CreatePolygonRgn( const Points, Count, FillMode : Integer) : HRGN');
 CL.AddDelphiFunction('Function DPtoLP( DC : HDC; var Points, Count : Integer) : BOOL');
 CL.AddDelphiFunction('Function LPtoDP( DC : HDC; var Points, Count : Integer) : BOOL');
 CL.AddDelphiFunction('Function Polygon( DC : HDC; var Points, Count : Integer) : BOOL');
 CL.AddDelphiFunction('Function Polyline( DC : HDC; var Points, Count : Integer) : BOOL');
 CL.AddDelphiFunction('Function PolyBezier( DC : HDC; const Points, Count : DWORD) : BOOL');
 CL.AddDelphiFunction('Function PolyBezierTo( DC : HDC; const Points, Count : DWORD) : BOOL');
 CL.AddDelphiFunction('Function PolyLineTo( DC : HDC; const Points, Count : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetViewportExtEx( DC : HDC; XExt, YExt : Integer; Size : PSize) : BOOL');
 CL.AddDelphiFunction('Function SetViewportOrgEx( DC : HDC; X, Y : Integer; Point : PPoint) : BOOL');
 CL.AddDelphiFunction('Function SetWindowExtEx( DC : HDC; XExt, YExt : Integer; Size : PSize) : BOOL');
 CL.AddDelphiFunction('Function SetWindowOrgEx( DC : HDC; X, Y : Integer; Point : PPoint) : BOOL');
 CL.AddDelphiFunction('Function OffsetViewportOrgEx( DC : HDC; X, Y : Integer; var Points) : BOOL;');
 CL.AddDelphiFunction('Function OffsetWindowOrgEx( DC : HDC; X, Y : Integer; var Points) : BOOL;');
 CL.AddDelphiFunction('Function OffsetViewportOrgEx( DC : HDC; X, Y : Integer; Points : PPoint) : BOOL;');
 CL.AddDelphiFunction('Function OffsetWindowOrgEx( DC : HDC; X, Y : Integer; Points : PPoint) : BOOL;');
 CL.AddDelphiFunction('Function ScaleViewportExtEx( DC : HDC; XM, XD, YM, YD : Integer; Size : PSize) : BOOL');
 CL.AddDelphiFunction('Function ScaleWindowExtEx( DC : HDC; XM, XD, YM, YD : Integer; Size : PSize) : BOOL');
 CL.AddDelphiFunction('Function SetBitmapDimensionEx( hBitmap : HBITMAP; Width, Height : Integer; Size : PSize) : BOOL');
 CL.AddDelphiFunction('Function SetBrushOrgEx( DC : HDC; X, Y : Integer; PrevPt : PPoint) : BOOL');
 CL.AddDelphiFunction('Function GetTextFace( DC : HDC; Count : Integer; Buffer : PChar) : Integer');
 CL.AddDelphiFunction('Function GetTextFaceA( DC : HDC; Count : Integer; Buffer : PAnsiChar) : Integer');
 CL.AddDelphiFunction('Function GetTextFaceW( DC : HDC; Count : Integer; Buffer : PWideChar) : Integer');
 CL.AddConstantN('FONTMAPPER_MAX','LongInt').SetInt( 10);
  CL.AddTypeS('PKerningPair', '^TKerningPair // will not work');
  CL.AddTypeS('tagKERNINGPAIR', 'record wFirst : Word; wSecond : Word; iKernAmo'
   +'unt : Integer; end');
  CL.AddTypeS('TKerningPair', 'tagKERNINGPAIR');
  CL.AddTypeS('KERNINGPAIR', 'tagKERNINGPAIR');
 CL.AddDelphiFunction('Function GetKerningPairs( DC : HDC; Count : DWORD; var KerningPairs) : DWORD');
 CL.AddDelphiFunction('Function GetDCOrgEx( DC : HDC; var Origin : TPoint) : BOOL');
 CL.AddDelphiFunction('Function UnrealizeObject( hGDIObj : HGDIOBJ) : BOOL');
 CL.AddDelphiFunction('Function GdiFlush : BOOL');
 CL.AddDelphiFunction('Function GdiSetBatchLimit( Limit : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GdiGetBatchLimit : DWORD');
 CL.AddConstantN('ICM_OFF','LongInt').SetInt( 1);
 CL.AddConstantN('ICM_ON','LongInt').SetInt( 2);
 CL.AddConstantN('ICM_QUERY','LongInt').SetInt( 3);
 CL.AddConstantN('ICM_ADDPROFILE','LongInt').SetInt( 1);
 CL.AddConstantN('ICM_DELETEPROFILE','LongInt').SetInt( 2);
 CL.AddConstantN('ICM_QUERYPROFILE','LongInt').SetInt( 3);
 CL.AddConstantN('ICM_SETDEFAULTPROFILE','LongInt').SetInt( 4);
 CL.AddConstantN('ICM_REGISTERICMATCHER','LongInt').SetInt( 5);
 CL.AddConstantN('ICM_UNREGISTERICMATCHER','LongInt').SetInt( 6);
 CL.AddConstantN('ICM_QUERYMATCH','LongInt').SetInt( 7);
 CL.AddDelphiFunction('Function SetICMMode( DC : HDC; Mode : Integer) : Integer');
 CL.AddDelphiFunction('Function CheckColorsInGamut( DC : HDC; var RGBQuads, Results, Count : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetColorSpace( DC : HDC) : THandle');
 CL.AddDelphiFunction('Function GetLogColorSpace( p1 : HCOLORSPACE; var ColorSpace : TLogColorSpace; Size : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetLogColorSpaceA( p1 : HCOLORSPACE; var ColorSpace : TLogColorSpaceA; Size : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetLogColorSpaceW( p1 : HCOLORSPACE; var ColorSpace : TLogColorSpaceW; Size : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CreateColorSpace( var ColorSpace : TLogColorSpace) : HCOLORSPACE');
 CL.AddDelphiFunction('Function CreateColorSpaceA( var ColorSpace : TLogColorSpaceA) : HCOLORSPACE');
 CL.AddDelphiFunction('Function CreateColorSpaceW( var ColorSpace : TLogColorSpaceW) : HCOLORSPACE');
 CL.AddDelphiFunction('Function SetColorSpace( DC : HDC; ColorSpace : HCOLORSPACE) : BOOL');
 CL.AddDelphiFunction('Function DeleteColorSpace( ColorSpace : HCOLORSPACE) : BOOL');
 CL.AddDelphiFunction('Function GetICMProfile( DC : HDC; var Size : DWORD; Name : PChar) : BOOL');
 CL.AddDelphiFunction('Function GetICMProfileA( DC : HDC; var Size : DWORD; Name : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function GetICMProfileW( DC : HDC; var Size : DWORD; Name : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function SetICMProfile( DC : HDC; Name : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetICMProfileA( DC : HDC; Name : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetICMProfileW( DC : HDC; Name : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetDeviceGammaRamp( DC : HDC; var Ramp) : BOOL');
 CL.AddDelphiFunction('Function SetDeviceGammaRamp( DC : HDC; var Ramp) : BOOL');
 CL.AddDelphiFunction('Function ColorMatchToTarget( DC : HDC; Target : HDC; Action : DWORD) : BOOL');
  CL.AddTypeS('TFNICMEnumProc', 'TFarProc');
 CL.AddDelphiFunction('Function EnumICMProfiles( DC : HDC; ICMProc : TFNICMEnumProc; p3 : LPARAM) : Integer');
 CL.AddDelphiFunction('Function EnumICMProfilesA( DC : HDC; ICMProc : TFNICMEnumProc; p3 : LPARAM) : Integer');
 CL.AddDelphiFunction('Function EnumICMProfilesW( DC : HDC; ICMProc : TFNICMEnumProc; p3 : LPARAM) : Integer');
 CL.AddDelphiFunction('Function UpdateICMRegKey( p1 : DWORD; p2, p3 : PChar; p4 : UINT) : BOOL');
 CL.AddDelphiFunction('Function UpdateICMRegKeyA( p1 : DWORD; p2, p3 : PAnsiChar; p4 : UINT) : BOOL');
 CL.AddDelphiFunction('Function UpdateICMRegKeyW( p1 : DWORD; p2, p3 : PWideChar; p4 : UINT) : BOOL');
 CL.AddDelphiFunction('Function ColorCorrectPalette( DC : HDC; p2 : HPALETTE; p3, p4 : DWORD) : BOOL');
 CL.AddConstantN('ENHMETA_SIGNATURE','LongWord').SetUInt( $464D4520);
 CL.AddConstantN('ENHMETA_STOCK_OBJECT','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('EMR_HEADER','LongInt').SetInt( 1);
 CL.AddConstantN('EMR_POLYBEZIER','LongInt').SetInt( 2);
 CL.AddConstantN('EMR_POLYGON','LongInt').SetInt( 3);
 CL.AddConstantN('EMR_POLYLINE','LongInt').SetInt( 4);
 CL.AddConstantN('EMR_POLYBEZIERTO','LongInt').SetInt( 5);
 CL.AddConstantN('EMR_POLYLINETO','LongInt').SetInt( 6);
 CL.AddConstantN('EMR_POLYPOLYLINE','LongInt').SetInt( 7);
 CL.AddConstantN('EMR_POLYPOLYGON','LongInt').SetInt( 8);
 CL.AddConstantN('EMR_SETWINDOWEXTEX','LongInt').SetInt( 9);
 CL.AddConstantN('EMR_SETWINDOWORGEX','LongInt').SetInt( 10);
 CL.AddConstantN('EMR_SETVIEWPORTEXTEX','LongInt').SetInt( 11);
 CL.AddConstantN('EMR_SETVIEWPORTORGEX','LongInt').SetInt( 12);
 CL.AddConstantN('EMR_SETBRUSHORGEX','LongInt').SetInt( 13);
 CL.AddConstantN('EMR_EOF','LongInt').SetInt( 14);
 CL.AddConstantN('EMR_SETPIXELV','LongInt').SetInt( 15);
 CL.AddConstantN('EMR_SETMAPPERFLAGS','LongWord').SetUInt( $10);
 CL.AddConstantN('EMR_SETMAPMODE','LongInt').SetInt( 17);
 CL.AddConstantN('EMR_SETBKMODE','LongInt').SetInt( 18);
 CL.AddConstantN('EMR_SETPOLYFILLMODE','LongInt').SetInt( 19);
 CL.AddConstantN('EMR_SETROP2','LongInt').SetInt( 20);
 CL.AddConstantN('EMR_SETSTRETCHBLTMODE','LongInt').SetInt( 21);
 CL.AddConstantN('EMR_SETTEXTALIGN','LongInt').SetInt( 22);
 CL.AddConstantN('EMR_SETCOLORADJUSTMENT','LongInt').SetInt( 23);
 CL.AddConstantN('EMR_SETTEXTCOLOR','LongInt').SetInt( 24);
 CL.AddConstantN('EMR_SETBKCOLOR','LongInt').SetInt( 25);
 CL.AddConstantN('EMR_OFFSETCLIPRGN','LongInt').SetInt( 26);
 CL.AddConstantN('EMR_MOVETOEX','LongInt').SetInt( 27);
 CL.AddConstantN('EMR_SETMETARGN','LongInt').SetInt( 28);
 CL.AddConstantN('EMR_EXCLUDECLIPRECT','LongInt').SetInt( 29);
 CL.AddConstantN('EMR_INTERSECTCLIPRECT','LongInt').SetInt( 30);
 CL.AddConstantN('EMR_SCALEVIEWPORTEXTEX','LongInt').SetInt( 31);
 CL.AddConstantN('EMR_SCALEWINDOWEXTEX','LongInt').SetInt( 32);
 CL.AddConstantN('EMR_SAVEDC','LongInt').SetInt( 33);
 CL.AddConstantN('EMR_RESTOREDC','LongInt').SetInt( 34);
 CL.AddConstantN('EMR_SETWORLDTRANSFORM','LongInt').SetInt( 35);
 CL.AddConstantN('EMR_MODIFYWORLDTRANSFORM','LongInt').SetInt( 36);
 CL.AddConstantN('EMR_SELECTOBJECT','LongInt').SetInt( 37);
 CL.AddConstantN('EMR_CREATEPEN','LongInt').SetInt( 38);
 CL.AddConstantN('EMR_CREATEBRUSHINDIRECT','LongInt').SetInt( 39);
 CL.AddConstantN('EMR_DELETEOBJECT','LongInt').SetInt( 40);
 CL.AddConstantN('EMR_ANGLEARC','LongInt').SetInt( 41);
 CL.AddConstantN('EMR_ELLIPSE','LongInt').SetInt( 42);
 CL.AddConstantN('EMR_RECTANGLE','LongInt').SetInt( 43);
 CL.AddConstantN('EMR_ROUNDRECT','LongInt').SetInt( 44);
 CL.AddConstantN('EMR_ARC','LongInt').SetInt( 45);
 CL.AddConstantN('EMR_CHORD','LongInt').SetInt( 46);
 CL.AddConstantN('EMR_PIE','LongInt').SetInt( 47);
 CL.AddConstantN('EMR_SELECTPALETTE','LongInt').SetInt( 48);
 CL.AddConstantN('EMR_CREATEPALETTE','LongInt').SetInt( 49);
 CL.AddConstantN('EMR_SETPALETTEENTRIES','LongInt').SetInt( 50);
 CL.AddConstantN('EMR_RESIZEPALETTE','LongInt').SetInt( 51);
 CL.AddConstantN('EMR_REALIZEPALETTE','LongInt').SetInt( 52);
 CL.AddConstantN('EMR_EXTFLOODFILL','LongInt').SetInt( 53);
 CL.AddConstantN('EMR_LINETO','LongInt').SetInt( 54);
 CL.AddConstantN('EMR_ARCTO','LongInt').SetInt( 55);
 CL.AddConstantN('EMR_POLYDRAW','LongInt').SetInt( 56);
 CL.AddConstantN('EMR_SETARCDIRECTION','LongInt').SetInt( 57);
 CL.AddConstantN('EMR_SETMITERLIMIT','LongInt').SetInt( 58);
 CL.AddConstantN('EMR_BEGINPATH','LongInt').SetInt( 59);
 CL.AddConstantN('EMR_ENDPATH','LongInt').SetInt( 60);
 CL.AddConstantN('EMR_CLOSEFIGURE','LongInt').SetInt( 61);
 CL.AddConstantN('EMR_FILLPATH','LongInt').SetInt( 62);
 CL.AddConstantN('EMR_STROKEANDFILLPATH','LongInt').SetInt( 63);
 CL.AddConstantN('EMR_STROKEPATH','LongWord').SetUInt( $40);
 CL.AddConstantN('EMR_FLATTENPATH','LongInt').SetInt( 65);
 CL.AddConstantN('EMR_WIDENPATH','LongInt').SetInt( 66);
 CL.AddConstantN('EMR_SELECTCLIPPATH','LongInt').SetInt( 67);
 CL.AddConstantN('EMR_ABORTPATH','LongInt').SetInt( 68);
 CL.AddConstantN('EMR_GDICOMMENT','LongInt').SetInt( 70);
 CL.AddConstantN('EMR_FILLRGN','LongInt').SetInt( 71);
 CL.AddConstantN('EMR_FRAMERGN','LongInt').SetInt( 72);
 CL.AddConstantN('EMR_INVERTRGN','LongInt').SetInt( 73);
 CL.AddConstantN('EMR_PAINTRGN','LongInt').SetInt( 74);
 CL.AddConstantN('EMR_EXTSELECTCLIPRGN','LongInt').SetInt( 75);
 CL.AddConstantN('EMR_BITBLT','LongInt').SetInt( 76);
 CL.AddConstantN('EMR_STRETCHBLT','LongInt').SetInt( 77);
 CL.AddConstantN('EMR_MASKBLT','LongInt').SetInt( 78);
 CL.AddConstantN('EMR_PLGBLT','LongInt').SetInt( 79);
 CL.AddConstantN('EMR_SETDIBITSTODEVICE','LongInt').SetInt( 80);
 CL.AddConstantN('EMR_STRETCHDIBITS','LongInt').SetInt( 81);
 CL.AddConstantN('EMR_EXTCREATEFONTINDIRECTW','LongInt').SetInt( 82);
 CL.AddConstantN('EMR_EXTTEXTOUTA','LongInt').SetInt( 83);
 CL.AddConstantN('EMR_EXTTEXTOUTW','LongInt').SetInt( 84);
 CL.AddConstantN('EMR_POLYBEZIER16','LongInt').SetInt( 85);
 CL.AddConstantN('EMR_POLYGON16','LongInt').SetInt( 86);
 CL.AddConstantN('EMR_POLYLINE16','LongInt').SetInt( 87);
 CL.AddConstantN('EMR_POLYBEZIERTO16','LongInt').SetInt( 88);
 CL.AddConstantN('EMR_POLYLINETO16','LongInt').SetInt( 89);
 CL.AddConstantN('EMR_POLYPOLYLINE16','LongInt').SetInt( 90);
 CL.AddConstantN('EMR_POLYPOLYGON16','LongInt').SetInt( 91);
 CL.AddConstantN('EMR_POLYDRAW16','LongInt').SetInt( 92);
 CL.AddConstantN('EMR_CREATEMONOBRUSH','LongInt').SetInt( 93);
 CL.AddConstantN('EMR_CREATEDIBPATTERNBRUSHPT','LongInt').SetInt( 94);
 CL.AddConstantN('EMR_EXTCREATEPEN','LongInt').SetInt( 95);
 CL.AddConstantN('EMR_POLYTEXTOUTA','LongInt').SetInt( 96);
 CL.AddConstantN('EMR_POLYTEXTOUTW','LongInt').SetInt( 97);
 CL.AddConstantN('EMR_SETICMMODE','LongInt').SetInt( 98);
 CL.AddConstantN('EMR_CREATECOLORSPACE','LongInt').SetInt( 99);
 CL.AddConstantN('EMR_SETCOLORSPACE','LongInt').SetInt( 100);
 CL.AddConstantN('EMR_DELETECOLORSPACE','LongInt').SetInt( 101);
 CL.AddConstantN('EMR_GLSRECORD','LongInt').SetInt( 102);
 CL.AddConstantN('EMR_GLSBOUNDEDRECORD','LongInt').SetInt( 103);
 CL.AddConstantN('EMR_PIXELFORMAT','LongInt').SetInt( 104);
 CL.AddConstantN('EMR_DRAWESCAPE','LongInt').SetInt( 105);
 CL.AddConstantN('EMR_EXTESCAPE','LongInt').SetInt( 106);
 CL.AddConstantN('EMR_STARTDOC','LongInt').SetInt( 107);
 CL.AddConstantN('EMR_SMALLTEXTOUT','LongInt').SetInt( 108);
 CL.AddConstantN('EMR_FORCEUFIMAPPING','LongInt').SetInt( 109);
 CL.AddConstantN('EMR_NAMEDESCAPE','LongInt').SetInt( 110);
 CL.AddConstantN('EMR_COLORCORRECTPALETTE','LongInt').SetInt( 111);
 CL.AddConstantN('EMR_SETICMPROFILEA','LongInt').SetInt( 112);
 CL.AddConstantN('EMR_SETICMPROFILEW','LongInt').SetInt( 113);
 CL.AddConstantN('EMR_ALPHABLEND','LongInt').SetInt( 114);
 CL.AddConstantN('EMR_ALPHADIBBLEND','LongInt').SetInt( 115);
 CL.AddConstantN('EMR_TRANSPARENTBLT','LongInt').SetInt( 116);
 CL.AddConstantN('EMR_TRANSPARENTDIB','LongInt').SetInt( 117);
 CL.AddConstantN('EMR_GRADIENTFILL','LongInt').SetInt( 118);
 CL.AddConstantN('EMR_SETLINKEDUFIS','LongInt').SetInt( 119);
 CL.AddConstantN('EMR_SETTEXTJUSTIFICATION','LongInt').SetInt( 120);
 CL.AddConstantN('EMR_MAX','LongInt').SetInt( 120);
 CL.AddConstantN('EMR_MIN','LongInt').SetInt( 1);
  CL.AddTypeS('PEMR', '^TEMR // will not work');
  CL.AddTypeS('tagEMR', 'record iType : DWORD; nSize : DWORD; end');
  CL.AddTypeS('TEMR', 'tagEMR');
  CL.AddTypeS('EMR', 'tagEMR');
  CL.AddTypeS('PEMRText', '^TEMRText // will not work');
  CL.AddTypeS('tagEMRTEXT', 'record ptlReference : TPoint; nChars : DWORD; offS'
   +'tring : DWORD; fOptions : DWORD; rcl : TRect; offDx : DWORD; end');
  CL.AddTypeS('TEMRText', 'tagEMRTEXT');
  CL.AddTypeS('EMRTEXT', 'tagEMRTEXT');
  CL.AddTypeS('PAbortPath', '^TAbortPath // will not work');
  CL.AddTypeS('tagABORTPATH', 'record emr : TEMR; end');
  CL.AddTypeS('TAbortPath', 'tagABORTPATH');
  CL.AddTypeS('EMRABORTPATH', 'tagABORTPATH');
  CL.AddTypeS('TEMRAbortPath', 'TAbortPath');
  CL.AddTypeS('PEMRAbortPath', 'PAbortPath');
  CL.AddTypeS('TEMRBeginPath', 'TAbortPath');
  CL.AddTypeS('PEMRBeginPath', 'PAbortPath');
  CL.AddTypeS('TEMREndPath', 'TAbortPath');
  CL.AddTypeS('PEMREndPath', 'PAbortPath');
  CL.AddTypeS('TEMRCloseFigure', 'TAbortPath');
  CL.AddTypeS('PEMRCloseFigure', 'PAbortPath');
  CL.AddTypeS('TEMRFlattenPath', 'TAbortPath');
  CL.AddTypeS('PEMRFlattenPath', 'PAbortPath');
  CL.AddTypeS('TEMRWidenPath', 'TAbortPath');
  CL.AddTypeS('PEMRWidenPath', 'PAbortPath');
  CL.AddTypeS('TEMRSetMetaRgn', 'TAbortPath');
  CL.AddTypeS('PEMRSetMetaRgn', 'PAbortPath');
  CL.AddTypeS('TEMRSaveDC', 'TAbortPath');
  CL.AddTypeS('PEMRSaveDC', 'PAbortPath');
  CL.AddTypeS('TEMRRealizePalette', 'TAbortPath');
  CL.AddTypeS('PEMRRealizePalette', 'PAbortPath');
  CL.AddTypeS('PEMRSelectclippath', '^TEMRSelectClipPath // will not work');
  CL.AddTypeS('tagEMRSELECTCLIPPATH', 'record emr : TEMR; iMode : DWORD; end');
  CL.AddTypeS('TEMRSelectClipPath', 'tagEMRSELECTCLIPPATH');
  CL.AddTypeS('EMRSELECTCLIPPATH', 'tagEMRSELECTCLIPPATH');
  CL.AddTypeS('TEMRSetBkMode', 'TEMRSelectClipPath');
  CL.AddTypeS('PEMRSetBkMode', 'PEMRSelectClipPath');
  CL.AddTypeS('TEMRSetMapMode', 'TEMRSelectClipPath');
  CL.AddTypeS('PEMRSetMapMode', 'PEMRSelectClipPath');
  CL.AddTypeS('TEMRSetPolyFillMode', 'TEMRSelectClipPath');
  CL.AddTypeS('PEMRSetPolyFillMode', 'PEMRSelectClipPath');
  CL.AddTypeS('TEMRSetRop2', 'TEMRSelectClipPath');
  CL.AddTypeS('PEMRSetRop2', 'PEMRSelectClipPath');
  CL.AddTypeS('TEMRSetStretchBltMode', 'TEMRSelectClipPath');
  CL.AddTypeS('PEMRSetStretchBltMode', 'PEMRSelectClipPath');
  CL.AddTypeS('TEMRSetICMMode', 'TEMRSelectClipPath');
  CL.AddTypeS('PEMRSetICMMode', 'PEMRSelectClipPath');
  CL.AddTypeS('TEMRSetTextAlign', 'TEMRSelectClipPath');
  CL.AddTypeS('PEMRSetTextAlign', 'PEMRSelectClipPath');
  CL.AddTypeS('PEMRSetMiterLimit', '^TEMRSetMiterLimit // will not work');
  CL.AddTypeS('tagEMRSETMITERLIMIT', 'record emr : TEMR; eMiterLimit : Single; '
   +'end');
  CL.AddTypeS('TEMRSetMiterLimit', 'tagEMRSETMITERLIMIT');
  CL.AddTypeS('EMRSETMITERLIMIT', 'tagEMRSETMITERLIMIT');
  CL.AddTypeS('PEMRRestoreDC', '^TEMRRestoreDC // will not work');
  CL.AddTypeS('tagEMRRESTOREDC', 'record emr : TEMR; iRelative : Longint; end');
  CL.AddTypeS('TEMRRestoreDC', 'tagEMRRESTOREDC');
  CL.AddTypeS('EMRRESTOREDC', 'tagEMRRESTOREDC');
  CL.AddTypeS('PEMRSetArcDirection', '^TEMRSetArcDirection // will not work');
  CL.AddTypeS('tagEMRSETARCDIRECTION', 'record emr : TEMR; iArcDirection : DWOR'
   +'D; end');
  CL.AddTypeS('TEMRSetArcDirection', 'tagEMRSETARCDIRECTION');
  CL.AddTypeS('EMRSETARCDIRECTION', 'tagEMRSETARCDIRECTION');
  CL.AddTypeS('PEMRSetMapperFlags', '^TEMRSetMapperFlags // will not work');
  CL.AddTypeS('tagEMRSETMAPPERFLAGS', 'record emr : TEMR; dwFlags : DWORD; end');
  CL.AddTypeS('TEMRSetMapperFlags', 'tagEMRSETMAPPERFLAGS');
  CL.AddTypeS('EMRSETMAPPERFLAGS', 'tagEMRSETMAPPERFLAGS');
  CL.AddTypeS('PEMRSetTextColor', '^TEMRSetTextColor // will not work');
  CL.AddTypeS('tagEMRSETTEXTCOLOR', 'record emr : TEMR; crColor : COLORREF; end');
  CL.AddTypeS('TEMRSetTextColor', 'tagEMRSETTEXTCOLOR');
  CL.AddTypeS('EMRSETTEXTCOLOR', 'tagEMRSETTEXTCOLOR');
  CL.AddTypeS('TEMRSetBkColor', 'TEMRSetTextColor');
  CL.AddTypeS('PEMRSetBkColor', 'PEMRSetTextColor');
  CL.AddTypeS('PEMRSelectObject', '^TEMRSelectObject // will not work');
  CL.AddTypeS('tagEMRSELECTOBJECT', 'record emr : TEMR; ihObject : DWORD; end');
  CL.AddTypeS('TEMRSelectObject', 'tagEMRSELECTOBJECT');
  CL.AddTypeS('EMRSELECTOBJECT', 'tagEMRSELECTOBJECT');
  CL.AddTypeS('EMRDeleteObject', 'TEMRSelectObject');
  CL.AddTypeS('PEMRDeleteObject', 'PEMRSelectObject');
  CL.AddTypeS('PEMRSelectColorSpace', '^TEMRSelectColorSpace // will not work');
  CL.AddTypeS('tagEMRSETCOLORSPACE', 'record emr : TEMR; ihCS : DWORD; end');
  CL.AddTypeS('TEMRSelectColorSpace', 'tagEMRSETCOLORSPACE');
  CL.AddTypeS('EMRSELECTCOLORSPACE', 'tagEMRSETCOLORSPACE');
  CL.AddTypeS('EMRDeleteColorSpace', 'TEMRSelectColorSpace');
  CL.AddTypeS('PEMRDeleteColorSpace', 'PEMRSelectColorSpace');
  CL.AddTypeS('PEMRSelectPalette', '^TEMRSelectPalette // will not work');
  CL.AddTypeS('tagEMRSELECTPALETTE', 'record emr : TEMR; ihPal : DWORD; end');
  CL.AddTypeS('TEMRSelectPalette', 'tagEMRSELECTPALETTE');
  CL.AddTypeS('EMRSELECTPALETTE', 'tagEMRSELECTPALETTE');
  CL.AddTypeS('PEMRResizePalette', '^TEMRResizePalette // will not work');
  CL.AddTypeS('tagEMRRESIZEPALETTE', 'record emr : TEMR; ihPal : DWORD; cEntrie'
   +'s : DWORD; end');
  CL.AddTypeS('TEMRResizePalette', 'tagEMRRESIZEPALETTE');
  CL.AddTypeS('EMRRESIZEPALETTE', 'tagEMRRESIZEPALETTE');
  CL.AddTypeS('PEMRSetPaletteEntries', '^TEMRSetPaletteEntries // will not work');
  CL.AddTypeS('TEMRSetPaletteEntries', 'tagEMRSETPALETTEENTRIES');
  CL.AddTypeS('EMRSETPALETTEENTRIES', 'tagEMRSETPALETTEENTRIES');
  CL.AddTypeS('PEMRSetColorAdjustment', '^TEMRSetColorAdjustment // will not wo'
   +'rk');
  CL.AddTypeS('tagEMRSETCOLORADJUSTMENT', 'record emr : TEMR; ColorAdjustment :'
   +' TColorAdjustment; end');
  CL.AddTypeS('TEMRSetColorAdjustment', 'tagEMRSETCOLORADJUSTMENT');
  CL.AddTypeS('EMRSETCOLORADJUSTMENT', 'tagEMRSETCOLORADJUSTMENT');
  CL.AddTypeS('PEMRGDIComment', '^TEMRGDIComment // will not work');
  CL.AddTypeS('TEMRGDIComment', 'tagEMRGDICOMMENT');
  CL.AddTypeS('EMRGDICOMMENT', 'tagEMRGDICOMMENT');
  CL.AddTypeS('PEMREOF', '^TEMREOF // will not work');
  CL.AddTypeS('tagEMREOF', 'record emr : TEMR; nPalEntries : DWORD; offPalEntri'
   +'es : DWORD; nSizeLast : DWORD; end');
  CL.AddTypeS('TEMREOF', 'tagEMREOF');
  CL.AddTypeS('EMREOF', 'tagEMREOF');
  CL.AddTypeS('PEMRLineTo', '^TEMRLineTo // will not work');
  CL.AddTypeS('tagEMRLINETO', 'record emr : TEMR; ptl : TPoint; end');
  CL.AddTypeS('TEMRLineTo', 'tagEMRLINETO');
  CL.AddTypeS('EMRLINETO', 'tagEMRLINETO');
  CL.AddTypeS('EMRMoveToEx', 'TEMRLineTo');
  CL.AddTypeS('PEMRMoveToEx', 'PEMRLineTo');
  CL.AddTypeS('PEMROffsetClipRgn', '^TEMROffsetClipRgn // will not work');
  CL.AddTypeS('tagEMROFFSETCLIPRGN', 'record emr : TEMR; ptlOffset : TPoint; en'
   +'d');
  CL.AddTypeS('TEMROffsetClipRgn', 'tagEMROFFSETCLIPRGN');
  CL.AddTypeS('EMROFFSETCLIPRGN', 'tagEMROFFSETCLIPRGN');
  CL.AddTypeS('PEMRFillPath', '^TEMRFillPath // will not work');
  CL.AddTypeS('tagEMRFILLPATH', 'record emr : TEMR; rclBounds : TRect; end');
  CL.AddTypeS('TEMRFillPath', 'tagEMRFILLPATH');
  CL.AddTypeS('EMRFILLPATH', 'tagEMRFILLPATH');
  CL.AddTypeS('EMRStrokeAndFillPath', 'TEMRFillPath');
  CL.AddTypeS('PEMRStrokeAndFillPath', 'PEMRFillPath');
  CL.AddTypeS('EMRStrokePath', 'TEMRFillPath');
  CL.AddTypeS('PEMRStrokePath', 'PEMRFillPath');
  CL.AddTypeS('PEMRExcludeClipRect', '^TEMRExcludeClipRect // will not work');
  CL.AddTypeS('tagEMREXCLUDECLIPRECT', 'record emr : TEMR; rclClip : TRect; end');
  CL.AddTypeS('TEMRExcludeClipRect', 'tagEMREXCLUDECLIPRECT');
  CL.AddTypeS('EMREXCLUDECLIPRECT', 'tagEMREXCLUDECLIPRECT');
  CL.AddTypeS('EMRIntersectClipRect', 'TEMRExcludeClipRect');
  CL.AddTypeS('PEMRIntersectClipRect', 'PEMRExcludeClipRect');
  CL.AddTypeS('PEMRSetViewportOrgEx', '^TEMRSetViewportOrgEx // will not work');
  CL.AddTypeS('tagEMRSETVIEWPORTORGEX', 'record emr : TEMR; ptlOrigin : TPoint;'
   +' end');
  CL.AddTypeS('TEMRSetViewportOrgEx', 'tagEMRSETVIEWPORTORGEX');
  CL.AddTypeS('EMRSETVIEWPORTORGEX', 'tagEMRSETVIEWPORTORGEX');
  CL.AddTypeS('EMRSetWindowOrgEx', 'TEMRSetViewportOrgEx');
  CL.AddTypeS('PEMRSetWindowOrgEx', 'PEMRSetViewportOrgEx');
  CL.AddTypeS('EMRSetBrushOrgEx', 'TEMRSetViewportOrgEx');
  CL.AddTypeS('PEMRSetBrushOrgEx', 'PEMRSetViewportOrgEx');
  CL.AddTypeS('PEMRSetViewportExtEx', '^TEMRSetViewportExtEx // will not work');
  CL.AddTypeS('tagEMRSETVIEWPORTEXTEX', 'record emr : TEMR; szlExtent : TSize; '
   +'end');
  CL.AddTypeS('TEMRSetViewportExtEx', 'tagEMRSETVIEWPORTEXTEX');
  CL.AddTypeS('EMRSETVIEWPORTEXTEX', 'tagEMRSETVIEWPORTEXTEX');
  CL.AddTypeS('EMRSetWindowExtEx', 'TEMRSetViewportExtEx');
  CL.AddTypeS('PEMRSetWindowExtEx', 'PEMRSetViewportExtEx');
  CL.AddTypeS('PEMRScaleViewportExtEx', '^TEMRScaleViewportExtEx // will not wo'
   +'rk');
  CL.AddTypeS('tagEMRSCALEVIEWPORTEXTEX', 'record emr : TEMR; xNum : Longint; x'
   +'Denom : Longint; yNum : Longint; yDenom : Longint; end');
  CL.AddTypeS('TEMRScaleViewportExtEx', 'tagEMRSCALEVIEWPORTEXTEX');
  CL.AddTypeS('EMRSCALEVIEWPORTEXTEX', 'tagEMRSCALEVIEWPORTEXTEX');
  CL.AddTypeS('EMRScaleWindowExtEx', 'TEMRScaleViewportExtEx');
  CL.AddTypeS('PEMRScaleWindowExtEx', 'PEMRScaleViewportExtEx');
  CL.AddTypeS('PEMRSetWorldTransform', '^TEMRSetWorldTransform // will not work');
  CL.AddTypeS('tagEMRSETWORLDTRANSFORM', 'record emr : TEMR; xform : TXForm; en'
   +'d');
  CL.AddTypeS('TEMRSetWorldTransform', 'tagEMRSETWORLDTRANSFORM');
  CL.AddTypeS('EMRSETWORLDTRANSFORM', 'tagEMRSETWORLDTRANSFORM');
  CL.AddTypeS('PEMRModifyWorldTransform', '^TEMRModifyWorldTransform // will no'
   +'t work');
  CL.AddTypeS('tagEMRMODIFYWORLDTRANSFORM', 'record emr : TEMR; xform : TXForm;'
   +' iMode : DWORD; end');
  CL.AddTypeS('TEMRModifyWorldTransform', 'tagEMRMODIFYWORLDTRANSFORM');
  CL.AddTypeS('EMRMODIFYWORLDTRANSFORM', 'tagEMRMODIFYWORLDTRANSFORM');
  CL.AddTypeS('PEMRSetPixelV', '^TEMRSetPixelV // will not work');
  CL.AddTypeS('tagEMRSETPIXELV', 'record emr : TEMR; ptlPixel : TPoint; crColor'
   +' : COLORREF; end');
  CL.AddTypeS('TEMRSetPixelV', 'tagEMRSETPIXELV');
  CL.AddTypeS('EMRSETPIXELV', 'tagEMRSETPIXELV');
  CL.AddTypeS('PEMRExtFloodFill', '^TEMRExtFloodFill // will not work');
  CL.AddTypeS('tagEMREXTFLOODFILL', 'record emr : TEMR; ptlStart : TPoint; crCo'
   +'lor : COLORREF; iMode : DWORD; end');
  CL.AddTypeS('TEMRExtFloodFill', 'tagEMREXTFLOODFILL');
  CL.AddTypeS('EMREXTFLOODFILL', 'tagEMREXTFLOODFILL');
  CL.AddTypeS('PEMREllipse', '^TEMREllipse // will not work');
  CL.AddTypeS('tagEMRELLIPSE', 'record emr : TEMR; rclBox : TRect; end');
  CL.AddTypeS('TEMREllipse', 'tagEMRELLIPSE');
  CL.AddTypeS('EMRELLIPSE', 'tagEMRELLIPSE');
  CL.AddTypeS('EMRRectangle', 'TEMREllipse');
  CL.AddTypeS('PEMRRectangle', 'PEMREllipse');
  CL.AddTypeS('PEMRRoundRect', '^TEMRRoundRect // will not work');
  CL.AddTypeS('tagEMRROUNDRECT', 'record emr : TEMR; rclBox : TRect; szlCorner '
   +': TSize; end');
  CL.AddTypeS('TEMRRoundRect', 'tagEMRROUNDRECT');
  CL.AddTypeS('EMRROUNDRECT', 'tagEMRROUNDRECT');
  CL.AddTypeS('PEMRArc', '^TEMRArc // will not work');
  CL.AddTypeS('tagEMRARC', 'record emr : TEMR; rclBox : TRect; ptlStart : TPoin'
   +'t; ptlEnd : TPoint; end');
  CL.AddTypeS('TEMRArc', 'tagEMRARC');
  CL.AddTypeS('EMRARC', 'tagEMRARC');
  CL.AddTypeS('EMRArcTo', 'TEMRArc');
  CL.AddTypeS('PEMRArcTo', 'PEMRArc');
  CL.AddTypeS('EMRChord', 'TEMRArc');
  CL.AddTypeS('PEMRChord', 'PEMRArc');
  CL.AddTypeS('EMRPie', 'TEMRArc');
  CL.AddTypeS('PEMRPie', 'PEMRArc');
  CL.AddTypeS('PEMRAngleArc', '^TEMRAngleArc // will not work');
  CL.AddTypeS('tagEMRANGLEARC', 'record emr : TEMR; ptlCenter : TPoint; nRadius'
   +' : DWORD; eStartAngle : Single; eSweepAngle : Single; end');
  CL.AddTypeS('TEMRAngleArc', 'tagEMRANGLEARC');
  CL.AddTypeS('EMRANGLEARC', 'tagEMRANGLEARC');
  CL.AddTypeS('PEMRPolyline', '^TEMRPolyline // will not work');
  CL.AddTypeS('TEMRPolyline', 'tagEMRPOLYLINE');
  CL.AddTypeS('EMRPOLYLINE', 'tagEMRPOLYLINE');
  CL.AddTypeS('EMRPolyBezier', 'TEMRPolyLine');
  CL.AddTypeS('PEMRPolyBezier', 'PEMRPolyLine');
  CL.AddTypeS('EMRPolyGON', 'TEMRPolyLine');
  CL.AddTypeS('PEMRPolyGON', 'PEMRPolyLine');
  CL.AddTypeS('EMRPolyBezierTo', 'TEMRPolyLine');
  CL.AddTypeS('PEMRPolyBezierTo', 'PEMRPolyLine');
  CL.AddTypeS('EMRPolyLineTo', 'TEMRPolyLine');
  CL.AddTypeS('PEMRPolyLineTo', 'PEMRPolyLine');
  CL.AddTypeS('PEMRPolyline16', '^TEMRPolyline16 // will not work');
  CL.AddTypeS('TEMRPolyline16', 'tagEMRPOLYLINE16');
  CL.AddTypeS('EMRPOLYLINE16', 'tagEMRPOLYLINE16');
  CL.AddTypeS('EMRPolyBezier16', 'TEMRPolyLine16');
  CL.AddTypeS('PEMRPolyBezier16', 'PEMRPolyLine16');
  CL.AddTypeS('EMRPolygon16', 'TEMRPolyLine16');
  CL.AddTypeS('PEMRPolygon16', 'PEMRPolyLine16');
  CL.AddTypeS('EMRPolyBezierTo16', 'TEMRPolyLine16');
  CL.AddTypeS('PEMRPolyBezierTo16', 'PEMRPolyLine16');
  CL.AddTypeS('EMRPolyLineTo16', 'TEMRPolyLine16');
  CL.AddTypeS('PEMRPolyLineTo16', 'PEMRPolyLine16');
  CL.AddTypeS('PEMRPolyDraw', '^TEMRPolyDraw // will not work');
  CL.AddTypeS('TEMRPolyDraw', 'tagEMRPOLYDRAW');
  CL.AddTypeS('EMRPOLYDRAW', 'tagEMRPOLYDRAW');
  CL.AddTypeS('PEMRPolyDraw16', '^TEMRPolyDraw16 // will not work');
  CL.AddTypeS('TEMRPolyDraw16', 'tagEMRPOLYDRAW16');
  CL.AddTypeS('EMRPOLYDRAW16', 'tagEMRPOLYDRAW16');
  CL.AddTypeS('PEMRPolyPolyline', '^TEMRPolyPolyline // will not work');
  CL.AddTypeS('TEMRPolyPolyline', 'tagEMRPOLYPOLYLINE');
  CL.AddTypeS('EMRPOLYPOLYLINE', 'tagEMRPOLYPOLYLINE');
  CL.AddTypeS('EMRPolyPolygon', 'TEMRPolyPolyline');
  CL.AddTypeS('PEMRPolyPolygon', 'PEMRPolyPolyline');
  CL.AddTypeS('PEMRPolyPolyline16', '^TEMRPolyPolyline16 // will not work');
  CL.AddTypeS('TEMRPolyPolyline16', 'tagEMRPOLYPOLYLINE16');
  CL.AddTypeS('EMRPOLYPOLYLINE16', 'tagEMRPOLYPOLYLINE16');
  CL.AddTypeS('EMRPolyPolygon16', 'TEMRPolyPolyline16');
  CL.AddTypeS('PEMRPolyPolygon16', 'PEMRPolyPolyline16');
  CL.AddTypeS('PEMRInvertRgn', '^TEMRInvertRgn // will not work');
  CL.AddTypeS('TEMRInvertRgn', 'tagEMRINVERTRGN');
  CL.AddTypeS('EMRINVERTRGN', 'tagEMRINVERTRGN');
  CL.AddTypeS('EMRPaintRgn', 'TEMRInvertRgn');
  CL.AddTypeS('PEMRPaintRgn', 'PEMRInvertRgn');
  CL.AddTypeS('PEMRFillRgn', '^TEMRFillRgn // will not work');
  CL.AddTypeS('TEMRFillRgn', 'tagEMRFILLRGN');
  CL.AddTypeS('EMRFILLRGN', 'tagEMRFILLRGN');
  CL.AddTypeS('PEMRFrameRgn', '^TEMRFrameRgn // will not work');
  CL.AddTypeS('TEMRFrameRgn', 'tagEMRFRAMERGN');
  CL.AddTypeS('EMRFRAMERGN', 'tagEMRFRAMERGN');
  CL.AddTypeS('PEMGradientFill', '^TEMGradientFill // will not work');
  CL.AddTypeS('TEMGradientFill', 'tagEMRGRADIENTFILL');
  CL.AddTypeS('EMRGRADIENTFILL', 'tagEMRGRADIENTFILL');
  CL.AddTypeS('PEMRExtSelectClipRgn', '^TEMRExtSelectClipRgn // will not work');
  CL.AddTypeS('TEMRExtSelectClipRgn', 'tagEMREXTSELECTCLIPRGN');
  CL.AddTypeS('EMREXTSELECTCLIPRGN', 'tagEMREXTSELECTCLIPRGN');
  CL.AddTypeS('PEMRExtTextOut', '^TEMRExtTextOut // will not work');
  CL.AddTypeS('tagEMREXTTEXTOUTA', 'record emr : TEMR; rclBounds : TRect; iGrap'
   +'hicsMode : DWORD; exScale : Single; eyScale : Single; emrtext : TEMRText; '
   +'end');
  CL.AddTypeS('TEMRExtTextOut', 'tagEMREXTTEXTOUTA');
  CL.AddTypeS('EMREXTTEXTOUTA', 'tagEMREXTTEXTOUTA');
  CL.AddTypeS('PEMRPolyTextOut', '^TEMRPolyTextOut // will not work');
  CL.AddTypeS('TEMRPolyTextOut', 'tagEMRPOLYTEXTOUTA');
  CL.AddTypeS('EMRPOLYTEXTOUTA', 'tagEMRPOLYTEXTOUTA');
  CL.AddTypeS('PEMRBitBlt', '^TEMRBitBlt // will not work');
  CL.AddTypeS('tagEMRBITBLT', 'record emr : TEMR; rclBounds : TRect; xDest : Lo'
   +'ngint; yDest : Longint; cxDest : Longint; cyDest : Longint; dwRop : DWORD;'
   +' xSrc : Longint; ySrc : Longint; xformSrc : TXForm; crBkColorSrc : COLORRE'
   +'F; iUsageSrc : DWORD; offBmiSrc : DWORD; cbBmiSrc : DWORD; offBitsSrc : DW'
   +'ORD; cbBitsSrc : DWORD; end');
  CL.AddTypeS('TEMRBitBlt', 'tagEMRBITBLT');
  CL.AddTypeS('EMRBITBLT', 'tagEMRBITBLT');
  CL.AddTypeS('PEMRStretchBlt', '^TEMRStretchBlt // will not work');
  CL.AddTypeS('tagEMRSTRETCHBLT', 'record emr : TEMR; rclBounds : TRect; xDest '
   +': Longint; yDest : Longint; cxDest : Longint; cyDest : Longint; dwRop : DW'
   +'ORD; xSrc : Longint; ySrc : Longint; xformSrc : TXForm; crBkColorSrc : COL'
   +'ORREF; iUsageSrc : DWORD; offBmiSrc : DWORD; cbBmiSrc : DWORD; offBitsSrc '
   +': DWORD; cbBitsSrc : DWORD; cxSrc : Longint; cySrc : Longint; end');
  CL.AddTypeS('TEMRStretchBlt', 'tagEMRSTRETCHBLT');
  CL.AddTypeS('EMRSTRETCHBLT', 'tagEMRSTRETCHBLT');
  CL.AddTypeS('PEMRMaskBlt', '^TEMRMaskBlt // will not work');
  CL.AddTypeS('tagEMRMASKBLT', 'record emr : TEMR; rclBounds : TRect; xDest : L'
   +'ongint; yDest : Longint; cxDest : Longint; cyDest : Longint; dwRop : DWORD'
   +'; xSrc : Longint; ySrc : Longint; xformSrc : TXForm; crBkColorSrc : COLORR'
   +'EF; iUsageSrc : DWORD; offBmiSrc : DWORD; cbBmiSrc : DWORD; offBitsSrc : D'
   +'WORD; cbBitsSrc : DWORD; xMask : Longint; yMask : Longint; iUsageMask : DW'
   +'ORD; offBmiMask : DWORD; cbBmiMask : DWORD; offBitsMask : DWORD; cbBitsMas'
   +'k : DWORD; end');
  CL.AddTypeS('TEMRMaskBlt', 'tagEMRMASKBLT');
  CL.AddTypeS('EMRMASKBLT', 'tagEMRMASKBLT');
  CL.AddTypeS('PEMRPLGBlt', '^TEMRPLGBlt // will not work');
  CL.AddTypeS('TEMRPLGBlt', 'tagEMRPLGBLT');
  CL.AddTypeS('EMRPLGBLT', 'tagEMRPLGBLT');
  CL.AddTypeS('PEMRSetDIBitsToDevice', '^TEMRSetDIBitsToDevice // will not work');
  CL.AddTypeS('tagEMRSETDIBITSTODEVICE', 'record emr : TEMR; rclBounds : TRect;'
   +' xDest : Longint; yDest : Longint; xSrc : Longint; ySrc : Longint; cxSrc :'
   +' Longint; cySrc : Longint; offBmiSrc : DWORD; cbBmiSrc : DWORD; offBitsSrc'
   +' : DWORD; cbBitsSrc : DWORD; iUsageSrc : DWORD; iStartScan : DWORD; cScans'
   +' : DWORD; end');
  CL.AddTypeS('TEMRSetDIBitsToDevice', 'tagEMRSETDIBITSTODEVICE');
  CL.AddTypeS('EMRSETDIBITSTODEVICE', 'tagEMRSETDIBITSTODEVICE');
  CL.AddTypeS('PEMRStretchDIBits', '^TEMRStretchDIBits // will not work');
  CL.AddTypeS('tagEMRSTRETCHDIBITS', 'record emr : TEMR; rclBounds : TRect; xDe'
   +'st : Longint; yDest : Longint; xSrc : Longint; ySrc : Longint; cxSrc : Lon'
   +'gint; cySrc : Longint; offBmiSrc : DWORD; cbBmiSrc : DWORD; offBitsSrc : D'
   +'WORD; cbBitsSrc : DWORD; iUsageSrc : DWORD; dwRop : DWORD; cxDest : Longin'
   +'t; cyDest : Longint; end');
  CL.AddTypeS('TEMRStretchDIBits', 'tagEMRSTRETCHDIBITS');
  CL.AddTypeS('EMRSTRETCHDIBITS', 'tagEMRSTRETCHDIBITS');
  CL.AddTypeS('PEMRAlphaBlend', '^TEMRAlphaBlend // will not work');
  CL.AddTypeS('tagEMRALPHABLEND', 'record emr : TEMR; rclBounds : TRect; xDest '
   +': Longint; yDest : Longint; cxDest : Longint; cyDest : Longint; dwRop : DW'
   +'ORD; xSrc : Longint; ySrc : Longint; xformSrc : XFORM; crBkColorSrc : COLO'
   +'RREF; iUsageSrc : DWORD; offBmiSrc : DWORD; cbBmiSrc : DWORD; offBitsSrc :'
   +' DWORD; cbBitsSrc : DWORD; cxSrc : Longint; cySrc : Longint; end');
  CL.AddTypeS('TEMRAlphaBlend', 'tagEMRALPHABLEND');
  CL.AddTypeS('EMRALPHABLEND', 'tagEMRALPHABLEND');
  CL.AddTypeS('PEMRTransparentBLT', '^TEMRTransparentBLT // will not work');
  CL.AddTypeS('tagEMRTRANSPARENTBLT', 'record emr : TEMR; rclBounds : TRect; xD'
   +'est : Longint; yDest : Longint; cxDest : Longint; cyDest : Longint; dwRop '
   +': DWORD; xSrc : Longint; ySrc : Longint; xformSrc : XFORM; crBkColorSrc : '
   +'COLORREF; iUsageSrc : DWORD; offBmiSrc : DWORD; cbBmiSrc : DWORD; offBitsS'
   +'rc : DWORD; cbBitsSrc : DWORD; cxSrc : Longint; cySrc : Longint; end');
  CL.AddTypeS('TEMRTransparentBLT', 'tagEMRTRANSPARENTBLT');
  CL.AddTypeS('EMRTRANSPARENTBLT', 'tagEMRTRANSPARENTBLT');
  CL.AddTypeS('PEMRExtCreateFontIndirect', '^TEMRExtCreateFontIndirect // will '
   +'not work');
  CL.AddTypeS('tagEMREXTCREATEFONTINDIRECTW', 'record emr : TEMR; ihFont : DWOR'
   +'D; elfw : TExtLogFontW; end');
  CL.AddTypeS('TEMRExtCreateFontIndirect', 'tagEMREXTCREATEFONTINDIRECTW');
  CL.AddTypeS('EMREXTCREATEFONTINDIRECTW', 'tagEMREXTCREATEFONTINDIRECTW');
  CL.AddTypeS('PEMRCreatePalette', '^TEMRCreatePalette // will not work');
  CL.AddTypeS('tagEMRCREATEPALETTE', 'record emr : TEMR; ihPal : DWORD; lgpl : '
   +'TLogPalette; end');
  CL.AddTypeS('TEMRCreatePalette', 'tagEMRCREATEPALETTE');
  CL.AddTypeS('EMRCREATEPALETTE', 'tagEMRCREATEPALETTE');
  CL.AddTypeS('PEMRCreateColorSpace', '^TEMRCreateColorSpace // will not work');
  CL.AddTypeS('tagEMRCREATECOLORSPACE', 'record emr : TEMR; ihCS : DWORD; lcs :'
   +' TLogColorSpaceW; end');
  CL.AddTypeS('TEMRCreateColorSpace', 'tagEMRCREATECOLORSPACE');
  CL.AddTypeS('EMRCREATECOLORSPACE', 'tagEMRCREATECOLORSPACE');
  CL.AddTypeS('PEMRCreatePen', '^TEMRCreatePen // will not work');
  CL.AddTypeS('tagEMRCREATEPEN', 'record emr : TEMR; ihPen : DWORD; lopn : TLog'
   +'Pen; end');
  CL.AddTypeS('TEMRCreatePen', 'tagEMRCREATEPEN');
  CL.AddTypeS('EMRCREATEPEN', 'tagEMRCREATEPEN');
  CL.AddTypeS('PEMRExtCreatePen', '^TEMRExtCreatePen // will not work');
  CL.AddTypeS('tagEMREXTCREATEPEN', 'record emr : TEMR; ihPen : DWORD; offBmi :'
   +' DWORD; cbBmi : DWORD; offBits : DWORD; cbBits : DWORD; elp : TExtLogPen; '
   +'end');
  CL.AddTypeS('TEMRExtCreatePen', 'tagEMREXTCREATEPEN');
  CL.AddTypeS('EMREXTCREATEPEN', 'tagEMREXTCREATEPEN');
  CL.AddTypeS('PEMRCreateBrushIndirect', '^TEMRCreateBrushIndirect // will not '
   +'work');
  CL.AddTypeS('tagEMRCREATEBRUSHINDIRECT', 'record emr : TEMR; ihBrush : DWORD;'
   +' lb : TLogBrush; end');
  CL.AddTypeS('TEMRCreateBrushIndirect', 'tagEMRCREATEBRUSHINDIRECT');
  CL.AddTypeS('EMRCREATEBRUSHINDIRECT', 'tagEMRCREATEBRUSHINDIRECT');
  CL.AddTypeS('PEMRCreateMonoBrush', '^TEMRCreateMonoBrush // will not work');
  CL.AddTypeS('tagEMRCREATEMONOBRUSH', 'record emr : TEMR; ihBrush : DWORD; iUs'
   +'age : DWORD; offBmi : DWORD; cbBmi : DWORD; offBits : DWORD; cbBits : DWOR'
   +'D; end');
  CL.AddTypeS('TEMRCreateMonoBrush', 'tagEMRCREATEMONOBRUSH');
  CL.AddTypeS('EMRCREATEMONOBRUSH', 'tagEMRCREATEMONOBRUSH');
  CL.AddTypeS('PEMRCreateDIBPatternBrushPt', '^TEMRCreateDIBPatternBrushPt // w'
   +'ill not work');
  CL.AddTypeS('tagEMRCREATEDIBPATTERNBRUSHPT', 'record emr : TEMR; ihBrush : DW'
   +'ORD; iUsage : DWORD; offBmi : DWORD; cbBmi : DWORD; offBits : DWORD; cbBit'
   +'s : DWORD; end');
  CL.AddTypeS('TEMRCreateDIBPatternBrushPt', 'tagEMRCREATEDIBPATTERNBRUSHPT');
  CL.AddTypeS('EMRCREATEDIBPATTERNBRUSHPT', 'tagEMRCREATEDIBPATTERNBRUSHPT');
  CL.AddTypeS('PEMRFormat', '^TEMRFormat // will not work');
  CL.AddTypeS('tagEMRFORMAT', 'record dSignature : DWORD; nVersion : DWORD; cbD'
   +'ata : DWORD; offData : DWORD; end');
  CL.AddTypeS('TEMRFormat', 'tagEMRFORMAT');
  CL.AddTypeS('EMRFORMAT', 'tagEMRFORMAT');
  CL.AddTypeS('PEMRGLSRecord', '^TEMRGLSRecord // will not work');
  CL.AddTypeS('TEMRGLSRecord', 'tagEMRGLSRECORD');
  CL.AddTypeS('EMRGLSRECORD', 'tagEMRGLSRECORD');
  CL.AddTypeS('PEMRGLSBoundedRecord', '^TEMRGLSBoundedRecord // will not work');
  CL.AddTypeS('TEMRGLSBoundedRecord', 'tagEMRGLSBOUNDEDRECORD');
  CL.AddTypeS('EMRGLSBOUNDEDRECORD', 'tagEMRGLSBOUNDEDRECORD');
  CL.AddTypeS('PEMRPixelFormat', '^TEMRPixelFormat // will not work');
  CL.AddTypeS('tagEMRPIXELFORMAT', 'record emr : TEMR; pfd : TPixelFormatDescri'
   +'ptor; end');
  CL.AddTypeS('TEMRPixelFormat', 'tagEMRPIXELFORMAT');
  CL.AddTypeS('EMRPIXELFORMAT', 'tagEMRPIXELFORMAT');
 CL.AddConstantN('GDICOMMENT_IDENTIFIER','LongWord').SetUInt( $43494447);
 CL.AddConstantN('GDICOMMENT_WINDOWS_METAFILE','LongWord').SetUInt( DWORD ( $80000001 ));
 CL.AddConstantN('GDICOMMENT_BEGINGROUP','LongInt').SetInt( 2);
 CL.AddConstantN('GDICOMMENT_ENDGROUP','LongInt').SetInt( 3);
 CL.AddConstantN('GDICOMMENT_MULTIFORMATS','LongWord').SetUInt( $40000004);
 CL.AddConstantN('EPS_SIGNATURE','LongWord').SetUInt( $46535045);
 CL.AddDelphiFunction('Function wglCopyContext( p1 : HGLRC; p2 : HGLRC; p3 : Cardinal) : BOOL');
 CL.AddDelphiFunction('Function wglCreateContext( DC : HDC) : HGLRC');
 CL.AddDelphiFunction('Function wglCreateLayerContext( p1 : HDC; p2 : Integer) : HGLRC');
 CL.AddDelphiFunction('Function wglDeleteContext( p1 : HGLRC) : BOOL');
 CL.AddDelphiFunction('Function wglGetCurrentContext : HGLRC');
 CL.AddDelphiFunction('Function wglGetCurrentDC : HDC');
 CL.AddDelphiFunction('Function wglMakeCurrent( DC : HDC; p2 : HGLRC) : BOOL');
 CL.AddDelphiFunction('Function wglShareLists( p1, p2 : HGLRC) : BOOL');
 CL.AddDelphiFunction('Function wglUseFontBitmaps( DC : HDC; p2, p3, p4 : DWORD) : BOOL');
 CL.AddDelphiFunction('Function wglUseFontBitmapsA( DC : HDC; p2, p3, p4 : DWORD) : BOOL');
 CL.AddDelphiFunction('Function wglUseFontBitmapsW( DC : HDC; p2, p3, p4 : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SwapBuffers( DC : HDC) : BOOL');
  CL.AddTypeS('PPointFloat', '^TPointFloat // will not work');
  CL.AddTypeS('_POINTFLOAT', 'record x : Single; y : Single; end');
  CL.AddTypeS('TPointFloat', '_POINTFLOAT');
  CL.AddTypeS('POINTFLOAT', '_POINTFLOAT');
  CL.AddTypeS('PGlyphMetricsFloat', '^TGlyphMetricsFloat // will not work');
  CL.AddTypeS('_GLYPHMETRICSFLOAT', 'record gmfBlackBoxX : Single; gmfBlackBoxY'
   +' : Single; gmfptGlyphOrigin : TPointFloat; gmfCellIncX : Single; gmfCellIn'
   +'cY : Single; end');
  CL.AddTypeS('TGlyphMetricsFloat', '_GLYPHMETRICSFLOAT');
  CL.AddTypeS('GLYPHMETRICSFLOAT', '_GLYPHMETRICSFLOAT');
 CL.AddConstantN('WGL_FONT_LINES','LongInt').SetInt( 0);
 CL.AddConstantN('WGL_FONT_POLYGONS','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function wglUseFontOutlines( p1 : HDC; p2, p3, p4 : DWORD; p5, p6 : Single; p7 : Integer; p8 : PGlyphMetricsFloat) : BOOL');
 CL.AddDelphiFunction('Function wglUseFontOutlinesA( p1 : HDC; p2, p3, p4 : DWORD; p5, p6 : Single; p7 : Integer; p8 : PGlyphMetricsFloat) : BOOL');
 CL.AddDelphiFunction('Function wglUseFontOutlinesW( p1 : HDC; p2, p3, p4 : DWORD; p5, p6 : Single; p7 : Integer; p8 : PGlyphMetricsFloat) : BOOL');
  CL.AddTypeS('PLayerPlaneDescriptor', '^TLayerPlaneDescriptor // will not work');
  CL.AddTypeS('tagLAYERPLANEDESCRIPTOR', 'record nSize : Word; nVersion : Word;'
   +' dwFlags : DWORD; iPixelType : Byte; cColorBits : Byte; cRedBits : Byte; c'
   +'RedShift : Byte; cGreenBits : Byte; cGreenShift : Byte; cBlueBits : Byte; '
   +'cBlueShift : Byte; cAlphaBits : Byte; cAlphaShift : Byte; cAccumBits : Byt'
   +'e; cAccumRedBits : Byte; cAccumGreenBits : Byte; cAccumBlueBits : Byte; cA'
   +'ccumAlphaBits : Byte; cDepthBits : Byte; cStencilBits : Byte; cAuxBuffers '
   +': Byte; iLayerPlane : Byte; bReserved : Byte; crTransparent : COLORREF; en'
   +'d');
  CL.AddTypeS('TLayerPlaneDescriptor', 'tagLAYERPLANEDESCRIPTOR');
  CL.AddTypeS('LAYERPLANEDESCRIPTOR', 'tagLAYERPLANEDESCRIPTOR');
 CL.AddConstantN('LPD_DOUBLEBUFFER','LongWord').SetUInt( $00000001);
 CL.AddConstantN('LPD_STEREO','LongWord').SetUInt( $00000002);
 CL.AddConstantN('LPD_SUPPORT_GDI','LongWord').SetUInt( $00000010);
 CL.AddConstantN('LPD_SUPPORT_OPENGL','LongWord').SetUInt( $00000020);
 CL.AddConstantN('LPD_SHARE_DEPTH','LongWord').SetUInt( $00000040);
 CL.AddConstantN('LPD_SHARE_STENCIL','LongWord').SetUInt( $00000080);
 CL.AddConstantN('LPD_SHARE_ACCUM','LongWord').SetUInt( $00000100);
 CL.AddConstantN('LPD_SWAP_EXCHANGE','LongWord').SetUInt( $00000200);
 CL.AddConstantN('LPD_SWAP_COPY','LongWord').SetUInt( $00000400);
 CL.AddConstantN('LPD_TRANSPARENT','LongWord').SetUInt( $00001000);
 CL.AddConstantN('LPD_TYPE_RGBA','LongInt').SetInt( 0);
 CL.AddConstantN('LPD_TYPE_COLORINDEX','LongInt').SetInt( 1);
 CL.AddConstantN('WGL_SWAP_MAIN_PLANE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('WGL_SWAP_OVERLAY1','LongWord').SetUInt( $00000002);
 CL.AddConstantN('WGL_SWAP_OVERLAY2','LongWord').SetUInt( $00000004);
 CL.AddConstantN('WGL_SWAP_OVERLAY3','LongWord').SetUInt( $00000008);
 CL.AddConstantN('WGL_SWAP_OVERLAY4','LongWord').SetUInt( $00000010);
 CL.AddConstantN('WGL_SWAP_OVERLAY5','LongWord').SetUInt( $00000020);
 CL.AddConstantN('WGL_SWAP_OVERLAY6','LongWord').SetUInt( $00000040);
 CL.AddConstantN('WGL_SWAP_OVERLAY7','LongWord').SetUInt( $00000080);
 CL.AddConstantN('WGL_SWAP_OVERLAY8','LongWord').SetUInt( $00000100);
 CL.AddConstantN('WGL_SWAP_OVERLAY9','LongWord').SetUInt( $00000200);
 CL.AddConstantN('WGL_SWAP_OVERLAY10','LongWord').SetUInt( $00000400);
 CL.AddConstantN('WGL_SWAP_OVERLAY11','LongWord').SetUInt( $00000800);
 CL.AddConstantN('WGL_SWAP_OVERLAY12','LongWord').SetUInt( $00001000);
 CL.AddConstantN('WGL_SWAP_OVERLAY13','LongWord').SetUInt( $00002000);
 CL.AddConstantN('WGL_SWAP_OVERLAY14','LongWord').SetUInt( $00004000);
 CL.AddConstantN('WGL_SWAP_OVERLAY15','LongWord').SetUInt( $00008000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY1','LongWord').SetUInt( $00010000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY2','LongWord').SetUInt( $00020000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY3','LongWord').SetUInt( $00040000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY4','LongWord').SetUInt( $00080000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY5','LongWord').SetUInt( $00100000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY6','LongWord').SetUInt( $00200000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY7','LongWord').SetUInt( $00400000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY8','LongWord').SetUInt( $00800000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY9','LongWord').SetUInt( $01000000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY10','LongWord').SetUInt( $02000000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY11','LongWord').SetUInt( $04000000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY12','LongWord').SetUInt( $08000000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY13','LongWord').SetUInt( $10000000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY14','LongWord').SetUInt( $20000000);
 CL.AddConstantN('WGL_SWAP_UNDERLAY15','LongWord').SetUInt( $40000000);
 CL.AddDelphiFunction('Function wglDescribeLayerPlane( p1 : HDC; p2, p3 : Integer; p4 : Cardinal; var p5 : TLayerPlaneDescriptor) : BOOL');
 CL.AddDelphiFunction('Function wglSetLayerPaletteEntries( p1 : HDC; p2, p3, p4 : Integer; var pcr) : Integer');
 CL.AddDelphiFunction('Function wglGetLayerPaletteEntries( p1 : HDC; p2, p3, p4 : Integer; var pcr) : Integer');
 CL.AddDelphiFunction('Function wglRealizeLayerPalette( p1 : HDC; p2 : Integer; p3 : BOOL) : BOOL');
 CL.AddDelphiFunction('Function wglSwapLayerBuffers( p1 : HDC; p2 : Cardinal) : BOOL');
  CL.AddTypeS('PWGLSwap', '^TWGLSwap // will not work');
  CL.AddTypeS('_WGLSWAP', 'record hdc : HDC; uiFlags : UINT; end');
  CL.AddTypeS('TWGLSwap', '_WGLSWAP');
  CL.AddTypeS('WGLSWAP', '_WGLSWAP');
 CL.AddConstantN('WGL_SWAPMULTIPLE_MAX','LongInt').SetInt( 16);
 CL.AddDelphiFunction('Function wglSwapMultipleBuffers( p1 : UINT; const p2 : PWGLSwap) : DWORD');
  CL.AddTypeS('HDWP', 'THandle');
  CL.AddTypeS('PMENUTEMPLATE', 'Pointer');
  CL.AddTypeS('va_list', 'PChar');
  CL.AddTypeS('TFNWndProc', 'TFarProc');
  CL.AddTypeS('TFNDlgProc', 'TFarProc');
  CL.AddTypeS('TFNTimerProc', 'TFarProc');
  CL.AddTypeS('TFNGrayStringProc', 'TFarProc');
  CL.AddTypeS('TFNWndEnumProc', 'TFarProc');
  CL.AddTypeS('TFNSendAsyncProc', 'TFarProc');
  CL.AddTypeS('TFNDrawStateProc', 'TFarProc');
  CL.AddTypeS('TFNPropEnumProc', 'TFarProc');
  CL.AddTypeS('TFNPropEnumProcEx', 'TFarProc');
  CL.AddTypeS('TFNEditWordBreakProc', 'TFarProc');
  CL.AddTypeS('TFNNameEnumProc', 'TFarProc');
  CL.AddTypeS('TFNWinStaEnumProc', 'TFNNameEnumProc');
  CL.AddTypeS('TFNDeskTopEnumProc', 'TFNNameEnumProc');
  CL.AddTypeS('MakeIntResourceA', 'PAnsiChar');
  CL.AddTypeS('MakeIntResourceW', 'PWideChar');
  CL.AddTypeS('MakeIntResource', 'MakeIntResourceA');
 CL.AddConstantN('RT_CURSOR','LongInt').SetInt( MakeIntResource ( 1 ));
 CL.AddConstantN('RT_BITMAP','LongInt').SetInt( MakeIntResource ( 2 ));
 CL.AddConstantN('RT_ICON','LongInt').SetInt( MakeIntResource ( 3 ));
 CL.AddConstantN('RT_MENU','LongInt').SetInt( MakeIntResource ( 4 ));
 CL.AddConstantN('RT_DIALOG','LongInt').SetInt( MakeIntResource ( 5 ));
 CL.AddConstantN('RT_STRING','LongInt').SetInt( MakeIntResource ( 6 ));
 CL.AddConstantN('RT_FONTDIR','LongInt').SetInt( MakeIntResource ( 7 ));
 CL.AddConstantN('RT_FONT','LongInt').SetInt( MakeIntResource ( 8 ));
 CL.AddConstantN('RT_ACCELERATOR','LongInt').SetInt( MakeIntResource ( 9 ));
 CL.AddConstantN('RT_MESSAGETABLE','LongInt').SetInt( MakeIntResource ( 11 ));
 CL.AddConstantN('DIFFERENCE','LongInt').SetInt( 11);
 CL.AddConstantN('RT_VERSION','LongInt').SetInt( MakeIntResource ( 16 ));
 CL.AddConstantN('RT_DLGINCLUDE','LongInt').SetInt( MakeIntResource ( 17 ));
 CL.AddConstantN('RT_PLUGPLAY','LongInt').SetInt( MakeIntResource ( 19 ));
 CL.AddConstantN('RT_VXD','LongInt').SetInt( MakeIntResource ( 20 ));
 CL.AddConstantN('RT_ANICURSOR','LongInt').SetInt( MakeIntResource ( 21 ));
 CL.AddConstantN('RT_ANIICON','LongInt').SetInt( MakeIntResource ( 22 ));
 CL.AddDelphiFunction('Function wvsprintf( Output : PChar; Format : PChar; arglist : va_list) : Integer');
 CL.AddDelphiFunction('Function wvsprintfA( Output : PAnsiChar; Format : PAnsiChar; arglist : va_list) : Integer');
 CL.AddDelphiFunction('Function wvsprintfW( Output : PWideChar; Format : PWideChar; arglist : va_list) : Integer');
 CL.AddDelphiFunction('Function wsprintf( Output : PChar; Format : PChar) : Integer');
 CL.AddDelphiFunction('Function wsprintfA( Output : PAnsiChar; Format : PAnsiChar) : Integer');
 CL.AddDelphiFunction('Function wsprintfW( Output : PWideChar; Format : PWideChar) : Integer');
 CL.AddConstantN('SB_HORZ','LongInt').SetInt( 0);
 CL.AddConstantN('SB_VERT','LongInt').SetInt( 1);
 CL.AddConstantN('SB_CTL','LongInt').SetInt( 2);
 CL.AddConstantN('SB_BOTH','LongInt').SetInt( 3);
 CL.AddConstantN('SB_LINEUP','LongInt').SetInt( 0);
 CL.AddConstantN('SB_LINELEFT','LongInt').SetInt( 0);
 CL.AddConstantN('SB_LINEDOWN','LongInt').SetInt( 1);
 CL.AddConstantN('SB_LINERIGHT','LongInt').SetInt( 1);
 CL.AddConstantN('SB_PAGEUP','LongInt').SetInt( 2);
 CL.AddConstantN('SB_PAGELEFT','LongInt').SetInt( 2);
 CL.AddConstantN('SB_PAGEDOWN','LongInt').SetInt( 3);
 CL.AddConstantN('SB_PAGERIGHT','LongInt').SetInt( 3);
 CL.AddConstantN('SB_THUMBPOSITION','LongInt').SetInt( 4);
 CL.AddConstantN('SB_THUMBTRACK','LongInt').SetInt( 5);
 CL.AddConstantN('SB_TOP','LongInt').SetInt( 6);
 CL.AddConstantN('SB_LEFT','LongInt').SetInt( 6);
 CL.AddConstantN('SB_BOTTOM','LongInt').SetInt( 7);
 CL.AddConstantN('SB_RIGHT','LongInt').SetInt( 7);
 CL.AddConstantN('SB_ENDSCROLL','LongInt').SetInt( 8);
 CL.AddConstantN('SW_HIDE','LongInt').SetInt( 0);
 CL.AddConstantN('SW_SHOWNORMAL','LongInt').SetInt( 1);
 CL.AddConstantN('SW_NORMAL','LongInt').SetInt( 1);
 CL.AddConstantN('SW_SHOWMINIMIZED','LongInt').SetInt( 2);
 CL.AddConstantN('SW_SHOWMAXIMIZED','LongInt').SetInt( 3);
 CL.AddConstantN('SW_MAXIMIZE','LongInt').SetInt( 3);
 CL.AddConstantN('SW_SHOWNOACTIVATE','LongInt').SetInt( 4);
 CL.AddConstantN('SW_SHOW','LongInt').SetInt( 5);
 CL.AddConstantN('SW_MINIMIZE','LongInt').SetInt( 6);
 CL.AddConstantN('SW_SHOWMINNOACTIVE','LongInt').SetInt( 7);
 CL.AddConstantN('SW_SHOWNA','LongInt').SetInt( 8);
 CL.AddConstantN('SW_RESTORE','LongInt').SetInt( 9);
 CL.AddConstantN('SW_SHOWDEFAULT','LongInt').SetInt( 10);
 CL.AddConstantN('SW_MAX','LongInt').SetInt( 10);
 CL.AddConstantN('HIDE_WINDOW','LongInt').SetInt( 0);
 CL.AddConstantN('SHOW_OPENWINDOW','LongInt').SetInt( 1);
 CL.AddConstantN('SHOW_ICONWINDOW','LongInt').SetInt( 2);
 CL.AddConstantN('SHOW_FULLSCREEN','LongInt').SetInt( 3);
 CL.AddConstantN('SHOW_OPENNOACTIVATE','LongInt').SetInt( 4);
 CL.AddConstantN('SW_PARENTCLOSING','LongInt').SetInt( 1);
 CL.AddConstantN('SW_OTHERZOOM','LongInt').SetInt( 2);
 CL.AddConstantN('SW_PARENTOPENING','LongInt').SetInt( 3);
 CL.AddConstantN('SW_OTHERUNZOOM','LongInt').SetInt( 4);
 CL.AddConstantN('AW_HOR_POSITIVE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('AW_HOR_NEGATIVE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('AW_VER_POSITIVE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('AW_VER_NEGATIVE','LongWord').SetUInt( $00000008);
 CL.AddConstantN('AW_CENTER','LongWord').SetUInt( $00000010);
 CL.AddConstantN('AW_HIDE','LongWord').SetUInt( $00010000);
 CL.AddConstantN('AW_ACTIVATE','LongWord').SetUInt( $00020000);
 CL.AddConstantN('AW_SLIDE','LongWord').SetUInt( $00040000);
 CL.AddConstantN('AW_BLEND','LongWord').SetUInt( $00080000);
 CL.AddConstantN('KF_EXTENDED','LongWord').SetUInt( $100);
 CL.AddConstantN('KF_DLGMODE','LongWord').SetUInt( $800);
 CL.AddConstantN('KF_MENUMODE','LongWord').SetUInt( $1000);
 CL.AddConstantN('KF_ALTDOWN','LongWord').SetUInt( $2000);
 CL.AddConstantN('KF_REPEAT','LongWord').SetUInt( $4000);
 CL.AddConstantN('KF_UP','LongWord').SetUInt( $8000);
 CL.AddConstantN('VK_LBUTTON','LongInt').SetInt( 1);
 CL.AddConstantN('VK_RBUTTON','LongInt').SetInt( 2);
 CL.AddConstantN('VK_CANCEL','LongInt').SetInt( 3);
 CL.AddConstantN('VK_MBUTTON','LongInt').SetInt( 4);
 CL.AddConstantN('VK_XBUTTON1','LongInt').SetInt( 5);
 CL.AddConstantN('VK_XBUTTON2','LongInt').SetInt( 6);
 CL.AddConstantN('VK_BACK','LongInt').SetInt( 8);
 CL.AddConstantN('VK_TAB','LongInt').SetInt( 9);
 CL.AddConstantN('VK_CLEAR','LongInt').SetInt( 12);
 CL.AddConstantN('VK_RETURN','LongInt').SetInt( 13);
 CL.AddConstantN('VK_SHIFT','LongWord').SetUInt( $10);
 CL.AddConstantN('VK_CONTROL','LongInt').SetInt( 17);
 CL.AddConstantN('VK_MENU','LongInt').SetInt( 18);
 CL.AddConstantN('VK_PAUSE','LongInt').SetInt( 19);
 CL.AddConstantN('VK_CAPITAL','LongInt').SetInt( 20);
 CL.AddConstantN('VK_KANA','LongInt').SetInt( 21);
 CL.AddConstantN('VK_HANGUL','LongInt').SetInt( 21);
 CL.AddConstantN('VK_JUNJA','LongInt').SetInt( 23);
 CL.AddConstantN('VK_FINAL','LongInt').SetInt( 24);
 CL.AddConstantN('VK_HANJA','LongInt').SetInt( 25);
 CL.AddConstantN('VK_KANJI','LongInt').SetInt( 25);
 CL.AddConstantN('VK_CONVERT','LongInt').SetInt( 28);
 CL.AddConstantN('VK_NONCONVERT','LongInt').SetInt( 29);
 CL.AddConstantN('VK_ACCEPT','LongInt').SetInt( 30);
 CL.AddConstantN('VK_MODECHANGE','LongInt').SetInt( 31);
 CL.AddConstantN('VK_ESCAPE','LongInt').SetInt( 27);
 CL.AddConstantN('VK_SPACE','LongWord').SetUInt( $20);
 CL.AddConstantN('VK_PRIOR','LongInt').SetInt( 33);
 CL.AddConstantN('VK_NEXT','LongInt').SetInt( 34);
 CL.AddConstantN('VK_END','LongInt').SetInt( 35);
 CL.AddConstantN('VK_HOME','LongInt').SetInt( 36);
 CL.AddConstantN('VK_LEFT','LongInt').SetInt( 37);
 CL.AddConstantN('VK_UP','LongInt').SetInt( 38);
 CL.AddConstantN('VK_RIGHT','LongInt').SetInt( 39);
 CL.AddConstantN('VK_DOWN','LongInt').SetInt( 40);
 CL.AddConstantN('VK_SELECT','LongInt').SetInt( 41);
 CL.AddConstantN('VK_PRINT','LongInt').SetInt( 42);
 CL.AddConstantN('VK_EXECUTE','LongInt').SetInt( 43);
 CL.AddConstantN('VK_SNAPSHOT','LongInt').SetInt( 44);
 CL.AddConstantN('VK_INSERT','LongInt').SetInt( 45);
 CL.AddConstantN('VK_DELETE','LongInt').SetInt( 46);
 CL.AddConstantN('VK_HELP','LongInt').SetInt( 47);
 CL.AddConstantN('VK_LWIN','LongInt').SetInt( 91);
 CL.AddConstantN('VK_RWIN','LongInt').SetInt( 92);
 CL.AddConstantN('VK_APPS','LongInt').SetInt( 93);
 CL.AddConstantN('VK_SLEEP','LongInt').SetInt( 95);
 CL.AddConstantN('VK_NUMPAD0','LongInt').SetInt( 96);
 CL.AddConstantN('VK_NUMPAD1','LongInt').SetInt( 97);
 CL.AddConstantN('VK_NUMPAD2','LongInt').SetInt( 98);
 CL.AddConstantN('VK_NUMPAD3','LongInt').SetInt( 99);
 CL.AddConstantN('VK_NUMPAD4','LongInt').SetInt( 100);
 CL.AddConstantN('VK_NUMPAD5','LongInt').SetInt( 101);
 CL.AddConstantN('VK_NUMPAD6','LongInt').SetInt( 102);
 CL.AddConstantN('VK_NUMPAD7','LongInt').SetInt( 103);
 CL.AddConstantN('VK_NUMPAD8','LongInt').SetInt( 104);
 CL.AddConstantN('VK_NUMPAD9','LongInt').SetInt( 105);
 CL.AddConstantN('VK_MULTIPLY','LongInt').SetInt( 106);
 CL.AddConstantN('VK_ADD','LongInt').SetInt( 107);
 CL.AddConstantN('VK_SEPARATOR','LongInt').SetInt( 108);
 CL.AddConstantN('VK_SUBTRACT','LongInt').SetInt( 109);
 CL.AddConstantN('VK_DECIMAL','LongInt').SetInt( 110);
 CL.AddConstantN('VK_DIVIDE','LongInt').SetInt( 111);
 CL.AddConstantN('VK_F1','LongInt').SetInt( 112);
 CL.AddConstantN('VK_F2','LongInt').SetInt( 113);
 CL.AddConstantN('VK_F3','LongInt').SetInt( 114);
 CL.AddConstantN('VK_F4','LongInt').SetInt( 115);
 CL.AddConstantN('VK_F5','LongInt').SetInt( 116);
 CL.AddConstantN('VK_F6','LongInt').SetInt( 117);
 CL.AddConstantN('VK_F7','LongInt').SetInt( 118);
 CL.AddConstantN('VK_F8','LongInt').SetInt( 119);
 CL.AddConstantN('VK_F9','LongInt').SetInt( 120);
 CL.AddConstantN('VK_F10','LongInt').SetInt( 121);
 CL.AddConstantN('VK_F11','LongInt').SetInt( 122);
 CL.AddConstantN('VK_F12','LongInt').SetInt( 123);
 CL.AddConstantN('VK_F13','LongInt').SetInt( 124);
 CL.AddConstantN('VK_F14','LongInt').SetInt( 125);
 CL.AddConstantN('VK_F15','LongInt').SetInt( 126);
 CL.AddConstantN('VK_F16','LongInt').SetInt( 127);
 CL.AddConstantN('VK_F17','LongInt').SetInt( 128);
 CL.AddConstantN('VK_F18','LongInt').SetInt( 129);
 CL.AddConstantN('VK_F19','LongInt').SetInt( 130);
 CL.AddConstantN('VK_F20','LongInt').SetInt( 131);
 CL.AddConstantN('VK_F21','LongInt').SetInt( 132);
 CL.AddConstantN('VK_F22','LongInt').SetInt( 133);
 CL.AddConstantN('VK_F23','LongInt').SetInt( 134);
 CL.AddConstantN('VK_F24','LongInt').SetInt( 135);
 CL.AddConstantN('VK_NUMLOCK','LongInt').SetInt( 144);
 CL.AddConstantN('VK_SCROLL','LongInt').SetInt( 145);
 CL.AddConstantN('VK_LSHIFT','LongInt').SetInt( 160);
 CL.AddConstantN('VK_RSHIFT','LongInt').SetInt( 161);
 CL.AddConstantN('VK_LCONTROL','LongInt').SetInt( 162);
 CL.AddConstantN('VK_RCONTROL','LongInt').SetInt( 163);
 CL.AddConstantN('VK_LMENU','LongInt').SetInt( 164);
 CL.AddConstantN('VK_RMENU','LongInt').SetInt( 165);
 CL.AddConstantN('VK_BROWSER_BACK','LongInt').SetInt( 166);
 CL.AddConstantN('VK_BROWSER_FORWARD','LongInt').SetInt( 167);
 CL.AddConstantN('VK_BROWSER_REFRESH','LongInt').SetInt( 168);
 CL.AddConstantN('VK_BROWSER_STOP','LongInt').SetInt( 169);
 CL.AddConstantN('VK_BROWSER_SEARCH','LongInt').SetInt( 170);
 CL.AddConstantN('VK_BROWSER_FAVORITES','LongInt').SetInt( 171);
 CL.AddConstantN('VK_BROWSER_HOME','LongInt').SetInt( 172);
 CL.AddConstantN('VK_VOLUME_MUTE','LongInt').SetInt( 173);
 CL.AddConstantN('VK_VOLUME_DOWN','LongInt').SetInt( 174);
 CL.AddConstantN('VK_VOLUME_UP','LongInt').SetInt( 175);
 CL.AddConstantN('VK_MEDIA_NEXT_TRACK','LongInt').SetInt( 176);
 CL.AddConstantN('VK_MEDIA_PREV_TRACK','LongInt').SetInt( 177);
 CL.AddConstantN('VK_MEDIA_STOP','LongInt').SetInt( 178);
 CL.AddConstantN('VK_MEDIA_PLAY_PAUSE','LongInt').SetInt( 179);
 CL.AddConstantN('VK_LAUNCH_MAIL','LongInt').SetInt( 180);
 CL.AddConstantN('VK_LAUNCH_MEDIA_SELECT','LongInt').SetInt( 181);
 CL.AddConstantN('VK_LAUNCH_APP1','LongInt').SetInt( 182);
 CL.AddConstantN('VK_LAUNCH_APP2','LongInt').SetInt( 183);
 CL.AddConstantN('VK_OEM_1','LongInt').SetInt( 186);
 CL.AddConstantN('VK_OEM_PLUS','LongInt').SetInt( 187);
 CL.AddConstantN('VK_OEM_COMMA','LongInt').SetInt( 188);
 CL.AddConstantN('VK_OEM_MINUS','LongInt').SetInt( 189);
 CL.AddConstantN('VK_OEM_PERIOD','LongInt').SetInt( 190);
 CL.AddConstantN('VK_OEM_2','LongInt').SetInt( 191);
 CL.AddConstantN('VK_OEM_3','LongInt').SetInt( 192);
 CL.AddConstantN('VK_OEM_4','LongInt').SetInt( 219);
 CL.AddConstantN('VK_OEM_5','LongInt').SetInt( 220);
 CL.AddConstantN('VK_OEM_6','LongInt').SetInt( 221);
 CL.AddConstantN('VK_OEM_7','LongInt').SetInt( 222);
 CL.AddConstantN('VK_OEM_8','LongInt').SetInt( 223);
 CL.AddConstantN('VK_OEM_102','LongInt').SetInt( 226);
 CL.AddConstantN('VK_PACKET','LongInt').SetInt( 231);
 CL.AddConstantN('VK_PROCESSKEY','LongInt').SetInt( 229);
 CL.AddConstantN('VK_ATTN','LongInt').SetInt( 246);
 CL.AddConstantN('VK_CRSEL','LongInt').SetInt( 247);
 CL.AddConstantN('VK_EXSEL','LongInt').SetInt( 248);
 CL.AddConstantN('VK_EREOF','LongInt').SetInt( 249);
 CL.AddConstantN('VK_PLAY','LongInt').SetInt( 250);
 CL.AddConstantN('VK_ZOOM','LongInt').SetInt( 251);
 CL.AddConstantN('VK_NONAME','LongInt').SetInt( 252);
 CL.AddConstantN('VK_PA1','LongInt').SetInt( 253);
 CL.AddConstantN('VK_OEM_CLEAR','LongInt').SetInt( 254);
 CL.AddConstantN('WH_MIN','LongInt').SetInt( - 1);
 CL.AddConstantN('WH_MSGFILTER','LongInt').SetInt( - 1);
 CL.AddConstantN('WH_JOURNALRECORD','LongInt').SetInt( 0);
 CL.AddConstantN('WH_JOURNALPLAYBACK','LongInt').SetInt( 1);
 CL.AddConstantN('WH_KEYBOARD','LongInt').SetInt( 2);
 CL.AddConstantN('WH_GETMESSAGE','LongInt').SetInt( 3);
 CL.AddConstantN('WH_CALLWNDPROC','LongInt').SetInt( 4);
 CL.AddConstantN('WH_CBT','LongInt').SetInt( 5);
 CL.AddConstantN('WH_SYSMSGFILTER','LongInt').SetInt( 6);
 CL.AddConstantN('WH_MOUSE','LongInt').SetInt( 7);
 CL.AddConstantN('WH_HARDWARE','LongInt').SetInt( 8);
 CL.AddConstantN('WH_DEBUG','LongInt').SetInt( 9);
 CL.AddConstantN('WH_SHELL','LongInt').SetInt( 10);
 CL.AddConstantN('WH_FOREGROUNDIDLE','LongInt').SetInt( 11);
 CL.AddConstantN('WH_CALLWNDPROCRET','LongInt').SetInt( 12);
 CL.AddConstantN('WH_MAX','LongInt').SetInt( 12);
 CL.AddConstantN('WH_MINHOOK','').SetString( WH_MIN);
 CL.AddConstantN('WH_MAXHOOK','').SetString( WH_MAX);
 CL.AddConstantN('HC_ACTION','LongInt').SetInt( 0);
 CL.AddConstantN('HC_GETNEXT','LongInt').SetInt( 1);
 CL.AddConstantN('HC_SKIP','LongInt').SetInt( 2);
 CL.AddConstantN('HC_NOREMOVE','LongInt').SetInt( 3);
 CL.AddConstantN('HC_NOREM','').SetString( HC_NOREMOVE);
 CL.AddConstantN('HC_SYSMODALON','LongInt').SetInt( 4);
 CL.AddConstantN('HC_SYSMODALOFF','LongInt').SetInt( 5);
 CL.AddConstantN('HCBT_MOVESIZE','LongInt').SetInt( 0);
 CL.AddConstantN('HCBT_MINMAX','LongInt').SetInt( 1);
 CL.AddConstantN('HCBT_QS','LongInt').SetInt( 2);
 CL.AddConstantN('HCBT_CREATEWND','LongInt').SetInt( 3);
 CL.AddConstantN('HCBT_DESTROYWND','LongInt').SetInt( 4);
 CL.AddConstantN('HCBT_ACTIVATE','LongInt').SetInt( 5);
 CL.AddConstantN('HCBT_CLICKSKIPPED','LongInt').SetInt( 6);
 CL.AddConstantN('HCBT_KEYSKIPPED','LongInt').SetInt( 7);
 CL.AddConstantN('HCBT_SYSCOMMAND','LongInt').SetInt( 8);
 CL.AddConstantN('HCBT_SETFOCUS','LongInt').SetInt( 9);
  CL.AddTypeS('PCreateStructA', '^TCreateStructA // will not work');
  CL.AddTypeS('PCreateStructW', '^TCreateStructW // will not work');
  CL.AddTypeS('PCreateStruct', 'PCreateStructA');
  CL.AddTypeS('tagCREATESTRUCTA', 'record lpCreateParams : Pointer; hInstance :'
   +' HINST; hMenu : HMENU; hwndParent : HWND; cy : Integer; cx : Integer; y : '
   +'Integer; x : Integer; style : Longint; lpszName : PAnsiChar; lpszClass : P'
   +'AnsiChar; dwExStyle : DWORD; end');
  CL.AddTypeS('tagCREATESTRUCTW', 'record lpCreateParams : Pointer; hInstance :'
   +' HINST; hMenu : HMENU; hwndParent : HWND; cy : Integer; cx : Integer; y : '
   +'Integer; x : Integer; style : Longint; lpszName : PWideChar; lpszClass : P'
   +'WideChar; dwExStyle : DWORD; end');
  CL.AddTypeS('tagCREATESTRUCT', 'tagCREATESTRUCTA');
  CL.AddTypeS('TCreateStructA', 'tagCREATESTRUCTA');
  CL.AddTypeS('TCreateStructW', 'tagCREATESTRUCTW');
  CL.AddTypeS('TCreateStruct', 'TCreateStructA');
  CL.AddTypeS('CREATESTRUCTA', 'tagCREATESTRUCTA');
  CL.AddTypeS('CREATESTRUCTW', 'tagCREATESTRUCTW');
  CL.AddTypeS('CREATESTRUCT', 'CREATESTRUCTA');
  CL.AddTypeS('PCBTCreateWnd', '^TCBTCreateWnd // will not work');
  CL.AddTypeS('tagCBT_CREATEWNDA', 'record lpcs : PCreateStruct; hwndInsertAfte'
   +'r : HWND; end');
  CL.AddTypeS('TCBTCreateWnd', 'tagCBT_CREATEWNDA');
  CL.AddTypeS('CBT_CREATEWND', 'tagCBT_CREATEWNDA');
  CL.AddTypeS('PCBTActivateStruct', '^TCBTActivateStruct // will not work');
  CL.AddTypeS('tagCBTACTIVATESTRUCT', 'record fMouse : BOOL; hWndActive : HWND;'
   +' end');
  CL.AddTypeS('TCBTActivateStruct', 'tagCBTACTIVATESTRUCT');
  CL.AddTypeS('CBTACTIVATESTRUCT', 'tagCBTACTIVATESTRUCT');
 CL.AddConstantN('WTS_CONSOLE_CONNECT','LongWord').SetUInt( $1);
 CL.AddConstantN('WTS_CONSOLE_DISCONNECT','LongWord').SetUInt( $2);
 CL.AddConstantN('WTS_REMOTE_CONNECT','LongWord').SetUInt( $3);
 CL.AddConstantN('WTS_REMOTE_DISCONNECT','LongWord').SetUInt( $4);
 CL.AddConstantN('WTS_SESSION_LOGON','LongWord').SetUInt( $5);
 CL.AddConstantN('WTS_SESSION_LOGOFF','LongWord').SetUInt( $6);
 CL.AddConstantN('WTS_SESSION_LOCK','LongWord').SetUInt( $7);
 CL.AddConstantN('WTS_SESSION_UNLOCK','LongWord').SetUInt( $8);
 CL.AddConstantN('MSGF_DIALOGBOX','LongInt').SetInt( 0);
 CL.AddConstantN('MSGF_MESSAGEBOX','LongInt').SetInt( 1);
 CL.AddConstantN('MSGF_MENU','LongInt').SetInt( 2);
 CL.AddConstantN('MSGF_MOVE','LongInt').SetInt( 3);
 CL.AddConstantN('MSGF_SIZE','LongInt').SetInt( 4);
 CL.AddConstantN('MSGF_SCROLLBAR','LongInt').SetInt( 5);
 CL.AddConstantN('MSGF_NEXTWINDOW','LongInt').SetInt( 6);
 CL.AddConstantN('MSGF_MAINLOOP','LongInt').SetInt( 8);
 CL.AddConstantN('MSGF_MAX','LongInt').SetInt( 8);
 CL.AddConstantN('MSGF_USER','LongWord').SetUInt( $1000);
 CL.AddConstantN('HSHELL_WINDOWCREATED','LongInt').SetInt( 1);
 CL.AddConstantN('HSHELL_WINDOWDESTROYED','LongInt').SetInt( 2);
 CL.AddConstantN('HSHELL_ACTIVATESHELLWINDOW','LongInt').SetInt( 3);
 CL.AddConstantN('HSHELL_WINDOWACTIVATED','LongInt').SetInt( 4);
 CL.AddConstantN('HSHELL_GETMINRECT','LongInt').SetInt( 5);
 CL.AddConstantN('HSHELL_REDRAW','LongInt').SetInt( 6);
 CL.AddConstantN('HSHELL_TASKMAN','LongInt').SetInt( 7);
 CL.AddConstantN('HSHELL_LANGUAGE','LongInt').SetInt( 8);
 CL.AddConstantN('HSHELL_ACCESSIBILITYSTATE','LongInt').SetInt( 11);
 CL.AddConstantN('HSHELL_APPCOMMAND','LongInt').SetInt( 12);
 CL.AddConstantN('HSHELL_WINDOWREPLACED','LongInt').SetInt( 13);
 CL.AddConstantN('ACCESS_STICKYKEYS','LongWord').SetUInt( $0001);
 CL.AddConstantN('ACCESS_FILTERKEYS','LongWord').SetUInt( $0002);
 CL.AddConstantN('ACCESS_MOUSEKEYS','LongWord').SetUInt( $0003);
 CL.AddConstantN('APPCOMMAND_BROWSER_BACKWARD','LongInt').SetInt( 1);
 CL.AddConstantN('APPCOMMAND_BROWSER_FORWARD','LongInt').SetInt( 2);
 CL.AddConstantN('APPCOMMAND_BROWSER_REFRESH','LongInt').SetInt( 3);
 CL.AddConstantN('APPCOMMAND_BROWSER_STOP','LongInt').SetInt( 4);
 CL.AddConstantN('APPCOMMAND_BROWSER_SEARCH','LongInt').SetInt( 5);
 CL.AddConstantN('APPCOMMAND_BROWSER_FAVORITES','LongInt').SetInt( 6);
 CL.AddConstantN('APPCOMMAND_BROWSER_HOME','LongInt').SetInt( 7);
 CL.AddConstantN('APPCOMMAND_VOLUME_MUTE','LongInt').SetInt( 8);
 CL.AddConstantN('APPCOMMAND_VOLUME_DOWN','LongInt').SetInt( 9);
 CL.AddConstantN('APPCOMMAND_VOLUME_UP','LongInt').SetInt( 10);
 CL.AddConstantN('APPCOMMAND_MEDIA_NEXTTRACK','LongInt').SetInt( 11);
 CL.AddConstantN('APPCOMMAND_MEDIA_PREVIOUSTRACK','LongInt').SetInt( 12);
 CL.AddConstantN('APPCOMMAND_MEDIA_STOP','LongInt').SetInt( 13);
 CL.AddConstantN('APPCOMMAND_MEDIA_PLAY_PAUSE','LongInt').SetInt( 14);
 CL.AddConstantN('APPCOMMAND_LAUNCH_MAIL','LongInt').SetInt( 15);
 CL.AddConstantN('APPCOMMAND_LAUNCH_MEDIA_SELECT','LongInt').SetInt( 16);
 CL.AddConstantN('APPCOMMAND_LAUNCH_APP1','LongInt').SetInt( 17);
 CL.AddConstantN('APPCOMMAND_LAUNCH_APP2','LongInt').SetInt( 18);
 CL.AddConstantN('APPCOMMAND_BASS_DOWN','LongInt').SetInt( 19);
 CL.AddConstantN('APPCOMMAND_BASS_BOOST','LongInt').SetInt( 20);
 CL.AddConstantN('APPCOMMAND_BASS_UP','LongInt').SetInt( 21);
 CL.AddConstantN('APPCOMMAND_TREBLE_DOWN','LongInt').SetInt( 22);
 CL.AddConstantN('APPCOMMAND_TREBLE_UP','LongInt').SetInt( 23);
 CL.AddConstantN('APPCOMMAND_MICROPHONE_VOLUME_MUTE','LongInt').SetInt( 24);
 CL.AddConstantN('APPCOMMAND_MICROPHONE_VOLUME_DOWN','LongInt').SetInt( 25);
 CL.AddConstantN('APPCOMMAND_MICROPHONE_VOLUME_UP','LongInt').SetInt( 26);
 CL.AddConstantN('APPCOMMAND_HELP','LongInt').SetInt( 27);
 CL.AddConstantN('APPCOMMAND_FIND','LongInt').SetInt( 28);
 CL.AddConstantN('APPCOMMAND_NEW','LongInt').SetInt( 29);
 CL.AddConstantN('APPCOMMAND_OPEN','LongInt').SetInt( 30);
 CL.AddConstantN('APPCOMMAND_CLOSE','LongInt').SetInt( 31);
 CL.AddConstantN('APPCOMMAND_SAVE','LongInt').SetInt( 32);
 CL.AddConstantN('APPCOMMAND_PRINT','LongInt').SetInt( 33);
 CL.AddConstantN('APPCOMMAND_UNDO','LongInt').SetInt( 34);
 CL.AddConstantN('APPCOMMAND_REDO','LongInt').SetInt( 35);
 CL.AddConstantN('APPCOMMAND_COPY','LongInt').SetInt( 36);
 CL.AddConstantN('APPCOMMAND_CUT','LongInt').SetInt( 37);
 CL.AddConstantN('APPCOMMAND_PASTE','LongInt').SetInt( 38);
 CL.AddConstantN('APPCOMMAND_REPLY_TO_MAIL','LongInt').SetInt( 39);
 CL.AddConstantN('APPCOMMAND_FORWARD_MAIL','LongInt').SetInt( 40);
 CL.AddConstantN('APPCOMMAND_SEND_MAIL','LongInt').SetInt( 41);
 CL.AddConstantN('APPCOMMAND_SPELL_CHECK','LongInt').SetInt( 42);
 CL.AddConstantN('APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE','LongInt').SetInt( 43);
 CL.AddConstantN('APPCOMMAND_MIC_ON_OFF_TOGGLE','LongInt').SetInt( 44);
 CL.AddConstantN('APPCOMMAND_CORRECTION_LIST','LongInt').SetInt( 45);
 CL.AddConstantN('APPCOMMAND_MEDIA_PLAY','LongInt').SetInt( 46);
 CL.AddConstantN('APPCOMMAND_MEDIA_PAUSE','LongInt').SetInt( 47);
 CL.AddConstantN('APPCOMMAND_MEDIA_RECORD','LongInt').SetInt( 48);
 CL.AddConstantN('APPCOMMAND_MEDIA_FAST_FORWARD','LongInt').SetInt( 49);
 CL.AddConstantN('APPCOMMAND_MEDIA_REWIND','LongInt').SetInt( 50);
 CL.AddConstantN('APPCOMMAND_MEDIA_CHANNEL_UP','LongInt').SetInt( 51);
 CL.AddConstantN('APPCOMMAND_MEDIA_CHANNEL_DOWN','LongInt').SetInt( 52);
 CL.AddConstantN('APPCOMMAND_DELETE','LongInt').SetInt( 53);
 CL.AddConstantN('APPCOMMAND_DWM_FLIP3D','LongInt').SetInt( 54);
 CL.AddConstantN('FAPPCOMMAND_MOUSE','LongWord').SetUInt( $8000);
 CL.AddConstantN('FAPPCOMMAND_KEY','LongInt').SetInt( 0);
 CL.AddConstantN('FAPPCOMMAND_OEM','LongWord').SetUInt( $1000);
 CL.AddConstantN('FAPPCOMMAND_MASK','LongWord').SetUInt( $F000);
 CL.AddDelphiFunction('Function GET_APPCOMMAND_LPARAM( const lParam : LongInt) : Shortint');
 CL.AddDelphiFunction('Function GET_DEVICE_LPARAM( const lParam : LongInt) : Word');
 CL.AddDelphiFunction('Function GET_MOUSEORKEY_LPARAM( const lParam : LongInt) : Word');
 CL.AddDelphiFunction('Function GET_FLAGS_LPARAM( const lParam : LongInt) : Word');
 CL.AddDelphiFunction('Function GET_KEYSTATE_LPARAM( const lParam : LongInt) : Word');
  CL.AddTypeS('PEventMsg', '^TEventMsg // will not work');
  CL.AddTypeS('tagEVENTMSG', 'record message : UINT; paramL : UINT; paramH : UI'
   +'NT; time : DWORD; hwnd : HWND; end');
  CL.AddTypeS('TEventMsg', 'tagEVENTMSG');
  CL.AddTypeS('EVENTMSG', 'tagEVENTMSG');
  CL.AddTypeS('PCWPStruct', '^TCWPStruct // will not work');
  CL.AddTypeS('tagCWPSTRUCT', 'record lParam : LPARAM; wParam : WPARAM; message'
   +' : UINT; hwnd : HWND; end');
  CL.AddTypeS('TCWPStruct', 'tagCWPSTRUCT');
  CL.AddTypeS('CWPSTRUCT', 'tagCWPSTRUCT');
  CL.AddTypeS('PCWPRetStruct', '^TCWPRetStruct // will not work');
  CL.AddTypeS('tagCWPRETSTRUCT', 'record lResult : LRESULT; lParam : LPARAM; wP'
   +'aram : WPARAM; message : UINT; hwnd : HWND; end');
  CL.AddTypeS('TCWPRetStruct', 'tagCWPRETSTRUCT');
  CL.AddTypeS('CWPRETSTRUCT', 'tagCWPRETSTRUCT');
  CL.AddTypeS('PDebugHookInfo', '^TDebugHookInfo // will not work');
  CL.AddTypeS('tagDEBUGHOOKINFO', 'record idThread : DWORD; idThreadInstaller :'
   +' DWORD; lParam : LPARAM; wParam : WPARAM; code : Integer; end');
  CL.AddTypeS('TDebugHookInfo', 'tagDEBUGHOOKINFO');
  CL.AddTypeS('DEBUGHOOKINFO', 'tagDEBUGHOOKINFO');
  CL.AddTypeS('PMouseHookStruct', '^TMouseHookStruct // will not work');
  CL.AddTypeS('tagMOUSEHOOKSTRUCT', 'record pt : TPoint; hwnd : HWND; wHitTestC'
   +'ode : UINT; dwExtraInfo : DWORD; end');
  CL.AddTypeS('TMouseHookStruct', 'tagMOUSEHOOKSTRUCT');
  CL.AddTypeS('MOUSEHOOKSTRUCT', 'tagMOUSEHOOKSTRUCT');
  CL.AddTypeS('PHardwareHookStruct', '^THardwareHookStruct // will not work');
  CL.AddTypeS('tagHARDWAREHOOKSTRUCT', 'record hwnd : HWND; message : UINT; wPa'
   +'ram : WPARAM; lParam : LPARAM; end');
  CL.AddTypeS('THardwareHookStruct', 'tagHARDWAREHOOKSTRUCT');
  CL.AddTypeS('HARDWAREHOOKSTRUCT', 'tagHARDWAREHOOKSTRUCT');
 CL.AddConstantN('HKL_PREV','LongInt').SetInt( 0);
 CL.AddConstantN('HKL_NEXT','LongInt').SetInt( 1);
 CL.AddConstantN('KLF_ACTIVATE','LongInt').SetInt( 1);
 CL.AddConstantN('KLF_SUBSTITUTE_OK','LongInt').SetInt( 2);
 CL.AddConstantN('KLF_UNLOADPREVIOUS','LongInt').SetInt( 4);
 CL.AddConstantN('KLF_REORDER','LongInt').SetInt( 8);
 CL.AddConstantN('KLF_REPLACELANG','LongWord').SetUInt( $10);
 CL.AddConstantN('KLF_NOTELLSHELL','LongInt').SetInt( 128);
 CL.AddConstantN('KL_NAMELENGTH','LongInt').SetInt( 9);
 CL.AddDelphiFunction('Function LoadKeyboardLayout( pwszKLID : PChar; Flags : UINT) : HKL');
 CL.AddDelphiFunction('Function LoadKeyboardLayoutA( pwszKLID : PAnsiChar; Flags : UINT) : HKL');
 CL.AddDelphiFunction('Function LoadKeyboardLayoutW( pwszKLID : PWideChar; Flags : UINT) : HKL');
 CL.AddDelphiFunction('Function ActivateKeyboardLayout( hkl : HKL; Flags : UINT) : HKL');
 CL.AddDelphiFunction('Function UnloadKeyboardLayout( hkl : HKL) : BOOL');
 CL.AddDelphiFunction('Function ToUnicodeEx( wVirtKey, wScanCode : UINT; lpKeyState : PByte; pwszBuff : PWideChar; cchBuff : Integer; wFlags : UINT; dwhkl : HKL) : Integer');
 CL.AddDelphiFunction('Function GetKeyboardLayoutName( pwszKLID : PChar) : BOOL');
 CL.AddDelphiFunction('Function GetKeyboardLayoutNameA( pwszKLID : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function GetKeyboardLayoutNameW( pwszKLID : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetKeyboardLayoutList( nBuff : Integer; var List) : UINT');
 CL.AddDelphiFunction('Function GetKeyboardLayout( dwLayout : DWORD) : HKL');
  CL.AddTypeS('PMouseMovePoint', '^TMouseMovePoint // will not work');
  CL.AddTypeS('tagMOUSEMOVEPOINT', 'record x : Integer; y : Integer; time : DWO'
   +'RD; dwExtraInfo : DWORD; end');
  CL.AddTypeS('TMouseMovePoint', 'tagMOUSEMOVEPOINT');
  CL.AddTypeS('MOUSEMOVEPOINT', 'tagMOUSEMOVEPOINT');
 CL.AddConstantN('GMMP_USE_DISPLAY_POINTS','LongInt').SetInt( 1);
 CL.AddConstantN('GMMP_USE_DRIVER_POINTS','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Function GetMouseMovePoints( cbSize : UINT; var lppt, lpptBuf : TMouseMovePoint; nBufPoints : Integer; resolution : DWORD) : Integer');
 CL.AddConstantN('DESKTOP_READOBJECTS','LongInt').SetInt( 1);
 CL.AddConstantN('DESKTOP_CREATEWINDOW','LongInt').SetInt( 2);
 CL.AddConstantN('DESKTOP_CREATEMENU','LongInt').SetInt( 4);
 CL.AddConstantN('DESKTOP_HOOKCONTROL','LongInt').SetInt( 8);
 CL.AddConstantN('DESKTOP_JOURNALRECORD','LongWord').SetUInt( $10);
 CL.AddConstantN('DESKTOP_JOURNALPLAYBACK','LongWord').SetUInt( $20);
 CL.AddConstantN('DESKTOP_ENUMERATE','LongWord').SetUInt( $40);
 CL.AddConstantN('DESKTOP_WRITEOBJECTS','LongInt').SetInt( 128);
 CL.AddConstantN('DESKTOP_SWITCHDESKTOP','LongWord').SetUInt( $100);
 CL.AddConstantN('DF_ALLOWOTHERACCOUNTHOOK','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function CreateDesktop( lpszDesktop, lpszDevice : PChar; pDevmode : PDeviceMode; dwFlags : DWORD; dwDesiredAccess : DWORD; lpsa : PSecurityAttributes) : HDESK');
 CL.AddDelphiFunction('Function CreateDesktopA( lpszDesktop, lpszDevice : PAnsiChar; pDevmode : PDeviceModeA; dwFlags : DWORD; dwDesiredAccess : DWORD; lpsa : PSecurityAttributes) : HDESK');
 CL.AddDelphiFunction('Function CreateDesktopW( lpszDesktop, lpszDevice : PWideChar; pDevmode : PDeviceModeW; dwFlags : DWORD; dwDesiredAccess : DWORD; lpsa : PSecurityAttributes) : HDESK');
 CL.AddDelphiFunction('Function OpenDesktop( lpszDesktop : PChar; dwFlags : DWORD; fInherit : BOOL; dwDesiredAccess : DWORD) : HDESK');
 CL.AddDelphiFunction('Function OpenDesktopA( lpszDesktop : PAnsiChar; dwFlags : DWORD; fInherit : BOOL; dwDesiredAccess : DWORD) : HDESK');
 CL.AddDelphiFunction('Function OpenDesktopW( lpszDesktop : PWideChar; dwFlags : DWORD; fInherit : BOOL; dwDesiredAccess : DWORD) : HDESK');
 CL.AddDelphiFunction('Function EnumDesktops( hwinsta : HWINSTA; lpEnumFunc : TFNDeskTopEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumDesktopsA( hwinsta : HWINSTA; lpEnumFunc : TFNDeskTopEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumDesktopsW( hwinsta : HWINSTA; lpEnumFunc : TFNDeskTopEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function OpenInputDesktop( dwFlags : DWORD; fInherit : BOOL; dwDesiredAccess : DWORD) : HDESK');
 CL.AddDelphiFunction('Function EnumDesktopWindows( hDesktop : HDESK; lpfn : TFNWndEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function SwitchDesktop( hDesktop : HDESK) : BOOL');
 CL.AddDelphiFunction('Function SetThreadDesktop( hDesktop : HDESK) : BOOL');
 CL.AddDelphiFunction('Function CloseDesktop( hDesktop : HDESK) : BOOL');
 CL.AddDelphiFunction('Function GetThreadDesktop( dwThreadId : DWORD) : HDESK');
 CL.AddConstantN('WINSTA_ENUMDESKTOPS','LongInt').SetInt( 1);
 CL.AddConstantN('WINSTA_READATTRIBUTES','LongInt').SetInt( 2);
 CL.AddConstantN('WINSTA_ACCESSCLIPBOARD','LongInt').SetInt( 4);
 CL.AddConstantN('WINSTA_CREATEDESKTOP','LongInt').SetInt( 8);
 CL.AddConstantN('WINSTA_WRITEATTRIBUTES','LongWord').SetUInt( $10);
 CL.AddConstantN('WINSTA_ACCESSGLOBALATOMS','LongWord').SetUInt( $20);
 CL.AddConstantN('WINSTA_EXITWINDOWS','LongWord').SetUInt( $40);
 CL.AddConstantN('WINSTA_ENUMERATE','LongWord').SetUInt( $100);
 CL.AddConstantN('WINSTA_READSCREEN','LongWord').SetUInt( $200);
 CL.AddConstantN('WSF_VISIBLE','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function CreateWindowStation( lpwinsta : PChar; dwReserved, dwDesiredAccess : DWORD; lpsa : PSecurityAttributes) : HWINSTA');
 CL.AddDelphiFunction('Function CreateWindowStationA( lpwinsta : PAnsiChar; dwReserved, dwDesiredAccess : DWORD; lpsa : PSecurityAttributes) : HWINSTA');
 CL.AddDelphiFunction('Function CreateWindowStationW( lpwinsta : PWideChar; dwReserved, dwDesiredAccess : DWORD; lpsa : PSecurityAttributes) : HWINSTA');
 CL.AddDelphiFunction('Function OpenWindowStation( lpszWinSta : PChar; fInherit : BOOL; dwDesiredAccess : DWORD) : HWINSTA');
 CL.AddDelphiFunction('Function OpenWindowStationA( lpszWinSta : PAnsiChar; fInherit : BOOL; dwDesiredAccess : DWORD) : HWINSTA');
 CL.AddDelphiFunction('Function OpenWindowStationW( lpszWinSta : PWideChar; fInherit : BOOL; dwDesiredAccess : DWORD) : HWINSTA');
 CL.AddDelphiFunction('Function EnumWindowStations( lpEnumFunc : TFNWinStaEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumWindowStationsA( lpEnumFunc : TFNWinStaEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumWindowStationsW( lpEnumFunc : TFNWinStaEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function CloseWindowStation( hWinSta : HWINSTA) : BOOL');
 CL.AddDelphiFunction('Function SetProcessWindowStation( hWinSta : HWINSTA) : BOOL');
 CL.AddDelphiFunction('Function GetProcessWindowStation : HWINSTA');
 CL.AddDelphiFunction('Function SetUserObjectSecurity( hObj : THandle; var pSIRequested : DWORD; pSID : PSecurityDescriptor) : BOOL');
 CL.AddDelphiFunction('Function GetUserObjectSecurity( hObj : THandle; var pSIRequested : DWORD; pSID : PSecurityDescriptor; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddConstantN('UOI_FLAGS','LongInt').SetInt( 1);
 CL.AddConstantN('UOI_NAME','LongInt').SetInt( 2);
 CL.AddConstantN('UOI_TYPE','LongInt').SetInt( 3);
 CL.AddConstantN('UOI_USER_SID','LongInt').SetInt( 4);
  CL.AddTypeS('PUserObjectFlags', '^TUserObjectFlags // will not work');
  CL.AddTypeS('tagUSEROBJECTFLAGS', 'record fInherit : BOOL; fReserved : BOOL; '
   +'dwFlags : DWORD; end');
  CL.AddTypeS('TUserObjectFlags', 'tagUSEROBJECTFLAGS');
  CL.AddTypeS('USEROBJECTFLAGS', 'tagUSEROBJECTFLAGS');
 CL.AddDelphiFunction('Function GetUserObjectInformation( hObj : THandle; nIndex : Integer; pvInfo : Pointer; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetUserObjectInformationA( hObj : THandle; nIndex : Integer; pvInfo : Pointer; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetUserObjectInformationW( hObj : THandle; nIndex : Integer; pvInfo : Pointer; nLength : DWORD; var lpnLengthNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetUserObjectInformation( hObj : THandle; nIndex : Integer; pvInfo : Pointer; nLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetUserObjectInformationA( hObj : THandle; nIndex : Integer; pvInfo : Pointer; nLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SetUserObjectInformationW( hObj : THandle; nIndex : Integer; pvInfo : Pointer; nLength : DWORD) : BOOL');
  CL.AddTypeS('PWndClassExA', '^TWndClassExA // will not work');
  CL.AddTypeS('PWndClassExW', '^TWndClassExW // will not work');
  CL.AddTypeS('PWndClassEx', 'PWndClassExA');
  CL.AddTypeS('tagWNDCLASSEXA', 'record cbSize : UINT; style : UINT; lpfnWndPro'
   +'c : TFNWndProc; cbClsExtra : Integer; cbWndExtra : Integer; hInstance : HI'
   +'NST; hIcon : HICON; hCursor : HCURSOR; hbrBackground : HBRUSH; lpszMenuNam'
   +'e : PAnsiChar; lpszClassName : PAnsiChar; hIconSm : HICON; end');
  CL.AddTypeS('tagWNDCLASSEXW', 'record cbSize : UINT; style : UINT; lpfnWndPro'
   +'c : TFNWndProc; cbClsExtra : Integer; cbWndExtra : Integer; hInstance : HI'
   +'NST; hIcon : HICON; hCursor : HCURSOR; hbrBackground : HBRUSH; lpszMenuNam'
   +'e : PWideChar; lpszClassName : PWideChar; hIconSm : HICON; end');
  CL.AddTypeS('tagWNDCLASSEX', 'tagWNDCLASSEXA');
  CL.AddTypeS('TWndClassExA', 'tagWNDCLASSEXA');
  CL.AddTypeS('TWndClassExW', 'tagWNDCLASSEXW');
  CL.AddTypeS('TWndClassEx', 'TWndClassExA');
  CL.AddTypeS('WNDCLASSEXA', 'tagWNDCLASSEXA');
  CL.AddTypeS('WNDCLASSEXW', 'tagWNDCLASSEXW');
  CL.AddTypeS('WNDCLASSEX', 'WNDCLASSEXA');
  CL.AddTypeS('PWndClassA', '^TWndClassA // will not work');
  CL.AddTypeS('PWndClassW', '^TWndClassW // will not work');
  CL.AddTypeS('PWndClass', 'PWndClassA');
  CL.AddTypeS('tagWNDCLASSA', 'record style : UINT; lpfnWndProc : TFNWndProc; c'
   +'bClsExtra : Integer; cbWndExtra : Integer; hInstance : HINST; hIcon : HICO'
   +'N; hCursor : HCURSOR; hbrBackground : HBRUSH; lpszMenuName : PAnsiChar; lp'
   +'szClassName : PAnsiChar; end');
  CL.AddTypeS('tagWNDCLASSW', 'record style : UINT; lpfnWndProc : TFNWndProc; c'
   +'bClsExtra : Integer; cbWndExtra : Integer; hInstance : HINST; hIcon : HICO'
   +'N; hCursor : HCURSOR; hbrBackground : HBRUSH; lpszMenuName : PWideChar; lp'
   +'szClassName : PWideChar; end');
  CL.AddTypeS('tagWNDCLASS', 'tagWNDCLASSA');
  CL.AddTypeS('TWndClassA', 'tagWNDCLASSA');
  CL.AddTypeS('TWndClassW', 'tagWNDCLASSW');
  CL.AddTypeS('TWndClass', 'TWndClassA');
  CL.AddTypeS('WNDCLASSA', 'tagWNDCLASSA');
  CL.AddTypeS('WNDCLASSW', 'tagWNDCLASSW');
  CL.AddTypeS('WNDCLASS', 'WNDCLASSA');
  CL.AddTypeS('PMsg', '^TMsg // will not work');
  CL.AddTypeS('tagMSG', 'record hwnd : HWND; message : UINT; wParam : WPARAM; l'
   +'Param : LPARAM; time : DWORD; pt : TPoint; end');
  CL.AddTypeS('TMsg', 'tagMSG');
  CL.AddTypeS('MSG', 'tagMSG');
 CL.AddDelphiFunction('Function SmallPointToPoint( const P : TSmallPoint) : TPoint');
 CL.AddDelphiFunction('Function PointToSmallPoint( const P : TPoint) : TSmallPoint');
 CL.AddDelphiFunction('Function MakeWParam( l, h : Word) : WPARAM');
 CL.AddDelphiFunction('Function MakeLParam( l, h : Word) : LPARAM');
 CL.AddDelphiFunction('Function MakeLResult( l, h : Word) : LRESULT');
 CL.AddDelphiFunction('Function PointToLParam( P : TPoint) : LPARAM');
 CL.AddConstantN('GWL_WNDPROC','LongInt').SetInt( - 4);
 CL.AddConstantN('GWL_HINSTANCE','LongInt').SetInt( - 6);
 CL.AddConstantN('GWL_HWNDPARENT','LongInt').SetInt( - 8);
 CL.AddConstantN('GWL_STYLE','LongInt').SetInt( - 16);
 CL.AddConstantN('GWL_EXSTYLE','LongInt').SetInt( - 20);
 CL.AddConstantN('GWL_USERDATA','LongInt').SetInt( - 21);
 CL.AddConstantN('GWL_ID','LongInt').SetInt( - 12);
 CL.AddConstantN('GCL_MENUNAME','LongInt').SetInt( - 8);
 CL.AddConstantN('GCL_HBRBACKGROUND','LongInt').SetInt( - 10);
 CL.AddConstantN('GCL_HCURSOR','LongInt').SetInt( - 12);
 CL.AddConstantN('GCL_HICON','LongInt').SetInt( - 14);
 CL.AddConstantN('GCL_HMODULE','LongInt').SetInt( - 16);
 CL.AddConstantN('GCL_CBWNDEXTRA','LongInt').SetInt( - 18);
 CL.AddConstantN('GCL_CBCLSEXTRA','LongInt').SetInt( - 20);
 CL.AddConstantN('GCL_WNDPROC','LongInt').SetInt( - 24);
 CL.AddConstantN('GCL_STYLE','LongInt').SetInt( - 26);
 CL.AddConstantN('GCW_ATOM','LongInt').SetInt( - 32);
 CL.AddConstantN('GCL_HICONSM','LongInt').SetInt( - 34);
 CL.AddConstantN('WA_INACTIVE','LongInt').SetInt( 0);
 CL.AddConstantN('WA_ACTIVE','LongInt').SetInt( 1);
 CL.AddConstantN('WA_CLICKACTIVE','LongInt').SetInt( 2);
  CL.AddTypeS('PMinMaxInfo', '^TMinMaxInfo // will not work');
  CL.AddTypeS('tagMINMAXINFO', 'record ptReserved : TPoint; ptMaxSize : TPoint;'
   +' ptMaxPosition : TPoint; ptMinTrackSize : TPoint; ptMaxTrackSize : TPoint;'
   +' end');
  CL.AddTypeS('TMinMaxInfo', 'tagMINMAXINFO');
  CL.AddTypeS('MINMAXINFO', 'tagMINMAXINFO');
 CL.AddConstantN('PWR_OK','LongInt').SetInt( 1);
 CL.AddConstantN('PWR_FAIL','LongInt').SetInt( - 1);
 CL.AddConstantN('PWR_SUSPENDREQUEST','LongInt').SetInt( 1);
 CL.AddConstantN('PWR_SUSPENDRESUME','LongInt').SetInt( 2);
 CL.AddConstantN('PWR_CRITICALRESUME','LongInt').SetInt( 3);
  CL.AddTypeS('PCopyDataStruct', '^TCopyDataStruct // will not work');
  CL.AddTypeS('tagCOPYDATASTRUCT', 'record dwData : DWORD; cbData : DWORD; lpDa'
   +'ta : Pointer; end');
  CL.AddTypeS('TCopyDataStruct', 'tagCOPYDATASTRUCT');
  CL.AddTypeS('COPYDATASTRUCT', 'tagCOPYDATASTRUCT');
 CL.AddConstantN('NFR_ANSI','LongInt').SetInt( 1);
 CL.AddConstantN('NFR_UNICODE','LongInt').SetInt( 2);
 CL.AddConstantN('NF_QUERY','LongInt').SetInt( 3);
 CL.AddConstantN('NF_REQUERY','LongInt').SetInt( 4);
 CL.AddConstantN('WHEEL_DELTA','LongInt').SetInt( 120);
 CL.AddConstantN('WHEEL_PAGESCROLL','').SetString( MAXDWORD);
 CL.AddConstantN('MENULOOP_WINDOW','LongInt').SetInt( 0);
 CL.AddConstantN('MENULOOP_POPUP','LongInt').SetInt( 1);
  CL.AddTypeS('PMDINextMenu', '^TMDINextMenu // will not work');
  CL.AddTypeS('tagMDINEXTMENU', 'record hmenuIn : HMENU; hmenuNext : HMENU; hwn'
   +'dNext : HWND; end');
  CL.AddTypeS('TMDINextMenu', 'tagMDINEXTMENU');
  CL.AddTypeS('MDINEXTMENU', 'tagMDINEXTMENU');
 CL.AddConstantN('UNICODE_NOCHAR','LongWord').SetUInt( $FFFF);
 CL.AddConstantN('UIS_SET','LongInt').SetInt( 1);
 CL.AddConstantN('UIS_CLEAR','LongInt').SetInt( 2);
 CL.AddConstantN('UIS_INITIALIZE','LongInt').SetInt( 3);
 CL.AddConstantN('UISF_HIDEFOCUS','LongWord').SetUInt( $1);
 CL.AddConstantN('UISF_HIDEACCEL','LongWord').SetUInt( $2);
 CL.AddConstantN('UISF_ACTIVE','LongWord').SetUInt( $4);
 CL.AddConstantN('PBT_APMQUERYSUSPEND','LongWord').SetUInt( $0000);
 CL.AddConstantN('PBT_APMQUERYSTANDBY','LongWord').SetUInt( $0001);
 CL.AddConstantN('PBT_APMQUERYSUSPENDFAILED','LongWord').SetUInt( $0002);
 CL.AddConstantN('PBT_APMQUERYSTANDBYFAILED','LongWord').SetUInt( $0003);
 CL.AddConstantN('PBT_APMSUSPEND','LongWord').SetUInt( $0004);
 CL.AddConstantN('PBT_APMSTANDBY','LongWord').SetUInt( $0005);
 CL.AddConstantN('PBT_APMRESUMECRITICAL','LongWord').SetUInt( $0006);
 CL.AddConstantN('PBT_APMRESUMESUSPEND','LongWord').SetUInt( $0007);
 CL.AddConstantN('PBT_APMRESUMESTANDBY','LongWord').SetUInt( $0008);
 CL.AddConstantN('PBTF_APMRESUMEFROMFAILURE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('PBT_APMBATTERYLOW','LongWord').SetUInt( $0009);
 CL.AddConstantN('PBT_APMPOWERSTATUSCHANGE','LongWord').SetUInt( $000A);
 CL.AddConstantN('PBT_APMOEMEVENT','LongWord').SetUInt( $000B);
 CL.AddConstantN('PBT_APMRESUMEAUTOMATIC','LongWord').SetUInt( $0012);
 CL.AddConstantN('WMSZ_LEFT','LongInt').SetInt( 1);
 CL.AddConstantN('WMSZ_RIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('WMSZ_TOP','LongInt').SetInt( 3);
 CL.AddConstantN('WMSZ_TOPLEFT','LongInt').SetInt( 4);
 CL.AddConstantN('WMSZ_TOPRIGHT','LongInt').SetInt( 5);
 CL.AddConstantN('WMSZ_BOTTOM','LongInt').SetInt( 6);
 CL.AddConstantN('WMSZ_BOTTOMLEFT','LongInt').SetInt( 7);
 CL.AddConstantN('WMSZ_BOTTOMRIGHT','LongInt').SetInt( 8);
 CL.AddConstantN('ST_BEGINSWP','LongInt').SetInt( 0);
 CL.AddConstantN('ST_ENDSWP','LongInt').SetInt( 1);
 CL.AddConstantN('HTERROR','LongInt').SetInt( - 2);
 CL.AddConstantN('HTTRANSPARENT','LongInt').SetInt( - 1);
 CL.AddConstantN('HTNOWHERE','LongInt').SetInt( 0);
 CL.AddConstantN('HTCLIENT','LongInt').SetInt( 1);
 CL.AddConstantN('HTCAPTION','LongInt').SetInt( 2);
 CL.AddConstantN('HTSYSMENU','LongInt').SetInt( 3);
 CL.AddConstantN('HTGROWBOX','LongInt').SetInt( 4);
 CL.AddConstantN('HTSIZE','').SetString( HTGROWBOX);
 CL.AddConstantN('HTMENU','LongInt').SetInt( 5);
 CL.AddConstantN('HTHSCROLL','LongInt').SetInt( 6);
 CL.AddConstantN('HTVSCROLL','LongInt').SetInt( 7);
 CL.AddConstantN('HTMINBUTTON','LongInt').SetInt( 8);
 CL.AddConstantN('HTMAXBUTTON','LongInt').SetInt( 9);
 CL.AddConstantN('HTLEFT','LongInt').SetInt( 10);
 CL.AddConstantN('HTRIGHT','LongInt').SetInt( 11);
 CL.AddConstantN('HTTOP','LongInt').SetInt( 12);
 CL.AddConstantN('HTTOPLEFT','LongInt').SetInt( 13);
 CL.AddConstantN('HTTOPRIGHT','LongInt').SetInt( 14);
 CL.AddConstantN('HTBOTTOM','LongInt').SetInt( 15);
 CL.AddConstantN('HTBOTTOMLEFT','LongWord').SetUInt( $10);
 CL.AddConstantN('HTBOTTOMRIGHT','LongInt').SetInt( 17);
 CL.AddConstantN('HTBORDER','LongInt').SetInt( 18);
 CL.AddConstantN('HTREDUCE','').SetString( HTMINBUTTON);
 CL.AddConstantN('HTZOOM','').SetString( HTMAXBUTTON);
 CL.AddConstantN('HTSIZEFIRST','').SetString( HTLEFT);
 CL.AddConstantN('HTSIZELAST','').SetString( HTBOTTOMRIGHT);
 CL.AddConstantN('HTOBJECT','LongInt').SetInt( 19);
 CL.AddConstantN('HTCLOSE','LongInt').SetInt( 20);
 CL.AddConstantN('HTHELP','LongInt').SetInt( 21);
 CL.AddConstantN('SMTO_NORMAL','LongInt').SetInt( 0);
 CL.AddConstantN('SMTO_BLOCK','LongInt').SetInt( 1);
 CL.AddConstantN('SMTO_ABORTIFHUNG','LongInt').SetInt( 2);
 CL.AddConstantN('SMTO_NOTIMEOUTIFNOTHUNG','LongInt').SetInt( 8);
 CL.AddConstantN('MA_ACTIVATE','LongInt').SetInt( 1);
 CL.AddConstantN('MA_ACTIVATEANDEAT','LongInt').SetInt( 2);
 CL.AddConstantN('MA_NOACTIVATE','LongInt').SetInt( 3);
 CL.AddConstantN('MA_NOACTIVATEANDEAT','LongInt').SetInt( 4);
 CL.AddConstantN('ICON_SMALL','LongInt').SetInt( 0);
 CL.AddConstantN('ICON_BIG','LongInt').SetInt( 1);
 CL.AddConstantN('ICON_SMALL2','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Function RegisterWindowMessage( lpString : PChar) : UINT');
 CL.AddDelphiFunction('Function RegisterWindowMessageA( lpString : PAnsiChar) : UINT');
 CL.AddDelphiFunction('Function RegisterWindowMessageW( lpString : PWideChar) : UINT');
 CL.AddConstantN('SIZE_RESTORED','LongInt').SetInt( 0);
 CL.AddConstantN('SIZE_MINIMIZED','LongInt').SetInt( 1);
 CL.AddConstantN('SIZE_MAXIMIZED','LongInt').SetInt( 2);
 CL.AddConstantN('SIZE_MAXSHOW','LongInt').SetInt( 3);
 CL.AddConstantN('SIZE_MAXHIDE','LongInt').SetInt( 4);
 CL.AddConstantN('SIZENORMAL','').SetString( SIZE_RESTORED);
 CL.AddConstantN('SIZEICONIC','').SetString( SIZE_MINIMIZED);
 CL.AddConstantN('SIZEFULLSCREEN','').SetString( SIZE_MAXIMIZED);
 CL.AddConstantN('SIZEZOOMSHOW','').SetString( SIZE_MAXSHOW);
 CL.AddConstantN('SIZEZOOMHIDE','').SetString( SIZE_MAXHIDE);
  CL.AddTypeS('PWindowPos', '^TWindowPos // will not work');
  CL.AddTypeS('tagWINDOWPOS', 'record hwnd : HWND; hwndInsertAfter : HWND; x : '
   +'Integer; y : Integer; cx : Integer; cy : Integer; flags : UINT; end');
  CL.AddTypeS('TWindowPos', 'tagWINDOWPOS');
  CL.AddTypeS('WINDOWPOS', 'tagWINDOWPOS');
  CL.AddTypeS('PNCCalcSizeParams', '^TNCCalcSizeParams // will not work');
  CL.AddTypeS('TNCCalcSizeParams', 'tagNCCALCSIZE_PARAMS');
  CL.AddTypeS('NCCALCSIZE_PARAMS', 'tagNCCALCSIZE_PARAMS');
 CL.AddConstantN('WVR_ALIGNTOP','LongWord').SetUInt( $10);
 CL.AddConstantN('WVR_ALIGNLEFT','LongWord').SetUInt( $20);
 CL.AddConstantN('WVR_ALIGNBOTTOM','LongWord').SetUInt( $40);
 CL.AddConstantN('WVR_ALIGNRIGHT','LongWord').SetUInt( $80);
 CL.AddConstantN('WVR_HREDRAW','LongWord').SetUInt( $100);
 CL.AddConstantN('WVR_VREDRAW','LongWord').SetUInt( $200);
 CL.AddConstantN('WVR_VALIDRECTS','LongWord').SetUInt( $400);
 CL.AddConstantN('MK_LBUTTON','LongInt').SetInt( 1);
 CL.AddConstantN('MK_RBUTTON','LongInt').SetInt( 2);
 CL.AddConstantN('MK_SHIFT','LongInt').SetInt( 4);
 CL.AddConstantN('MK_CONTROL','LongInt').SetInt( 8);
 CL.AddConstantN('MK_MBUTTON','LongWord').SetUInt( $10);
 CL.AddConstantN('TME_HOVER','LongWord').SetUInt( $00000001);
 CL.AddConstantN('TME_LEAVE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('TME_QUERY','LongWord').SetUInt( $40000000);
 CL.AddConstantN('TME_CANCEL','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('HOVER_DEFAULT','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
  CL.AddTypeS('PTrackMouseEvent', '^TTrackMouseEvent // will not work');
  CL.AddTypeS('tagTRACKMOUSEEVENT', 'record cbSize : DWORD; dwFlags : DWORD; hw'
   +'ndTrack : HWND; dwHoverTime : DWORD; end');
  CL.AddTypeS('TTrackMouseEvent', 'tagTRACKMOUSEEVENT');
 CL.AddDelphiFunction('Function TrackMouseEvent( var EventTrack : TTrackMouseEvent) : BOOL');
 CL.AddConstantN('WS_OVERLAPPED','LongInt').SetInt( 0);
 CL.AddConstantN('WS_POPUP','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('WS_CHILD','LongWord').SetUInt( $40000000);
 CL.AddConstantN('WS_MINIMIZE','LongWord').SetUInt( $20000000);
 CL.AddConstantN('WS_VISIBLE','LongWord').SetUInt( $10000000);
 CL.AddConstantN('WS_DISABLED','LongWord').SetUInt( $8000000);
 CL.AddConstantN('WS_CLIPSIBLINGS','LongWord').SetUInt( $4000000);
 CL.AddConstantN('WS_CLIPCHILDREN','LongWord').SetUInt( $2000000);
 CL.AddConstantN('WS_MAXIMIZE','LongWord').SetUInt( $1000000);
 CL.AddConstantN('WS_CAPTION','LongWord').SetUInt( $C00000);
 CL.AddConstantN('WS_BORDER','LongWord').SetUInt( $800000);
 CL.AddConstantN('WS_DLGFRAME','LongWord').SetUInt( $400000);
 CL.AddConstantN('WS_VSCROLL','LongWord').SetUInt( $200000);
 CL.AddConstantN('WS_HSCROLL','LongWord').SetUInt( $100000);
 CL.AddConstantN('WS_SYSMENU','LongWord').SetUInt( $80000);
 CL.AddConstantN('WS_THICKFRAME','LongWord').SetUInt( $40000);
 CL.AddConstantN('WS_GROUP','LongWord').SetUInt( $20000);
 CL.AddConstantN('WS_TABSTOP','LongWord').SetUInt( $10000);
 CL.AddConstantN('WS_MINIMIZEBOX','LongWord').SetUInt( $20000);
 CL.AddConstantN('WS_MAXIMIZEBOX','LongWord').SetUInt( $10000);
 CL.AddConstantN('WS_TILED','').SetString( WS_OVERLAPPED);
 CL.AddConstantN('WS_ICONIC','').SetString( WS_MINIMIZE);
 CL.AddConstantN('WS_SIZEBOX','').SetString( WS_THICKFRAME);
 CL.AddConstantN('WS_TILEDWINDOW','').SetString( WS_OVERLAPPEDWINDOW);
 CL.AddConstantN('WS_EX_DLGMODALFRAME','LongInt').SetInt( 1);
 CL.AddConstantN('WS_EX_NOPARENTNOTIFY','LongInt').SetInt( 4);
 CL.AddConstantN('WS_EX_TOPMOST','LongInt').SetInt( 8);
 CL.AddConstantN('WS_EX_ACCEPTFILES','LongWord').SetUInt( $10);
 CL.AddConstantN('WS_EX_TRANSPARENT','LongWord').SetUInt( $20);
 CL.AddConstantN('WS_EX_MDICHILD','LongWord').SetUInt( $40);
 CL.AddConstantN('WS_EX_TOOLWINDOW','LongWord').SetUInt( $80);
 CL.AddConstantN('WS_EX_WINDOWEDGE','LongWord').SetUInt( $100);
 CL.AddConstantN('WS_EX_CLIENTEDGE','LongWord').SetUInt( $200);
 CL.AddConstantN('WS_EX_CONTEXTHELP','LongWord').SetUInt( $400);
 CL.AddConstantN('WS_EX_RIGHT','LongWord').SetUInt( $1000);
 CL.AddConstantN('WS_EX_LEFT','LongInt').SetInt( 0);
 CL.AddConstantN('WS_EX_RTLREADING','LongWord').SetUInt( $2000);
 CL.AddConstantN('WS_EX_LTRREADING','LongInt').SetInt( 0);
 CL.AddConstantN('WS_EX_LEFTSCROLLBAR','LongWord').SetUInt( $4000);
 CL.AddConstantN('WS_EX_RIGHTSCROLLBAR','LongInt').SetInt( 0);
 CL.AddConstantN('WS_EX_CONTROLPARENT','LongWord').SetUInt( $10000);
 CL.AddConstantN('WS_EX_STATICEDGE','LongWord').SetUInt( $20000);
 CL.AddConstantN('WS_EX_APPWINDOW','LongWord').SetUInt( $40000);
 CL.AddConstantN('WS_EX_LAYERED','LongWord').SetUInt( $00080000);
 CL.AddConstantN('WS_EX_NOINHERITLAYOUT','LongWord').SetUInt( $00100000);
 CL.AddConstantN('WS_EX_LAYOUTRTL','LongWord').SetUInt( $00400000);
 CL.AddConstantN('WS_EX_COMPOSITED','LongWord').SetUInt( $02000000);
 CL.AddConstantN('WS_EX_NOACTIVATE','LongWord').SetUInt( $08000000);
 CL.AddConstantN('CS_VREDRAW','LongInt').SetInt( DWORD ( 1 ));
 CL.AddConstantN('CS_HREDRAW','LongInt').SetInt( DWORD ( 2 ));
 CL.AddConstantN('CS_KEYCVTWINDOW','LongInt').SetInt( 4);
 CL.AddConstantN('CS_DBLCLKS','LongInt').SetInt( 8);
 CL.AddConstantN('CS_OWNDC','LongWord').SetUInt( $20);
 CL.AddConstantN('CS_CLASSDC','LongWord').SetUInt( $40);
 CL.AddConstantN('CS_PARENTDC','LongWord').SetUInt( $80);
 CL.AddConstantN('CS_NOKEYCVT','LongWord').SetUInt( $100);
 CL.AddConstantN('CS_NOCLOSE','LongWord').SetUInt( $200);
 CL.AddConstantN('CS_SAVEBITS','LongWord').SetUInt( $800);
 CL.AddConstantN('CS_BYTEALIGNCLIENT','LongWord').SetUInt( $1000);
 CL.AddConstantN('CS_BYTEALIGNWINDOW','LongWord').SetUInt( $2000);
 CL.AddConstantN('CS_GLOBALCLASS','LongWord').SetUInt( $4000);
 CL.AddConstantN('CS_IME','LongWord').SetUInt( $10000);
 CL.AddConstantN('CS_DROPSHADOW','LongWord').SetUInt( $20000);
 CL.AddConstantN('PRF_CHECKVISIBLE','LongInt').SetInt( 1);
 CL.AddConstantN('PRF_NONCLIENT','LongInt').SetInt( 2);
 CL.AddConstantN('PRF_CLIENT','LongInt').SetInt( 4);
 CL.AddConstantN('PRF_ERASEBKGND','LongInt').SetInt( 8);
 CL.AddConstantN('PRF_CHILDREN','LongWord').SetUInt( $10);
 CL.AddConstantN('PRF_OWNED','LongWord').SetUInt( $20);
 CL.AddConstantN('BDR_RAISEDOUTER','LongInt').SetInt( 1);
 CL.AddConstantN('BDR_SUNKENOUTER','LongInt').SetInt( 2);
 CL.AddConstantN('BDR_RAISEDINNER','LongInt').SetInt( 4);
 CL.AddConstantN('BDR_SUNKENINNER','LongInt').SetInt( 8);
 CL.AddConstantN('BDR_OUTER','LongInt').SetInt( 3);
 CL.AddConstantN('BDR_INNER','LongInt').SetInt( 12);
 CL.AddConstantN('BDR_RAISED','LongInt').SetInt( 5);
 CL.AddConstantN('BDR_SUNKEN','LongInt').SetInt( 10);
 CL.AddConstantN('BF_LEFT','LongInt').SetInt( 1);
 CL.AddConstantN('BF_TOP','LongInt').SetInt( 2);
 CL.AddConstantN('BF_RIGHT','LongInt').SetInt( 4);
 CL.AddConstantN('BF_BOTTOM','LongInt').SetInt( 8);
 CL.AddConstantN('BF_DIAGONAL','LongWord').SetUInt( $10);
 CL.AddConstantN('BF_MIDDLE','LongWord').SetUInt( $800);
 CL.AddConstantN('BF_SOFT','LongWord').SetUInt( $1000);
 CL.AddConstantN('BF_ADJUST','LongWord').SetUInt( $2000);
 CL.AddConstantN('BF_FLAT','LongWord').SetUInt( $4000);
 CL.AddConstantN('BF_MONO','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Function DrawEdge( hdc : HDC; var qrc : TRect; edge : UINT; grfFlags : UINT) : BOOL');
 CL.AddConstantN('DFC_CAPTION','LongInt').SetInt( 1);
 CL.AddConstantN('DFC_MENU','LongInt').SetInt( 2);
 CL.AddConstantN('DFC_SCROLL','LongInt').SetInt( 3);
 CL.AddConstantN('DFC_BUTTON','LongInt').SetInt( 4);
 CL.AddConstantN('DFC_POPUPMENU','LongInt').SetInt( 5);
 CL.AddConstantN('DFCS_CAPTIONCLOSE','LongInt').SetInt( 0);
 CL.AddConstantN('DFCS_CAPTIONMIN','LongInt').SetInt( 1);
 CL.AddConstantN('DFCS_CAPTIONMAX','LongInt').SetInt( 2);
 CL.AddConstantN('DFCS_CAPTIONRESTORE','LongInt').SetInt( 3);
 CL.AddConstantN('DFCS_CAPTIONHELP','LongInt').SetInt( 4);
 CL.AddConstantN('DFCS_MENUARROW','LongInt').SetInt( 0);
 CL.AddConstantN('DFCS_MENUCHECK','LongInt').SetInt( 1);
 CL.AddConstantN('DFCS_MENUBULLET','LongInt').SetInt( 2);
 CL.AddConstantN('DFCS_MENUARROWRIGHT','LongInt').SetInt( 4);
 CL.AddConstantN('DFCS_SCROLLUP','LongInt').SetInt( 0);
 CL.AddConstantN('DFCS_SCROLLDOWN','LongInt').SetInt( 1);
 CL.AddConstantN('DFCS_SCROLLLEFT','LongInt').SetInt( 2);
 CL.AddConstantN('DFCS_SCROLLRIGHT','LongInt').SetInt( 3);
 CL.AddConstantN('DFCS_SCROLLCOMBOBOX','LongInt').SetInt( 5);
 CL.AddConstantN('DFCS_SCROLLSIZEGRIP','LongInt').SetInt( 8);
 CL.AddConstantN('DFCS_SCROLLSIZEGRIPRIGHT','LongWord').SetUInt( $10);
 CL.AddConstantN('DFCS_BUTTONCHECK','LongInt').SetInt( 0);
 CL.AddConstantN('DFCS_BUTTONRADIOIMAGE','LongInt').SetInt( 1);
 CL.AddConstantN('DFCS_BUTTONRADIOMASK','LongInt').SetInt( 2);
 CL.AddConstantN('DFCS_BUTTONRADIO','LongInt').SetInt( 4);
 CL.AddConstantN('DFCS_BUTTON3STATE','LongInt').SetInt( 8);
 CL.AddConstantN('DFCS_BUTTONPUSH','LongWord').SetUInt( $10);
 CL.AddConstantN('DFCS_INACTIVE','LongWord').SetUInt( $100);
 CL.AddConstantN('DFCS_PUSHED','LongWord').SetUInt( $200);
 CL.AddConstantN('DFCS_CHECKED','LongWord').SetUInt( $400);
 CL.AddConstantN('DFCS_TRANSPARENT','LongWord').SetUInt( $800);
 CL.AddConstantN('DFCS_HOT','LongWord').SetUInt( $1000);
 CL.AddConstantN('DFCS_ADJUSTRECT','LongWord').SetUInt( $2000);
 CL.AddConstantN('DFCS_FLAT','LongWord').SetUInt( $4000);
 CL.AddConstantN('DFCS_MONO','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Function DrawFrameControl( DC : HDC; const Rect : TRect; uType, uState : UINT) : BOOL');
 CL.AddConstantN('DC_ACTIVE','LongInt').SetInt( 1);
 CL.AddConstantN('DC_SMALLCAP','LongInt').SetInt( 2);
 CL.AddConstantN('DC_ICON','LongInt').SetInt( 4);
 CL.AddConstantN('DC_TEXT','LongInt').SetInt( 8);
 CL.AddConstantN('DC_INBUTTON','LongWord').SetUInt( $10);
 CL.AddConstantN('DC_GRADIENT','LongWord').SetUInt( $20);
 CL.AddConstantN('DC_BUTTONS','LongWord').SetUInt( $1000);
 CL.AddDelphiFunction('Function DrawCaption( p1 : HWND; p2 : HDC; const p3 : TRect; p4 : UINT) : BOOL');
 CL.AddConstantN('IDANI_OPEN','LongInt').SetInt( 1);
 CL.AddConstantN('IDANI_CLOSE','LongInt').SetInt( 2);
 CL.AddConstantN('IDANI_CAPTION','LongInt').SetInt( 3);
 CL.AddDelphiFunction('Function DrawAnimatedRects( hwnd : HWND; idAni : Integer; const lprcFrom, lprcTo : TRect) : BOOL');
 CL.AddConstantN('CF_TEXT','LongInt').SetInt( 1);
 CL.AddConstantN('CF_BITMAP','LongInt').SetInt( 2);
 CL.AddConstantN('CF_METAFILEPICT','LongInt').SetInt( 3);
 CL.AddConstantN('CF_SYLK','LongInt').SetInt( 4);
 CL.AddConstantN('CF_DIF','LongInt').SetInt( 5);
 CL.AddConstantN('CF_TIFF','LongInt').SetInt( 6);
 CL.AddConstantN('CF_OEMTEXT','LongInt').SetInt( 7);
 CL.AddConstantN('CF_DIB','LongInt').SetInt( 8);
 CL.AddConstantN('CF_PALETTE','LongInt').SetInt( 9);
 CL.AddConstantN('CF_PENDATA','LongInt').SetInt( 10);
 CL.AddConstantN('CF_RIFF','LongInt').SetInt( 11);
 CL.AddConstantN('CF_WAVE','LongInt').SetInt( 12);
 CL.AddConstantN('CF_UNICODETEXT','LongInt').SetInt( 13);
 CL.AddConstantN('CF_ENHMETAFILE','LongInt').SetInt( 14);
 CL.AddConstantN('CF_HDROP','LongInt').SetInt( 15);
 CL.AddConstantN('CF_LOCALE','LongWord').SetUInt( $10);
 CL.AddConstantN('CF_MAX','LongInt').SetInt( 17);
 CL.AddConstantN('CF_DIBV5','LongInt').SetInt( 17);
 CL.AddConstantN('CF_MAX_XP','LongInt').SetInt( 18);
 CL.AddConstantN('CF_OWNERDISPLAY','LongInt').SetInt( 128);
 CL.AddConstantN('CF_DSPTEXT','LongInt').SetInt( 129);
 CL.AddConstantN('CF_DSPBITMAP','LongInt').SetInt( 130);
 CL.AddConstantN('CF_DSPMETAFILEPICT','LongInt').SetInt( 131);
 CL.AddConstantN('CF_DSPENHMETAFILE','LongInt').SetInt( 142);
 CL.AddConstantN('CF_PRIVATEFIRST','LongWord').SetUInt( $200);
 CL.AddConstantN('CF_PRIVATELAST','LongInt').SetInt( 767);
 CL.AddConstantN('CF_GDIOBJFIRST','LongInt').SetInt( 768);
 CL.AddConstantN('CF_GDIOBJLAST','LongInt').SetInt( 1023);
 CL.AddConstantN('FVIRTKEY','LongInt').SetInt( 1);
 CL.AddConstantN('FNOINVERT','LongInt').SetInt( 2);
 CL.AddConstantN('FSHIFT','LongInt').SetInt( 4);
 CL.AddConstantN('FCONTROL','LongInt').SetInt( 8);
 CL.AddConstantN('FALT','LongWord').SetUInt( $10);
  CL.AddTypeS('PAccel', '^TAccel // will not work');
  CL.AddTypeS('tagACCEL', 'record fVirt : Word; key : Word; cmd : Word; end');
  CL.AddTypeS('TAccel', 'tagACCEL');
  CL.AddTypeS('ACCEL', 'tagACCEL');
  CL.AddTypeS('PPaintStruct', '^TPaintStruct // will not work');
  CL.AddTypeS('TPaintStruct', 'tagPAINTSTRUCT');
  CL.AddTypeS('PAINTSTRUCT', 'tagPAINTSTRUCT');
  CL.AddTypeS('PWindowPlacement', '^TWindowPlacement // will not work');
  CL.AddTypeS('tagWINDOWPLACEMENT', 'record length : UINT; flags : UINT; showCm'
   +'d : UINT; ptMinPosition : TPoint; ptMaxPosition : TPoint; rcNormalPosition'
   +' : TRect; end');
  CL.AddTypeS('TWindowPlacement', 'tagWINDOWPLACEMENT');
  CL.AddTypeS('WINDOWPLACEMENT', 'tagWINDOWPLACEMENT');
 CL.AddConstantN('WPF_SETMINPOSITION','LongInt').SetInt( 1);
 CL.AddConstantN('WPF_RESTORETOMAXIMIZED','LongInt').SetInt( 2);
  CL.AddTypeS('PNMHdr', '^TNMHdr // will not work');
  CL.AddTypeS('tagNMHDR', 'record hwndFrom : HWND; idFrom : UINT; code : Intege'
   +'r; end');
  CL.AddTypeS('TNMHdr', 'tagNMHDR');
  CL.AddTypeS('NMHDR', 'tagNMHDR');
  CL.AddTypeS('PStyleStruct', '^TStyleStruct // will not work');
  CL.AddTypeS('tagSTYLESTRUCT', 'record styleOld : DWORD; styleNew : DWORD; end');
  CL.AddTypeS('TStyleStruct', 'tagSTYLESTRUCT');
  CL.AddTypeS('STYLESTRUCT', 'tagSTYLESTRUCT');
 CL.AddConstantN('ODT_MENU','LongInt').SetInt( 1);
 CL.AddConstantN('ODT_LISTBOX','LongInt').SetInt( 2);
 CL.AddConstantN('ODT_COMBOBOX','LongInt').SetInt( 3);
 CL.AddConstantN('ODT_BUTTON','LongInt').SetInt( 4);
 CL.AddConstantN('ODT_STATIC','LongInt').SetInt( 5);
 CL.AddConstantN('ODA_DRAWENTIRE','LongInt').SetInt( 1);
 CL.AddConstantN('ODA_SELECT','LongInt').SetInt( 2);
 CL.AddConstantN('ODA_FOCUS','LongInt').SetInt( 4);
 CL.AddConstantN('ODS_SELECTED','LongInt').SetInt( 1);
 CL.AddConstantN('ODS_GRAYED','LongInt').SetInt( 2);
 CL.AddConstantN('ODS_DISABLED','LongInt').SetInt( 4);
 CL.AddConstantN('ODS_CHECKED','LongInt').SetInt( 8);
 CL.AddConstantN('ODS_FOCUS','LongWord').SetUInt( $10);
 CL.AddConstantN('ODS_DEFAULT','LongWord').SetUInt( $20);
 CL.AddConstantN('ODS_COMBOBOXEDIT','LongWord').SetUInt( $1000);
 CL.AddConstantN('ODS_HOTLIGHT','LongWord').SetUInt( $40);
 CL.AddConstantN('ODS_INACTIVE','LongWord').SetUInt( $80);
  CL.AddTypeS('TOwnerDrawState', 'set of ( odSelected, odGrayed, odDisabled, od'
   +'Checked, odFocused, odDefault, odHotLight, odInactive, odNoAccel, odNoFocu'
   +'sRect, odReserved1, odReserved2, odComboBoxEdit )');
  CL.AddTypeS('PMeasureItemStruct', '^TMeasureItemStruct // will not work');
  CL.AddTypeS('tagMEASUREITEMSTRUCT', 'record CtlType : UINT; CtlID : UINT; ite'
   +'mID : UINT; itemWidth : UINT; itemHeight : UINT; itemData : DWORD; end');
  CL.AddTypeS('TMeasureItemStruct', 'tagMEASUREITEMSTRUCT');
  CL.AddTypeS('MEASUREITEMSTRUCT', 'tagMEASUREITEMSTRUCT');
  CL.AddTypeS('PDrawItemStruct', '^TDrawItemStruct // will not work');
  CL.AddTypeS('tagDRAWITEMSTRUCT', 'record CtlType : UINT; CtlID : UINT; itemID'
   +' : UINT; itemAction : UINT; itemState : UINT; hwndItem : HWND; hDC : HDC; '
   +'rcItem : TRect; itemData : DWORD; end');
  CL.AddTypeS('TDrawItemStruct', 'tagDRAWITEMSTRUCT');
  CL.AddTypeS('DRAWITEMSTRUCT', 'tagDRAWITEMSTRUCT');
  CL.AddTypeS('PDeleteItemStruct', '^TDeleteItemStruct // will not work');
  CL.AddTypeS('tagDELETEITEMSTRUCT', 'record CtlType : UINT; CtlID : UINT; item'
   +'ID : UINT; hwndItem : HWND; itemData : UINT; end');
  CL.AddTypeS('TDeleteItemStruct', 'tagDELETEITEMSTRUCT');
  CL.AddTypeS('DELETEITEMSTRUCT', 'tagDELETEITEMSTRUCT');
  CL.AddTypeS('PCompareItemStruct', '^TCompareItemStruct // will not work');
  CL.AddTypeS('tagCOMPAREITEMSTRUCT', 'record CtlType : UINT; CtlID : UINT; hwn'
   +'dItem : HWND; itemID1 : UINT; itemData1 : DWORD; itemID2 : UINT; itemData2'
   +' : DWORD; dwLocaleId : DWORD; end');
  CL.AddTypeS('TCompareItemStruct', 'tagCOMPAREITEMSTRUCT');
  CL.AddTypeS('COMPAREITEMSTRUCT', 'tagCOMPAREITEMSTRUCT');
 CL.AddDelphiFunction('Function GetMessage( var lpMsg : TMsg; hWnd : HWND; wMsgFilterMin, wMsgFilterMax : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetMessageA( var lpMsg : TMsg; hWnd : HWND; wMsgFilterMin, wMsgFilterMax : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetMessageW( var lpMsg : TMsg; hWnd : HWND; wMsgFilterMin, wMsgFilterMax : UINT) : BOOL');
 CL.AddDelphiFunction('Function DispatchMessage( const lpMsg : TMsg) : Longint');
 CL.AddDelphiFunction('Function DispatchMessageA( const lpMsg : TMsg) : Longint');
 CL.AddDelphiFunction('Function DispatchMessageW( const lpMsg : TMsg) : Longint');
 CL.AddDelphiFunction('Function TranslateMessage( const lpMsg : TMsg) : BOOL');
 CL.AddDelphiFunction('Function SetMessageQueue( cMessagesMax : Integer) : BOOL');
 CL.AddDelphiFunction('Function PeekMessage( var lpMsg : TMsg; hWnd : HWND; wMsgFilterMin, wMsgFilterMax, wRemoveMsg : UINT) : BOOL');
 CL.AddDelphiFunction('Function PeekMessageA( var lpMsg : TMsg; hWnd : HWND; wMsgFilterMin, wMsgFilterMax, wRemoveMsg : UINT) : BOOL');
 CL.AddDelphiFunction('Function PeekMessageW( var lpMsg : TMsg; hWnd : HWND; wMsgFilterMin, wMsgFilterMax, wRemoveMsg : UINT) : BOOL');
 CL.AddConstantN('PM_NOREMOVE','LongInt').SetInt( 0);
 CL.AddConstantN('PM_REMOVE','LongInt').SetInt( 1);
 CL.AddConstantN('PM_NOYIELD','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Function RegisterHotKey( hWnd : HWND; id : Integer; fsModifiers, vk : UINT) : BOOL');
 CL.AddDelphiFunction('Function UnregisterHotKey( hWnd : HWND; id : Integer) : BOOL');
 CL.AddConstantN('MOD_ALT','LongInt').SetInt( 1);
 CL.AddConstantN('MOD_CONTROL','LongInt').SetInt( 2);
 CL.AddConstantN('MOD_SHIFT','LongInt').SetInt( 4);
 CL.AddConstantN('MOD_WIN','LongInt').SetInt( 8);
 CL.AddConstantN('IDHOT_SNAPWINDOW','LongInt').SetInt( - 1);
 CL.AddConstantN('IDHOT_SNAPDESKTOP','LongInt').SetInt( - 2);
 CL.AddConstantN('EW_RESTARTWINDOWS','LongWord').SetUInt( $0042);
 CL.AddConstantN('EW_REBOOTSYSTEM','LongWord').SetUInt( $0043);
 CL.AddConstantN('EW_EXITANDEXECAPP','LongWord').SetUInt( $0044);
 CL.AddConstantN('ENDSESSION_LOGOFF','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('EWX_LOGOFF','LongInt').SetInt( 0);
 CL.AddConstantN('EWX_SHUTDOWN','LongInt').SetInt( 1);
 CL.AddConstantN('EWX_REBOOT','LongInt').SetInt( 2);
 CL.AddConstantN('EWX_FORCE','LongInt').SetInt( 4);
 CL.AddConstantN('EWX_POWEROFF','LongInt').SetInt( 8);
 CL.AddConstantN('EWX_FORCEIFHUNG','LongWord').SetUInt( $10);
 CL.AddDelphiFunction('Function ExitWindows( dwReserved : DWORD; Code : Word) : BOOL');
 CL.AddDelphiFunction('Function ExitWindowsEx( uFlags : UINT; dwReserved : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SwapMouseButton( fSwap : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetMessagePos : DWORD');
 CL.AddDelphiFunction('Function GetMessageTime : Longint');
 CL.AddDelphiFunction('Function GetMessageExtraInfo : Longint');
 CL.AddDelphiFunction('Function SetMessageExtraInfo( lParam : LPARAM) : LPARAM');
 CL.AddDelphiFunction('Function SendMessage( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function SendMessageA( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function SendMessageW( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function SendMessageTimeout( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; fuFlags, uTimeout : UINT; var lpdwResult : DWORD) : LRESULT');
 CL.AddDelphiFunction('Function SendMessageTimeoutA( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; fuFlags, uTimeout : UINT; var lpdwResult : DWORD) : LRESULT');
 CL.AddDelphiFunction('Function SendMessageTimeoutW( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; fuFlags, uTimeout : UINT; var lpdwResult : DWORD) : LRESULT');
 CL.AddDelphiFunction('Function SendNotifyMessage( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function SendNotifyMessageA( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function SendNotifyMessageW( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function SendMessageCallback( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; lpResultCallBack : TFNSendAsyncProc; dwData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SendMessageCallbackA( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; lpResultCallBack : TFNSendAsyncProc; dwData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SendMessageCallbackW( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; lpResultCallBack : TFNSendAsyncProc; dwData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function BroadcastSystemMessage( Flags : DWORD; Recipients : PDWORD; uiMessage : UINT; wParam : WPARAM; lParam : LPARAM) : Longint');
 CL.AddDelphiFunction('Function BroadcastSystemMessageA( Flags : DWORD; Recipients : PDWORD; uiMessage : UINT; wParam : WPARAM; lParam : LPARAM) : Longint');
 CL.AddDelphiFunction('Function BroadcastSystemMessageW( Flags : DWORD; Recipients : PDWORD; uiMessage : UINT; wParam : WPARAM; lParam : LPARAM) : Longint');
 CL.AddConstantN('BSM_ALLCOMPONENTS','LongWord').SetUInt( $00000000);
 CL.AddConstantN('BSM_VXDS','LongWord').SetUInt( $00000001);
 CL.AddConstantN('BSM_NETDRIVER','LongWord').SetUInt( $00000002);
 CL.AddConstantN('BSM_INSTALLABLEDRIVERS','LongWord').SetUInt( $00000004);
 CL.AddConstantN('BSM_APPLICATIONS','LongWord').SetUInt( $00000008);
 CL.AddConstantN('BSM_ALLDESKTOPS','LongWord').SetUInt( $00000010);
 CL.AddConstantN('BSF_QUERY','LongWord').SetUInt( $00000001);
 CL.AddConstantN('BSF_IGNORECURRENTTASK','LongWord').SetUInt( $00000002);
 CL.AddConstantN('BSF_FLUSHDISK','LongWord').SetUInt( $00000004);
 CL.AddConstantN('BSF_NOHANG','LongWord').SetUInt( $00000008);
 CL.AddConstantN('BSF_POSTMESSAGE','LongWord').SetUInt( $00000010);
 CL.AddConstantN('BSF_FORCEIFHUNG','LongWord').SetUInt( $00000020);
 CL.AddConstantN('BSF_NOTIMEOUTIFNOTHUNG','LongWord').SetUInt( $00000040);
  CL.AddTypeS('PBroadcastSysMsg', '^TBroadcastSysMsg // will not work');
  CL.AddTypeS('tagBROADCASTSYSMSG', 'record uiMessage : UINT; wParam : WPARAM; '
   +'lParam : LPARAM; end');
  CL.AddTypeS('TBroadcastSysMsg', 'tagBROADCASTSYSMSG');
  CL.AddTypeS('BROADCASTSYSMSG', 'tagBROADCASTSYSMSG');
 CL.AddConstantN('DBWF_LPARAMPOINTER','LongWord').SetUInt( $8000);
 CL.AddConstantN('BROADCAST_QUERY_DENY','LongWord').SetUInt( $424D5144);
  CL.AddTypeS('HDEVNOTIFY', 'Pointer');
  CL.AddTypeS('PHDEVNOTIFY', '^HDEVNOTIFY // will not work');
 CL.AddConstantN('DEVICE_NOTIFY_WINDOW_HANDLE','LongInt').SetInt( 0);
 CL.AddDelphiFunction('Function RegisterDeviceNotification( hRecipient : THandle; NotificationFilter : Pointer; Flags : DWORD) : HDEVNOTIFY');
 CL.AddDelphiFunction('Function RegisterDeviceNotificationA( hRecipient : THandle; NotificationFilter : Pointer; Flags : DWORD) : HDEVNOTIFY');
 CL.AddDelphiFunction('Function RegisterDeviceNotificationW( hRecipient : THandle; NotificationFilter : Pointer; Flags : DWORD) : HDEVNOTIFY');
 CL.AddDelphiFunction('Function UnregisterDeviceNotification( Handle : HDEVNOTIFY) : BOOL');
 CL.AddDelphiFunction('Function PostMessage( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostMessageA( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostMessageW( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostThreadMessage( idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostThreadMessageA( idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostThreadMessageW( idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostAppMessage( idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostAppMessageA( idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function PostAppMessageW( idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL');
 CL.AddConstantN('HWND_BROADCAST','LongWord').SetUInt( $FFFF);
 CL.AddConstantN('wnd_Broadcast','').SetString( HWND_BROADCAST);
 CL.AddConstantN('HWND_MESSAGE','LongInt').SetInt( HWND ( - 3 ));
 CL.AddDelphiFunction('Function AttachThreadInput( idAttach, idAttachTo : DWORD; fAttach : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ReplyMessage( lResult : LRESULT) : BOOL');
 CL.AddDelphiFunction('Function WaitMessage : BOOL');
 CL.AddDelphiFunction('Function WaitForInputIdle( hProcess : THandle; dwMilliseconds : DWORD) : DWORD');
 CL.AddDelphiFunction('Function DefWindowProc( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefWindowProcA( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefWindowProcW( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function CallWindowProc( lpPrevWndFunc : TFNWndProc; hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function CallWindowProcA( lpPrevWndFunc : TFNWndProc; hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function CallWindowProcW( lpPrevWndFunc : TFNWndProc; hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Procedure PostQuitMessage( nExitCode : Integer)');
 CL.AddDelphiFunction('Function InSendMessage : BOOL');
 CL.AddDelphiFunction('Function InSendMessageEx( lpReserved : Pointer) : DWORD');
 CL.AddConstantN('ISMEX_NOSEND','LongInt').SetInt( 0);
 CL.AddConstantN('ISMEX_SEND','LongInt').SetInt( 1);
 CL.AddConstantN('ISMEX_NOTIFY','LongInt').SetInt( 2);
 CL.AddConstantN('ISMEX_CALLBACK','LongInt').SetInt( 4);
 CL.AddConstantN('ISMEX_REPLIED','LongInt').SetInt( 8);
 CL.AddDelphiFunction('Function GetDoubleClickTime : UINT');
 CL.AddDelphiFunction('Function SetDoubleClickTime( Interval : UINT) : BOOL');
 CL.AddDelphiFunction('Function RegisterClass( const lpWndClass : TWndClass) : ATOM');
 CL.AddDelphiFunction('Function RegisterClassA( const lpWndClass : TWndClassA) : ATOM');
 CL.AddDelphiFunction('Function RegisterClassW( const lpWndClass : TWndClassW) : ATOM');
 CL.AddDelphiFunction('Function UnregisterClass( lpClassName : PChar; hInstance : HINST) : BOOL');
 CL.AddDelphiFunction('Function UnregisterClassA( lpClassName : PAnsiChar; hInstance : HINST) : BOOL');
 CL.AddDelphiFunction('Function UnregisterClassW( lpClassName : PWideChar; hInstance : HINST) : BOOL');
 CL.AddDelphiFunction('Function GetClassInfo( hInstance : HINST; lpClassName : PChar; var lpWndClass : TWndClass) : BOOL');
 CL.AddDelphiFunction('Function GetClassInfoA( hInstance : HINST; lpClassName : PAnsiChar; var lpWndClass : TWndClassA) : BOOL');
 CL.AddDelphiFunction('Function GetClassInfoW( hInstance : HINST; lpClassName : PWideChar; var lpWndClass : TWndClassW) : BOOL');
 CL.AddDelphiFunction('Function RegisterClassEx( const WndClass : TWndClassEx) : ATOM');
 CL.AddDelphiFunction('Function RegisterClassExA( const WndClass : TWndClassExA) : ATOM');
 CL.AddDelphiFunction('Function RegisterClassExW( const WndClass : TWndClassExW) : ATOM');
 CL.AddDelphiFunction('Function GetClassInfoEx( Instance : HINST; Classname : PChar; var WndClass : TWndClassEx) : BOOL');
 CL.AddDelphiFunction('Function GetClassInfoExA( Instance : HINST; Classname : PAnsiChar; var WndClass : TWndClassExA) : BOOL');
 CL.AddDelphiFunction('Function GetClassInfoExW( Instance : HINST; Classname : PWideChar; var WndClass : TWndClassExW) : BOOL');
 CL.AddConstantN('CW_USEDEFAULT','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('HWND_DESKTOP','LongInt').SetInt( 0);
 CL.AddDelphiFunction('Function CreateWindowEx( dwExStyle : DWORD; lpClassName : PChar; lpWindowName : PChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hMenu : HMENU; hInstance : HINST; lpParam : Pointer) : HWND');
 CL.AddDelphiFunction('Function CreateWindowExA( dwExStyle : DWORD; lpClassName : PAnsiChar; lpWindowName : PAnsiChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hMenu : HMENU; hInstance : HINST; lpParam : Pointer) : HWND');
 CL.AddDelphiFunction('Function CreateWindowExW( dwExStyle : DWORD; lpClassName : PWideChar; lpWindowName : PWideChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hMenu : HMENU; hInstance : HINST; lpParam : Pointer) : HWND');
 CL.AddDelphiFunction('Function CreateWindow( lpClassName : PChar; lpWindowName : PChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hMenu : HMENU; hInstance : HINST; lpParam : Pointer) : HWND');
 CL.AddDelphiFunction('Function CreateWindowA( lpClassName : PAnsiChar; lpWindowName : PAnsiChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hMenu : HMENU; hInstance : HINST; lpParam : Pointer) : HWND');
 CL.AddDelphiFunction('Function CreateWindowW( lpClassName : PWideChar; lpWindowName : PWideChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hMenu : HMENU; hInstance : HINST; lpParam : Pointer) : HWND');
 CL.AddDelphiFunction('Function IsWindow( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function IsMenu( hMenu : HMENU) : BOOL');
 CL.AddDelphiFunction('Function IsChild( hWndParent, hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function DestroyWindow( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function ShowWindow( hWnd : HWND; nCmdShow : Integer) : BOOL');
 CL.AddDelphiFunction('Function AnimateWindow( hWnd : HWND; dwTime : DWORD; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ShowWindowAsync( hWnd : HWND; nCmdShow : Integer) : BOOL');
 CL.AddDelphiFunction('Function FlashWindow( hWnd : HWND; bInvert : BOOL) : BOOL');
 CL.AddDelphiFunction('Function UpdateLayeredWindow( Handle : THandle; hdcDest : HDC; pptDst : PPoint; _psize : PSize; hdcSrc : HDC; pptSrc : PPoint; crKey : COLORREF; pblend : PBLENDFUNCTION; dwFlags : DWORD) : Boolean');
 CL.AddDelphiFunction('Function SetLayeredWindowAttributes( Hwnd : THandle; crKey : COLORREF; bAlpha : Byte; dwFlags : DWORD) : Boolean');
 CL.AddConstantN('LWA_COLORKEY','LongWord').SetUInt( $00000001);
 CL.AddConstantN('LWA_ALPHA','LongWord').SetUInt( $00000002);
 CL.AddConstantN('ULW_COLORKEY','LongWord').SetUInt( $00000001);
 CL.AddConstantN('ULW_ALPHA','LongWord').SetUInt( $00000002);
 CL.AddConstantN('ULW_OPAQUE','LongWord').SetUInt( $00000004);
  CL.AddTypeS('FLASHWINFO', 'record cbSize : UINT; hwnd : HWND; dwFlags : DWORD'
   +'; uCount : UINT; dwTimeout : DWORD; end');
  CL.AddTypeS('PFLASHWINFO', '^FLASHWINFO // will not work');
  CL.AddTypeS('TFlashWInfo', 'FLASHWINFO');
 CL.AddDelphiFunction('Function FlashWindowEx( var pfwi : FLASHWINFO) : BOOL');
 CL.AddConstantN('FLASHW_STOP','LongWord').SetUInt( $0);
 CL.AddConstantN('FLASHW_CAPTION','LongWord').SetUInt( $1);
 CL.AddConstantN('FLASHW_TRAY','LongWord').SetUInt( $2);
 CL.AddConstantN('FLASHW_TIMER','LongWord').SetUInt( $4);
 CL.AddConstantN('FLASHW_TIMERNOFG','LongWord').SetUInt( $C);
 CL.AddDelphiFunction('Function ShowOwnedPopups( hWnd : HWND; fShow : BOOL) : BOOL');
 CL.AddDelphiFunction('Function OpenIcon( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function CloseWindow( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function MoveWindow( hWnd : HWND; X, Y, nWidth, nHeight : Integer; bRepaint : BOOL) : BOOL');
 CL.AddDelphiFunction('Function SetWindowPos( hWnd : HWND; hWndInsertAfter : HWND; X, Y, cx, cy : Integer; uFlags : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetWindowPlacement( hWnd : HWND; WindowPlacement : PWindowPlacement) : BOOL');
 CL.AddDelphiFunction('Function SetWindowPlacement( hWnd : HWND; WindowPlacement : PWindowPlacement) : BOOL');
 CL.AddDelphiFunction('Function BeginDeferWindowPos( nNumWindows : Integer) : HDWP');
 CL.AddDelphiFunction('Function DeferWindowPos( hWinPosInfo : HDWP; hWnd : HWND; hWndInsertAfter : HWND; x, y, cx, cy : Integer; uFlags : UINT) : HDWP');
 CL.AddDelphiFunction('Function EndDeferWindowPos( hWinPosInfo : HDWP) : BOOL');
 CL.AddDelphiFunction('Function IsWindowVisible( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function IsIconic( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function AnyPopup : BOOL');
 CL.AddDelphiFunction('Function BringWindowToTop( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function IsZoomed( hWnd : HWND) : BOOL');
 CL.AddConstantN('SWP_NOSIZE','LongInt').SetInt( 1);
 CL.AddConstantN('SWP_NOMOVE','LongInt').SetInt( 2);
 CL.AddConstantN('SWP_NOZORDER','LongInt').SetInt( 4);
 CL.AddConstantN('SWP_NOREDRAW','LongInt').SetInt( 8);
 CL.AddConstantN('SWP_NOACTIVATE','LongWord').SetUInt( $10);
 CL.AddConstantN('SWP_FRAMECHANGED','LongWord').SetUInt( $20);
 CL.AddConstantN('SWP_SHOWWINDOW','LongWord').SetUInt( $40);
 CL.AddConstantN('SWP_HIDEWINDOW','LongWord').SetUInt( $80);
 CL.AddConstantN('SWP_NOCOPYBITS','LongWord').SetUInt( $100);
 CL.AddConstantN('SWP_NOOWNERZORDER','LongWord').SetUInt( $200);
 CL.AddConstantN('SWP_NOSENDCHANGING','LongWord').SetUInt( $400);
 CL.AddConstantN('SWP_DRAWFRAME','').SetString( SWP_FRAMECHANGED);
 CL.AddConstantN('SWP_NOREPOSITION','').SetString( SWP_NOOWNERZORDER);
 CL.AddConstantN('SWP_DEFERERASE','LongWord').SetUInt( $2000);
 CL.AddConstantN('SWP_ASYNCWINDOWPOS','LongWord').SetUInt( $4000);
 CL.AddConstantN('HWND_TOP','LongInt').SetInt( 0);
 CL.AddConstantN('HWND_BOTTOM','LongInt').SetInt( 1);
 CL.AddConstantN('HWND_TOPMOST','LongInt').SetInt( HWND ( - 1 ));
 CL.AddConstantN('HWND_NOTOPMOST','LongInt').SetInt( HWND ( - 2 ));
  CL.AddTypeS('PDlgTemplate', '^TDlgTemplate // will not work');
  CL.AddTypeS('DLGTEMPLATE', 'record style : DWORD; dwExtendedStyle : DWORD; cd'
   +'it : Word; x : SHORT; y : SHORT; cx : SHORT; cy : SHORT; end');
  CL.AddTypeS('TDlgTemplate', 'DLGTEMPLATE');
  CL.AddTypeS('PDlgItemTemplate', '^TDlgItemTemplate // will not work');
  CL.AddTypeS('DLGITEMTEMPLATE', 'record style : DWORD; dwExtendedStyle : DWORD'
   +'; x : SHORT; y : SHORT; cx : SHORT; cy : SHORT; id : Word; end');
  CL.AddTypeS('TDlgItemTemplate', 'DLGITEMTEMPLATE');
 CL.AddDelphiFunction('Function CreateDialogParam( hInstance : HINST; lpTemplateName : PChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateDialogParamA( hInstance : HINST; lpTemplateName : PAnsiChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateDialogParamW( hInstance : HINST; lpTemplateName : PWideChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateDialogIndirectParam( hInstance : HINST; const lpTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateDialogIndirectParamA( hInstance : HINST; const lpTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateDialogIndirectParamW( hInstance : HINST; const lpTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateDialog( hInstance : HINST; lpTemplateName : PChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : HWND');
 CL.AddDelphiFunction('Function CreateDialogA( hInstance : HINST; lpTemplateName : PAnsiChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : HWND');
 CL.AddDelphiFunction('Function CreateDialogW( hInstance : HINST; lpTemplateName : PWideChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : HWND');
 CL.AddDelphiFunction('Function CreateDialogIndirect( hInstance : HINST; const lpTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : HWND');
 CL.AddDelphiFunction('Function CreateDialogIndirectA( hInstance : HINST; const lpTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : HWND');
 CL.AddDelphiFunction('Function CreateDialogIndirectW( hInstance : HINST; const lpTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : HWND');
 CL.AddDelphiFunction('Function DialogBoxParam( hInstance : HINST; lpTemplateName : PChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function DialogBoxParamA( hInstance : HINST; lpTemplateName : PAnsiChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function DialogBoxParamW( hInstance : HINST; lpTemplateName : PWideChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function DialogBoxIndirectParam( hInstance : HINST; const lpDialogTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function DialogBoxIndirectParamA( hInstance : HINST; const lpDialogTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function DialogBoxIndirectParamW( hInstance : HINST; const lpDialogTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc; dwInitParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function DialogBox( hInstance : HINST; lpTemplate : PChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : Integer');
 CL.AddDelphiFunction('Function DialogBoxA( hInstance : HINST; lpTemplate : PAnsiChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : Integer');
 CL.AddDelphiFunction('Function DialogBoxW( hInstance : HINST; lpTemplate : PWideChar; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : Integer');
 CL.AddDelphiFunction('Function DialogBoxIndirect( hInstance : HINST; const lpDialogTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : Integer');
 CL.AddDelphiFunction('Function DialogBoxIndirectA( hInstance : HINST; const lpDialogTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : Integer');
 CL.AddDelphiFunction('Function DialogBoxIndirectW( hInstance : HINST; const lpDialogTemplate : TDlgTemplate; hWndParent : HWND; lpDialogFunc : TFNDlgProc) : Integer');
 CL.AddDelphiFunction('Function EndDialog( hDlg : HWND; nResult : Integer) : BOOL');
 CL.AddDelphiFunction('Function GetDlgItem( hDlg : HWND; nIDDlgItem : Integer) : HWND');
 CL.AddDelphiFunction('Function SetDlgItemInt( hDlg : HWND; nIDDlgItem : Integer; uValue : UINT; bSigned : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetDlgItemInt( hDlg : HWND; nIDDlgItem : Integer; var lpTranslated : BOOL; bSigned : BOOL) : UINT');
 CL.AddDelphiFunction('Function SetDlgItemText( hDlg : HWND; nIDDlgItem : Integer; lpString : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetDlgItemTextA( hDlg : HWND; nIDDlgItem : Integer; lpString : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetDlgItemTextW( hDlg : HWND; nIDDlgItem : Integer; lpString : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetDlgItemText( hDlg : HWND; nIDDlgItem : Integer; lpString : PChar; nMaxCount : Integer) : UINT');
 CL.AddDelphiFunction('Function GetDlgItemTextA( hDlg : HWND; nIDDlgItem : Integer; lpString : PAnsiChar; nMaxCount : Integer) : UINT');
 CL.AddDelphiFunction('Function GetDlgItemTextW( hDlg : HWND; nIDDlgItem : Integer; lpString : PWideChar; nMaxCount : Integer) : UINT');
 CL.AddDelphiFunction('Function CheckDlgButton( hDlg : HWND; nIDButton : Integer; uCheck : UINT) : BOOL');
 CL.AddDelphiFunction('Function CheckRadioButton( hDlg : HWND; nIDFirstButton, nIDLastButton, nIDCheckButton : Integer) : BOOL');
 CL.AddDelphiFunction('Function IsDlgButtonChecked( hDlg : HWND; nIDButton : Integer) : UINT');
 CL.AddDelphiFunction('Function SendDlgItemMessage( hDlg : HWND; nIDDlgItem : Integer; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : Longint');
 CL.AddDelphiFunction('Function SendDlgItemMessageA( hDlg : HWND; nIDDlgItem : Integer; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : Longint');
 CL.AddDelphiFunction('Function SendDlgItemMessageW( hDlg : HWND; nIDDlgItem : Integer; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : Longint');
 CL.AddDelphiFunction('Function GetNextDlgGroupItem( hDlg : HWND; hCtl : HWND; bPrevious : BOOL) : HWND');
 CL.AddDelphiFunction('Function GetNextDlgTabItem( hDlg : HWND; hCtl : HWND; bPrevious : BOOL) : HWND');
 CL.AddDelphiFunction('Function GetDlgCtrlID( hWnd : HWND) : Integer');
 CL.AddDelphiFunction('Function GetDialogBaseUnits : Longint');
 CL.AddDelphiFunction('Function DefDlgProc( hDlg : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefDlgProcA( hDlg : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefDlgProcW( hDlg : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddConstantN('DLGWINDOWEXTRA','LongInt').SetInt( 30);
 CL.AddDelphiFunction('Function CallMsgFilter( var lpMsg : TMsg; nCode : Integer) : BOOL');
 CL.AddDelphiFunction('Function CallMsgFilterA( var lpMsg : TMsg; nCode : Integer) : BOOL');
 CL.AddDelphiFunction('Function CallMsgFilterW( var lpMsg : TMsg; nCode : Integer) : BOOL');
 CL.AddDelphiFunction('Function OpenClipboard( hWndNewOwner : HWND) : BOOL');
 CL.AddDelphiFunction('Function CloseClipboard : BOOL');
 CL.AddDelphiFunction('Function GetClipboardSequenceNumber : DWORD');
 CL.AddDelphiFunction('Function GetClipboardOwner : HWND');
 CL.AddDelphiFunction('Function SetClipboardViewer( hWndNewViewer : HWND) : HWND');
 CL.AddDelphiFunction('Function GetClipboardViewer : HWND');
 CL.AddDelphiFunction('Function ChangeClipboardChain( hWndRemove, hWndNewNext : HWND) : BOOL');
 CL.AddDelphiFunction('Function SetClipboardData( uFormat : UINT; hMem : THandle) : THandle');
 CL.AddDelphiFunction('Function GetClipboardData( uFormat : UINT) : THandle');
 CL.AddDelphiFunction('Function RegisterClipboardFormat( lpszFormat : PChar) : UINT');
 CL.AddDelphiFunction('Function RegisterClipboardFormatA( lpszFormat : PAnsiChar) : UINT');
 CL.AddDelphiFunction('Function RegisterClipboardFormatW( lpszFormat : PWideChar) : UINT');
 CL.AddDelphiFunction('Function CountClipboardFormats : Integer');
 CL.AddDelphiFunction('Function EnumClipboardFormats( format : UINT) : UINT');
 CL.AddDelphiFunction('Function GetClipboardFormatName( format : UINT; lpszFormatName : PChar; cchMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetClipboardFormatNameA( format : UINT; lpszFormatName : PAnsiChar; cchMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetClipboardFormatNameW( format : UINT; lpszFormatName : PWideChar; cchMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function EmptyClipboard : BOOL');
 CL.AddDelphiFunction('Function IsClipboardFormatAvailable( format : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetPriorityClipboardFormat( var paFormatPriorityList, cFormats : Integer) : Integer');
 CL.AddDelphiFunction('Function GetOpenClipboardWindow : HWND');
 CL.AddDelphiFunction('Function CharToOem( lpszSrc : PChar; lpszDst : PChar) : BOOL');
 CL.AddDelphiFunction('Function CharToOemA( lpszSrc : PAnsiChar; lpszDst : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function CharToOemW( lpszSrc : PWideChar; lpszDst : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function OemToChar( lpszSrc : PChar; lpszDst : PChar) : BOOL');
 CL.AddDelphiFunction('Function OemToCharA( lpszSrc : PAnsiChar; lpszDst : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function OemToCharW( lpszSrc : PWideChar; lpszDst : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function CharToOemBuff( lpszSrc : PChar; lpszDst : PChar; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CharToOemBuffA( lpszSrc : PAnsiChar; lpszDst : PAnsiChar; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CharToOemBuffW( lpszSrc : PWideChar; lpszDst : PWideChar; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function OemToCharBuff( lpszSrc : PChar; lpszDst : PChar; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function OemToCharBuffA( lpszSrc : PAnsiChar; lpszDst : PAnsiChar; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function OemToCharBuffW( lpszSrc : PWideChar; lpszDst : PWideChar; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function CharUpper( lpsz : PChar) : PChar');
 CL.AddDelphiFunction('Function CharUpperA( lpsz : PAnsiChar) : PAnsiChar');
 CL.AddDelphiFunction('Function CharUpperW( lpsz : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function CharUpperBuff( lpsz : PChar; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function CharUpperBuffA( lpsz : PAnsiChar; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function CharUpperBuffW( lpsz : PWideChar; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function CharLower( lpsz : PChar) : PChar');
 CL.AddDelphiFunction('Function CharLowerA( lpsz : PAnsiChar) : PAnsiChar');
 CL.AddDelphiFunction('Function CharLowerW( lpsz : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function CharLowerBuff( lpsz : PChar; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function CharLowerBuffA( lpsz : PAnsiChar; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function CharLowerBuffW( lpsz : PWideChar; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function CharNext( lpsz : PChar) : PChar');
 CL.AddDelphiFunction('Function CharNextA( lpsz : PAnsiChar) : PAnsiChar');
 CL.AddDelphiFunction('Function CharNextW( lpsz : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function CharPrev( lpszStart : PChar; lpszCurrent : PChar) : PChar');
 CL.AddDelphiFunction('Function CharPrevA( lpszStart : PAnsiChar; lpszCurrent : PAnsiChar) : PAnsiChar');
 CL.AddDelphiFunction('Function CharPrevW( lpszStart : PWideChar; lpszCurrent : PWideChar) : PWideChar');
 CL.AddDelphiFunction('Function CharNextExA( CodePage : Word; lpCurrentChar : LPCSTR; dwFlags : DWORD) : LPSTR');
 CL.AddDelphiFunction('Function CharNextEx( CodePage : Word; lpCurrentChar : LPCSTR; dwFlags : DWORD) : LPSTR');
 CL.AddDelphiFunction('Function CharPrevEx( CodePage : Word; lpStart, lpCurrentChar : LPCSTR; dwFlags : DWORD) : LPSTR');
 CL.AddDelphiFunction('Function CharPrevExA( CodePage : Word; lpStart, lpCurrentChar : LPCSTR; dwFlags : DWORD) : LPSTR');
 CL.AddDelphiFunction('Function AnsiToOem( const lpszSrc : LPCSTR; lpszDst : LPSTR) : BOOL');
 CL.AddDelphiFunction('Function OemToAnsi( const lpszSrc : LPCSTR; lpszDst : LPSTR) : BOOL');
 CL.AddDelphiFunction('Function AnsiToOemBuff( lpszSrc : LPCSTR; lpszDst : LPSTR; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function OemToAnsiBuff( lpszSrc : LPCSTR; lpszDst : LPSTR; cchDstLength : DWORD) : BOOL');
 CL.AddDelphiFunction('Function AnsiUpper( lpsz : LPSTR) : LPSTR');
 CL.AddDelphiFunction('Function AnsiUpperBuff( lpsz : LPSTR; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function AnsiLower( lpsz : LPSTR) : LPSTR');
 CL.AddDelphiFunction('Function AnsiLowerBuff( lpsz : LPSTR; cchLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function AnsiNext( const lpsz : LPCSTR) : LPSTR');
 CL.AddDelphiFunction('Function AnsiPrev( const lpszStart : LPCSTR; const lpszCurrent : LPCSTR) : LPSTR');
 CL.AddDelphiFunction('Function IsCharAlpha( ch : Char) : BOOL');
 CL.AddDelphiFunction('Function IsCharAlphaA( ch : AnsiChar) : BOOL');
 CL.AddDelphiFunction('Function IsCharAlphaW( ch : WideChar) : BOOL');
 CL.AddDelphiFunction('Function IsCharAlphaNumeric( ch : Char) : BOOL');
 CL.AddDelphiFunction('Function IsCharAlphaNumericA( ch : AnsiChar) : BOOL');
 CL.AddDelphiFunction('Function IsCharAlphaNumericW( ch : WideChar) : BOOL');
 CL.AddDelphiFunction('Function IsCharUpper( ch : Char) : BOOL');
 CL.AddDelphiFunction('Function IsCharUpperA( ch : AnsiChar) : BOOL');
 CL.AddDelphiFunction('Function IsCharUpperW( ch : WideChar) : BOOL');
 CL.AddDelphiFunction('Function IsCharLower( ch : Char) : BOOL');
 CL.AddDelphiFunction('Function IsCharLowerA( ch : AnsiChar) : BOOL');
 CL.AddDelphiFunction('Function IsCharLowerW( ch : WideChar) : BOOL');
 CL.AddDelphiFunction('Function SetFocus( hWnd : HWND) : HWND');
 CL.AddDelphiFunction('Function GetActiveWindow : HWND');
 CL.AddDelphiFunction('Function GetFocus : HWND');
 CL.AddDelphiFunction('Function GetKBCodePage : UINT');
 CL.AddDelphiFunction('Function GetKeyState( nVirtKey : Integer) : SHORT');
 CL.AddDelphiFunction('Function GetAsyncKeyState( vKey : Integer) : SHORT');
  CL.AddTypeS('PKeyboardState', '^TKeyboardState // will not work');
 CL.AddDelphiFunction('Function GetKeyboardState( var KeyState : TKeyboardState) : BOOL');
 CL.AddDelphiFunction('Function SetKeyboardState( var KeyState : TKeyboardState) : BOOL');
 CL.AddDelphiFunction('Function GetKeyNameText( lParam : Longint; lpString : PChar; nSize : Integer) : Integer');
 CL.AddDelphiFunction('Function GetKeyNameTextA( lParam : Longint; lpString : PAnsiChar; nSize : Integer) : Integer');
 CL.AddDelphiFunction('Function GetKeyNameTextW( lParam : Longint; lpString : PWideChar; nSize : Integer) : Integer');
 CL.AddDelphiFunction('Function GetKeyboardType( nTypeFlag : Integer) : Integer');
 CL.AddDelphiFunction('Function ToAscii( uVirtKey, uScanCode : UINT; const KeyState : TKeyboardState; lpChar : PChar; uFlags : UINT) : Integer');
 CL.AddDelphiFunction('Function ToAsciiEx( uVirtKey : UINT; uScanCode : UINT; const KeyState : TKeyboardState; lpChar : PChar; uFlags : UINT; dwhkl : HKL) : Integer');
 CL.AddDelphiFunction('Function ToUnicode( wVirtKey, wScanCode : UINT; const KeyState : TKeyboardState; var pwszBuff, cchBuff : Integer; wFlags : UINT) : Integer');
 CL.AddDelphiFunction('Function OemKeyScan( wOemChar : Word) : DWORD');
 CL.AddDelphiFunction('Function VkKeyScan( ch : Char) : SHORT');
 CL.AddDelphiFunction('Function VkKeyScanA( ch : AnsiChar) : SHORT');
 CL.AddDelphiFunction('Function VkKeyScanW( ch : WideChar) : SHORT');
 CL.AddDelphiFunction('Function VkKeyScanEx( ch : Char; dwhkl : HKL) : SHORT');
 CL.AddDelphiFunction('Function VkKeyScanExA( ch : AnsiChar; dwhkl : HKL) : SHORT');
 CL.AddDelphiFunction('Function VkKeyScanExW( ch : WideChar; dwhkl : HKL) : SHORT');
 CL.AddConstantN('KEYEVENTF_EXTENDEDKEY','LongInt').SetInt( 1);
 CL.AddConstantN('KEYEVENTF_KEYUP','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Procedure keybd_event( bVk : Byte; bScan : Byte; dwFlags, dwExtraInfo : DWORD)');
 CL.AddConstantN('MOUSEEVENTF_MOVE','LongWord').SetUInt( $0001);
 CL.AddConstantN('MOUSEEVENTF_LEFTDOWN','LongWord').SetUInt( $0002);
 CL.AddConstantN('MOUSEEVENTF_LEFTUP','LongWord').SetUInt( $0004);
 CL.AddConstantN('MOUSEEVENTF_RIGHTDOWN','LongWord').SetUInt( $0008);
 CL.AddConstantN('MOUSEEVENTF_RIGHTUP','LongWord').SetUInt( $0010);
 CL.AddConstantN('MOUSEEVENTF_MIDDLEDOWN','LongWord').SetUInt( $0020);
 CL.AddConstantN('MOUSEEVENTF_MIDDLEUP','LongWord').SetUInt( $0040);
 CL.AddConstantN('MOUSEEVENTF_WHEEL','LongWord').SetUInt( $0800);
 CL.AddConstantN('MOUSEEVENTF_ABSOLUTE','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Procedure mouse_event( dwFlags, dx, dy, dwData, dwExtraInfo : DWORD)');
  CL.AddTypeS('PMouseInput', '^TMouseInput // will not work');
  CL.AddTypeS('tagMOUSEINPUT', 'record dx : Longint; dy : Longint; mouseData : '
   +'DWORD; dwFlags : DWORD; time : DWORD; dwExtraInfo : DWORD; end');
  CL.AddTypeS('TMouseInput', 'tagMOUSEINPUT');
  CL.AddTypeS('PKeybdInput', '^TKeybdInput // will not work');
  CL.AddTypeS('tagKEYBDINPUT', 'record wVk : WORD; wScan : WORD; dwFlags : DWOR'
   +'D; time : DWORD; dwExtraInfo : DWORD; end');
  CL.AddTypeS('TKeybdInput', 'tagKEYBDINPUT');
  CL.AddTypeS('PHardwareInput', '^THardwareInput // will not work');
  CL.AddTypeS('tagHARDWAREINPUT', 'record uMsg : DWORD; wParamL : WORD; wParamH'
   +' : WORD; end');
  CL.AddTypeS('THardwareInput', 'tagHARDWAREINPUT');
 CL.AddConstantN('INPUT_MOUSE','LongInt').SetInt( 0);
 CL.AddConstantN('INPUT_KEYBOARD','LongInt').SetInt( 1);
 CL.AddConstantN('INPUT_HARDWARE','LongInt').SetInt( 2);
  CL.AddTypeS('PInput', '^TInput // will not work');
  CL.AddTypeS('tagINPUT', 'record Itype : DWORD; end');
  CL.AddTypeS('TInput', 'tagINPUT');
 CL.AddDelphiFunction('Function SendInput( cInputs : UINT; var pInputs : TInput; cbSize : Integer) : UINT');
  CL.AddTypeS('PLastInputInfo', '^TLastInputInfo // will not work');
  CL.AddTypeS('tagLASTINPUTINFO', 'record cbSize : UINT; dwTime : DWORD; end');
  CL.AddTypeS('TLastInputInfo', 'tagLASTINPUTINFO');
 CL.AddDelphiFunction('Function GetLastInputInfo( var plii : TLastInputInfo) : BOOL');
 CL.AddDelphiFunction('Function MapVirtualKey( uCode, uMapType : UINT) : UINT');
 CL.AddDelphiFunction('Function MapVirtualKeyA( uCode, uMapType : UINT) : UINT');
 CL.AddDelphiFunction('Function MapVirtualKeyW( uCode, uMapType : UINT) : UINT');
 CL.AddDelphiFunction('Function MapVirtualKeyEx( uCode, uMapType : UINT; dwhkl : HKL) : UINT');
 CL.AddDelphiFunction('Function MapVirtualKeyExA( uCode, uMapType : UINT; dwhkl : HKL) : UINT');
 CL.AddDelphiFunction('Function MapVirtualKeyExW( uCode, uMapType : UINT; dwhkl : HKL) : UINT');
 CL.AddDelphiFunction('Function GetInputState : BOOL');
 CL.AddDelphiFunction('Function GetQueueStatus( flags : UINT) : DWORD');
 CL.AddDelphiFunction('Function GetCapture : HWND');
 CL.AddDelphiFunction('Function SetCapture( hWnd : HWND) : HWND');
 CL.AddDelphiFunction('Function ReleaseCapture : BOOL');
 CL.AddDelphiFunction('Function MsgWaitForMultipleObjects( nCount : DWORD; var pHandles, fWaitAll : BOOL; dwMilliseconds, dwWakeMask : DWORD) : DWORD');
 CL.AddDelphiFunction('Function MsgWaitForMultipleObjectsEx( nCount : DWORD; var pHandles, dwMilliseconds, dwWakeMask, dwFlags : DWORD) : DWORD');
 CL.AddConstantN('MWMO_WAITALL','LongWord').SetUInt( $0001);
 CL.AddConstantN('MWMO_ALERTABLE','LongWord').SetUInt( $0002);
 CL.AddConstantN('QS_KEY','LongWord').SetUInt( $0001);
 CL.AddConstantN('QS_MOUSEMOVE','LongWord').SetUInt( $0002);
 CL.AddConstantN('QS_MOUSEBUTTON','LongWord').SetUInt( $0004);
 CL.AddConstantN('QS_POSTMESSAGE','LongWord').SetUInt( $0008);
 CL.AddConstantN('QS_TIMER','LongWord').SetUInt( $0010);
 CL.AddConstantN('QS_PAINT','LongWord').SetUInt( $0020);
 CL.AddConstantN('QS_SENDMESSAGE','LongWord').SetUInt( $0040);
 CL.AddConstantN('QS_HOTKEY','LongWord').SetUInt( $0080);
 CL.AddConstantN('QS_ALLPOSTMESSAGE','LongWord').SetUInt( $0100);
 CL.AddDelphiFunction('Function SetTimer( hWnd : HWND; nIDEvent, uElapse : UINT; lpTimerFunc : TFNTimerProc) : UINT');
 CL.AddDelphiFunction('Function KillTimer( hWnd : HWND; uIDEvent : UINT) : BOOL');
 CL.AddDelphiFunction('Function IsWindowUnicode( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function EnableWindow( hWnd : HWND; bEnable : BOOL) : BOOL');
 CL.AddDelphiFunction('Function IsWindowEnabled( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function LoadAccelerators( hInstance : HINST; lpTableName : PChar) : HACCEL');
 CL.AddDelphiFunction('Function LoadAcceleratorsA( hInstance : HINST; lpTableName : PAnsiChar) : HACCEL');
 CL.AddDelphiFunction('Function LoadAcceleratorsW( hInstance : HINST; lpTableName : PWideChar) : HACCEL');
 CL.AddDelphiFunction('Function CreateAcceleratorTable( var Accel, Count : Integer) : HACCEL');
 CL.AddDelphiFunction('Function CreateAcceleratorTableA( var Accel, Count : Integer) : HACCEL');
 CL.AddDelphiFunction('Function CreateAcceleratorTableW( var Accel, Count : Integer) : HACCEL');
 CL.AddDelphiFunction('Function CopyAcceleratorTable( hAccelSrc : HACCEL; var lpAccelDst, cAccelEntries : Integer) : Integer');
 CL.AddDelphiFunction('Function CopyAcceleratorTableA( hAccelSrc : HACCEL; var lpAccelDst, cAccelEntries : Integer) : Integer');
 CL.AddDelphiFunction('Function CopyAcceleratorTableW( hAccelSrc : HACCEL; var lpAccelDst, cAccelEntries : Integer) : Integer');
 CL.AddDelphiFunction('Function TranslateAccelerator( hWnd : HWND; hAccTable : HACCEL; var lpMsg : TMsg) : Integer');
 CL.AddDelphiFunction('Function TranslateAcceleratorA( hWnd : HWND; hAccTable : HACCEL; var lpMsg : TMsg) : Integer');
 CL.AddDelphiFunction('Function TranslateAcceleratorW( hWnd : HWND; hAccTable : HACCEL; var lpMsg : TMsg) : Integer');
 CL.AddDelphiFunction('Function DestroyAcceleratorTable( hAccel : HACCEL) : BOOL');
 CL.AddConstantN('SM_CXSCREEN','LongInt').SetInt( 0);
 CL.AddConstantN('SM_CYSCREEN','LongInt').SetInt( 1);
 CL.AddConstantN('SM_CXVSCROLL','LongInt').SetInt( 2);
 CL.AddConstantN('SM_CYHSCROLL','LongInt').SetInt( 3);
 CL.AddConstantN('SM_CYCAPTION','LongInt').SetInt( 4);
 CL.AddConstantN('SM_CXBORDER','LongInt').SetInt( 5);
 CL.AddConstantN('SM_CYBORDER','LongInt').SetInt( 6);
 CL.AddConstantN('SM_CXDLGFRAME','LongInt').SetInt( 7);
 CL.AddConstantN('SM_CYDLGFRAME','LongInt').SetInt( 8);
 CL.AddConstantN('SM_CYVTHUMB','LongInt').SetInt( 9);
 CL.AddConstantN('SM_CXHTHUMB','LongInt').SetInt( 10);
 CL.AddConstantN('SM_CXICON','LongInt').SetInt( 11);
 CL.AddConstantN('SM_CYICON','LongInt').SetInt( 12);
 CL.AddConstantN('SM_CXCURSOR','LongInt').SetInt( 13);
 CL.AddConstantN('SM_CYCURSOR','LongInt').SetInt( 14);
 CL.AddConstantN('SM_CYMENU','LongInt').SetInt( 15);
 CL.AddConstantN('SM_CXFULLSCREEN','LongWord').SetUInt( $10);
 CL.AddConstantN('SM_CYFULLSCREEN','LongInt').SetInt( 17);
 CL.AddConstantN('SM_CYKANJIWINDOW','LongInt').SetInt( 18);
 CL.AddConstantN('SM_MOUSEPRESENT','LongInt').SetInt( 19);
 CL.AddConstantN('SM_CYVSCROLL','LongInt').SetInt( 20);
 CL.AddConstantN('SM_CXHSCROLL','LongInt').SetInt( 21);
 CL.AddConstantN('SM_DEBUG','LongInt').SetInt( 22);
 CL.AddConstantN('SM_SWAPBUTTON','LongInt').SetInt( 23);
 CL.AddConstantN('SM_RESERVED1','LongInt').SetInt( 24);
 CL.AddConstantN('SM_RESERVED2','LongInt').SetInt( 25);
 CL.AddConstantN('SM_RESERVED3','LongInt').SetInt( 26);
 CL.AddConstantN('SM_RESERVED4','LongInt').SetInt( 27);
 CL.AddConstantN('SM_CXMIN','LongInt').SetInt( 28);
 CL.AddConstantN('SM_CYMIN','LongInt').SetInt( 29);
 CL.AddConstantN('SM_CXSIZE','LongInt').SetInt( 30);
 CL.AddConstantN('SM_CYSIZE','LongInt').SetInt( 31);
 CL.AddConstantN('SM_CXFRAME','LongWord').SetUInt( $20);
 CL.AddConstantN('SM_CYFRAME','LongInt').SetInt( 33);
 CL.AddConstantN('SM_CXMINTRACK','LongInt').SetInt( 34);
 CL.AddConstantN('SM_CYMINTRACK','LongInt').SetInt( 35);
 CL.AddConstantN('SM_CXDOUBLECLK','LongInt').SetInt( 36);
 CL.AddConstantN('SM_CYDOUBLECLK','LongInt').SetInt( 37);
 CL.AddConstantN('SM_CXICONSPACING','LongInt').SetInt( 38);
 CL.AddConstantN('SM_CYICONSPACING','LongInt').SetInt( 39);
 CL.AddConstantN('SM_MENUDROPALIGNMENT','LongInt').SetInt( 40);
 CL.AddConstantN('SM_PENWINDOWS','LongInt').SetInt( 41);
 CL.AddConstantN('SM_DBCSENABLED','LongInt').SetInt( 42);
 CL.AddConstantN('SM_CMOUSEBUTTONS','LongInt').SetInt( 43);
 CL.AddConstantN('SM_CXFIXEDFRAME','').SetString( SM_CXDLGFRAME);
 CL.AddConstantN('SM_CYFIXEDFRAME','').SetString( SM_CYDLGFRAME);
 CL.AddConstantN('SM_CXSIZEFRAME','').SetString( SM_CXFRAME);
 CL.AddConstantN('SM_CYSIZEFRAME','').SetString( SM_CYFRAME);
 CL.AddConstantN('SM_SECURE','LongInt').SetInt( 44);
 CL.AddConstantN('SM_CXEDGE','LongInt').SetInt( 45);
 CL.AddConstantN('SM_CYEDGE','LongInt').SetInt( 46);
 CL.AddConstantN('SM_CXMINSPACING','LongInt').SetInt( 47);
 CL.AddConstantN('SM_CYMINSPACING','LongInt').SetInt( 48);
 CL.AddConstantN('SM_CXSMICON','LongInt').SetInt( 49);
 CL.AddConstantN('SM_CYSMICON','LongInt').SetInt( 50);
 CL.AddConstantN('SM_CYSMCAPTION','LongInt').SetInt( 51);
 CL.AddConstantN('SM_CXSMSIZE','LongInt').SetInt( 52);
 CL.AddConstantN('SM_CYSMSIZE','LongInt').SetInt( 53);
 CL.AddConstantN('SM_CXMENUSIZE','LongInt').SetInt( 54);
 CL.AddConstantN('SM_CYMENUSIZE','LongInt').SetInt( 55);
 CL.AddConstantN('SM_ARRANGE','LongInt').SetInt( 56);
 CL.AddConstantN('SM_CXMINIMIZED','LongInt').SetInt( 57);
 CL.AddConstantN('SM_CYMINIMIZED','LongInt').SetInt( 58);
 CL.AddConstantN('SM_CXMAXTRACK','LongInt').SetInt( 59);
 CL.AddConstantN('SM_CYMAXTRACK','LongInt').SetInt( 60);
 CL.AddConstantN('SM_CXMAXIMIZED','LongInt').SetInt( 61);
 CL.AddConstantN('SM_CYMAXIMIZED','LongInt').SetInt( 62);
 CL.AddConstantN('SM_NETWORK','LongInt').SetInt( 63);
 CL.AddConstantN('SM_CLEANBOOT','LongInt').SetInt( 67);
 CL.AddConstantN('SM_CXDRAG','LongInt').SetInt( 68);
 CL.AddConstantN('SM_CYDRAG','LongInt').SetInt( 69);
 CL.AddConstantN('SM_SHOWSOUNDS','LongInt').SetInt( 70);
 CL.AddConstantN('SM_CXMENUCHECK','LongInt').SetInt( 71);
 CL.AddConstantN('SM_CYMENUCHECK','LongInt').SetInt( 72);
 CL.AddConstantN('SM_SLOWMACHINE','LongInt').SetInt( 73);
 CL.AddConstantN('SM_MIDEASTENABLED','LongInt').SetInt( 74);
 CL.AddConstantN('SM_MOUSEWHEELPRESENT','LongInt').SetInt( 75);
 CL.AddConstantN('SM_CMETRICS','LongInt').SetInt( 76);
 CL.AddConstantN('SM_REMOTESESSION','LongWord').SetUInt( $1000);
 CL.AddConstantN('SM_XVIRTUALSCREEN','LongInt').SetInt( 76);
 CL.AddConstantN('SM_YVIRTUALSCREEN','LongInt').SetInt( 77);
 CL.AddConstantN('SM_CXVIRTUALSCREEN','LongInt').SetInt( 78);
 CL.AddConstantN('SM_CYVIRTUALSCREEN','LongInt').SetInt( 79);
 CL.AddConstantN('SM_CMONITORS','LongInt').SetInt( 80);
 CL.AddConstantN('SM_SAMEDISPLAYFORMAT','LongInt').SetInt( 81);
 CL.AddConstantN('SM_IMMENABLED','LongInt').SetInt( 82);
 CL.AddConstantN('SM_CXFOCUSBORDER','LongInt').SetInt( 83);
 CL.AddConstantN('SM_CYFOCUSBORDER','LongInt').SetInt( 84);
 CL.AddDelphiFunction('Function GetSystemMetrics( nIndex : Integer) : Integer');
 CL.AddDelphiFunction('Function LoadMenu( hInstance : HINST; lpMenuName : PChar) : HMENU');
 CL.AddDelphiFunction('Function LoadMenuA( hInstance : HINST; lpMenuName : PAnsiChar) : HMENU');
 CL.AddDelphiFunction('Function LoadMenuW( hInstance : HINST; lpMenuName : PWideChar) : HMENU');
 CL.AddDelphiFunction('Function LoadMenuIndirect( lpMenuTemplate : Pointer) : HMENU');
 CL.AddDelphiFunction('Function LoadMenuIndirectA( lpMenuTemplate : Pointer) : HMENU');
 CL.AddDelphiFunction('Function LoadMenuIndirectW( lpMenuTemplate : Pointer) : HMENU');
 CL.AddDelphiFunction('Function GetMenu( hWnd : HWND) : HMENU');
 CL.AddDelphiFunction('Function SetMenu( hWnd : HWND; hMenu : HMENU) : BOOL');
 CL.AddDelphiFunction('Function ChangeMenu( hMenu : HMENU; cmd : UINT; lpszNewItem : PChar; cmdInsert : UINT; flags : UINT) : BOOL');
 CL.AddDelphiFunction('Function ChangeMenuA( hMenu : HMENU; cmd : UINT; lpszNewItem : PAnsiChar; cmdInsert : UINT; flags : UINT) : BOOL');
 CL.AddDelphiFunction('Function ChangeMenuW( hMenu : HMENU; cmd : UINT; lpszNewItem : PWideChar; cmdInsert : UINT; flags : UINT) : BOOL');
 CL.AddDelphiFunction('Function HiliteMenuItem( hWnd : HWND; hMenu : HMENU; uIDHiliteItem : UINT; uHilite : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetMenuString( hMenu : HMENU; uIDItem : UINT; lpString : PChar; nMaxCount : Integer; uFlag : UINT) : Integer');
 CL.AddDelphiFunction('Function GetMenuStringA( hMenu : HMENU; uIDItem : UINT; lpString : PAnsiChar; nMaxCount : Integer; uFlag : UINT) : Integer');
 CL.AddDelphiFunction('Function GetMenuStringW( hMenu : HMENU; uIDItem : UINT; lpString : PWideChar; nMaxCount : Integer; uFlag : UINT) : Integer');
 CL.AddDelphiFunction('Function GetMenuState( hMenu : HMENU; uId, uFlags : UINT) : UINT');
 CL.AddDelphiFunction('Function DrawMenuBar( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function GetSystemMenu( hWnd : HWND; bRevert : BOOL) : HMENU');
 CL.AddDelphiFunction('Function CreateMenu : HMENU');
 CL.AddDelphiFunction('Function CreatePopupMenu : HMENU');
 CL.AddDelphiFunction('Function DestroyMenu( hMenu : HMENU) : BOOL');
 CL.AddDelphiFunction('Function CheckMenuItem( hMenu : HMENU; uIDCheckItem, uCheck : UINT) : DWORD');
 CL.AddDelphiFunction('Function EnableMenuItem( hMenu : HMENU; uIDEnableItem, uEnable : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetSubMenu( hMenu : HMENU; nPos : Integer) : HMENU');
 CL.AddDelphiFunction('Function GetMenuItemID( hMenu : HMENU; nPos : Integer) : UINT');
 CL.AddDelphiFunction('Function GetMenuItemCount( hMenu : HMENU) : Integer');
 CL.AddDelphiFunction('Function InsertMenu( hMenu : HMENU; uPosition, uFlags, uIDNewItem : UINT; lpNewItem : PChar) : BOOL');
 CL.AddDelphiFunction('Function InsertMenuA( hMenu : HMENU; uPosition, uFlags, uIDNewItem : UINT; lpNewItem : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function InsertMenuW( hMenu : HMENU; uPosition, uFlags, uIDNewItem : UINT; lpNewItem : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function AppendMenu( hMenu : HMENU; uFlags, uIDNewItem : UINT; lpNewItem : PChar) : BOOL');
 CL.AddDelphiFunction('Function AppendMenuA( hMenu : HMENU; uFlags, uIDNewItem : UINT; lpNewItem : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function AppendMenuW( hMenu : HMENU; uFlags, uIDNewItem : UINT; lpNewItem : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function ModifyMenu( hMnu : HMENU; uPosition, uFlags, uIDNewItem : UINT; lpNewItem : PChar) : BOOL');
 CL.AddDelphiFunction('Function ModifyMenuA( hMnu : HMENU; uPosition, uFlags, uIDNewItem : UINT; lpNewItem : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function ModifyMenuW( hMnu : HMENU; uPosition, uFlags, uIDNewItem : UINT; lpNewItem : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function RemoveMenu( hMenu : HMENU; uPosition, uFlags : UINT) : BOOL');
 CL.AddDelphiFunction('Function DeleteMenu( hMenu : HMENU; uPosition, uFlags : UINT) : BOOL');
 CL.AddDelphiFunction('Function SetMenuItemBitmaps( hMenu : HMENU; uPosition, uFlags : UINT; hBitmapUnchecked : HBITMAP; hBitmapChecked : HBITMAP) : BOOL');
 CL.AddDelphiFunction('Function GetMenuCheckMarkDimensions : Longint');
 CL.AddDelphiFunction('Function TrackPopupMenu( hMenu : HMENU; uFlags : UINT; x, y, nReserved : Integer; hWnd : HWND; prcRect : PRect) : BOOL');
 CL.AddConstantN('MNC_IGNORE','LongInt').SetInt( 0);
 CL.AddConstantN('MNC_CLOSE','LongInt').SetInt( 1);
 CL.AddConstantN('MNC_EXECUTE','LongInt').SetInt( 2);
 CL.AddConstantN('MNC_SELECT','LongInt').SetInt( 3);
  CL.AddTypeS('PTPMParams', '^TTPMParams // will not work');
  CL.AddTypeS('tagTPMPARAMS', 'record cbSize : UINT; rcExclude : TRect; end');
  CL.AddTypeS('TTPMParams', 'tagTPMPARAMS');
  CL.AddTypeS('TPMPARAMS', 'tagTPMPARAMS');
 CL.AddDelphiFunction('Function TrackPopupMenuEx( hMenu : HMENU; Flags : UINT; x, y : Integer; Wnd : HWND; TPMParams : PTPMParams) : BOOL');
 CL.AddConstantN('MNS_NOCHECK','LongWord').SetUInt( $80000000);
 CL.AddConstantN('MNS_MODELESS','LongWord').SetUInt( $40000000);
 CL.AddConstantN('MNS_DRAGDROP','LongWord').SetUInt( $20000000);
 CL.AddConstantN('MNS_AUTODISMISS','LongWord').SetUInt( $10000000);
 CL.AddConstantN('MNS_NOTIFYBYPOS','LongWord').SetUInt( $8000000);
 CL.AddConstantN('MNS_CHECKORBMP','LongWord').SetUInt( $4000000);
 CL.AddConstantN('MIM_MAXHEIGHT','LongInt').SetInt( 1);
 CL.AddConstantN('MIM_BACKGROUND','LongInt').SetInt( 2);
 CL.AddConstantN('MIM_HELPID','LongInt').SetInt( 4);
 CL.AddConstantN('MIM_MENUDATA','LongInt').SetInt( 8);
 CL.AddConstantN('MIM_STYLE','LongWord').SetUInt( $10);
 CL.AddConstantN('MIM_APPLYTOSUBMENUS','LongWord').SetUInt( $80000000);
  CL.AddTypeS('PMenuInfo', '^TMenuInfo // will not work');
  CL.AddTypeS('tagMENUINFO', 'record cbSize : DWORD; fMask : DWORD; dwStyle : D'
   +'WORD; cyMax : UINT; hbrBack : HBRUSH; dwContextHelpID : DWORD; dwMenuData '
   +': DWORD; end');
  CL.AddTypeS('TMenuInfo', 'tagMENUINFO');
 CL.AddDelphiFunction('Function GetMenuInfo( hMenu : HMENU; var lpmi : TMenuInfo) : BOOL');
 CL.AddDelphiFunction('Function SetMenuInfo( hMenu : HMENU; const lpcmi : TMenuInfo) : BOOL');
 CL.AddDelphiFunction('Function EndMenu : BOOL');
 CL.AddConstantN('MND_CONTINUE','LongInt').SetInt( 0);
 CL.AddConstantN('MND_ENDMENU','LongInt').SetInt( 1);
  CL.AddTypeS('PMenuGetObjectInfo', '^TMenuGetObjectInfo // will not work');
  CL.AddTypeS('tagMENUGETOBJECTINFO', 'record dwFlags : DWORD; uPos : UINT; hme'
   +'nu : HMENU; riid : Pointer; pvObj : Pointer; end');
  CL.AddTypeS('TMenuGetObjectInfo', 'tagMENUGETOBJECTINFO');
 CL.AddConstantN('MNGOF_GAP','LongInt').SetInt( 3);
 CL.AddConstantN('MNGO_NOINTERFACE','LongInt').SetInt( 0);
 CL.AddConstantN('MNGO_NOERROR','LongInt').SetInt( 1);
 CL.AddConstantN('MIIM_STATE','LongInt').SetInt( 1);
 CL.AddConstantN('MIIM_ID','LongInt').SetInt( 2);
 CL.AddConstantN('MIIM_SUBMENU','LongInt').SetInt( 4);
 CL.AddConstantN('MIIM_CHECKMARKS','LongInt').SetInt( 8);
 CL.AddConstantN('MIIM_TYPE','LongWord').SetUInt( $10);
 CL.AddConstantN('MIIM_DATA','LongWord').SetUInt( $20);
 CL.AddConstantN('MIIM_STRING','LongWord').SetUInt( $40);
 CL.AddConstantN('MIIM_BITMAP','LongWord').SetUInt( $80);
 CL.AddConstantN('MIIM_FTYPE','LongWord').SetUInt( $100);
 CL.AddConstantN('HBMMENU_CALLBACK','LongInt').SetInt( - 1);
 CL.AddConstantN('HBMMENU_SYSTEM','LongInt').SetInt( 1);
 CL.AddConstantN('HBMMENU_MBAR_RESTORE','LongInt').SetInt( 2);
 CL.AddConstantN('HBMMENU_MBAR_MINIMIZE','LongInt').SetInt( 3);
 CL.AddConstantN('HBMMENU_MBAR_CLOSE','LongInt').SetInt( 5);
 CL.AddConstantN('HBMMENU_MBAR_CLOSE_D','LongInt').SetInt( 6);
 CL.AddConstantN('HBMMENU_MBAR_MINIMIZE_D','LongInt').SetInt( 7);
 CL.AddConstantN('HBMMENU_POPUP_CLOSE','LongInt').SetInt( 8);
 CL.AddConstantN('HBMMENU_POPUP_RESTORE','LongInt').SetInt( 9);
 CL.AddConstantN('HBMMENU_POPUP_MAXIMIZE','LongInt').SetInt( 10);
 CL.AddConstantN('HBMMENU_POPUP_MINIMIZE','LongInt').SetInt( 11);
  CL.AddTypeS('PMenuItemInfoA', '^TMenuItemInfoA // will not work');
  CL.AddTypeS('PMenuItemInfoW', '^TMenuItemInfoW // will not work');
  CL.AddTypeS('PMenuItemInfo', 'PMenuItemInfoA');
  CL.AddTypeS('tagMENUITEMINFOA', 'record cbSize : UINT; fMask : UINT; fType : '
   +'UINT; fState : UINT; wID : UINT; hSubMenu : HMENU; hbmpChecked : HBITMAP; '
   +'hbmpUnchecked : HBITMAP; dwItemData : DWORD; dwTypeData : PAnsiChar; cch :'
   +' UINT; hbmpItem : HBITMAP; end');
  CL.AddTypeS('tagMENUITEMINFOW', 'record cbSize : UINT; fMask : UINT; fType : '
   +'UINT; fState : UINT; wID : UINT; hSubMenu : HMENU; hbmpChecked : HBITMAP; '
   +'hbmpUnchecked : HBITMAP; dwItemData : DWORD; dwTypeData : PWideChar; cch :'
   +' UINT; hbmpItem : HBITMAP; end');
  CL.AddTypeS('tagMENUITEMINFO', 'tagMENUITEMINFOA');
  CL.AddTypeS('TMenuItemInfoA', 'tagMENUITEMINFOA');
  CL.AddTypeS('TMenuItemInfoW', 'tagMENUITEMINFOW');
  CL.AddTypeS('TMenuItemInfo', 'TMenuItemInfoA');
  CL.AddTypeS('MENUITEMINFOA', 'tagMENUITEMINFOA');
  CL.AddTypeS('MENUITEMINFOW', 'tagMENUITEMINFOW');
  CL.AddTypeS('MENUITEMINFO', 'MENUITEMINFOA');
 CL.AddDelphiFunction('Function InsertMenuItem( p1 : HMENU; p2 : UINT; p3 : BOOL; const p4 : TMenuItemInfo) : BOOL');
 CL.AddDelphiFunction('Function InsertMenuItemA( p1 : HMENU; p2 : UINT; p3 : BOOL; const p4 : TMenuItemInfoA) : BOOL');
 CL.AddDelphiFunction('Function InsertMenuItemW( p1 : HMENU; p2 : UINT; p3 : BOOL; const p4 : TMenuItemInfoW) : BOOL');
 CL.AddDelphiFunction('Function GetMenuItemInfo( p1 : HMENU; p2 : UINT; p3 : BOOL; var p4 : TMenuItemInfo) : BOOL');
 CL.AddDelphiFunction('Function GetMenuItemInfoA( p1 : HMENU; p2 : UINT; p3 : BOOL; var p4 : TMenuItemInfoA) : BOOL');
 CL.AddDelphiFunction('Function GetMenuItemInfoW( p1 : HMENU; p2 : UINT; p3 : BOOL; var p4 : TMenuItemInfoW) : BOOL');
 CL.AddDelphiFunction('Function SetMenuItemInfo( p1 : HMENU; p2 : UINT; p3 : BOOL; const p4 : TMenuItemInfo) : BOOL');
 CL.AddDelphiFunction('Function SetMenuItemInfoA( p1 : HMENU; p2 : UINT; p3 : BOOL; const p4 : TMenuItemInfoA) : BOOL');
 CL.AddDelphiFunction('Function SetMenuItemInfoW( p1 : HMENU; p2 : UINT; p3 : BOOL; const p4 : TMenuItemInfoW) : BOOL');
 CL.AddConstantN('GMDI_USEDISABLED','LongInt').SetInt( 1);
 CL.AddConstantN('GMDI_GOINTOPOPUPS','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Function GetMenuDefaultItem( hMenu : HMENU; fByPos, gmdiFlags : UINT) : UINT');
 CL.AddDelphiFunction('Function SetMenuDefaultItem( hMenu : HMENU; uItem, fByPos : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetMenuItemRect( hWnd : HWND; hMenu : HMENU; uItem : UINT; var lprcItem : TRect) : BOOL');
 CL.AddDelphiFunction('Function MenuItemFromPoint( hWnd : HWND; hMenu : HMENU; ptScreen : TPoint) : BOOL');
 CL.AddConstantN('TPM_LEFTBUTTON','LongInt').SetInt( 0);
 CL.AddConstantN('TPM_RIGHTBUTTON','LongInt').SetInt( 2);
 CL.AddConstantN('TPM_LEFTALIGN','LongInt').SetInt( 0);
 CL.AddConstantN('TPM_CENTERALIGN','LongInt').SetInt( 4);
 CL.AddConstantN('TPM_RIGHTALIGN','LongInt').SetInt( 8);
 CL.AddConstantN('TPM_TOPALIGN','LongInt').SetInt( 0);
 CL.AddConstantN('TPM_VCENTERALIGN','LongWord').SetUInt( $10);
 CL.AddConstantN('TPM_BOTTOMALIGN','LongWord').SetUInt( $20);
 CL.AddConstantN('TPM_HORIZONTAL','LongInt').SetInt( 0);
 CL.AddConstantN('TPM_VERTICAL','LongWord').SetUInt( $40);
 CL.AddConstantN('TPM_NONOTIFY','LongWord').SetUInt( $80);
 CL.AddConstantN('TPM_RETURNCMD','LongWord').SetUInt( $100);
 CL.AddConstantN('TPM_RECURSE','LongWord').SetUInt( $1);
 CL.AddConstantN('TPM_HORPOSANIMATION','LongWord').SetUInt( $0400);
 CL.AddConstantN('TPM_HORNEGANIMATION','LongWord').SetUInt( $0800);
 CL.AddConstantN('TPM_VERPOSANIMATION','LongWord').SetUInt( $1000);
 CL.AddConstantN('TPM_VERNEGANIMATION','LongWord').SetUInt( $2000);
 CL.AddConstantN('TPM_NOANIMATION','LongWord').SetUInt( $4000);
  CL.AddTypeS('PDropStruct', '^TDropStruct // will not work');
  CL.AddTypeS('tagDROPSTRUCT', 'record hwndSource : HWND; hwndSink : HWND; wFmt'
   +' : DWORD; dwData : DWORD; ptDrop : TPoint; dwControlData : DWORD; end');
  CL.AddTypeS('TDropStruct', 'tagDROPSTRUCT');
  CL.AddTypeS('DROPSTRUCT', 'tagDROPSTRUCT');
 CL.AddConstantN('DOF_EXECUTABLE','LongInt').SetInt( 32769);
 CL.AddConstantN('DOF_DOCUMENT','LongInt').SetInt( 32770);
 CL.AddConstantN('DOF_DIRECTORY','LongInt').SetInt( 32771);
 CL.AddConstantN('DOF_MULTIPLE','LongInt').SetInt( 32772);
 CL.AddConstantN('DOF_PROGMAN','LongInt').SetInt( 1);
 CL.AddConstantN('DOF_SHELLDATA','LongInt').SetInt( 2);
 CL.AddConstantN('DO_DROPFILE','LongWord').SetUInt( $454C4946);
 CL.AddConstantN('DO_PRINTFILE','LongWord').SetUInt( $544E5250);
 CL.AddDelphiFunction('Function DragObject( p1, p2 : HWND; p3 : UINT; p4 : DWORD; p5 : HICON) : DWORD');
 CL.AddDelphiFunction('Function DragDetect( p1 : HWND; p2 : TPoint) : BOOL');
 CL.AddDelphiFunction('Function DrawIcon( hDC : HDC; X, Y : Integer; hIcon : HICON) : BOOL');
 CL.AddConstantN('DT_TOP','LongInt').SetInt( 0);
 CL.AddConstantN('DT_LEFT','LongInt').SetInt( 0);
 CL.AddConstantN('DT_CENTER','LongInt').SetInt( 1);
 CL.AddConstantN('DT_RIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('DT_VCENTER','LongInt').SetInt( 4);
 CL.AddConstantN('DT_BOTTOM','LongInt').SetInt( 8);
 CL.AddConstantN('DT_WORDBREAK','LongWord').SetUInt( $10);
 CL.AddConstantN('DT_SINGLELINE','LongWord').SetUInt( $20);
 CL.AddConstantN('DT_EXPANDTABS','LongWord').SetUInt( $40);
 CL.AddConstantN('DT_TABSTOP','LongWord').SetUInt( $80);
 CL.AddConstantN('DT_NOCLIP','LongWord').SetUInt( $100);
 CL.AddConstantN('DT_EXTERNALLEADING','LongWord').SetUInt( $200);
 CL.AddConstantN('DT_CALCRECT','LongWord').SetUInt( $400);
 CL.AddConstantN('DT_NOPREFIX','LongWord').SetUInt( $800);
 CL.AddConstantN('DT_INTERNAL','LongWord').SetUInt( $1000);
 CL.AddConstantN('DT_HIDEPREFIX','LongWord').SetUInt( $00100000);
 CL.AddConstantN('DT_PREFIXONLY','LongWord').SetUInt( $00200000);
 CL.AddConstantN('DT_EDITCONTROL','LongWord').SetUInt( $2000);
 CL.AddConstantN('DT_PATH_ELLIPSIS','LongWord').SetUInt( $4000);
 CL.AddConstantN('DT_END_ELLIPSIS','LongWord').SetUInt( $8000);
 CL.AddConstantN('DT_MODIFYSTRING','LongWord').SetUInt( $10000);
 CL.AddConstantN('DT_RTLREADING','LongWord').SetUInt( $20000);
 CL.AddConstantN('DT_WORD_ELLIPSIS','LongWord').SetUInt( $40000);
  CL.AddTypeS('PDrawTextParams', '^TDrawTextParams // will not work');
  CL.AddTypeS('tagDRAWTEXTPARAMS', 'record cbSize : UINT; iTabLength : Integer;'
   +' iLeftMargin : Integer; iRightMargin : Integer; uiLengthDrawn : UINT; end');
  CL.AddTypeS('TDrawTextParams', 'tagDRAWTEXTPARAMS');
  CL.AddTypeS('DRAWTEXTPARAMS', 'tagDRAWTEXTPARAMS');
 CL.AddDelphiFunction('Function DrawText( hDC : HDC; lpString : PChar; nCount : Integer; var lpRect : TRect; uFormat : UINT) : Integer');
 CL.AddDelphiFunction('Function DrawTextA( hDC : HDC; lpString : PAnsiChar; nCount : Integer; var lpRect : TRect; uFormat : UINT) : Integer');
 CL.AddDelphiFunction('Function DrawTextW( hDC : HDC; lpString : PWideChar; nCount : Integer; var lpRect : TRect; uFormat : UINT) : Integer');
 CL.AddDelphiFunction('Function DrawTextEx( DC : HDC; lpchText : PChar; cchText : Integer; var p4 : TRect; dwDTFormat : UINT; DTParams : PDrawTextParams) : Integer');
 CL.AddDelphiFunction('Function DrawTextExA( DC : HDC; lpchText : PAnsiChar; cchText : Integer; var p4 : TRect; dwDTFormat : UINT; DTParams : PDrawTextParams) : Integer');
 CL.AddDelphiFunction('Function DrawTextExW( DC : HDC; lpchText : PWideChar; cchText : Integer; var p4 : TRect; dwDTFormat : UINT; DTParams : PDrawTextParams) : Integer');
 CL.AddDelphiFunction('Function GrayString( hDC : HDC; hBrush : HBRUSH; lpOutputFunc : TFNGrayStringProc; lpData : LPARAM; nCount, X, Y, nWidth, nHeight : Integer) : BOOL');
 CL.AddDelphiFunction('Function GrayStringA( hDC : HDC; hBrush : HBRUSH; lpOutputFunc : TFNGrayStringProc; lpData : LPARAM; nCount, X, Y, nWidth, nHeight : Integer) : BOOL');
 CL.AddDelphiFunction('Function GrayStringW( hDC : HDC; hBrush : HBRUSH; lpOutputFunc : TFNGrayStringProc; lpData : LPARAM; nCount, X, Y, nWidth, nHeight : Integer) : BOOL');
 CL.AddConstantN('DST_COMPLEX','LongInt').SetInt( 0);
 CL.AddConstantN('DST_TEXT','LongInt').SetInt( 1);
 CL.AddConstantN('DST_PREFIXTEXT','LongInt').SetInt( 2);
 CL.AddConstantN('DST_ICON','LongInt').SetInt( 3);
 CL.AddConstantN('DST_BITMAP','LongInt').SetInt( 4);
 CL.AddConstantN('DSS_NORMAL','LongInt').SetInt( 0);
 CL.AddConstantN('DSS_UNION','LongWord').SetUInt( $10);
 CL.AddConstantN('DSS_DISABLED','LongWord').SetUInt( $20);
 CL.AddConstantN('DSS_MONO','LongWord').SetUInt( $80);
 CL.AddConstantN('DSS_RIGHT','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Function DrawState( DC : HDC; Brush : HBRUSH; CBFunc : TFNDrawStateProc; lData : LPARAM; wData : WPARAM; x, y, cx, cy : Integer; Flags : UINT) : BOOL');
 CL.AddDelphiFunction('Function DrawStateA( DC : HDC; Brush : HBRUSH; CBFunc : TFNDrawStateProc; lData : LPARAM; wData : WPARAM; x, y, cx, cy : Integer; Flags : UINT) : BOOL');
 CL.AddDelphiFunction('Function DrawStateW( DC : HDC; Brush : HBRUSH; CBFunc : TFNDrawStateProc; lData : LPARAM; wData : WPARAM; x, y, cx, cy : Integer; Flags : UINT) : BOOL');
 CL.AddDelphiFunction('Function TabbedTextOut( hDC : HDC; X, Y : Integer; lpString : PChar; nCount, nTabPositions : Integer; var lpnTabStopPositions, nTabOrigin : Integer) : Longint');
 CL.AddDelphiFunction('Function TabbedTextOutA( hDC : HDC; X, Y : Integer; lpString : PAnsiChar; nCount, nTabPositions : Integer; var lpnTabStopPositions, nTabOrigin : Integer) : Longint');
 CL.AddDelphiFunction('Function TabbedTextOutW( hDC : HDC; X, Y : Integer; lpString : PWideChar; nCount, nTabPositions : Integer; var lpnTabStopPositions, nTabOrigin : Integer) : Longint');
 CL.AddDelphiFunction('Function GetTabbedTextExtent( hDC : HDC; lpString : PChar; nCount, nTabPositions : Integer; var lpnTabStopPositions) : DWORD');
 CL.AddDelphiFunction('Function GetTabbedTextExtentA( hDC : HDC; lpString : PAnsiChar; nCount, nTabPositions : Integer; var lpnTabStopPositions) : DWORD');
 CL.AddDelphiFunction('Function GetTabbedTextExtentW( hDC : HDC; lpString : PWideChar; nCount, nTabPositions : Integer; var lpnTabStopPositions) : DWORD');
 CL.AddDelphiFunction('Function UpdateWindow( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function SetActiveWindow( hWnd : HWND) : HWND');
 CL.AddDelphiFunction('Function GetForegroundWindow : HWND');
 CL.AddDelphiFunction('Function PaintDesktop( hdc : HDC) : BOOL');
 CL.AddDelphiFunction('Function SetForegroundWindow( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function WindowFromDC( hDC : HDC) : HWND');
 CL.AddDelphiFunction('Function GetDC( hWnd : HWND) : HDC');
 CL.AddDelphiFunction('Function GetDCEx( hWnd : HWND; hrgnClip : HRGN; flags : DWORD) : HDC');
 CL.AddConstantN('DCX_WINDOW','LongInt').SetInt( 1);
 CL.AddConstantN('DCX_CACHE','LongInt').SetInt( 2);
 CL.AddConstantN('DCX_NORESETATTRS','LongInt').SetInt( 4);
 CL.AddConstantN('DCX_CLIPCHILDREN','LongInt').SetInt( 8);
 CL.AddConstantN('DCX_CLIPSIBLINGS','LongWord').SetUInt( $10);
 CL.AddConstantN('DCX_PARENTCLIP','LongWord').SetUInt( $20);
 CL.AddConstantN('DCX_EXCLUDERGN','LongWord').SetUInt( $40);
 CL.AddConstantN('DCX_INTERSECTRGN','LongWord').SetUInt( $80);
 CL.AddConstantN('DCX_EXCLUDEUPDATE','LongWord').SetUInt( $100);
 CL.AddConstantN('DCX_INTERSECTUPDATE','LongWord').SetUInt( $200);
 CL.AddConstantN('DCX_LOCKWINDOWUPDATE','LongWord').SetUInt( $400);
 CL.AddConstantN('DCX_VALIDATE','LongWord').SetUInt( $200000);
 CL.AddDelphiFunction('Function GetWindowDC( hWnd : HWND) : HDC');
 CL.AddDelphiFunction('Function ReleaseDC( hWnd : HWND; hDC : HDC) : Integer');
 CL.AddDelphiFunction('Function BeginPaint( hWnd : HWND; var lpPaint : TPaintStruct) : HDC');
 CL.AddDelphiFunction('Function EndPaint( hWnd : HWND; const lpPaint : TPaintStruct) : BOOL');
 CL.AddDelphiFunction('Function GetUpdateRect( hWnd : HWND; var lpRect : TRect; bErase : BOOL) : BOOL;');
 CL.AddDelphiFunction('Function GetUpdateRect( hWnd : HWND; lpRect : PRect; bErase : BOOL) : BOOL;');
 CL.AddDelphiFunction('Function GetUpdateRgn( hWnd : HWND; hRgn : HRGN; bErase : BOOL) : Integer');
 CL.AddDelphiFunction('Function SetWindowRgn( hWnd : HWND; hRgn : HRGN; bRedraw : BOOL) : Integer');
 CL.AddDelphiFunction('Function GetWindowRgn( hWnd : HWND; hRgn : HRGN) : Integer');
 CL.AddDelphiFunction('Function ExcludeUpdateRgn( hDC : HDC; hWnd : HWND) : Integer');
 CL.AddDelphiFunction('Function InvalidateRect( hWnd : HWND; lpRect : PRect; bErase : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ValidateRect( hWnd : HWND; lpRect : PRect) : BOOL');
 CL.AddDelphiFunction('Function InvalidateRgn( hWnd : HWND; hRgn : HRGN; bErase : BOOL) : BOOL');
 CL.AddDelphiFunction('Function ValidateRgn( hWnd : HWND; hRgn : HRGN) : BOOL');
 CL.AddDelphiFunction('Function RedrawWindow( hWnd : HWND; lprcUpdate : PRect; hrgnUpdate : HRGN; flags : UINT) : BOOL');
 CL.AddConstantN('RDW_INVALIDATE','LongInt').SetInt( 1);
 CL.AddConstantN('RDW_INTERNALPAINT','LongInt').SetInt( 2);
 CL.AddConstantN('RDW_ERASE','LongInt').SetInt( 4);
 CL.AddConstantN('RDW_VALIDATE','LongInt').SetInt( 8);
 CL.AddConstantN('RDW_NOINTERNALPAINT','LongWord').SetUInt( $10);
 CL.AddConstantN('RDW_NOERASE','LongWord').SetUInt( $20);
 CL.AddConstantN('RDW_NOCHILDREN','LongWord').SetUInt( $40);
 CL.AddConstantN('RDW_ALLCHILDREN','LongWord').SetUInt( $80);
 CL.AddConstantN('RDW_UPDATENOW','LongWord').SetUInt( $100);
 CL.AddConstantN('RDW_ERASENOW','LongWord').SetUInt( $200);
 CL.AddConstantN('RDW_FRAME','LongWord').SetUInt( $400);
 CL.AddConstantN('RDW_NOFRAME','LongWord').SetUInt( $800);
 CL.AddDelphiFunction('Function LockWindowUpdate( hWndLock : HWND) : BOOL');
 CL.AddDelphiFunction('Function ScrollWindow( hWnd : HWND; XAmount, YAmount : Integer; Rect, ClipRect : PRect) : BOOL');
 CL.AddDelphiFunction('Function ScrollDC( DC : HDC; DX, DY : Integer; var Scroll, Clip : TRect; Rgn : HRGN; Update : PRect) : BOOL');
 CL.AddDelphiFunction('Function ScrollWindowEx( hWnd : HWND; dx, dy : Integer; prcScroll, prcClip : PRect; hrgnUpdate : HRGN; prcUpdate : PRect; flags : UINT) : BOOL');
 CL.AddConstantN('SW_SCROLLCHILDREN','LongInt').SetInt( 1);
 CL.AddConstantN('SW_INVALIDATE','LongInt').SetInt( 2);
 CL.AddConstantN('SW_ERASE','LongInt').SetInt( 4);
 CL.AddConstantN('SW_SMOOTHSCROLL','LongWord').SetUInt( $10);
 CL.AddDelphiFunction('Function SetScrollPos( hWnd : HWND; nBar, nPos : Integer; bRedraw : BOOL) : Integer');
 CL.AddDelphiFunction('Function GetScrollPos( hWnd : HWND; nBar : Integer) : Integer');
 CL.AddDelphiFunction('Function SetScrollRange( hWnd : HWND; nBar, nMinPos, nMaxPos : Integer; bRedraw : BOOL) : BOOL');
 CL.AddDelphiFunction('Function GetScrollRange( hWnd : HWND; nBar : Integer; var lpMinPos, lpMaxPos : Integer) : BOOL');
 CL.AddDelphiFunction('Function ShowScrollBar( hWnd : HWND; wBar : Integer; bShow : BOOL) : BOOL');
 CL.AddDelphiFunction('Function EnableScrollBar( hWnd : HWND; wSBflags, wArrows : UINT) : BOOL');
 CL.AddConstantN('ESB_ENABLE_BOTH','LongInt').SetInt( 0);
 CL.AddConstantN('ESB_DISABLE_BOTH','LongInt').SetInt( 3);
 CL.AddConstantN('ESB_DISABLE_LEFT','LongInt').SetInt( 1);
 CL.AddConstantN('ESB_DISABLE_RIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('ESB_DISABLE_UP','LongInt').SetInt( 1);
 CL.AddConstantN('ESB_DISABLE_DOWN','LongInt').SetInt( 2);
 CL.AddConstantN('ESB_DISABLE_LTUP','').SetString( ESB_DISABLE_LEFT);
 CL.AddConstantN('ESB_DISABLE_RTDN','').SetString( ESB_DISABLE_RIGHT);
 CL.AddDelphiFunction('Function SetProp( hWnd : HWND; lpString : PChar; hData : THandle) : BOOL');
 CL.AddDelphiFunction('Function SetPropA( hWnd : HWND; lpString : PAnsiChar; hData : THandle) : BOOL');
 CL.AddDelphiFunction('Function SetPropW( hWnd : HWND; lpString : PWideChar; hData : THandle) : BOOL');
 CL.AddDelphiFunction('Function GetProp( hWnd : HWND; lpString : PChar) : THandle');
 CL.AddDelphiFunction('Function GetPropA( hWnd : HWND; lpString : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function GetPropW( hWnd : HWND; lpString : PWideChar) : THandle');
 CL.AddDelphiFunction('Function RemoveProp( hWnd : HWND; lpString : PChar) : THandle');
 CL.AddDelphiFunction('Function RemovePropA( hWnd : HWND; lpString : PAnsiChar) : THandle');
 CL.AddDelphiFunction('Function RemovePropW( hWnd : HWND; lpString : PWideChar) : THandle');
 CL.AddDelphiFunction('Function EnumPropsEx( hWnd : HWND; lpEnumFunc : TFNPropEnumProcEx; lParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function EnumPropsExA( hWnd : HWND; lpEnumFunc : TFNPropEnumProcEx; lParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function EnumPropsExW( hWnd : HWND; lpEnumFunc : TFNPropEnumProcEx; lParam : LPARAM) : Integer');
 CL.AddDelphiFunction('Function EnumProps( hWnd : HWND; lpEnumFunc : TFNPropEnumProc) : Integer');
 CL.AddDelphiFunction('Function EnumPropsA( hWnd : HWND; lpEnumFunc : TFNPropEnumProc) : Integer');
 CL.AddDelphiFunction('Function EnumPropsW( hWnd : HWND; lpEnumFunc : TFNPropEnumProc) : Integer');
 CL.AddDelphiFunction('Function SetWindowText( hWnd : HWND; lpString : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetWindowTextA( hWnd : HWND; lpString : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetWindowTextW( hWnd : HWND; lpString : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetWindowText( hWnd : HWND; lpString : PChar; nMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetWindowTextA( hWnd : HWND; lpString : PAnsiChar; nMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetWindowTextW( hWnd : HWND; lpString : PWideChar; nMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetWindowTextLength( hWnd : HWND) : Integer');
 CL.AddDelphiFunction('Function GetWindowTextLengthA( hWnd : HWND) : Integer');
 CL.AddDelphiFunction('Function GetWindowTextLengthW( hWnd : HWND) : Integer');
 CL.AddDelphiFunction('Function GetClientRect( hWnd : HWND; var lpRect : TRect) : BOOL');
 CL.AddDelphiFunction('Function GetWindowRect( hWnd : HWND; var lpRect : TRect) : BOOL');
 CL.AddDelphiFunction('Function AdjustWindowRect( var lpRect : TRect; dwStyle : DWORD; bMenu : BOOL) : BOOL');
 CL.AddDelphiFunction('Function AdjustWindowRectEx( var lpRect : TRect; dwStyle : DWORD; bMenu : BOOL; dwExStyle : DWORD) : BOOL');
 CL.AddConstantN('HELPINFO_WINDOW','LongInt').SetInt( 1);
 CL.AddConstantN('HELPINFO_MENUITEM','LongInt').SetInt( 2);
  CL.AddTypeS('PHelpInfo', '^THelpInfo // will not work');
  CL.AddTypeS('tagHELPINFO', 'record cbSize : UINT; iContextType : Integer; iCt'
   +'rlId : Integer; hItemHandle : THandle; dwContextId : DWORD; MousePos : TPo'
   +'int; end');
  CL.AddTypeS('THelpInfo', 'tagHELPINFO');
  CL.AddTypeS('HELPINFO', 'tagHELPINFO');
 CL.AddDelphiFunction('Function SetWindowContextHelpId( hWnd : HWND; HelpID : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetWindowContextHelpId( hWnd : HWND) : DWORD');
 CL.AddDelphiFunction('Function SetMenuContextHelpId( hMenu : HMENU; HelpID : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetMenuContextHelpId( hMenu : HMENU) : DWORD');
 CL.AddConstantN('MB_OK','LongWord').SetUInt( $00000000);
 CL.AddConstantN('MB_OKCANCEL','LongWord').SetUInt( $00000001);
 CL.AddConstantN('MB_ABORTRETRYIGNORE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('MB_YESNOCANCEL','LongWord').SetUInt( $00000003);
 CL.AddConstantN('MB_YESNO','LongWord').SetUInt( $00000004);
 CL.AddConstantN('MB_RETRYCANCEL','LongWord').SetUInt( $00000005);
 CL.AddConstantN('MB_ICONHAND','LongWord').SetUInt( $00000010);
 CL.AddConstantN('MB_ICONQUESTION','LongWord').SetUInt( $00000020);
 CL.AddConstantN('MB_ICONEXCLAMATION','LongWord').SetUInt( $00000030);
 CL.AddConstantN('MB_ICONASTERISK','LongWord').SetUInt( $00000040);
 CL.AddConstantN('MB_USERICON','LongWord').SetUInt( $00000080);
 CL.AddConstantN('MB_ICONWARNING','').SetString( MB_ICONEXCLAMATION);
 CL.AddConstantN('MB_ICONERROR','').SetString( MB_ICONHAND);
 CL.AddConstantN('MB_ICONINFORMATION','').SetString( MB_ICONASTERISK);
 CL.AddConstantN('MB_ICONSTOP','').SetString( MB_ICONHAND);
 CL.AddConstantN('MB_DEFBUTTON1','LongWord').SetUInt( $00000000);
 CL.AddConstantN('MB_DEFBUTTON2','LongWord').SetUInt( $00000100);
 CL.AddConstantN('MB_DEFBUTTON3','LongWord').SetUInt( $00000200);
 CL.AddConstantN('MB_DEFBUTTON4','LongWord').SetUInt( $00000300);
 CL.AddConstantN('MB_APPLMODAL','LongWord').SetUInt( $00000000);
 CL.AddConstantN('MB_SYSTEMMODAL','LongWord').SetUInt( $00001000);
 CL.AddConstantN('MB_TASKMODAL','LongWord').SetUInt( $00002000);
 CL.AddConstantN('MB_HELP','LongWord').SetUInt( $00004000);
 CL.AddConstantN('MB_NOFOCUS','LongWord').SetUInt( $00008000);
 CL.AddConstantN('MB_SETFOREGROUND','LongWord').SetUInt( $00010000);
 CL.AddConstantN('MB_DEFAULT_DESKTOP_ONLY','LongWord').SetUInt( $00020000);
 CL.AddConstantN('MB_TOPMOST','LongWord').SetUInt( $00040000);
 CL.AddConstantN('MB_RIGHT','LongWord').SetUInt( $00080000);
 CL.AddConstantN('MB_RTLREADING','LongWord').SetUInt( $00100000);
 CL.AddConstantN('MB_SERVICE_NOTIFICATION','LongWord').SetUInt( $00200000);
 CL.AddConstantN('MB_SERVICE_NOTIFICATION_NT3X','LongWord').SetUInt( $00040000);
 CL.AddConstantN('MB_TYPEMASK','LongWord').SetUInt( $0000000F);
 CL.AddConstantN('MB_ICONMASK','LongWord').SetUInt( $000000F0);
 CL.AddConstantN('MB_DEFMASK','LongWord').SetUInt( $00000F00);
 CL.AddConstantN('MB_MODEMASK','LongWord').SetUInt( $00003000);
 CL.AddConstantN('MB_MISCMASK','LongWord').SetUInt( $0000C000);
 CL.AddDelphiFunction('Function MessageBox( hWnd : HWND; lpText, lpCaption : PChar; uType : UINT) : Integer');
 CL.AddDelphiFunction('Function MessageBoxA( hWnd : HWND; lpText, lpCaption : PAnsiChar; uType : UINT) : Integer');
 CL.AddDelphiFunction('Function MessageBoxW( hWnd : HWND; lpText, lpCaption : PWideChar; uType : UINT) : Integer');
 CL.AddDelphiFunction('Function MessageBoxEx( hWnd : HWND; lpText, lpCaption : PChar; uType : UINT; wLanguageId : Word) : Integer');
 CL.AddDelphiFunction('Function MessageBoxExA( hWnd : HWND; lpText, lpCaption : PAnsiChar; uType : UINT; wLanguageId : Word) : Integer');
 CL.AddDelphiFunction('Function MessageBoxExW( hWnd : HWND; lpText, lpCaption : PWideChar; uType : UINT; wLanguageId : Word) : Integer');
  CL.AddTypeS('PMsgBoxParamsA', '^TMsgBoxParamsA // will not work');
  CL.AddTypeS('PMsgBoxParamsW', '^TMsgBoxParamsW // will not work');
  CL.AddTypeS('PMsgBoxParams', 'PMsgBoxParamsA');
  CL.AddTypeS('tagMSGBOXPARAMSA', 'record cbSize : UINT; hwndOwner : HWND; hIns'
   +'tance : HINST; lpszText : PAnsiChar; lpszCaption : PAnsiChar; dwStyle : DW'
   +'ORD; lpszIcon : PAnsiChar; dwContextHelpId : DWORD; lpfnMsgBoxCallback : T'
   +'PRMsgBoxCallback; dwLanguageId : DWORD; end');
  CL.AddTypeS('tagMSGBOXPARAMSW', 'record cbSize : UINT; hwndOwner : HWND; hIns'
   +'tance : HINST; lpszText : PWideChar; lpszCaption : PWideChar; dwStyle : DW'
   +'ORD; lpszIcon : PWideChar; dwContextHelpId : DWORD; lpfnMsgBoxCallback : T'
   +'PRMsgBoxCallback; dwLanguageId : DWORD; end');
  CL.AddTypeS('tagMSGBOXPARAMS', 'tagMSGBOXPARAMSA');
  CL.AddTypeS('TMsgBoxParamsA', 'tagMSGBOXPARAMSA');
  CL.AddTypeS('TMsgBoxParamsW', 'tagMSGBOXPARAMSW');
  CL.AddTypeS('TMsgBoxParams', 'TMsgBoxParamsA');
  CL.AddTypeS('MSGBOXPARAMSA', 'tagMSGBOXPARAMSA');
  CL.AddTypeS('MSGBOXPARAMSW', 'tagMSGBOXPARAMSW');
  CL.AddTypeS('MSGBOXPARAMS', 'MSGBOXPARAMSA');
 CL.AddDelphiFunction('Function MessageBoxIndirect( const MsgBoxParams : TMsgBoxParams) : BOOL');
 CL.AddDelphiFunction('Function MessageBoxIndirectA( const MsgBoxParams : TMsgBoxParamsA) : BOOL');
 CL.AddDelphiFunction('Function MessageBoxIndirectW( const MsgBoxParams : TMsgBoxParamsW) : BOOL');
 CL.AddDelphiFunction('Function MessageBeep( uType : UINT) : BOOL');
 CL.AddDelphiFunction('Function ShowCursor( bShow : BOOL) : Integer');
 CL.AddDelphiFunction('Function SetCursorPos( X, Y : Integer) : BOOL');
 CL.AddDelphiFunction('Function SetCursor( hCursor : HICON) : HCURSOR');
 CL.AddDelphiFunction('Function GetCursorPos( var lpPoint : TPoint) : BOOL');
 CL.AddDelphiFunction('Function ClipCursor( lpRect : PRect) : BOOL');
 CL.AddDelphiFunction('Function GetClipCursor( var lpRect : TRect) : BOOL');
 CL.AddDelphiFunction('Function GetCursor : HCURSOR');
 CL.AddDelphiFunction('Function CreateCaret( hWnd : HWND; hBitmap : HBITMAP; nWidth, nHeight : Integer) : BOOL');
 CL.AddDelphiFunction('Function GetCaretBlinkTime : UINT');
 CL.AddDelphiFunction('Function SetCaretBlinkTime( uMSeconds : UINT) : BOOL');
 CL.AddDelphiFunction('Function DestroyCaret : BOOL');
 CL.AddDelphiFunction('Function HideCaret( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function ShowCaret( hWnd : HWND) : BOOL');
 CL.AddDelphiFunction('Function SetCaretPos( X, Y : Integer) : BOOL');
 CL.AddDelphiFunction('Function GetCaretPos( var lpPoint : TPoint) : BOOL');
 CL.AddDelphiFunction('Function ClientToScreen( hWnd : HWND; var lpPoint : TPoint) : BOOL');
 CL.AddDelphiFunction('Function ScreenToClient( hWnd : HWND; var lpPoint : TPoint) : BOOL');
 CL.AddDelphiFunction('Function MapWindowPoints( hWndFrom, hWndTo : HWND; var lpPoints, cPoints : UINT) : Integer');
 CL.AddDelphiFunction('Function WindowFromPoint( Point : TPoint) : HWND');
 CL.AddDelphiFunction('Function ChildWindowFromPoint( hWndParent : HWND; Point : TPoint) : HWND');
 CL.AddConstantN('CWP_ALL','LongInt').SetInt( 0);
 CL.AddConstantN('CWP_SKIPINVISIBLE','LongInt').SetInt( 1);
 CL.AddConstantN('CWP_SKIPDISABLED','LongInt').SetInt( 2);
 CL.AddConstantN('CWP_SKIPTRANSPARENT','LongInt').SetInt( 4);
 CL.AddDelphiFunction('Function ChildWindowFromPointEx( hWnd : HWND; Point : TPoint; Flags : UINT) : HWND');
 CL.AddConstantN('CTLCOLOR_MSGBOX','LongInt').SetInt( 0);
 CL.AddConstantN('CTLCOLOR_EDIT','LongInt').SetInt( 1);
 CL.AddConstantN('CTLCOLOR_LISTBOX','LongInt').SetInt( 2);
 CL.AddConstantN('CTLCOLOR_BTN','LongInt').SetInt( 3);
 CL.AddConstantN('CTLCOLOR_DLG','LongInt').SetInt( 4);
 CL.AddConstantN('CTLCOLOR_SCROLLBAR','LongInt').SetInt( 5);
 CL.AddConstantN('CTLCOLOR_STATIC','LongInt').SetInt( 6);
 CL.AddConstantN('CTLCOLOR_MAX','LongInt').SetInt( 7);
 CL.AddConstantN('COLOR_SCROLLBAR','LongInt').SetInt( 0);
 CL.AddConstantN('COLOR_BACKGROUND','LongInt').SetInt( 1);
 CL.AddConstantN('COLOR_ACTIVECAPTION','LongInt').SetInt( 2);
 CL.AddConstantN('COLOR_INACTIVECAPTION','LongInt').SetInt( 3);
 CL.AddConstantN('COLOR_MENU','LongInt').SetInt( 4);
 CL.AddConstantN('COLOR_WINDOW','LongInt').SetInt( 5);
 CL.AddConstantN('COLOR_WINDOWFRAME','LongInt').SetInt( 6);
 CL.AddConstantN('COLOR_MENUTEXT','LongInt').SetInt( 7);
 CL.AddConstantN('COLOR_WINDOWTEXT','LongInt').SetInt( 8);
 CL.AddConstantN('COLOR_CAPTIONTEXT','LongInt').SetInt( 9);
 CL.AddConstantN('COLOR_ACTIVEBORDER','LongInt').SetInt( 10);
 CL.AddConstantN('COLOR_INACTIVEBORDER','LongInt').SetInt( 11);
 CL.AddConstantN('COLOR_APPWORKSPACE','LongInt').SetInt( 12);
 CL.AddConstantN('COLOR_HIGHLIGHT','LongInt').SetInt( 13);
 CL.AddConstantN('COLOR_HIGHLIGHTTEXT','LongInt').SetInt( 14);
 CL.AddConstantN('COLOR_BTNFACE','LongInt').SetInt( 15);
 CL.AddConstantN('COLOR_BTNSHADOW','LongWord').SetUInt( $10);
 CL.AddConstantN('COLOR_GRAYTEXT','LongInt').SetInt( 17);
 CL.AddConstantN('COLOR_BTNTEXT','LongInt').SetInt( 18);
 CL.AddConstantN('COLOR_INACTIVECAPTIONTEXT','LongInt').SetInt( 19);
 CL.AddConstantN('COLOR_BTNHIGHLIGHT','LongInt').SetInt( 20);
 CL.AddConstantN('COLOR_3DDKSHADOW','LongInt').SetInt( 21);
 CL.AddConstantN('COLOR_3DLIGHT','LongInt').SetInt( 22);
 CL.AddConstantN('COLOR_INFOTEXT','LongInt').SetInt( 23);
 CL.AddConstantN('COLOR_INFOBK','LongInt').SetInt( 24);
 CL.AddConstantN('COLOR_HOTLIGHT','LongInt').SetInt( 26);
 CL.AddConstantN('COLOR_GRADIENTACTIVECAPTION','LongInt').SetInt( 27);
 CL.AddConstantN('COLOR_GRADIENTINACTIVECAPTION','LongInt').SetInt( 28);
 CL.AddConstantN('COLOR_MENUHILIGHT','LongInt').SetInt( 29);
 CL.AddConstantN('COLOR_MENUBAR','LongInt').SetInt( 30);
 CL.AddConstantN('COLOR_ENDCOLORS','').SetString( COLOR_MENUBAR);
 CL.AddConstantN('COLOR_DESKTOP','').SetString( COLOR_BACKGROUND);
 CL.AddConstantN('COLOR_3DFACE','').SetString( COLOR_BTNFACE);
 CL.AddConstantN('COLOR_3DSHADOW','').SetString( COLOR_BTNSHADOW);
 CL.AddConstantN('COLOR_3DHIGHLIGHT','').SetString( COLOR_BTNHIGHLIGHT);
 CL.AddConstantN('COLOR_3DHILIGHT','').SetString( COLOR_BTNHIGHLIGHT);
 CL.AddConstantN('COLOR_BTNHILIGHT','').SetString( COLOR_BTNHIGHLIGHT);
 CL.AddDelphiFunction('Function GetSysColor( nIndex : Integer) : DWORD');
 CL.AddDelphiFunction('Function GetSysColorBrush( nIndex : Integer) : HBRUSH');
 CL.AddDelphiFunction('Function DrawFocusRect( hDC : HDC; const lprc : TRect) : BOOL');
 CL.AddDelphiFunction('Function FillRect( hDC : HDC; const lprc : TRect; hbr : HBRUSH) : Integer');
 CL.AddDelphiFunction('Function FrameRect( hDC : HDC; const lprc : TRect; hbr : HBRUSH) : Integer');
 CL.AddDelphiFunction('Function InvertRect( hDC : HDC; const lprc : TRect) : BOOL');
 CL.AddDelphiFunction('Function SetRect( var lprc : TRect; xLeft, yTop, xRight, yBottom : Integer) : BOOL');
 CL.AddDelphiFunction('Function SetRectEmpty( var lprc : TRect) : BOOL');
 CL.AddDelphiFunction('Function CopyRect( var lprcDst : TRect; const lprcSrc : TRect) : BOOL');
 CL.AddDelphiFunction('Function InflateRect( var lprc : TRect; dx, dy : Integer) : BOOL');
 CL.AddDelphiFunction('Function IntersectRect( var lprcDst : TRect; const lprcSrc1, lprcSrc2 : TRect) : BOOL');
 CL.AddDelphiFunction('Function UnionRect( var lprcDst : TRect; const lprcSrc1, lprcSrc2 : TRect) : BOOL');
 CL.AddDelphiFunction('Function SubtractRect( var lprcDst : TRect; const lprcSrc1, lprcSrc2 : TRect) : BOOL');
 CL.AddDelphiFunction('Function OffsetRect( var lprc : TRect; dx, dy : Integer) : BOOL');
 CL.AddDelphiFunction('Function IsRectEmpty( const lprc : TRect) : BOOL');
 CL.AddDelphiFunction('Function EqualRect( const lprc1, lprc2 : TRect) : BOOL');
 CL.AddDelphiFunction('Function PtInRect( const lprc : TRect; pt : TPoint) : BOOL');
 CL.AddDelphiFunction('Function GetWindowWord( hWnd : HWND; nIndex : Integer) : Word');
 CL.AddDelphiFunction('Function SetWindowWord( hWnd : HWND; nIndex : Integer; wNewWord : Word) : Word');
 CL.AddDelphiFunction('Function GetWindowLong( hWnd : HWND; nIndex : Integer) : Longint');
 CL.AddDelphiFunction('Function GetWindowLongA( hWnd : HWND; nIndex : Integer) : Longint');
 CL.AddDelphiFunction('Function GetWindowLongW( hWnd : HWND; nIndex : Integer) : Longint');
 CL.AddDelphiFunction('Function SetWindowLong( hWnd : HWND; nIndex : Integer; dwNewLong : Longint) : Longint');
 CL.AddDelphiFunction('Function SetWindowLongA( hWnd : HWND; nIndex : Integer; dwNewLong : Longint) : Longint');
 CL.AddDelphiFunction('Function SetWindowLongW( hWnd : HWND; nIndex : Integer; dwNewLong : Longint) : Longint');
 CL.AddDelphiFunction('Function GetClassWord( hWnd : HWND; nIndex : Integer) : Word');
 CL.AddDelphiFunction('Function SetClassWord( hWnd : HWND; nIndex : Integer; wNewWord : Word) : Word');
 CL.AddDelphiFunction('Function GetClassLong( hWnd : HWND; nIndex : Integer) : DWORD');
 CL.AddDelphiFunction('Function GetClassLongA( hWnd : HWND; nIndex : Integer) : DWORD');
 CL.AddDelphiFunction('Function GetClassLongW( hWnd : HWND; nIndex : Integer) : DWORD');
 CL.AddDelphiFunction('Function SetClassLong( hWnd : HWND; nIndex : Integer; dwNewLong : Longint) : DWORD');
 CL.AddDelphiFunction('Function SetClassLongA( hWnd : HWND; nIndex : Integer; dwNewLong : Longint) : DWORD');
 CL.AddDelphiFunction('Function SetClassLongW( hWnd : HWND; nIndex : Integer; dwNewLong : Longint) : DWORD');
 CL.AddDelphiFunction('Function GetDesktopWindow : HWND');
 CL.AddDelphiFunction('Function GetParent( hWnd : HWND) : HWND');
 CL.AddDelphiFunction('Function SetParent( hWndChild, hWndNewParent : HWND) : HWND');
 CL.AddDelphiFunction('Function EnumChildWindows( hWndParent : HWND; lpEnumFunc : TFNWndEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function FindWindow( lpClassName, lpWindowName : PChar) : HWND');
 CL.AddDelphiFunction('Function FindWindowA( lpClassName, lpWindowName : PAnsiChar) : HWND');
 CL.AddDelphiFunction('Function FindWindowW( lpClassName, lpWindowName : PWideChar) : HWND');
 CL.AddDelphiFunction('Function FindWindowEx( Parent, Child : HWND; ClassName, WindowName : PChar) : HWND');
 CL.AddDelphiFunction('Function FindWindowExA( Parent, Child : HWND; ClassName, WindowName : PAnsiChar) : HWND');
 CL.AddDelphiFunction('Function FindWindowExW( Parent, Child : HWND; ClassName, WindowName : PWideChar) : HWND');
 CL.AddDelphiFunction('Function EnumWindows( lpEnumFunc : TFNWndEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumThreadWindows( dwThreadId : DWORD; lpfn : TFNWndEnumProc; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function EnumTaskWindows( hTask : THandle; lpfn : FARPROC; lParam : LPARAM) : BOOL');
 CL.AddDelphiFunction('Function GetClassName( hWnd : HWND; lpClassName : PChar; nMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetClassNameA( hWnd : HWND; lpClassName : PAnsiChar; nMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetClassNameW( hWnd : HWND; lpClassName : PWideChar; nMaxCount : Integer) : Integer');
 CL.AddDelphiFunction('Function GetTopWindow( hWnd : HWND) : HWND');
 CL.AddDelphiFunction('Function GetNextWindow( hWnd : HWND; uCmd : UINT) : HWND');
 CL.AddDelphiFunction('Function GetWindowThreadProcessId( hWnd : HWND; lpdwProcessId : Pointer) : DWORD;');
 CL.AddDelphiFunction('Function GetWindowThreadProcessId( hWnd : HWND; var dwProcessId : DWORD) : DWORD;');
 CL.AddDelphiFunction('Function GetWindowTask( hWnd : HWND) : THandle');
 CL.AddDelphiFunction('Function GetLastActivePopup( hWnd : HWND) : HWND');
 CL.AddConstantN('GW_HWNDFIRST','LongInt').SetInt( 0);
 CL.AddConstantN('GW_HWNDLAST','LongInt').SetInt( 1);
 CL.AddConstantN('GW_HWNDNEXT','LongInt').SetInt( 2);
 CL.AddConstantN('GW_HWNDPREV','LongInt').SetInt( 3);
 CL.AddConstantN('GW_OWNER','LongInt').SetInt( 4);
 CL.AddConstantN('GW_CHILD','LongInt').SetInt( 5);
 CL.AddConstantN('GW_MAX','LongInt').SetInt( 5);
 CL.AddDelphiFunction('Function GetWindow( hWnd : HWND; uCmd : UINT) : HWND');
 CL.AddDelphiFunction('Function SetWindowsHook( nFilterType : Integer; pfnFilterProc : TFNHookProc) : HHOOK');
 CL.AddDelphiFunction('Function SetWindowsHookA( nFilterType : Integer; pfnFilterProc : TFNHookProc) : HHOOK');
 CL.AddDelphiFunction('Function SetWindowsHookW( nFilterType : Integer; pfnFilterProc : TFNHookProc) : HHOOK');
 CL.AddDelphiFunction('Function SetWindowsHookEx( idHook : Integer; lpfn : TFNHookProc; hmod : HINST; dwThreadId : DWORD) : HHOOK');
 CL.AddDelphiFunction('Function SetWindowsHookExA( idHook : Integer; lpfn : TFNHookProc; hmod : HINST; dwThreadId : DWORD) : HHOOK');
 CL.AddDelphiFunction('Function SetWindowsHookExW( idHook : Integer; lpfn : TFNHookProc; hmod : HINST; dwThreadId : DWORD) : HHOOK');
 CL.AddDelphiFunction('Function UnhookWindowsHook( nCode : Integer; pfnFilterProc : TFNHookProc) : BOOL');
 CL.AddDelphiFunction('Function UnhookWindowsHookEx( hhk : HHOOK) : BOOL');
 CL.AddDelphiFunction('Function CallNextHookEx( hhk : HHOOK; nCode : Integer; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefHookProc( nCode : Integer; wParam : WPARAM; lParam : LPARAM; phhk : FARPROC) : LRESULT');
 CL.AddConstantN('MF_INSERT','LongInt').SetInt( 0);
 CL.AddConstantN('MF_CHANGE','LongWord').SetUInt( $80);
 CL.AddConstantN('MF_APPEND','LongWord').SetUInt( $100);
 CL.AddConstantN('MF_DELETE','LongWord').SetUInt( $200);
 CL.AddConstantN('MF_REMOVE','LongWord').SetUInt( $1000);
 CL.AddConstantN('MF_BYCOMMAND','LongInt').SetInt( 0);
 CL.AddConstantN('MF_BYPOSITION','LongWord').SetUInt( $400);
 CL.AddConstantN('MF_SEPARATOR','LongWord').SetUInt( $800);
 CL.AddConstantN('MF_ENABLED','LongInt').SetInt( 0);
 CL.AddConstantN('MF_GRAYED','LongInt').SetInt( 1);
 CL.AddConstantN('MF_DISABLED','LongInt').SetInt( 2);
 CL.AddConstantN('MF_UNCHECKED','LongInt').SetInt( 0);
 CL.AddConstantN('MF_CHECKED','LongInt').SetInt( 8);
 CL.AddConstantN('MF_USECHECKBITMAPS','LongWord').SetUInt( $200);
 CL.AddConstantN('MF_STRING','LongInt').SetInt( 0);
 CL.AddConstantN('MF_BITMAP','LongInt').SetInt( 4);
 CL.AddConstantN('MF_OWNERDRAW','LongWord').SetUInt( $100);
 CL.AddConstantN('MF_POPUP','LongWord').SetUInt( $10);
 CL.AddConstantN('MF_MENUBARBREAK','LongWord').SetUInt( $20);
 CL.AddConstantN('MF_MENUBREAK','LongWord').SetUInt( $40);
 CL.AddConstantN('MF_UNHILITE','LongInt').SetInt( 0);
 CL.AddConstantN('MF_HILITE','LongWord').SetUInt( $80);
 CL.AddConstantN('MF_DEFAULT','LongWord').SetUInt( $1000);
 CL.AddConstantN('MF_SYSMENU','LongWord').SetUInt( $2000);
 CL.AddConstantN('MF_HELP','LongWord').SetUInt( $4000);
 CL.AddConstantN('MF_RIGHTJUSTIFY','LongWord').SetUInt( $4000);
 CL.AddConstantN('MF_MOUSESELECT','LongWord').SetUInt( $8000);
 CL.AddConstantN('MF_END','LongWord').SetUInt( $80);
 CL.AddConstantN('MFT_STRING','').SetString( MF_STRING);
 CL.AddConstantN('MFT_BITMAP','').SetString( MF_BITMAP);
 CL.AddConstantN('MFT_MENUBARBREAK','').SetString( MF_MENUBARBREAK);
 CL.AddConstantN('MFT_MENUBREAK','').SetString( MF_MENUBREAK);
 CL.AddConstantN('MFT_OWNERDRAW','').SetString( MF_OWNERDRAW);
 CL.AddConstantN('MFT_RADIOCHECK','LongWord').SetUInt( $200);
 CL.AddConstantN('MFT_SEPARATOR','').SetString( MF_SEPARATOR);
 CL.AddConstantN('MFT_RIGHTORDER','LongWord').SetUInt( $2000);
 CL.AddConstantN('MFT_RIGHTJUSTIFY','').SetString( MF_RIGHTJUSTIFY);
 CL.AddConstantN('MFS_GRAYED','LongInt').SetInt( 3);
 CL.AddConstantN('MFS_DISABLED','').SetString( MFS_GRAYED);
 CL.AddConstantN('MFS_CHECKED','').SetString( MF_CHECKED);
 CL.AddConstantN('MFS_HILITE','').SetString( MF_HILITE);
 CL.AddConstantN('MFS_ENABLED','').SetString( MF_ENABLED);
 CL.AddConstantN('MFS_UNCHECKED','').SetString( MF_UNCHECKED);
 CL.AddConstantN('MFS_UNHILITE','').SetString( MF_UNHILITE);
 CL.AddConstantN('MFS_DEFAULT','').SetString( MF_DEFAULT);
 CL.AddConstantN('MFS_MASK','LongWord').SetUInt( $108B);
 CL.AddConstantN('MFS_HOTTRACKDRAWN','LongWord').SetUInt( $10000000);
 CL.AddConstantN('MFS_CACHEDBMP','LongWord').SetUInt( $20000000);
 CL.AddConstantN('MFS_BOTTOMGAPDROP','LongWord').SetUInt( $40000000);
 CL.AddConstantN('MFS_TOPGAPDROP','LongWord').SetUInt( $80000000);
 CL.AddConstantN('MFS_GAPDROP','LongWord').SetUInt( $C0000000);
 CL.AddDelphiFunction('Function CheckMenuRadioItem( hMenu : HMENU; First, Last, Check, Flags : UINT) : BOOL');
  CL.AddTypeS('PMenuItemTemplateHeader', '^TMenuItemTemplateHeader // will not '
   +'work');
  CL.AddTypeS('MENUITEMTEMPLATEHEADER', 'record versionNumber : Word; offset : '
   +'Word; end');
  CL.AddTypeS('TMenuItemTemplateHeader', 'MENUITEMTEMPLATEHEADER');
  CL.AddTypeS('PMenuItemTemplate', '^TMenuItemTemplate // will not work');
  CL.AddTypeS('TMenuItemTemplate', 'MENUITEMTEMPLATE');
 CL.AddConstantN('SC_SIZE','LongInt').SetInt( 61440);
 CL.AddConstantN('SC_MOVE','LongInt').SetInt( 61456);
 CL.AddConstantN('SC_MINIMIZE','LongInt').SetInt( 61472);
 CL.AddConstantN('SC_MAXIMIZE','LongInt').SetInt( 61488);
 CL.AddConstantN('SC_NEXTWINDOW','LongInt').SetInt( 61504);
 CL.AddConstantN('SC_PREVWINDOW','LongInt').SetInt( 61520);
 CL.AddConstantN('SC_CLOSE','LongInt').SetInt( 61536);
 CL.AddConstantN('SC_VSCROLL','LongInt').SetInt( 61552);
 CL.AddConstantN('SC_HSCROLL','LongInt').SetInt( 61568);
 CL.AddConstantN('SC_MOUSEMENU','LongInt').SetInt( 61584);
 CL.AddConstantN('SC_KEYMENU','LongInt').SetInt( 61696);
 CL.AddConstantN('SC_ARRANGE','LongInt').SetInt( 61712);
 CL.AddConstantN('SC_RESTORE','LongInt').SetInt( 61728);
 CL.AddConstantN('SC_TASKLIST','LongInt').SetInt( 61744);
 CL.AddConstantN('SC_SCREENSAVE','LongInt').SetInt( 61760);
 CL.AddConstantN('SC_HOTKEY','LongInt').SetInt( 61776);
 CL.AddConstantN('SC_DEFAULT','LongInt').SetInt( 61792);
 CL.AddConstantN('SC_MONITORPOWER','LongInt').SetInt( 61808);
 CL.AddConstantN('SC_CONTEXTHELP','LongInt').SetInt( 61824);
 CL.AddConstantN('SC_SEPARATOR','LongInt').SetInt( 61455);
 CL.AddConstantN('SC_ICON','').SetString( SC_MINIMIZE);
 CL.AddConstantN('SC_ZOOM','').SetString( SC_MAXIMIZE);
 CL.AddDelphiFunction('Function LoadBitmap( hInstance : HINST; lpBitmapName : PChar) : HBITMAP');
 CL.AddDelphiFunction('Function LoadBitmapA( hInstance : HINST; lpBitmapName : PAnsiChar) : HBITMAP');
 CL.AddDelphiFunction('Function LoadBitmapW( hInstance : HINST; lpBitmapName : PWideChar) : HBITMAP');
 CL.AddDelphiFunction('Function LoadCursor( hInstance : HINST; lpCursorName : PChar) : HCURSOR');
 CL.AddDelphiFunction('Function LoadCursorA( hInstance : HINST; lpCursorName : PAnsiChar) : HCURSOR');
 CL.AddDelphiFunction('Function LoadCursorW( hInstance : HINST; lpCursorName : PWideChar) : HCURSOR');
 CL.AddDelphiFunction('Function LoadCursorFromFile( lpFileName : PChar) : HCURSOR');
 CL.AddDelphiFunction('Function LoadCursorFromFileA( lpFileName : PAnsiChar) : HCURSOR');
 CL.AddDelphiFunction('Function LoadCursorFromFileW( lpFileName : PWideChar) : HCURSOR');
 CL.AddDelphiFunction('Function CreateCursor( hInst : HINST; xHotSpot, yHotSpot, nWidth, nHeight : Integer; pvANDPlaneter, pvXORPlane : Pointer) : HCURSOR');
 CL.AddDelphiFunction('Function DestroyCursor( hCursor : HICON) : BOOL');
 CL.AddConstantN('IDC_ARROW','LongInt').SetInt( MakeIntResource ( 32512 ));
 CL.AddConstantN('IDC_IBEAM','LongInt').SetInt( MakeIntResource ( 32513 ));
 CL.AddConstantN('IDC_WAIT','LongInt').SetInt( MakeIntResource ( 32514 ));
 CL.AddConstantN('IDC_CROSS','LongInt').SetInt( MakeIntResource ( 32515 ));
 CL.AddConstantN('IDC_UPARROW','LongInt').SetInt( MakeIntResource ( 32516 ));
 CL.AddConstantN('IDC_SIZE','LongInt').SetInt( MakeIntResource ( 32640 ));
 CL.AddConstantN('IDC_ICON','LongInt').SetInt( MakeIntResource ( 32641 ));
 CL.AddConstantN('IDC_SIZENWSE','LongInt').SetInt( MakeIntResource ( 32642 ));
 CL.AddConstantN('IDC_SIZENESW','LongInt').SetInt( MakeIntResource ( 32643 ));
 CL.AddConstantN('IDC_SIZEWE','LongInt').SetInt( MakeIntResource ( 32644 ));
 CL.AddConstantN('IDC_SIZENS','LongInt').SetInt( MakeIntResource ( 32645 ));
 CL.AddConstantN('IDC_SIZEALL','LongInt').SetInt( MakeIntResource ( 32646 ));
 CL.AddConstantN('IDC_NO','LongInt').SetInt( MakeIntResource ( 32648 ));
 CL.AddConstantN('IDC_HAND','LongInt').SetInt( MakeIntResource ( 32649 ));
 CL.AddConstantN('IDC_APPSTARTING','LongInt').SetInt( MakeIntResource ( 32650 ));
 CL.AddConstantN('IDC_HELP','LongInt').SetInt( MakeIntResource ( 32651 ));
 CL.AddDelphiFunction('Function SetSystemCursor( hcur : HICON; id : DWORD) : BOOL');
  CL.AddTypeS('PIconInfo', '^TIconInfo // will not work');
  CL.AddTypeS('_ICONINFO', 'record fIcon : BOOL; xHotspot : DWORD; yHotspot : D'
   +'WORD; hbmMask : HBITMAP; hbmColor : HBITMAP; end');
  CL.AddTypeS('TIconInfo', '_ICONINFO');
  CL.AddTypeS('ICONINFO', '_ICONINFO');
 CL.AddDelphiFunction('Function LoadIcon( hInstance : HINST; lpIconName : PChar) : HICON');
 CL.AddDelphiFunction('Function LoadIconA( hInstance : HINST; lpIconName : PAnsiChar) : HICON');
 CL.AddDelphiFunction('Function LoadIconW( hInstance : HINST; lpIconName : PWideChar) : HICON');
 CL.AddDelphiFunction('Function CreateIcon( hInstance : HINST; nWidth, nHeight : Integer; cPlanes, cBitsPixel : Byte; lpbANDbits, lpbXORbits : Pointer) : HICON');
 CL.AddDelphiFunction('Function DestroyIcon( hIcon : HICON) : BOOL');
 CL.AddDelphiFunction('Function LookupIconIdFromDirectory( presbits : PByte; fIcon : BOOL) : Integer');
 CL.AddDelphiFunction('Function LookupIconIdFromDirectoryEx( presbits : PByte; fIcon : BOOL; cxDesired, cyDesired : Integer; Flags : UINT) : Integer');
 CL.AddDelphiFunction('Function CreateIconFromResource( presbits : PByte; dwResSize : DWORD; fIcon : BOOL; dwVer : DWORD) : HICON');
 CL.AddDelphiFunction('Function CreateIconFromResourceEx( presbits : PByte; dwResSize : DWORD; fIcon : BOOL; dwVer : DWORD; cxDesired, cyDesired : Integer; Flags : UINT) : HICON');
  CL.AddTypeS('PCursorShape', '^TCursorShape // will not work');
  CL.AddTypeS('tagCURSORSHAPE', 'record xHotSpot : Integer; yHotSpot : Integer;'
   +' cx : Integer; cy : Integer; cbWidth : Integer; Planes : Byte; BitsPixel :'
   +' Byte; end');
  CL.AddTypeS('TCursorShape', 'tagCURSORSHAPE');
  CL.AddTypeS('CURSORSHAPE', 'tagCURSORSHAPE');
 CL.AddConstantN('IMAGE_BITMAP','LongInt').SetInt( 0);
 CL.AddConstantN('IMAGE_ICON','LongInt').SetInt( 1);
 CL.AddConstantN('IMAGE_CURSOR','LongInt').SetInt( 2);
 CL.AddConstantN('IMAGE_ENHMETAFILE','LongInt').SetInt( 3);
 CL.AddConstantN('LR_DEFAULTCOLOR','LongWord').SetUInt( $0000);
 CL.AddConstantN('LR_MONOCHROME','LongWord').SetUInt( $0001);
 CL.AddConstantN('LR_COLOR','LongWord').SetUInt( $0002);
 CL.AddConstantN('LR_COPYRETURNORG','LongWord').SetUInt( $0004);
 CL.AddConstantN('LR_COPYDELETEORG','LongWord').SetUInt( $0008);
 CL.AddConstantN('LR_LOADFROMFILE','LongWord').SetUInt( $0010);
 CL.AddConstantN('LR_LOADTRANSPARENT','LongWord').SetUInt( $0020);
 CL.AddConstantN('LR_DEFAULTSIZE','LongWord').SetUInt( $0040);
 CL.AddConstantN('LR_VGACOLOR','LongWord').SetUInt( $0080);
 CL.AddConstantN('LR_LOADMAP3DCOLORS','LongWord').SetUInt( $1000);
 CL.AddConstantN('LR_CREATEDIBSECTION','LongWord').SetUInt( $2000);
 CL.AddConstantN('LR_COPYFROMRESOURCE','LongWord').SetUInt( $4000);
 CL.AddConstantN('LR_SHARED','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Function LoadImage( hInst : HINST; ImageName : PChar; ImageType : UINT; X, Y : Integer; Flags : UINT) : THandle');
 CL.AddDelphiFunction('Function LoadImageA( hInst : HINST; ImageName : PAnsiChar; ImageType : UINT; X, Y : Integer; Flags : UINT) : THandle');
 CL.AddDelphiFunction('Function LoadImageW( hInst : HINST; ImageName : PWideChar; ImageType : UINT; X, Y : Integer; Flags : UINT) : THandle');
 CL.AddDelphiFunction('Function CopyImage( hImage : THandle; ImageType : UINT; X, Y : Integer; Flags : UINT) : THandle');
 CL.AddConstantN('DI_MASK','LongInt').SetInt( 1);
 CL.AddConstantN('DI_IMAGE','LongInt').SetInt( 2);
 CL.AddConstantN('DI_NORMAL','LongInt').SetInt( 3);
 CL.AddConstantN('DI_COMPAT','LongInt').SetInt( 4);
 CL.AddConstantN('DI_DEFAULTSIZE','LongInt').SetInt( 8);
 CL.AddDelphiFunction('Function DrawIconEx( hdc : HDC; xLeft, yTop : Integer; hIcon : HICON; cxWidth, cyWidth : Integer; istepIfAniCur : UINT; hbrFlickerFreeDraw : HBRUSH; diFlags : UINT) : BOOL');
 CL.AddDelphiFunction('Function CreateIconIndirect( var piconinfo : TIconInfo) : HICON');
 CL.AddDelphiFunction('Function CopyIcon( hIcon : HICON) : HICON');
 CL.AddDelphiFunction('Function GetIconInfo( hIcon : HICON; var piconinfo : TIconInfo) : BOOL');
 CL.AddConstantN('OBM_CLOSE','LongInt').SetInt( 32754);
 CL.AddConstantN('OBM_UPARROW','LongInt').SetInt( 32753);
 CL.AddConstantN('OBM_DNARROW','LongInt').SetInt( 32752);
 CL.AddConstantN('OBM_RGARROW','LongInt').SetInt( 32751);
 CL.AddConstantN('OBM_LFARROW','LongInt').SetInt( 32750);
 CL.AddConstantN('OBM_REDUCE','LongInt').SetInt( 32749);
 CL.AddConstantN('OBM_ZOOM','LongInt').SetInt( 32748);
 CL.AddConstantN('OBM_RESTORE','LongInt').SetInt( 32747);
 CL.AddConstantN('OBM_REDUCED','LongInt').SetInt( 32746);
 CL.AddConstantN('OBM_ZOOMD','LongInt').SetInt( 32745);
 CL.AddConstantN('OBM_RESTORED','LongInt').SetInt( 32744);
 CL.AddConstantN('OBM_UPARROWD','LongInt').SetInt( 32743);
 CL.AddConstantN('OBM_DNARROWD','LongInt').SetInt( 32742);
 CL.AddConstantN('OBM_RGARROWD','LongInt').SetInt( 32741);
 CL.AddConstantN('OBM_LFARROWD','LongInt').SetInt( 32740);
 CL.AddConstantN('OBM_MNARROW','LongInt').SetInt( 32739);
 CL.AddConstantN('OBM_COMBO','LongInt').SetInt( 32738);
 CL.AddConstantN('OBM_UPARROWI','LongInt').SetInt( 32737);
 CL.AddConstantN('OBM_DNARROWI','LongInt').SetInt( 32736);
 CL.AddConstantN('OBM_RGARROWI','LongInt').SetInt( 32735);
 CL.AddConstantN('OBM_LFARROWI','LongInt').SetInt( 32734);
 CL.AddConstantN('OBM_OLD_CLOSE','LongInt').SetInt( 32767);
 CL.AddConstantN('OBM_SIZE','LongInt').SetInt( 32766);
 CL.AddConstantN('OBM_OLD_UPARROW','LongInt').SetInt( 32765);
 CL.AddConstantN('OBM_OLD_DNARROW','LongInt').SetInt( 32764);
 CL.AddConstantN('OBM_OLD_RGARROW','LongInt').SetInt( 32763);
 CL.AddConstantN('OBM_OLD_LFARROW','LongInt').SetInt( 32762);
 CL.AddConstantN('OBM_BTSIZE','LongInt').SetInt( 32761);
 CL.AddConstantN('OBM_CHECK','LongInt').SetInt( 32760);
 CL.AddConstantN('OBM_CHECKBOXES','LongInt').SetInt( 32759);
 CL.AddConstantN('OBM_BTNCORNERS','LongInt').SetInt( 32758);
 CL.AddConstantN('OBM_OLD_REDUCE','LongInt').SetInt( 32757);
 CL.AddConstantN('OBM_OLD_ZOOM','LongInt').SetInt( 32756);
 CL.AddConstantN('OBM_OLD_RESTORE','LongInt').SetInt( 32755);
 CL.AddConstantN('OCR_NORMAL','LongInt').SetInt( 32512);
 CL.AddConstantN('OCR_IBEAM','LongInt').SetInt( 32513);
 CL.AddConstantN('OCR_WAIT','LongInt').SetInt( 32514);
 CL.AddConstantN('OCR_CROSS','LongInt').SetInt( 32515);
 CL.AddConstantN('OCR_UP','LongInt').SetInt( 32516);
 CL.AddConstantN('OCR_SIZE','LongInt').SetInt( 32640);
 CL.AddConstantN('OCR_ICON','LongInt').SetInt( 32641);
 CL.AddConstantN('OCR_SIZENWSE','LongInt').SetInt( 32642);
 CL.AddConstantN('OCR_SIZENESW','LongInt').SetInt( 32643);
 CL.AddConstantN('OCR_SIZEWE','LongInt').SetInt( 32644);
 CL.AddConstantN('OCR_SIZENS','LongInt').SetInt( 32645);
 CL.AddConstantN('OCR_SIZEALL','LongInt').SetInt( 32646);
 CL.AddConstantN('OCR_ICOCUR','LongInt').SetInt( 32647);
 CL.AddConstantN('OCR_NO','LongInt').SetInt( 32648);
 CL.AddConstantN('OCR_HAND','LongInt').SetInt( 32649);
 CL.AddConstantN('OCR_APPSTARTING','LongInt').SetInt( 32650);
 CL.AddConstantN('OIC_SAMPLE','LongInt').SetInt( 32512);
 CL.AddConstantN('OIC_HAND','LongInt').SetInt( 32513);
 CL.AddConstantN('OIC_QUES','LongInt').SetInt( 32514);
 CL.AddConstantN('OIC_BANG','LongInt').SetInt( 32515);
 CL.AddConstantN('OIC_NOTE','LongInt').SetInt( 32516);
 CL.AddConstantN('OIC_WINLOGO','LongInt').SetInt( 32517);
 CL.AddConstantN('OIC_WARNING','').SetString( OIC_BANG);
 CL.AddConstantN('OIC_ERROR','').SetString( OIC_HAND);
 CL.AddConstantN('OIC_INFORMATION','').SetString( OIC_NOTE);
 CL.AddConstantN('RES_ICON','LongInt').SetInt( 1);
 CL.AddConstantN('RES_CURSOR','LongInt').SetInt( 2);
 CL.AddConstantN('ORD_LANGDRIVER','LongInt').SetInt( 1);
 CL.AddConstantN('IDI_APPLICATION','LongInt').SetInt( MakeIntResource ( 32512 ));
 CL.AddConstantN('IDI_HAND','LongInt').SetInt( MakeIntResource ( 32513 ));
 CL.AddConstantN('IDI_QUESTION','LongInt').SetInt( MakeIntResource ( 32514 ));
 CL.AddConstantN('IDI_EXCLAMATION','LongInt').SetInt( MakeIntResource ( 32515 ));
 CL.AddConstantN('IDI_ASTERISK','LongInt').SetInt( MakeIntResource ( 32516 ));
 CL.AddConstantN('IDI_WINLOGO','LongInt').SetInt( MakeIntResource ( 32517 ));
 CL.AddConstantN('IDI_WARNING','').SetString( IDI_EXCLAMATION);
 CL.AddConstantN('IDI_ERROR','').SetString( IDI_HAND);
 CL.AddConstantN('IDI_INFORMATION','').SetString( IDI_ASTERISK);
 CL.AddDelphiFunction('Function LoadString( hInstance : HINST; uID : UINT; lpBuffer : PChar; nBufferMax : Integer) : Integer');
 CL.AddDelphiFunction('Function LoadStringA( hInstance : HINST; uID : UINT; lpBuffer : PAnsiChar; nBufferMax : Integer) : Integer');
 CL.AddDelphiFunction('Function LoadStringW( hInstance : HINST; uID : UINT; lpBuffer : PWideChar; nBufferMax : Integer) : Integer');
 CL.AddConstantN('IDOK','LongInt').SetInt( 1);
 CL.AddConstantN('ID_OK','').SetString( IDOK);
 CL.AddConstantN('IDCANCEL','LongInt').SetInt( 2);
 CL.AddConstantN('ID_CANCEL','').SetString( IDCANCEL);
 CL.AddConstantN('IDABORT','LongInt').SetInt( 3);
 CL.AddConstantN('ID_ABORT','').SetString( IDABORT);
 CL.AddConstantN('IDRETRY','LongInt').SetInt( 4);
 CL.AddConstantN('ID_RETRY','').SetString( IDRETRY);
 CL.AddConstantN('IDIGNORE','LongInt').SetInt( 5);
 CL.AddConstantN('ID_IGNORE','').SetString( IDIGNORE);
 CL.AddConstantN('IDYES','LongInt').SetInt( 6);
 CL.AddConstantN('ID_YES','').SetString( IDYES);
 CL.AddConstantN('IDNO','LongInt').SetInt( 7);
 CL.AddConstantN('ID_NO','').SetString( IDNO);
 CL.AddConstantN('IDCLOSE','LongInt').SetInt( 8);
 CL.AddConstantN('ID_CLOSE','').SetString( IDCLOSE);
 CL.AddConstantN('IDHELP','LongInt').SetInt( 9);
 CL.AddConstantN('ID_HELP','').SetString( IDHELP);
 CL.AddConstantN('IDTRYAGAIN','LongInt').SetInt( 10);
 CL.AddConstantN('IDCONTINUE','LongInt').SetInt( 11);
 CL.AddConstantN('ES_LEFT','LongInt').SetInt( 0);
 CL.AddConstantN('ES_CENTER','LongInt').SetInt( 1);
 CL.AddConstantN('ES_RIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('ES_MULTILINE','LongInt').SetInt( 4);
 CL.AddConstantN('ES_UPPERCASE','LongInt').SetInt( 8);
 CL.AddConstantN('ES_LOWERCASE','LongWord').SetUInt( $10);
 CL.AddConstantN('ES_PASSWORD','LongWord').SetUInt( $20);
 CL.AddConstantN('ES_AUTOVSCROLL','LongWord').SetUInt( $40);
 CL.AddConstantN('ES_AUTOHSCROLL','LongWord').SetUInt( $80);
 CL.AddConstantN('ES_NOHIDESEL','LongWord').SetUInt( $100);
 CL.AddConstantN('ES_OEMCONVERT','LongWord').SetUInt( $400);
 CL.AddConstantN('ES_READONLY','LongWord').SetUInt( $800);
 CL.AddConstantN('ES_WANTRETURN','LongWord').SetUInt( $1000);
 CL.AddConstantN('ES_NUMBER','LongWord').SetUInt( $2000);
 CL.AddConstantN('EC_LEFTMARGIN','LongInt').SetInt( 1);
 CL.AddConstantN('EC_RIGHTMARGIN','LongInt').SetInt( 2);
 CL.AddConstantN('EC_USEFONTINFO','LongInt').SetInt( 65535);
 CL.AddConstantN('EMSIS_COMPOSITIONSTRING','LongInt').SetInt( 1);
 CL.AddConstantN('EIMES_GETCOMPSTRATONCE','LongInt').SetInt( 1);
 CL.AddConstantN('EIMES_CANCELCOMPSTRINGFOCUS','LongInt').SetInt( 2);
 CL.AddConstantN('EIMES_COMPLETECOMPSTRKILLFOCUS','LongInt').SetInt( 4);
 CL.AddConstantN('WB_LEFT','LongInt').SetInt( 0);
 CL.AddConstantN('WB_RIGHT','LongInt').SetInt( 1);
 CL.AddConstantN('WB_ISDELIMITER','LongInt').SetInt( 2);
 CL.AddConstantN('BS_PUSHBUTTON','LongInt').SetInt( 0);
 CL.AddConstantN('BS_DEFPUSHBUTTON','LongInt').SetInt( 1);
 CL.AddConstantN('BS_CHECKBOX','LongInt').SetInt( 2);
 CL.AddConstantN('BS_AUTOCHECKBOX','LongInt').SetInt( 3);
 CL.AddConstantN('BS_RADIOBUTTON','LongInt').SetInt( 4);
 CL.AddConstantN('BS_3STATE','LongInt').SetInt( 5);
 CL.AddConstantN('BS_AUTO3STATE','LongInt').SetInt( 6);
 CL.AddConstantN('BS_GROUPBOX','LongInt').SetInt( 7);
 CL.AddConstantN('BS_USERBUTTON','LongInt').SetInt( 8);
 CL.AddConstantN('BS_AUTORADIOBUTTON','LongInt').SetInt( 9);
 CL.AddConstantN('BS_OWNERDRAW','LongInt').SetInt( 11);
 CL.AddConstantN('BS_LEFTTEXT','LongWord').SetUInt( $20);
 CL.AddConstantN('BS_TEXT','LongInt').SetInt( 0);
 CL.AddConstantN('BS_ICON','LongWord').SetUInt( $40);
 CL.AddConstantN('BS_BITMAP','LongWord').SetUInt( $80);
 CL.AddConstantN('BS_LEFT','LongWord').SetUInt( $100);
 CL.AddConstantN('BS_RIGHT','LongWord').SetUInt( $200);
 CL.AddConstantN('BS_CENTER','LongInt').SetInt( 768);
 CL.AddConstantN('BS_TOP','LongWord').SetUInt( $400);
 CL.AddConstantN('BS_BOTTOM','LongWord').SetUInt( $800);
 CL.AddConstantN('BS_VCENTER','LongInt').SetInt( 3072);
 CL.AddConstantN('BS_PUSHLIKE','LongWord').SetUInt( $1000);
 CL.AddConstantN('BS_MULTILINE','LongWord').SetUInt( $2000);
 CL.AddConstantN('BS_NOTIFY','LongWord').SetUInt( $4000);
 CL.AddConstantN('BS_FLAT','LongWord').SetUInt( $8000);
 CL.AddConstantN('BS_RIGHTBUTTON','').SetString( BS_LEFTTEXT);
 CL.AddConstantN('BST_UNCHECKED','LongInt').SetInt( 0);
 CL.AddConstantN('BST_CHECKED','LongInt').SetInt( 1);
 CL.AddConstantN('BST_INDETERMINATE','LongInt').SetInt( 2);
 CL.AddConstantN('BST_PUSHED','LongInt').SetInt( 4);
 CL.AddConstantN('BST_FOCUS','LongInt').SetInt( 8);
 CL.AddConstantN('SS_LEFT','LongInt').SetInt( 0);
 CL.AddConstantN('SS_CENTER','LongInt').SetInt( 1);
 CL.AddConstantN('SS_RIGHT','LongInt').SetInt( 2);
 CL.AddConstantN('SS_ICON','LongInt').SetInt( 3);
 CL.AddConstantN('SS_BLACKRECT','LongInt').SetInt( 4);
 CL.AddConstantN('SS_GRAYRECT','LongInt').SetInt( 5);
 CL.AddConstantN('SS_WHITERECT','LongInt').SetInt( 6);
 CL.AddConstantN('SS_BLACKFRAME','LongInt').SetInt( 7);
 CL.AddConstantN('SS_GRAYFRAME','LongInt').SetInt( 8);
 CL.AddConstantN('SS_WHITEFRAME','LongInt').SetInt( 9);
 CL.AddConstantN('SS_USERITEM','LongInt').SetInt( 10);
 CL.AddConstantN('SS_SIMPLE','LongInt').SetInt( 11);
 CL.AddConstantN('SS_LEFTNOWORDWRAP','LongInt').SetInt( 12);
 CL.AddConstantN('SS_BITMAP','LongInt').SetInt( 14);
 CL.AddConstantN('SS_OWNERDRAW','LongInt').SetInt( 13);
 CL.AddConstantN('SS_ENHMETAFILE','LongInt').SetInt( 15);
 CL.AddConstantN('SS_ETCHEDHORZ','LongWord').SetUInt( $10);
 CL.AddConstantN('SS_ETCHEDVERT','LongInt').SetInt( 17);
 CL.AddConstantN('SS_ETCHEDFRAME','LongInt').SetInt( 18);
 CL.AddConstantN('SS_TYPEMASK','LongInt').SetInt( 31);
 CL.AddConstantN('SS_NOPREFIX','LongWord').SetUInt( $80);
 CL.AddConstantN('SS_NOTIFY','LongWord').SetUInt( $100);
 CL.AddConstantN('SS_CENTERIMAGE','LongWord').SetUInt( $200);
 CL.AddConstantN('SS_RIGHTJUST','LongWord').SetUInt( $400);
 CL.AddConstantN('SS_REALSIZEIMAGE','LongWord').SetUInt( $800);
 CL.AddConstantN('SS_SUNKEN','LongWord').SetUInt( $1000);
 CL.AddConstantN('SS_ENDELLIPSIS','LongWord').SetUInt( $4000);
 CL.AddConstantN('SS_PATHELLIPSIS','LongWord').SetUInt( $8000);
 CL.AddConstantN('SS_WORDELLIPSIS','LongWord').SetUInt( $C000);
 CL.AddConstantN('SS_ELLIPSISMASK','LongWord').SetUInt( $C000);
 CL.AddConstantN('STM_SETICON','LongInt').SetInt( 368);
 CL.AddConstantN('STM_GETICON','LongInt').SetInt( 369);
 CL.AddConstantN('STM_SETIMAGE','LongInt').SetInt( 370);
 CL.AddConstantN('STM_GETIMAGE','LongInt').SetInt( 371);
 CL.AddConstantN('STN_CLICKED','LongInt').SetInt( 0);
 CL.AddConstantN('STN_DBLCLK','LongInt').SetInt( 1);
 CL.AddConstantN('STN_ENABLE','LongInt').SetInt( 2);
 CL.AddConstantN('STN_DISABLE','LongInt').SetInt( 3);
 CL.AddConstantN('STM_MSGMAX','LongInt').SetInt( 372);
 CL.AddConstantN('WC_DIALOG','LongWord').SetUInt( MakeIntAtom ( $8002 ));
 CL.AddConstantN('DWL_MSGRESULT','LongInt').SetInt( 0);
 CL.AddConstantN('DWL_DLGPROC','LongInt').SetInt( 4);
 CL.AddConstantN('DWL_USER','LongInt').SetInt( 8);
 CL.AddDelphiFunction('Function IsDialogMessage( hDlg : HWND; var lpMsg : TMsg) : BOOL');
 CL.AddDelphiFunction('Function IsDialogMessageA( hDlg : HWND; var lpMsg : TMsg) : BOOL');
 CL.AddDelphiFunction('Function IsDialogMessageW( hDlg : HWND; var lpMsg : TMsg) : BOOL');
 CL.AddDelphiFunction('Function MapDialogRect( hDlg : HWND; var lpRect : TRect) : BOOL');
 CL.AddDelphiFunction('Function DlgDirList( hDlg : HWND; lpPathSpec : PChar; nIDListBox, nIDStaticPath : Integer; uFileType : UINT) : Integer');
 CL.AddDelphiFunction('Function DlgDirListA( hDlg : HWND; lpPathSpec : PAnsiChar; nIDListBox, nIDStaticPath : Integer; uFileType : UINT) : Integer');
 CL.AddDelphiFunction('Function DlgDirListW( hDlg : HWND; lpPathSpec : PWideChar; nIDListBox, nIDStaticPath : Integer; uFileType : UINT) : Integer');
 CL.AddConstantN('DDL_READWRITE','LongInt').SetInt( 0);
 CL.AddConstantN('DDL_READONLY','LongInt').SetInt( 1);
 CL.AddConstantN('DDL_HIDDEN','LongInt').SetInt( 2);
 CL.AddConstantN('DDL_SYSTEM','LongInt').SetInt( 4);
 CL.AddConstantN('DDL_DIRECTORY','LongWord').SetUInt( $10);
 CL.AddConstantN('DDL_ARCHIVE','LongWord').SetUInt( $20);
 CL.AddConstantN('DDL_POSTMSGS','LongWord').SetUInt( $2000);
 CL.AddConstantN('DDL_DRIVES','LongWord').SetUInt( $4000);
 CL.AddConstantN('DDL_EXCLUSIVE','LongWord').SetUInt( $8000);
 CL.AddDelphiFunction('Function DlgDirSelectEx( hDlg : HWND; lpString : PChar; nCount, nIDListBox : Integer) : BOOL');
 CL.AddDelphiFunction('Function DlgDirSelectExA( hDlg : HWND; lpString : PAnsiChar; nCount, nIDListBox : Integer) : BOOL');
 CL.AddDelphiFunction('Function DlgDirSelectExW( hDlg : HWND; lpString : PWideChar; nCount, nIDListBox : Integer) : BOOL');
 CL.AddDelphiFunction('Function DlgDirListComboBox( hDlg : HWND; lpPathSpec : PChar; nIDComboBox, nIDStaticPath : Integer; uFiletype : UINT) : Integer');
 CL.AddDelphiFunction('Function DlgDirListComboBoxA( hDlg : HWND; lpPathSpec : PAnsiChar; nIDComboBox, nIDStaticPath : Integer; uFiletype : UINT) : Integer');
 CL.AddDelphiFunction('Function DlgDirListComboBoxW( hDlg : HWND; lpPathSpec : PWideChar; nIDComboBox, nIDStaticPath : Integer; uFiletype : UINT) : Integer');
 CL.AddDelphiFunction('Function DlgDirSelectComboBoxEx( hDlg : HWND; lpString : PChar; nCount, nIDComboBox : Integer) : BOOL');
 CL.AddDelphiFunction('Function DlgDirSelectComboBoxExA( hDlg : HWND; lpString : PAnsiChar; nCount, nIDComboBox : Integer) : BOOL');
 CL.AddDelphiFunction('Function DlgDirSelectComboBoxExW( hDlg : HWND; lpString : PWideChar; nCount, nIDComboBox : Integer) : BOOL');
 CL.AddConstantN('DS_ABSALIGN','LongInt').SetInt( 1);
 CL.AddConstantN('DS_SYSMODAL','LongInt').SetInt( 2);
 CL.AddConstantN('DS_LOCALEDIT','LongWord').SetUInt( $20);
 CL.AddConstantN('DS_SETFONT','LongWord').SetUInt( $40);
 CL.AddConstantN('DS_MODALFRAME','LongWord').SetUInt( $80);
 CL.AddConstantN('DS_NOIDLEMSG','LongWord').SetUInt( $100);
 CL.AddConstantN('DS_SETFOREGROUND','LongWord').SetUInt( $200);
 CL.AddConstantN('DS_3DLOOK','LongInt').SetInt( 4);
 CL.AddConstantN('DS_FIXEDSYS','LongInt').SetInt( 8);
 CL.AddConstantN('DS_NOFAILCREATE','LongWord').SetUInt( $10);
 CL.AddConstantN('DS_CONTROL','LongWord').SetUInt( $400);
 CL.AddConstantN('DS_CENTER','LongWord').SetUInt( $800);
 CL.AddConstantN('DS_CENTERMOUSE','LongWord').SetUInt( $1000);
 CL.AddConstantN('DS_CONTEXTHELP','LongWord').SetUInt( $2000);
 CL.AddConstantN('PSI_SETACTIVE','LongInt').SetInt( 1);
 CL.AddConstantN('PSI_KILLACTIVE','LongInt').SetInt( 2);
 CL.AddConstantN('PSI_APPLY','LongInt').SetInt( 3);
 CL.AddConstantN('PSI_RESET','LongInt').SetInt( 4);
 CL.AddConstantN('PSI_HASHELP','LongInt').SetInt( 5);
 CL.AddConstantN('PSI_HELP','LongInt').SetInt( 6);
 CL.AddConstantN('PSI_CHANGED','LongInt').SetInt( 1);
 CL.AddConstantN('PSI_GUISTART','LongInt').SetInt( 2);
 CL.AddConstantN('PSI_REBOOT','LongInt').SetInt( 3);
 CL.AddConstantN('PSI_GETSIBLINGS','LongInt').SetInt( 4);
 CL.AddConstantN('DC_HASDEFID','LongInt').SetInt( 21323);
 CL.AddConstantN('DLGC_WANTARROWS','LongInt').SetInt( 1);
 CL.AddConstantN('DLGC_WANTTAB','LongInt').SetInt( 2);
 CL.AddConstantN('DLGC_WANTALLKEYS','LongInt').SetInt( 4);
 CL.AddConstantN('DLGC_WANTMESSAGE','LongInt').SetInt( 4);
 CL.AddConstantN('DLGC_HASSETSEL','LongInt').SetInt( 8);
 CL.AddConstantN('DLGC_DEFPUSHBUTTON','LongWord').SetUInt( $10);
 CL.AddConstantN('DLGC_UNDEFPUSHBUTTON','LongWord').SetUInt( $20);
 CL.AddConstantN('DLGC_RADIOBUTTON','LongWord').SetUInt( $40);
 CL.AddConstantN('DLGC_WANTCHARS','LongWord').SetUInt( $80);
 CL.AddConstantN('DLGC_STATIC','LongWord').SetUInt( $100);
 CL.AddConstantN('DLGC_BUTTON','LongWord').SetUInt( $2000);
 CL.AddConstantN('LB_CTLCODE','LongInt').SetInt( 0);
 CL.AddConstantN('LB_OKAY','LongInt').SetInt( 0);
 CL.AddConstantN('LB_ERR','LongInt').SetInt( - 1);
 CL.AddConstantN('LB_ERRSPACE','LongInt').SetInt( - 2);
 CL.AddConstantN('LBS_NOTIFY','LongInt').SetInt( 1);
 CL.AddConstantN('LBS_SORT','LongInt').SetInt( 2);
 CL.AddConstantN('LBS_NOREDRAW','LongInt').SetInt( 4);
 CL.AddConstantN('LBS_MULTIPLESEL','LongInt').SetInt( 8);
 CL.AddConstantN('LBS_OWNERDRAWFIXED','LongWord').SetUInt( $10);
 CL.AddConstantN('LBS_OWNERDRAWVARIABLE','LongWord').SetUInt( $20);
 CL.AddConstantN('LBS_HASSTRINGS','LongWord').SetUInt( $40);
 CL.AddConstantN('LBS_USETABSTOPS','LongWord').SetUInt( $80);
 CL.AddConstantN('LBS_NOINTEGRALHEIGHT','LongWord').SetUInt( $100);
 CL.AddConstantN('LBS_MULTICOLUMN','LongWord').SetUInt( $200);
 CL.AddConstantN('LBS_WANTKEYBOARDINPUT','LongWord').SetUInt( $400);
 CL.AddConstantN('LBS_EXTENDEDSEL','LongWord').SetUInt( $800);
 CL.AddConstantN('LBS_DISABLENOSCROLL','LongWord').SetUInt( $1000);
 CL.AddConstantN('LBS_NODATA','LongWord').SetUInt( $2000);
 CL.AddConstantN('LBS_NOSEL','LongWord').SetUInt( $4000);
 CL.AddConstantN('CB_OKAY','LongInt').SetInt( 0);
 CL.AddConstantN('CB_ERR','LongInt').SetInt( - 1);
 CL.AddConstantN('CB_ERRSPACE','LongInt').SetInt( - 2);
 CL.AddConstantN('CBS_SIMPLE','LongInt').SetInt( 1);
 CL.AddConstantN('CBS_DROPDOWN','LongInt').SetInt( 2);
 CL.AddConstantN('CBS_DROPDOWNLIST','LongInt').SetInt( 3);
 CL.AddConstantN('CBS_OWNERDRAWFIXED','LongWord').SetUInt( $10);
 CL.AddConstantN('CBS_OWNERDRAWVARIABLE','LongWord').SetUInt( $20);
 CL.AddConstantN('CBS_AUTOHSCROLL','LongWord').SetUInt( $40);
 CL.AddConstantN('CBS_OEMCONVERT','LongWord').SetUInt( $80);
 CL.AddConstantN('CBS_SORT','LongWord').SetUInt( $100);
 CL.AddConstantN('CBS_HASSTRINGS','LongWord').SetUInt( $200);
 CL.AddConstantN('CBS_NOINTEGRALHEIGHT','LongWord').SetUInt( $400);
 CL.AddConstantN('CBS_DISABLENOSCROLL','LongWord').SetUInt( $800);
 CL.AddConstantN('CBS_UPPERCASE','LongWord').SetUInt( $2000);
 CL.AddConstantN('CBS_LOWERCASE','LongWord').SetUInt( $4000);
 CL.AddConstantN('SBS_HORZ','LongInt').SetInt( 0);
 CL.AddConstantN('SBS_VERT','LongInt').SetInt( 1);
 CL.AddConstantN('SBS_TOPALIGN','LongInt').SetInt( 2);
 CL.AddConstantN('SBS_LEFTALIGN','LongInt').SetInt( 2);
 CL.AddConstantN('SBS_BOTTOMALIGN','LongInt').SetInt( 4);
 CL.AddConstantN('SBS_RIGHTALIGN','LongInt').SetInt( 4);
 CL.AddConstantN('SBS_SIZEBOXTOPLEFTALIGN','LongInt').SetInt( 2);
 CL.AddConstantN('SBS_SIZEBOXBOTTOMRIGHTALIGN','LongInt').SetInt( 4);
 CL.AddConstantN('SBS_SIZEBOX','LongInt').SetInt( 8);
 CL.AddConstantN('SBS_SIZEGRIP','LongWord').SetUInt( $10);
 CL.AddConstantN('SIF_RANGE','LongInt').SetInt( 1);
 CL.AddConstantN('SIF_PAGE','LongInt').SetInt( 2);
 CL.AddConstantN('SIF_POS','LongInt').SetInt( 4);
 CL.AddConstantN('SIF_DISABLENOSCROLL','LongInt').SetInt( 8);
 CL.AddConstantN('SIF_TRACKPOS','LongWord').SetUInt( $10);
  CL.AddTypeS('tagSCROLLINFO', 'record cbSize : UINT; fMask : UINT; nMin : Inte'
   +'ger; nMax : Integer; nPage : UINT; nPos : Integer; nTrackPos : Integer; en'
   +'d');
  CL.AddTypeS('PScrollInfo', '^TScrollInfo // will not work');
  CL.AddTypeS('TScrollInfo', 'tagSCROLLINFO');
  CL.AddTypeS('SCROLLINFO', 'tagSCROLLINFO');
 CL.AddDelphiFunction('Function SetScrollInfo( hWnd : HWND; BarFlag : Integer; const ScrollInfo : TScrollInfo; Redraw : BOOL) : Integer');
 CL.AddDelphiFunction('Function GetScrollInfo( hWnd : HWND; BarFlag : Integer; var ScrollInfo : TScrollInfo) : BOOL');
 CL.AddConstantN('MDIS_ALLCHILDSTYLES','LongInt').SetInt( 1);
 CL.AddConstantN('MDITILE_VERTICAL','LongInt').SetInt( 0);
 CL.AddConstantN('MDITILE_HORIZONTAL','LongInt').SetInt( 1);
 CL.AddConstantN('MDITILE_SKIPDISABLED','LongInt').SetInt( 2);
  CL.AddTypeS('PMDICreateStructA', '^TMDICreateStructA // will not work');
  CL.AddTypeS('PMDICreateStructW', '^TMDICreateStructW // will not work');
  CL.AddTypeS('PMDICreateStruct', 'PMDICreateStructA');
  CL.AddTypeS('tagMDICREATESTRUCTA', 'record szClass : PAnsiChar; szTitle : PAn'
   +'siChar; hOwner : THandle; x : Integer; y : Integer; cx : Integer; cy : Int'
   +'eger; style : DWORD; lParam : LPARAM; end');
  CL.AddTypeS('tagMDICREATESTRUCTW', 'record szClass : PWideChar; szTitle : PWi'
   +'deChar; hOwner : THandle; x : Integer; y : Integer; cx : Integer; cy : Int'
   +'eger; style : DWORD; lParam : LPARAM; end');
  CL.AddTypeS('tagMDICREATESTRUCT', 'tagMDICREATESTRUCTA');
  CL.AddTypeS('TMDICreateStructA', 'tagMDICREATESTRUCTA');
  CL.AddTypeS('TMDICreateStructW', 'tagMDICREATESTRUCTW');
  CL.AddTypeS('TMDICreateStruct', 'TMDICreateStructA');
  CL.AddTypeS('MDICREATESTRUCTA', 'tagMDICREATESTRUCTA');
  CL.AddTypeS('MDICREATESTRUCTW', 'tagMDICREATESTRUCTW');
  CL.AddTypeS('MDICREATESTRUCT', 'MDICREATESTRUCTA');
  CL.AddTypeS('PClientCreateStruct', '^TClientCreateStruct // will not work');
  CL.AddTypeS('tagCLIENTCREATESTRUCT', 'record hWindowMenu : THandle; idFirstCh'
   +'ild : UINT; end');
  CL.AddTypeS('TClientCreateStruct', 'tagCLIENTCREATESTRUCT');
  CL.AddTypeS('CLIENTCREATESTRUCT', 'tagCLIENTCREATESTRUCT');
 CL.AddDelphiFunction('Function DefFrameProc( hWnd, hWndMDIClient : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefFrameProcA( hWnd, hWndMDIClient : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefFrameProcW( hWnd, hWndMDIClient : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefMDIChildProc( hWnd : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefMDIChildProcA( hWnd : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function DefMDIChildProcW( hWnd : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT');
 CL.AddDelphiFunction('Function TranslateMDISysAccel( hWndClient : HWND; const lpMsg : TMsg) : BOOL');
 CL.AddDelphiFunction('Function ArrangeIconicWindows( hWnd : HWND) : UINT');
 CL.AddDelphiFunction('Function CreateMDIWindow( lpClassName, lpWindowName : PChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hInstance : HINST; lParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateMDIWindowA( lpClassName, lpWindowName : PAnsiChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hInstance : HINST; lParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function CreateMDIWindowW( lpClassName, lpWindowName : PWideChar; dwStyle : DWORD; X, Y, nWidth, nHeight : Integer; hWndParent : HWND; hInstance : HINST; lParam : LPARAM) : HWND');
 CL.AddDelphiFunction('Function TileWindows( hwndParent : HWND; wHow : UINT; lpRect : PRect; cKids : UINT; lpKids : Pointer) : Word');
 CL.AddDelphiFunction('Function CascadeWindows( hwndParent : HWND; wHow : UINT; lpRect : PRect; cKids : UINT; lpKids : Pointer) : Word');
 CL.AddConstantN('IMC_GETCANDIDATEPOS','LongInt').SetInt( 7);
 CL.AddConstantN('IMC_SETCANDIDATEPOS','LongInt').SetInt( 8);
 CL.AddConstantN('IMC_GETCOMPOSITIONFONT','LongInt').SetInt( 9);
 CL.AddConstantN('IMC_SETCOMPOSITIONFONT','LongWord').SetUInt( $0A);
 CL.AddConstantN('IMC_GETCOMPOSITIONWINDOW','LongWord').SetUInt( $0B);
 CL.AddConstantN('IMC_SETCOMPOSITIONWINDOW','LongWord').SetUInt( $0C);
 CL.AddConstantN('IMC_GETSTATUSWINDOWPOS','LongWord').SetUInt( $0F);
 CL.AddConstantN('IMC_SETSTATUSWINDOWPOS','LongWord').SetUInt( $10);
 CL.AddConstantN('IMC_CLOSESTATUSWINDOW','LongWord').SetUInt( $21);
 CL.AddConstantN('IMC_OPENSTATUSWINDOW','LongWord').SetUInt( $22);
 CL.AddConstantN('IMN_CLOSESTATUSWINDOW','LongInt').SetInt( 1);
 CL.AddConstantN('IMN_OPENSTATUSWINDOW','LongInt').SetInt( 2);
 CL.AddConstantN('IMN_CHANGECANDIDATE','LongInt').SetInt( 3);
 CL.AddConstantN('IMN_CLOSECANDIDATE','LongInt').SetInt( 4);
 CL.AddConstantN('IMN_OPENCANDIDATE','LongInt').SetInt( 5);
 CL.AddConstantN('IMN_SETCONVERSIONMODE','LongInt').SetInt( 6);
 CL.AddConstantN('IMN_SETSENTENCEMODE','LongInt').SetInt( 7);
 CL.AddConstantN('IMN_SETOPENSTATUS','LongInt').SetInt( 8);
 CL.AddConstantN('IMN_SETCANDIDATEPOS','LongInt').SetInt( 9);
 CL.AddConstantN('IMN_SETCOMPOSITIONFONT','LongInt').SetInt( 10);
 CL.AddConstantN('IMN_SETCOMPOSITIONWINDOW','LongInt').SetInt( 11);
 CL.AddConstantN('IMN_SETSTATUSWINDOWPOS','LongInt').SetInt( 12);
 CL.AddConstantN('IMN_GUIDELINE','LongInt').SetInt( 13);
 CL.AddConstantN('IMN_PRIVATE','LongInt').SetInt( 14);
  CL.AddTypeS('HELPPOLY', 'DWORD');
  CL.AddTypeS('PMultiKeyHelpA', '^TMultiKeyHelpA // will not work');
  CL.AddTypeS('PMultiKeyHelpW', '^TMultiKeyHelpW // will not work');
  CL.AddTypeS('PMultiKeyHelp', 'PMultiKeyHelpA');
  CL.AddTypeS('tagMULTIKEYHELP', 'tagMULTIKEYHELPA');
  CL.AddTypeS('TMultiKeyHelpA', 'tagMULTIKEYHELPA');
  CL.AddTypeS('TMultiKeyHelpW', 'tagMULTIKEYHELPW');
  CL.AddTypeS('TMultiKeyHelp', 'TMultiKeyHelpA');
  CL.AddTypeS('MULTIKEYHELPA', 'tagMULTIKEYHELPA');
  CL.AddTypeS('MULTIKEYHELPW', 'tagMULTIKEYHELPW');
  CL.AddTypeS('MULTIKEYHELP', 'MULTIKEYHELPA');
  CL.AddTypeS('PHelpWinInfoA', '^THelpWinInfoA // will not work');
  CL.AddTypeS('PHelpWinInfoW', '^THelpWinInfoW // will not work');
  CL.AddTypeS('PHelpWinInfo', 'PHelpWinInfoA');
  CL.AddTypeS('tagHELPWININFO', 'tagHELPWININFOA');
  CL.AddTypeS('THelpWinInfoA', 'tagHELPWININFOA');
  CL.AddTypeS('THelpWinInfoW', 'tagHELPWININFOW');
  CL.AddTypeS('THelpWinInfo', 'THelpWinInfoA');
  CL.AddTypeS('HELPWININFOA', 'tagHELPWININFOA');
  CL.AddTypeS('HELPWININFOW', 'tagHELPWININFOW');
  CL.AddTypeS('HELPWININFO', 'HELPWININFOA');
 CL.AddConstantN('HELP_CONTEXT','LongInt').SetInt( 1);
 CL.AddConstantN('HELP_QUIT','LongInt').SetInt( 2);
 CL.AddConstantN('HELP_INDEX','LongInt').SetInt( 3);
 CL.AddConstantN('HELP_CONTENTS','LongInt').SetInt( 3);
 CL.AddConstantN('HELP_HELPONHELP','LongInt').SetInt( 4);
 CL.AddConstantN('HELP_SETINDEX','LongInt').SetInt( 5);
 CL.AddConstantN('HELP_SETCONTENTS','LongInt').SetInt( 5);
 CL.AddConstantN('HELP_CONTEXTPOPUP','LongInt').SetInt( 8);
 CL.AddConstantN('HELP_FORCEFILE','LongInt').SetInt( 9);
 CL.AddConstantN('HELP_KEY','LongInt').SetInt( 257);
 CL.AddConstantN('HELP_COMMAND','LongInt').SetInt( 258);
 CL.AddConstantN('HELP_PARTIALKEY','LongInt').SetInt( 261);
 CL.AddConstantN('HELP_MULTIKEY','LongInt').SetInt( 513);
 CL.AddConstantN('HELP_SETWINPOS','LongInt').SetInt( 515);
 CL.AddConstantN('HELP_CONTEXTMENU','LongInt').SetInt( 10);
 CL.AddConstantN('HELP_FINDER','LongInt').SetInt( 11);
 CL.AddConstantN('HELP_WM_HELP','LongInt').SetInt( 12);
 CL.AddConstantN('HELP_SETPOPUP_POS','LongInt').SetInt( 13);
 CL.AddConstantN('HELP_TCARD','LongWord').SetUInt( $8000);
 CL.AddConstantN('HELP_TCARD_DATA','LongWord').SetUInt( $10);
 CL.AddConstantN('HELP_TCARD_OTHER_CALLER','LongInt').SetInt( 17);
 CL.AddConstantN('IDH_NO_HELP','LongInt').SetInt( 28440);
 CL.AddConstantN('IDH_MISSING_CONTEXT','LongInt').SetInt( 28441);
 CL.AddConstantN('IDH_GENERIC_HELP_BUTTON','LongInt').SetInt( 28442);
 CL.AddConstantN('IDH_OK','LongInt').SetInt( 28443);
 CL.AddConstantN('IDH_CANCEL','LongInt').SetInt( 28444);
 CL.AddConstantN('IDH_HELP','LongInt').SetInt( 28445);
 CL.AddDelphiFunction('Function WinHelp( hWndMain : HWND; lpszHelp : PChar; uCommand : UINT; dwData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function WinHelpA( hWndMain : HWND; lpszHelp : PAnsiChar; uCommand : UINT; dwData : DWORD) : BOOL');
 CL.AddDelphiFunction('Function WinHelpW( hWndMain : HWND; lpszHelp : PWideChar; uCommand : UINT; dwData : DWORD) : BOOL');
 CL.AddConstantN('HH_DISPLAY_TOPIC','LongInt').SetInt( 0);
 CL.AddConstantN('HH_HELP_FINDER','LongInt').SetInt( 0);
 CL.AddConstantN('HH_DISPLAY_TOC','LongInt').SetInt( 1);
 CL.AddConstantN('HH_DISPLAY_INDEX','LongInt').SetInt( 2);
 CL.AddConstantN('HH_DISPLAY_SEARCH','LongInt').SetInt( 3);
 CL.AddConstantN('HH_SET_WIN_TYPE','LongInt').SetInt( 4);
 CL.AddConstantN('HH_GET_WIN_TYPE','LongInt').SetInt( 5);
 CL.AddConstantN('HH_GET_WIN_HANDLE','LongInt').SetInt( 6);
 CL.AddConstantN('HH_ENUM_INFO_TYPE','LongInt').SetInt( 7);
 CL.AddConstantN('HH_SET_INFO_TYPE','LongInt').SetInt( 8);
 CL.AddConstantN('HH_SYNC','LongInt').SetInt( 9);
 CL.AddConstantN('HH_KEYWORD_LOOKUP','LongWord').SetUInt( $d);
 CL.AddConstantN('HH_DISPLAY_TEXT_POPUP','LongWord').SetUInt( $e);
 CL.AddConstantN('HH_HELP_CONTEXT','LongWord').SetUInt( $f);
 CL.AddConstantN('HH_TP_HELP_CONTEXTMENU','LongWord').SetUInt( $10);
 CL.AddConstantN('HH_TP_HELP_WM_HELP','LongWord').SetUInt( $11);
 CL.AddConstantN('HH_CLOSE_ALL','LongWord').SetUInt( $12);
 CL.AddConstantN('HH_ALINK_LOOKUP','LongWord').SetUInt( $13);
 CL.AddConstantN('HH_GET_LAST_ERROR','LongWord').SetUInt( $14);
 CL.AddConstantN('HH_ENUM_CATEGORY','LongWord').SetUInt( $15);
 CL.AddConstantN('HH_ENUM_CATEGORY_IT','LongWord').SetUInt( $16);
 CL.AddConstantN('HH_RESET_IT_FILTER','LongWord').SetUInt( $17);
 CL.AddConstantN('HH_SET_INCLUSIVE_FILTER','LongWord').SetUInt( $18);
 CL.AddConstantN('HH_SET_EXCLUSIVE_FILTER','LongWord').SetUInt( $19);
 CL.AddConstantN('HH_INITIALIZE','LongWord').SetUInt( $1c);
 CL.AddConstantN('HH_UNINITIALIZE','LongWord').SetUInt( $1d);
 CL.AddConstantN('HH_SET_QUERYSERVICE','LongWord').SetUInt( $1e);
 CL.AddConstantN('HH_PRETRANSLATEMESSAGE','LongWord').SetUInt( $fd);
 CL.AddConstantN('HH_GLOBALPROPERTY','LongWord').SetUInt( $fc);
 CL.AddConstantN('HHWIN_PROP_TAB_AUTOHIDESHOW','LongInt').SetInt( 1 shl 0);
 CL.AddConstantN('HHWIN_PROP_ONTOP','LongInt').SetInt( 1 shl 1);
 CL.AddConstantN('HHWIN_PROP_NOTITLEBAR','LongInt').SetInt( 1 shl 2);
 CL.AddConstantN('HHWIN_PROP_NODEF_STYLES','LongInt').SetInt( 1 shl 3);
 CL.AddConstantN('HHWIN_PROP_NODEF_EXSTYLES','LongInt').SetInt( 1 shl 4);
 CL.AddConstantN('HHWIN_PROP_TRI_PANE','LongInt').SetInt( 1 shl 5);
 CL.AddConstantN('HHWIN_PROP_NOTB_TEXT','LongInt').SetInt( 1 shl 6);
 CL.AddConstantN('HHWIN_PROP_POST_QUIT','LongInt').SetInt( 1 shl 7);
 CL.AddConstantN('HHWIN_PROP_AUTO_SYNC','LongInt').SetInt( 1 shl 8);
 CL.AddConstantN('HHWIN_PROP_TRACKING','LongInt').SetInt( 1 shl 9);
 CL.AddConstantN('HHWIN_PROP_TAB_SEARCH','LongInt').SetInt( 1 shl 10);
 CL.AddConstantN('HHWIN_PROP_TAB_HISTORY','LongInt').SetInt( 1 shl 11);
 CL.AddConstantN('HHWIN_PROP_TAB_FAVORITES','LongInt').SetInt( 1 shl 12);
 CL.AddConstantN('HHWIN_PROP_CHANGE_TITLE','LongInt').SetInt( 1 shl 13);
 CL.AddConstantN('HHWIN_PROP_NAV_ONLY_WIN','LongInt').SetInt( 1 shl 14);
 CL.AddConstantN('HHWIN_PROP_NO_TOOLBAR','LongInt').SetInt( 1 shl 15);
 CL.AddConstantN('HHWIN_PROP_MENU','LongInt').SetInt( 1 shl 16);
 CL.AddConstantN('HHWIN_PROP_TAB_ADVSEARCH','LongInt').SetInt( 1 shl 17);
 CL.AddConstantN('HHWIN_PROP_USER_POS','LongInt').SetInt( 1 shl 18);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM1','LongInt').SetInt( 1 shl 19);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM2','LongInt').SetInt( 1 shl 20);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM3','LongInt').SetInt( 1 shl 21);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM4','LongInt').SetInt( 1 shl 22);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM5','LongInt').SetInt( 1 shl 23);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM6','LongInt').SetInt( 1 shl 24);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM7','LongInt').SetInt( 1 shl 25);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM8','LongInt').SetInt( 1 shl 26);
 CL.AddConstantN('HHWIN_PROP_TAB_CUSTOM9','LongInt').SetInt( 1 shl 27);
 CL.AddConstantN('HHWIN_PROP_TB_MARGIN','LongInt').SetInt( 1 shl 28);
 CL.AddConstantN('HHWIN_PARAM_PROPERTIES','LongInt').SetInt( 1 shl 1);
 CL.AddConstantN('HHWIN_PARAM_STYLES','LongInt').SetInt( 1 shl 2);
 CL.AddConstantN('HHWIN_PARAM_EXSTYLES','LongInt').SetInt( 1 shl 3);
 CL.AddConstantN('HHWIN_PARAM_RECT','LongInt').SetInt( 1 shl 4);
 CL.AddConstantN('HHWIN_PARAM_NAV_WIDTH','LongInt').SetInt( 1 shl 5);
 CL.AddConstantN('HHWIN_PARAM_SHOWSTATE','LongInt').SetInt( 1 shl 6);
 CL.AddConstantN('HHWIN_PARAM_INFOTYPES','LongInt').SetInt( 1 shl 7);
 CL.AddConstantN('HHWIN_PARAM_TB_FLAGS','LongInt').SetInt( 1 shl 8);
 CL.AddConstantN('HHWIN_PARAM_EXPANSION','LongInt').SetInt( 1 shl 9);
 CL.AddConstantN('HHWIN_PARAM_TABPOS','LongInt').SetInt( 1 shl 10);
 CL.AddConstantN('HHWIN_PARAM_TABORDER','LongInt').SetInt( 1 shl 11);
 CL.AddConstantN('HHWIN_PARAM_HISTORY_COUNT','LongInt').SetInt( 1 shl 12);
 CL.AddConstantN('HHWIN_PARAM_CUR_TAB','LongInt').SetInt( 1 shl 13);
 CL.AddConstantN('HHWIN_BUTTON_EXPAND','LongInt').SetInt( 1 shl 1);
 CL.AddConstantN('HHWIN_BUTTON_BACK','LongInt').SetInt( 1 shl 2);
 CL.AddConstantN('HHWIN_BUTTON_FORWARD','LongInt').SetInt( 1 shl 3);
 CL.AddConstantN('HHWIN_BUTTON_STOP','LongInt').SetInt( 1 shl 4);
 CL.AddConstantN('HHWIN_BUTTON_REFRESH','LongInt').SetInt( 1 shl 5);
 CL.AddConstantN('HHWIN_BUTTON_HOME','LongInt').SetInt( 1 shl 6);
 CL.AddConstantN('HHWIN_BUTTON_BROWSE_FWD','LongInt').SetInt( 1 shl 7);
 CL.AddConstantN('HHWIN_BUTTON_BROWSE_BCK','LongInt').SetInt( 1 shl 8);
 CL.AddConstantN('HHWIN_BUTTON_NOTES','LongInt').SetInt( 1 shl 9);
 CL.AddConstantN('HHWIN_BUTTON_CONTENTS','LongInt').SetInt( 1 shl 10);
 CL.AddConstantN('HHWIN_BUTTON_SYNC','LongInt').SetInt( 1 shl 11);
 CL.AddConstantN('HHWIN_BUTTON_OPTIONS','LongInt').SetInt( 1 shl 12);
 CL.AddConstantN('HHWIN_BUTTON_PRINT','LongInt').SetInt( 1 shl 13);
 CL.AddConstantN('HHWIN_BUTTON_INDEX','LongInt').SetInt( 1 shl 14);
 CL.AddConstantN('HHWIN_BUTTON_SEARCH','LongInt').SetInt( 1 shl 15);
 CL.AddConstantN('HHWIN_BUTTON_HISTORY','LongInt').SetInt( 1 shl 16);
 CL.AddConstantN('HHWIN_BUTTON_FAVORITES','LongInt').SetInt( 1 shl 17);
 CL.AddConstantN('HHWIN_BUTTON_JUMP1','LongInt').SetInt( 1 shl 18);
 CL.AddConstantN('HHWIN_BUTTON_JUMP2','LongInt').SetInt( 1 shl 19);
 CL.AddConstantN('HHWIN_BUTTON_ZOOM','LongInt').SetInt( 1 shl 20);
 CL.AddConstantN('HHWIN_BUTTON_TOC_NEXT','LongInt').SetInt( 1 shl 21);
 CL.AddConstantN('HHWIN_BUTTON_TOC_PREV','LongInt').SetInt( 1 shl 22);
 CL.AddConstantN('IDTB_EXPAND','LongInt').SetInt( 200);
 CL.AddConstantN('IDTB_CONTRACT','LongInt').SetInt( 201);
 CL.AddConstantN('IDTB_STOP','LongInt').SetInt( 202);
 CL.AddConstantN('IDTB_REFRESH','LongInt').SetInt( 203);
 CL.AddConstantN('IDTB_BACK','LongInt').SetInt( 204);
 CL.AddConstantN('IDTB_HOME','LongInt').SetInt( 205);
 CL.AddConstantN('IDTB_SYNC','LongInt').SetInt( 206);
 CL.AddConstantN('IDTB_PRINT','LongInt').SetInt( 207);
 CL.AddConstantN('IDTB_OPTIONS','LongInt').SetInt( 208);
 CL.AddConstantN('IDTB_FORWARD','LongInt').SetInt( 209);
 CL.AddConstantN('IDTB_NOTES','LongInt').SetInt( 210);
 CL.AddConstantN('IDTB_BROWSE_FWD','LongInt').SetInt( 211);
 CL.AddConstantN('IDTB_BROWSE_BACK','LongInt').SetInt( 212);
 CL.AddConstantN('IDTB_CONTENTS','LongInt').SetInt( 213);
 CL.AddConstantN('IDTB_INDEX','LongInt').SetInt( 214);
 CL.AddConstantN('IDTB_SEARCH','LongInt').SetInt( 215);
 CL.AddConstantN('IDTB_HISTORY','LongInt').SetInt( 216);
 CL.AddConstantN('IDTB_FAVORITES','LongInt').SetInt( 217);
 CL.AddConstantN('IDTB_JUMP1','LongInt').SetInt( 218);
 CL.AddConstantN('IDTB_JUMP2','LongInt').SetInt( 219);
 CL.AddConstantN('IDTB_CUSTOMIZE','LongInt').SetInt( 221);
 CL.AddConstantN('IDTB_ZOOM','LongInt').SetInt( 222);
 CL.AddConstantN('IDTB_TOC_NEXT','LongInt').SetInt( 223);
 CL.AddConstantN('IDTB_TOC_PREV','LongInt').SetInt( 224);
 CL.AddConstantN('HHN_FIRST','LongInt').SetInt( 0 - 860);
 CL.AddConstantN('HHN_LAST','LongInt').SetInt( 0 - 879);
 CL.AddConstantN('HHN_NACVOMPLITE','LongInt').SetInt( HHN_FIRST - 0);
 CL.AddConstantN('HHN_TRACK','LongInt').SetInt( HHN_FIRST - 1);
 CL.AddConstantN('HHN_WINDOW_CREATE','LongInt').SetInt( HHN_FIRST - 2);
  CL.AddTypeS('PHHN_Notify', '^THHN_Notify // will not work');
  CL.AddTypeS('_HHN_NOTIFY', 'record hdr : TNMHDR; pszUrl : PChar; end');
  CL.AddTypeS('THHN_Notify', '_HHN_NOTIFY');
  CL.AddTypeS('HHN_NOTIFY', '_HHN_NOTIFY');
  CL.AddTypeS('PHH_POPUP', '^THH_Popup // will not work');
  CL.AddTypeS('_HH_POPUP', 'record cbStruct : Integer; hInst : HINST; idString '
   +': UINT; pszText : PChar; pt : TPoint; clrForeground : TColorRef; clrBackgr'
   +'ound : TColorRef; rcMargins : TRect; pszFont : PChar; end');
  CL.AddTypeS('THH_Popup', '_HH_POPUP');
  CL.AddTypeS('HH_POPUP', '_HH_POPUP');
  CL.AddTypeS('PHH_AKLINK', '^THH_AKLink // will not work');
  CL.AddTypeS('_HH_AKLINK', 'record cbStruct : Integer; fReserved : Boolean; ps'
   +'zKeywords : PChar; pszUrl : PChar; pszMsgText : PChar; pszMsgTitle : PChar'
   +'; pszWindow : PChar; fIndexOnFail : Boolean; end');
  CL.AddTypeS('THH_AKLink', '_HH_AKLINK');
  CL.AddTypeS('HH_AKLINK', '_HH_AKLINK');
  CL.AddTypeS('PHH_Enum_It', '^THH_Enum_It // will not work');
  CL.AddTypeS('_HH_ENUM_IT', 'record cbStruct : Integer; iType : Integer; pszCa'
   +'tName : PChar; pszITName : PChar; pszItDescription : PChar; end');
  CL.AddTypeS('THH_Enum_it', '_HH_ENUM_IT');
  CL.AddTypeS('HH_ENUM_IT', '_HH_ENUM_IT');
  CL.AddTypeS('PHH_Enum_Cat', '^THH_Enum_Cat // will not work');
  CL.AddTypeS('_HH_ENUM_CAT', 'record cbStruct : Integer; pszCatName : PChar; p'
   +'szCatDescription : PChar; end');
  CL.AddTypeS('THH_Enum_Cat', '_HH_ENUM_CAT');
  CL.AddTypeS('HH_ENUM_CAT', '_HH_ENUM_CAT');
  CL.AddTypeS('PHH_Set_Infotype', '^THH_Set_Infotype // will not work');
  CL.AddTypeS('_HH_SET_INFOTYPE', 'record cbStruct : Integer; pszCatName : PCha'
   +'r; pszInfoTypeName : PChar; end');
  CL.AddTypeS('THH_Set_Infotype', '_HH_SET_INFOTYPE');
  CL.AddTypeS('HH_SET_INFOTYPE', '_HH_SET_INFOTYPE');
  CL.AddTypeS('PHH_Infotype', '^THH_Infotype // will not work');
  CL.AddTypeS('THH_Infotype', 'Dword');
  CL.AddTypeS('HH_INFOTYPE', 'THH_Infotype');
  CL.AddTypeS('PHH_Fts_Query', '^THH_Fts_Query // will not work');
  CL.AddTypeS('_HH_FTS_QUERY', 'record cbStruct : Integer; fUniCodeStrings : Bo'
   +'olean; pszSearchQuery : PChar; iProximity : longint; fStemmedSearch : Bool'
   +'ean; fTitleOnly : Boolean; fExecute : Boolean; pszWindow : PChar; end');
  CL.AddTypeS('THH_Fts_Query', '_HH_FTS_QUERY');
  CL.AddTypeS('HH_FTS_QUERY', '_HH_FTS_QUERY');
  CL.AddTypeS('PHH_Wintype', '^THH_Wintype // will not work');
  CL.AddTypeS('THH_WINTYPE', '_HH_WINTYPE');
  CL.AddTypeS('HH_WINTYPE', '_HH_WINTYPE');
  CL.AddTypeS('PHH_NTrack', '^THH_NTrack // will not work');
  CL.AddTypeS('_HH_NTRACK', 'record hdr : TNMHdr; pszCurUrl : PChar; idAction :'
   +' Integer; end');
  CL.AddTypeS('THH_NTrack', '_HH_NTRACK');
  CL.AddTypeS('HH_NTRACK', '_HH_NTRACK');
 CL.AddDelphiFunction('Function HtmlHelp( hWndCaller : HWND; pszFile : PChar; uCommand : UINT; dwData : DWORD) : HWND');
 CL.AddDelphiFunction('Function HtmlHelpA( hWndCaller : HWND; pszFile : PAnsiChar; uCommand : UINT; dwData : DWORD) : HWND');
 CL.AddDelphiFunction('Function HtmlHelpW( hWndCaller : HWND; pszFile : PWideChar; uCommand : UINT; dwData : DWORD) : HWND');
 CL.AddConstantN('GR_GDIOBJECTS','LongInt').SetInt( 0);
 CL.AddConstantN('GR_USEROBJECTS','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function GetGuiResources( hProcess : THandle; uiFlags : DWORD) : DWORD');
 CL.AddConstantN('SPI_GETBEEP','LongInt').SetInt( 1);
 CL.AddConstantN('SPI_SETBEEP','LongInt').SetInt( 2);
 CL.AddConstantN('SPI_GETMOUSE','LongInt').SetInt( 3);
 CL.AddConstantN('SPI_SETMOUSE','LongInt').SetInt( 4);
 CL.AddConstantN('SPI_GETBORDER','LongInt').SetInt( 5);
 CL.AddConstantN('SPI_SETBORDER','LongInt').SetInt( 6);
 CL.AddConstantN('SPI_GETKEYBOARDSPEED','LongInt').SetInt( 10);
 CL.AddConstantN('SPI_SETKEYBOARDSPEED','LongInt').SetInt( 11);
 CL.AddConstantN('SPI_LANGDRIVER','LongInt').SetInt( 12);
 CL.AddConstantN('SPI_ICONHORIZONTALSPACING','LongInt').SetInt( 13);
 CL.AddConstantN('SPI_GETSCREENSAVETIMEOUT','LongInt').SetInt( 14);
 CL.AddConstantN('SPI_SETSCREENSAVETIMEOUT','LongInt').SetInt( 15);
 CL.AddConstantN('SPI_GETSCREENSAVEACTIVE','LongWord').SetUInt( $10);
 CL.AddConstantN('SPI_SETSCREENSAVEACTIVE','LongInt').SetInt( 17);
 CL.AddConstantN('SPI_GETGRIDGRANULARITY','LongInt').SetInt( 18);
 CL.AddConstantN('SPI_SETGRIDGRANULARITY','LongInt').SetInt( 19);
 CL.AddConstantN('SPI_SETDESKWALLPAPER','LongInt').SetInt( 20);
 CL.AddConstantN('SPI_SETDESKPATTERN','LongInt').SetInt( 21);
 CL.AddConstantN('SPI_GETKEYBOARDDELAY','LongInt').SetInt( 22);
 CL.AddConstantN('SPI_SETKEYBOARDDELAY','LongInt').SetInt( 23);
 CL.AddConstantN('SPI_ICONVERTICALSPACING','LongInt').SetInt( 24);
 CL.AddConstantN('SPI_GETICONTITLEWRAP','LongInt').SetInt( 25);
 CL.AddConstantN('SPI_SETICONTITLEWRAP','LongInt').SetInt( 26);
 CL.AddConstantN('SPI_GETMENUDROPALIGNMENT','LongInt').SetInt( 27);
 CL.AddConstantN('SPI_SETMENUDROPALIGNMENT','LongInt').SetInt( 28);
 CL.AddConstantN('SPI_SETDOUBLECLKWIDTH','LongInt').SetInt( 29);
 CL.AddConstantN('SPI_SETDOUBLECLKHEIGHT','LongInt').SetInt( 30);
 CL.AddConstantN('SPI_GETICONTITLELOGFONT','LongInt').SetInt( 31);
 CL.AddConstantN('SPI_SETDOUBLECLICKTIME','LongWord').SetUInt( $20);
 CL.AddConstantN('SPI_SETMOUSEBUTTONSWAP','LongInt').SetInt( 33);
 CL.AddConstantN('SPI_SETICONTITLELOGFONT','LongInt').SetInt( 34);
 CL.AddConstantN('SPI_GETFASTTASKSWITCH','LongInt').SetInt( 35);
 CL.AddConstantN('SPI_SETFASTTASKSWITCH','LongInt').SetInt( 36);
 CL.AddConstantN('SPI_SETDRAGFULLWINDOWS','LongInt').SetInt( 37);
 CL.AddConstantN('SPI_GETDRAGFULLWINDOWS','LongInt').SetInt( 38);
 CL.AddConstantN('SPI_GETNONCLIENTMETRICS','LongInt').SetInt( 41);
 CL.AddConstantN('SPI_SETNONCLIENTMETRICS','LongInt').SetInt( 42);
 CL.AddConstantN('SPI_GETMINIMIZEDMETRICS','LongInt').SetInt( 43);
 CL.AddConstantN('SPI_SETMINIMIZEDMETRICS','LongInt').SetInt( 44);
 CL.AddConstantN('SPI_GETICONMETRICS','LongInt').SetInt( 45);
 CL.AddConstantN('SPI_SETICONMETRICS','LongInt').SetInt( 46);
 CL.AddConstantN('SPI_SETWORKAREA','LongInt').SetInt( 47);
 CL.AddConstantN('SPI_GETWORKAREA','LongInt').SetInt( 48);
 CL.AddConstantN('SPI_SETPENWINDOWS','LongInt').SetInt( 49);
 CL.AddConstantN('SPI_GETHIGHCONTRAST','LongInt').SetInt( 66);
 CL.AddConstantN('SPI_SETHIGHCONTRAST','LongInt').SetInt( 67);
 CL.AddConstantN('SPI_GETKEYBOARDPREF','LongInt').SetInt( 68);
 CL.AddConstantN('SPI_SETKEYBOARDPREF','LongInt').SetInt( 69);
 CL.AddConstantN('SPI_GETSCREENREADER','LongInt').SetInt( 70);
 CL.AddConstantN('SPI_SETSCREENREADER','LongInt').SetInt( 71);
 CL.AddConstantN('SPI_GETANIMATION','LongInt').SetInt( 72);
 CL.AddConstantN('SPI_SETANIMATION','LongInt').SetInt( 73);
 CL.AddConstantN('SPI_GETFONTSMOOTHING','LongInt').SetInt( 74);
 CL.AddConstantN('SPI_SETFONTSMOOTHING','LongInt').SetInt( 75);
 CL.AddConstantN('SPI_SETDRAGWIDTH','LongInt').SetInt( 76);
 CL.AddConstantN('SPI_SETDRAGHEIGHT','LongInt').SetInt( 77);
 CL.AddConstantN('SPI_SETHANDHELD','LongInt').SetInt( 78);
 CL.AddConstantN('SPI_GETLOWPOWERTIMEOUT','LongInt').SetInt( 79);
 CL.AddConstantN('SPI_GETPOWEROFFTIMEOUT','LongInt').SetInt( 80);
 CL.AddConstantN('SPI_SETLOWPOWERTIMEOUT','LongInt').SetInt( 81);
 CL.AddConstantN('SPI_SETPOWEROFFTIMEOUT','LongInt').SetInt( 82);
 CL.AddConstantN('SPI_GETLOWPOWERACTIVE','LongInt').SetInt( 83);
 CL.AddConstantN('SPI_GETPOWEROFFACTIVE','LongInt').SetInt( 84);
 CL.AddConstantN('SPI_SETLOWPOWERACTIVE','LongInt').SetInt( 85);
 CL.AddConstantN('SPI_SETPOWEROFFACTIVE','LongInt').SetInt( 86);
 CL.AddConstantN('SPI_SETCURSORS','LongInt').SetInt( 87);
 CL.AddConstantN('SPI_SETICONS','LongInt').SetInt( 88);
 CL.AddConstantN('SPI_GETDEFAULTINPUTLANG','LongInt').SetInt( 89);
 CL.AddConstantN('SPI_SETDEFAULTINPUTLANG','LongInt').SetInt( 90);
 CL.AddConstantN('SPI_SETLANGTOGGLE','LongInt').SetInt( 91);
 CL.AddConstantN('SPI_GETWINDOWSEXTENSION','LongInt').SetInt( 92);
 CL.AddConstantN('SPI_SETMOUSETRAILS','LongInt').SetInt( 93);
 CL.AddConstantN('SPI_GETMOUSETRAILS','LongInt').SetInt( 94);
 CL.AddConstantN('SPI_SCREENSAVERRUNNING','LongInt').SetInt( 97);
 CL.AddConstantN('SPI_GETFILTERKEYS','LongInt').SetInt( 50);
 CL.AddConstantN('SPI_SETFILTERKEYS','LongInt').SetInt( 51);
 CL.AddConstantN('SPI_GETTOGGLEKEYS','LongInt').SetInt( 52);
 CL.AddConstantN('SPI_SETTOGGLEKEYS','LongInt').SetInt( 53);
 CL.AddConstantN('SPI_GETMOUSEKEYS','LongInt').SetInt( 54);
 CL.AddConstantN('SPI_SETMOUSEKEYS','LongInt').SetInt( 55);
 CL.AddConstantN('SPI_GETSHOWSOUNDS','LongInt').SetInt( 56);
 CL.AddConstantN('SPI_SETSHOWSOUNDS','LongInt').SetInt( 57);
 CL.AddConstantN('SPI_GETSTICKYKEYS','LongInt').SetInt( 58);
 CL.AddConstantN('SPI_SETSTICKYKEYS','LongInt').SetInt( 59);
 CL.AddConstantN('SPI_GETACCESSTIMEOUT','LongInt').SetInt( 60);
 CL.AddConstantN('SPI_SETACCESSTIMEOUT','LongInt').SetInt( 61);
 CL.AddConstantN('SPI_GETSERIALKEYS','LongInt').SetInt( 62);
 CL.AddConstantN('SPI_SETSERIALKEYS','LongInt').SetInt( 63);
 CL.AddConstantN('SPI_GETSOUNDSENTRY','LongInt').SetInt( 64);
 CL.AddConstantN('SPI_SETSOUNDSENTRY','LongInt').SetInt( 65);
 CL.AddConstantN('SPI_GETSNAPTODEFBUTTON','LongInt').SetInt( 95);
 CL.AddConstantN('SPI_SETSNAPTODEFBUTTON','LongInt').SetInt( 96);
 CL.AddConstantN('SPI_GETMOUSEHOVERWIDTH','LongInt').SetInt( 98);
 CL.AddConstantN('SPI_SETMOUSEHOVERWIDTH','LongInt').SetInt( 99);
 CL.AddConstantN('SPI_GETMOUSEHOVERHEIGHT','LongInt').SetInt( 100);
 CL.AddConstantN('SPI_SETMOUSEHOVERHEIGHT','LongInt').SetInt( 101);
 CL.AddConstantN('SPI_GETMOUSEHOVERTIME','LongInt').SetInt( 102);
 CL.AddConstantN('SPI_SETMOUSEHOVERTIME','LongInt').SetInt( 103);
 CL.AddConstantN('SPI_GETWHEELSCROLLLINES','LongInt').SetInt( 104);
 CL.AddConstantN('SPI_SETWHEELSCROLLLINES','LongInt').SetInt( 105);
 CL.AddConstantN('SPI_GETMENUSHOWDELAY','LongInt').SetInt( 106);
 CL.AddConstantN('SPI_SETMENUSHOWDELAY','LongInt').SetInt( 107);
 CL.AddConstantN('SPI_GETSHOWIMEUI','LongInt').SetInt( 110);
 CL.AddConstantN('SPI_SETSHOWIMEUI','LongInt').SetInt( 111);
 CL.AddConstantN('SPI_GETMOUSESPEED','LongInt').SetInt( 112);
 CL.AddConstantN('SPI_SETMOUSESPEED','LongInt').SetInt( 113);
 CL.AddConstantN('SPI_GETSCREENSAVERRUNNING','LongInt').SetInt( 114);
 CL.AddConstantN('SPI_GETACTIVEWINDOWTRACKING','LongWord').SetUInt( $1000);
 CL.AddConstantN('SPI_SETACTIVEWINDOWTRACKING','LongWord').SetUInt( $1001);
 CL.AddConstantN('SPI_GETMENUANIMATION','LongWord').SetUInt( $1002);
 CL.AddConstantN('SPI_SETMENUANIMATION','LongWord').SetUInt( $1003);
 CL.AddConstantN('SPI_GETCOMBOBOXANIMATION','LongWord').SetUInt( $1004);
 CL.AddConstantN('SPI_SETCOMBOBOXANIMATION','LongWord').SetUInt( $1005);
 CL.AddConstantN('SPI_GETLISTBOXSMOOTHSCROLLING','LongWord').SetUInt( $1006);
 CL.AddConstantN('SPI_SETLISTBOXSMOOTHSCROLLING','LongWord').SetUInt( $1007);
 CL.AddConstantN('SPI_GETGRADIENTCAPTIONS','LongWord').SetUInt( $1008);
 CL.AddConstantN('SPI_SETGRADIENTCAPTIONS','LongWord').SetUInt( $1009);
 CL.AddConstantN('SPI_GETKEYBOARDCUES','LongWord').SetUInt( $100A);
 CL.AddConstantN('SPI_SETKEYBOARDCUES','LongWord').SetUInt( $100B);
 CL.AddConstantN('SPI_GETMENUUNDERLINES','').SetString( SPI_GETKEYBOARDCUES);
 CL.AddConstantN('SPI_SETMENUUNDERLINES','').SetString( SPI_SETKEYBOARDCUES);
 CL.AddConstantN('SPI_GETACTIVEWNDTRKZORDER','LongWord').SetUInt( $100C);
 CL.AddConstantN('SPI_SETACTIVEWNDTRKZORDER','LongWord').SetUInt( $100D);
 CL.AddConstantN('SPI_GETHOTTRACKING','LongWord').SetUInt( $100E);
 CL.AddConstantN('SPI_SETHOTTRACKING','LongWord').SetUInt( $100F);
 CL.AddConstantN('SPI_GETMENUFADE','LongWord').SetUInt( $1012);
 CL.AddConstantN('SPI_SETMENUFADE','LongWord').SetUInt( $1013);
 CL.AddConstantN('SPI_GETSELECTIONFADE','LongWord').SetUInt( $1014);
 CL.AddConstantN('SPI_SETSELECTIONFADE','LongWord').SetUInt( $1015);
 CL.AddConstantN('SPI_GETTOOLTIPANIMATION','LongWord').SetUInt( $1016);
 CL.AddConstantN('SPI_SETTOOLTIPANIMATION','LongWord').SetUInt( $1017);
 CL.AddConstantN('SPI_GETTOOLTIPFADE','LongWord').SetUInt( $1018);
 CL.AddConstantN('SPI_SETTOOLTIPFADE','LongWord').SetUInt( $1019);
 CL.AddConstantN('SPI_GETCURSORSHADOW','LongWord').SetUInt( $101A);
 CL.AddConstantN('SPI_SETCURSORSHADOW','LongWord').SetUInt( $101B);
 CL.AddConstantN('SPI_GETMOUSESONAR','LongWord').SetUInt( $101C);
 CL.AddConstantN('SPI_SETMOUSESONAR','LongWord').SetUInt( $101D);
 CL.AddConstantN('SPI_GETMOUSECLICKLOCK','LongWord').SetUInt( $101E);
 CL.AddConstantN('SPI_SETMOUSECLICKLOCK','LongWord').SetUInt( $101F);
 CL.AddConstantN('SPI_GETMOUSEVANISH','LongWord').SetUInt( $1020);
 CL.AddConstantN('SPI_SETMOUSEVANISH','LongWord').SetUInt( $1021);
 CL.AddConstantN('SPI_GETFLATMENU','LongWord').SetUInt( $1022);
 CL.AddConstantN('SPI_SETFLATMENU','LongWord').SetUInt( $1023);
 CL.AddConstantN('SPI_GETDROPSHADOW','LongWord').SetUInt( $1024);
 CL.AddConstantN('SPI_SETDROPSHADOW','LongWord').SetUInt( $1025);
 CL.AddConstantN('SPI_GETUIEFFECTS','LongWord').SetUInt( $103E);
 CL.AddConstantN('SPI_SETUIEFFECTS','LongWord').SetUInt( $103F);
 CL.AddConstantN('SPI_GETFOREGROUNDLOCKTIMEOUT','LongWord').SetUInt( $2000);
 CL.AddConstantN('SPI_SETFOREGROUNDLOCKTIMEOUT','LongWord').SetUInt( $2001);
 CL.AddConstantN('SPI_GETACTIVEWNDTRKTIMEOUT','LongWord').SetUInt( $2002);
 CL.AddConstantN('SPI_SETACTIVEWNDTRKTIMEOUT','LongWord').SetUInt( $2003);
 CL.AddConstantN('SPI_GETFOREGROUNDFLASHCOUNT','LongWord').SetUInt( $2004);
 CL.AddConstantN('SPI_SETFOREGROUNDFLASHCOUNT','LongWord').SetUInt( $2005);
 CL.AddConstantN('SPI_GETCARETWIDTH','LongWord').SetUInt( $2006);
 CL.AddConstantN('SPI_SETCARETWIDTH','LongWord').SetUInt( $2007);
 CL.AddConstantN('SPI_GETMOUSECLICKLOCKTIME','LongWord').SetUInt( $2008);
 CL.AddConstantN('SPI_SETMOUSECLICKLOCKTIME','LongWord').SetUInt( $2009);
 CL.AddConstantN('SPI_GETFONTSMOOTHINGTYPE','LongWord').SetUInt( $200A);
 CL.AddConstantN('SPI_SETFONTSMOOTHINGTYPE','LongWord').SetUInt( $200B);
 CL.AddConstantN('FE_FONTSMOOTHINGSTANDARD','LongWord').SetUInt( $0001);
 CL.AddConstantN('FE_FONTSMOOTHINGCLEARTYPE','LongWord').SetUInt( $0002);
 CL.AddConstantN('FE_FONTSMOOTHINGDOCKING','LongWord').SetUInt( $8000);
 CL.AddConstantN('SPI_GETFONTSMOOTHINGCONTRAST','LongWord').SetUInt( $200C);
 CL.AddConstantN('SPI_SETFONTSMOOTHINGCONTRAST','LongWord').SetUInt( $200D);
 CL.AddConstantN('SPI_GETFOCUSBORDERWIDTH','LongWord').SetUInt( $200E);
 CL.AddConstantN('SPI_SETFOCUSBORDERWIDTH','LongWord').SetUInt( $200F);
 CL.AddConstantN('SPI_GETFOCUSBORDERHEIGHT','LongWord').SetUInt( $2010);
 CL.AddConstantN('SPI_SETFOCUSBORDERHEIGHT','LongWord').SetUInt( $2011);
 CL.AddConstantN('SPIF_UPDATEINIFILE','LongInt').SetInt( 1);
 CL.AddConstantN('SPIF_SENDWININICHANGE','LongInt').SetInt( 2);
 CL.AddConstantN('SPIF_SENDCHANGE','').SetString( SPIF_SENDWININICHANGE);
 CL.AddConstantN('METRICS_USEDEFAULT','LongInt').SetInt( LongWord ( - 1 ));
  CL.AddTypeS('PNonClientMetricsA', '^TNonClientMetricsA // will not work');
  CL.AddTypeS('PNonClientMetricsW', '^TNonClientMetricsW // will not work');
  CL.AddTypeS('PNonClientMetrics', 'PNonClientMetricsA');
  CL.AddTypeS('tagNONCLIENTMETRICSA', 'record cbSize : UINT; iBorderWidth : Int'
   +'eger; iScrollWidth : Integer; iScrollHeight : Integer; iCaptionWidth : Int'
   +'eger; iCaptionHeight : Integer; lfCaptionFont : TLogFontA; iSmCaptionWidth'
   +' : Integer; iSmCaptionHeight : Integer; lfSmCaptionFont : TLogFontA; iMenu'
   +'Width : Integer; iMenuHeight : Integer; lfMenuFont : TLogFontA; lfStatusFo'
   +'nt : TLogFontA; lfMessageFont : TLogFontA; end');
  CL.AddTypeS('tagNONCLIENTMETRICSW', 'record cbSize : UINT; iBorderWidth : Int'
   +'eger; iScrollWidth : Integer; iScrollHeight : Integer; iCaptionWidth : Int'
   +'eger; iCaptionHeight : Integer; lfCaptionFont : TLogFontW; iSmCaptionWidth'
   +' : Integer; iSmCaptionHeight : Integer; lfSmCaptionFont : TLogFontW; iMenu'
   +'Width : Integer; iMenuHeight : Integer; lfMenuFont : TLogFontW; lfStatusFo'
   +'nt : TLogFontW; lfMessageFont : TLogFontW; end');
  CL.AddTypeS('tagNONCLIENTMETRICS', 'tagNONCLIENTMETRICSA');
  CL.AddTypeS('TNonClientMetricsA', 'tagNONCLIENTMETRICSA');
  CL.AddTypeS('TNonClientMetricsW', 'tagNONCLIENTMETRICSW');
  CL.AddTypeS('TNonClientMetrics', 'TNonClientMetricsA');
  CL.AddTypeS('NONCLIENTMETRICSA', 'tagNONCLIENTMETRICSA');
  CL.AddTypeS('NONCLIENTMETRICSW', 'tagNONCLIENTMETRICSW');
  CL.AddTypeS('NONCLIENTMETRICS', 'NONCLIENTMETRICSA');
 CL.AddConstantN('ARW_BOTTOMLEFT','LongInt').SetInt( 0);
 CL.AddConstantN('ARW_BOTTOMRIGHT','LongInt').SetInt( 1);
 CL.AddConstantN('ARW_TOPLEFT','LongInt').SetInt( 2);
 CL.AddConstantN('ARW_TOPRIGHT','LongInt').SetInt( 3);
 CL.AddConstantN('ARW_STARTMASK','LongInt').SetInt( 3);
 CL.AddConstantN('ARW_STARTRIGHT','LongInt').SetInt( 1);
 CL.AddConstantN('ARW_STARTTOP','LongInt').SetInt( 2);
 CL.AddConstantN('ARW_LEFT','LongInt').SetInt( 0);
 CL.AddConstantN('ARW_RIGHT','LongInt').SetInt( 0);
 CL.AddConstantN('ARW_UP','LongInt').SetInt( 4);
 CL.AddConstantN('ARW_DOWN','LongInt').SetInt( 4);
 CL.AddConstantN('ARW_HIDE','LongInt').SetInt( 8);
 CL.AddConstantN('ARW_VALID','LongInt').SetInt( 15);
  CL.AddTypeS('PMinimizedMetrics', '^TMinimizedMetrics // will not work');
  CL.AddTypeS('tagMINIMIZEDMETRICS', 'record cbSize : UINT; iWidth : Integer; i'
   +'HorzGap : Integer; iVertGap : Integer; iArrange : Integer; end');
  CL.AddTypeS('TMinimizedMetrics', 'tagMINIMIZEDMETRICS');
  CL.AddTypeS('MINIMIZEDMETRICS', 'tagMINIMIZEDMETRICS');
  CL.AddTypeS('PIconMetricsA', '^TIconMetricsA // will not work');
  CL.AddTypeS('PIconMetricsW', '^TIconMetricsW // will not work');
  CL.AddTypeS('PIconMetrics', 'PIconMetricsA');
  CL.AddTypeS('tagICONMETRICSA', 'record cbSize : UINT; iHorzSpacing : Integer;'
   +' iVertSpacing : Integer; iTitleWrap : Integer; lfFont : TLogFontA; end');
  CL.AddTypeS('tagICONMETRICSW', 'record cbSize : UINT; iHorzSpacing : Integer;'
   +' iVertSpacing : Integer; iTitleWrap : Integer; lfFont : TLogFontW; end');
  CL.AddTypeS('tagICONMETRICS', 'tagICONMETRICSA');
  CL.AddTypeS('TIconMetricsA', 'tagICONMETRICSA');
  CL.AddTypeS('TIconMetricsW', 'tagICONMETRICSW');
  CL.AddTypeS('TIconMetrics', 'TIconMetricsA');
  CL.AddTypeS('ICONMETRICSA', 'tagICONMETRICSA');
  CL.AddTypeS('ICONMETRICSW', 'tagICONMETRICSW');
  CL.AddTypeS('ICONMETRICS', 'ICONMETRICSA');
  CL.AddTypeS('PAnimationInfo', '^TAnimationInfo // will not work');
  CL.AddTypeS('tagANIMATIONINFO', 'record cbSize : UINT; iMinAnimate : Integer;'
   +' end');
  CL.AddTypeS('TAnimationInfo', 'tagANIMATIONINFO');
  CL.AddTypeS('ANIMATIONINFO', 'tagANIMATIONINFO');
  CL.AddTypeS('PSerialKeysA', '^TSerialKeysA // will not work');
  CL.AddTypeS('PSerialKeysW', '^TSerialKeysW // will not work');
  CL.AddTypeS('PSerialKeys', 'PSerialKeysA');
  CL.AddTypeS('tagSERIALKEYSA', 'record cbSize : UINT; dwFlags : DWORD; lpszAct'
   +'ivePort : PAnsiChar; lpszPort : PAnsiChar; iBaudRate : UINT; iPortState : '
   +'UINT; iActive : UINT; end');
  CL.AddTypeS('tagSERIALKEYSW', 'record cbSize : UINT; dwFlags : DWORD; lpszAct'
   +'ivePort : PWideChar; lpszPort : PWideChar; iBaudRate : UINT; iPortState : '
   +'UINT; iActive : UINT; end');
  CL.AddTypeS('tagSERIALKEYS', 'tagSERIALKEYSA');
  CL.AddTypeS('TSerialKeysA', 'tagSERIALKEYSA');
  CL.AddTypeS('TSerialKeysW', 'tagSERIALKEYSW');
  CL.AddTypeS('TSerialKeys', 'TSerialKeysA');
  CL.AddTypeS('SERIALKEYSA', 'tagSERIALKEYSA');
  CL.AddTypeS('SERIALKEYSW', 'tagSERIALKEYSW');
  CL.AddTypeS('SERIALKEYS', 'SERIALKEYSA');
 CL.AddConstantN('SERKF_SERIALKEYSON','LongInt').SetInt( 1);
 CL.AddConstantN('SERKF_AVAILABLE','LongInt').SetInt( 2);
 CL.AddConstantN('SERKF_INDICATOR','LongInt').SetInt( 4);
  CL.AddTypeS('PHighContrastA', '^THighContrastA // will not work');
  CL.AddTypeS('PHighContrastW', '^THighContrastW // will not work');
  CL.AddTypeS('PHighContrast', 'PHighContrastA');
  CL.AddTypeS('tagHIGHCONTRASTA', 'record cbSize : UINT; dwFlags : DWORD; lpszD'
   +'efaultScheme : PAnsiChar; end');
  CL.AddTypeS('tagHIGHCONTRASTW', 'record cbSize : UINT; dwFlags : DWORD; lpszD'
   +'efaultScheme : PWideChar; end');
  CL.AddTypeS('tagHIGHCONTRAST', 'tagHIGHCONTRASTA');
  CL.AddTypeS('THighContrastA', 'tagHIGHCONTRASTA');
  CL.AddTypeS('THighContrastW', 'tagHIGHCONTRASTW');
  CL.AddTypeS('THighContrast', 'THighContrastA');
  CL.AddTypeS('HIGHCONTRASTA', 'tagHIGHCONTRASTA');
  CL.AddTypeS('HIGHCONTRASTW', 'tagHIGHCONTRASTW');
  CL.AddTypeS('HIGHCONTRAST', 'HIGHCONTRASTA');
 CL.AddConstantN('HCF_HIGHCONTRASTON','LongWord').SetUInt( $00000001);
 CL.AddConstantN('HCF_AVAILABLE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('HCF_HOTKEYACTIVE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('HCF_CONFIRMHOTKEY','LongWord').SetUInt( $00000008);
 CL.AddConstantN('HCF_HOTKEYSOUND','LongWord').SetUInt( $00000010);
 CL.AddConstantN('HCF_INDICATOR','LongWord').SetUInt( $00000020);
 CL.AddConstantN('HCF_HOTKEYAVAILABLE','LongWord').SetUInt( $00000040);
 CL.AddConstantN('CDS_UPDATEREGISTRY','LongWord').SetUInt( $00000001);
 CL.AddConstantN('CDS_TEST','LongWord').SetUInt( $00000002);
 CL.AddConstantN('CDS_FULLSCREEN','LongWord').SetUInt( $00000004);
 CL.AddConstantN('CDS_GLOBAL','LongWord').SetUInt( $00000008);
 CL.AddConstantN('CDS_SET_PRIMARY','LongWord').SetUInt( $00000010);
 CL.AddConstantN('CDS_RESET','LongWord').SetUInt( $40000000);
 CL.AddConstantN('CDS_SETRECT','LongWord').SetUInt( $20000000);
 CL.AddConstantN('CDS_NORESET','LongWord').SetUInt( $10000000);
 CL.AddConstantN('DISP_CHANGE_SUCCESSFUL','LongInt').SetInt( 0);
 CL.AddConstantN('DISP_CHANGE_RESTART','LongInt').SetInt( 1);
 CL.AddConstantN('DISP_CHANGE_FAILED','LongInt').SetInt( - 1);
 CL.AddConstantN('DISP_CHANGE_BADMODE','LongInt').SetInt( - 2);
 CL.AddConstantN('DISP_CHANGE_NOTUPDATED','LongInt').SetInt( - 3);
 CL.AddConstantN('DISP_CHANGE_BADFLAGS','LongInt').SetInt( - 4);
 CL.AddConstantN('DISP_CHANGE_BADPARAM','LongInt').SetInt( - 5);
 CL.AddDelphiFunction('Function ChangeDisplaySettings( var lpDevMode : TDeviceMode; dwFlags : DWORD) : Longint');
 CL.AddDelphiFunction('Function ChangeDisplaySettingsA( var lpDevMode : TDeviceModeA; dwFlags : DWORD) : Longint');
 CL.AddDelphiFunction('Function ChangeDisplaySettingsW( var lpDevMode : TDeviceModeW; dwFlags : DWORD) : Longint');
 CL.AddDelphiFunction('Function ChangeDisplaySettingsEx( lpszDeviceName : PChar; var lpDevMode : TDeviceMode; wnd : HWND; dwFlags : DWORD; lParam : Pointer) : Longint');
 CL.AddDelphiFunction('Function ChangeDisplaySettingsExA( lpszDeviceName : PAnsiChar; var lpDevMode : TDeviceModeA; wnd : HWND; dwFlags : DWORD; lParam : Pointer) : Longint');
 CL.AddDelphiFunction('Function ChangeDisplaySettingsExW( lpszDeviceName : PWideChar; var lpDevMode : TDeviceModeW; wnd : HWND; dwFlags : DWORD; lParam : Pointer) : Longint');
 CL.AddDelphiFunction('Function EnumDisplaySettings( lpszDeviceName : PChar; iModeNum : DWORD; var lpDevMode : TDeviceMode) : BOOL');
 CL.AddDelphiFunction('Function EnumDisplaySettingsA( lpszDeviceName : PAnsiChar; iModeNum : DWORD; var lpDevMode : TDeviceModeA) : BOOL');
 CL.AddDelphiFunction('Function EnumDisplaySettingsW( lpszDeviceName : PWideChar; iModeNum : DWORD; var lpDevMode : TDeviceModeW) : BOOL');
 CL.AddDelphiFunction('Function EnumDisplayDevices( Unused : Pointer; iDevNum : DWORD; var lpDisplayDevice : TDisplayDevice; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumDisplayDevicesA( Unused : Pointer; iDevNum : DWORD; var lpDisplayDevice : TDisplayDeviceA; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumDisplayDevicesW( Unused : Pointer; iDevNum : DWORD; var lpDisplayDevice : TDisplayDeviceW; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function SystemParametersInfo( uiAction, uiParam : UINT; pvParam : Pointer; fWinIni : UINT) : BOOL');
 CL.AddDelphiFunction('Function SystemParametersInfoA( uiAction, uiParam : UINT; pvParam : Pointer; fWinIni : UINT) : BOOL');
 CL.AddDelphiFunction('Function SystemParametersInfoW( uiAction, uiParam : UINT; pvParam : Pointer; fWinIni : UINT) : BOOL');
  CL.AddTypeS('PFilterKeys', '^TFilterKeys // will not work');
  CL.AddTypeS('tagFILTERKEYS', 'record cbSize : UINT; dwFlags : DWORD; iWaitMSe'
   +'c : DWORD; iDelayMSec : DWORD; iRepeatMSec : DWORD; iBounceMSec : DWORD; e'
   +'nd');
  CL.AddTypeS('TFilterKeys', 'tagFILTERKEYS');
  CL.AddTypeS('FILTERKEYS', 'tagFILTERKEYS');
 CL.AddConstantN('FKF_FILTERKEYSON','LongInt').SetInt( 1);
 CL.AddConstantN('FKF_AVAILABLE','LongInt').SetInt( 2);
 CL.AddConstantN('FKF_HOTKEYACTIVE','LongInt').SetInt( 4);
 CL.AddConstantN('FKF_CONFIRMHOTKEY','LongInt').SetInt( 8);
 CL.AddConstantN('FKF_HOTKEYSOUND','LongWord').SetUInt( $10);
 CL.AddConstantN('FKF_INDICATOR','LongWord').SetUInt( $20);
 CL.AddConstantN('FKF_CLICKON','LongWord').SetUInt( $40);
  CL.AddTypeS('PStickyKeys', '^TStickyKeys // will not work');
  CL.AddTypeS('tagSTICKYKEYS', 'record cbSize : UINT; dwFlags : DWORD; end');
  CL.AddTypeS('TStickyKeys', 'tagSTICKYKEYS');
  CL.AddTypeS('STICKYKEYS', 'tagSTICKYKEYS');
 CL.AddConstantN('SKF_STICKYKEYSON','LongInt').SetInt( 1);
 CL.AddConstantN('SKF_AVAILABLE','LongInt').SetInt( 2);
 CL.AddConstantN('SKF_HOTKEYACTIVE','LongInt').SetInt( 4);
 CL.AddConstantN('SKF_CONFIRMHOTKEY','LongInt').SetInt( 8);
 CL.AddConstantN('SKF_HOTKEYSOUND','LongWord').SetUInt( $10);
 CL.AddConstantN('SKF_INDICATOR','LongWord').SetUInt( $20);
 CL.AddConstantN('SKF_AUDIBLEFEEDBACK','LongWord').SetUInt( $40);
 CL.AddConstantN('SKF_TRISTATE','LongWord').SetUInt( $80);
 CL.AddConstantN('SKF_TWOKEYSOFF','LongWord').SetUInt( $100);
 CL.AddConstantN('SKF_LALTLATCHED','LongWord').SetUInt( $10000000);
 CL.AddConstantN('SKF_LCTLLATCHED','LongWord').SetUInt( $04000000);
 CL.AddConstantN('SKF_LSHIFTLATCHED','LongWord').SetUInt( $01000000);
 CL.AddConstantN('SKF_RALTLATCHED','LongWord').SetUInt( $20000000);
 CL.AddConstantN('SKF_RCTLLATCHED','LongWord').SetUInt( $08000000);
 CL.AddConstantN('SKF_RSHIFTLATCHED','LongWord').SetUInt( $02000000);
 CL.AddConstantN('SKF_LWINLATCHED','LongWord').SetUInt( $40000000);
 CL.AddConstantN('SKF_RWINLATCHED','LongWord').SetUInt( $80000000);
 CL.AddConstantN('SKF_LALTLOCKED','LongWord').SetUInt( $00100000);
 CL.AddConstantN('SKF_LCTLLOCKED','LongWord').SetUInt( $00040000);
 CL.AddConstantN('SKF_LSHIFTLOCKED','LongWord').SetUInt( $00010000);
 CL.AddConstantN('SKF_RALTLOCKED','LongWord').SetUInt( $00200000);
 CL.AddConstantN('SKF_RCTLLOCKED','LongWord').SetUInt( $00080000);
 CL.AddConstantN('SKF_RSHIFTLOCKED','LongWord').SetUInt( $00020000);
 CL.AddConstantN('SKF_LWINLOCKED','LongWord').SetUInt( $00400000);
 CL.AddConstantN('SKF_RWINLOCKED','LongWord').SetUInt( $00800000);
  CL.AddTypeS('PMouseKeys', '^TMouseKeys // will not work');
  CL.AddTypeS('tagMOUSEKEYS', 'record cbSize : UINT; dwFlags : DWORD; iMaxSpeed'
   +' : DWORD; iTimeToMaxSpeed : DWORD; iCtrlSpeed : DWORD; dwReserved1 : DWORD'
   +'; dwReserved2 : DWORD; end');
  CL.AddTypeS('TMouseKeys', 'tagMOUSEKEYS');
  CL.AddTypeS('MOUSEKEYS', 'tagMOUSEKEYS');
 CL.AddConstantN('MKF_MOUSEKEYSON','LongInt').SetInt( 1);
 CL.AddConstantN('MKF_AVAILABLE','LongInt').SetInt( 2);
 CL.AddConstantN('MKF_HOTKEYACTIVE','LongInt').SetInt( 4);
 CL.AddConstantN('MKF_CONFIRMHOTKEY','LongInt').SetInt( 8);
 CL.AddConstantN('MKF_HOTKEYSOUND','LongWord').SetUInt( $10);
 CL.AddConstantN('MKF_INDICATOR','LongWord').SetUInt( $20);
 CL.AddConstantN('MKF_MODIFIERS','LongWord').SetUInt( $40);
 CL.AddConstantN('MKF_REPLACENUMBERS','LongWord').SetUInt( $80);
 CL.AddConstantN('MKF_LEFTBUTTONSEL','LongWord').SetUInt( $10000000);
 CL.AddConstantN('MKF_RIGHTBUTTONSEL','LongWord').SetUInt( $20000000);
 CL.AddConstantN('MKF_LEFTBUTTONDOWN','LongWord').SetUInt( $01000000);
 CL.AddConstantN('MKF_RIGHTBUTTONDOWN','LongWord').SetUInt( $02000000);
 CL.AddConstantN('MKF_MOUSEMODE','LongWord').SetUInt( $80000000);
  CL.AddTypeS('PAccessTimeout', '^TAccessTimeout // will not work');
  CL.AddTypeS('tagACCESSTIMEOUT', 'record cbSize : UINT; dwFlags : DWORD; iTime'
   +'OutMSec : DWORD; end');
  CL.AddTypeS('TAccessTimeout', 'tagACCESSTIMEOUT');
  CL.AddTypeS('ACCESSTIMEOUT', 'tagACCESSTIMEOUT');
 CL.AddConstantN('ATF_TIMEOUTON','LongInt').SetInt( 1);
 CL.AddConstantN('ATF_ONOFFFEEDBACK','LongInt').SetInt( 2);
 CL.AddConstantN('SSGF_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('SSGF_DISPLAY','LongInt').SetInt( 3);
 CL.AddConstantN('SSTF_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('SSTF_CHARS','LongInt').SetInt( 1);
 CL.AddConstantN('SSTF_BORDER','LongInt').SetInt( 2);
 CL.AddConstantN('SSTF_DISPLAY','LongInt').SetInt( 3);
 CL.AddConstantN('SSWF_NONE','LongInt').SetInt( 0);
 CL.AddConstantN('SSWF_TITLE','LongInt').SetInt( 1);
 CL.AddConstantN('SSWF_WINDOW','LongInt').SetInt( 2);
 CL.AddConstantN('SSWF_DISPLAY','LongInt').SetInt( 3);
 CL.AddConstantN('SSWF_CUSTOM','LongInt').SetInt( 4);
  CL.AddTypeS('PSoundsEntryA', '^TSoundsEntryA // will not work');
  CL.AddTypeS('PSoundsEntryW', '^TSoundsEntryW // will not work');
  CL.AddTypeS('PSoundsEntry', 'PSoundsEntryA');
  CL.AddTypeS('tagSOUNDSENTRYA', 'record cbSize : UINT; dwFlags : DWORD; iFSTex'
   +'tEffect : DWORD; iFSTextEffectMSec : DWORD; iFSTextEffectColorBits : DWORD'
   +'; iFSGrafEffect : DWORD; iFSGrafEffectMSec : DWORD; iFSGrafEffectColor : D'
   +'WORD; iWindowsEffect : DWORD; iWindowsEffectMSec : DWORD; lpszWindowsEffec'
   +'tDLL : PAnsiChar; iWindowsEffectOrdinal : DWORD; end');
  CL.AddTypeS('tagSOUNDSENTRYW', 'record cbSize : UINT; dwFlags : DWORD; iFSTex'
   +'tEffect : DWORD; iFSTextEffectMSec : DWORD; iFSTextEffectColorBits : DWORD'
   +'; iFSGrafEffect : DWORD; iFSGrafEffectMSec : DWORD; iFSGrafEffectColor : D'
   +'WORD; iWindowsEffect : DWORD; iWindowsEffectMSec : DWORD; lpszWindowsEffec'
   +'tDLL : PWideChar; iWindowsEffectOrdinal : DWORD; end');
  CL.AddTypeS('tagSOUNDSENTRY', 'tagSOUNDSENTRYA');
  CL.AddTypeS('TSoundsEntryA', 'tagSOUNDSENTRYA');
  CL.AddTypeS('TSoundsEntryW', 'tagSOUNDSENTRYW');
  CL.AddTypeS('TSoundsEntry', 'TSoundsEntryA');
  CL.AddTypeS('SOUNDSENTRYA', 'tagSOUNDSENTRYA');
  CL.AddTypeS('SOUNDSENTRYW', 'tagSOUNDSENTRYW');
  CL.AddTypeS('SOUNDSENTRY', 'SOUNDSENTRYA');
 CL.AddConstantN('SSF_SOUNDSENTRYON','LongInt').SetInt( 1);
 CL.AddConstantN('SSF_AVAILABLE','LongInt').SetInt( 2);
 CL.AddConstantN('SSF_INDICATOR','LongInt').SetInt( 4);
  CL.AddTypeS('PToggleKeys', '^TToggleKeys // will not work');
  CL.AddTypeS('tagTOGGLEKEYS', 'record cbSize : UINT; dwFlags : DWORD; end');
  CL.AddTypeS('TToggleKeys', 'tagTOGGLEKEYS');
  CL.AddTypeS('TOGGLEKEYS', 'tagTOGGLEKEYS');
 CL.AddConstantN('TKF_TOGGLEKEYSON','LongInt').SetInt( 1);
 CL.AddConstantN('TKF_AVAILABLE','LongInt').SetInt( 2);
 CL.AddConstantN('TKF_HOTKEYACTIVE','LongInt').SetInt( 4);
 CL.AddConstantN('TKF_CONFIRMHOTKEY','LongInt').SetInt( 8);
 CL.AddConstantN('TKF_HOTKEYSOUND','LongWord').SetUInt( $10);
 CL.AddConstantN('TKF_INDICATOR','LongWord').SetUInt( $20);
 CL.AddDelphiFunction('Procedure SetDebugErrorLevel( dwLevel : DWORD)');
 CL.AddConstantN('SLE_ERROR','LongInt').SetInt( 1);
 CL.AddConstantN('SLE_MINORERROR','LongInt').SetInt( 2);
 CL.AddConstantN('SLE_WARNING','LongInt').SetInt( 3);
 CL.AddDelphiFunction('Procedure SetLastErrorEx( dwErrCode, dwType : DWORD)');
 CL.AddDelphiFunction('Procedure NotifyWinEvent( event : DWORD; hwnd : HWND; idObject, idChild : Cardinal)');
 CL.AddConstantN('CHILDID_SELF','LongInt').SetInt( 0);
 CL.AddConstantN('INDEXID_OBJECT','LongInt').SetInt( 0);
 CL.AddConstantN('INDEXID_CONTAINER','LongInt').SetInt( 0);
 CL.AddConstantN('OBJID_WINDOW','LongWord').SetUInt( $00000000);
 CL.AddConstantN('OBJID_SYSMENU','LongWord').SetUInt( $FFFFFFFF);
 CL.AddConstantN('OBJID_TITLEBAR','LongWord').SetUInt( $FFFFFFFE);
 CL.AddConstantN('OBJID_MENU','LongWord').SetUInt( $FFFFFFFD);
 CL.AddConstantN('OBJID_CLIENT','LongWord').SetUInt( $FFFFFFFC);
 CL.AddConstantN('OBJID_VSCROLL','LongWord').SetUInt( $FFFFFFFB);
 CL.AddConstantN('OBJID_HSCROLL','LongWord').SetUInt( $FFFFFFFA);
 CL.AddConstantN('OBJID_SIZEGRIP','LongWord').SetUInt( $FFFFFFF9);
 CL.AddConstantN('OBJID_CARET','LongWord').SetUInt( $FFFFFFF8);
 CL.AddConstantN('OBJID_CURSOR','LongWord').SetUInt( $FFFFFFF7);
 CL.AddConstantN('OBJID_ALERT','LongWord').SetUInt( $FFFFFFF6);
 CL.AddConstantN('OBJID_SOUND','LongWord').SetUInt( $FFFFFFF5);
 CL.AddConstantN('EVENT_MIN','LongWord').SetUInt( $00000001);
 CL.AddConstantN('EVENT_MAX','LongWord').SetUInt( $7FFFFFFF);
 CL.AddConstantN('EVENT_SYSTEM_SOUND','LongWord').SetUInt( $0001);
 CL.AddConstantN('EVENT_SYSTEM_ALERT','LongWord').SetUInt( $0002);
 CL.AddConstantN('EVENT_SYSTEM_FOREGROUND','LongWord').SetUInt( $0003);
 CL.AddConstantN('EVENT_SYSTEM_MENUSTART','LongWord').SetUInt( $0004);
 CL.AddConstantN('EVENT_SYSTEM_MENUEND','LongWord').SetUInt( $0005);
 CL.AddConstantN('EVENT_SYSTEM_MENUPOPUPSTART','LongWord').SetUInt( $0006);
 CL.AddConstantN('EVENT_SYSTEM_MENUPOPUPEND','LongWord').SetUInt( $0007);
 CL.AddConstantN('EVENT_SYSTEM_CAPTURESTART','LongWord').SetUInt( $0008);
 CL.AddConstantN('EVENT_SYSTEM_CAPTUREEND','LongWord').SetUInt( $0009);
 CL.AddConstantN('EVENT_SYSTEM_MOVESIZESTART','LongWord').SetUInt( $000A);
 CL.AddConstantN('EVENT_SYSTEM_MOVESIZEEND','LongWord').SetUInt( $000B);
 CL.AddConstantN('EVENT_SYSTEM_CONTEXTHELPSTART','LongWord').SetUInt( $000C);
 CL.AddConstantN('EVENT_SYSTEM_CONTEXTHELPEND','LongWord').SetUInt( $000D);
 CL.AddConstantN('EVENT_SYSTEM_DRAGDROPSTART','LongWord').SetUInt( $000E);
 CL.AddConstantN('EVENT_SYSTEM_DRAGDROPEND','LongWord').SetUInt( $000F);
 CL.AddConstantN('EVENT_SYSTEM_DIALOGSTART','LongWord').SetUInt( $0010);
 CL.AddConstantN('EVENT_SYSTEM_DIALOGEND','LongWord').SetUInt( $0011);
 CL.AddConstantN('EVENT_SYSTEM_SCROLLINGSTART','LongWord').SetUInt( $0012);
 CL.AddConstantN('EVENT_SYSTEM_SCROLLINGEND','LongWord').SetUInt( $0013);
 CL.AddConstantN('EVENT_SYSTEM_SWITCHSTART','LongWord').SetUInt( $0014);
 CL.AddConstantN('EVENT_SYSTEM_SWITCHEND','LongWord').SetUInt( $0015);
 CL.AddConstantN('EVENT_SYSTEM_MINIMIZESTART','LongWord').SetUInt( $0016);
 CL.AddConstantN('EVENT_SYSTEM_MINIMIZEEND','LongWord').SetUInt( $0017);
 CL.AddConstantN('EVENT_OBJECT_CREATE','LongWord').SetUInt( $8000);
 CL.AddConstantN('EVENT_OBJECT_DESTROY','LongWord').SetUInt( $8001);
 CL.AddConstantN('EVENT_OBJECT_SHOW','LongWord').SetUInt( $8002);
 CL.AddConstantN('EVENT_OBJECT_HIDE','LongWord').SetUInt( $8003);
 CL.AddConstantN('EVENT_OBJECT_REORDER','LongWord').SetUInt( $8004);
 CL.AddConstantN('EVENT_OBJECT_FOCUS','LongWord').SetUInt( $8005);
 CL.AddConstantN('EVENT_OBJECT_SELECTION','LongWord').SetUInt( $8006);
 CL.AddConstantN('EVENT_OBJECT_SELECTIONADD','LongWord').SetUInt( $8007);
 CL.AddConstantN('EVENT_OBJECT_SELECTIONREMOVE','LongWord').SetUInt( $8008);
 CL.AddConstantN('EVENT_OBJECT_SELECTIONWITHIN','LongWord').SetUInt( $8009);
 CL.AddConstantN('EVENT_OBJECT_STATECHANGE','LongWord').SetUInt( $800A);
 CL.AddConstantN('EVENT_OBJECT_LOCATIONCHANGE','LongWord').SetUInt( $800B);
 CL.AddConstantN('EVENT_OBJECT_NAMECHANGE','LongWord').SetUInt( $800C);
 CL.AddConstantN('EVENT_OBJECT_DESCRIPTIONCHANGE','LongWord').SetUInt( $800D);
 CL.AddConstantN('EVENT_OBJECT_VALUECHANGE','LongWord').SetUInt( $800E);
 CL.AddConstantN('EVENT_OBJECT_PARENTCHANGE','LongWord').SetUInt( $800F);
 CL.AddConstantN('EVENT_OBJECT_HELPCHANGE','LongWord').SetUInt( $8010);
 CL.AddConstantN('EVENT_OBJECT_DEFACTIONCHANGE','LongWord').SetUInt( $8011);
 CL.AddConstantN('EVENT_OBJECT_ACCELERATORCHANGE','LongWord').SetUInt( $8012);
 CL.AddConstantN('SOUND_SYSTEM_STARTUP','LongInt').SetInt( 1);
 CL.AddConstantN('SOUND_SYSTEM_SHUTDOWN','LongInt').SetInt( 2);
 CL.AddConstantN('SOUND_SYSTEM_BEEP','LongInt').SetInt( 3);
 CL.AddConstantN('SOUND_SYSTEM_ERROR','LongInt').SetInt( 4);
 CL.AddConstantN('SOUND_SYSTEM_QUESTION','LongInt').SetInt( 5);
 CL.AddConstantN('SOUND_SYSTEM_WARNING','LongInt').SetInt( 6);
 CL.AddConstantN('SOUND_SYSTEM_INFORMATION','LongInt').SetInt( 7);
 CL.AddConstantN('SOUND_SYSTEM_MAXIMIZE','LongInt').SetInt( 8);
 CL.AddConstantN('SOUND_SYSTEM_MINIMIZE','LongInt').SetInt( 9);
 CL.AddConstantN('SOUND_SYSTEM_RESTOREUP','LongInt').SetInt( 10);
 CL.AddConstantN('SOUND_SYSTEM_RESTOREDOWN','LongInt').SetInt( 11);
 CL.AddConstantN('SOUND_SYSTEM_APPSTART','LongInt').SetInt( 12);
 CL.AddConstantN('SOUND_SYSTEM_FAULT','LongInt').SetInt( 13);
 CL.AddConstantN('SOUND_SYSTEM_APPEND','LongInt').SetInt( 14);
 CL.AddConstantN('SOUND_SYSTEM_MENUCOMMAND','LongInt').SetInt( 15);
 CL.AddConstantN('SOUND_SYSTEM_MENUPOPUP','LongInt').SetInt( 16);
 CL.AddConstantN('CSOUND_SYSTEM','LongInt').SetInt( 16);
 CL.AddConstantN('ALERT_SYSTEM_INFORMATIONAL','LongInt').SetInt( 1);
 CL.AddConstantN('ALERT_SYSTEM_WARNING','LongInt').SetInt( 2);
 CL.AddConstantN('ALERT_SYSTEM_ERROR','LongInt').SetInt( 3);
 CL.AddConstantN('ALERT_SYSTEM_QUERY','LongInt').SetInt( 4);
 CL.AddConstantN('ALERT_SYSTEM_CRITICAL','LongInt').SetInt( 5);
 CL.AddConstantN('CALERT_SYSTEM','LongInt').SetInt( 6);
 CL.AddDelphiFunction('Function SetWinEventHook( eventMin, eventMax : DWORD; hmodWinEventProc : HMODULE; pfnWinEventProc : TFNWinEventProc; idProcess, idThread, dwFlags : DWORD) : THandle');
 CL.AddDelphiFunction('Function UnhookWinEvent( hWinEventHook : THandle) : BOOL');
 CL.AddConstantN('WINEVENT_OUTOFCONTEXT','LongWord').SetUInt( $0000);
 CL.AddConstantN('WINEVENT_SKIPOWNTHREAD','LongWord').SetUInt( $0001);
 CL.AddConstantN('WINEVENT_SKIPOWNPROCESS','LongWord').SetUInt( $0002);
 CL.AddConstantN('WINEVENT_INCONTEXT','LongWord').SetUInt( $0004);
  CL.AddTypeS('PGUIThreadInfo', '^TGUIThreadInfo // will not work');
  CL.AddTypeS('tagGUITHREADINFO', 'record cbSize : DWORD; flags : DWORD; hwndAc'
   +'tive : HWND; hwndFocus : HWND; hwndCapture : HWND; hwndMenuOwner : HWND; h'
   +'wndMoveSize : HWND; hwndCaret : HWND; rcCaret : TRect; end');
  CL.AddTypeS('TGUIThreadInfo', 'tagGUITHREADINFO');
 CL.AddConstantN('GUI_CARETBLINKING','LongWord').SetUInt( $00000001);
 CL.AddConstantN('GUI_INMOVESIZE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('GUI_INMENUMODE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('GUI_SYSTEMMENUMODE','LongWord').SetUInt( $00000008);
 CL.AddConstantN('GUI_POPUPMENUMODE','LongWord').SetUInt( $00000010);
 CL.AddDelphiFunction('Function GetGUIThreadInfo( idThread : DWORD; var pgui : TGUIThreadinfo) : BOOL');
 CL.AddDelphiFunction('Function GetWindowModuleFileName( hwnd : HWND; pszFileName : PChar; cchFileNameMax : UINT) : UINT');
 CL.AddDelphiFunction('Function GetWindowModuleFileNameA( hwnd : HWND; pszFileName : PAnsiChar; cchFileNameMax : UINT) : UINT');
 CL.AddDelphiFunction('Function GetWindowModuleFileNameW( hwnd : HWND; pszFileName : PWideChar; cchFileNameMax : UINT) : UINT');
 CL.AddConstantN('STATE_SYSTEM_UNAVAILABLE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('STATE_SYSTEM_SELECTED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('STATE_SYSTEM_FOCUSED','LongWord').SetUInt( $00000004);
 CL.AddConstantN('STATE_SYSTEM_PRESSED','LongWord').SetUInt( $00000008);
 CL.AddConstantN('STATE_SYSTEM_CHECKED','LongWord').SetUInt( $00000010);
 CL.AddConstantN('STATE_SYSTEM_MIXED','LongWord').SetUInt( $00000020);
 CL.AddConstantN('STATE_SYSTEM_READONLY','LongWord').SetUInt( $00000040);
 CL.AddConstantN('STATE_SYSTEM_HOTTRACKED','LongWord').SetUInt( $00000080);
 CL.AddConstantN('STATE_SYSTEM_DEFAULT','LongWord').SetUInt( $00000100);
 CL.AddConstantN('STATE_SYSTEM_EXPANDED','LongWord').SetUInt( $00000200);
 CL.AddConstantN('STATE_SYSTEM_COLLAPSED','LongWord').SetUInt( $00000400);
 CL.AddConstantN('STATE_SYSTEM_BUSY','LongWord').SetUInt( $00000800);
 CL.AddConstantN('STATE_SYSTEM_FLOATING','LongWord').SetUInt( $00001000);
 CL.AddConstantN('STATE_SYSTEM_MARQUEED','LongWord').SetUInt( $00002000);
 CL.AddConstantN('STATE_SYSTEM_ANIMATED','LongWord').SetUInt( $00004000);
 CL.AddConstantN('STATE_SYSTEM_INVISIBLE','LongWord').SetUInt( $00008000);
 CL.AddConstantN('STATE_SYSTEM_OFFSCREEN','LongWord').SetUInt( $00010000);
 CL.AddConstantN('STATE_SYSTEM_SIZEABLE','LongWord').SetUInt( $00020000);
 CL.AddConstantN('STATE_SYSTEM_MOVEABLE','LongWord').SetUInt( $00040000);
 CL.AddConstantN('STATE_SYSTEM_SELFVOICING','LongWord').SetUInt( $00080000);
 CL.AddConstantN('STATE_SYSTEM_FOCUSABLE','LongWord').SetUInt( $00100000);
 CL.AddConstantN('STATE_SYSTEM_SELECTABLE','LongWord').SetUInt( $00200000);
 CL.AddConstantN('STATE_SYSTEM_LINKED','LongWord').SetUInt( $00400000);
 CL.AddConstantN('STATE_SYSTEM_TRAVERSED','LongWord').SetUInt( $00800000);
 CL.AddConstantN('STATE_SYSTEM_MULTISELECTABLE','LongWord').SetUInt( $01000000);
 CL.AddConstantN('STATE_SYSTEM_EXTSELECTABLE','LongWord').SetUInt( $02000000);
 CL.AddConstantN('STATE_SYSTEM_ALERT_LOW','LongWord').SetUInt( $04000000);
 CL.AddConstantN('STATE_SYSTEM_ALERT_MEDIUM','LongWord').SetUInt( $08000000);
 CL.AddConstantN('STATE_SYSTEM_ALERT_HIGH','LongWord').SetUInt( $10000000);
 CL.AddConstantN('STATE_SYSTEM_VALID','LongWord').SetUInt( $1FFFFFFF);
 CL.AddConstantN('CCHILDREN_TITLEBAR','LongInt').SetInt( 5);
 CL.AddConstantN('CCHILDREN_SCROLLBAR','LongInt').SetInt( 5);
  CL.AddTypeS('PCursorInfo', '^TCursorInfo // will not work');
  CL.AddTypeS('tagCURSORINFO', 'record cbSize : DWORD; flags : DWORD; hCursor :'
   +' HCURSOR; ptScreenPos : TPoint; end');
  CL.AddTypeS('TCursorInfo', 'tagCURSORINFO');
 CL.AddConstantN('CURSOR_SHOWING','LongWord').SetUInt( $00000001);
 CL.AddDelphiFunction('Function GetCursorInfo( var pci : TCursorInfo) : BOOL');
  CL.AddTypeS('PWindowInfo', '^TWindowInfo // will not work');
  CL.AddTypeS('tagWINDOWINFO', 'record cbSize : DWORD; rcWindow : TRect; rcClie'
   +'nt : TRect; dwStyle : DWORD; dwExStyle : DWORD; dwOtherStuff : DWORD; cxWi'
   +'ndowBorders : UINT; cyWindowBorders : UINT; atomWindowType : TAtom; wCreat'
   +'orVersion : WORD; end');
  CL.AddTypeS('TWindowInfo', 'tagWINDOWINFO');
 CL.AddConstantN('WS_ACTIVECAPTION','LongWord').SetUInt( $0001);
 CL.AddDelphiFunction('Function GetWindowInfo( hwnd : HWND; var pwi : TWindowInfo) : BOOL');
  CL.AddTypeS('PTitleBarInfo', '^TTitleBarInfo // will not work');
  CL.AddTypeS('TTitleBarInfo', 'tagTITLEBARINFO');
 CL.AddDelphiFunction('Function GetTitleBarInfo( hwnd : HWND; var pti : TTitleBarInfo) : BOOL');
  CL.AddTypeS('PMenuBarInfo', '^TMenuBarInfo // will not work');
  CL.AddTypeS('tagMENUBARINFO', 'record cbSize : DWORD; rcBar : TRect; hMenu : '
   +'HMENU; hwndMenu : HWND; FocusedBits : BYTE; end');
  CL.AddTypeS('TMenuBarInfo', 'tagMENUBARINFO');
 CL.AddDelphiFunction('Function GetMenuBarInfo( hend : HWND; idObject, idItem : Longint; var pmbi : TMenuBarInfo) : BOOL');
  CL.AddTypeS('PScrollBarInfo', '^TScrollBarInfo // will not work');
  CL.AddTypeS('TScrollBarInfo', 'tagSCROLLBARINFO');
 CL.AddDelphiFunction('Function GetScrollBarInfo( hwnd : HWND; idObject : Longint; var psbi : TScrollBarInfo) : BOOL');
  CL.AddTypeS('PComboBoxInfo', '^TComboBoxInfo // will not work');
  CL.AddTypeS('tagCOMBOBOXINFO', 'record cbSize : DWORD; rcItem : TRect; rcButt'
   +'on : TRect; stateButton : DWORD; hwndCombo : HWND; hwndItem : HWND; hwndLi'
   +'st : HWND; end');
  CL.AddTypeS('TComboBoxInfo', 'tagCOMBOBOXINFO');
 CL.AddDelphiFunction('Function GetComboBoxInfo( hwndCombo : HWND; var pcbi : TComboBoxInfo) : BOOL');
 CL.AddConstantN('GA_MIC','LongInt').SetInt( 1);
 CL.AddConstantN('GA_PARENT','LongInt').SetInt( 1);
 CL.AddConstantN('GA_ROOT','LongInt').SetInt( 2);
 CL.AddConstantN('GA_ROOTOWNER','LongInt').SetInt( 3);
 CL.AddConstantN('GA_MAC','LongInt').SetInt( 4);
 CL.AddDelphiFunction('Function GetAncestor( hwnd : HWND; gaFlags : UINT) : HWND');
 CL.AddDelphiFunction('Function RealChildWindowFromPoint( hwndParent : HWND; ptParentClientCoords : TPoint) : HWND');
 CL.AddDelphiFunction('Function RealGetWindowClass( hwnd : HWND; pszType : PChar; cchType : UINT) : UINT');
 CL.AddDelphiFunction('Function RealGetWindowClassA( hwnd : HWND; pszType : PAnsiChar; cchType : UINT) : UINT');
 CL.AddDelphiFunction('Function RealGetWindowClassW( hwnd : HWND; pszType : PWideChar; cchType : UINT) : UINT');
  CL.AddTypeS('PAltTabInfo', '^TAltTabInfo // will not work');
  CL.AddTypeS('tagALTTABINFO', 'record cbSize : DWORD; cItems : Integer; cColum'
   +'ns : Integer; cRows : Integer; iColFocus : Integer; iRowFocus : Integer; c'
   +'xItem : Integer; cyItem : Integer; ptStart : TPoint; end');
  CL.AddTypeS('TAltTabInfo', 'tagALTTABINFO');
 CL.AddDelphiFunction('Function GetAltTabInfo( hwnd : HWND; iItem : Integer; var pati : TAltTabInfo; pszItemText : PChar; cchItemText : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetAltTabInfoA( hwnd : HWND; iItem : Integer; var pati : TAltTabInfo; pszItemText : PAnsiChar; cchItemText : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetAltTabInfoW( hwnd : HWND; iItem : Integer; var pati : TAltTabInfo; pszItemText : PWideChar; cchItemText : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetListBoxInfo( hwnd : HWND) : DWORD');
 CL.AddDelphiFunction('Function LockWorkStation : BOOL');
 CL.AddDelphiFunction('Function UserHandleGrantAccess( hUserHandle, hJob : THandle) : BOOL');
 CL.AddConstantN('MAX_LEADBYTES','LongInt').SetInt( 12);
 CL.AddConstantN('MAX_DEFAULTCHAR','LongInt').SetInt( 2);
 CL.AddConstantN('MB_PRECOMPOSED','LongInt').SetInt( 1);
 CL.AddConstantN('MB_COMPOSITE','LongInt').SetInt( 2);
 CL.AddConstantN('MB_USEGLYPHCHARS','LongInt').SetInt( 4);
 CL.AddConstantN('WC_DEFAULTCHECK','LongWord').SetUInt( $100);
 CL.AddConstantN('WC_COMPOSITECHECK','LongWord').SetUInt( $200);
 CL.AddConstantN('WC_DISCARDNS','LongWord').SetUInt( $10);
 CL.AddConstantN('WC_SEPCHARS','LongWord').SetUInt( $20);
 CL.AddConstantN('WC_DEFAULTCHAR','LongWord').SetUInt( $40);
 CL.AddConstantN('CT_CTYPE1','LongInt').SetInt( 1);
 CL.AddConstantN('CT_CTYPE2','LongInt').SetInt( 2);
 CL.AddConstantN('CT_CTYPE3','LongInt').SetInt( 4);
 CL.AddConstantN('C1_UPPER','LongInt').SetInt( 1);
 CL.AddConstantN('C1_LOWER','LongInt').SetInt( 2);
 CL.AddConstantN('C1_DIGIT','LongInt').SetInt( 4);
 CL.AddConstantN('C1_SPACE','LongInt').SetInt( 8);
 CL.AddConstantN('C1_PUNCT','LongWord').SetUInt( $10);
 CL.AddConstantN('C1_CNTRL','LongWord').SetUInt( $20);
 CL.AddConstantN('C1_BLANK','LongWord').SetUInt( $40);
 CL.AddConstantN('C1_XDIGIT','LongWord').SetUInt( $80);
 CL.AddConstantN('C1_ALPHA','LongWord').SetUInt( $100);
 CL.AddConstantN('C2_LEFTTORIGHT','LongInt').SetInt( 1);
 CL.AddConstantN('C2_RIGHTTOLEFT','LongInt').SetInt( 2);
 CL.AddConstantN('C2_EUROPENUMBER','LongInt').SetInt( 3);
 CL.AddConstantN('C2_EUROPESEPARATOR','LongInt').SetInt( 4);
 CL.AddConstantN('C2_EUROPETERMINATOR','LongInt').SetInt( 5);
 CL.AddConstantN('C2_ARABICNUMBER','LongInt').SetInt( 6);
 CL.AddConstantN('C2_COMMONSEPARATOR','LongInt').SetInt( 7);
 CL.AddConstantN('C2_BLOCKSEPARATOR','LongInt').SetInt( 8);
 CL.AddConstantN('C2_SEGMENTSEPARATOR','LongInt').SetInt( 9);
 CL.AddConstantN('C2_WHITESPACE','LongInt').SetInt( 10);
 CL.AddConstantN('C2_OTHERNEUTRAL','LongInt').SetInt( 11);
 CL.AddConstantN('C2_NOTAPPLICABLE','LongInt').SetInt( 0);
 CL.AddConstantN('C3_NONSPACING','LongInt').SetInt( 1);
 CL.AddConstantN('C3_DIACRITIC','LongInt').SetInt( 2);
 CL.AddConstantN('C3_VOWELMARK','LongInt').SetInt( 4);
 CL.AddConstantN('C3_SYMBOL','LongInt').SetInt( 8);
 CL.AddConstantN('C3_KATAKANA','LongWord').SetUInt( $0010);
 CL.AddConstantN('C3_HIRAGANA','LongWord').SetUInt( $0020);
 CL.AddConstantN('C3_HALFWIDTH','LongWord').SetUInt( $0040);
 CL.AddConstantN('C3_FULLWIDTH','LongWord').SetUInt( $0080);
 CL.AddConstantN('C3_IDEOGRAPH','LongWord').SetUInt( $0100);
 CL.AddConstantN('C3_KASHIDA','LongWord').SetUInt( $0200);
 CL.AddConstantN('C3_LEXICAL','LongWord').SetUInt( $0400);
 CL.AddConstantN('C3_ALPHA','LongWord').SetUInt( $8000);
 CL.AddConstantN('C3_NOTAPPLICABLE','LongInt').SetInt( 0);
 CL.AddConstantN('NORM_IGNORECASE','LongInt').SetInt( 1);
 CL.AddConstantN('NORM_IGNORENONSPACE','LongInt').SetInt( 2);
 CL.AddConstantN('NORM_IGNORESYMBOLS','LongInt').SetInt( 4);
 CL.AddConstantN('NORM_IGNOREKANATYPE','LongWord').SetUInt( $10000);
 CL.AddConstantN('NORM_IGNOREWIDTH','LongWord').SetUInt( $20000);
 CL.AddConstantN('MAP_FOLDCZONE','LongWord').SetUInt( $10);
 CL.AddConstantN('MAP_PRECOMPOSED','LongWord').SetUInt( $20);
 CL.AddConstantN('MAP_COMPOSITE','LongWord').SetUInt( $40);
 CL.AddConstantN('MAP_FOLDDIGITS','LongWord').SetUInt( $80);
 CL.AddConstantN('LCMAP_LOWERCASE','LongWord').SetUInt( $00000100);
 CL.AddConstantN('LCMAP_UPPERCASE','LongWord').SetUInt( $00000200);
 CL.AddConstantN('LCMAP_SORTKEY','LongWord').SetUInt( $00000400);
 CL.AddConstantN('LCMAP_BYTEREV','LongWord').SetUInt( $00000800);
 CL.AddConstantN('LCMAP_HIRAGANA','LongWord').SetUInt( $00100000);
 CL.AddConstantN('LCMAP_KATAKANA','LongWord').SetUInt( $00200000);
 CL.AddConstantN('LCMAP_HALFWIDTH','LongWord').SetUInt( $00400000);
 CL.AddConstantN('LCMAP_FULLWIDTH','LongWord').SetUInt( $00800000);
 CL.AddConstantN('LCMAP_LINGUISTIC_CASING','LongWord').SetUInt( $01000000);
 CL.AddConstantN('LCMAP_SIMPLIFIED_CHINESE','LongWord').SetUInt( $02000000);
 CL.AddConstantN('LCMAP_TRADITIONAL_CHINESE','LongWord').SetUInt( $04000000);
 CL.AddConstantN('LCID_INSTALLED','LongWord').SetUInt( $00000001);
 CL.AddConstantN('LCID_SUPPORTED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('LCID_ALTERNATE_SORTS','LongWord').SetUInt( $00000004);
 CL.AddConstantN('CP_INSTALLED','LongWord').SetUInt( $00000001);
 CL.AddConstantN('CP_SUPPORTED','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SORT_STRINGSORT','LongWord').SetUInt( $1000);
 CL.AddConstantN('CSTR_LESS_THAN','LongInt').SetInt( 1);
 CL.AddConstantN('CSTR_EQUAL','LongInt').SetInt( 2);
 CL.AddConstantN('CSTR_GREATER_THAN','LongInt').SetInt( 3);
 CL.AddConstantN('CP_ACP','LongInt').SetInt( 0);
 CL.AddConstantN('CP_OEMCP','LongInt').SetInt( 1);
 CL.AddConstantN('CP_MACCP','LongInt').SetInt( 2);
 CL.AddConstantN('CP_THREAD_ACP','LongInt').SetInt( 3);
 CL.AddConstantN('CP_SYMBOL','LongInt').SetInt( 42);
 CL.AddConstantN('CP_UTF7','LongInt').SetInt( 65000);
 CL.AddConstantN('CP_UTF8','LongInt').SetInt( 65001);
 CL.AddConstantN('CTRY_DEFAULT','LongInt').SetInt( 0);
 CL.AddConstantN('CTRY_AUSTRALIA','LongInt').SetInt( 61);
 CL.AddConstantN('CTRY_AUSTRIA','LongInt').SetInt( 43);
 CL.AddConstantN('CTRY_BELGIUM','LongWord').SetUInt( $20);
 CL.AddConstantN('CTRY_BRAZIL','LongInt').SetInt( 55);
 CL.AddConstantN('CTRY_CANADA','LongInt').SetInt( 2);
 CL.AddConstantN('CTRY_DENMARK','LongInt').SetInt( 45);
 CL.AddConstantN('CTRY_FINLAND','LongInt').SetInt( 358);
 CL.AddConstantN('CTRY_FRANCE','LongInt').SetInt( 33);
 CL.AddConstantN('CTRY_GERMANY','LongInt').SetInt( 49);
 CL.AddConstantN('CTRY_ICELAND','LongInt').SetInt( 354);
 CL.AddConstantN('CTRY_IRELAND','LongInt').SetInt( 353);
 CL.AddConstantN('CTRY_ITALY','LongInt').SetInt( 39);
 CL.AddConstantN('CTRY_JAPAN','LongInt').SetInt( 81);
 CL.AddConstantN('CTRY_MEXICO','LongInt').SetInt( 52);
 CL.AddConstantN('CTRY_NETHERLANDS','LongInt').SetInt( 31);
 CL.AddConstantN('CTRY_NEW_ZEALAND','LongWord').SetUInt( $40);
 CL.AddConstantN('CTRY_NORWAY','LongInt').SetInt( 47);
 CL.AddConstantN('CTRY_PORTUGAL','LongInt').SetInt( 351);
 CL.AddConstantN('CTRY_PRCHINA','LongInt').SetInt( 86);
 CL.AddConstantN('CTRY_SOUTH_KOREA','LongInt').SetInt( 82);
 CL.AddConstantN('CTRY_SPAIN','LongInt').SetInt( 34);
 CL.AddConstantN('CTRY_SWEDEN','LongInt').SetInt( 46);
 CL.AddConstantN('CTRY_SWITZERLAND','LongInt').SetInt( 41);
 CL.AddConstantN('CTRY_TAIWAN','LongInt').SetInt( 886);
 CL.AddConstantN('CTRY_UNITED_KINGDOM','LongInt').SetInt( 44);
 CL.AddConstantN('CTRY_UNITED_STATES','LongInt').SetInt( 1);
 CL.AddConstantN('LOCALE_NOUSEROVERRIDE','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('LOCALE_USE_CP_ACP','LongWord').SetUInt( $40000000);
 CL.AddConstantN('LOCALE_ILANGUAGE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('LOCALE_SLANGUAGE','LongWord').SetUInt( $00000002);
 CL.AddConstantN('LOCALE_SENGLANGUAGE','LongWord').SetUInt( $00001001);
 CL.AddConstantN('LOCALE_SABBREVLANGNAME','LongWord').SetUInt( $00000003);
 CL.AddConstantN('LOCALE_SNATIVELANGNAME','LongWord').SetUInt( $00000004);
 CL.AddConstantN('LOCALE_ICOUNTRY','LongWord').SetUInt( $00000005);
 CL.AddConstantN('LOCALE_SCOUNTRY','LongWord').SetUInt( $00000006);
 CL.AddConstantN('LOCALE_SENGCOUNTRY','LongWord').SetUInt( $00001002);
 CL.AddConstantN('LOCALE_SABBREVCTRYNAME','LongWord').SetUInt( $00000007);
 CL.AddConstantN('LOCALE_SNATIVECTRYNAME','LongWord').SetUInt( $00000008);
 CL.AddConstantN('LOCALE_IDEFAULTLANGUAGE','LongWord').SetUInt( $00000009);
 CL.AddConstantN('LOCALE_IDEFAULTCOUNTRY','LongWord').SetUInt( $0000000A);
 CL.AddConstantN('LOCALE_IDEFAULTCODEPAGE','LongWord').SetUInt( $0000000B);
 CL.AddConstantN('LOCALE_IDEFAULTANSICODEPAGE','LongWord').SetUInt( $00001004);
 CL.AddConstantN('LOCALE_IDEFAULTMACCODEPAGE','LongWord').SetUInt( $00001011);
 CL.AddConstantN('LOCALE_SLIST','LongWord').SetUInt( $0000000C);
 CL.AddConstantN('LOCALE_IMEASURE','LongWord').SetUInt( $0000000D);
 CL.AddConstantN('LOCALE_SDECIMAL','LongWord').SetUInt( $0000000E);
 CL.AddConstantN('LOCALE_STHOUSAND','LongWord').SetUInt( $0000000F);
 CL.AddConstantN('LOCALE_SGROUPING','LongWord').SetUInt( $00000010);
 CL.AddConstantN('LOCALE_IDIGITS','LongWord').SetUInt( $00000011);
 CL.AddConstantN('LOCALE_ILZERO','LongWord').SetUInt( $00000012);
 CL.AddConstantN('LOCALE_INEGNUMBER','LongWord').SetUInt( $00001010);
 CL.AddConstantN('LOCALE_SNATIVEDIGITS','LongWord').SetUInt( $00000013);
 CL.AddConstantN('LOCALE_SCURRENCY','LongWord').SetUInt( $00000014);
 CL.AddConstantN('LOCALE_SINTLSYMBOL','LongWord').SetUInt( $00000015);
 CL.AddConstantN('LOCALE_SMONDECIMALSEP','LongWord').SetUInt( $00000016);
 CL.AddConstantN('LOCALE_SMONTHOUSANDSEP','LongWord').SetUInt( $00000017);
 CL.AddConstantN('LOCALE_SMONGROUPING','LongWord').SetUInt( $00000018);
 CL.AddConstantN('LOCALE_ICURRDIGITS','LongWord').SetUInt( $00000019);
 CL.AddConstantN('LOCALE_IINTLCURRDIGITS','LongWord').SetUInt( $0000001A);
 CL.AddConstantN('LOCALE_ICURRENCY','LongWord').SetUInt( $0000001B);
 CL.AddConstantN('LOCALE_INEGCURR','LongWord').SetUInt( $0000001C);
 CL.AddConstantN('LOCALE_SDATE','LongWord').SetUInt( $0000001D);
 CL.AddConstantN('LOCALE_STIME','LongWord').SetUInt( $0000001E);
 CL.AddConstantN('LOCALE_SSHORTDATE','LongWord').SetUInt( $0000001F);
 CL.AddConstantN('LOCALE_SLONGDATE','LongWord').SetUInt( $00000020);
 CL.AddConstantN('LOCALE_STIMEFORMAT','LongWord').SetUInt( $00001003);
 CL.AddConstantN('LOCALE_IDATE','LongWord').SetUInt( $00000021);
 CL.AddConstantN('LOCALE_ILDATE','LongWord').SetUInt( $00000022);
 CL.AddConstantN('LOCALE_ITIME','LongWord').SetUInt( $00000023);
 CL.AddConstantN('LOCALE_ITIMEMARKPOSN','LongWord').SetUInt( $00001005);
 CL.AddConstantN('LOCALE_ICENTURY','LongWord').SetUInt( $00000024);
 CL.AddConstantN('LOCALE_ITLZERO','LongWord').SetUInt( $00000025);
 CL.AddConstantN('LOCALE_IDAYLZERO','LongWord').SetUInt( $00000026);
 CL.AddConstantN('LOCALE_IMONLZERO','LongWord').SetUInt( $00000027);
 CL.AddConstantN('LOCALE_S1159','LongWord').SetUInt( $00000028);
 CL.AddConstantN('LOCALE_S2359','LongWord').SetUInt( $00000029);
 CL.AddConstantN('LOCALE_ICALENDARTYPE','LongWord').SetUInt( $00001009);
 CL.AddConstantN('LOCALE_IOPTIONALCALENDAR','LongWord').SetUInt( $0000100B);
 CL.AddConstantN('LOCALE_IFIRSTDAYOFWEEK','LongWord').SetUInt( $0000100C);
 CL.AddConstantN('LOCALE_IFIRSTWEEKOFYEAR','LongWord').SetUInt( $0000100D);
 CL.AddConstantN('LOCALE_SDAYNAME1','LongWord').SetUInt( $0000002A);
 CL.AddConstantN('LOCALE_SDAYNAME2','LongWord').SetUInt( $0000002B);
 CL.AddConstantN('LOCALE_SDAYNAME3','LongWord').SetUInt( $0000002C);
 CL.AddConstantN('LOCALE_SDAYNAME4','LongWord').SetUInt( $0000002D);
 CL.AddConstantN('LOCALE_SDAYNAME5','LongWord').SetUInt( $0000002E);
 CL.AddConstantN('LOCALE_SDAYNAME6','LongWord').SetUInt( $0000002F);
 CL.AddConstantN('LOCALE_SDAYNAME7','LongWord').SetUInt( $00000030);
 CL.AddConstantN('LOCALE_SABBREVDAYNAME1','LongWord').SetUInt( $00000031);
 CL.AddConstantN('LOCALE_SABBREVDAYNAME2','LongWord').SetUInt( $00000032);
 CL.AddConstantN('LOCALE_SABBREVDAYNAME3','LongWord').SetUInt( $00000033);
 CL.AddConstantN('LOCALE_SABBREVDAYNAME4','LongWord').SetUInt( $00000034);
 CL.AddConstantN('LOCALE_SABBREVDAYNAME5','LongWord').SetUInt( $00000035);
 CL.AddConstantN('LOCALE_SABBREVDAYNAME6','LongWord').SetUInt( $00000036);
 CL.AddConstantN('LOCALE_SABBREVDAYNAME7','LongWord').SetUInt( $00000037);
 CL.AddConstantN('LOCALE_SMONTHNAME1','LongWord').SetUInt( $00000038);
 CL.AddConstantN('LOCALE_SMONTHNAME2','LongWord').SetUInt( $00000039);
 CL.AddConstantN('LOCALE_SMONTHNAME3','LongWord').SetUInt( $0000003A);
 CL.AddConstantN('LOCALE_SMONTHNAME4','LongWord').SetUInt( $0000003B);
 CL.AddConstantN('LOCALE_SMONTHNAME5','LongWord').SetUInt( $0000003C);
 CL.AddConstantN('LOCALE_SMONTHNAME6','LongWord').SetUInt( $0000003D);
 CL.AddConstantN('LOCALE_SMONTHNAME7','LongWord').SetUInt( $0000003E);
 CL.AddConstantN('LOCALE_SMONTHNAME8','LongWord').SetUInt( $0000003F);
 CL.AddConstantN('LOCALE_SMONTHNAME9','LongWord').SetUInt( $00000040);
 CL.AddConstantN('LOCALE_SMONTHNAME10','LongWord').SetUInt( $00000041);
 CL.AddConstantN('LOCALE_SMONTHNAME11','LongWord').SetUInt( $00000042);
 CL.AddConstantN('LOCALE_SMONTHNAME12','LongWord').SetUInt( $00000043);
 CL.AddConstantN('LOCALE_SMONTHNAME13','LongWord').SetUInt( $0000100E);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME1','LongWord').SetUInt( $00000044);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME2','LongWord').SetUInt( $00000045);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME3','LongWord').SetUInt( $00000046);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME4','LongWord').SetUInt( $00000047);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME5','LongWord').SetUInt( $00000048);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME6','LongWord').SetUInt( $00000049);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME7','LongWord').SetUInt( $0000004A);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME8','LongWord').SetUInt( $0000004B);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME9','LongWord').SetUInt( $0000004C);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME10','LongWord').SetUInt( $0000004D);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME11','LongWord').SetUInt( $0000004E);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME12','LongWord').SetUInt( $0000004F);
 CL.AddConstantN('LOCALE_SABBREVMONTHNAME13','LongWord').SetUInt( $0000100F);
 CL.AddConstantN('LOCALE_SPOSITIVESIGN','LongWord').SetUInt( $00000050);
 CL.AddConstantN('LOCALE_SNEGATIVESIGN','LongWord').SetUInt( $00000051);
 CL.AddConstantN('LOCALE_IPOSSIGNPOSN','LongWord').SetUInt( $00000052);
 CL.AddConstantN('LOCALE_INEGSIGNPOSN','LongWord').SetUInt( $00000053);
 CL.AddConstantN('LOCALE_IPOSSYMPRECEDES','LongWord').SetUInt( $00000054);
 CL.AddConstantN('LOCALE_IPOSSEPBYSPACE','LongWord').SetUInt( $00000055);
 CL.AddConstantN('LOCALE_INEGSYMPRECEDES','LongWord').SetUInt( $00000056);
 CL.AddConstantN('LOCALE_INEGSEPBYSPACE','LongWord').SetUInt( $00000057);
 CL.AddConstantN('LOCALE_FONTSIGNATURE','LongWord').SetUInt( $00000058);
 CL.AddConstantN('LOCALE_SISO639LANGNAME','LongWord').SetUInt( $00000059);
 CL.AddConstantN('LOCALE_SISO3166CTRYNAME','LongWord').SetUInt( $0000005A);
 CL.AddConstantN('TIME_NOMINUTESORSECONDS','LongInt').SetInt( 1);
 CL.AddConstantN('TIME_NOSECONDS','LongInt').SetInt( 2);
 CL.AddConstantN('TIME_NOTIMEMARKER','LongInt').SetInt( 4);
 CL.AddConstantN('TIME_FORCE24HOURFORMAT','LongInt').SetInt( 8);
 CL.AddConstantN('DATE_SHORTDATE','LongInt').SetInt( 1);
 CL.AddConstantN('DATE_LONGDATE','LongInt').SetInt( 2);
 CL.AddConstantN('DATE_USE_ALT_CALENDAR','LongInt').SetInt( 4);
 CL.AddConstantN('CAL_ICALINTVALUE','LongInt').SetInt( 1);
 CL.AddConstantN('CAL_SCALNAME','LongInt').SetInt( 2);
 CL.AddConstantN('CAL_IYEAROFFSETRANGE','LongInt').SetInt( 3);
 CL.AddConstantN('CAL_SERASTRING','LongInt').SetInt( 4);
 CL.AddConstantN('CAL_SSHORTDATE','LongInt').SetInt( 5);
 CL.AddConstantN('CAL_SLONGDATE','LongInt').SetInt( 6);
 CL.AddConstantN('CAL_SDAYNAME1','LongInt').SetInt( 7);
 CL.AddConstantN('CAL_SDAYNAME2','LongInt').SetInt( 8);
 CL.AddConstantN('CAL_SDAYNAME3','LongInt').SetInt( 9);
 CL.AddConstantN('CAL_SDAYNAME4','LongInt').SetInt( 10);
 CL.AddConstantN('CAL_SDAYNAME5','LongInt').SetInt( 11);
 CL.AddConstantN('CAL_SDAYNAME6','LongInt').SetInt( 12);
 CL.AddConstantN('CAL_SDAYNAME7','LongInt').SetInt( 13);
 CL.AddConstantN('CAL_SABBREVDAYNAME1','LongInt').SetInt( 14);
 CL.AddConstantN('CAL_SABBREVDAYNAME2','LongInt').SetInt( 15);
 CL.AddConstantN('CAL_SABBREVDAYNAME3','LongWord').SetUInt( $10);
 CL.AddConstantN('CAL_SABBREVDAYNAME4','LongInt').SetInt( 17);
 CL.AddConstantN('CAL_SABBREVDAYNAME5','LongInt').SetInt( 18);
 CL.AddConstantN('CAL_SABBREVDAYNAME6','LongInt').SetInt( 19);
 CL.AddConstantN('CAL_SABBREVDAYNAME7','LongInt').SetInt( 20);
 CL.AddConstantN('CAL_SMONTHNAME1','LongInt').SetInt( 21);
 CL.AddConstantN('CAL_SMONTHNAME2','LongInt').SetInt( 22);
 CL.AddConstantN('CAL_SMONTHNAME3','LongInt').SetInt( 23);
 CL.AddConstantN('CAL_SMONTHNAME4','LongInt').SetInt( 24);
 CL.AddConstantN('CAL_SMONTHNAME5','LongInt').SetInt( 25);
 CL.AddConstantN('CAL_SMONTHNAME6','LongInt').SetInt( 26);
 CL.AddConstantN('CAL_SMONTHNAME7','LongInt').SetInt( 27);
 CL.AddConstantN('CAL_SMONTHNAME8','LongInt').SetInt( 28);
 CL.AddConstantN('CAL_SMONTHNAME9','LongInt').SetInt( 29);
 CL.AddConstantN('CAL_SMONTHNAME10','LongInt').SetInt( 30);
 CL.AddConstantN('CAL_SMONTHNAME11','LongInt').SetInt( 31);
 CL.AddConstantN('CAL_SMONTHNAME12','LongWord').SetUInt( $20);
 CL.AddConstantN('CAL_SMONTHNAME13','LongInt').SetInt( 33);
 CL.AddConstantN('CAL_SABBREVMONTHNAME1','LongInt').SetInt( 34);
 CL.AddConstantN('CAL_SABBREVMONTHNAME2','LongInt').SetInt( 35);
 CL.AddConstantN('CAL_SABBREVMONTHNAME3','LongInt').SetInt( 36);
 CL.AddConstantN('CAL_SABBREVMONTHNAME4','LongInt').SetInt( 37);
 CL.AddConstantN('CAL_SABBREVMONTHNAME5','LongInt').SetInt( 38);
 CL.AddConstantN('CAL_SABBREVMONTHNAME6','LongInt').SetInt( 39);
 CL.AddConstantN('CAL_SABBREVMONTHNAME7','LongInt').SetInt( 40);
 CL.AddConstantN('CAL_SABBREVMONTHNAME8','LongInt').SetInt( 41);
 CL.AddConstantN('CAL_SABBREVMONTHNAME9','LongInt').SetInt( 42);
 CL.AddConstantN('CAL_SABBREVMONTHNAME10','LongInt').SetInt( 43);
 CL.AddConstantN('CAL_SABBREVMONTHNAME11','LongInt').SetInt( 44);
 CL.AddConstantN('CAL_SABBREVMONTHNAME12','LongInt').SetInt( 45);
 CL.AddConstantN('CAL_SABBREVMONTHNAME13','LongInt').SetInt( 46);
 CL.AddConstantN('ENUM_ALL_CALENDARS','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('CAL_GREGORIAN','LongInt').SetInt( 1);
 CL.AddConstantN('CAL_GREGORIAN_US','LongInt').SetInt( 2);
 CL.AddConstantN('CAL_JAPAN','LongInt').SetInt( 3);
 CL.AddConstantN('CAL_TAIWAN','LongInt').SetInt( 4);
 CL.AddConstantN('CAL_KOREA','LongInt').SetInt( 5);
 CL.AddConstantN('CAL_HIJRI','LongInt').SetInt( 6);
 CL.AddConstantN('CAL_THAI','LongInt').SetInt( 7);
 CL.AddConstantN('CAL_HEBREW','LongInt').SetInt( 8);
  CL.AddTypeS('LCTYPE', 'DWORD');
  CL.AddTypeS('CALTYPE', 'DWORD');
  CL.AddTypeS('CALID', 'DWORD');
  CL.AddTypeS('PCPInfo', '^TCPInfo // will not work');
  CL.AddTypeS('TCPInfo', '_cpinfo');
  CL.AddTypeS('CPINFO', '_cpinfo');
  CL.AddTypeS('PNumberFmtA', '^TNumberFmtA // will not work');
  CL.AddTypeS('PNumberFmtW', '^TNumberFmtW // will not work');
  CL.AddTypeS('PNumberFmt', 'PNumberFmtA');
  CL.AddTypeS('_numberfmtA', 'record NumDigits : UINT; LeadingZero : UINT; Grou'
   +'ping : UINT; lpDecimalSep : PAnsiChar; lpThousandSep : PAnsiChar; Negative'
   +'Order : UINT; end');
  CL.AddTypeS('_numberfmtW', 'record NumDigits : UINT; LeadingZero : UINT; Grou'
   +'ping : UINT; lpDecimalSep : PWideChar; lpThousandSep : PWideChar; Negative'
   +'Order : UINT; end');
  CL.AddTypeS('_numberfmt', '_numberfmtA');
  CL.AddTypeS('TNumberFmtA', '_numberfmtA');
  CL.AddTypeS('TNumberFmtW', '_numberfmtW');
  CL.AddTypeS('TNumberFmt', 'TNumberFmtA');
  CL.AddTypeS('NUMBERFMTA', '_numberfmtA');
  CL.AddTypeS('NUMBERFMTW', '_numberfmtW');
  CL.AddTypeS('NUMBERFMT', 'NUMBERFMTA');
  CL.AddTypeS('PCurrencyFmtA', '^TCurrencyFmtA // will not work');
  CL.AddTypeS('PCurrencyFmtW', '^TCurrencyFmtW // will not work');
  CL.AddTypeS('PCurrencyFmt', 'PCurrencyFmtA');
  CL.AddTypeS('_currencyfmtA', 'record NumDigits : UINT; LeadingZero : UINT; Gr'
   +'ouping : UINT; lpDecimalSep : PAnsiChar; lpThousandSep : PAnsiChar; Negati'
   +'veOrder : UINT; PositiveOrder : UINT; lpCurrencySymbol : PAnsiChar; end');
  CL.AddTypeS('_currencyfmtW', 'record NumDigits : UINT; LeadingZero : UINT; Gr'
   +'ouping : UINT; lpDecimalSep : PWideChar; lpThousandSep : PWideChar; Negati'
   +'veOrder : UINT; PositiveOrder : UINT; lpCurrencySymbol : PWideChar; end');
  CL.AddTypeS('_currencyfmt', '_currencyfmtA');
  CL.AddTypeS('TCurrencyFmtA', '_currencyfmtA');
  CL.AddTypeS('TCurrencyFmtW', '_currencyfmtW');
  CL.AddTypeS('TCurrencyFmt', 'TCurrencyFmtA');
  CL.AddTypeS('CURRENCYFMTA', '_currencyfmtA');
  CL.AddTypeS('CURRENCYFMTW', '_currencyfmtW');
  CL.AddTypeS('CURRENCYFMT', 'CURRENCYFMTA');
  CL.AddTypeS('TFNLocaleEnumProc', 'TFarProc');
  CL.AddTypeS('TFNCodepageEnumProc', 'TFarProc');
  CL.AddTypeS('TFNDateFmtEnumProc', 'TFarProc');
  CL.AddTypeS('TFNTimeFmtEnumProc', 'TFarProc');
  CL.AddTypeS('TFNCalInfoEnumProc', 'TFarProc');
 CL.AddDelphiFunction('Function IsValidCodePage( CodePage : UINT) : BOOL');
 CL.AddDelphiFunction('Function GetACP : UINT');
 CL.AddDelphiFunction('Function GetOEMCP : UINT');
 CL.AddDelphiFunction('Function GetCPInfo( CodePage : UINT; var lpCPInfo : TCPInfo) : BOOL');
 CL.AddDelphiFunction('Function IsDBCSLeadByte( TestChar : Byte) : BOOL');
 CL.AddDelphiFunction('Function IsDBCSLeadByteEx( CodePage : UINT; TestChar : Byte) : BOOL');
 CL.AddDelphiFunction('Function MultiByteToWideChar( CodePage : UINT; dwFlags : DWORD; const lpMultiByteStr : LPCSTR; cchMultiByte : Integer; lpWideCharStr : LPWSTR; cchWideChar : Integer) : Integer');
 CL.AddDelphiFunction('Function WideCharToMultiByte( CodePage : UINT; dwFlags : DWORD; lpWideCharStr : LPWSTR; cchWideChar : Integer; lpMultiByteStr : LPSTR; cchMultiByte : Integer; lpDefaultChar : LPCSTR; lpUsedDefaultChar : PBOOL) : Integer');
 CL.AddDelphiFunction('Function CompareString( Locale : LCID; dwCmpFlags : DWORD; lpString1 : PChar; cchCount1 : Integer; lpString2 : PChar; cchCount2 : Integer) : Integer');
 CL.AddDelphiFunction('Function CompareStringA( Locale : LCID; dwCmpFlags : DWORD; lpString1 : PAnsiChar; cchCount1 : Integer; lpString2 : PAnsiChar; cchCount2 : Integer) : Integer');
 CL.AddDelphiFunction('Function CompareStringW( Locale : LCID; dwCmpFlags : DWORD; lpString1 : PWideChar; cchCount1 : Integer; lpString2 : PWideChar; cchCount2 : Integer) : Integer');
 CL.AddDelphiFunction('Function LCMapString( Locale : LCID; dwMapFlags : DWORD; lpSrcStr : PChar; cchSrc : Integer; lpDestStr : PChar; cchDest : Integer) : Integer');
 CL.AddDelphiFunction('Function LCMapStringA( Locale : LCID; dwMapFlags : DWORD; lpSrcStr : PAnsiChar; cchSrc : Integer; lpDestStr : PAnsiChar; cchDest : Integer) : Integer');
 CL.AddDelphiFunction('Function LCMapStringW( Locale : LCID; dwMapFlags : DWORD; lpSrcStr : PWideChar; cchSrc : Integer; lpDestStr : PWideChar; cchDest : Integer) : Integer');
 CL.AddDelphiFunction('Function GetLocaleInfo( Locale : LCID; LCType : LCTYPE; lpLCData : PChar; cchData : Integer) : Integer');
 CL.AddDelphiFunction('Function GetLocaleInfoA( Locale : LCID; LCType : LCTYPE; lpLCData : PAnsiChar; cchData : Integer) : Integer');
 CL.AddDelphiFunction('Function GetLocaleInfoW( Locale : LCID; LCType : LCTYPE; lpLCData : PWideChar; cchData : Integer) : Integer');
 CL.AddDelphiFunction('Function SetLocaleInfo( Locale : LCID; LCType : LCTYPE; lpLCData : PChar) : BOOL');
 CL.AddDelphiFunction('Function SetLocaleInfoA( Locale : LCID; LCType : LCTYPE; lpLCData : PAnsiChar) : BOOL');
 CL.AddDelphiFunction('Function SetLocaleInfoW( Locale : LCID; LCType : LCTYPE; lpLCData : PWideChar) : BOOL');
 CL.AddDelphiFunction('Function GetTimeFormat( Locale : LCID; dwFlags : DWORD; lpTime : PSystemTime; lpFormat : PChar; lpTimeStr : PChar; cchTime : Integer) : Integer');
 CL.AddDelphiFunction('Function GetTimeFormatA( Locale : LCID; dwFlags : DWORD; lpTime : PSystemTime; lpFormat : PAnsiChar; lpTimeStr : PAnsiChar; cchTime : Integer) : Integer');
 CL.AddDelphiFunction('Function GetTimeFormatW( Locale : LCID; dwFlags : DWORD; lpTime : PSystemTime; lpFormat : PWideChar; lpTimeStr : PWideChar; cchTime : Integer) : Integer');
 CL.AddDelphiFunction('Function GetDateFormat( Locale : LCID; dwFlags : DWORD; lpDate : PSystemTime; lpFormat : PChar; lpDateStr : PChar; cchDate : Integer) : Integer');
 CL.AddDelphiFunction('Function GetDateFormatA( Locale : LCID; dwFlags : DWORD; lpDate : PSystemTime; lpFormat : PAnsiChar; lpDateStr : PAnsiChar; cchDate : Integer) : Integer');
 CL.AddDelphiFunction('Function GetDateFormatW( Locale : LCID; dwFlags : DWORD; lpDate : PSystemTime; lpFormat : PWideChar; lpDateStr : PWideChar; cchDate : Integer) : Integer');
 CL.AddDelphiFunction('Function GetNumberFormat( Locale : LCID; dwFlags : DWORD; lpValue : PChar; lpFormat : PNumberFmt; lpNumberStr : PChar; cchNumber : Integer) : Integer');
 CL.AddDelphiFunction('Function GetNumberFormatA( Locale : LCID; dwFlags : DWORD; lpValue : PAnsiChar; lpFormat : PNumberFmtA; lpNumberStr : PAnsiChar; cchNumber : Integer) : Integer');
 CL.AddDelphiFunction('Function GetNumberFormatW( Locale : LCID; dwFlags : DWORD; lpValue : PWideChar; lpFormat : PNumberFmtW; lpNumberStr : PWideChar; cchNumber : Integer) : Integer');
 CL.AddDelphiFunction('Function GetCurrencyFormat( Locale : LCID; dwFlags : DWORD; lpValue : PChar; lpFormat : PCurrencyFmt; lpCurrencyStr : PChar; cchCurrency : Integer) : Integer');
 CL.AddDelphiFunction('Function GetCurrencyFormatA( Locale : LCID; dwFlags : DWORD; lpValue : PAnsiChar; lpFormat : PCurrencyFmtA; lpCurrencyStr : PAnsiChar; cchCurrency : Integer) : Integer');
 CL.AddDelphiFunction('Function GetCurrencyFormatW( Locale : LCID; dwFlags : DWORD; lpValue : PWideChar; lpFormat : PCurrencyFmtW; lpCurrencyStr : PWideChar; cchCurrency : Integer) : Integer');
 CL.AddDelphiFunction('Function EnumCalendarInfo( lpCalInfoEnumProc : TFNCalInfoEnumProc; Locale : LCID; Calendar : CALID; CalType : CALTYPE) : BOOL');
 CL.AddDelphiFunction('Function EnumCalendarInfoA( lpCalInfoEnumProc : TFNCalInfoEnumProc; Locale : LCID; Calendar : CALID; CalType : CALTYPE) : BOOL');
 CL.AddDelphiFunction('Function EnumCalendarInfoW( lpCalInfoEnumProc : TFNCalInfoEnumProc; Locale : LCID; Calendar : CALID; CalType : CALTYPE) : BOOL');
 CL.AddDelphiFunction('Function EnumTimeFormats( lpTimeFmtEnumProc : TFNTimeFmtEnumProc; Locale : LCID; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumTimeFormatsA( lpTimeFmtEnumProc : TFNTimeFmtEnumProc; Locale : LCID; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumTimeFormatsW( lpTimeFmtEnumProc : TFNTimeFmtEnumProc; Locale : LCID; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumDateFormats( lpDateFmtEnumProc : TFNDateFmtEnumProc; Locale : LCID; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumDateFormatsA( lpDateFmtEnumProc : TFNDateFmtEnumProc; Locale : LCID; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumDateFormatsW( lpDateFmtEnumProc : TFNDateFmtEnumProc; Locale : LCID; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function IsValidLocale( Locale : LCID; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function ConvertDefaultLocale( Locale : LCID) : LCID');
 CL.AddDelphiFunction('Function GetThreadLocale : LCID');
 CL.AddDelphiFunction('Function SetThreadLocale( Locale : LCID) : BOOL');
 CL.AddDelphiFunction('Function GetSystemDefaultLangID : LANGID');
 CL.AddDelphiFunction('Function GetUserDefaultLangID : LANGID');
 CL.AddDelphiFunction('Function GetSystemDefaultLCID : LCID');
 CL.AddDelphiFunction('Function GetUserDefaultLCID : LCID');
 CL.AddDelphiFunction('Function GetStringTypeEx( Locale : LCID; dwInfoType : DWORD; lpSrcStr : PChar; cchSrc : Integer; var lpCharType) : BOOL');
 CL.AddDelphiFunction('Function GetStringTypeExA( Locale : LCID; dwInfoType : DWORD; lpSrcStr : PAnsiChar; cchSrc : Integer; var lpCharType) : BOOL');
 CL.AddDelphiFunction('Function GetStringTypeExW( Locale : LCID; dwInfoType : DWORD; lpSrcStr : PWideChar; cchSrc : Integer; var lpCharType) : BOOL');
 CL.AddDelphiFunction('Function GetStringTypeA( Locale : LCID; dwInfoType : DWORD; const lpSrcStr : LPCSTR; cchSrc : BOOL; var lpCharType : Word) : BOOL');
 CL.AddDelphiFunction('Function GetStringTypeW( dwInfoType : DWORD; const lpSrcStr : WCHAR; cchSrc : BOOL; var lpCharType : Word) : BOOL');
 CL.AddDelphiFunction('Function FoldString( dwMapFlags : DWORD; lpSrcStr : PChar; cchSrc : Integer; lpDestStr : PChar; cchDest : Integer) : Integer');
 CL.AddDelphiFunction('Function FoldStringA( dwMapFlags : DWORD; lpSrcStr : PAnsiChar; cchSrc : Integer; lpDestStr : PAnsiChar; cchDest : Integer) : Integer');
 CL.AddDelphiFunction('Function FoldStringW( dwMapFlags : DWORD; lpSrcStr : PWideChar; cchSrc : Integer; lpDestStr : PWideChar; cchDest : Integer) : Integer');
 CL.AddDelphiFunction('Function EnumSystemLocales( lpLocaleEnumProc : TFNLocaleEnumProc; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumSystemLocalesA( lpLocaleEnumProc : TFNLocaleEnumProc; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumSystemLocalesW( lpLocaleEnumProc : TFNLocaleEnumProc; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumSystemCodePages( lpCodePageEnumProc : TFNCodepageEnumProc; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumSystemCodePagesA( lpCodePageEnumProc : TFNCodepageEnumProc; dwFlags : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumSystemCodePagesW( lpCodePageEnumProc : TFNCodepageEnumProc; dwFlags : DWORD) : BOOL');
  CL.AddTypeS('PCoord', '^TCoord // will not work');
  CL.AddTypeS('_COORD', 'record X : SHORT; Y : SHORT; end');
  CL.AddTypeS('TCoord', '_COORD');
  CL.AddTypeS('COORD', '_COORD');
  CL.AddTypeS('PSmallRect', '^TSmallRect // will not work');
  CL.AddTypeS('_SMALL_RECT', 'record Left : SHORT; Top : SHORT; Right : SHORT; '
   +'Bottom : SHORT; end');
  CL.AddTypeS('TSmallRect', '_SMALL_RECT');
  CL.AddTypeS('SMALL_RECT', '_SMALL_RECT');
  CL.AddTypeS('PKeyEventRecord', '^TKeyEventRecord // will not work');
  CL.AddTypeS('_KEY_EVENT_RECORD', 'record bKeyDown : BOOL; wRepeatCount : Word'
   +'; wVirtualKeyCode : Word; wVirtualScanCode : Word; end');
  CL.AddTypeS('TKeyEventRecord', '_KEY_EVENT_RECORD');
  CL.AddTypeS('KEY_EVENT_RECORD', '_KEY_EVENT_RECORD');
 CL.AddConstantN('RIGHT_ALT_PRESSED','LongInt').SetInt( 1);
 CL.AddConstantN('LEFT_ALT_PRESSED','LongInt').SetInt( 2);
 CL.AddConstantN('RIGHT_CTRL_PRESSED','LongInt').SetInt( 4);
 CL.AddConstantN('LEFT_CTRL_PRESSED','LongInt').SetInt( 8);
 CL.AddConstantN('SHIFT_PRESSED','LongWord').SetUInt( $10);
 CL.AddConstantN('NUMLOCK_ON','LongWord').SetUInt( $20);
 CL.AddConstantN('SCROLLLOCK_ON','LongWord').SetUInt( $40);
 CL.AddConstantN('CAPSLOCK_ON','LongWord').SetUInt( $80);
 CL.AddConstantN('ENHANCED_KEY','LongWord').SetUInt( $100);
  CL.AddTypeS('PMouseEventRecord', '^TMouseEventRecord // will not work');
  CL.AddTypeS('_MOUSE_EVENT_RECORD', 'record dwMousePosition : TCoord; dwButton'
   +'State : DWORD; dwControlKeyState : DWORD; dwEventFlags : DWORD; end');
  CL.AddTypeS('TMouseEventRecord', '_MOUSE_EVENT_RECORD');
  CL.AddTypeS('MOUSE_EVENT_RECORD', '_MOUSE_EVENT_RECORD');
 CL.AddConstantN('FROM_LEFT_1ST_BUTTON_PRESSED','LongInt').SetInt( 1);
 CL.AddConstantN('RIGHTMOST_BUTTON_PRESSED','LongInt').SetInt( 2);
 CL.AddConstantN('FROM_LEFT_2ND_BUTTON_PRESSED','LongInt').SetInt( 4);
 CL.AddConstantN('FROM_LEFT_3RD_BUTTON_PRESSED','LongInt').SetInt( 8);
 CL.AddConstantN('FROM_LEFT_4TH_BUTTON_PRESSED','LongWord').SetUInt( $10);
 CL.AddConstantN('MOUSE_MOVED','LongInt').SetInt( 1);
 CL.AddConstantN('DOUBLE_CLICK','LongInt').SetInt( 2);
  CL.AddTypeS('PWindowBufferSizeRecord', '^TWindowBufferSizeRecord // will not '
   +'work');
  CL.AddTypeS('_WINDOW_BUFFER_SIZE_RECORD', 'record dwSize : TCoord; end');
  CL.AddTypeS('TWindowBufferSizeRecord', '_WINDOW_BUFFER_SIZE_RECORD');
  CL.AddTypeS('WINDOW_BUFFER_SIZE_RECORD', '_WINDOW_BUFFER_SIZE_RECORD');
  CL.AddTypeS('PMenuEventRecord', '^TMenuEventRecord // will not work');
  CL.AddTypeS('_MENU_EVENT_RECORD', 'record dwCommandId : UINT; end');
  CL.AddTypeS('TMenuEventRecord', '_MENU_EVENT_RECORD');
  CL.AddTypeS('MENU_EVENT_RECORD', '_MENU_EVENT_RECORD');
  CL.AddTypeS('PFocusEventRecord', '^TFocusEventRecord // will not work');
  CL.AddTypeS('_FOCUS_EVENT_RECORD', 'record bSetFocus : BOOL; end');
  CL.AddTypeS('TFocusEventRecord', '_FOCUS_EVENT_RECORD');
  CL.AddTypeS('FOCUS_EVENT_RECORD', '_FOCUS_EVENT_RECORD');
  CL.AddTypeS('PInputRecord', '^TInputRecord // will not work');
  CL.AddTypeS('_INPUT_RECORD', 'record EventType : Word; Reserved : Word; end');
  CL.AddTypeS('TInputRecord', '_INPUT_RECORD');
  CL.AddTypeS('INPUT_RECORD', '_INPUT_RECORD');
 CL.AddConstantN('KEY_EVENT','LongInt').SetInt( 1);
 CL.AddConstantN('_MOUSE_EVENT','LongInt').SetInt( 2);
 CL.AddConstantN('WINDOW_BUFFER_SIZE_EVENT','LongInt').SetInt( 4);
 CL.AddConstantN('MENU_EVENT','LongInt').SetInt( 8);
 CL.AddConstantN('FOCUS_EVENT','LongWord').SetUInt( $10);
 CL.AddConstantN('FOREGROUND_BLUE','LongInt').SetInt( 1);
 CL.AddConstantN('FOREGROUND_GREEN','LongInt').SetInt( 2);
 CL.AddConstantN('FOREGROUND_RED','LongInt').SetInt( 4);
 CL.AddConstantN('FOREGROUND_INTENSITY','LongInt').SetInt( 8);
 CL.AddConstantN('BACKGROUND_BLUE','LongWord').SetUInt( $10);
 CL.AddConstantN('BACKGROUND_GREEN','LongWord').SetUInt( $20);
 CL.AddConstantN('BACKGROUND_RED','LongWord').SetUInt( $40);
 CL.AddConstantN('BACKGROUND_INTENSITY','LongWord').SetUInt( $80);
  CL.AddTypeS('PConsoleScreenBufferInfo', '^TConsoleScreenBufferInfo // will no'
   +'t work');
  CL.AddTypeS('_CONSOLE_SCREEN_BUFFER_INFO', 'record dwSize : TCoord; dwCursorP'
   +'osition : TCoord; wAttributes : Word; srWindow : TSmallRect; dwMaximumWind'
   +'owSize : TCoord; end');
  CL.AddTypeS('TConsoleScreenBufferInfo', '_CONSOLE_SCREEN_BUFFER_INFO');
  CL.AddTypeS('CONSOLE_SCREEN_BUFFER_INFO', '_CONSOLE_SCREEN_BUFFER_INFO');
  CL.AddTypeS('PConsoleCursorInfo', '^TConsoleCursorInfo // will not work');
  CL.AddTypeS('_CONSOLE_CURSOR_INFO', 'record dwSize : DWORD; bVisible : BOOL; '
   +'end');
  CL.AddTypeS('TConsoleCursorInfo', '_CONSOLE_CURSOR_INFO');
  CL.AddTypeS('CONSOLE_CURSOR_INFO', '_CONSOLE_CURSOR_INFO');
  CL.AddTypeS('TFNHandlerRoutine', 'TFarProc');
 CL.AddConstantN('CTRL_C_EVENT','LongInt').SetInt( 0);
 CL.AddConstantN('CTRL_BREAK_EVENT','LongInt').SetInt( 1);
 CL.AddConstantN('CTRL_CLOSE_EVENT','LongInt').SetInt( 2);
 CL.AddConstantN('CTRL_LOGOFF_EVENT','LongInt').SetInt( 5);
 CL.AddConstantN('CTRL_SHUTDOWN_EVENT','LongInt').SetInt( 6);
 CL.AddConstantN('ENABLE_PROCESSED_INPUT','LongInt').SetInt( 1);
 CL.AddConstantN('ENABLE_LINE_INPUT','LongInt').SetInt( 2);
 CL.AddConstantN('ENABLE_ECHO_INPUT','LongInt').SetInt( 4);
 CL.AddConstantN('ENABLE_WINDOW_INPUT','LongInt').SetInt( 8);
 CL.AddConstantN('ENABLE_MOUSE_INPUT','LongWord').SetUInt( $10);
 CL.AddConstantN('ENABLE_PROCESSED_OUTPUT','LongInt').SetInt( 1);
 CL.AddConstantN('ENABLE_WRAP_AT_EOL_OUTPUT','LongInt').SetInt( 2);
 CL.AddDelphiFunction('Function GetFileVersionInfoSize( lptstrFilename : PChar; var lpdwHandle : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetFileVersionInfoSizeA( lptstrFilename : PAnsiChar; var lpdwHandle : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetFileVersionInfoSizeW( lptstrFilename : PWideChar; var lpdwHandle : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetFileVersionInfo( lptstrFilename : PChar; dwHandle, dwLen : DWORD; lpData : Pointer) : BOOL');
 CL.AddDelphiFunction('Function GetFileVersionInfoA( lptstrFilename : PAnsiChar; dwHandle, dwLen : DWORD; lpData : Pointer) : BOOL');
 CL.AddDelphiFunction('Function GetFileVersionInfoW( lptstrFilename : PWideChar; dwHandle, dwLen : DWORD; lpData : Pointer) : BOOL');
 CL.AddDelphiFunction('Function VerLanguageName( wLang : DWORD; szLang : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function VerLanguageNameA( wLang : DWORD; szLang : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function VerLanguageNameW( wLang : DWORD; szLang : PWideChar; nSize : DWORD) : DWORD');
  CL.AddTypeS('REGSAM', 'ACCESS_MASK');
  CL.AddTypeS('HKEY', 'LongWord');
  CL.AddTypeS('PHKEY', '^HKEY // will not work');
 CL.AddConstantN('HKEY_CLASSES_ROOT','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('HKEY_CURRENT_USER','LongWord').SetUInt( DWORD ( $80000001 ));
 CL.AddConstantN('HKEY_LOCAL_MACHINE','LongWord').SetUInt( DWORD ( $80000002 ));
 CL.AddConstantN('HKEY_USERS','LongWord').SetUInt( DWORD ( $80000003 ));
 CL.AddConstantN('HKEY_PERFORMANCE_DATA','LongWord').SetUInt( DWORD ( $80000004 ));
 CL.AddConstantN('HKEY_CURRENT_CONFIG','LongWord').SetUInt( DWORD ( $80000005 ));
 CL.AddConstantN('HKEY_DYN_DATA','LongWord').SetUInt( DWORD ( $80000006 ));
 CL.AddConstantN('PROVIDER_KEEPS_VALUE_LENGTH','LongInt').SetInt( 1);
  CL.AddTypeS('PValContext', '^TValContext // will not work');
  CL.AddTypeS('val_context', 'record valuelen : Integer; value_context : Pointe'
   +'r; val_buff_ptr : Pointer; end');
  CL.AddTypeS('TValContext', 'val_context');
  CL.AddTypeS('PPValueA', '^TPValueA // will not work');
  CL.AddTypeS('PPValueW', '^TPValueW // will not work');
  CL.AddTypeS('PPValue', 'PPValueA');
  CL.AddTypeS('pvalueA', 'record pv_valuename : PAnsiChar; pv_valuelen : BOOL; '
   +'pv_value_context : Pointer; pv_type : DWORD; end');
  CL.AddTypeS('pvalueW', 'record pv_valuename : PWideChar; pv_valuelen : BOOL; '
   +'pv_value_context : Pointer; pv_type : DWORD; end');
  CL.AddTypeS('pvalue', 'pvalueA');
  CL.AddTypeS('TPValueA', 'pvalueA');
  CL.AddTypeS('TPValueW', 'pvalueW');
  CL.AddTypeS('TPValue', 'TPValueA');
  CL.AddTypeS('TFNQueryHandler', 'TFarProc');
  CL.AddTypeS('PFNQueryHandler', '^TFNQueryHandler // will not work');
  CL.AddTypeS('PProviderInfo', '^TProviderInfo // will not work');
  CL.AddTypeS('provider_info', 'record pi_R0_1val : PFNQueryHandler; pi_R0_allv'
   +'als : PFNQueryHandler; pi_R3_1val : PFNQueryHandler; pi_R3_allvals : PFNQu'
   +'eryHandler; pi_flags : DWORD; pi_key_context : Pointer; end');
  CL.AddTypeS('TProviderInfo', 'provider_info');
  CL.AddTypeS('REG_PROVIDER', 'provider_info');
  CL.AddTypeS('TRegProvider', 'TProviderInfo');
  CL.AddTypeS('PProvider', 'PProviderInfo');
  CL.AddTypeS('PValueEntA', '^TValueEntA // will not work');
  CL.AddTypeS('PValueEntW', '^TValueEntW // will not work');
  CL.AddTypeS('PValueEnt', 'PValueEntA');
  CL.AddTypeS('value_entA', 'record ve_valuename : PAnsiChar; ve_valuelen : DWO'
   +'RD; ve_valueptr : DWORD; ve_type : DWORD; end');
  CL.AddTypeS('value_entW', 'record ve_valuename : PWideChar; ve_valuelen : DWO'
   +'RD; ve_valueptr : DWORD; ve_type : DWORD; end');
  CL.AddTypeS('value_ent', 'value_entA');
  CL.AddTypeS('TValueEntA', 'value_entA');
  CL.AddTypeS('TValueEntW', 'value_entW');
  CL.AddTypeS('TValueEnt', 'TValueEntA');
  CL.AddTypeS('VALENTA', 'value_entA');
  CL.AddTypeS('VALENTW', 'value_entW');
  CL.AddTypeS('VALENT', 'VALENTA');
  CL.AddTypeS('TValEnt', 'TValueEnt');
  CL.AddTypeS('PValEnt', 'PValueEnt');
 CL.AddConstantN('WNNC_NET_MSNET','LongWord').SetUInt( $00010000);
 CL.AddConstantN('WNNC_NET_LANMAN','LongWord').SetUInt( $00020000);
 CL.AddConstantN('WNNC_NET_NETWARE','LongWord').SetUInt( $00030000);
 CL.AddConstantN('WNNC_NET_VINES','LongWord').SetUInt( $00040000);
 CL.AddConstantN('WNNC_NET_10NET','LongWord').SetUInt( $00050000);
 CL.AddConstantN('WNNC_NET_LOCUS','LongWord').SetUInt( $00060000);
 CL.AddConstantN('WNNC_NET_SUN_PC_NFS','LongWord').SetUInt( $00070000);
 CL.AddConstantN('WNNC_NET_LANSTEP','LongWord').SetUInt( $00080000);
 CL.AddConstantN('WNNC_NET_9TILES','LongWord').SetUInt( $00090000);
 CL.AddConstantN('WNNC_NET_LANTASTIC','LongWord').SetUInt( $000A0000);
 CL.AddConstantN('WNNC_NET_AS400','LongWord').SetUInt( $000B0000);
 CL.AddConstantN('WNNC_NET_FTP_NFS','LongWord').SetUInt( $000C0000);
 CL.AddConstantN('WNNC_NET_PATHWORKS','LongWord').SetUInt( $000D0000);
 CL.AddConstantN('WNNC_NET_LIFENET','LongWord').SetUInt( $000E0000);
 CL.AddConstantN('WNNC_NET_POWERLAN','LongWord').SetUInt( $000F0000);
 CL.AddConstantN('WNNC_NET_BWNFS','LongWord').SetUInt( $00100000);
 CL.AddConstantN('WNNC_NET_COGENT','LongWord').SetUInt( $00110000);
 CL.AddConstantN('WNNC_NET_FARALLON','LongWord').SetUInt( $00120000);
 CL.AddConstantN('WNNC_NET_APPLETALK','LongWord').SetUInt( $00130000);
 CL.AddConstantN('WNNC_NET_INTERGRAPH','LongWord').SetUInt( $00140000);
 CL.AddConstantN('WNNC_NET_SYMFONET','LongWord').SetUInt( $00150000);
 CL.AddConstantN('WNNC_NET_CLEARCASE','LongWord').SetUInt( $00160000);
 CL.AddConstantN('RESOURCE_CONNECTED','LongInt').SetInt( 1);
 CL.AddConstantN('RESOURCE_GLOBALNET','LongInt').SetInt( 2);
 CL.AddConstantN('RESOURCE_REMEMBERED','LongInt').SetInt( 3);
 CL.AddConstantN('RESOURCE_RECENT','LongInt').SetInt( 4);
 CL.AddConstantN('RESOURCE_CONTEXT','LongInt').SetInt( 5);
 CL.AddConstantN('RESOURCETYPE_ANY','LongInt').SetInt( 0);
 CL.AddConstantN('RESOURCETYPE_DISK','LongInt').SetInt( 1);
 CL.AddConstantN('RESOURCETYPE_PRINT','LongInt').SetInt( 2);
 CL.AddConstantN('RESOURCETYPE_RESERVED','LongInt').SetInt( 8);
 CL.AddConstantN('RESOURCETYPE_UNKNOWN','LongWord').SetUInt( DWORD ( $FFFFFFFF ));
 CL.AddConstantN('RESOURCEUSAGE_CONNECTABLE','LongInt').SetInt( 1);
 CL.AddConstantN('RESOURCEUSAGE_CONTAINER','LongInt').SetInt( 2);
 CL.AddConstantN('RESOURCEUSAGE_NOLOCALDEVICE','LongInt').SetInt( 4);
 CL.AddConstantN('RESOURCEUSAGE_SIBLING','LongInt').SetInt( 8);
 CL.AddConstantN('RESOURCEUSAGE_ATTACHED','LongWord').SetUInt( $00000010);
 CL.AddConstantN('RESOURCEUSAGE_RESERVED','LongWord').SetUInt( DWORD ( $80000000 ));
 CL.AddConstantN('RESOURCEDISPLAYTYPE_GENERIC','LongWord').SetUInt( $00000000);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_DOMAIN','LongWord').SetUInt( $00000001);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_SERVER','LongWord').SetUInt( $00000002);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_SHARE','LongWord').SetUInt( $00000003);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_FILE','LongWord').SetUInt( $00000004);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_GROUP','LongWord').SetUInt( $00000005);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_NETWORK','LongWord').SetUInt( $00000006);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_ROOT','LongWord').SetUInt( $00000007);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_SHAREADMIN','LongWord').SetUInt( $00000008);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_DIRECTORY','LongWord').SetUInt( $00000009);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_TREE','LongWord').SetUInt( $0000000A);
 CL.AddConstantN('RESOURCEDISPLAYTYPE_NDSCONTAINER','LongWord').SetUInt( $0000000B);
  CL.AddTypeS('PNetResourceA', '^TNetResourceA // will not work');
  CL.AddTypeS('PNetResourceW', '^TNetResourceW // will not work');
  CL.AddTypeS('PNetResource', 'PNetResourceA');
  CL.AddTypeS('_NETRESOURCEA', 'record dwScope : DWORD; dwType : DWORD; dwDispl'
   +'ayType : DWORD; dwUsage : DWORD; lpLocalName : PAnsiChar; lpRemoteName : P'
   +'AnsiChar; lpComment : PAnsiChar; lpProvider : PAnsiChar; end');
  CL.AddTypeS('_NETRESOURCEW', 'record dwScope : DWORD; dwType : DWORD; dwDispl'
   +'ayType : DWORD; dwUsage : DWORD; lpLocalName : PWideChar; lpRemoteName : P'
   +'WideChar; lpComment : PWideChar; lpProvider : PWideChar; end');
  CL.AddTypeS('_NETRESOURCE', '_NETRESOURCEA');
  CL.AddTypeS('TNetResourceA', '_NETRESOURCEA');
  CL.AddTypeS('TNetResourceW', '_NETRESOURCEW');
  CL.AddTypeS('TNetResource', 'TNetResourceA');
  CL.AddTypeS('NETRESOURCEA', '_NETRESOURCEA');
  CL.AddTypeS('NETRESOURCEW', '_NETRESOURCEW');
  CL.AddTypeS('NETRESOURCE', 'NETRESOURCEA');
 CL.AddConstantN('NETPROPERTY_PERSISTENT','LongInt').SetInt( 1);
 CL.AddConstantN('CONNECT_UPDATE_PROFILE','LongWord').SetUInt( $00000001);
 CL.AddConstantN('CONNECT_UPDATE_RECENT','LongWord').SetUInt( $00000002);
 CL.AddConstantN('CONNECT_TEMPORARY','LongWord').SetUInt( $00000004);
 CL.AddConstantN('CONNECT_INTERACTIVE','LongWord').SetUInt( $00000008);
 CL.AddConstantN('CONNECT_PROMPT','LongWord').SetUInt( $00000010);
 CL.AddConstantN('CONNECT_NEED_DRIVE','LongWord').SetUInt( $00000020);
 CL.AddConstantN('CONNECT_REFCOUNT','LongWord').SetUInt( $00000040);
 CL.AddConstantN('CONNECT_REDIRECT','LongWord').SetUInt( $00000080);
 CL.AddConstantN('CONNECT_LOCALDRIVE','LongWord').SetUInt( $00000100);
 CL.AddConstantN('CONNECT_CURRENT_MEDIA','LongWord').SetUInt( $00000200);
 CL.AddConstantN('CONNECT_DEFERRED','LongWord').SetUInt( $00000400);
 CL.AddConstantN('CONNECT_RESERVED','LongWord').SetUInt( DWORD ( $FF000000 ));
 CL.AddDelphiFunction('Function WNetAddConnection( lpRemoteName, lpPassword, lpLocalName : PChar) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnectionA( lpRemoteName, lpPassword, lpLocalName : PAnsiChar) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnectionW( lpRemoteName, lpPassword, lpLocalName : PWideChar) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnection2( var lpNetResource : TNetResource; lpPassword, lpUserName : PChar; dwFlags : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnection2A( var lpNetResource : TNetResourceA; lpPassword, lpUserName : PAnsiChar; dwFlags : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnection2W( var lpNetResource : TNetResourceW; lpPassword, lpUserName : PWideChar; dwFlags : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnection3( hwndOwner : HWND; var lpNetResource : TNetResource; lpPassword, lpUserName : PChar; dwFlags : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnection3A( hwndOwner : HWND; var lpNetResource : TNetResourceA; lpPassword, lpUserName : PAnsiChar; dwFlags : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetAddConnection3W( hwndOwner : HWND; var lpNetResource : TNetResourceW; lpPassword, lpUserName : PWideChar; dwFlags : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetCancelConnection( lpName : PChar; fForce : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WNetCancelConnectionA( lpName : PAnsiChar; fForce : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WNetCancelConnectionW( lpName : PWideChar; fForce : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WNetCancelConnection2( lpName : PChar; dwFlags : DWORD; fForce : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WNetCancelConnection2A( lpName : PAnsiChar; dwFlags : DWORD; fForce : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WNetCancelConnection2W( lpName : PWideChar; dwFlags : DWORD; fForce : BOOL) : DWORD');
 CL.AddDelphiFunction('Function WNetGetConnection( lpLocalName : PChar; lpRemoteName : PChar; var lpnLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetConnectionA( lpLocalName : PAnsiChar; lpRemoteName : PAnsiChar; var lpnLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetConnectionW( lpLocalName : PWideChar; lpRemoteName : PWideChar; var lpnLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetUseConnection( hwndOwner : HWND; var lpNetResource : TNetResource; lpUserID : PChar; lpPassword : PChar; dwFlags : DWORD; lpAccessName : PChar; var lpBufferSize : DWORD; var lpResult : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetUseConnectionA( hwndOwner : HWND; var lpNetResource : TNetResourceA; lpUserID : PAnsiChar; lpPassword : PAnsiChar; dwFlags : DWORD; lpAccessName : PAnsiChar; var lpBufferSize : DWORD; var lpResult : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetUseConnectionW( hwndOwner : HWND; var lpNetResource : TNetResourceW; lpUserID : PWideChar; lpPassword : PWideChar; dwFlags : DWORD; lpAccessName : PWideChar; var lpBufferSize : DWORD; var lpResult : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetSetConnection( lpName : PChar; dwProperties : DWORD; pvValues : Pointer) : DWORD');
 CL.AddDelphiFunction('Function WNetSetConnectionA( lpName : PAnsiChar; dwProperties : DWORD; pvValues : Pointer) : DWORD');
 CL.AddDelphiFunction('Function WNetSetConnectionW( lpName : PWideChar; dwProperties : DWORD; pvValues : Pointer) : DWORD');
 CL.AddDelphiFunction('Function WNetConnectionDialog( hwnd : HWND; dwType : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetDisconnectDialog( hwnd : HWND; dwType : DWORD) : DWORD');
  CL.AddTypeS('PConnectDlgStruct', '^TConnectDlgStruct // will not work');
  CL.AddTypeS('_CONNECTDLGSTRUCTA', 'record cbStructure : DWORD; hwndOwner : HW'
   +'ND; lpConnRes : PNetResource; dwFlags : DWORD; dwDevNum : DWORD; end');
  CL.AddTypeS('TConnectDlgStruct', '_CONNECTDLGSTRUCTA');
  CL.AddTypeS('CONNECTDLGSTRUCT', '_CONNECTDLGSTRUCTA');
 CL.AddConstantN('CONNDLG_RO_PATH','LongInt').SetInt( 1);
 CL.AddConstantN('CONNDLG_CONN_POINT','LongInt').SetInt( 2);
 CL.AddConstantN('CONNDLG_USE_MRU','LongInt').SetInt( 4);
 CL.AddConstantN('CONNDLG_HIDE_BOX','LongInt').SetInt( 8);
 CL.AddConstantN('CONNDLG_PERSIST','LongWord').SetUInt( $10);
 CL.AddConstantN('CONNDLG_NOT_PERSIST','LongWord').SetUInt( $20);
 CL.AddDelphiFunction('Function WNetConnectionDialog1( var lpConnDlgStruct : TConnectDlgStruct) : DWORD');
 CL.AddDelphiFunction('Function WNetConnectionDialog1A( var lpConnDlgStruct : TConnectDlgStruct) : DWORD');
 CL.AddDelphiFunction('Function WNetConnectionDialog1W( var lpConnDlgStruct : TConnectDlgStruct) : DWORD');
  CL.AddTypeS('PDiscDlgStructA', '^TDiscDlgStructA // will not work');
  CL.AddTypeS('PDiscDlgStructW', '^TDiscDlgStructW // will not work');
  CL.AddTypeS('PDiscDlgStruct', 'PDiscDlgStructA');
  CL.AddTypeS('_DISCDLGSTRUCTA', 'record cbStructure : DWORD; hwndOwner : HWND;'
   +' lpLocalName : PAnsiChar; lpRemoteName : PAnsiChar; dwFlags : DWORD; end');
  CL.AddTypeS('_DISCDLGSTRUCTW', 'record cbStructure : DWORD; hwndOwner : HWND;'
   +' lpLocalName : PWideChar; lpRemoteName : PWideChar; dwFlags : DWORD; end');
  CL.AddTypeS('_DISCDLGSTRUCT', '_DISCDLGSTRUCTA');
  CL.AddTypeS('TDiscDlgStructA', '_DISCDLGSTRUCTA');
  CL.AddTypeS('TDiscDlgStructW', '_DISCDLGSTRUCTW');
  CL.AddTypeS('TDiscDlgStruct', 'TDiscDlgStructA');
  CL.AddTypeS('DISCDLGSTRUCTA', '_DISCDLGSTRUCTA');
  CL.AddTypeS('DISCDLGSTRUCTW', '_DISCDLGSTRUCTW');
  CL.AddTypeS('DISCDLGSTRUCT', 'DISCDLGSTRUCTA');
 CL.AddConstantN('DISC_UPDATE_PROFILE','LongInt').SetInt( 1);
 CL.AddConstantN('DISC_NO_FORCE','LongWord').SetUInt( $40);
 CL.AddDelphiFunction('Function WNetDisconnectDialog1( var lpConnDlgStruct : TDiscDlgStruct) : DWORD');
 CL.AddDelphiFunction('Function WNetDisconnectDialog1A( var lpConnDlgStruct : TDiscDlgStructA) : DWORD');
 CL.AddDelphiFunction('Function WNetDisconnectDialog1W( var lpConnDlgStruct : TDiscDlgStructW) : DWORD');
 CL.AddDelphiFunction('Function WNetOpenEnum( dwScope, dwType, dwUsage : DWORD; lpNetResource : PNetResource; var lphEnum : THandle) : DWORD');
 CL.AddDelphiFunction('Function WNetOpenEnumA( dwScope, dwType, dwUsage : DWORD; lpNetResource : PNetResourceA; var lphEnum : THandle) : DWORD');
 CL.AddDelphiFunction('Function WNetOpenEnumW( dwScope, dwType, dwUsage : DWORD; lpNetResource : PNetResourceW; var lphEnum : THandle) : DWORD');
 CL.AddDelphiFunction('Function WNetEnumResource( hEnum : THandle; var lpcCount : DWORD; lpBuffer : Pointer; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetEnumResourceA( hEnum : THandle; var lpcCount : DWORD; lpBuffer : Pointer; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetEnumResourceW( hEnum : THandle; var lpcCount : DWORD; lpBuffer : Pointer; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetCloseEnum( hEnum : THandle) : DWORD');
 CL.AddDelphiFunction('Function WNetGetResourceParent( lpNetResource : PNetResource; lpBuffer : Pointer; var cbBuffer : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetResourceParentA( lpNetResource : PNetResourceA; lpBuffer : Pointer; var cbBuffer : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetResourceParentW( lpNetResource : PNetResourceW; lpBuffer : Pointer; var cbBuffer : DWORD) : DWORD');
 CL.AddConstantN('UNIVERSAL_NAME_INFO_LEVEL','LongInt').SetInt( 1);
 CL.AddConstantN('REMOTE_NAME_INFO_LEVEL','LongInt').SetInt( 2);
  CL.AddTypeS('PUniversalNameInfoA', '^TUniversalNameInfoA // will not work');
  CL.AddTypeS('PUniversalNameInfoW', '^TUniversalNameInfoW // will not work');
  CL.AddTypeS('PUniversalNameInfo', 'PUniversalNameInfoA');
  CL.AddTypeS('_UNIVERSAL_NAME_INFOA', 'record lpUniversalName : PAnsiChar; end');
  CL.AddTypeS('_UNIVERSAL_NAME_INFOW', 'record lpUniversalName : PWideChar; end');
  CL.AddTypeS('_UNIVERSAL_NAME_INFO', '_UNIVERSAL_NAME_INFOA');
  CL.AddTypeS('TUniversalNameInfoA', '_UNIVERSAL_NAME_INFOA');
  CL.AddTypeS('TUniversalNameInfoW', '_UNIVERSAL_NAME_INFOW');
  CL.AddTypeS('TUniversalNameInfo', 'TUniversalNameInfoA');
  CL.AddTypeS('UNIVERSAL_NAME_INFOA', '_UNIVERSAL_NAME_INFOA');
  CL.AddTypeS('UNIVERSAL_NAME_INFOW', '_UNIVERSAL_NAME_INFOW');
  CL.AddTypeS('UNIVERSAL_NAME_INFO', 'UNIVERSAL_NAME_INFOA');
  CL.AddTypeS('PRemoteNameInfoA', '^TRemoteNameInfoA // will not work');
  CL.AddTypeS('PRemoteNameInfoW', '^TRemoteNameInfoW // will not work');
  CL.AddTypeS('PRemoteNameInfo', 'PRemoteNameInfoA');
  CL.AddTypeS('_REMOTE_NAME_INFOA', 'record lpUniversalName : PAnsiChar; lpConn'
   +'ectionName : PAnsiChar; lpRemainingPath : PAnsiChar; end');
  CL.AddTypeS('_REMOTE_NAME_INFOW', 'record lpUniversalName : PWideChar; lpConn'
   +'ectionName : PWideChar; lpRemainingPath : PWideChar; end');
  CL.AddTypeS('_REMOTE_NAME_INFO', '_REMOTE_NAME_INFOA');
  CL.AddTypeS('TRemoteNameInfoA', '_REMOTE_NAME_INFOA');
  CL.AddTypeS('TRemoteNameInfoW', '_REMOTE_NAME_INFOW');
  CL.AddTypeS('TRemoteNameInfo', 'TRemoteNameInfoA');
  CL.AddTypeS('REMOTE_NAME_INFOA', '_REMOTE_NAME_INFOA');
  CL.AddTypeS('REMOTE_NAME_INFOW', '_REMOTE_NAME_INFOW');
  CL.AddTypeS('REMOTE_NAME_INFO', 'REMOTE_NAME_INFOA');
 CL.AddDelphiFunction('Function WNetGetUniversalName( lpLocalPath : PChar; dwInfoLevel : DWORD; lpBuffer : Pointer; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetUniversalNameA( lpLocalPath : PAnsiChar; dwInfoLevel : DWORD; lpBuffer : Pointer; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetUniversalNameW( lpLocalPath : PWideChar; dwInfoLevel : DWORD; lpBuffer : Pointer; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetUser( lpName : PChar; lpUserName : PChar; var lpnLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetUserA( lpName : PAnsiChar; lpUserName : PAnsiChar; var lpnLength : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetUserW( lpName : PWideChar; lpUserName : PWideChar; var lpnLength : DWORD) : DWORD');
 CL.AddConstantN('WNFMT_MULTILINE','LongInt').SetInt( 1);
 CL.AddConstantN('WNFMT_ABBREVIATED','LongInt').SetInt( 2);
 CL.AddConstantN('WNFMT_INENUM','LongWord').SetUInt( $10);
 CL.AddConstantN('WNFMT_CONNECTION','LongWord').SetUInt( $20);
 CL.AddDelphiFunction('Function WNetGetProviderName( dwNetType : DWORD; lpProviderName : PChar; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetProviderNameA( dwNetType : DWORD; lpProviderName : PAnsiChar; var lpBufferSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetProviderNameW( dwNetType : DWORD; lpProviderName : PWideChar; var lpBufferSize : DWORD) : DWORD');
  CL.AddTypeS('PNetInfoStruct', '^TNetInfoStruct // will not work');
  CL.AddTypeS('_NETINFOSTRUCT', 'record cbStructure : DWORD; dwProviderVersion '
   +': DWORD; dwStatus : DWORD; dwCharacteristics : DWORD; dwHandle : DWORD; wN'
   +'etType : Word; dwPrinters : DWORD; dwDrives : DWORD; end');
  CL.AddTypeS('TNetInfoStruct', '_NETINFOSTRUCT');
  CL.AddTypeS('NETINFOSTRUCT', '_NETINFOSTRUCT');
 CL.AddConstantN('NETINFO_DLL16','LongInt').SetInt( 1);
 CL.AddConstantN('NETINFO_DISKRED','LongInt').SetInt( 4);
 CL.AddConstantN('NETINFO_PRINTERRED','LongInt').SetInt( 8);
 CL.AddDelphiFunction('Function WNetGetNetworkInformation( lpProvider : PChar; var lpNetInfoStruct : TNetInfoStruct) : DWORD');
 CL.AddDelphiFunction('Function WNetGetNetworkInformationA( lpProvider : PAnsiChar; var lpNetInfoStruct : TNetInfoStruct) : DWORD');
 CL.AddDelphiFunction('Function WNetGetNetworkInformationW( lpProvider : PWideChar; var lpNetInfoStruct : TNetInfoStruct) : DWORD');
  CL.AddTypeS('TFNGetProfilePath', 'TFarProc');
  CL.AddTypeS('TFNReconcileProfile', 'TFarProc');
 CL.AddConstantN('RP_LOGON','LongInt').SetInt( 1);
 CL.AddConstantN('RP_INIFILE','LongInt').SetInt( 2);
  CL.AddTypeS('TFNProcessPolicies', 'TFarProc');
 CL.AddConstantN('PP_DISPLAYERRORS','LongInt').SetInt( 1);
 CL.AddDelphiFunction('Function WNetGetLastError( var lpError : DWORD; lpErrorBuf : PChar; nErrorBufSize : DWORD; lpNameBuf : PChar; nNameBufSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetLastErrorA( var lpError : DWORD; lpErrorBuf : PAnsiChar; nErrorBufSize : DWORD; lpNameBuf : PAnsiChar; nNameBufSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function WNetGetLastErrorW( var lpError : DWORD; lpErrorBuf : PWideChar; nErrorBufSize : DWORD; lpNameBuf : PWideChar; nNameBufSize : DWORD) : DWORD');
 CL.AddConstantN('WN_SUCCESS','').SetString( NO_ERROR);
 CL.AddConstantN('WN_NO_ERROR','').SetString( NO_ERROR);
 CL.AddConstantN('WN_NOT_SUPPORTED','').SetString( ERROR_NOT_SUPPORTED);
 CL.AddConstantN('WN_CANCEL','').SetString( ERROR_CANCELLED);
 CL.AddConstantN('WN_RETRY','').SetString( ERROR_RETRY);
 CL.AddConstantN('WN_NET_ERROR','').SetString( ERROR_UNEXP_NET_ERR);
 CL.AddConstantN('WN_MORE_DATA','').SetString( ERROR_MORE_DATA);
 CL.AddConstantN('WN_BAD_POINTER','').SetString( ERROR_INVALID_ADDRESS);
 CL.AddConstantN('WN_BAD_VALUE','').SetString( ERROR_INVALID_PARAMETER);
 CL.AddConstantN('WN_BAD_USER','').SetString( ERROR_BAD_USERNAME);
 CL.AddConstantN('WN_BAD_PASSWORD','').SetString( ERROR_INVALID_PASSWORD);
 CL.AddConstantN('WN_ACCESS_DENIED','').SetString( ERROR_ACCESS_DENIED);
 CL.AddConstantN('WN_FUNCTION_BUSY','').SetString( ERROR_BUSY);
 CL.AddConstantN('WN_WINDOWS_ERROR','').SetString( ERROR_UNEXP_NET_ERR);
 CL.AddConstantN('WN_OUT_OF_MEMORY','').SetString( ERROR_NOT_ENOUGH_MEMORY);
 CL.AddConstantN('WN_NO_NETWORK','').SetString( ERROR_NO_NETWORK);
 CL.AddConstantN('WN_EXTENDED_ERROR','').SetString( ERROR_EXTENDED_ERROR);
 CL.AddConstantN('WN_BAD_LEVEL','').SetString( ERROR_INVALID_LEVEL);
 CL.AddConstantN('WN_BAD_HANDLE','').SetString( ERROR_INVALID_HANDLE);
 CL.AddConstantN('WN_NOT_INITIALIZING','').SetString( ERROR_ALREADY_INITIALIZED);
 CL.AddConstantN('WN_NO_MORE_DEVICES','').SetString( ERROR_NO_MORE_DEVICES);
 CL.AddConstantN('WN_NOT_CONNECTED','').SetString( ERROR_NOT_CONNECTED);
 CL.AddConstantN('WN_OPEN_FILES','').SetString( ERROR_OPEN_FILES);
 CL.AddConstantN('WN_DEVICE_IN_USE','').SetString( ERROR_DEVICE_IN_USE);
 CL.AddConstantN('WN_BAD_NETNAME','').SetString( ERROR_BAD_NET_NAME);
 CL.AddConstantN('WN_BAD_LOCALNAME','').SetString( ERROR_BAD_DEVICE);
 CL.AddConstantN('WN_ALREADY_CONNECTED','').SetString( ERROR_ALREADY_ASSIGNED);
 CL.AddConstantN('WN_DEVICE_ERROR','').SetString( ERROR_GEN_FAILURE);
 CL.AddConstantN('WN_CONNECTION_CLOSED','').SetString( ERROR_CONNECTION_UNAVAIL);
 CL.AddConstantN('WN_NO_NET_OR_BAD_PATH','').SetString( ERROR_NO_NET_OR_BAD_PATH);
 CL.AddConstantN('WN_BAD_PROVIDER','').SetString( ERROR_BAD_PROVIDER);
 CL.AddConstantN('WN_CANNOT_OPEN_PROFILE','').SetString( ERROR_CANNOT_OPEN_PROFILE);
 CL.AddConstantN('WN_BAD_PROFILE','').SetString( ERROR_BAD_PROFILE);
 CL.AddConstantN('WN_BAD_DEV_TYPE','').SetString( ERROR_BAD_DEV_TYPE);
 CL.AddConstantN('WN_DEVICE_ALREADY_REMEMBERED','').SetString( ERROR_DEVICE_ALREADY_REMEMBERED);
 CL.AddConstantN('WN_NO_MORE_ENTRIES','').SetString( ERROR_NO_MORE_ITEMS);
 CL.AddConstantN('WN_NOT_CONTAINER','').SetString( ERROR_NOT_CONTAINER);
 CL.AddConstantN('WN_NOT_AUTHENTICATED','').SetString( ERROR_NOT_AUTHENTICATED);
 CL.AddConstantN('WN_NOT_LOGGED_ON','').SetString( ERROR_NOT_LOGGED_ON);
 CL.AddConstantN('WN_NOT_VALIDATED','').SetString( ERROR_NO_LOGON_SERVERS);
  CL.AddTypeS('PNetConnectInfoStruct', '^TNetConnectInfoStruct // will not work');
  CL.AddTypeS('_NETCONNECTINFOSTRUCT', 'record cbStructure : DWORD; dwFlags : D'
   +'WORD; dwSpeed : DWORD; dwDelay : DWORD; dwOptDataSize : DWORD; end');
  CL.AddTypeS('TNetConnectInfoStruct', '_NETCONNECTINFOSTRUCT');
  CL.AddTypeS('NETCONNECTINFOSTRUCT', '_NETCONNECTINFOSTRUCT');
 CL.AddConstantN('WNCON_FORNETCARD','LongInt').SetInt( 1);
 CL.AddConstantN('WNCON_NOTROUTED','LongInt').SetInt( 2);
 CL.AddConstantN('WNCON_SLOWLINK','LongInt').SetInt( 4);
 CL.AddConstantN('WNCON_DYNAMIC','LongInt').SetInt( 8);
 CL.AddDelphiFunction('Function MultinetGetConnectionPerformance( lpNetResource : PNetResource; lpNetConnectInfoStruc : PNetConnectInfoStruct) : DWORD');
 CL.AddDelphiFunction('Function MultinetGetConnectionPerformanceA( lpNetResource : PNetResourceA; lpNetConnectInfoStruc : PNetConnectInfoStruct) : DWORD');
 CL.AddDelphiFunction('Function MultinetGetConnectionPerformanceW( lpNetResource : PNetResourceW; lpNetConnectInfoStruc : PNetConnectInfoStruct) : DWORD');
 CL.AddConstantN('WM_DDE_FIRST','LongWord').SetUInt( $03E0);
 CL.AddConstantN('WM_DDE_INITIATE','').SetString( WM_DDE_FIRST);
 CL.AddConstantN('WM_DDE_TERMINATE','LongInt').SetInt( WM_DDE_FIRST + 1);
 CL.AddConstantN('WM_DDE_ADVISE','LongInt').SetInt( WM_DDE_FIRST + 2);
 CL.AddConstantN('WM_DDE_UNADVISE','LongInt').SetInt( WM_DDE_FIRST + 3);
 CL.AddConstantN('WM_DDE_ACK','LongInt').SetInt( WM_DDE_FIRST + 4);
 CL.AddConstantN('WM_DDE_DATA','LongInt').SetInt( WM_DDE_FIRST + 5);
 CL.AddConstantN('WM_DDE_REQUEST','LongInt').SetInt( WM_DDE_FIRST + 6);
 CL.AddConstantN('WM_DDE_POKE','LongInt').SetInt( WM_DDE_FIRST + 7);
 CL.AddConstantN('WM_DDE_EXECUTE','LongInt').SetInt( WM_DDE_FIRST + 8);
 CL.AddConstantN('WM_DDE_LAST','LongInt').SetInt( WM_DDE_FIRST + 8);
  CL.AddTypeS('PDDEAck', '^TDDEAck // will not work');
  CL.AddTypeS('DDEACK', 'record Flags : Word; end');
  CL.AddTypeS('TDDEAck', 'DDEACK');
 CL.AddConstantN('dde_AppReturnCode','LongWord').SetUInt( $00FF);
 CL.AddConstantN('dde_Busy','LongWord').SetUInt( $4000);
 CL.AddConstantN('dde_Ack','LongWord').SetUInt( $8000);
  CL.AddTypeS('PDDEAdvise', '^TDDEAdvise // will not work');
  CL.AddTypeS('DDEADVISE', 'record Flags : Word; cfFormat : SmallInt; end');
  CL.AddTypeS('TDDEAdvise', 'DDEADVISE');
 CL.AddConstantN('dde_DeferUpd','LongWord').SetUInt( $4000);
 CL.AddConstantN('dde_AckReq','LongWord').SetUInt( $8000);
  CL.AddTypeS('PDDEData', '^TDDEData // will not work');
  CL.AddTypeS('TDDEData', 'DDEDATA');
 CL.AddConstantN('dde_Response','LongWord').SetUInt( $1000);
 CL.AddConstantN('dde_Release','LongWord').SetUInt( $2000);
  CL.AddTypeS('PDDEPoke', '^TDDEPoke // will not work');
  CL.AddTypeS('TDDEPoke', 'DDEPOKE');
 CL.AddDelphiFunction('Function DdeSetQualityOfService( hWndClient : HWnd; const pqosNew : TSecurityQualityOfService; pqosPrev : PSecurityQualityOfService) : BOOL');
 CL.AddDelphiFunction('Function ImpersonateDdeClientWindow( hWndClient : HWnd; hWndServer : HWnd) : BOOL');
 CL.AddDelphiFunction('Function PackDDElParam( msg : UINT; uiLo : UINT; uiHi : UINT) : Longint');
 CL.AddDelphiFunction('Function UnpackDDElParam( msg : UINT; lParam : Longint; puiLo : PUINT; puiHi : PUINT) : BOOL');
 CL.AddDelphiFunction('Function FreeDDElParam( msg : UINT; lParam : Longint) : BOOL');
 CL.AddDelphiFunction('Function ReuseDDElParam( lParam : Longint; msgIn : UINT; msgOut : UINT; uiLo : UINT; uiHi : UINT) : Longint');
 CL.AddConstantN('MSH_MOUSEWHEEL','String').SetString( 'MSWHEEL_ROLLMSG');
 CL.AddConstantN('MOUSEZ_CLASSNAME','String').SetString( 'MouseZ');
 CL.AddConstantN('MOUSEZ_TITLE','String').SetString( 'Magellan MSWHEEL');
 CL.AddConstantN('MSH_WHEELMODULE_CLASS','').SetString( MOUSEZ_CLASSNAME);
 CL.AddConstantN('MSH_WHEELMODULE_TITLE','').SetString( MOUSEZ_TITLE);
 CL.AddConstantN('MSH_WHEELSUPPORT','String').SetString( 'MSH_WHEELSUPPORT_MSG');
 CL.AddConstantN('MSH_SCROLL_LINES','String').SetString( 'MSH_SCROLL_LINES_MSG');
 CL.AddDelphiFunction('Function HwndMSWheel( var puiMsh_MsgMouseWheel, puiMsh_Msg3DSupport, puiMsh_MsgScrollLines : UINT; var pf3DSupport : BOOL; var piScrollLines : Integer) : HWND');
 CL.AddConstantN('advapi32','String').SetString( 'advapi32.dll');
 CL.AddConstantN('kernel32','String').SetString( 'kernel32.dll');
 CL.AddConstantN('mpr','String').SetString( 'mpr.dll');
 CL.AddConstantN('version','String').SetString( 'version.dll');
 CL.AddConstantN('comctl32','String').SetString( 'comctl32.dll');
 CL.AddConstantN('gdi32','String').SetString( 'gdi32.dll');
 CL.AddConstantN('opengl32','String').SetString( 'opengl32.dll');
 CL.AddConstantN('user32','String').SetString( 'user32.dll');
 CL.AddConstantN('wintrust','String').SetString( 'wintrust.dll');
 CL.AddConstantN('msimg32','String').SetString( 'msimg32.dll');
 CL.AddConstantN('advapi32','String').SetString( 'libwine.borland.so');
 CL.AddConstantN('kernel32','String').SetString( 'libwine.borland.so');
 CL.AddConstantN('mpr','String').SetString( 'libmpr.borland.so');
 CL.AddConstantN('version','String').SetString( 'libversion.borland.so');
 CL.AddConstantN('comctl32','String').SetString( 'libcomctl32.borland.so');
 CL.AddConstantN('gdi32','String').SetString( 'libwine.borland.so');
 CL.AddConstantN('opengl32','String').SetString( 'libopengl32.borland.so');
 CL.AddConstantN('user32','String').SetString( 'libwine.borland.so');
 CL.AddConstantN('wintrust','String').SetString( 'libwintrust.borland.so');
 CL.AddConstantN('msimg32','String').SetString( 'libmsimg32.borland.so');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function GetWindowThreadProcessId_P( hWnd : HWND; var dwProcessId : DWORD) : DWORD;
Begin Result := Windows.GetWindowThreadProcessId(hWnd, dwProcessId); END;

(*----------------------------------------------------------------------------*)
Function GetWindowThreadProcessId_P( hWnd : HWND; lpdwProcessId : Pointer) : DWORD;
Begin Result := Windows.GetWindowThreadProcessId(hWnd, lpdwProcessId); END;

(*----------------------------------------------------------------------------*)
Function GetUpdateRect_P( hWnd : HWND; lpRect : PRect; bErase : BOOL) : BOOL;
Begin Result := Windows.GetUpdateRect(hWnd, lpRect, bErase); END;

(*----------------------------------------------------------------------------*)
Function GetUpdateRect_P( hWnd : HWND; var lpRect : TRect; bErase : BOOL) : BOOL;
Begin Result := Windows.GetUpdateRect(hWnd, lpRect, bErase); END;

(*----------------------------------------------------------------------------*)
Function OffsetWindowOrgEx_P( DC : HDC; X, Y : Integer; Points : PPoint) : BOOL;
Begin Result := Windows.OffsetWindowOrgEx(DC, X, Y, Points); END;

(*----------------------------------------------------------------------------*)
Function OffsetViewportOrgEx_P( DC : HDC; X, Y : Integer; Points : PPoint) : BOOL;
Begin Result := Windows.OffsetViewportOrgEx(DC, X, Y, Points); END;

(*----------------------------------------------------------------------------*)
Function OffsetWindowOrgEx_P( DC : HDC; X, Y : Integer; var Points) : BOOL;
Begin Result := Windows.OffsetWindowOrgEx(DC, X, Y, Points); END;

(*----------------------------------------------------------------------------*)
Function OffsetViewportOrgEx_P( DC : HDC; X, Y : Integer; var Points) : BOOL;
Begin Result := Windows.OffsetViewportOrgEx(DC, X, Y, Points); END;

(*----------------------------------------------------------------------------*)
Function AdjustTokenPrivileges_P( TokenHandle : THandle; DisableAllPrivileges : BOOL; const NewState : TTokenPrivileges; BufferLength : DWORD; PreviousState : PTokenPrivileges; var ReturnLength : DWORD) : BOOL;
Begin Result := Windows.AdjustTokenPrivileges(TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength); END;

(*----------------------------------------------------------------------------*)
Function AdjustTokenPrivileges_P( TokenHandle : THandle; DisableAllPrivileges : BOOL; const NewState : TTokenPrivileges; BufferLength : DWORD; var PreviousState : TTokenPrivileges; var ReturnLength : DWORD) : BOOL;
Begin Result := Windows.AdjustTokenPrivileges(TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength); END;

(*----------------------------------------------------------------------------*)
Function GetEnvironmentVariableW_P( lpName : PWideChar; lpBuffer : PWideChar; nSize : DWORD) : DWORD;
Begin Result := Windows.GetEnvironmentVariableW(lpName, lpBuffer, nSize); END;

(*----------------------------------------------------------------------------*)
Function GetEnvironmentVariableA_P( lpName : PAnsiChar; lpBuffer : PAnsiChar; nSize : DWORD) : DWORD;
Begin Result := Windows.GetEnvironmentVariableA(lpName, lpBuffer, nSize); END;

(*----------------------------------------------------------------------------*)
Function GetEnvironmentVariable_P( lpName : PChar; lpBuffer : PChar; nSize : DWORD) : DWORD;
Begin Result := Windows.GetEnvironmentVariable(lpName, lpBuffer, nSize); END;

(*----------------------------------------------------------------------------*)
Function VirtualProtectEx_P( hProcess : THandle; lpAddress : Pointer; dwSize, flNewProtect : DWORD; var OldProtect : DWORD) : BOOL;
Begin Result := Windows.VirtualProtectEx(hProcess, lpAddress, dwSize, flNewProtect, OldProtect); END;

(*----------------------------------------------------------------------------*)
Function VirtualProtectEx_P( hProcess : THandle; lpAddress : Pointer; dwSize, flNewProtect : DWORD; lpflOldProtect : Pointer) : BOOL;
Begin Result := Windows.VirtualProtectEx(hProcess, lpAddress, dwSize, flNewProtect, lpflOldProtect); END;

(*----------------------------------------------------------------------------*)
Function VirtualProtect_P( lpAddress : Pointer; dwSize, flNewProtect : DWORD; var OldProtect : DWORD) : BOOL;
Begin Result := Windows.VirtualProtect(lpAddress, dwSize, flNewProtect, OldProtect); END;

(*----------------------------------------------------------------------------*)
Function VirtualProtect_P( lpAddress : Pointer; dwSize, flNewProtect : DWORD; lpflOldProtect : Pointer) : BOOL;
Begin Result := Windows.VirtualProtect(lpAddress, dwSize, flNewProtect, lpflOldProtect); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Windows_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@MakeWord, 'MakeWord', cdRegister);
 S.RegisterDelphiFunction(@MakeLong, 'MakeLong', cdRegister);
 S.RegisterDelphiFunction(@HiWord, 'HiWord', cdRegister);
 S.RegisterDelphiFunction(@HiByte, 'HiByte', cdRegister);
 S.RegisterDelphiFunction(@DefineHandleTable, 'DefineHandleTable', cdRegister);
 S.RegisterDelphiFunction(@LimitEmsPages, 'LimitEmsPages', cdRegister);
 S.RegisterDelphiFunction(@SetSwapAreaSize, 'SetSwapAreaSize', cdRegister);
 S.RegisterDelphiFunction(@LockSegment, 'LockSegment', cdRegister);
 S.RegisterDelphiFunction(@UnlockSegment, 'UnlockSegment', cdRegister);
 S.RegisterDelphiFunction(@GetCurrentTime, 'GetCurrentTime', cdRegister);
 S.RegisterDelphiFunction(@Yield, 'Yield', cdRegister);
 S.RegisterDelphiFunction(@MoveMemory, 'MoveMemory', cdRegister);
 S.RegisterDelphiFunction(@CopyMemory, 'CopyMemory', cdRegister);
 S.RegisterDelphiFunction(@FillMemory, 'FillMemory', cdRegister);
 S.RegisterDelphiFunction(@ZeroMemory, 'ZeroMemory', cdRegister);
 S.RegisterDelphiFunction(@FreeModule, 'FreeModule', cdRegister);
 S.RegisterDelphiFunction(@MakeProcInstance, 'MakeProcInstance', cdRegister);
 S.RegisterDelphiFunction(@FreeProcInstance, 'FreeProcInstance', cdRegister);
 S.RegisterDelphiFunction(@GlobalLRUNewest, 'GlobalLRUNewest', cdRegister);
 S.RegisterDelphiFunction(@GlobalLRUOldest, 'GlobalLRUOldest', cdRegister);
 S.RegisterDelphiFunction(@GlobalDiscard, 'GlobalDiscard', cdRegister);
 S.RegisterDelphiFunction(@GlobalAllocPtr, 'GlobalAllocPtr', cdRegister);
 S.RegisterDelphiFunction(@GlobalReAllocPtr, 'GlobalReAllocPtr', cdRegister);
 S.RegisterDelphiFunction(@GlobalFreePtr, 'GlobalFreePtr', cdRegister);
 S.RegisterDelphiFunction(@LocalDiscard, 'LocalDiscard', cdRegister);
 S.RegisterDelphiFunction(@GetFreeSpace, 'GetFreeSpace', cdRegister);
 S.RegisterDelphiFunction(@InterlockedIncrement, 'InterlockedIncrement', CdStdCall);
 S.RegisterDelphiFunction(@InterlockedDecrement, 'InterlockedDecrement', CdStdCall);
 S.RegisterDelphiFunction(@InterlockedExchange, 'InterlockedExchange', CdStdCall);
 S.RegisterDelphiFunction(@FreeResource, 'FreeResource', CdStdCall);
 S.RegisterDelphiFunction(@LockResource, 'LockResource', CdStdCall);
 S.RegisterDelphiFunction(@UnlockResource, 'UnlockResource', cdRegister);
 S.RegisterDelphiFunction(@FreeLibrary, 'FreeLibrary', CdStdCall);
 S.RegisterDelphiFunction(@FreeLibraryAndExitThread, 'FreeLibraryAndExitThread', CdStdCall);
 S.RegisterDelphiFunction(@DisableThreadLibraryCalls, 'DisableThreadLibraryCalls', CdStdCall);
 S.RegisterDelphiFunction(@GetProcAddress, 'GetProcAddress', CdStdCall);
 S.RegisterDelphiFunction(@GetVersion, 'GetVersion', CdStdCall);
 S.RegisterDelphiFunction(@GlobalAlloc, 'GlobalAlloc', CdStdCall);
 S.RegisterDelphiFunction(@GlobalReAlloc, 'GlobalReAlloc', CdStdCall);
 S.RegisterDelphiFunction(@GlobalSize, 'GlobalSize', CdStdCall);
 S.RegisterDelphiFunction(@GlobalFlags, 'GlobalFlags', CdStdCall);
 S.RegisterDelphiFunction(@GlobalLock, 'GlobalLock', CdStdCall);
 S.RegisterDelphiFunction(@GlobalHandle, 'GlobalHandle', CdStdCall);
 S.RegisterDelphiFunction(@GlobalUnlock, 'GlobalUnlock', CdStdCall);
 S.RegisterDelphiFunction(@GlobalFree, 'GlobalFree', CdStdCall);
 S.RegisterDelphiFunction(@GlobalCompact, 'GlobalCompact', CdStdCall);
 S.RegisterDelphiFunction(@GlobalFix, 'GlobalFix', CdStdCall);
 S.RegisterDelphiFunction(@GlobalUnfix, 'GlobalUnfix', CdStdCall);
 S.RegisterDelphiFunction(@GlobalWire, 'GlobalWire', CdStdCall);
 S.RegisterDelphiFunction(@GlobalUnWire, 'GlobalUnWire', CdStdCall);
 S.RegisterDelphiFunction(@GlobalMemoryStatus, 'GlobalMemoryStatus', CdStdCall);
 S.RegisterDelphiFunction(@LocalAlloc, 'LocalAlloc', CdStdCall);
 S.RegisterDelphiFunction(@LocalReAlloc, 'LocalReAlloc', CdStdCall);
 S.RegisterDelphiFunction(@LocalLock, 'LocalLock', CdStdCall);
 S.RegisterDelphiFunction(@LocalUnlock, 'LocalUnlock', CdStdCall);
 S.RegisterDelphiFunction(@LocalSize, 'LocalSize', CdStdCall);
 S.RegisterDelphiFunction(@LocalFlags, 'LocalFlags', CdStdCall);
 S.RegisterDelphiFunction(@LocalFree, 'LocalFree', CdStdCall);
 S.RegisterDelphiFunction(@LocalShrink, 'LocalShrink', CdStdCall);
 S.RegisterDelphiFunction(@LocalCompact, 'LocalCompact', CdStdCall);
 S.RegisterDelphiFunction(@FlushInstructionCache, 'FlushInstructionCache', CdStdCall);
 S.RegisterDelphiFunction(@VirtualAlloc, 'VirtualAlloc', CdStdCall);
 S.RegisterDelphiFunction(@VirtualFree, 'VirtualFree', CdStdCall);
 S.RegisterDelphiFunction(@VirtualProtect, 'VirtualProtect', CdStdCall);
 S.RegisterDelphiFunction(@VirtualProtect, 'VirtualProtect', CdStdCall);
 S.RegisterDelphiFunction(@VirtualQuery, 'VirtualQuery', CdStdCall);
 S.RegisterDelphiFunction(@VirtualAllocEx, 'VirtualAllocEx', CdStdCall);
 S.RegisterDelphiFunction(@VirtualFreeEx, 'VirtualFreeEx', CdStdCall);
 S.RegisterDelphiFunction(@VirtualProtectEx, 'VirtualProtectEx', CdStdCall);
 S.RegisterDelphiFunction(@VirtualProtectEx, 'VirtualProtectEx', CdStdCall);
 S.RegisterDelphiFunction(@VirtualQueryEx, 'VirtualQueryEx', CdStdCall);
 S.RegisterDelphiFunction(@HeapCreate, 'HeapCreate', CdStdCall);
 S.RegisterDelphiFunction(@HeapDestroy, 'HeapDestroy', CdStdCall);
 S.RegisterDelphiFunction(@HeapAlloc, 'HeapAlloc', CdStdCall);
 S.RegisterDelphiFunction(@HeapReAlloc, 'HeapReAlloc', CdStdCall);
 S.RegisterDelphiFunction(@HeapFree, 'HeapFree', CdStdCall);
 S.RegisterDelphiFunction(@HeapSize, 'HeapSize', CdStdCall);
 S.RegisterDelphiFunction(@HeapValidate, 'HeapValidate', CdStdCall);
 S.RegisterDelphiFunction(@HeapCompact, 'HeapCompact', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessHeap, 'GetProcessHeap', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessHeaps, 'GetProcessHeaps', CdStdCall);
 S.RegisterDelphiFunction(@HeapLock, 'HeapLock', CdStdCall);
 S.RegisterDelphiFunction(@HeapUnlock, 'HeapUnlock', CdStdCall);
 S.RegisterDelphiFunction(@HeapWalk, 'HeapWalk', CdStdCall);
 S.RegisterDelphiFunction(@GetBinaryType, 'GetBinaryType', CdStdCall);
 S.RegisterDelphiFunction(@GetBinaryTypeA, 'GetBinaryTypeA', CdStdCall);
 S.RegisterDelphiFunction(@GetBinaryTypeW, 'GetBinaryTypeW', CdStdCall);
 S.RegisterDelphiFunction(@GetShortPathName, 'GetShortPathName', CdStdCall);
 S.RegisterDelphiFunction(@GetShortPathNameA, 'GetShortPathNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetShortPathNameW, 'GetShortPathNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessAffinityMask, 'GetProcessAffinityMask', CdStdCall);
 S.RegisterDelphiFunction(@SetProcessAffinityMask, 'SetProcessAffinityMask', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessTimes, 'GetProcessTimes', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessWorkingSetSize, 'GetProcessWorkingSetSize', CdStdCall);
 S.RegisterDelphiFunction(@SetProcessWorkingSetSize, 'SetProcessWorkingSetSize', CdStdCall);
 S.RegisterDelphiFunction(@OpenProcess, 'OpenProcess', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentProcess, 'GetCurrentProcess', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentProcessId, 'GetCurrentProcessId', CdStdCall);
 S.RegisterDelphiFunction(@ExitProcess, 'ExitProcess', CdStdCall);
 S.RegisterDelphiFunction(@TerminateProcess, 'TerminateProcess', CdStdCall);
 S.RegisterDelphiFunction(@GetExitCodeProcess, 'GetExitCodeProcess', CdStdCall);
 S.RegisterDelphiFunction(@FatalExit, 'FatalExit', CdStdCall);
 S.RegisterDelphiFunction(@GetEnvironmentStrings, 'GetEnvironmentStrings', CdStdCall);
 S.RegisterDelphiFunction(@GetEnvironmentStringsA, 'GetEnvironmentStringsA', CdStdCall);
 S.RegisterDelphiFunction(@GetEnvironmentStringsW, 'GetEnvironmentStringsW', CdStdCall);
 S.RegisterDelphiFunction(@FreeEnvironmentStrings, 'FreeEnvironmentStrings', CdStdCall);
 S.RegisterDelphiFunction(@FreeEnvironmentStringsA, 'FreeEnvironmentStringsA', CdStdCall);
 S.RegisterDelphiFunction(@FreeEnvironmentStringsW, 'FreeEnvironmentStringsW', CdStdCall);
 S.RegisterDelphiFunction(@RaiseException, 'RaiseException', CdStdCall);
 S.RegisterDelphiFunction(@UnhandledExceptionFilter, 'UnhandledExceptionFilter', CdStdCall);
 S.RegisterDelphiFunction(@CreateFiber, 'CreateFiber', CdStdCall);
 S.RegisterDelphiFunction(@DeleteFiber, 'DeleteFiber', CdStdCall);
 S.RegisterDelphiFunction(@ConvertThreadToFiber, 'ConvertThreadToFiber', CdStdCall);
 S.RegisterDelphiFunction(@SwitchToFiber, 'SwitchToFiber', CdStdCall);
 S.RegisterDelphiFunction(@SwitchToThread, 'SwitchToThread', CdStdCall);
 S.RegisterDelphiFunction(@SetUnhandledExceptionFilter, 'SetUnhandledExceptionFilter', CdStdCall);
 S.RegisterDelphiFunction(@CreateThread, 'CreateThread', CdStdCall);
 S.RegisterDelphiFunction(@CreateRemoteThread, 'CreateRemoteThread', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentThread, 'GetCurrentThread', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentThreadId, 'GetCurrentThreadId', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadAffinityMask, 'SetThreadAffinityMask', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadIdealProcessor, 'SetThreadIdealProcessor', CdStdCall);
 S.RegisterDelphiFunction(@SetProcessPriorityBoost, 'SetProcessPriorityBoost', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessPriorityBoost, 'GetProcessPriorityBoost', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadPriority, 'SetThreadPriority', CdStdCall);
 S.RegisterDelphiFunction(@GetThreadPriority, 'GetThreadPriority', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadPriorityBoost, 'SetThreadPriorityBoost', CdStdCall);
 S.RegisterDelphiFunction(@GetThreadPriorityBoost, 'GetThreadPriorityBoost', CdStdCall);
 S.RegisterDelphiFunction(@GetThreadTimes, 'GetThreadTimes', CdStdCall);
 S.RegisterDelphiFunction(@ExitThread, 'ExitThread', CdStdCall);
 S.RegisterDelphiFunction(@TerminateThread, 'TerminateThread', CdStdCall);
 S.RegisterDelphiFunction(@GetExitCodeThread, 'GetExitCodeThread', CdStdCall);
 S.RegisterDelphiFunction(@GetThreadSelectorEntry, 'GetThreadSelectorEntry', CdStdCall);
 S.RegisterDelphiFunction(@GetLastError, 'GetLastError', CdStdCall);
 S.RegisterDelphiFunction(@SetLastError, 'SetLastError', CdStdCall);
 S.RegisterDelphiFunction(@GetOverlappedResult, 'GetOverlappedResult', CdStdCall);
 S.RegisterDelphiFunction(@CreateIoCompletionPort, 'CreateIoCompletionPort', CdStdCall);
 S.RegisterDelphiFunction(@GetQueuedCompletionStatus, 'GetQueuedCompletionStatus', CdStdCall);
 S.RegisterDelphiFunction(@PostQueuedCompletionStatus, 'PostQueuedCompletionStatus', CdStdCall);
 S.RegisterDelphiFunction(@SetErrorMode, 'SetErrorMode', CdStdCall);
 S.RegisterDelphiFunction(@ReadProcessMemory, 'ReadProcessMemory', CdStdCall);
 S.RegisterDelphiFunction(@WriteProcessMemory, 'WriteProcessMemory', CdStdCall);
 S.RegisterDelphiFunction(@GetThreadContext, 'GetThreadContext', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadContext, 'SetThreadContext', CdStdCall);
 S.RegisterDelphiFunction(@SuspendThread, 'SuspendThread', CdStdCall);
 S.RegisterDelphiFunction(@ResumeThread, 'ResumeThread', CdStdCall);
 S.RegisterDelphiFunction(@QueueUserAPC, 'QueueUserAPC', CdStdCall);
 S.RegisterDelphiFunction(@DebugBreak, 'DebugBreak', CdStdCall);
 S.RegisterDelphiFunction(@WaitForDebugEvent, 'WaitForDebugEvent', CdStdCall);
 S.RegisterDelphiFunction(@ContinueDebugEvent, 'ContinueDebugEvent', CdStdCall);
 S.RegisterDelphiFunction(@DebugActiveProcess, 'DebugActiveProcess', CdStdCall);
 S.RegisterDelphiFunction(@InitializeCriticalSection, 'InitializeCriticalSection', CdStdCall);
 S.RegisterDelphiFunction(@EnterCriticalSection, 'EnterCriticalSection', CdStdCall);
 S.RegisterDelphiFunction(@LeaveCriticalSection, 'LeaveCriticalSection', CdStdCall);
 S.RegisterDelphiFunction(@InitializeCriticalSectionAndSpinCount, 'InitializeCriticalSectionAndSpinCount', CdStdCall);
 S.RegisterDelphiFunction(@SetCriticalSectionSpinCount, 'SetCriticalSectionSpinCount', CdStdCall);
 S.RegisterDelphiFunction(@TryEnterCriticalSection, 'TryEnterCriticalSection', CdStdCall);
 S.RegisterDelphiFunction(@DeleteCriticalSection, 'DeleteCriticalSection', CdStdCall);
 S.RegisterDelphiFunction(@SetEvent, 'SetEvent', CdStdCall);
 S.RegisterDelphiFunction(@ResetEvent, 'ResetEvent', CdStdCall);
 S.RegisterDelphiFunction(@PulseEvent, 'PulseEvent', CdStdCall);
 S.RegisterDelphiFunction(@ReleaseSemaphore, 'ReleaseSemaphore', CdStdCall);
 S.RegisterDelphiFunction(@ReleaseMutex, 'ReleaseMutex', CdStdCall);
 S.RegisterDelphiFunction(@WaitForSingleObject, 'WaitForSingleObject', CdStdCall);
 S.RegisterDelphiFunction(@WaitForMultipleObjects, 'WaitForMultipleObjects', CdStdCall);
 S.RegisterDelphiFunction(@Sleep, 'Sleep', CdStdCall);
 S.RegisterDelphiFunction(@LoadResource, 'LoadResource', CdStdCall);
 S.RegisterDelphiFunction(@SizeofResource, 'SizeofResource', CdStdCall);
 S.RegisterDelphiFunction(@GlobalDeleteAtom, 'GlobalDeleteAtom', CdStdCall);
 S.RegisterDelphiFunction(@InitAtomTable, 'InitAtomTable', CdStdCall);
 S.RegisterDelphiFunction(@DeleteAtom, 'DeleteAtom', CdStdCall);
 S.RegisterDelphiFunction(@SetHandleCount, 'SetHandleCount', CdStdCall);
 S.RegisterDelphiFunction(@GetLogicalDrives, 'GetLogicalDrives', CdStdCall);
 S.RegisterDelphiFunction(@LockFile, 'LockFile', CdStdCall);
 S.RegisterDelphiFunction(@UnlockFile, 'UnlockFile', CdStdCall);
 S.RegisterDelphiFunction(@LockFileEx, 'LockFileEx', CdStdCall);
 S.RegisterDelphiFunction(@UnlockFileEx, 'UnlockFileEx', CdStdCall);
 S.RegisterDelphiFunction(@GetFileInformationByHandle, 'GetFileInformationByHandle', CdStdCall);
 S.RegisterDelphiFunction(@GetFileType, 'GetFileType', CdStdCall);
 S.RegisterDelphiFunction(@GetFileSize, 'GetFileSize', CdStdCall);
 S.RegisterDelphiFunction(@GetStdHandle, 'GetStdHandle', CdStdCall);
 S.RegisterDelphiFunction(@SetStdHandle, 'SetStdHandle', CdStdCall);
 S.RegisterDelphiFunction(@WriteFile, 'WriteFile', CdStdCall);
 S.RegisterDelphiFunction(@ReadFile, 'ReadFile', CdStdCall);
 S.RegisterDelphiFunction(@FlushFileBuffers, 'FlushFileBuffers', CdStdCall);
 S.RegisterDelphiFunction(@DeviceIoControl, 'DeviceIoControl', CdStdCall);
 S.RegisterDelphiFunction(@SetEndOfFile, 'SetEndOfFile', CdStdCall);
 S.RegisterDelphiFunction(@SetFilePointer, 'SetFilePointer', CdStdCall);
 S.RegisterDelphiFunction(@FindClose, 'FindClose', CdStdCall);
 S.RegisterDelphiFunction(@GetFileTime, 'GetFileTime', CdStdCall);
 S.RegisterDelphiFunction(@SetFileTime, 'SetFileTime', CdStdCall);
 S.RegisterDelphiFunction(@CloseHandle, 'CloseHandle', CdStdCall);
 S.RegisterDelphiFunction(@DuplicateHandle, 'DuplicateHandle', CdStdCall);
 S.RegisterDelphiFunction(@GetHandleInformation, 'GetHandleInformation', CdStdCall);
 S.RegisterDelphiFunction(@SetHandleInformation, 'SetHandleInformation', CdStdCall);
 S.RegisterDelphiFunction(@LoadModule, 'LoadModule', CdStdCall);
 S.RegisterDelphiFunction(@WinExec, 'WinExec', CdStdCall);
 S.RegisterDelphiFunction(@ClearCommBreak, 'ClearCommBreak', CdStdCall);
 S.RegisterDelphiFunction(@ClearCommError, 'ClearCommError', CdStdCall);
 S.RegisterDelphiFunction(@SetupComm, 'SetupComm', CdStdCall);
 S.RegisterDelphiFunction(@EscapeCommFunction, 'EscapeCommFunction', CdStdCall);
 S.RegisterDelphiFunction(@GetCommConfig, 'GetCommConfig', CdStdCall);
 S.RegisterDelphiFunction(@GetCommMask, 'GetCommMask', CdStdCall);
 S.RegisterDelphiFunction(@GetCommProperties, 'GetCommProperties', CdStdCall);
 S.RegisterDelphiFunction(@GetCommModemStatus, 'GetCommModemStatus', CdStdCall);
 S.RegisterDelphiFunction(@GetCommState, 'GetCommState', CdStdCall);
 S.RegisterDelphiFunction(@GetCommTimeouts, 'GetCommTimeouts', CdStdCall);
 S.RegisterDelphiFunction(@PurgeComm, 'PurgeComm', CdStdCall);
 S.RegisterDelphiFunction(@SetCommBreak, 'SetCommBreak', CdStdCall);
 S.RegisterDelphiFunction(@SetCommConfig, 'SetCommConfig', CdStdCall);
 S.RegisterDelphiFunction(@SetCommMask, 'SetCommMask', CdStdCall);
 S.RegisterDelphiFunction(@SetCommState, 'SetCommState', CdStdCall);
 S.RegisterDelphiFunction(@SetCommTimeouts, 'SetCommTimeouts', CdStdCall);
 S.RegisterDelphiFunction(@TransmitCommChar, 'TransmitCommChar', CdStdCall);
 S.RegisterDelphiFunction(@WaitCommEvent, 'WaitCommEvent', CdStdCall);
 S.RegisterDelphiFunction(@SetTapePosition, 'SetTapePosition', CdStdCall);
 S.RegisterDelphiFunction(@GetTapePosition, 'GetTapePosition', CdStdCall);
 S.RegisterDelphiFunction(@PrepareTape, 'PrepareTape', CdStdCall);
 S.RegisterDelphiFunction(@EraseTape, 'EraseTape', CdStdCall);
 S.RegisterDelphiFunction(@CreateTapePartition, 'CreateTapePartition', CdStdCall);
 S.RegisterDelphiFunction(@WriteTapemark, 'WriteTapemark', CdStdCall);
 S.RegisterDelphiFunction(@GetTapeStatus, 'GetTapeStatus', CdStdCall);
 S.RegisterDelphiFunction(@GetTapeParameters, 'GetTapeParameters', CdStdCall);
 S.RegisterDelphiFunction(@SetTapeParameters, 'SetTapeParameters', CdStdCall);
 S.RegisterDelphiFunction(@Beep, 'Beep', CdStdCall);
 S.RegisterDelphiFunction(@MulDiv, 'MulDiv', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemTime, 'GetSystemTime', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemTimeAsFileTime, 'GetSystemTimeAsFileTime', CdStdCall);
 S.RegisterDelphiFunction(@SetSystemTime, 'SetSystemTime', CdStdCall);
 S.RegisterDelphiFunction(@GetLocalTime, 'GetLocalTime', CdStdCall);
 S.RegisterDelphiFunction(@SetLocalTime, 'SetLocalTime', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemInfo, 'GetSystemInfo', CdStdCall);
 S.RegisterDelphiFunction(@IsProcessorFeaturePresent, 'IsProcessorFeaturePresent', CdStdCall);
 S.RegisterDelphiFunction(@SystemTimeToTzSpecificLocalTime, 'SystemTimeToTzSpecificLocalTime', CdStdCall);
 S.RegisterDelphiFunction(@GetTimeZoneInformation, 'GetTimeZoneInformation', CdStdCall);
 S.RegisterDelphiFunction(@SetTimeZoneInformation, 'SetTimeZoneInformation', CdStdCall);
 S.RegisterDelphiFunction(@SystemTimeToFileTime, 'SystemTimeToFileTime', CdStdCall);
 S.RegisterDelphiFunction(@FileTimeToLocalFileTime, 'FileTimeToLocalFileTime', CdStdCall);
 S.RegisterDelphiFunction(@LocalFileTimeToFileTime, 'LocalFileTimeToFileTime', CdStdCall);
 S.RegisterDelphiFunction(@FileTimeToSystemTime, 'FileTimeToSystemTime', CdStdCall);
 S.RegisterDelphiFunction(@CompareFileTime, 'CompareFileTime', CdStdCall);
 S.RegisterDelphiFunction(@FileTimeToDosDateTime, 'FileTimeToDosDateTime', CdStdCall);
 S.RegisterDelphiFunction(@DosDateTimeToFileTime, 'DosDateTimeToFileTime', CdStdCall);
 S.RegisterDelphiFunction(@GetTickCount, 'GetTickCount', CdStdCall);
 S.RegisterDelphiFunction(@SetSystemTimeAdjustment, 'SetSystemTimeAdjustment', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemTimeAdjustment, 'GetSystemTimeAdjustment', CdStdCall);
 S.RegisterDelphiFunction(@FormatMessage, 'FormatMessage', CdStdCall);
 S.RegisterDelphiFunction(@FormatMessageA, 'FormatMessageA', CdStdCall);
 S.RegisterDelphiFunction(@FormatMessageW, 'FormatMessageW', CdStdCall);
 S.RegisterDelphiFunction(@CreatePipe, 'CreatePipe', CdStdCall);
 S.RegisterDelphiFunction(@ConnectNamedPipe, 'ConnectNamedPipe', CdStdCall);
 S.RegisterDelphiFunction(@DisconnectNamedPipe, 'DisconnectNamedPipe', CdStdCall);
 S.RegisterDelphiFunction(@SetNamedPipeHandleState, 'SetNamedPipeHandleState', CdStdCall);
 S.RegisterDelphiFunction(@GetNamedPipeInfo, 'GetNamedPipeInfo', CdStdCall);
 S.RegisterDelphiFunction(@PeekNamedPipe, 'PeekNamedPipe', CdStdCall);
 S.RegisterDelphiFunction(@TransactNamedPipe, 'TransactNamedPipe', CdStdCall);
 S.RegisterDelphiFunction(@CreateMailslot, 'CreateMailslot', CdStdCall);
 S.RegisterDelphiFunction(@CreateMailslotA, 'CreateMailslotA', CdStdCall);
 S.RegisterDelphiFunction(@CreateMailslotW, 'CreateMailslotW', CdStdCall);
 S.RegisterDelphiFunction(@GetMailslotInfo, 'GetMailslotInfo', CdStdCall);
 S.RegisterDelphiFunction(@SetMailslotInfo, 'SetMailslotInfo', CdStdCall);
 S.RegisterDelphiFunction(@MapViewOfFile, 'MapViewOfFile', CdStdCall);
 S.RegisterDelphiFunction(@FlushViewOfFile, 'FlushViewOfFile', CdStdCall);
 S.RegisterDelphiFunction(@UnmapViewOfFile, 'UnmapViewOfFile', CdStdCall);
 S.RegisterDelphiFunction(@EncryptFile, 'EncryptFile', CdStdCall);
 S.RegisterDelphiFunction(@EncryptFileA, 'EncryptFileA', CdStdCall);
 S.RegisterDelphiFunction(@EncryptFileW, 'EncryptFileW', CdStdCall);
 S.RegisterDelphiFunction(@DecryptFile, 'DecryptFile', CdStdCall);
 S.RegisterDelphiFunction(@DecryptFileA, 'DecryptFileA', CdStdCall);
 S.RegisterDelphiFunction(@DecryptFileW, 'DecryptFileW', CdStdCall);
 S.RegisterDelphiFunction(@OpenRaw, 'OpenRaw', CdStdCall);
 S.RegisterDelphiFunction(@OpenRawA, 'OpenRawA', CdStdCall);
 S.RegisterDelphiFunction(@OpenRawW, 'OpenRawW', CdStdCall);
 S.RegisterDelphiFunction(@ReadRaw, 'ReadRaw', CdStdCall);
 S.RegisterDelphiFunction(@WriteRaw, 'WriteRaw', CdStdCall);
 S.RegisterDelphiFunction(@CloseRaw, 'CloseRaw', CdStdCall);
 S.RegisterDelphiFunction(@QueryRecoveryAgents, 'QueryRecoveryAgents', CdStdCall);
 S.RegisterDelphiFunction(@QueryRecoveryAgentsA, 'QueryRecoveryAgentsA', CdStdCall);
 S.RegisterDelphiFunction(@QueryRecoveryAgentsW, 'QueryRecoveryAgentsW', CdStdCall);
 S.RegisterDelphiFunction(@lstrcmp, 'lstrcmp', CdStdCall);
 S.RegisterDelphiFunction(@lstrcmpA, 'lstrcmpA', CdStdCall);
 S.RegisterDelphiFunction(@lstrcmpW, 'lstrcmpW', CdStdCall);
 S.RegisterDelphiFunction(@lstrcmpi, 'lstrcmpi', CdStdCall);
 S.RegisterDelphiFunction(@lstrcmpiA, 'lstrcmpiA', CdStdCall);
 S.RegisterDelphiFunction(@lstrcmpiW, 'lstrcmpiW', CdStdCall);
 S.RegisterDelphiFunction(@lstrcpyn, 'lstrcpyn', CdStdCall);
 S.RegisterDelphiFunction(@lstrcpynA, 'lstrcpynA', CdStdCall);
 S.RegisterDelphiFunction(@lstrcpynW, 'lstrcpynW', CdStdCall);
 S.RegisterDelphiFunction(@lstrcpy, 'lstrcpy', CdStdCall);
 S.RegisterDelphiFunction(@lstrcpyA, 'lstrcpyA', CdStdCall);
 S.RegisterDelphiFunction(@lstrcpyW, 'lstrcpyW', CdStdCall);
 S.RegisterDelphiFunction(@lstrcat, 'lstrcat', CdStdCall);
 S.RegisterDelphiFunction(@lstrcatA, 'lstrcatA', CdStdCall);
 S.RegisterDelphiFunction(@lstrcatW, 'lstrcatW', CdStdCall);
 S.RegisterDelphiFunction(@lstrlen, 'lstrlen', CdStdCall);
 S.RegisterDelphiFunction(@lstrlenA, 'lstrlenA', CdStdCall);
 S.RegisterDelphiFunction(@lstrlenW, 'lstrlenW', CdStdCall);
 S.RegisterDelphiFunction(@OpenFile, 'OpenFile', CdStdCall);
 S.RegisterDelphiFunction(@_lopen, '_lopen', CdStdCall);
 S.RegisterDelphiFunction(@_lcreat, '_lcreat', CdStdCall);
 S.RegisterDelphiFunction(@_lread, '_lread', CdStdCall);
 S.RegisterDelphiFunction(@_lwrite, '_lwrite', CdStdCall);
 S.RegisterDelphiFunction(@_hread, '_hread', CdStdCall);
 S.RegisterDelphiFunction(@_hwrite, '_hwrite', CdStdCall);
 S.RegisterDelphiFunction(@_lclose, '_lclose', CdStdCall);
 S.RegisterDelphiFunction(@_llseek, '_llseek', CdStdCall);
 S.RegisterDelphiFunction(@IsTextUnicode, 'IsTextUnicode', CdStdCall);
 S.RegisterDelphiFunction(@TlsAlloc, 'TlsAlloc', CdStdCall);
 S.RegisterDelphiFunction(@TlsGetValue, 'TlsGetValue', CdStdCall);
 S.RegisterDelphiFunction(@TlsSetValue, 'TlsSetValue', CdStdCall);
 S.RegisterDelphiFunction(@TlsFree, 'TlsFree', CdStdCall);
 S.RegisterDelphiFunction(@SleepEx, 'SleepEx', CdStdCall);
 S.RegisterDelphiFunction(@WaitForSingleObjectEx, 'WaitForSingleObjectEx', CdStdCall);
 S.RegisterDelphiFunction(@WaitForMultipleObjectsEx, 'WaitForMultipleObjectsEx', CdStdCall);
 S.RegisterDelphiFunction(@SignalObjectAndWait, 'SignalObjectAndWait', CdStdCall);
 S.RegisterDelphiFunction(@ReadFileEx, 'ReadFileEx', CdStdCall);
 S.RegisterDelphiFunction(@WriteFileEx, 'WriteFileEx', CdStdCall);
 S.RegisterDelphiFunction(@BackupRead, 'BackupRead', CdStdCall);
 S.RegisterDelphiFunction(@BackupSeek, 'BackupSeek', CdStdCall);
 S.RegisterDelphiFunction(@BackupWrite, 'BackupWrite', CdStdCall);
 S.RegisterDelphiFunction(@CreateMutex, 'CreateMutex', CdStdCall);
 S.RegisterDelphiFunction(@CreateMutexA, 'CreateMutexA', CdStdCall);
 S.RegisterDelphiFunction(@CreateMutexW, 'CreateMutexW', CdStdCall);
 S.RegisterDelphiFunction(@OpenMutex, 'OpenMutex', CdStdCall);
 S.RegisterDelphiFunction(@OpenMutexA, 'OpenMutexA', CdStdCall);
 S.RegisterDelphiFunction(@OpenMutexW, 'OpenMutexW', CdStdCall);
 S.RegisterDelphiFunction(@CreateEvent, 'CreateEvent', CdStdCall);
 S.RegisterDelphiFunction(@CreateEventA, 'CreateEventA', CdStdCall);
 S.RegisterDelphiFunction(@CreateEventW, 'CreateEventW', CdStdCall);
 S.RegisterDelphiFunction(@OpenEvent, 'OpenEvent', CdStdCall);
 S.RegisterDelphiFunction(@OpenEventA, 'OpenEventA', CdStdCall);
 S.RegisterDelphiFunction(@OpenEventW, 'OpenEventW', CdStdCall);
 S.RegisterDelphiFunction(@CreateSemaphore, 'CreateSemaphore', CdStdCall);
 S.RegisterDelphiFunction(@CreateSemaphoreA, 'CreateSemaphoreA', CdStdCall);
 S.RegisterDelphiFunction(@CreateSemaphoreW, 'CreateSemaphoreW', CdStdCall);
 S.RegisterDelphiFunction(@OpenSemaphore, 'OpenSemaphore', CdStdCall);
 S.RegisterDelphiFunction(@OpenSemaphoreA, 'OpenSemaphoreA', CdStdCall);
 S.RegisterDelphiFunction(@OpenSemaphoreW, 'OpenSemaphoreW', CdStdCall);
 S.RegisterDelphiFunction(@CreateWaitableTimer, 'CreateWaitableTimer', CdStdCall);
 S.RegisterDelphiFunction(@CreateWaitableTimerA, 'CreateWaitableTimerA', CdStdCall);
 S.RegisterDelphiFunction(@CreateWaitableTimerW, 'CreateWaitableTimerW', CdStdCall);
 S.RegisterDelphiFunction(@OpenWaitableTimer, 'OpenWaitableTimer', CdStdCall);
 S.RegisterDelphiFunction(@OpenWaitableTimerA, 'OpenWaitableTimerA', CdStdCall);
 S.RegisterDelphiFunction(@OpenWaitableTimerW, 'OpenWaitableTimerW', CdStdCall);
 S.RegisterDelphiFunction(@SetWaitableTimer, 'SetWaitableTimer', CdStdCall);
 S.RegisterDelphiFunction(@CancelWaitableTimer, 'CancelWaitableTimer', CdStdCall);
 S.RegisterDelphiFunction(@CreateFileMapping, 'CreateFileMapping', CdStdCall);
 S.RegisterDelphiFunction(@CreateFileMappingA, 'CreateFileMappingA', CdStdCall);
 S.RegisterDelphiFunction(@CreateFileMappingW, 'CreateFileMappingW', CdStdCall);
 S.RegisterDelphiFunction(@OpenFileMapping, 'OpenFileMapping', CdStdCall);
 S.RegisterDelphiFunction(@OpenFileMappingA, 'OpenFileMappingA', CdStdCall);
 S.RegisterDelphiFunction(@OpenFileMappingW, 'OpenFileMappingW', CdStdCall);
 S.RegisterDelphiFunction(@GetLogicalDriveStrings, 'GetLogicalDriveStrings', CdStdCall);
 S.RegisterDelphiFunction(@GetLogicalDriveStringsA, 'GetLogicalDriveStringsA', CdStdCall);
 S.RegisterDelphiFunction(@GetLogicalDriveStringsW, 'GetLogicalDriveStringsW', CdStdCall);
 S.RegisterDelphiFunction(@LoadLibrary, 'LoadLibrary', CdStdCall);
 S.RegisterDelphiFunction(@LoadLibraryA, 'LoadLibraryA', CdStdCall);
 S.RegisterDelphiFunction(@LoadLibraryW, 'LoadLibraryW', CdStdCall);
 S.RegisterDelphiFunction(@LoadLibraryEx, 'LoadLibraryEx', CdStdCall);
 S.RegisterDelphiFunction(@LoadLibraryExA, 'LoadLibraryExA', CdStdCall);
 S.RegisterDelphiFunction(@LoadLibraryExW, 'LoadLibraryExW', CdStdCall);
 S.RegisterDelphiFunction(@GetModuleFileName, 'GetModuleFileName', CdStdCall);
 S.RegisterDelphiFunction(@GetModuleFileNameA, 'GetModuleFileNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetModuleFileNameW, 'GetModuleFileNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetModuleHandle, 'GetModuleHandle', CdStdCall);
 S.RegisterDelphiFunction(@GetModuleHandleA, 'GetModuleHandleA', CdStdCall);
 S.RegisterDelphiFunction(@GetModuleHandleW, 'GetModuleHandleW', CdStdCall);
 S.RegisterDelphiFunction(@CreateProcess, 'CreateProcess', CdStdCall);
 S.RegisterDelphiFunction(@CreateProcessA, 'CreateProcessA', CdStdCall);
 S.RegisterDelphiFunction(@CreateProcessW, 'CreateProcessW', CdStdCall);
 S.RegisterDelphiFunction(@SetProcessShutdownParameters, 'SetProcessShutdownParameters', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessShutdownParameters, 'GetProcessShutdownParameters', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessVersion, 'GetProcessVersion', CdStdCall);
 S.RegisterDelphiFunction(@FatalAppExit, 'FatalAppExit', CdStdCall);
 S.RegisterDelphiFunction(@FatalAppExitA, 'FatalAppExitA', CdStdCall);
 S.RegisterDelphiFunction(@FatalAppExitW, 'FatalAppExitW', CdStdCall);
 S.RegisterDelphiFunction(@GetStartupInfo, 'GetStartupInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetStartupInfoA, 'GetStartupInfoA', CdStdCall);
 S.RegisterDelphiFunction(@GetStartupInfoW, 'GetStartupInfoW', CdStdCall);
 S.RegisterDelphiFunction(@GetCommandLine, 'GetCommandLine', CdStdCall);
 S.RegisterDelphiFunction(@GetCommandLineA, 'GetCommandLineA', CdStdCall);
 S.RegisterDelphiFunction(@GetCommandLineW, 'GetCommandLineW', CdStdCall);
 S.RegisterDelphiFunction(@GetEnvironmentVariable, 'GetEnvironmentVariable', CdStdCall);
 S.RegisterDelphiFunction(@GetEnvironmentVariableA, 'GetEnvironmentVariableA', CdStdCall);
 S.RegisterDelphiFunction(@GetEnvironmentVariableW, 'GetEnvironmentVariableW', CdStdCall);
 S.RegisterDelphiFunction(@SetEnvironmentVariable, 'SetEnvironmentVariable', CdStdCall);
 S.RegisterDelphiFunction(@SetEnvironmentVariableA, 'SetEnvironmentVariableA', CdStdCall);
 S.RegisterDelphiFunction(@SetEnvironmentVariableW, 'SetEnvironmentVariableW', CdStdCall);
 S.RegisterDelphiFunction(@ExpandEnvironmentStrings, 'ExpandEnvironmentStrings', CdStdCall);
 S.RegisterDelphiFunction(@ExpandEnvironmentStringsA, 'ExpandEnvironmentStringsA', CdStdCall);
 S.RegisterDelphiFunction(@ExpandEnvironmentStringsW, 'ExpandEnvironmentStringsW', CdStdCall);
 S.RegisterDelphiFunction(@OutputDebugString, 'OutputDebugString', CdStdCall);
 S.RegisterDelphiFunction(@OutputDebugStringA, 'OutputDebugStringA', CdStdCall);
 S.RegisterDelphiFunction(@OutputDebugStringW, 'OutputDebugStringW', CdStdCall);
 S.RegisterDelphiFunction(@FindResource, 'FindResource', CdStdCall);
 S.RegisterDelphiFunction(@FindResourceA, 'FindResourceA', CdStdCall);
 S.RegisterDelphiFunction(@FindResourceW, 'FindResourceW', CdStdCall);
 S.RegisterDelphiFunction(@FindResourceEx, 'FindResourceEx', CdStdCall);
 S.RegisterDelphiFunction(@FindResourceExA, 'FindResourceExA', CdStdCall);
 S.RegisterDelphiFunction(@FindResourceExW, 'FindResourceExW', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceTypes, 'EnumResourceTypes', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceTypesA, 'EnumResourceTypesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceTypesW, 'EnumResourceTypesW', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceNames, 'EnumResourceNames', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceNamesA, 'EnumResourceNamesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceNamesW, 'EnumResourceNamesW', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceLanguages, 'EnumResourceLanguages', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceLanguagesA, 'EnumResourceLanguagesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumResourceLanguagesW, 'EnumResourceLanguagesW', CdStdCall);
 S.RegisterDelphiFunction(@BeginUpdateResource, 'BeginUpdateResource', CdStdCall);
 S.RegisterDelphiFunction(@BeginUpdateResourceA, 'BeginUpdateResourceA', CdStdCall);
 S.RegisterDelphiFunction(@BeginUpdateResourceW, 'BeginUpdateResourceW', CdStdCall);
 S.RegisterDelphiFunction(@UpdateResource, 'UpdateResource', CdStdCall);
 S.RegisterDelphiFunction(@UpdateResourceA, 'UpdateResourceA', CdStdCall);
 S.RegisterDelphiFunction(@UpdateResourceW, 'UpdateResourceW', CdStdCall);
 S.RegisterDelphiFunction(@EndUpdateResource, 'EndUpdateResource', CdStdCall);
 S.RegisterDelphiFunction(@EndUpdateResourceA, 'EndUpdateResourceA', CdStdCall);
 S.RegisterDelphiFunction(@EndUpdateResourceW, 'EndUpdateResourceW', CdStdCall);
 S.RegisterDelphiFunction(@GlobalAddAtom, 'GlobalAddAtom', CdStdCall);
 S.RegisterDelphiFunction(@GlobalAddAtomA, 'GlobalAddAtomA', CdStdCall);
 S.RegisterDelphiFunction(@GlobalAddAtomW, 'GlobalAddAtomW', CdStdCall);
 S.RegisterDelphiFunction(@GlobalFindAtom, 'GlobalFindAtom', CdStdCall);
 S.RegisterDelphiFunction(@GlobalFindAtomA, 'GlobalFindAtomA', CdStdCall);
 S.RegisterDelphiFunction(@GlobalFindAtomW, 'GlobalFindAtomW', CdStdCall);
 S.RegisterDelphiFunction(@GlobalGetAtomName, 'GlobalGetAtomName', CdStdCall);
 S.RegisterDelphiFunction(@GlobalGetAtomNameA, 'GlobalGetAtomNameA', CdStdCall);
 S.RegisterDelphiFunction(@GlobalGetAtomNameW, 'GlobalGetAtomNameW', CdStdCall);
 S.RegisterDelphiFunction(@AddAtom, 'AddAtom', CdStdCall);
 S.RegisterDelphiFunction(@AddAtomA, 'AddAtomA', CdStdCall);
 S.RegisterDelphiFunction(@AddAtomW, 'AddAtomW', CdStdCall);
 S.RegisterDelphiFunction(@FindAtom, 'FindAtom', CdStdCall);
 S.RegisterDelphiFunction(@FindAtomA, 'FindAtomA', CdStdCall);
 S.RegisterDelphiFunction(@FindAtomW, 'FindAtomW', CdStdCall);
 S.RegisterDelphiFunction(@GetAtomName, 'GetAtomName', CdStdCall);
 S.RegisterDelphiFunction(@GetAtomNameA, 'GetAtomNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetAtomNameW, 'GetAtomNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileInt, 'GetProfileInt', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileIntA, 'GetProfileIntA', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileIntW, 'GetProfileIntW', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileString, 'GetProfileString', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileStringA, 'GetProfileStringA', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileStringW, 'GetProfileStringW', CdStdCall);
 S.RegisterDelphiFunction(@WriteProfileString, 'WriteProfileString', CdStdCall);
 S.RegisterDelphiFunction(@WriteProfileStringA, 'WriteProfileStringA', CdStdCall);
 S.RegisterDelphiFunction(@WriteProfileStringW, 'WriteProfileStringW', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileSection, 'GetProfileSection', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileSectionA, 'GetProfileSectionA', CdStdCall);
 S.RegisterDelphiFunction(@GetProfileSectionW, 'GetProfileSectionW', CdStdCall);
 S.RegisterDelphiFunction(@WriteProfileSection, 'WriteProfileSection', CdStdCall);
 S.RegisterDelphiFunction(@WriteProfileSectionA, 'WriteProfileSectionA', CdStdCall);
 S.RegisterDelphiFunction(@WriteProfileSectionW, 'WriteProfileSectionW', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileInt, 'GetPrivateProfileInt', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileIntA, 'GetPrivateProfileIntA', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileIntW, 'GetPrivateProfileIntW', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileString, 'GetPrivateProfileString', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileStringA, 'GetPrivateProfileStringA', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileStringW, 'GetPrivateProfileStringW', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileString, 'WritePrivateProfileString', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileStringA, 'WritePrivateProfileStringA', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileStringW, 'WritePrivateProfileStringW', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileSection, 'GetPrivateProfileSection', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileSectionA, 'GetPrivateProfileSectionA', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileSectionW, 'GetPrivateProfileSectionW', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileSection, 'WritePrivateProfileSection', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileSectionA, 'WritePrivateProfileSectionA', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileSectionW, 'WritePrivateProfileSectionW', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileSectionNames, 'GetPrivateProfileSectionNames', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileSectionNamesA, 'GetPrivateProfileSectionNamesA', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileSectionNamesW, 'GetPrivateProfileSectionNamesW', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileStruct, 'GetPrivateProfileStruct', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileStructA, 'GetPrivateProfileStructA', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateProfileStructW, 'GetPrivateProfileStructW', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileStruct, 'WritePrivateProfileStruct', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileStructA, 'WritePrivateProfileStructA', CdStdCall);
 S.RegisterDelphiFunction(@WritePrivateProfileStructW, 'WritePrivateProfileStructW', CdStdCall);
 S.RegisterDelphiFunction(@GetDriveType, 'GetDriveType', CdStdCall);
 S.RegisterDelphiFunction(@GetDriveTypeA, 'GetDriveTypeA', CdStdCall);
 S.RegisterDelphiFunction(@GetDriveTypeW, 'GetDriveTypeW', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemDirectory, 'GetSystemDirectory', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemDirectoryA, 'GetSystemDirectoryA', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemDirectoryW, 'GetSystemDirectoryW', CdStdCall);
 S.RegisterDelphiFunction(@GetTempPath, 'GetTempPath', CdStdCall);
 S.RegisterDelphiFunction(@GetTempPathA, 'GetTempPathA', CdStdCall);
 S.RegisterDelphiFunction(@GetTempPathW, 'GetTempPathW', CdStdCall);
 S.RegisterDelphiFunction(@GetTempFileName, 'GetTempFileName', CdStdCall);
 S.RegisterDelphiFunction(@GetTempFileNameA, 'GetTempFileNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetTempFileNameW, 'GetTempFileNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowsDirectory, 'GetWindowsDirectory', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowsDirectoryA, 'GetWindowsDirectoryA', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowsDirectoryW, 'GetWindowsDirectoryW', CdStdCall);
 S.RegisterDelphiFunction(@SetCurrentDirectory, 'SetCurrentDirectory', CdStdCall);
 S.RegisterDelphiFunction(@SetCurrentDirectoryA, 'SetCurrentDirectoryA', CdStdCall);
 S.RegisterDelphiFunction(@SetCurrentDirectoryW, 'SetCurrentDirectoryW', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentDirectory, 'GetCurrentDirectory', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentDirectoryA, 'GetCurrentDirectoryA', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentDirectoryW, 'GetCurrentDirectoryW', CdStdCall);
 S.RegisterDelphiFunction(@GetDiskFreeSpace, 'GetDiskFreeSpace', CdStdCall);
 S.RegisterDelphiFunction(@GetDiskFreeSpaceA, 'GetDiskFreeSpaceA', CdStdCall);
 S.RegisterDelphiFunction(@GetDiskFreeSpaceW, 'GetDiskFreeSpaceW', CdStdCall);
 S.RegisterDelphiFunction(@GetDiskFreeSpaceEx, 'GetDiskFreeSpaceEx', CdStdCall);
 S.RegisterDelphiFunction(@GetDiskFreeSpaceExA, 'GetDiskFreeSpaceExA', CdStdCall);
 S.RegisterDelphiFunction(@GetDiskFreeSpaceExW, 'GetDiskFreeSpaceExW', CdStdCall);
 S.RegisterDelphiFunction(@CreateDirectory, 'CreateDirectory', CdStdCall);
 S.RegisterDelphiFunction(@CreateDirectoryA, 'CreateDirectoryA', CdStdCall);
 S.RegisterDelphiFunction(@CreateDirectoryW, 'CreateDirectoryW', CdStdCall);
 S.RegisterDelphiFunction(@CreateDirectoryEx, 'CreateDirectoryEx', CdStdCall);
 S.RegisterDelphiFunction(@CreateDirectoryExA, 'CreateDirectoryExA', CdStdCall);
 S.RegisterDelphiFunction(@CreateDirectoryExW, 'CreateDirectoryExW', CdStdCall);
 S.RegisterDelphiFunction(@RemoveDirectory, 'RemoveDirectory', CdStdCall);
 S.RegisterDelphiFunction(@RemoveDirectoryA, 'RemoveDirectoryA', CdStdCall);
 S.RegisterDelphiFunction(@RemoveDirectoryW, 'RemoveDirectoryW', CdStdCall);
 S.RegisterDelphiFunction(@GetFullPathName, 'GetFullPathName', CdStdCall);
 S.RegisterDelphiFunction(@GetFullPathNameA, 'GetFullPathNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetFullPathNameW, 'GetFullPathNameW', CdStdCall);
 S.RegisterDelphiFunction(@DefineDosDevice, 'DefineDosDevice', CdStdCall);
 S.RegisterDelphiFunction(@DefineDosDeviceA, 'DefineDosDeviceA', CdStdCall);
 S.RegisterDelphiFunction(@DefineDosDeviceW, 'DefineDosDeviceW', CdStdCall);
 S.RegisterDelphiFunction(@QueryDosDevice, 'QueryDosDevice', CdStdCall);
 S.RegisterDelphiFunction(@QueryDosDeviceA, 'QueryDosDeviceA', CdStdCall);
 S.RegisterDelphiFunction(@QueryDosDeviceW, 'QueryDosDeviceW', CdStdCall);
 S.RegisterDelphiFunction(@CreateFile, 'CreateFile', CdStdCall);
 S.RegisterDelphiFunction(@CreateFileA, 'CreateFileA', CdStdCall);
 S.RegisterDelphiFunction(@CreateFileW, 'CreateFileW', CdStdCall);
 S.RegisterDelphiFunction(@SetFileAttributes, 'SetFileAttributes', CdStdCall);
 S.RegisterDelphiFunction(@SetFileAttributesA, 'SetFileAttributesA', CdStdCall);
 S.RegisterDelphiFunction(@SetFileAttributesW, 'SetFileAttributesW', CdStdCall);
 S.RegisterDelphiFunction(@GetFileAttributes, 'GetFileAttributes', CdStdCall);
 S.RegisterDelphiFunction(@GetFileAttributesA, 'GetFileAttributesA', CdStdCall);
 S.RegisterDelphiFunction(@GetFileAttributesW, 'GetFileAttributesW', CdStdCall);
 S.RegisterDelphiFunction(@GetFileAttributesEx, 'GetFileAttributesEx', CdStdCall);
 S.RegisterDelphiFunction(@GetFileAttributesExA, 'GetFileAttributesExA', CdStdCall);
 S.RegisterDelphiFunction(@GetFileAttributesExW, 'GetFileAttributesExW', CdStdCall);
 S.RegisterDelphiFunction(@GetCompressedFileSize, 'GetCompressedFileSize', CdStdCall);
 S.RegisterDelphiFunction(@GetCompressedFileSizeA, 'GetCompressedFileSizeA', CdStdCall);
 S.RegisterDelphiFunction(@GetCompressedFileSizeW, 'GetCompressedFileSizeW', CdStdCall);
 S.RegisterDelphiFunction(@DeleteFile, 'DeleteFile', CdStdCall);
 S.RegisterDelphiFunction(@DeleteFileA, 'DeleteFileA', CdStdCall);
 S.RegisterDelphiFunction(@DeleteFileW, 'DeleteFileW', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstFileEx, 'FindFirstFileEx', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstFileExA, 'FindFirstFileExA', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstFileExW, 'FindFirstFileExW', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstFile, 'FindFirstFile', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstFileA, 'FindFirstFileA', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstFileW, 'FindFirstFileW', CdStdCall);
 S.RegisterDelphiFunction(@FindNextFile, 'FindNextFile', CdStdCall);
 S.RegisterDelphiFunction(@FindNextFileA, 'FindNextFileA', CdStdCall);
 S.RegisterDelphiFunction(@FindNextFileW, 'FindNextFileW', CdStdCall);
 S.RegisterDelphiFunction(@SearchPath, 'SearchPath', CdStdCall);
 S.RegisterDelphiFunction(@SearchPathA, 'SearchPathA', CdStdCall);
 S.RegisterDelphiFunction(@SearchPathW, 'SearchPathW', CdStdCall);
 S.RegisterDelphiFunction(@CopyFile, 'CopyFile', CdStdCall);
 S.RegisterDelphiFunction(@CopyFileA, 'CopyFileA', CdStdCall);
 S.RegisterDelphiFunction(@CopyFileW, 'CopyFileW', CdStdCall);
 S.RegisterDelphiFunction(@CopyFileEx, 'CopyFileEx', CdStdCall);
 S.RegisterDelphiFunction(@CopyFileExA, 'CopyFileExA', CdStdCall);
 S.RegisterDelphiFunction(@CopyFileExW, 'CopyFileExW', CdStdCall);
 S.RegisterDelphiFunction(@MoveFile, 'MoveFile', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileA, 'MoveFileA', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileW, 'MoveFileW', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileEx, 'MoveFileEx', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileExA, 'MoveFileExA', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileExW, 'MoveFileExW', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileWithProgress, 'MoveFileWithProgress', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileWithProgressA, 'MoveFileWithProgressA', CdStdCall);
 S.RegisterDelphiFunction(@MoveFileWithProgressW, 'MoveFileWithProgressW', CdStdCall);
 S.RegisterDelphiFunction(@CreateHardLink, 'CreateHardLink', CdStdCall);
 S.RegisterDelphiFunction(@CreateHardLinkA, 'CreateHardLinkA', CdStdCall);
 S.RegisterDelphiFunction(@CreateHardLinkW, 'CreateHardLinkW', CdStdCall);
 S.RegisterDelphiFunction(@CreateNamedPipe, 'CreateNamedPipe', CdStdCall);
 S.RegisterDelphiFunction(@CreateNamedPipeA, 'CreateNamedPipeA', CdStdCall);
 S.RegisterDelphiFunction(@CreateNamedPipeW, 'CreateNamedPipeW', CdStdCall);
 S.RegisterDelphiFunction(@GetNamedPipeHandleState, 'GetNamedPipeHandleState', CdStdCall);
 S.RegisterDelphiFunction(@GetNamedPipeHandleStateA, 'GetNamedPipeHandleStateA', CdStdCall);
 S.RegisterDelphiFunction(@GetNamedPipeHandleStateW, 'GetNamedPipeHandleStateW', CdStdCall);
 S.RegisterDelphiFunction(@CallNamedPipe, 'CallNamedPipe', CdStdCall);
 S.RegisterDelphiFunction(@CallNamedPipeA, 'CallNamedPipeA', CdStdCall);
 S.RegisterDelphiFunction(@CallNamedPipeW, 'CallNamedPipeW', CdStdCall);
 S.RegisterDelphiFunction(@WaitNamedPipe, 'WaitNamedPipe', CdStdCall);
 S.RegisterDelphiFunction(@WaitNamedPipeA, 'WaitNamedPipeA', CdStdCall);
 S.RegisterDelphiFunction(@WaitNamedPipeW, 'WaitNamedPipeW', CdStdCall);
 S.RegisterDelphiFunction(@SetVolumeLabel, 'SetVolumeLabel', CdStdCall);
 S.RegisterDelphiFunction(@SetVolumeLabelA, 'SetVolumeLabelA', CdStdCall);
 S.RegisterDelphiFunction(@SetVolumeLabelW, 'SetVolumeLabelW', CdStdCall);
 S.RegisterDelphiFunction(@SetFileApisToOEM, 'SetFileApisToOEM', CdStdCall);
 S.RegisterDelphiFunction(@SetFileApisToANSI, 'SetFileApisToANSI', CdStdCall);
 S.RegisterDelphiFunction(@AreFileApisANSI, 'AreFileApisANSI', CdStdCall);
 S.RegisterDelphiFunction(@GetVolumeInformation, 'GetVolumeInformation', CdStdCall);
 S.RegisterDelphiFunction(@GetVolumeInformationA, 'GetVolumeInformationA', CdStdCall);
 S.RegisterDelphiFunction(@GetVolumeInformationW, 'GetVolumeInformationW', CdStdCall);
 S.RegisterDelphiFunction(@CancelIo, 'CancelIo', CdStdCall);
 S.RegisterDelphiFunction(@ClearEventLog, 'ClearEventLog', CdStdCall);
 S.RegisterDelphiFunction(@ClearEventLogA, 'ClearEventLogA', CdStdCall);
 S.RegisterDelphiFunction(@ClearEventLogW, 'ClearEventLogW', CdStdCall);
 S.RegisterDelphiFunction(@BackupEventLog, 'BackupEventLog', CdStdCall);
 S.RegisterDelphiFunction(@BackupEventLogA, 'BackupEventLogA', CdStdCall);
 S.RegisterDelphiFunction(@BackupEventLogW, 'BackupEventLogW', CdStdCall);
 S.RegisterDelphiFunction(@CloseEventLog, 'CloseEventLog', CdStdCall);
 S.RegisterDelphiFunction(@DeregisterEventSource, 'DeregisterEventSource', CdStdCall);
 S.RegisterDelphiFunction(@NotifyChangeEventLog, 'NotifyChangeEventLog', CdStdCall);
 S.RegisterDelphiFunction(@GetNumberOfEventLogRecords, 'GetNumberOfEventLogRecords', CdStdCall);
 S.RegisterDelphiFunction(@GetOldestEventLogRecord, 'GetOldestEventLogRecord', CdStdCall);
 S.RegisterDelphiFunction(@OpenEventLog, 'OpenEventLog', CdStdCall);
 S.RegisterDelphiFunction(@OpenEventLogA, 'OpenEventLogA', CdStdCall);
 S.RegisterDelphiFunction(@OpenEventLogW, 'OpenEventLogW', CdStdCall);
 S.RegisterDelphiFunction(@RegisterEventSource, 'RegisterEventSource', CdStdCall);
 S.RegisterDelphiFunction(@RegisterEventSourceA, 'RegisterEventSourceA', CdStdCall);
 S.RegisterDelphiFunction(@RegisterEventSourceW, 'RegisterEventSourceW', CdStdCall);
 S.RegisterDelphiFunction(@OpenBackupEventLog, 'OpenBackupEventLog', CdStdCall);
 S.RegisterDelphiFunction(@OpenBackupEventLogA, 'OpenBackupEventLogA', CdStdCall);
 S.RegisterDelphiFunction(@OpenBackupEventLogW, 'OpenBackupEventLogW', CdStdCall);
 S.RegisterDelphiFunction(@ReadEventLog, 'ReadEventLog', CdStdCall);
 S.RegisterDelphiFunction(@ReadEventLogA, 'ReadEventLogA', CdStdCall);
 S.RegisterDelphiFunction(@ReadEventLogW, 'ReadEventLogW', CdStdCall);
 S.RegisterDelphiFunction(@ReportEvent, 'ReportEvent', CdStdCall);
 S.RegisterDelphiFunction(@ReportEventA, 'ReportEventA', CdStdCall);
 S.RegisterDelphiFunction(@ReportEventW, 'ReportEventW', CdStdCall);
 S.RegisterDelphiFunction(@DuplicateToken, 'DuplicateToken', CdStdCall);
 S.RegisterDelphiFunction(@GetKernelObjectSecurity, 'GetKernelObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@ImpersonateNamedPipeClient, 'ImpersonateNamedPipeClient', CdStdCall);
 S.RegisterDelphiFunction(@ImpersonateSelf, 'ImpersonateSelf', CdStdCall);
 S.RegisterDelphiFunction(@RevertToSelf, 'RevertToSelf', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadToken, 'SetThreadToken', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheck, 'AccessCheck', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByType, 'AccessCheckByType', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByTypeResultList, 'AccessCheckByTypeResultList', CdStdCall);
 S.RegisterDelphiFunction(@OpenProcessToken, 'OpenProcessToken', CdStdCall);
 S.RegisterDelphiFunction(@OpenThreadToken, 'OpenThreadToken', CdStdCall);
 S.RegisterDelphiFunction(@GetTokenInformation, 'GetTokenInformation', CdStdCall);
 S.RegisterDelphiFunction(@SetTokenInformation, 'SetTokenInformation', CdStdCall);
 S.RegisterDelphiFunction(@AdjustTokenPrivileges, 'AdjustTokenPrivileges', CdStdCall);
 S.RegisterDelphiFunction(@AdjustTokenPrivileges, 'AdjustTokenPrivileges', CdStdCall);
 S.RegisterDelphiFunction(@AdjustTokenGroups, 'AdjustTokenGroups', CdStdCall);
 S.RegisterDelphiFunction(@PrivilegeCheck, 'PrivilegeCheck', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckAndAuditAlarm, 'AccessCheckAndAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckAndAuditAlarmA, 'AccessCheckAndAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckAndAuditAlarmW, 'AccessCheckAndAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByTypeAndAuditAlarm, 'AccessCheckByTypeAndAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByTypeAndAuditAlarmA, 'AccessCheckByTypeAndAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByTypeAndAuditAlarmW, 'AccessCheckByTypeAndAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByTypeResultListAndAuditAlarm, 'AccessCheckByTypeResultListAndAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByTypeResultListAndAuditAlarmA, 'AccessCheckByTypeResultListAndAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@AccessCheckByTypeResultListAndAuditAlarmW, 'AccessCheckByTypeResultListAndAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@ObjectOpenAuditAlarm, 'ObjectOpenAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@ObjectOpenAuditAlarmA, 'ObjectOpenAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@ObjectOpenAuditAlarmW, 'ObjectOpenAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@ObjectPrivilegeAuditAlarm, 'ObjectPrivilegeAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@ObjectPrivilegeAuditAlarmA, 'ObjectPrivilegeAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@ObjectPrivilegeAuditAlarmW, 'ObjectPrivilegeAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@ObjectCloseAuditAlarm, 'ObjectCloseAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@ObjectCloseAuditAlarmA, 'ObjectCloseAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@ObjectCloseAuditAlarmW, 'ObjectCloseAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@ObjectDeleteAuditAlarm, 'ObjectDeleteAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@ObjectDeleteAuditAlarmA, 'ObjectDeleteAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@ObjectDeleteAuditAlarmW, 'ObjectDeleteAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@PrivilegedServiceAuditAlarm, 'PrivilegedServiceAuditAlarm', CdStdCall);
 S.RegisterDelphiFunction(@PrivilegedServiceAuditAlarmA, 'PrivilegedServiceAuditAlarmA', CdStdCall);
 S.RegisterDelphiFunction(@PrivilegedServiceAuditAlarmW, 'PrivilegedServiceAuditAlarmW', CdStdCall);
 S.RegisterDelphiFunction(@IsValidSid, 'IsValidSid', CdStdCall);
 S.RegisterDelphiFunction(@EqualSid, 'EqualSid', CdStdCall);
 S.RegisterDelphiFunction(@EqualPrefixSid, 'EqualPrefixSid', CdStdCall);
 S.RegisterDelphiFunction(@GetSidLengthRequired, 'GetSidLengthRequired', CdStdCall);
 S.RegisterDelphiFunction(@AllocateAndInitializeSid, 'AllocateAndInitializeSid', CdStdCall);
 S.RegisterDelphiFunction(@FreeSid, 'FreeSid', CdStdCall);
 S.RegisterDelphiFunction(@InitializeSid, 'InitializeSid', CdStdCall);
 S.RegisterDelphiFunction(@GetSidIdentifierAuthority, 'GetSidIdentifierAuthority', CdStdCall);
 S.RegisterDelphiFunction(@GetSidSubAuthority, 'GetSidSubAuthority', CdStdCall);
 S.RegisterDelphiFunction(@GetSidSubAuthorityCount, 'GetSidSubAuthorityCount', CdStdCall);
 S.RegisterDelphiFunction(@GetLengthSid, 'GetLengthSid', CdStdCall);
 S.RegisterDelphiFunction(@CopySid, 'CopySid', CdStdCall);
 S.RegisterDelphiFunction(@AreAllAccessesGranted, 'AreAllAccessesGranted', CdStdCall);
 S.RegisterDelphiFunction(@AreAnyAccessesGranted, 'AreAnyAccessesGranted', CdStdCall);
 S.RegisterDelphiFunction(@MapGenericMask, 'MapGenericMask', CdStdCall);
 S.RegisterDelphiFunction(@IsValidAcl, 'IsValidAcl', CdStdCall);
 S.RegisterDelphiFunction(@InitializeAcl, 'InitializeAcl', CdStdCall);
 S.RegisterDelphiFunction(@GetAclInformation, 'GetAclInformation', CdStdCall);
 S.RegisterDelphiFunction(@SetAclInformation, 'SetAclInformation', CdStdCall);
 S.RegisterDelphiFunction(@AddAce, 'AddAce', CdStdCall);
 S.RegisterDelphiFunction(@DeleteAce, 'DeleteAce', CdStdCall);
 S.RegisterDelphiFunction(@GetAce, 'GetAce', CdStdCall);
 S.RegisterDelphiFunction(@AddAccessAllowedAce, 'AddAccessAllowedAce', CdStdCall);
 S.RegisterDelphiFunction(@AddAccessAllowedAceEx, 'AddAccessAllowedAceEx', CdStdCall);
 S.RegisterDelphiFunction(@AddAccessDeniedAce, 'AddAccessDeniedAce', CdStdCall);
 S.RegisterDelphiFunction(@AddAccessDeniedAceEx, 'AddAccessDeniedAceEx', CdStdCall);
 S.RegisterDelphiFunction(@AddAuditAccessAce, 'AddAuditAccessAce', CdStdCall);
 S.RegisterDelphiFunction(@AddAuditAccessAceEx, 'AddAuditAccessAceEx', CdStdCall);
 S.RegisterDelphiFunction(@AddAccessAllowedObjectAce, 'AddAccessAllowedObjectAce', CdStdCall);
 S.RegisterDelphiFunction(@AddAccessDeniedObjectAce, 'AddAccessDeniedObjectAce', CdStdCall);
 S.RegisterDelphiFunction(@AddAuditAccessObjectAce, 'AddAuditAccessObjectAce', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstFreeAce, 'FindFirstFreeAce', CdStdCall);
 S.RegisterDelphiFunction(@InitializeSecurityDescriptor, 'InitializeSecurityDescriptor', CdStdCall);
 S.RegisterDelphiFunction(@IsValidSecurityDescriptor, 'IsValidSecurityDescriptor', CdStdCall);
 S.RegisterDelphiFunction(@GetSecurityDescriptorLength, 'GetSecurityDescriptorLength', CdStdCall);
 S.RegisterDelphiFunction(@GetSecurityDescriptorControl, 'GetSecurityDescriptorControl', CdStdCall);
 S.RegisterDelphiFunction(@SetSecurityDescriptorControl, 'SetSecurityDescriptorControl', CdStdCall);
 S.RegisterDelphiFunction(@SetSecurityDescriptorDacl, 'SetSecurityDescriptorDacl', CdStdCall);
 S.RegisterDelphiFunction(@GetSecurityDescriptorDacl, 'GetSecurityDescriptorDacl', CdStdCall);
 S.RegisterDelphiFunction(@SetSecurityDescriptorSacl, 'SetSecurityDescriptorSacl', CdStdCall);
 S.RegisterDelphiFunction(@GetSecurityDescriptorSacl, 'GetSecurityDescriptorSacl', CdStdCall);
 S.RegisterDelphiFunction(@SetSecurityDescriptorOwner, 'SetSecurityDescriptorOwner', CdStdCall);
 S.RegisterDelphiFunction(@GetSecurityDescriptorOwner, 'GetSecurityDescriptorOwner', CdStdCall);
 S.RegisterDelphiFunction(@SetSecurityDescriptorGroup, 'SetSecurityDescriptorGroup', CdStdCall);
 S.RegisterDelphiFunction(@GetSecurityDescriptorGroup, 'GetSecurityDescriptorGroup', CdStdCall);
 S.RegisterDelphiFunction(@CreatePrivateObjectSecurity, 'CreatePrivateObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@ConvertToAutoInheritPrivateObjectSecurity, 'ConvertToAutoInheritPrivateObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@CreatePrivateObjectSecurityEx, 'CreatePrivateObjectSecurityEx', CdStdCall);
 S.RegisterDelphiFunction(@SetPrivateObjectSecurity, 'SetPrivateObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@SetPrivateObjectSecurityEx, 'SetPrivateObjectSecurityEx', CdStdCall);
 S.RegisterDelphiFunction(@GetPrivateObjectSecurity, 'GetPrivateObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@DestroyPrivateObjectSecurity, 'DestroyPrivateObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@MakeSelfRelativeSD, 'MakeSelfRelativeSD', CdStdCall);
 S.RegisterDelphiFunction(@MakeAbsoluteSD, 'MakeAbsoluteSD', CdStdCall);
 S.RegisterDelphiFunction(@SetFileSecurity, 'SetFileSecurity', CdStdCall);
 S.RegisterDelphiFunction(@SetFileSecurityA, 'SetFileSecurityA', CdStdCall);
 S.RegisterDelphiFunction(@SetFileSecurityW, 'SetFileSecurityW', CdStdCall);
 S.RegisterDelphiFunction(@GetFileSecurity, 'GetFileSecurity', CdStdCall);
 S.RegisterDelphiFunction(@GetFileSecurityA, 'GetFileSecurityA', CdStdCall);
 S.RegisterDelphiFunction(@GetFileSecurityW, 'GetFileSecurityW', CdStdCall);
 S.RegisterDelphiFunction(@SetKernelObjectSecurity, 'SetKernelObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstChangeNotification, 'FindFirstChangeNotification', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstChangeNotificationA, 'FindFirstChangeNotificationA', CdStdCall);
 S.RegisterDelphiFunction(@FindFirstChangeNotificationW, 'FindFirstChangeNotificationW', CdStdCall);
 S.RegisterDelphiFunction(@FindNextChangeNotification, 'FindNextChangeNotification', CdStdCall);
 S.RegisterDelphiFunction(@FindCloseChangeNotification, 'FindCloseChangeNotification', CdStdCall);
 S.RegisterDelphiFunction(@ReadDirectoryChanges, 'ReadDirectoryChanges', CdStdCall);
 S.RegisterDelphiFunction(@ReadDirectoryChangesW, 'ReadDirectoryChangesW', CdStdCall);
 S.RegisterDelphiFunction(@VirtualLock, 'VirtualLock', CdStdCall);
 S.RegisterDelphiFunction(@VirtualUnlock, 'VirtualUnlock', CdStdCall);
 S.RegisterDelphiFunction(@MapViewOfFileEx, 'MapViewOfFileEx', CdStdCall);
 S.RegisterDelphiFunction(@SetPriorityClass, 'SetPriorityClass', CdStdCall);
 S.RegisterDelphiFunction(@GetPriorityClass, 'GetPriorityClass', CdStdCall);
 S.RegisterDelphiFunction(@IsBadReadPtr, 'IsBadReadPtr', CdStdCall);
 S.RegisterDelphiFunction(@IsBadWritePtr, 'IsBadWritePtr', CdStdCall);
 S.RegisterDelphiFunction(@IsBadHugeReadPtr, 'IsBadHugeReadPtr', CdStdCall);
 S.RegisterDelphiFunction(@IsBadHugeWritePtr, 'IsBadHugeWritePtr', CdStdCall);
 S.RegisterDelphiFunction(@IsBadCodePtr, 'IsBadCodePtr', CdStdCall);
 S.RegisterDelphiFunction(@IsBadStringPtr, 'IsBadStringPtr', CdStdCall);
 S.RegisterDelphiFunction(@IsBadStringPtrA, 'IsBadStringPtrA', CdStdCall);
 S.RegisterDelphiFunction(@IsBadStringPtrW, 'IsBadStringPtrW', CdStdCall);
 S.RegisterDelphiFunction(@LookupAccountSid, 'LookupAccountSid', CdStdCall);
 S.RegisterDelphiFunction(@LookupAccountSidA, 'LookupAccountSidA', CdStdCall);
 S.RegisterDelphiFunction(@LookupAccountSidW, 'LookupAccountSidW', CdStdCall);
 S.RegisterDelphiFunction(@LookupAccountName, 'LookupAccountName', CdStdCall);
 S.RegisterDelphiFunction(@LookupAccountNameA, 'LookupAccountNameA', CdStdCall);
 S.RegisterDelphiFunction(@LookupAccountNameW, 'LookupAccountNameW', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeValue, 'LookupPrivilegeValue', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeValueA, 'LookupPrivilegeValueA', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeValueW, 'LookupPrivilegeValueW', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeName, 'LookupPrivilegeName', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeNameA, 'LookupPrivilegeNameA', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeNameW, 'LookupPrivilegeNameW', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeDisplayName, 'LookupPrivilegeDisplayName', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeDisplayNameA, 'LookupPrivilegeDisplayNameA', CdStdCall);
 S.RegisterDelphiFunction(@LookupPrivilegeDisplayNameW, 'LookupPrivilegeDisplayNameW', CdStdCall);
 S.RegisterDelphiFunction(@AllocateLocallyUniqueId, 'AllocateLocallyUniqueId', CdStdCall);
 S.RegisterDelphiFunction(@BuildCommDCB, 'BuildCommDCB', CdStdCall);
 S.RegisterDelphiFunction(@BuildCommDCBA, 'BuildCommDCBA', CdStdCall);
 S.RegisterDelphiFunction(@BuildCommDCBW, 'BuildCommDCBW', CdStdCall);
 S.RegisterDelphiFunction(@BuildCommDCBAndTimeouts, 'BuildCommDCBAndTimeouts', CdStdCall);
 S.RegisterDelphiFunction(@BuildCommDCBAndTimeoutsA, 'BuildCommDCBAndTimeoutsA', CdStdCall);
 S.RegisterDelphiFunction(@BuildCommDCBAndTimeoutsW, 'BuildCommDCBAndTimeoutsW', CdStdCall);
 S.RegisterDelphiFunction(@CommConfigDialog, 'CommConfigDialog', CdStdCall);
 S.RegisterDelphiFunction(@CommConfigDialogA, 'CommConfigDialogA', CdStdCall);
 S.RegisterDelphiFunction(@CommConfigDialogW, 'CommConfigDialogW', CdStdCall);
 S.RegisterDelphiFunction(@GetDefaultCommConfig, 'GetDefaultCommConfig', CdStdCall);
 S.RegisterDelphiFunction(@GetDefaultCommConfigA, 'GetDefaultCommConfigA', CdStdCall);
 S.RegisterDelphiFunction(@GetDefaultCommConfigW, 'GetDefaultCommConfigW', CdStdCall);
 S.RegisterDelphiFunction(@SetDefaultCommConfig, 'SetDefaultCommConfig', CdStdCall);
 S.RegisterDelphiFunction(@SetDefaultCommConfigA, 'SetDefaultCommConfigA', CdStdCall);
 S.RegisterDelphiFunction(@SetDefaultCommConfigW, 'SetDefaultCommConfigW', CdStdCall);
 S.RegisterDelphiFunction(@GetComputerName, 'GetComputerName', CdStdCall);
 S.RegisterDelphiFunction(@GetComputerNameA, 'GetComputerNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetComputerNameW, 'GetComputerNameW', CdStdCall);
 S.RegisterDelphiFunction(@SetComputerName, 'SetComputerName', CdStdCall);
 S.RegisterDelphiFunction(@SetComputerNameA, 'SetComputerNameA', CdStdCall);
 S.RegisterDelphiFunction(@SetComputerNameW, 'SetComputerNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetUserName, 'GetUserName', CdStdCall);
 S.RegisterDelphiFunction(@GetUserNameA, 'GetUserNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetUserNameW, 'GetUserNameW', CdStdCall);
 S.RegisterDelphiFunction(@LogonUser, 'LogonUser', CdStdCall);
 S.RegisterDelphiFunction(@LogonUserA, 'LogonUserA', CdStdCall);
 S.RegisterDelphiFunction(@LogonUserW, 'LogonUserW', CdStdCall);
 S.RegisterDelphiFunction(@ImpersonateLoggedOnUser, 'ImpersonateLoggedOnUser', CdStdCall);
 S.RegisterDelphiFunction(@CreateProcessAsUser, 'CreateProcessAsUser', CdStdCall);
 S.RegisterDelphiFunction(@CreateProcessAsUserA, 'CreateProcessAsUserA', CdStdCall);
 S.RegisterDelphiFunction(@CreateProcessAsUserW, 'CreateProcessAsUserW', CdStdCall);
 S.RegisterDelphiFunction(@DuplicateTokenEx, 'DuplicateTokenEx', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentHwProfile, 'GetCurrentHwProfile', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentHwProfileA, 'GetCurrentHwProfileA', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentHwProfileW, 'GetCurrentHwProfileW', CdStdCall);
 S.RegisterDelphiFunction(@QueryPerformanceCounter, 'QueryPerformanceCounter', CdStdCall);
 S.RegisterDelphiFunction(@QueryPerformanceFrequency, 'QueryPerformanceFrequency', CdStdCall);
 S.RegisterDelphiFunction(@GetVersionEx, 'GetVersionEx', CdStdCall);
 S.RegisterDelphiFunction(@GetVersionExA, 'GetVersionExA', CdStdCall);
 S.RegisterDelphiFunction(@GetVersionExW, 'GetVersionExW', CdStdCall);
 S.RegisterDelphiFunction(@Succeeded, 'Succeeded', cdRegister);
 S.RegisterDelphiFunction(@Failed, 'Failed', cdRegister);
 S.RegisterDelphiFunction(@IsError, 'IsError', cdRegister);
 S.RegisterDelphiFunction(@HResultCode, 'HResultCode', cdRegister);
 S.RegisterDelphiFunction(@HResultFacility, 'HResultFacility', cdRegister);
 S.RegisterDelphiFunction(@HResultSeverity, 'HResultSeverity', cdRegister);
 S.RegisterDelphiFunction(@MakeResult, 'MakeResult', cdRegister);
 S.RegisterDelphiFunction(@HResultFromWin32, 'HResultFromWin32', cdRegister);
 S.RegisterDelphiFunction(@HResultFromNT, 'HResultFromNT', cdRegister);
 S.RegisterDelphiFunction(@GetSystemPowerStatus, 'GetSystemPowerStatus', CdStdCall);
 S.RegisterDelphiFunction(@SetSystemPowerState, 'SetSystemPowerState', CdStdCall);
 S.RegisterDelphiFunction(@WinSubmitCertificate, 'WinSubmitCertificate', CdStdCall);
 S.RegisterDelphiFunction(@WinVerifyTrust, 'WinVerifyTrust', CdStdCall);
 S.RegisterDelphiFunction(@WinLoadTrustProvider, 'WinLoadTrustProvider', CdStdCall);
 S.RegisterDelphiFunction(@MakeROP4, 'MakeROP4', cdRegister);
 S.RegisterDelphiFunction(@GetCValue, 'GetCValue', cdRegister);
 S.RegisterDelphiFunction(@GetMValue, 'GetMValue', cdRegister);
 S.RegisterDelphiFunction(@GetYValue, 'GetYValue', cdRegister);
 S.RegisterDelphiFunction(@GetKValue, 'GetKValue', cdRegister);
 S.RegisterDelphiFunction(@CMYK, 'CMYK', cdRegister);
 S.RegisterDelphiFunction(@RGB, 'RGB', cdRegister);
 S.RegisterDelphiFunction(@PaletteRGB, 'PaletteRGB', cdRegister);
 S.RegisterDelphiFunction(@PaletteIndex, 'PaletteIndex', cdRegister);
 S.RegisterDelphiFunction(@GetRValue, 'GetRValue', cdRegister);
 S.RegisterDelphiFunction(@GetGValue, 'GetGValue', cdRegister);
 S.RegisterDelphiFunction(@GetBValue, 'GetBValue', cdRegister);
 S.RegisterDelphiFunction(@AddFontResource, 'AddFontResource', CdStdCall);
 S.RegisterDelphiFunction(@AddFontResourceA, 'AddFontResourceA', CdStdCall);
 S.RegisterDelphiFunction(@AddFontResourceW, 'AddFontResourceW', CdStdCall);
 S.RegisterDelphiFunction(@AnimatePalette, 'AnimatePalette', CdStdCall);
 S.RegisterDelphiFunction(@Arc, 'Arc', CdStdCall);
 S.RegisterDelphiFunction(@BitBlt, 'BitBlt', CdStdCall);
 S.RegisterDelphiFunction(@CancelDC, 'CancelDC', CdStdCall);
 S.RegisterDelphiFunction(@Chord, 'Chord', CdStdCall);
 S.RegisterDelphiFunction(@ChoosePixelFormat, 'ChoosePixelFormat', CdStdCall);
 S.RegisterDelphiFunction(@CloseMetaFile, 'CloseMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@CombineRgn, 'CombineRgn', CdStdCall);
 S.RegisterDelphiFunction(@CopyMetaFile, 'CopyMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@CopyMetaFileA, 'CopyMetaFileA', CdStdCall);
 S.RegisterDelphiFunction(@CopyMetaFileW, 'CopyMetaFileW', CdStdCall);
 S.RegisterDelphiFunction(@CreateBitmap, 'CreateBitmap', CdStdCall);
 S.RegisterDelphiFunction(@CreateBitmapIndirect, 'CreateBitmapIndirect', CdStdCall);
 S.RegisterDelphiFunction(@CreateBrushIndirect, 'CreateBrushIndirect', CdStdCall);
 S.RegisterDelphiFunction(@CreateCompatibleBitmap, 'CreateCompatibleBitmap', CdStdCall);
 S.RegisterDelphiFunction(@CreateDiscardableBitmap, 'CreateDiscardableBitmap', CdStdCall);
 S.RegisterDelphiFunction(@CreateCompatibleDC, 'CreateCompatibleDC', CdStdCall);
 S.RegisterDelphiFunction(@CreateDC, 'CreateDC', CdStdCall);
 S.RegisterDelphiFunction(@CreateDCA, 'CreateDCA', CdStdCall);
 S.RegisterDelphiFunction(@CreateDCW, 'CreateDCW', CdStdCall);
 S.RegisterDelphiFunction(@CreateDIBitmap, 'CreateDIBitmap', CdStdCall);
 S.RegisterDelphiFunction(@CreateDIBPatternBrush, 'CreateDIBPatternBrush', CdStdCall);
 S.RegisterDelphiFunction(@CreateDIBPatternBrushPt, 'CreateDIBPatternBrushPt', CdStdCall);
 S.RegisterDelphiFunction(@CreateEllipticRgn, 'CreateEllipticRgn', CdStdCall);
 S.RegisterDelphiFunction(@CreateEllipticRgnIndirect, 'CreateEllipticRgnIndirect', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontIndirect, 'CreateFontIndirect', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontIndirectA, 'CreateFontIndirectA', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontIndirectW, 'CreateFontIndirectW', CdStdCall);
 S.RegisterDelphiFunction(@CreateFont, 'CreateFont', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontA, 'CreateFontA', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontW, 'CreateFontW', CdStdCall);
 S.RegisterDelphiFunction(@CreateHatchBrush, 'CreateHatchBrush', CdStdCall);
 S.RegisterDelphiFunction(@CreateIC, 'CreateIC', CdStdCall);
 S.RegisterDelphiFunction(@CreateICA, 'CreateICA', CdStdCall);
 S.RegisterDelphiFunction(@CreateICW, 'CreateICW', CdStdCall);
 S.RegisterDelphiFunction(@CreateMetaFile, 'CreateMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@CreateMetaFileA, 'CreateMetaFileA', CdStdCall);
 S.RegisterDelphiFunction(@CreateMetaFileW, 'CreateMetaFileW', CdStdCall);
 S.RegisterDelphiFunction(@CreatePalette, 'CreatePalette', CdStdCall);
 S.RegisterDelphiFunction(@CreatePen, 'CreatePen', CdStdCall);
 S.RegisterDelphiFunction(@CreatePenIndirect, 'CreatePenIndirect', CdStdCall);
 S.RegisterDelphiFunction(@CreatePatternBrush, 'CreatePatternBrush', CdStdCall);
 S.RegisterDelphiFunction(@CreateRectRgn, 'CreateRectRgn', CdStdCall);
 S.RegisterDelphiFunction(@CreateRectRgnIndirect, 'CreateRectRgnIndirect', CdStdCall);
 S.RegisterDelphiFunction(@CreateRoundRectRgn, 'CreateRoundRectRgn', CdStdCall);
 S.RegisterDelphiFunction(@CreateScalableFontResource, 'CreateScalableFontResource', CdStdCall);
 S.RegisterDelphiFunction(@CreateScalableFontResourceA, 'CreateScalableFontResourceA', CdStdCall);
 S.RegisterDelphiFunction(@CreateScalableFontResourceW, 'CreateScalableFontResourceW', CdStdCall);
 S.RegisterDelphiFunction(@CreateSolidBrush, 'CreateSolidBrush', CdStdCall);
 S.RegisterDelphiFunction(@DeleteDC, 'DeleteDC', CdStdCall);
 S.RegisterDelphiFunction(@DeleteMetaFile, 'DeleteMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@DeleteObject, 'DeleteObject', CdStdCall);
 S.RegisterDelphiFunction(@DescribePixelFormat, 'DescribePixelFormat', CdStdCall);
 S.RegisterDelphiFunction(@DeviceCapabilities, 'DeviceCapabilities', CdStdCall);
 S.RegisterDelphiFunction(@DeviceCapabilitiesA, 'DeviceCapabilitiesA', CdStdCall);
 S.RegisterDelphiFunction(@DeviceCapabilitiesW, 'DeviceCapabilitiesW', CdStdCall);
 S.RegisterDelphiFunction(@DrawEscape, 'DrawEscape', CdStdCall);
 S.RegisterDelphiFunction(@Ellipse, 'Ellipse', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontFamiliesEx, 'EnumFontFamiliesEx', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontFamiliesExA, 'EnumFontFamiliesExA', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontFamiliesExW, 'EnumFontFamiliesExW', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontFamilies, 'EnumFontFamilies', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontFamiliesA, 'EnumFontFamiliesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontFamiliesW, 'EnumFontFamiliesW', CdStdCall);
 S.RegisterDelphiFunction(@EnumFonts, 'EnumFonts', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontsA, 'EnumFontsA', CdStdCall);
 S.RegisterDelphiFunction(@EnumFontsW, 'EnumFontsW', CdStdCall);
 S.RegisterDelphiFunction(@EnumObjects, 'EnumObjects', CdStdCall);
 S.RegisterDelphiFunction(@EqualRgn, 'EqualRgn', CdStdCall);
 S.RegisterDelphiFunction(@Escape, 'Escape', CdStdCall);
 S.RegisterDelphiFunction(@ExtEscape, 'ExtEscape', CdStdCall);
 S.RegisterDelphiFunction(@ExcludeClipRect, 'ExcludeClipRect', CdStdCall);
 S.RegisterDelphiFunction(@ExtCreateRegion, 'ExtCreateRegion', CdStdCall);
 S.RegisterDelphiFunction(@ExtFloodFill, 'ExtFloodFill', CdStdCall);
 S.RegisterDelphiFunction(@FillRgn, 'FillRgn', CdStdCall);
 S.RegisterDelphiFunction(@FloodFill, 'FloodFill', CdStdCall);
 S.RegisterDelphiFunction(@FrameRgn, 'FrameRgn', CdStdCall);
 S.RegisterDelphiFunction(@GetROP2, 'GetROP2', CdStdCall);
 S.RegisterDelphiFunction(@GetAspectRatioFilterEx, 'GetAspectRatioFilterEx', CdStdCall);
 S.RegisterDelphiFunction(@GetBkColor, 'GetBkColor', CdStdCall);
 S.RegisterDelphiFunction(@GetDCBrushColor, 'GetDCBrushColor', CdStdCall);
 S.RegisterDelphiFunction(@GetDCPenColor, 'GetDCPenColor', CdStdCall);
 S.RegisterDelphiFunction(@GetBkMode, 'GetBkMode', CdStdCall);
 S.RegisterDelphiFunction(@GetBitmapBits, 'GetBitmapBits', CdStdCall);
 S.RegisterDelphiFunction(@GetBitmapDimensionEx, 'GetBitmapDimensionEx', CdStdCall);
 S.RegisterDelphiFunction(@GetBoundsRect, 'GetBoundsRect', CdStdCall);
 S.RegisterDelphiFunction(@GetBrushOrgEx, 'GetBrushOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidth, 'GetCharWidth', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidthA, 'GetCharWidthA', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidthW, 'GetCharWidthW', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidth32, 'GetCharWidth32', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidth32A, 'GetCharWidth32A', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidth32W, 'GetCharWidth32W', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidthFloat, 'GetCharWidthFloat', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidthFloatA, 'GetCharWidthFloatA', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidthFloatW, 'GetCharWidthFloatW', CdStdCall);
 S.RegisterDelphiFunction(@GetCharABCWidths, 'GetCharABCWidths', CdStdCall);
 S.RegisterDelphiFunction(@GetCharABCWidthsA, 'GetCharABCWidthsA', CdStdCall);
 S.RegisterDelphiFunction(@GetCharABCWidthsW, 'GetCharABCWidthsW', CdStdCall);
 S.RegisterDelphiFunction(@GetCharABCWidthsFloat, 'GetCharABCWidthsFloat', CdStdCall);
 S.RegisterDelphiFunction(@GetCharABCWidthsFloatA, 'GetCharABCWidthsFloatA', CdStdCall);
 S.RegisterDelphiFunction(@GetCharABCWidthsFloatW, 'GetCharABCWidthsFloatW', CdStdCall);
 S.RegisterDelphiFunction(@GetClipBox, 'GetClipBox', CdStdCall);
 S.RegisterDelphiFunction(@GetClipRgn, 'GetClipRgn', CdStdCall);
 S.RegisterDelphiFunction(@GetMetaRgn, 'GetMetaRgn', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentObject, 'GetCurrentObject', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrentPositionEx, 'GetCurrentPositionEx', CdStdCall);
 S.RegisterDelphiFunction(@GetDeviceCaps, 'GetDeviceCaps', CdStdCall);
 S.RegisterDelphiFunction(@GetDIBits, 'GetDIBits', CdStdCall);
 S.RegisterDelphiFunction(@GetFontData, 'GetFontData', CdStdCall);
 S.RegisterDelphiFunction(@GetGlyphOutline, 'GetGlyphOutline', CdStdCall);
 S.RegisterDelphiFunction(@GetGlyphOutlineA, 'GetGlyphOutlineA', CdStdCall);
 S.RegisterDelphiFunction(@GetGlyphOutlineW, 'GetGlyphOutlineW', CdStdCall);
 S.RegisterDelphiFunction(@GetGraphicsMode, 'GetGraphicsMode', CdStdCall);
 S.RegisterDelphiFunction(@GetMapMode, 'GetMapMode', CdStdCall);
 S.RegisterDelphiFunction(@GetMetaFileBitsEx, 'GetMetaFileBitsEx', CdStdCall);
 S.RegisterDelphiFunction(@GetMetaFile, 'GetMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@GetMetaFileA, 'GetMetaFileA', CdStdCall);
 S.RegisterDelphiFunction(@GetMetaFileW, 'GetMetaFileW', CdStdCall);
 S.RegisterDelphiFunction(@GetNearestColor, 'GetNearestColor', CdStdCall);
 S.RegisterDelphiFunction(@GetNearestPaletteIndex, 'GetNearestPaletteIndex', CdStdCall);
 S.RegisterDelphiFunction(@GetObjectType, 'GetObjectType', CdStdCall);
 S.RegisterDelphiFunction(@GetOutlineTextMetrics, 'GetOutlineTextMetrics', CdStdCall);
 S.RegisterDelphiFunction(@GetOutlineTextMetricsA, 'GetOutlineTextMetricsA', CdStdCall);
 S.RegisterDelphiFunction(@GetOutlineTextMetricsW, 'GetOutlineTextMetricsW', CdStdCall);
 S.RegisterDelphiFunction(@GetPaletteEntries, 'GetPaletteEntries', CdStdCall);
 S.RegisterDelphiFunction(@GetPixel, 'GetPixel', CdStdCall);
 S.RegisterDelphiFunction(@GetPixelFormat, 'GetPixelFormat', CdStdCall);
 S.RegisterDelphiFunction(@GetPolyFillMode, 'GetPolyFillMode', CdStdCall);
 S.RegisterDelphiFunction(@GetRasterizerCaps, 'GetRasterizerCaps', CdStdCall);
 S.RegisterDelphiFunction(@GetRegionData, 'GetRegionData', CdStdCall);
 S.RegisterDelphiFunction(@GetRgnBox, 'GetRgnBox', CdStdCall);
 S.RegisterDelphiFunction(@GetStockObject, 'GetStockObject', CdStdCall);
 S.RegisterDelphiFunction(@GetStretchBltMode, 'GetStretchBltMode', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemPaletteEntries, 'GetSystemPaletteEntries', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemPaletteUse, 'GetSystemPaletteUse', CdStdCall);
 S.RegisterDelphiFunction(@GetTextCharacterExtra, 'GetTextCharacterExtra', CdStdCall);
 S.RegisterDelphiFunction(@GetTextAlign, 'GetTextAlign', CdStdCall);
 S.RegisterDelphiFunction(@GetTextColor, 'GetTextColor', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentPoint, 'GetTextExtentPoint', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentPointA, 'GetTextExtentPointA', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentPointW, 'GetTextExtentPointW', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentPoint32, 'GetTextExtentPoint32', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentPoint32A, 'GetTextExtentPoint32A', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentPoint32W, 'GetTextExtentPoint32W', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentExPoint, 'GetTextExtentExPoint', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentExPointA, 'GetTextExtentExPointA', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentExPointW, 'GetTextExtentExPointW', CdStdCall);
 S.RegisterDelphiFunction(@GetTextCharset, 'GetTextCharset', CdStdCall);
 S.RegisterDelphiFunction(@GetTextCharsetInfo, 'GetTextCharsetInfo', CdStdCall);
 S.RegisterDelphiFunction(@TranslateCharsetInfo, 'TranslateCharsetInfo', cdRegister);
 S.RegisterDelphiFunction(@GetFontLanguageInfo, 'GetFontLanguageInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetCharacterPlacement, 'GetCharacterPlacement', CdStdCall);
 S.RegisterDelphiFunction(@GetCharacterPlacementA, 'GetCharacterPlacementA', CdStdCall);
 S.RegisterDelphiFunction(@GetCharacterPlacementW, 'GetCharacterPlacementW', CdStdCall);
 S.RegisterDelphiFunction(@GetFontUnicodeRanges, 'GetFontUnicodeRanges', CdStdCall);
 S.RegisterDelphiFunction(@GetGlyphIndices, 'GetGlyphIndices', CdStdCall);
 S.RegisterDelphiFunction(@GetGlyphIndicesA, 'GetGlyphIndicesA', CdStdCall);
 S.RegisterDelphiFunction(@GetGlyphIndicesW, 'GetGlyphIndicesW', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentPointI, 'GetTextExtentPointI', CdStdCall);
 S.RegisterDelphiFunction(@GetTextExtentExPointI, 'GetTextExtentExPointI', CdStdCall);
 S.RegisterDelphiFunction(@GetCharWidthI, 'GetCharWidthI', CdStdCall);
 S.RegisterDelphiFunction(@GetCharABCWidthsI, 'GetCharABCWidthsI', CdStdCall);
 S.RegisterDelphiFunction(@AddFontResourceEx, 'AddFontResourceEx', CdStdCall);
 S.RegisterDelphiFunction(@AddFontResourceExA, 'AddFontResourceExA', CdStdCall);
 S.RegisterDelphiFunction(@AddFontResourceExW, 'AddFontResourceExW', CdStdCall);
 S.RegisterDelphiFunction(@RemoveFontResourceEx, 'RemoveFontResourceEx', CdStdCall);
 S.RegisterDelphiFunction(@RemoveFontResourceExA, 'RemoveFontResourceExA', CdStdCall);
 S.RegisterDelphiFunction(@RemoveFontResourceExW, 'RemoveFontResourceExW', CdStdCall);
 S.RegisterDelphiFunction(@AddFontMemResourceEx, 'AddFontMemResourceEx', CdStdCall);
 S.RegisterDelphiFunction(@RemoveFontMemResourceEx, 'RemoveFontMemResourceEx', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontIndirectEx, 'CreateFontIndirectEx', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontIndirectExA, 'CreateFontIndirectExA', CdStdCall);
 S.RegisterDelphiFunction(@CreateFontIndirectExW, 'CreateFontIndirectExW', CdStdCall);
 S.RegisterDelphiFunction(@GetViewportExtEx, 'GetViewportExtEx', CdStdCall);
 S.RegisterDelphiFunction(@GetViewportOrgEx, 'GetViewportOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowExtEx, 'GetWindowExtEx', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowOrgEx, 'GetWindowOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@IntersectClipRect, 'IntersectClipRect', CdStdCall);
 S.RegisterDelphiFunction(@InvertRgn, 'InvertRgn', CdStdCall);
 S.RegisterDelphiFunction(@LineDDA, 'LineDDA', CdStdCall);
 S.RegisterDelphiFunction(@LineTo, 'LineTo', CdStdCall);
 S.RegisterDelphiFunction(@MaskBlt, 'MaskBlt', CdStdCall);
 S.RegisterDelphiFunction(@PlgBlt, 'PlgBlt', CdStdCall);
 S.RegisterDelphiFunction(@OffsetClipRgn, 'OffsetClipRgn', CdStdCall);
 S.RegisterDelphiFunction(@OffsetRgn, 'OffsetRgn', CdStdCall);
 S.RegisterDelphiFunction(@PatBlt, 'PatBlt', CdStdCall);
 S.RegisterDelphiFunction(@Pie, 'Pie', CdStdCall);
 S.RegisterDelphiFunction(@PlayMetaFile, 'PlayMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@PaintRgn, 'PaintRgn', CdStdCall);
 S.RegisterDelphiFunction(@PtInRegion, 'PtInRegion', CdStdCall);
 S.RegisterDelphiFunction(@PtVisible, 'PtVisible', CdStdCall);
 S.RegisterDelphiFunction(@RectInRegion, 'RectInRegion', CdStdCall);
 S.RegisterDelphiFunction(@RectVisible, 'RectVisible', CdStdCall);
 S.RegisterDelphiFunction(@Rectangle, 'Rectangle', CdStdCall);
 S.RegisterDelphiFunction(@RestoreDC, 'RestoreDC', CdStdCall);
 S.RegisterDelphiFunction(@ResetDC, 'ResetDC', CdStdCall);
 S.RegisterDelphiFunction(@ResetDCA, 'ResetDCA', CdStdCall);
 S.RegisterDelphiFunction(@ResetDCW, 'ResetDCW', CdStdCall);
 S.RegisterDelphiFunction(@RealizePalette, 'RealizePalette', CdStdCall);
 S.RegisterDelphiFunction(@RemoveFontResource, 'RemoveFontResource', CdStdCall);
 S.RegisterDelphiFunction(@RemoveFontResourceA, 'RemoveFontResourceA', CdStdCall);
 S.RegisterDelphiFunction(@RemoveFontResourceW, 'RemoveFontResourceW', CdStdCall);
 S.RegisterDelphiFunction(@RoundRect, 'RoundRect', CdStdCall);
 S.RegisterDelphiFunction(@ResizePalette, 'ResizePalette', CdStdCall);
 S.RegisterDelphiFunction(@SaveDC, 'SaveDC', CdStdCall);
 S.RegisterDelphiFunction(@SelectClipRgn, 'SelectClipRgn', CdStdCall);
 S.RegisterDelphiFunction(@ExtSelectClipRgn, 'ExtSelectClipRgn', CdStdCall);
 S.RegisterDelphiFunction(@SetMetaRgn, 'SetMetaRgn', CdStdCall);
 S.RegisterDelphiFunction(@SelectObject, 'SelectObject', CdStdCall);
 S.RegisterDelphiFunction(@SelectPalette, 'SelectPalette', CdStdCall);
 S.RegisterDelphiFunction(@SetBkColor, 'SetBkColor', CdStdCall);
 S.RegisterDelphiFunction(@SetDCBrushColor, 'SetDCBrushColor', CdStdCall);
 S.RegisterDelphiFunction(@SetDCPenColor, 'SetDCPenColor', CdStdCall);
 S.RegisterDelphiFunction(@SetBkMode, 'SetBkMode', CdStdCall);
 S.RegisterDelphiFunction(@SetBitmapBits, 'SetBitmapBits', CdStdCall);
 S.RegisterDelphiFunction(@SetBoundsRect, 'SetBoundsRect', CdStdCall);
 S.RegisterDelphiFunction(@SetDIBits, 'SetDIBits', CdStdCall);
 S.RegisterDelphiFunction(@SetDIBitsToDevice, 'SetDIBitsToDevice', CdStdCall);
 S.RegisterDelphiFunction(@SetMapperFlags, 'SetMapperFlags', CdStdCall);
 S.RegisterDelphiFunction(@SetGraphicsMode, 'SetGraphicsMode', CdStdCall);
 S.RegisterDelphiFunction(@SetMapMode, 'SetMapMode', CdStdCall);
 S.RegisterDelphiFunction(@SetMetaFileBitsEx, 'SetMetaFileBitsEx', CdStdCall);
 S.RegisterDelphiFunction(@SetPaletteEntries, 'SetPaletteEntries', CdStdCall);
 S.RegisterDelphiFunction(@SetPixel, 'SetPixel', CdStdCall);
 S.RegisterDelphiFunction(@SetPixelV, 'SetPixelV', CdStdCall);
 S.RegisterDelphiFunction(@SetPixelFormat, 'SetPixelFormat', CdStdCall);
 S.RegisterDelphiFunction(@SetPolyFillMode, 'SetPolyFillMode', CdStdCall);
 S.RegisterDelphiFunction(@StretchBlt, 'StretchBlt', CdStdCall);
 S.RegisterDelphiFunction(@SetRectRgn, 'SetRectRgn', CdStdCall);
 S.RegisterDelphiFunction(@StretchDIBits, 'StretchDIBits', CdStdCall);
 S.RegisterDelphiFunction(@SetROP2, 'SetROP2', CdStdCall);
 S.RegisterDelphiFunction(@SetStretchBltMode, 'SetStretchBltMode', CdStdCall);
 S.RegisterDelphiFunction(@SetSystemPaletteUse, 'SetSystemPaletteUse', CdStdCall);
 S.RegisterDelphiFunction(@SetTextCharacterExtra, 'SetTextCharacterExtra', CdStdCall);
 S.RegisterDelphiFunction(@SetTextColor, 'SetTextColor', CdStdCall);
 S.RegisterDelphiFunction(@SetTextAlign, 'SetTextAlign', CdStdCall);
 S.RegisterDelphiFunction(@SetTextJustification, 'SetTextJustification', CdStdCall);
 S.RegisterDelphiFunction(@UpdateColors, 'UpdateColors', CdStdCall);
 S.RegisterDelphiFunction(@AlphaBlend, 'AlphaBlend', CdStdCall);
 S.RegisterDelphiFunction(@AlphaDIBBlend, 'AlphaDIBBlend', CdStdCall);
 S.RegisterDelphiFunction(@TransparentBlt, 'TransparentBlt', CdStdCall);
 S.RegisterDelphiFunction(@TransparentDIBits, 'TransparentDIBits', CdStdCall);
 S.RegisterDelphiFunction(@GradientFill, 'GradientFill', CdStdCall);
 S.RegisterDelphiFunction(@PlayMetaFileRecord, 'PlayMetaFileRecord', CdStdCall);
 S.RegisterDelphiFunction(@EnumMetaFile, 'EnumMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@CloseEnhMetaFile, 'CloseEnhMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@CopyEnhMetaFile, 'CopyEnhMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@CopyEnhMetaFileA, 'CopyEnhMetaFileA', CdStdCall);
 S.RegisterDelphiFunction(@CopyEnhMetaFileW, 'CopyEnhMetaFileW', CdStdCall);
 S.RegisterDelphiFunction(@CreateEnhMetaFile, 'CreateEnhMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@CreateEnhMetaFileA, 'CreateEnhMetaFileA', CdStdCall);
 S.RegisterDelphiFunction(@CreateEnhMetaFileW, 'CreateEnhMetaFileW', CdStdCall);
 S.RegisterDelphiFunction(@DeleteEnhMetaFile, 'DeleteEnhMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@EnumEnhMetaFile, 'EnumEnhMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFile, 'GetEnhMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFileA, 'GetEnhMetaFileA', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFileW, 'GetEnhMetaFileW', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFileBits, 'GetEnhMetaFileBits', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFileDescription, 'GetEnhMetaFileDescription', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFileDescriptionA, 'GetEnhMetaFileDescriptionA', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFileDescriptionW, 'GetEnhMetaFileDescriptionW', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFileHeader, 'GetEnhMetaFileHeader', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFilePaletteEntries, 'GetEnhMetaFilePaletteEntries', CdStdCall);
 S.RegisterDelphiFunction(@GetEnhMetaFilePixelFormat, 'GetEnhMetaFilePixelFormat', CdStdCall);
 S.RegisterDelphiFunction(@GetWinMetaFileBits, 'GetWinMetaFileBits', CdStdCall);
 S.RegisterDelphiFunction(@PlayEnhMetaFile, 'PlayEnhMetaFile', CdStdCall);
 S.RegisterDelphiFunction(@PlayEnhMetaFileRecord, 'PlayEnhMetaFileRecord', CdStdCall);
 S.RegisterDelphiFunction(@SetEnhMetaFileBits, 'SetEnhMetaFileBits', CdStdCall);
 S.RegisterDelphiFunction(@SetWinMetaFileBits, 'SetWinMetaFileBits', CdStdCall);
 S.RegisterDelphiFunction(@GdiComment, 'GdiComment', CdStdCall);
 S.RegisterDelphiFunction(@GetTextMetrics, 'GetTextMetrics', CdStdCall);
 S.RegisterDelphiFunction(@GetTextMetricsA, 'GetTextMetricsA', CdStdCall);
 S.RegisterDelphiFunction(@GetTextMetricsW, 'GetTextMetricsW', CdStdCall);
 S.RegisterDelphiFunction(@AngleArc, 'AngleArc', CdStdCall);
 S.RegisterDelphiFunction(@GetWorldTransform, 'GetWorldTransform', CdStdCall);
 S.RegisterDelphiFunction(@SetWorldTransform, 'SetWorldTransform', CdStdCall);
 S.RegisterDelphiFunction(@ModifyWorldTransform, 'ModifyWorldTransform', CdStdCall);
 S.RegisterDelphiFunction(@CombineTransform, 'CombineTransform', CdStdCall);
 S.RegisterDelphiFunction(@CreateDIBSection, 'CreateDIBSection', CdStdCall);
 S.RegisterDelphiFunction(@GetDIBColorTable, 'GetDIBColorTable', CdStdCall);
 S.RegisterDelphiFunction(@SetDIBColorTable, 'SetDIBColorTable', CdStdCall);
 S.RegisterDelphiFunction(@SetColorAdjustment, 'SetColorAdjustment', CdStdCall);
 S.RegisterDelphiFunction(@GetColorAdjustment, 'GetColorAdjustment', CdStdCall);
 S.RegisterDelphiFunction(@CreateHalftonePalette, 'CreateHalftonePalette', CdStdCall);
 S.RegisterDelphiFunction(@StartDoc, 'StartDoc', CdStdCall);
 S.RegisterDelphiFunction(@StartDocA, 'StartDocA', CdStdCall);
 S.RegisterDelphiFunction(@StartDocW, 'StartDocW', CdStdCall);
 S.RegisterDelphiFunction(@EndDoc, 'EndDoc', CdStdCall);
 S.RegisterDelphiFunction(@StartPage, 'StartPage', CdStdCall);
 S.RegisterDelphiFunction(@EndPage, 'EndPage', CdStdCall);
 S.RegisterDelphiFunction(@AbortDoc, 'AbortDoc', CdStdCall);
 S.RegisterDelphiFunction(@SetAbortProc, 'SetAbortProc', CdStdCall);
 S.RegisterDelphiFunction(@AbortPath, 'AbortPath', CdStdCall);
 S.RegisterDelphiFunction(@ArcTo, 'ArcTo', CdStdCall);
 S.RegisterDelphiFunction(@BeginPath, 'BeginPath', CdStdCall);
 S.RegisterDelphiFunction(@CloseFigure, 'CloseFigure', CdStdCall);
 S.RegisterDelphiFunction(@EndPath, 'EndPath', CdStdCall);
 S.RegisterDelphiFunction(@FillPath, 'FillPath', CdStdCall);
 S.RegisterDelphiFunction(@FlattenPath, 'FlattenPath', CdStdCall);
 S.RegisterDelphiFunction(@GetPath, 'GetPath', CdStdCall);
 S.RegisterDelphiFunction(@PathToRegion, 'PathToRegion', CdStdCall);
 S.RegisterDelphiFunction(@PolyDraw, 'PolyDraw', CdStdCall);
 S.RegisterDelphiFunction(@SelectClipPath, 'SelectClipPath', CdStdCall);
 S.RegisterDelphiFunction(@SetArcDirection, 'SetArcDirection', CdStdCall);
 S.RegisterDelphiFunction(@SetMiterLimit, 'SetMiterLimit', CdStdCall);
 S.RegisterDelphiFunction(@StrokeAndFillPath, 'StrokeAndFillPath', CdStdCall);
 S.RegisterDelphiFunction(@StrokePath, 'StrokePath', CdStdCall);
 S.RegisterDelphiFunction(@WidenPath, 'WidenPath', CdStdCall);
 S.RegisterDelphiFunction(@ExtCreatePen, 'ExtCreatePen', CdStdCall);
 S.RegisterDelphiFunction(@GetMiterLimit, 'GetMiterLimit', CdStdCall);
 S.RegisterDelphiFunction(@GetArcDirection, 'GetArcDirection', CdStdCall);
 S.RegisterDelphiFunction(@GetObject, 'GetObject', CdStdCall);
 S.RegisterDelphiFunction(@GetObjectA, 'GetObjectA', CdStdCall);
 S.RegisterDelphiFunction(@GetObjectW, 'GetObjectW', CdStdCall);
 S.RegisterDelphiFunction(@MoveToEx, 'MoveToEx', CdStdCall);
 S.RegisterDelphiFunction(@TextOut, 'TextOut', CdStdCall);
 S.RegisterDelphiFunction(@TextOutA, 'TextOutA', CdStdCall);
 S.RegisterDelphiFunction(@TextOutW, 'TextOutW', CdStdCall);
 S.RegisterDelphiFunction(@ExtTextOut, 'ExtTextOut', CdStdCall);
 S.RegisterDelphiFunction(@ExtTextOutA, 'ExtTextOutA', CdStdCall);
 S.RegisterDelphiFunction(@ExtTextOutW, 'ExtTextOutW', CdStdCall);
 S.RegisterDelphiFunction(@PolyTextOut, 'PolyTextOut', CdStdCall);
 S.RegisterDelphiFunction(@PolyTextOutA, 'PolyTextOutA', CdStdCall);
 S.RegisterDelphiFunction(@PolyTextOutW, 'PolyTextOutW', CdStdCall);
 S.RegisterDelphiFunction(@CreatePolygonRgn, 'CreatePolygonRgn', CdStdCall);
 S.RegisterDelphiFunction(@DPtoLP, 'DPtoLP', CdStdCall);
 S.RegisterDelphiFunction(@LPtoDP, 'LPtoDP', CdStdCall);
 S.RegisterDelphiFunction(@Polygon, 'Polygon', CdStdCall);
 S.RegisterDelphiFunction(@Polyline, 'Polyline', CdStdCall);
 S.RegisterDelphiFunction(@PolyBezier, 'PolyBezier', CdStdCall);
 S.RegisterDelphiFunction(@PolyBezierTo, 'PolyBezierTo', CdStdCall);
 S.RegisterDelphiFunction(@PolyLineTo, 'PolyLineTo', CdStdCall);
 S.RegisterDelphiFunction(@SetViewportExtEx, 'SetViewportExtEx', CdStdCall);
 S.RegisterDelphiFunction(@SetViewportOrgEx, 'SetViewportOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowExtEx, 'SetWindowExtEx', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowOrgEx, 'SetWindowOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@OffsetViewportOrgEx, 'OffsetViewportOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@OffsetWindowOrgEx, 'OffsetWindowOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@OffsetViewportOrgEx, 'OffsetViewportOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@OffsetWindowOrgEx, 'OffsetWindowOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@ScaleViewportExtEx, 'ScaleViewportExtEx', CdStdCall);
 S.RegisterDelphiFunction(@ScaleWindowExtEx, 'ScaleWindowExtEx', CdStdCall);
 S.RegisterDelphiFunction(@SetBitmapDimensionEx, 'SetBitmapDimensionEx', CdStdCall);
 S.RegisterDelphiFunction(@SetBrushOrgEx, 'SetBrushOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@GetTextFace, 'GetTextFace', CdStdCall);
 S.RegisterDelphiFunction(@GetTextFaceA, 'GetTextFaceA', CdStdCall);
 S.RegisterDelphiFunction(@GetTextFaceW, 'GetTextFaceW', CdStdCall);
 S.RegisterDelphiFunction(@GetKerningPairs, 'GetKerningPairs', CdStdCall);
 S.RegisterDelphiFunction(@GetDCOrgEx, 'GetDCOrgEx', CdStdCall);
 S.RegisterDelphiFunction(@UnrealizeObject, 'UnrealizeObject', CdStdCall);
 S.RegisterDelphiFunction(@GdiFlush, 'GdiFlush', CdStdCall);
 S.RegisterDelphiFunction(@GdiSetBatchLimit, 'GdiSetBatchLimit', CdStdCall);
 S.RegisterDelphiFunction(@GdiGetBatchLimit, 'GdiGetBatchLimit', CdStdCall);
 S.RegisterDelphiFunction(@SetICMMode, 'SetICMMode', CdStdCall);
 S.RegisterDelphiFunction(@CheckColorsInGamut, 'CheckColorsInGamut', CdStdCall);
 S.RegisterDelphiFunction(@GetColorSpace, 'GetColorSpace', CdStdCall);
 S.RegisterDelphiFunction(@GetLogColorSpace, 'GetLogColorSpace', CdStdCall);
 S.RegisterDelphiFunction(@GetLogColorSpaceA, 'GetLogColorSpaceA', CdStdCall);
 S.RegisterDelphiFunction(@GetLogColorSpaceW, 'GetLogColorSpaceW', CdStdCall);
 S.RegisterDelphiFunction(@CreateColorSpace, 'CreateColorSpace', CdStdCall);
 S.RegisterDelphiFunction(@CreateColorSpaceA, 'CreateColorSpaceA', CdStdCall);
 S.RegisterDelphiFunction(@CreateColorSpaceW, 'CreateColorSpaceW', CdStdCall);
 S.RegisterDelphiFunction(@SetColorSpace, 'SetColorSpace', CdStdCall);
 S.RegisterDelphiFunction(@DeleteColorSpace, 'DeleteColorSpace', CdStdCall);
 S.RegisterDelphiFunction(@GetICMProfile, 'GetICMProfile', CdStdCall);
 S.RegisterDelphiFunction(@GetICMProfileA, 'GetICMProfileA', CdStdCall);
 S.RegisterDelphiFunction(@GetICMProfileW, 'GetICMProfileW', CdStdCall);
 S.RegisterDelphiFunction(@SetICMProfile, 'SetICMProfile', CdStdCall);
 S.RegisterDelphiFunction(@SetICMProfileA, 'SetICMProfileA', CdStdCall);
 S.RegisterDelphiFunction(@SetICMProfileW, 'SetICMProfileW', CdStdCall);
 S.RegisterDelphiFunction(@GetDeviceGammaRamp, 'GetDeviceGammaRamp', CdStdCall);
 S.RegisterDelphiFunction(@SetDeviceGammaRamp, 'SetDeviceGammaRamp', CdStdCall);
 S.RegisterDelphiFunction(@ColorMatchToTarget, 'ColorMatchToTarget', CdStdCall);
 S.RegisterDelphiFunction(@EnumICMProfiles, 'EnumICMProfiles', CdStdCall);
 S.RegisterDelphiFunction(@EnumICMProfilesA, 'EnumICMProfilesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumICMProfilesW, 'EnumICMProfilesW', CdStdCall);
 S.RegisterDelphiFunction(@UpdateICMRegKey, 'UpdateICMRegKey', CdStdCall);
 S.RegisterDelphiFunction(@UpdateICMRegKeyA, 'UpdateICMRegKeyA', CdStdCall);
 S.RegisterDelphiFunction(@UpdateICMRegKeyW, 'UpdateICMRegKeyW', CdStdCall);
 S.RegisterDelphiFunction(@ColorCorrectPalette, 'ColorCorrectPalette', CdStdCall);
 S.RegisterDelphiFunction(@wglCopyContext, 'wglCopyContext', CdStdCall);
 S.RegisterDelphiFunction(@wglCreateContext, 'wglCreateContext', CdStdCall);
 S.RegisterDelphiFunction(@wglCreateLayerContext, 'wglCreateLayerContext', CdStdCall);
 S.RegisterDelphiFunction(@wglDeleteContext, 'wglDeleteContext', CdStdCall);
 S.RegisterDelphiFunction(@wglGetCurrentContext, 'wglGetCurrentContext', CdStdCall);
 S.RegisterDelphiFunction(@wglGetCurrentDC, 'wglGetCurrentDC', CdStdCall);
 S.RegisterDelphiFunction(@wglMakeCurrent, 'wglMakeCurrent', CdStdCall);
 S.RegisterDelphiFunction(@wglShareLists, 'wglShareLists', CdStdCall);
 S.RegisterDelphiFunction(@wglUseFontBitmaps, 'wglUseFontBitmaps', CdStdCall);
 S.RegisterDelphiFunction(@wglUseFontBitmapsA, 'wglUseFontBitmapsA', CdStdCall);
 S.RegisterDelphiFunction(@wglUseFontBitmapsW, 'wglUseFontBitmapsW', CdStdCall);
 S.RegisterDelphiFunction(@SwapBuffers, 'SwapBuffers', CdStdCall);
 S.RegisterDelphiFunction(@wglUseFontOutlines, 'wglUseFontOutlines', CdStdCall);
 S.RegisterDelphiFunction(@wglUseFontOutlinesA, 'wglUseFontOutlinesA', CdStdCall);
 S.RegisterDelphiFunction(@wglUseFontOutlinesW, 'wglUseFontOutlinesW', CdStdCall);
 S.RegisterDelphiFunction(@wglDescribeLayerPlane, 'wglDescribeLayerPlane', CdStdCall);
 S.RegisterDelphiFunction(@wglSetLayerPaletteEntries, 'wglSetLayerPaletteEntries', CdStdCall);
 S.RegisterDelphiFunction(@wglGetLayerPaletteEntries, 'wglGetLayerPaletteEntries', CdStdCall);
 S.RegisterDelphiFunction(@wglRealizeLayerPalette, 'wglRealizeLayerPalette', CdStdCall);
 S.RegisterDelphiFunction(@wglSwapLayerBuffers, 'wglSwapLayerBuffers', CdStdCall);
 S.RegisterDelphiFunction(@wglSwapMultipleBuffers, 'wglSwapMultipleBuffers', CdStdCall);
 S.RegisterDelphiFunction(@wvsprintf, 'wvsprintf', CdStdCall);
 S.RegisterDelphiFunction(@wvsprintfA, 'wvsprintfA', CdStdCall);
 S.RegisterDelphiFunction(@wvsprintfW, 'wvsprintfW', CdStdCall);
 S.RegisterDelphiFunction(@wsprintf, 'wsprintf', CdStdCall);
 S.RegisterDelphiFunction(@wsprintfA, 'wsprintfA', CdStdCall);
 S.RegisterDelphiFunction(@wsprintfW, 'wsprintfW', CdStdCall);
 S.RegisterDelphiFunction(@GET_APPCOMMAND_LPARAM, 'GET_APPCOMMAND_LPARAM', cdRegister);
 S.RegisterDelphiFunction(@GET_DEVICE_LPARAM, 'GET_DEVICE_LPARAM', cdRegister);
 S.RegisterDelphiFunction(@GET_MOUSEORKEY_LPARAM, 'GET_MOUSEORKEY_LPARAM', cdRegister);
 S.RegisterDelphiFunction(@GET_FLAGS_LPARAM, 'GET_FLAGS_LPARAM', cdRegister);
 S.RegisterDelphiFunction(@GET_KEYSTATE_LPARAM, 'GET_KEYSTATE_LPARAM', cdRegister);
 S.RegisterDelphiFunction(@LoadKeyboardLayout, 'LoadKeyboardLayout', CdStdCall);
 S.RegisterDelphiFunction(@LoadKeyboardLayoutA, 'LoadKeyboardLayoutA', CdStdCall);
 S.RegisterDelphiFunction(@LoadKeyboardLayoutW, 'LoadKeyboardLayoutW', CdStdCall);
 S.RegisterDelphiFunction(@ActivateKeyboardLayout, 'ActivateKeyboardLayout', CdStdCall);
 S.RegisterDelphiFunction(@UnloadKeyboardLayout, 'UnloadKeyboardLayout', CdStdCall);
 S.RegisterDelphiFunction(@ToUnicodeEx, 'ToUnicodeEx', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyboardLayoutName, 'GetKeyboardLayoutName', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyboardLayoutNameA, 'GetKeyboardLayoutNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyboardLayoutNameW, 'GetKeyboardLayoutNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyboardLayoutList, 'GetKeyboardLayoutList', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyboardLayout, 'GetKeyboardLayout', CdStdCall);
 S.RegisterDelphiFunction(@GetMouseMovePoints, 'GetMouseMovePoints', CdStdCall);
 S.RegisterDelphiFunction(@CreateDesktop, 'CreateDesktop', CdStdCall);
 S.RegisterDelphiFunction(@CreateDesktopA, 'CreateDesktopA', CdStdCall);
 S.RegisterDelphiFunction(@CreateDesktopW, 'CreateDesktopW', CdStdCall);
 S.RegisterDelphiFunction(@OpenDesktop, 'OpenDesktop', CdStdCall);
 S.RegisterDelphiFunction(@OpenDesktopA, 'OpenDesktopA', CdStdCall);
 S.RegisterDelphiFunction(@OpenDesktopW, 'OpenDesktopW', CdStdCall);
 S.RegisterDelphiFunction(@EnumDesktops, 'EnumDesktops', CdStdCall);
 S.RegisterDelphiFunction(@EnumDesktopsA, 'EnumDesktopsA', CdStdCall);
 S.RegisterDelphiFunction(@EnumDesktopsW, 'EnumDesktopsW', CdStdCall);
 S.RegisterDelphiFunction(@OpenInputDesktop, 'OpenInputDesktop', CdStdCall);
 S.RegisterDelphiFunction(@EnumDesktopWindows, 'EnumDesktopWindows', CdStdCall);
 S.RegisterDelphiFunction(@SwitchDesktop, 'SwitchDesktop', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadDesktop, 'SetThreadDesktop', CdStdCall);
 S.RegisterDelphiFunction(@CloseDesktop, 'CloseDesktop', CdStdCall);
 S.RegisterDelphiFunction(@GetThreadDesktop, 'GetThreadDesktop', CdStdCall);
 S.RegisterDelphiFunction(@CreateWindowStation, 'CreateWindowStation', CdStdCall);
 S.RegisterDelphiFunction(@CreateWindowStationA, 'CreateWindowStationA', CdStdCall);
 S.RegisterDelphiFunction(@CreateWindowStationW, 'CreateWindowStationW', CdStdCall);
 S.RegisterDelphiFunction(@OpenWindowStation, 'OpenWindowStation', CdStdCall);
 S.RegisterDelphiFunction(@OpenWindowStationA, 'OpenWindowStationA', CdStdCall);
 S.RegisterDelphiFunction(@OpenWindowStationW, 'OpenWindowStationW', CdStdCall);
 S.RegisterDelphiFunction(@EnumWindowStations, 'EnumWindowStations', CdStdCall);
 S.RegisterDelphiFunction(@EnumWindowStationsA, 'EnumWindowStationsA', CdStdCall);
 S.RegisterDelphiFunction(@EnumWindowStationsW, 'EnumWindowStationsW', CdStdCall);
 S.RegisterDelphiFunction(@CloseWindowStation, 'CloseWindowStation', CdStdCall);
 S.RegisterDelphiFunction(@SetProcessWindowStation, 'SetProcessWindowStation', CdStdCall);
 S.RegisterDelphiFunction(@GetProcessWindowStation, 'GetProcessWindowStation', CdStdCall);
 S.RegisterDelphiFunction(@SetUserObjectSecurity, 'SetUserObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@GetUserObjectSecurity, 'GetUserObjectSecurity', CdStdCall);
 S.RegisterDelphiFunction(@GetUserObjectInformation, 'GetUserObjectInformation', CdStdCall);
 S.RegisterDelphiFunction(@GetUserObjectInformationA, 'GetUserObjectInformationA', CdStdCall);
 S.RegisterDelphiFunction(@GetUserObjectInformationW, 'GetUserObjectInformationW', CdStdCall);
 S.RegisterDelphiFunction(@SetUserObjectInformation, 'SetUserObjectInformation', CdStdCall);
 S.RegisterDelphiFunction(@SetUserObjectInformationA, 'SetUserObjectInformationA', CdStdCall);
 S.RegisterDelphiFunction(@SetUserObjectInformationW, 'SetUserObjectInformationW', CdStdCall);
 S.RegisterDelphiFunction(@SmallPointToPoint, 'SmallPointToPoint', cdRegister);
 S.RegisterDelphiFunction(@PointToSmallPoint, 'PointToSmallPoint', cdRegister);
 S.RegisterDelphiFunction(@MakeWParam, 'MakeWParam', cdRegister);
 S.RegisterDelphiFunction(@MakeLParam, 'MakeLParam', cdRegister);
 S.RegisterDelphiFunction(@MakeLResult, 'MakeLResult', cdRegister);
 S.RegisterDelphiFunction(@PointToLParam, 'PointToLParam', cdRegister);
 S.RegisterDelphiFunction(@RegisterWindowMessage, 'RegisterWindowMessage', CdStdCall);
 S.RegisterDelphiFunction(@RegisterWindowMessageA, 'RegisterWindowMessageA', CdStdCall);
 S.RegisterDelphiFunction(@RegisterWindowMessageW, 'RegisterWindowMessageW', CdStdCall);
 S.RegisterDelphiFunction(@TrackMouseEvent, 'TrackMouseEvent', CdStdCall);
 S.RegisterDelphiFunction(@DrawEdge, 'DrawEdge', CdStdCall);
 S.RegisterDelphiFunction(@DrawFrameControl, 'DrawFrameControl', CdStdCall);
 S.RegisterDelphiFunction(@DrawCaption, 'DrawCaption', CdStdCall);
 S.RegisterDelphiFunction(@DrawAnimatedRects, 'DrawAnimatedRects', CdStdCall);
 S.RegisterDelphiFunction(@GetMessage, 'GetMessage', CdStdCall);
 S.RegisterDelphiFunction(@GetMessageA, 'GetMessageA', CdStdCall);
 S.RegisterDelphiFunction(@GetMessageW, 'GetMessageW', CdStdCall);
 S.RegisterDelphiFunction(@DispatchMessage, 'DispatchMessage', CdStdCall);
 S.RegisterDelphiFunction(@DispatchMessageA, 'DispatchMessageA', CdStdCall);
 S.RegisterDelphiFunction(@DispatchMessageW, 'DispatchMessageW', CdStdCall);
 S.RegisterDelphiFunction(@TranslateMessage, 'TranslateMessage', CdStdCall);
 S.RegisterDelphiFunction(@SetMessageQueue, 'SetMessageQueue', CdStdCall);
 S.RegisterDelphiFunction(@PeekMessage, 'PeekMessage', CdStdCall);
 S.RegisterDelphiFunction(@PeekMessageA, 'PeekMessageA', CdStdCall);
 S.RegisterDelphiFunction(@PeekMessageW, 'PeekMessageW', CdStdCall);
 S.RegisterDelphiFunction(@RegisterHotKey, 'RegisterHotKey', CdStdCall);
 S.RegisterDelphiFunction(@UnregisterHotKey, 'UnregisterHotKey', CdStdCall);
 S.RegisterDelphiFunction(@ExitWindows, 'ExitWindows', cdRegister);
 S.RegisterDelphiFunction(@ExitWindowsEx, 'ExitWindowsEx', CdStdCall);
 S.RegisterDelphiFunction(@SwapMouseButton, 'SwapMouseButton', CdStdCall);
 S.RegisterDelphiFunction(@GetMessagePos, 'GetMessagePos', CdStdCall);
 S.RegisterDelphiFunction(@GetMessageTime, 'GetMessageTime', CdStdCall);
 S.RegisterDelphiFunction(@GetMessageExtraInfo, 'GetMessageExtraInfo', CdStdCall);
 S.RegisterDelphiFunction(@SetMessageExtraInfo, 'SetMessageExtraInfo', CdStdCall);
 S.RegisterDelphiFunction(@SendMessage, 'SendMessage', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageA, 'SendMessageA', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageW, 'SendMessageW', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageTimeout, 'SendMessageTimeout', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageTimeoutA, 'SendMessageTimeoutA', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageTimeoutW, 'SendMessageTimeoutW', CdStdCall);
 S.RegisterDelphiFunction(@SendNotifyMessage, 'SendNotifyMessage', CdStdCall);
 S.RegisterDelphiFunction(@SendNotifyMessageA, 'SendNotifyMessageA', CdStdCall);
 S.RegisterDelphiFunction(@SendNotifyMessageW, 'SendNotifyMessageW', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageCallback, 'SendMessageCallback', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageCallbackA, 'SendMessageCallbackA', CdStdCall);
 S.RegisterDelphiFunction(@SendMessageCallbackW, 'SendMessageCallbackW', CdStdCall);
 S.RegisterDelphiFunction(@BroadcastSystemMessage, 'BroadcastSystemMessage', CdStdCall);
 S.RegisterDelphiFunction(@BroadcastSystemMessageA, 'BroadcastSystemMessageA', CdStdCall);
 S.RegisterDelphiFunction(@BroadcastSystemMessageW, 'BroadcastSystemMessageW', CdStdCall);
 S.RegisterDelphiFunction(@RegisterDeviceNotification, 'RegisterDeviceNotification', CdStdCall);
 S.RegisterDelphiFunction(@RegisterDeviceNotificationA, 'RegisterDeviceNotificationA', CdStdCall);
 S.RegisterDelphiFunction(@RegisterDeviceNotificationW, 'RegisterDeviceNotificationW', CdStdCall);
 S.RegisterDelphiFunction(@UnregisterDeviceNotification, 'UnregisterDeviceNotification', CdStdCall);
 S.RegisterDelphiFunction(@PostMessage, 'PostMessage', CdStdCall);
 S.RegisterDelphiFunction(@PostMessageA, 'PostMessageA', CdStdCall);
 S.RegisterDelphiFunction(@PostMessageW, 'PostMessageW', CdStdCall);
 S.RegisterDelphiFunction(@PostThreadMessage, 'PostThreadMessage', CdStdCall);
 S.RegisterDelphiFunction(@PostThreadMessageA, 'PostThreadMessageA', CdStdCall);
 S.RegisterDelphiFunction(@PostThreadMessageW, 'PostThreadMessageW', CdStdCall);
 S.RegisterDelphiFunction(@PostAppMessage, 'PostAppMessage', cdRegister);
 S.RegisterDelphiFunction(@PostAppMessageA, 'PostAppMessageA', cdRegister);
 S.RegisterDelphiFunction(@PostAppMessageW, 'PostAppMessageW', cdRegister);
 S.RegisterDelphiFunction(@AttachThreadInput, 'AttachThreadInput', CdStdCall);
 S.RegisterDelphiFunction(@ReplyMessage, 'ReplyMessage', CdStdCall);
 S.RegisterDelphiFunction(@WaitMessage, 'WaitMessage', CdStdCall);
 S.RegisterDelphiFunction(@WaitForInputIdle, 'WaitForInputIdle', CdStdCall);
 S.RegisterDelphiFunction(@DefWindowProc, 'DefWindowProc', CdStdCall);
 S.RegisterDelphiFunction(@DefWindowProcA, 'DefWindowProcA', CdStdCall);
 S.RegisterDelphiFunction(@DefWindowProcW, 'DefWindowProcW', CdStdCall);
 S.RegisterDelphiFunction(@CallWindowProc, 'CallWindowProc', CdStdCall);
 S.RegisterDelphiFunction(@CallWindowProcA, 'CallWindowProcA', CdStdCall);
 S.RegisterDelphiFunction(@CallWindowProcW, 'CallWindowProcW', CdStdCall);
 S.RegisterDelphiFunction(@PostQuitMessage, 'PostQuitMessage', CdStdCall);
 S.RegisterDelphiFunction(@InSendMessage, 'InSendMessage', CdStdCall);
 S.RegisterDelphiFunction(@InSendMessageEx, 'InSendMessageEx', CdStdCall);
 S.RegisterDelphiFunction(@GetDoubleClickTime, 'GetDoubleClickTime', CdStdCall);
 S.RegisterDelphiFunction(@SetDoubleClickTime, 'SetDoubleClickTime', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClass, 'RegisterClass', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClassA, 'RegisterClassA', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClassW, 'RegisterClassW', CdStdCall);
 S.RegisterDelphiFunction(@UnregisterClass, 'UnregisterClass', CdStdCall);
 S.RegisterDelphiFunction(@UnregisterClassA, 'UnregisterClassA', CdStdCall);
 S.RegisterDelphiFunction(@UnregisterClassW, 'UnregisterClassW', CdStdCall);
 S.RegisterDelphiFunction(@GetClassInfo, 'GetClassInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetClassInfoA, 'GetClassInfoA', CdStdCall);
 S.RegisterDelphiFunction(@GetClassInfoW, 'GetClassInfoW', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClassEx, 'RegisterClassEx', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClassExA, 'RegisterClassExA', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClassExW, 'RegisterClassExW', CdStdCall);
 S.RegisterDelphiFunction(@GetClassInfoEx, 'GetClassInfoEx', CdStdCall);
 S.RegisterDelphiFunction(@GetClassInfoExA, 'GetClassInfoExA', CdStdCall);
 S.RegisterDelphiFunction(@GetClassInfoExW, 'GetClassInfoExW', CdStdCall);
 S.RegisterDelphiFunction(@CreateWindowEx, 'CreateWindowEx', cdRegister);
 S.RegisterDelphiFunction(@CreateWindowExA, 'CreateWindowExA', cdRegister);
 S.RegisterDelphiFunction(@CreateWindowExW, 'CreateWindowExW', cdRegister);
 S.RegisterDelphiFunction(@CreateWindow, 'CreateWindow', cdRegister);
 S.RegisterDelphiFunction(@CreateWindowA, 'CreateWindowA', cdRegister);
 S.RegisterDelphiFunction(@CreateWindowW, 'CreateWindowW', cdRegister);
 S.RegisterDelphiFunction(@IsWindow, 'IsWindow', CdStdCall);
 S.RegisterDelphiFunction(@IsMenu, 'IsMenu', CdStdCall);
 S.RegisterDelphiFunction(@IsChild, 'IsChild', CdStdCall);
 S.RegisterDelphiFunction(@DestroyWindow, 'DestroyWindow', CdStdCall);
 S.RegisterDelphiFunction(@ShowWindow, 'ShowWindow', CdStdCall);
 S.RegisterDelphiFunction(@AnimateWindow, 'AnimateWindow', CdStdCall);
 S.RegisterDelphiFunction(@ShowWindowAsync, 'ShowWindowAsync', CdStdCall);
 S.RegisterDelphiFunction(@FlashWindow, 'FlashWindow', CdStdCall);
 S.RegisterDelphiFunction(@UpdateLayeredWindow, 'UpdateLayeredWindow', CdStdCall);
 S.RegisterDelphiFunction(@SetLayeredWindowAttributes, 'SetLayeredWindowAttributes', cdRegister);
 S.RegisterDelphiFunction(@FlashWindowEx, 'FlashWindowEx', CdStdCall);
 S.RegisterDelphiFunction(@ShowOwnedPopups, 'ShowOwnedPopups', CdStdCall);
 S.RegisterDelphiFunction(@OpenIcon, 'OpenIcon', CdStdCall);
 S.RegisterDelphiFunction(@CloseWindow, 'CloseWindow', CdStdCall);
 S.RegisterDelphiFunction(@MoveWindow, 'MoveWindow', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowPos, 'SetWindowPos', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowPlacement, 'GetWindowPlacement', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowPlacement, 'SetWindowPlacement', CdStdCall);
 S.RegisterDelphiFunction(@BeginDeferWindowPos, 'BeginDeferWindowPos', CdStdCall);
 S.RegisterDelphiFunction(@DeferWindowPos, 'DeferWindowPos', CdStdCall);
 S.RegisterDelphiFunction(@EndDeferWindowPos, 'EndDeferWindowPos', CdStdCall);
 S.RegisterDelphiFunction(@IsWindowVisible, 'IsWindowVisible', CdStdCall);
 S.RegisterDelphiFunction(@IsIconic, 'IsIconic', CdStdCall);
 S.RegisterDelphiFunction(@AnyPopup, 'AnyPopup', CdStdCall);
 S.RegisterDelphiFunction(@BringWindowToTop, 'BringWindowToTop', CdStdCall);
 S.RegisterDelphiFunction(@IsZoomed, 'IsZoomed', CdStdCall);
 S.RegisterDelphiFunction(@CreateDialogParam, 'CreateDialogParam', CdStdCall);
 S.RegisterDelphiFunction(@CreateDialogParamA, 'CreateDialogParamA', CdStdCall);
 S.RegisterDelphiFunction(@CreateDialogParamW, 'CreateDialogParamW', CdStdCall);
 S.RegisterDelphiFunction(@CreateDialogIndirectParam, 'CreateDialogIndirectParam', CdStdCall);
 S.RegisterDelphiFunction(@CreateDialogIndirectParamA, 'CreateDialogIndirectParamA', CdStdCall);
 S.RegisterDelphiFunction(@CreateDialogIndirectParamW, 'CreateDialogIndirectParamW', CdStdCall);
 S.RegisterDelphiFunction(@CreateDialog, 'CreateDialog', cdRegister);
 S.RegisterDelphiFunction(@CreateDialogA, 'CreateDialogA', cdRegister);
 S.RegisterDelphiFunction(@CreateDialogW, 'CreateDialogW', cdRegister);
 S.RegisterDelphiFunction(@CreateDialogIndirect, 'CreateDialogIndirect', cdRegister);
 S.RegisterDelphiFunction(@CreateDialogIndirectA, 'CreateDialogIndirectA', cdRegister);
 S.RegisterDelphiFunction(@CreateDialogIndirectW, 'CreateDialogIndirectW', cdRegister);
 S.RegisterDelphiFunction(@DialogBoxParam, 'DialogBoxParam', CdStdCall);
 S.RegisterDelphiFunction(@DialogBoxParamA, 'DialogBoxParamA', CdStdCall);
 S.RegisterDelphiFunction(@DialogBoxParamW, 'DialogBoxParamW', CdStdCall);
 S.RegisterDelphiFunction(@DialogBoxIndirectParam, 'DialogBoxIndirectParam', CdStdCall);
 S.RegisterDelphiFunction(@DialogBoxIndirectParamA, 'DialogBoxIndirectParamA', CdStdCall);
 S.RegisterDelphiFunction(@DialogBoxIndirectParamW, 'DialogBoxIndirectParamW', CdStdCall);
 S.RegisterDelphiFunction(@DialogBox, 'DialogBox', cdRegister);
 S.RegisterDelphiFunction(@DialogBoxA, 'DialogBoxA', cdRegister);
 S.RegisterDelphiFunction(@DialogBoxW, 'DialogBoxW', cdRegister);
 S.RegisterDelphiFunction(@DialogBoxIndirect, 'DialogBoxIndirect', cdRegister);
 S.RegisterDelphiFunction(@DialogBoxIndirectA, 'DialogBoxIndirectA', cdRegister);
 S.RegisterDelphiFunction(@DialogBoxIndirectW, 'DialogBoxIndirectW', cdRegister);
 S.RegisterDelphiFunction(@EndDialog, 'EndDialog', CdStdCall);
 S.RegisterDelphiFunction(@GetDlgItem, 'GetDlgItem', CdStdCall);
 S.RegisterDelphiFunction(@SetDlgItemInt, 'SetDlgItemInt', CdStdCall);
 S.RegisterDelphiFunction(@GetDlgItemInt, 'GetDlgItemInt', CdStdCall);
 S.RegisterDelphiFunction(@SetDlgItemText, 'SetDlgItemText', CdStdCall);
 S.RegisterDelphiFunction(@SetDlgItemTextA, 'SetDlgItemTextA', CdStdCall);
 S.RegisterDelphiFunction(@SetDlgItemTextW, 'SetDlgItemTextW', CdStdCall);
 S.RegisterDelphiFunction(@GetDlgItemText, 'GetDlgItemText', CdStdCall);
 S.RegisterDelphiFunction(@GetDlgItemTextA, 'GetDlgItemTextA', CdStdCall);
 S.RegisterDelphiFunction(@GetDlgItemTextW, 'GetDlgItemTextW', CdStdCall);
 S.RegisterDelphiFunction(@CheckDlgButton, 'CheckDlgButton', CdStdCall);
 S.RegisterDelphiFunction(@CheckRadioButton, 'CheckRadioButton', CdStdCall);
 S.RegisterDelphiFunction(@IsDlgButtonChecked, 'IsDlgButtonChecked', CdStdCall);
 S.RegisterDelphiFunction(@SendDlgItemMessage, 'SendDlgItemMessage', CdStdCall);
 S.RegisterDelphiFunction(@SendDlgItemMessageA, 'SendDlgItemMessageA', CdStdCall);
 S.RegisterDelphiFunction(@SendDlgItemMessageW, 'SendDlgItemMessageW', CdStdCall);
 S.RegisterDelphiFunction(@GetNextDlgGroupItem, 'GetNextDlgGroupItem', CdStdCall);
 S.RegisterDelphiFunction(@GetNextDlgTabItem, 'GetNextDlgTabItem', CdStdCall);
 S.RegisterDelphiFunction(@GetDlgCtrlID, 'GetDlgCtrlID', CdStdCall);
 S.RegisterDelphiFunction(@GetDialogBaseUnits, 'GetDialogBaseUnits', CdStdCall);
 S.RegisterDelphiFunction(@DefDlgProc, 'DefDlgProc', CdStdCall);
 S.RegisterDelphiFunction(@DefDlgProcA, 'DefDlgProcA', CdStdCall);
 S.RegisterDelphiFunction(@DefDlgProcW, 'DefDlgProcW', CdStdCall);
 S.RegisterDelphiFunction(@CallMsgFilter, 'CallMsgFilter', CdStdCall);
 S.RegisterDelphiFunction(@CallMsgFilterA, 'CallMsgFilterA', CdStdCall);
 S.RegisterDelphiFunction(@CallMsgFilterW, 'CallMsgFilterW', CdStdCall);
 S.RegisterDelphiFunction(@OpenClipboard, 'OpenClipboard', CdStdCall);
 S.RegisterDelphiFunction(@CloseClipboard, 'CloseClipboard', CdStdCall);
 S.RegisterDelphiFunction(@GetClipboardSequenceNumber, 'GetClipboardSequenceNumber', CdStdCall);
 S.RegisterDelphiFunction(@GetClipboardOwner, 'GetClipboardOwner', CdStdCall);
 S.RegisterDelphiFunction(@SetClipboardViewer, 'SetClipboardViewer', CdStdCall);
 S.RegisterDelphiFunction(@GetClipboardViewer, 'GetClipboardViewer', CdStdCall);
 S.RegisterDelphiFunction(@ChangeClipboardChain, 'ChangeClipboardChain', CdStdCall);
 S.RegisterDelphiFunction(@SetClipboardData, 'SetClipboardData', CdStdCall);
 S.RegisterDelphiFunction(@GetClipboardData, 'GetClipboardData', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClipboardFormat, 'RegisterClipboardFormat', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClipboardFormatA, 'RegisterClipboardFormatA', CdStdCall);
 S.RegisterDelphiFunction(@RegisterClipboardFormatW, 'RegisterClipboardFormatW', CdStdCall);
 S.RegisterDelphiFunction(@CountClipboardFormats, 'CountClipboardFormats', CdStdCall);
 S.RegisterDelphiFunction(@EnumClipboardFormats, 'EnumClipboardFormats', CdStdCall);
 S.RegisterDelphiFunction(@GetClipboardFormatName, 'GetClipboardFormatName', CdStdCall);
 S.RegisterDelphiFunction(@GetClipboardFormatNameA, 'GetClipboardFormatNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetClipboardFormatNameW, 'GetClipboardFormatNameW', CdStdCall);
 S.RegisterDelphiFunction(@EmptyClipboard, 'EmptyClipboard', CdStdCall);
 S.RegisterDelphiFunction(@IsClipboardFormatAvailable, 'IsClipboardFormatAvailable', CdStdCall);
 S.RegisterDelphiFunction(@GetPriorityClipboardFormat, 'GetPriorityClipboardFormat', CdStdCall);
 S.RegisterDelphiFunction(@GetOpenClipboardWindow, 'GetOpenClipboardWindow', CdStdCall);
 S.RegisterDelphiFunction(@CharToOem, 'CharToOem', CdStdCall);
 S.RegisterDelphiFunction(@CharToOemA, 'CharToOemA', CdStdCall);
 S.RegisterDelphiFunction(@CharToOemW, 'CharToOemW', CdStdCall);
 S.RegisterDelphiFunction(@OemToChar, 'OemToChar', CdStdCall);
 S.RegisterDelphiFunction(@OemToCharA, 'OemToCharA', CdStdCall);
 S.RegisterDelphiFunction(@OemToCharW, 'OemToCharW', CdStdCall);
 S.RegisterDelphiFunction(@CharToOemBuff, 'CharToOemBuff', CdStdCall);
 S.RegisterDelphiFunction(@CharToOemBuffA, 'CharToOemBuffA', CdStdCall);
 S.RegisterDelphiFunction(@CharToOemBuffW, 'CharToOemBuffW', CdStdCall);
 S.RegisterDelphiFunction(@OemToCharBuff, 'OemToCharBuff', CdStdCall);
 S.RegisterDelphiFunction(@OemToCharBuffA, 'OemToCharBuffA', CdStdCall);
 S.RegisterDelphiFunction(@OemToCharBuffW, 'OemToCharBuffW', CdStdCall);
 S.RegisterDelphiFunction(@CharUpper, 'CharUpper', CdStdCall);
 S.RegisterDelphiFunction(@CharUpperA, 'CharUpperA', CdStdCall);
 S.RegisterDelphiFunction(@CharUpperW, 'CharUpperW', CdStdCall);
 S.RegisterDelphiFunction(@CharUpperBuff, 'CharUpperBuff', CdStdCall);
 S.RegisterDelphiFunction(@CharUpperBuffA, 'CharUpperBuffA', CdStdCall);
 S.RegisterDelphiFunction(@CharUpperBuffW, 'CharUpperBuffW', CdStdCall);
 S.RegisterDelphiFunction(@CharLower, 'CharLower', CdStdCall);
 S.RegisterDelphiFunction(@CharLowerA, 'CharLowerA', CdStdCall);
 S.RegisterDelphiFunction(@CharLowerW, 'CharLowerW', CdStdCall);
 S.RegisterDelphiFunction(@CharLowerBuff, 'CharLowerBuff', CdStdCall);
 S.RegisterDelphiFunction(@CharLowerBuffA, 'CharLowerBuffA', CdStdCall);
 S.RegisterDelphiFunction(@CharLowerBuffW, 'CharLowerBuffW', CdStdCall);
 S.RegisterDelphiFunction(@CharNext, 'CharNext', CdStdCall);
 S.RegisterDelphiFunction(@CharNextA, 'CharNextA', CdStdCall);
 S.RegisterDelphiFunction(@CharNextW, 'CharNextW', CdStdCall);
 S.RegisterDelphiFunction(@CharPrev, 'CharPrev', CdStdCall);
 S.RegisterDelphiFunction(@CharPrevA, 'CharPrevA', CdStdCall);
 S.RegisterDelphiFunction(@CharPrevW, 'CharPrevW', CdStdCall);
 S.RegisterDelphiFunction(@CharNextExA, 'CharNextExA', CdStdCall);
 S.RegisterDelphiFunction(@CharNextEx, 'CharNextEx', CdStdCall);
 S.RegisterDelphiFunction(@CharPrevEx, 'CharPrevEx', CdStdCall);
 S.RegisterDelphiFunction(@CharPrevExA, 'CharPrevExA', CdStdCall);
 S.RegisterDelphiFunction(@AnsiToOem, 'AnsiToOem', CdStdCall);
 S.RegisterDelphiFunction(@OemToAnsi, 'OemToAnsi', CdStdCall);
 S.RegisterDelphiFunction(@AnsiToOemBuff, 'AnsiToOemBuff', CdStdCall);
 S.RegisterDelphiFunction(@OemToAnsiBuff, 'OemToAnsiBuff', CdStdCall);
 S.RegisterDelphiFunction(@AnsiUpper, 'AnsiUpper', CdStdCall);
 S.RegisterDelphiFunction(@AnsiUpperBuff, 'AnsiUpperBuff', CdStdCall);
 S.RegisterDelphiFunction(@AnsiLower, 'AnsiLower', CdStdCall);
 S.RegisterDelphiFunction(@AnsiLowerBuff, 'AnsiLowerBuff', CdStdCall);
 S.RegisterDelphiFunction(@AnsiNext, 'AnsiNext', CdStdCall);
 S.RegisterDelphiFunction(@AnsiPrev, 'AnsiPrev', CdStdCall);
 S.RegisterDelphiFunction(@IsCharAlpha, 'IsCharAlpha', CdStdCall);
 S.RegisterDelphiFunction(@IsCharAlphaA, 'IsCharAlphaA', CdStdCall);
 S.RegisterDelphiFunction(@IsCharAlphaW, 'IsCharAlphaW', CdStdCall);
 S.RegisterDelphiFunction(@IsCharAlphaNumeric, 'IsCharAlphaNumeric', CdStdCall);
 S.RegisterDelphiFunction(@IsCharAlphaNumericA, 'IsCharAlphaNumericA', CdStdCall);
 S.RegisterDelphiFunction(@IsCharAlphaNumericW, 'IsCharAlphaNumericW', CdStdCall);
 S.RegisterDelphiFunction(@IsCharUpper, 'IsCharUpper', CdStdCall);
 S.RegisterDelphiFunction(@IsCharUpperA, 'IsCharUpperA', CdStdCall);
 S.RegisterDelphiFunction(@IsCharUpperW, 'IsCharUpperW', CdStdCall);
 S.RegisterDelphiFunction(@IsCharLower, 'IsCharLower', CdStdCall);
 S.RegisterDelphiFunction(@IsCharLowerA, 'IsCharLowerA', CdStdCall);
 S.RegisterDelphiFunction(@IsCharLowerW, 'IsCharLowerW', CdStdCall);
 S.RegisterDelphiFunction(@SetFocus, 'SetFocus', CdStdCall);
 S.RegisterDelphiFunction(@GetActiveWindow, 'GetActiveWindow', CdStdCall);
 S.RegisterDelphiFunction(@GetFocus, 'GetFocus', CdStdCall);
 S.RegisterDelphiFunction(@GetKBCodePage, 'GetKBCodePage', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyState, 'GetKeyState', CdStdCall);
 S.RegisterDelphiFunction(@GetAsyncKeyState, 'GetAsyncKeyState', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyboardState, 'GetKeyboardState', CdStdCall);
 S.RegisterDelphiFunction(@SetKeyboardState, 'SetKeyboardState', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyNameText, 'GetKeyNameText', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyNameTextA, 'GetKeyNameTextA', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyNameTextW, 'GetKeyNameTextW', CdStdCall);
 S.RegisterDelphiFunction(@GetKeyboardType, 'GetKeyboardType', CdStdCall);
 S.RegisterDelphiFunction(@ToAscii, 'ToAscii', CdStdCall);
 S.RegisterDelphiFunction(@ToAsciiEx, 'ToAsciiEx', CdStdCall);
 S.RegisterDelphiFunction(@ToUnicode, 'ToUnicode', CdStdCall);
 S.RegisterDelphiFunction(@OemKeyScan, 'OemKeyScan', CdStdCall);
 S.RegisterDelphiFunction(@VkKeyScan, 'VkKeyScan', CdStdCall);
 S.RegisterDelphiFunction(@VkKeyScanA, 'VkKeyScanA', CdStdCall);
 S.RegisterDelphiFunction(@VkKeyScanW, 'VkKeyScanW', CdStdCall);
 S.RegisterDelphiFunction(@VkKeyScanEx, 'VkKeyScanEx', CdStdCall);
 S.RegisterDelphiFunction(@VkKeyScanExA, 'VkKeyScanExA', CdStdCall);
 S.RegisterDelphiFunction(@VkKeyScanExW, 'VkKeyScanExW', CdStdCall);
 S.RegisterDelphiFunction(@keybd_event, 'keybd_event', CdStdCall);
 S.RegisterDelphiFunction(@mouse_event, 'mouse_event', CdStdCall);
 S.RegisterDelphiFunction(@SendInput, 'SendInput', CdStdCall);
 S.RegisterDelphiFunction(@GetLastInputInfo, 'GetLastInputInfo', CdStdCall);
 S.RegisterDelphiFunction(@MapVirtualKey, 'MapVirtualKey', CdStdCall);
 S.RegisterDelphiFunction(@MapVirtualKeyA, 'MapVirtualKeyA', CdStdCall);
 S.RegisterDelphiFunction(@MapVirtualKeyW, 'MapVirtualKeyW', CdStdCall);
 S.RegisterDelphiFunction(@MapVirtualKeyEx, 'MapVirtualKeyEx', CdStdCall);
 S.RegisterDelphiFunction(@MapVirtualKeyExA, 'MapVirtualKeyExA', CdStdCall);
 S.RegisterDelphiFunction(@MapVirtualKeyExW, 'MapVirtualKeyExW', CdStdCall);
 S.RegisterDelphiFunction(@GetInputState, 'GetInputState', CdStdCall);
 S.RegisterDelphiFunction(@GetQueueStatus, 'GetQueueStatus', CdStdCall);
 S.RegisterDelphiFunction(@GetCapture, 'GetCapture', CdStdCall);
 S.RegisterDelphiFunction(@SetCapture, 'SetCapture', CdStdCall);
 S.RegisterDelphiFunction(@ReleaseCapture, 'ReleaseCapture', CdStdCall);
 S.RegisterDelphiFunction(@MsgWaitForMultipleObjects, 'MsgWaitForMultipleObjects', CdStdCall);
 S.RegisterDelphiFunction(@MsgWaitForMultipleObjectsEx, 'MsgWaitForMultipleObjectsEx', CdStdCall);
 S.RegisterDelphiFunction(@SetTimer, 'SetTimer', CdStdCall);
 S.RegisterDelphiFunction(@KillTimer, 'KillTimer', CdStdCall);
 S.RegisterDelphiFunction(@IsWindowUnicode, 'IsWindowUnicode', CdStdCall);
 S.RegisterDelphiFunction(@EnableWindow, 'EnableWindow', CdStdCall);
 S.RegisterDelphiFunction(@IsWindowEnabled, 'IsWindowEnabled', CdStdCall);
 S.RegisterDelphiFunction(@LoadAccelerators, 'LoadAccelerators', CdStdCall);
 S.RegisterDelphiFunction(@LoadAcceleratorsA, 'LoadAcceleratorsA', CdStdCall);
 S.RegisterDelphiFunction(@LoadAcceleratorsW, 'LoadAcceleratorsW', CdStdCall);
 S.RegisterDelphiFunction(@CreateAcceleratorTable, 'CreateAcceleratorTable', CdStdCall);
 S.RegisterDelphiFunction(@CreateAcceleratorTableA, 'CreateAcceleratorTableA', CdStdCall);
 S.RegisterDelphiFunction(@CreateAcceleratorTableW, 'CreateAcceleratorTableW', CdStdCall);
 S.RegisterDelphiFunction(@CopyAcceleratorTable, 'CopyAcceleratorTable', CdStdCall);
 S.RegisterDelphiFunction(@CopyAcceleratorTableA, 'CopyAcceleratorTableA', CdStdCall);
 S.RegisterDelphiFunction(@CopyAcceleratorTableW, 'CopyAcceleratorTableW', CdStdCall);
 S.RegisterDelphiFunction(@TranslateAccelerator, 'TranslateAccelerator', CdStdCall);
 S.RegisterDelphiFunction(@TranslateAcceleratorA, 'TranslateAcceleratorA', CdStdCall);
 S.RegisterDelphiFunction(@TranslateAcceleratorW, 'TranslateAcceleratorW', CdStdCall);
 S.RegisterDelphiFunction(@DestroyAcceleratorTable, 'DestroyAcceleratorTable', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemMetrics, 'GetSystemMetrics', CdStdCall);
 S.RegisterDelphiFunction(@LoadMenu, 'LoadMenu', CdStdCall);
 S.RegisterDelphiFunction(@LoadMenuA, 'LoadMenuA', CdStdCall);
 S.RegisterDelphiFunction(@LoadMenuW, 'LoadMenuW', CdStdCall);
 S.RegisterDelphiFunction(@LoadMenuIndirect, 'LoadMenuIndirect', CdStdCall);
 S.RegisterDelphiFunction(@LoadMenuIndirectA, 'LoadMenuIndirectA', CdStdCall);
 S.RegisterDelphiFunction(@LoadMenuIndirectW, 'LoadMenuIndirectW', CdStdCall);
 S.RegisterDelphiFunction(@GetMenu, 'GetMenu', CdStdCall);
 S.RegisterDelphiFunction(@SetMenu, 'SetMenu', CdStdCall);
 S.RegisterDelphiFunction(@ChangeMenu, 'ChangeMenu', CdStdCall);
 S.RegisterDelphiFunction(@ChangeMenuA, 'ChangeMenuA', CdStdCall);
 S.RegisterDelphiFunction(@ChangeMenuW, 'ChangeMenuW', CdStdCall);
 S.RegisterDelphiFunction(@HiliteMenuItem, 'HiliteMenuItem', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuString, 'GetMenuString', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuStringA, 'GetMenuStringA', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuStringW, 'GetMenuStringW', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuState, 'GetMenuState', CdStdCall);
 S.RegisterDelphiFunction(@DrawMenuBar, 'DrawMenuBar', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemMenu, 'GetSystemMenu', CdStdCall);
 S.RegisterDelphiFunction(@CreateMenu, 'CreateMenu', CdStdCall);
 S.RegisterDelphiFunction(@CreatePopupMenu, 'CreatePopupMenu', CdStdCall);
 S.RegisterDelphiFunction(@DestroyMenu, 'DestroyMenu', CdStdCall);
 S.RegisterDelphiFunction(@CheckMenuItem, 'CheckMenuItem', CdStdCall);
 S.RegisterDelphiFunction(@EnableMenuItem, 'EnableMenuItem', CdStdCall);
 S.RegisterDelphiFunction(@GetSubMenu, 'GetSubMenu', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuItemID, 'GetMenuItemID', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuItemCount, 'GetMenuItemCount', CdStdCall);
 S.RegisterDelphiFunction(@InsertMenu, 'InsertMenu', CdStdCall);
 S.RegisterDelphiFunction(@InsertMenuA, 'InsertMenuA', CdStdCall);
 S.RegisterDelphiFunction(@InsertMenuW, 'InsertMenuW', CdStdCall);
 S.RegisterDelphiFunction(@AppendMenu, 'AppendMenu', CdStdCall);
 S.RegisterDelphiFunction(@AppendMenuA, 'AppendMenuA', CdStdCall);
 S.RegisterDelphiFunction(@AppendMenuW, 'AppendMenuW', CdStdCall);
 S.RegisterDelphiFunction(@ModifyMenu, 'ModifyMenu', CdStdCall);
 S.RegisterDelphiFunction(@ModifyMenuA, 'ModifyMenuA', CdStdCall);
 S.RegisterDelphiFunction(@ModifyMenuW, 'ModifyMenuW', CdStdCall);
 S.RegisterDelphiFunction(@RemoveMenu, 'RemoveMenu', CdStdCall);
 S.RegisterDelphiFunction(@DeleteMenu, 'DeleteMenu', CdStdCall);
 S.RegisterDelphiFunction(@SetMenuItemBitmaps, 'SetMenuItemBitmaps', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuCheckMarkDimensions, 'GetMenuCheckMarkDimensions', CdStdCall);
 S.RegisterDelphiFunction(@TrackPopupMenu, 'TrackPopupMenu', CdStdCall);
 S.RegisterDelphiFunction(@TrackPopupMenuEx, 'TrackPopupMenuEx', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuInfo, 'GetMenuInfo', CdStdCall);
 S.RegisterDelphiFunction(@SetMenuInfo, 'SetMenuInfo', CdStdCall);
 S.RegisterDelphiFunction(@EndMenu, 'EndMenu', CdStdCall);
 S.RegisterDelphiFunction(@InsertMenuItem, 'InsertMenuItem', CdStdCall);
 S.RegisterDelphiFunction(@InsertMenuItemA, 'InsertMenuItemA', CdStdCall);
 S.RegisterDelphiFunction(@InsertMenuItemW, 'InsertMenuItemW', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuItemInfo, 'GetMenuItemInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuItemInfoA, 'GetMenuItemInfoA', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuItemInfoW, 'GetMenuItemInfoW', CdStdCall);
 S.RegisterDelphiFunction(@SetMenuItemInfo, 'SetMenuItemInfo', CdStdCall);
 S.RegisterDelphiFunction(@SetMenuItemInfoA, 'SetMenuItemInfoA', CdStdCall);
 S.RegisterDelphiFunction(@SetMenuItemInfoW, 'SetMenuItemInfoW', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuDefaultItem, 'GetMenuDefaultItem', CdStdCall);
 S.RegisterDelphiFunction(@SetMenuDefaultItem, 'SetMenuDefaultItem', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuItemRect, 'GetMenuItemRect', CdStdCall);
 S.RegisterDelphiFunction(@MenuItemFromPoint, 'MenuItemFromPoint', CdStdCall);
 S.RegisterDelphiFunction(@DragObject, 'DragObject', CdStdCall);
 S.RegisterDelphiFunction(@DragDetect, 'DragDetect', CdStdCall);
 S.RegisterDelphiFunction(@DrawIcon, 'DrawIcon', CdStdCall);
 S.RegisterDelphiFunction(@DrawText, 'DrawText', CdStdCall);
 S.RegisterDelphiFunction(@DrawTextA, 'DrawTextA', CdStdCall);
 S.RegisterDelphiFunction(@DrawTextW, 'DrawTextW', CdStdCall);
 S.RegisterDelphiFunction(@DrawTextEx, 'DrawTextEx', CdStdCall);
 S.RegisterDelphiFunction(@DrawTextExA, 'DrawTextExA', CdStdCall);
 S.RegisterDelphiFunction(@DrawTextExW, 'DrawTextExW', CdStdCall);
 S.RegisterDelphiFunction(@GrayString, 'GrayString', CdStdCall);
 S.RegisterDelphiFunction(@GrayStringA, 'GrayStringA', CdStdCall);
 S.RegisterDelphiFunction(@GrayStringW, 'GrayStringW', CdStdCall);
 S.RegisterDelphiFunction(@DrawState, 'DrawState', CdStdCall);
 S.RegisterDelphiFunction(@DrawStateA, 'DrawStateA', CdStdCall);
 S.RegisterDelphiFunction(@DrawStateW, 'DrawStateW', CdStdCall);
 S.RegisterDelphiFunction(@TabbedTextOut, 'TabbedTextOut', CdStdCall);
 S.RegisterDelphiFunction(@TabbedTextOutA, 'TabbedTextOutA', CdStdCall);
 S.RegisterDelphiFunction(@TabbedTextOutW, 'TabbedTextOutW', CdStdCall);
 S.RegisterDelphiFunction(@GetTabbedTextExtent, 'GetTabbedTextExtent', CdStdCall);
 S.RegisterDelphiFunction(@GetTabbedTextExtentA, 'GetTabbedTextExtentA', CdStdCall);
 S.RegisterDelphiFunction(@GetTabbedTextExtentW, 'GetTabbedTextExtentW', CdStdCall);
 S.RegisterDelphiFunction(@UpdateWindow, 'UpdateWindow', CdStdCall);
 S.RegisterDelphiFunction(@SetActiveWindow, 'SetActiveWindow', CdStdCall);
 S.RegisterDelphiFunction(@GetForegroundWindow, 'GetForegroundWindow', CdStdCall);
 S.RegisterDelphiFunction(@PaintDesktop, 'PaintDesktop', CdStdCall);
 S.RegisterDelphiFunction(@SetForegroundWindow, 'SetForegroundWindow', CdStdCall);
 S.RegisterDelphiFunction(@WindowFromDC, 'WindowFromDC', CdStdCall);
 S.RegisterDelphiFunction(@GetDC, 'GetDC', CdStdCall);
 S.RegisterDelphiFunction(@GetDCEx, 'GetDCEx', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowDC, 'GetWindowDC', CdStdCall);
 S.RegisterDelphiFunction(@ReleaseDC, 'ReleaseDC', CdStdCall);
 S.RegisterDelphiFunction(@BeginPaint, 'BeginPaint', CdStdCall);
 S.RegisterDelphiFunction(@EndPaint, 'EndPaint', CdStdCall);
 S.RegisterDelphiFunction(@GetUpdateRect, 'GetUpdateRect', CdStdCall);
 S.RegisterDelphiFunction(@GetUpdateRect, 'GetUpdateRect', CdStdCall);
 S.RegisterDelphiFunction(@GetUpdateRgn, 'GetUpdateRgn', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowRgn, 'SetWindowRgn', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowRgn, 'GetWindowRgn', CdStdCall);
 S.RegisterDelphiFunction(@ExcludeUpdateRgn, 'ExcludeUpdateRgn', CdStdCall);
 S.RegisterDelphiFunction(@InvalidateRect, 'InvalidateRect', CdStdCall);
 S.RegisterDelphiFunction(@ValidateRect, 'ValidateRect', CdStdCall);
 S.RegisterDelphiFunction(@InvalidateRgn, 'InvalidateRgn', CdStdCall);
 S.RegisterDelphiFunction(@ValidateRgn, 'ValidateRgn', CdStdCall);
 S.RegisterDelphiFunction(@RedrawWindow, 'RedrawWindow', CdStdCall);
 S.RegisterDelphiFunction(@LockWindowUpdate, 'LockWindowUpdate', CdStdCall);
 S.RegisterDelphiFunction(@ScrollWindow, 'ScrollWindow', CdStdCall);
 S.RegisterDelphiFunction(@ScrollDC, 'ScrollDC', CdStdCall);
 S.RegisterDelphiFunction(@ScrollWindowEx, 'ScrollWindowEx', CdStdCall);
 S.RegisterDelphiFunction(@SetScrollPos, 'SetScrollPos', CdStdCall);
 S.RegisterDelphiFunction(@GetScrollPos, 'GetScrollPos', CdStdCall);
 S.RegisterDelphiFunction(@SetScrollRange, 'SetScrollRange', CdStdCall);
 S.RegisterDelphiFunction(@GetScrollRange, 'GetScrollRange', CdStdCall);
 S.RegisterDelphiFunction(@ShowScrollBar, 'ShowScrollBar', CdStdCall);
 S.RegisterDelphiFunction(@EnableScrollBar, 'EnableScrollBar', CdStdCall);
 S.RegisterDelphiFunction(@SetProp, 'SetProp', CdStdCall);
 S.RegisterDelphiFunction(@SetPropA, 'SetPropA', CdStdCall);
 S.RegisterDelphiFunction(@SetPropW, 'SetPropW', CdStdCall);
 S.RegisterDelphiFunction(@GetProp, 'GetProp', CdStdCall);
 S.RegisterDelphiFunction(@GetPropA, 'GetPropA', CdStdCall);
 S.RegisterDelphiFunction(@GetPropW, 'GetPropW', CdStdCall);
 S.RegisterDelphiFunction(@RemoveProp, 'RemoveProp', CdStdCall);
 S.RegisterDelphiFunction(@RemovePropA, 'RemovePropA', CdStdCall);
 S.RegisterDelphiFunction(@RemovePropW, 'RemovePropW', CdStdCall);
 S.RegisterDelphiFunction(@EnumPropsEx, 'EnumPropsEx', CdStdCall);
 S.RegisterDelphiFunction(@EnumPropsExA, 'EnumPropsExA', CdStdCall);
 S.RegisterDelphiFunction(@EnumPropsExW, 'EnumPropsExW', CdStdCall);
 S.RegisterDelphiFunction(@EnumProps, 'EnumProps', CdStdCall);
 S.RegisterDelphiFunction(@EnumPropsA, 'EnumPropsA', CdStdCall);
 S.RegisterDelphiFunction(@EnumPropsW, 'EnumPropsW', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowText, 'SetWindowText', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowTextA, 'SetWindowTextA', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowTextW, 'SetWindowTextW', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowText, 'GetWindowText', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowTextA, 'GetWindowTextA', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowTextW, 'GetWindowTextW', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowTextLength, 'GetWindowTextLength', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowTextLengthA, 'GetWindowTextLengthA', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowTextLengthW, 'GetWindowTextLengthW', CdStdCall);
 S.RegisterDelphiFunction(@GetClientRect, 'GetClientRect', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowRect, 'GetWindowRect', CdStdCall);
 S.RegisterDelphiFunction(@AdjustWindowRect, 'AdjustWindowRect', CdStdCall);
 S.RegisterDelphiFunction(@AdjustWindowRectEx, 'AdjustWindowRectEx', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowContextHelpId, 'SetWindowContextHelpId', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowContextHelpId, 'GetWindowContextHelpId', CdStdCall);
 S.RegisterDelphiFunction(@SetMenuContextHelpId, 'SetMenuContextHelpId', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuContextHelpId, 'GetMenuContextHelpId', CdStdCall);
 S.RegisterDelphiFunction(@MessageBox, 'MessageBox', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxA, 'MessageBoxA', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxW, 'MessageBoxW', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxEx, 'MessageBoxEx', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxExA, 'MessageBoxExA', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxExW, 'MessageBoxExW', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxIndirect, 'MessageBoxIndirect', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxIndirectA, 'MessageBoxIndirectA', CdStdCall);
 S.RegisterDelphiFunction(@MessageBoxIndirectW, 'MessageBoxIndirectW', CdStdCall);
 S.RegisterDelphiFunction(@MessageBeep, 'MessageBeep', CdStdCall);
 S.RegisterDelphiFunction(@ShowCursor, 'ShowCursor', CdStdCall);
 S.RegisterDelphiFunction(@SetCursorPos, 'SetCursorPos', CdStdCall);
 S.RegisterDelphiFunction(@SetCursor, 'SetCursor', CdStdCall);
 S.RegisterDelphiFunction(@GetCursorPos, 'GetCursorPos', CdStdCall);
 S.RegisterDelphiFunction(@ClipCursor, 'ClipCursor', CdStdCall);
 S.RegisterDelphiFunction(@GetClipCursor, 'GetClipCursor', CdStdCall);
 S.RegisterDelphiFunction(@GetCursor, 'GetCursor', CdStdCall);
 S.RegisterDelphiFunction(@CreateCaret, 'CreateCaret', CdStdCall);
 S.RegisterDelphiFunction(@GetCaretBlinkTime, 'GetCaretBlinkTime', CdStdCall);
 S.RegisterDelphiFunction(@SetCaretBlinkTime, 'SetCaretBlinkTime', CdStdCall);
 S.RegisterDelphiFunction(@DestroyCaret, 'DestroyCaret', CdStdCall);
 S.RegisterDelphiFunction(@HideCaret, 'HideCaret', CdStdCall);
 S.RegisterDelphiFunction(@ShowCaret, 'ShowCaret', CdStdCall);
 S.RegisterDelphiFunction(@SetCaretPos, 'SetCaretPos', CdStdCall);
 S.RegisterDelphiFunction(@GetCaretPos, 'GetCaretPos', CdStdCall);
 S.RegisterDelphiFunction(@ClientToScreen, 'ClientToScreen', CdStdCall);
 S.RegisterDelphiFunction(@ScreenToClient, 'ScreenToClient', CdStdCall);
 S.RegisterDelphiFunction(@MapWindowPoints, 'MapWindowPoints', CdStdCall);
 S.RegisterDelphiFunction(@WindowFromPoint, 'WindowFromPoint', CdStdCall);
 S.RegisterDelphiFunction(@ChildWindowFromPoint, 'ChildWindowFromPoint', CdStdCall);
 S.RegisterDelphiFunction(@ChildWindowFromPointEx, 'ChildWindowFromPointEx', CdStdCall);
 S.RegisterDelphiFunction(@GetSysColor, 'GetSysColor', CdStdCall);
 S.RegisterDelphiFunction(@GetSysColorBrush, 'GetSysColorBrush', CdStdCall);
 S.RegisterDelphiFunction(@DrawFocusRect, 'DrawFocusRect', CdStdCall);
 S.RegisterDelphiFunction(@FillRect, 'FillRect', CdStdCall);
 S.RegisterDelphiFunction(@FrameRect, 'FrameRect', CdStdCall);
 S.RegisterDelphiFunction(@InvertRect, 'InvertRect', CdStdCall);
 S.RegisterDelphiFunction(@SetRect, 'SetRect', CdStdCall);
 S.RegisterDelphiFunction(@SetRectEmpty, 'SetRectEmpty', CdStdCall);
 S.RegisterDelphiFunction(@CopyRect, 'CopyRect', CdStdCall);
 S.RegisterDelphiFunction(@InflateRect, 'InflateRect', CdStdCall);
 S.RegisterDelphiFunction(@IntersectRect, 'IntersectRect', CdStdCall);
 S.RegisterDelphiFunction(@UnionRect, 'UnionRect', CdStdCall);
 S.RegisterDelphiFunction(@SubtractRect, 'SubtractRect', CdStdCall);
 S.RegisterDelphiFunction(@OffsetRect, 'OffsetRect', CdStdCall);
 S.RegisterDelphiFunction(@IsRectEmpty, 'IsRectEmpty', CdStdCall);
 S.RegisterDelphiFunction(@EqualRect, 'EqualRect', CdStdCall);
 S.RegisterDelphiFunction(@PtInRect, 'PtInRect', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowWord, 'GetWindowWord', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowWord, 'SetWindowWord', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowLong, 'GetWindowLong', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowLongA, 'GetWindowLongA', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowLongW, 'GetWindowLongW', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowLong, 'SetWindowLong', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowLongA, 'SetWindowLongA', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowLongW, 'SetWindowLongW', CdStdCall);
 S.RegisterDelphiFunction(@GetClassWord, 'GetClassWord', CdStdCall);
 S.RegisterDelphiFunction(@SetClassWord, 'SetClassWord', CdStdCall);
 S.RegisterDelphiFunction(@GetClassLong, 'GetClassLong', CdStdCall);
 S.RegisterDelphiFunction(@GetClassLongA, 'GetClassLongA', CdStdCall);
 S.RegisterDelphiFunction(@GetClassLongW, 'GetClassLongW', CdStdCall);
 S.RegisterDelphiFunction(@SetClassLong, 'SetClassLong', CdStdCall);
 S.RegisterDelphiFunction(@SetClassLongA, 'SetClassLongA', CdStdCall);
 S.RegisterDelphiFunction(@SetClassLongW, 'SetClassLongW', CdStdCall);
 S.RegisterDelphiFunction(@GetDesktopWindow, 'GetDesktopWindow', CdStdCall);
 S.RegisterDelphiFunction(@GetParent, 'GetParent', CdStdCall);
 S.RegisterDelphiFunction(@SetParent, 'SetParent', CdStdCall);
 S.RegisterDelphiFunction(@EnumChildWindows, 'EnumChildWindows', CdStdCall);
 S.RegisterDelphiFunction(@FindWindow, 'FindWindow', CdStdCall);
 S.RegisterDelphiFunction(@FindWindowA, 'FindWindowA', CdStdCall);
 S.RegisterDelphiFunction(@FindWindowW, 'FindWindowW', CdStdCall);
 S.RegisterDelphiFunction(@FindWindowEx, 'FindWindowEx', CdStdCall);
 S.RegisterDelphiFunction(@FindWindowExA, 'FindWindowExA', CdStdCall);
 S.RegisterDelphiFunction(@FindWindowExW, 'FindWindowExW', CdStdCall);
 S.RegisterDelphiFunction(@EnumWindows, 'EnumWindows', CdStdCall);
 S.RegisterDelphiFunction(@EnumThreadWindows, 'EnumThreadWindows', CdStdCall);
 S.RegisterDelphiFunction(@EnumTaskWindows, 'EnumTaskWindows', cdRegister);
 S.RegisterDelphiFunction(@GetClassName, 'GetClassName', CdStdCall);
 S.RegisterDelphiFunction(@GetClassNameA, 'GetClassNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetClassNameW, 'GetClassNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetTopWindow, 'GetTopWindow', CdStdCall);
 S.RegisterDelphiFunction(@GetNextWindow, 'GetNextWindow', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowThreadProcessId, 'GetWindowThreadProcessId', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowThreadProcessId, 'GetWindowThreadProcessId', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowTask, 'GetWindowTask', cdRegister);
 S.RegisterDelphiFunction(@GetLastActivePopup, 'GetLastActivePopup', CdStdCall);
 S.RegisterDelphiFunction(@GetWindow, 'GetWindow', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowsHook, 'SetWindowsHook', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowsHookA, 'SetWindowsHookA', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowsHookW, 'SetWindowsHookW', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowsHookEx, 'SetWindowsHookEx', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowsHookExA, 'SetWindowsHookExA', CdStdCall);
 S.RegisterDelphiFunction(@SetWindowsHookExW, 'SetWindowsHookExW', CdStdCall);
 S.RegisterDelphiFunction(@UnhookWindowsHook, 'UnhookWindowsHook', CdStdCall);
 S.RegisterDelphiFunction(@UnhookWindowsHookEx, 'UnhookWindowsHookEx', CdStdCall);
 S.RegisterDelphiFunction(@CallNextHookEx, 'CallNextHookEx', CdStdCall);
 S.RegisterDelphiFunction(@DefHookProc, 'DefHookProc', cdRegister);
 S.RegisterDelphiFunction(@CheckMenuRadioItem, 'CheckMenuRadioItem', CdStdCall);
 S.RegisterDelphiFunction(@LoadBitmap, 'LoadBitmap', CdStdCall);
 S.RegisterDelphiFunction(@LoadBitmapA, 'LoadBitmapA', CdStdCall);
 S.RegisterDelphiFunction(@LoadBitmapW, 'LoadBitmapW', CdStdCall);
 S.RegisterDelphiFunction(@LoadCursor, 'LoadCursor', CdStdCall);
 S.RegisterDelphiFunction(@LoadCursorA, 'LoadCursorA', CdStdCall);
 S.RegisterDelphiFunction(@LoadCursorW, 'LoadCursorW', CdStdCall);
 S.RegisterDelphiFunction(@LoadCursorFromFile, 'LoadCursorFromFile', CdStdCall);
 S.RegisterDelphiFunction(@LoadCursorFromFileA, 'LoadCursorFromFileA', CdStdCall);
 S.RegisterDelphiFunction(@LoadCursorFromFileW, 'LoadCursorFromFileW', CdStdCall);
 S.RegisterDelphiFunction(@CreateCursor, 'CreateCursor', CdStdCall);
 S.RegisterDelphiFunction(@DestroyCursor, 'DestroyCursor', CdStdCall);
 S.RegisterDelphiFunction(@SetSystemCursor, 'SetSystemCursor', CdStdCall);
 S.RegisterDelphiFunction(@LoadIcon, 'LoadIcon', CdStdCall);
 S.RegisterDelphiFunction(@LoadIconA, 'LoadIconA', CdStdCall);
 S.RegisterDelphiFunction(@LoadIconW, 'LoadIconW', CdStdCall);
 S.RegisterDelphiFunction(@CreateIcon, 'CreateIcon', CdStdCall);
 S.RegisterDelphiFunction(@DestroyIcon, 'DestroyIcon', CdStdCall);
 S.RegisterDelphiFunction(@LookupIconIdFromDirectory, 'LookupIconIdFromDirectory', CdStdCall);
 S.RegisterDelphiFunction(@LookupIconIdFromDirectoryEx, 'LookupIconIdFromDirectoryEx', CdStdCall);
 S.RegisterDelphiFunction(@CreateIconFromResource, 'CreateIconFromResource', CdStdCall);
 S.RegisterDelphiFunction(@CreateIconFromResourceEx, 'CreateIconFromResourceEx', CdStdCall);
 S.RegisterDelphiFunction(@LoadImage, 'LoadImage', CdStdCall);
 S.RegisterDelphiFunction(@LoadImageA, 'LoadImageA', CdStdCall);
 S.RegisterDelphiFunction(@LoadImageW, 'LoadImageW', CdStdCall);
 S.RegisterDelphiFunction(@CopyImage, 'CopyImage', CdStdCall);
 S.RegisterDelphiFunction(@DrawIconEx, 'DrawIconEx', CdStdCall);
 S.RegisterDelphiFunction(@CreateIconIndirect, 'CreateIconIndirect', CdStdCall);
 S.RegisterDelphiFunction(@CopyIcon, 'CopyIcon', CdStdCall);
 S.RegisterDelphiFunction(@GetIconInfo, 'GetIconInfo', CdStdCall);
 S.RegisterDelphiFunction(@LoadString, 'LoadString', CdStdCall);
 S.RegisterDelphiFunction(@LoadStringA, 'LoadStringA', CdStdCall);
 S.RegisterDelphiFunction(@LoadStringW, 'LoadStringW', CdStdCall);
 S.RegisterDelphiFunction(@IsDialogMessage, 'IsDialogMessage', CdStdCall);
 S.RegisterDelphiFunction(@IsDialogMessageA, 'IsDialogMessageA', CdStdCall);
 S.RegisterDelphiFunction(@IsDialogMessageW, 'IsDialogMessageW', CdStdCall);
 S.RegisterDelphiFunction(@MapDialogRect, 'MapDialogRect', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirList, 'DlgDirList', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirListA, 'DlgDirListA', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirListW, 'DlgDirListW', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirSelectEx, 'DlgDirSelectEx', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirSelectExA, 'DlgDirSelectExA', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirSelectExW, 'DlgDirSelectExW', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirListComboBox, 'DlgDirListComboBox', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirListComboBoxA, 'DlgDirListComboBoxA', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirListComboBoxW, 'DlgDirListComboBoxW', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirSelectComboBoxEx, 'DlgDirSelectComboBoxEx', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirSelectComboBoxExA, 'DlgDirSelectComboBoxExA', CdStdCall);
 S.RegisterDelphiFunction(@DlgDirSelectComboBoxExW, 'DlgDirSelectComboBoxExW', CdStdCall);
 S.RegisterDelphiFunction(@SetScrollInfo, 'SetScrollInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetScrollInfo, 'GetScrollInfo', CdStdCall);
 S.RegisterDelphiFunction(@DefFrameProc, 'DefFrameProc', CdStdCall);
 S.RegisterDelphiFunction(@DefFrameProcA, 'DefFrameProcA', CdStdCall);
 S.RegisterDelphiFunction(@DefFrameProcW, 'DefFrameProcW', CdStdCall);
 S.RegisterDelphiFunction(@DefMDIChildProc, 'DefMDIChildProc', CdStdCall);
 S.RegisterDelphiFunction(@DefMDIChildProcA, 'DefMDIChildProcA', CdStdCall);
 S.RegisterDelphiFunction(@DefMDIChildProcW, 'DefMDIChildProcW', CdStdCall);
 S.RegisterDelphiFunction(@TranslateMDISysAccel, 'TranslateMDISysAccel', CdStdCall);
 S.RegisterDelphiFunction(@ArrangeIconicWindows, 'ArrangeIconicWindows', CdStdCall);
 S.RegisterDelphiFunction(@CreateMDIWindow, 'CreateMDIWindow', CdStdCall);
 S.RegisterDelphiFunction(@CreateMDIWindowA, 'CreateMDIWindowA', CdStdCall);
 S.RegisterDelphiFunction(@CreateMDIWindowW, 'CreateMDIWindowW', CdStdCall);
 S.RegisterDelphiFunction(@TileWindows, 'TileWindows', CdStdCall);
 S.RegisterDelphiFunction(@CascadeWindows, 'CascadeWindows', CdStdCall);
 S.RegisterDelphiFunction(@WinHelp, 'WinHelp', CdStdCall);
 S.RegisterDelphiFunction(@WinHelpA, 'WinHelpA', CdStdCall);
 S.RegisterDelphiFunction(@WinHelpW, 'WinHelpW', CdStdCall);
 S.RegisterDelphiFunction(@HtmlHelp, 'HtmlHelp', cdRegister);
 S.RegisterDelphiFunction(@HtmlHelpA, 'HtmlHelpA', cdRegister);
 S.RegisterDelphiFunction(@HtmlHelpW, 'HtmlHelpW', cdRegister);
 S.RegisterDelphiFunction(@GetGuiResources, 'GetGuiResources', CdStdCall);
 S.RegisterDelphiFunction(@ChangeDisplaySettings, 'ChangeDisplaySettings', CdStdCall);
 S.RegisterDelphiFunction(@ChangeDisplaySettingsA, 'ChangeDisplaySettingsA', CdStdCall);
 S.RegisterDelphiFunction(@ChangeDisplaySettingsW, 'ChangeDisplaySettingsW', CdStdCall);
 S.RegisterDelphiFunction(@ChangeDisplaySettingsEx, 'ChangeDisplaySettingsEx', CdStdCall);
 S.RegisterDelphiFunction(@ChangeDisplaySettingsExA, 'ChangeDisplaySettingsExA', CdStdCall);
 S.RegisterDelphiFunction(@ChangeDisplaySettingsExW, 'ChangeDisplaySettingsExW', CdStdCall);
 S.RegisterDelphiFunction(@EnumDisplaySettings, 'EnumDisplaySettings', CdStdCall);
 S.RegisterDelphiFunction(@EnumDisplaySettingsA, 'EnumDisplaySettingsA', CdStdCall);
 S.RegisterDelphiFunction(@EnumDisplaySettingsW, 'EnumDisplaySettingsW', CdStdCall);
 S.RegisterDelphiFunction(@EnumDisplayDevices, 'EnumDisplayDevices', CdStdCall);
 S.RegisterDelphiFunction(@EnumDisplayDevicesA, 'EnumDisplayDevicesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumDisplayDevicesW, 'EnumDisplayDevicesW', CdStdCall);
 S.RegisterDelphiFunction(@SystemParametersInfo, 'SystemParametersInfo', CdStdCall);
 S.RegisterDelphiFunction(@SystemParametersInfoA, 'SystemParametersInfoA', CdStdCall);
 S.RegisterDelphiFunction(@SystemParametersInfoW, 'SystemParametersInfoW', CdStdCall);
 S.RegisterDelphiFunction(@SetDebugErrorLevel, 'SetDebugErrorLevel', CdStdCall);
 S.RegisterDelphiFunction(@SetLastErrorEx, 'SetLastErrorEx', CdStdCall);
 S.RegisterDelphiFunction(@NotifyWinEvent, 'NotifyWinEvent', CdStdCall);
 S.RegisterDelphiFunction(@SetWinEventHook, 'SetWinEventHook', CdStdCall);
 S.RegisterDelphiFunction(@UnhookWinEvent, 'UnhookWinEvent', CdStdCall);
 S.RegisterDelphiFunction(@GetGUIThreadInfo, 'GetGUIThreadInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowModuleFileName, 'GetWindowModuleFileName', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowModuleFileNameA, 'GetWindowModuleFileNameA', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowModuleFileNameW, 'GetWindowModuleFileNameW', CdStdCall);
 S.RegisterDelphiFunction(@GetCursorInfo, 'GetCursorInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetWindowInfo, 'GetWindowInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetTitleBarInfo, 'GetTitleBarInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetMenuBarInfo, 'GetMenuBarInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetScrollBarInfo, 'GetScrollBarInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetComboBoxInfo, 'GetComboBoxInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetAncestor, 'GetAncestor', CdStdCall);
 S.RegisterDelphiFunction(@RealChildWindowFromPoint, 'RealChildWindowFromPoint', CdStdCall);
 S.RegisterDelphiFunction(@RealGetWindowClass, 'RealGetWindowClass', CdStdCall);
 S.RegisterDelphiFunction(@RealGetWindowClassA, 'RealGetWindowClassA', CdStdCall);
 S.RegisterDelphiFunction(@RealGetWindowClassW, 'RealGetWindowClassW', CdStdCall);
 S.RegisterDelphiFunction(@GetAltTabInfo, 'GetAltTabInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetAltTabInfoA, 'GetAltTabInfoA', CdStdCall);
 S.RegisterDelphiFunction(@GetAltTabInfoW, 'GetAltTabInfoW', CdStdCall);
 S.RegisterDelphiFunction(@GetListBoxInfo, 'GetListBoxInfo', CdStdCall);
 S.RegisterDelphiFunction(@LockWorkStation, 'LockWorkStation', CdStdCall);
 S.RegisterDelphiFunction(@UserHandleGrantAccess, 'UserHandleGrantAccess', CdStdCall);
 S.RegisterDelphiFunction(@IsValidCodePage, 'IsValidCodePage', CdStdCall);
 S.RegisterDelphiFunction(@GetACP, 'GetACP', CdStdCall);
 S.RegisterDelphiFunction(@GetOEMCP, 'GetOEMCP', CdStdCall);
 S.RegisterDelphiFunction(@GetCPInfo, 'GetCPInfo', CdStdCall);
 S.RegisterDelphiFunction(@IsDBCSLeadByte, 'IsDBCSLeadByte', CdStdCall);
 S.RegisterDelphiFunction(@IsDBCSLeadByteEx, 'IsDBCSLeadByteEx', CdStdCall);
 S.RegisterDelphiFunction(@MultiByteToWideChar, 'MultiByteToWideChar', CdStdCall);
 S.RegisterDelphiFunction(@WideCharToMultiByte, 'WideCharToMultiByte', CdStdCall);
 S.RegisterDelphiFunction(@CompareString, 'CompareString', CdStdCall);
 S.RegisterDelphiFunction(@CompareStringA, 'CompareStringA', CdStdCall);
 S.RegisterDelphiFunction(@CompareStringW, 'CompareStringW', CdStdCall);
 S.RegisterDelphiFunction(@LCMapString, 'LCMapString', CdStdCall);
 S.RegisterDelphiFunction(@LCMapStringA, 'LCMapStringA', CdStdCall);
 S.RegisterDelphiFunction(@LCMapStringW, 'LCMapStringW', CdStdCall);
 S.RegisterDelphiFunction(@GetLocaleInfo, 'GetLocaleInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetLocaleInfoA, 'GetLocaleInfoA', CdStdCall);
 S.RegisterDelphiFunction(@GetLocaleInfoW, 'GetLocaleInfoW', CdStdCall);
 S.RegisterDelphiFunction(@SetLocaleInfo, 'SetLocaleInfo', CdStdCall);
 S.RegisterDelphiFunction(@SetLocaleInfoA, 'SetLocaleInfoA', CdStdCall);
 S.RegisterDelphiFunction(@SetLocaleInfoW, 'SetLocaleInfoW', CdStdCall);
 S.RegisterDelphiFunction(@GetTimeFormat, 'GetTimeFormat', CdStdCall);
 S.RegisterDelphiFunction(@GetTimeFormatA, 'GetTimeFormatA', CdStdCall);
 S.RegisterDelphiFunction(@GetTimeFormatW, 'GetTimeFormatW', CdStdCall);
 S.RegisterDelphiFunction(@GetDateFormat, 'GetDateFormat', CdStdCall);
 S.RegisterDelphiFunction(@GetDateFormatA, 'GetDateFormatA', CdStdCall);
 S.RegisterDelphiFunction(@GetDateFormatW, 'GetDateFormatW', CdStdCall);
 S.RegisterDelphiFunction(@GetNumberFormat, 'GetNumberFormat', CdStdCall);
 S.RegisterDelphiFunction(@GetNumberFormatA, 'GetNumberFormatA', CdStdCall);
 S.RegisterDelphiFunction(@GetNumberFormatW, 'GetNumberFormatW', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrencyFormat, 'GetCurrencyFormat', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrencyFormatA, 'GetCurrencyFormatA', CdStdCall);
 S.RegisterDelphiFunction(@GetCurrencyFormatW, 'GetCurrencyFormatW', CdStdCall);
 S.RegisterDelphiFunction(@EnumCalendarInfo, 'EnumCalendarInfo', CdStdCall);
 S.RegisterDelphiFunction(@EnumCalendarInfoA, 'EnumCalendarInfoA', CdStdCall);
 S.RegisterDelphiFunction(@EnumCalendarInfoW, 'EnumCalendarInfoW', CdStdCall);
 S.RegisterDelphiFunction(@EnumTimeFormats, 'EnumTimeFormats', CdStdCall);
 S.RegisterDelphiFunction(@EnumTimeFormatsA, 'EnumTimeFormatsA', CdStdCall);
 S.RegisterDelphiFunction(@EnumTimeFormatsW, 'EnumTimeFormatsW', CdStdCall);
 S.RegisterDelphiFunction(@EnumDateFormats, 'EnumDateFormats', CdStdCall);
 S.RegisterDelphiFunction(@EnumDateFormatsA, 'EnumDateFormatsA', CdStdCall);
 S.RegisterDelphiFunction(@EnumDateFormatsW, 'EnumDateFormatsW', CdStdCall);
 S.RegisterDelphiFunction(@IsValidLocale, 'IsValidLocale', CdStdCall);
 S.RegisterDelphiFunction(@ConvertDefaultLocale, 'ConvertDefaultLocale', CdStdCall);
 S.RegisterDelphiFunction(@GetThreadLocale, 'GetThreadLocale', CdStdCall);
 S.RegisterDelphiFunction(@SetThreadLocale, 'SetThreadLocale', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemDefaultLangID, 'GetSystemDefaultLangID', CdStdCall);
 S.RegisterDelphiFunction(@GetUserDefaultLangID, 'GetUserDefaultLangID', CdStdCall);
 S.RegisterDelphiFunction(@GetSystemDefaultLCID, 'GetSystemDefaultLCID', CdStdCall);
 S.RegisterDelphiFunction(@GetUserDefaultLCID, 'GetUserDefaultLCID', CdStdCall);
 S.RegisterDelphiFunction(@GetStringTypeEx, 'GetStringTypeEx', CdStdCall);
 S.RegisterDelphiFunction(@GetStringTypeExA, 'GetStringTypeExA', CdStdCall);
 S.RegisterDelphiFunction(@GetStringTypeExW, 'GetStringTypeExW', CdStdCall);
 S.RegisterDelphiFunction(@GetStringTypeA, 'GetStringTypeA', CdStdCall);
 S.RegisterDelphiFunction(@GetStringTypeW, 'GetStringTypeW', CdStdCall);
 S.RegisterDelphiFunction(@FoldString, 'FoldString', CdStdCall);
 S.RegisterDelphiFunction(@FoldStringA, 'FoldStringA', CdStdCall);
 S.RegisterDelphiFunction(@FoldStringW, 'FoldStringW', CdStdCall);
 S.RegisterDelphiFunction(@EnumSystemLocales, 'EnumSystemLocales', CdStdCall);
 S.RegisterDelphiFunction(@EnumSystemLocalesA, 'EnumSystemLocalesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumSystemLocalesW, 'EnumSystemLocalesW', CdStdCall);
 S.RegisterDelphiFunction(@EnumSystemCodePages, 'EnumSystemCodePages', CdStdCall);
 S.RegisterDelphiFunction(@EnumSystemCodePagesA, 'EnumSystemCodePagesA', CdStdCall);
 S.RegisterDelphiFunction(@EnumSystemCodePagesW, 'EnumSystemCodePagesW', CdStdCall);
 S.RegisterDelphiFunction(@GetFileVersionInfoSize, 'GetFileVersionInfoSize', CdStdCall);
 S.RegisterDelphiFunction(@GetFileVersionInfoSizeA, 'GetFileVersionInfoSizeA', CdStdCall);
 S.RegisterDelphiFunction(@GetFileVersionInfoSizeW, 'GetFileVersionInfoSizeW', CdStdCall);
 S.RegisterDelphiFunction(@GetFileVersionInfo, 'GetFileVersionInfo', CdStdCall);
 S.RegisterDelphiFunction(@GetFileVersionInfoA, 'GetFileVersionInfoA', CdStdCall);
 S.RegisterDelphiFunction(@GetFileVersionInfoW, 'GetFileVersionInfoW', CdStdCall);
 S.RegisterDelphiFunction(@VerLanguageName, 'VerLanguageName', CdStdCall);
 S.RegisterDelphiFunction(@VerLanguageNameA, 'VerLanguageNameA', CdStdCall);
 S.RegisterDelphiFunction(@VerLanguageNameW, 'VerLanguageNameW', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnection, 'WNetAddConnection', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnectionA, 'WNetAddConnectionA', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnectionW, 'WNetAddConnectionW', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnection2, 'WNetAddConnection2', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnection2A, 'WNetAddConnection2A', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnection2W, 'WNetAddConnection2W', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnection3, 'WNetAddConnection3', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnection3A, 'WNetAddConnection3A', CdStdCall);
 S.RegisterDelphiFunction(@WNetAddConnection3W, 'WNetAddConnection3W', CdStdCall);
 S.RegisterDelphiFunction(@WNetCancelConnection, 'WNetCancelConnection', CdStdCall);
 S.RegisterDelphiFunction(@WNetCancelConnectionA, 'WNetCancelConnectionA', CdStdCall);
 S.RegisterDelphiFunction(@WNetCancelConnectionW, 'WNetCancelConnectionW', CdStdCall);
 S.RegisterDelphiFunction(@WNetCancelConnection2, 'WNetCancelConnection2', CdStdCall);
 S.RegisterDelphiFunction(@WNetCancelConnection2A, 'WNetCancelConnection2A', CdStdCall);
 S.RegisterDelphiFunction(@WNetCancelConnection2W, 'WNetCancelConnection2W', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetConnection, 'WNetGetConnection', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetConnectionA, 'WNetGetConnectionA', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetConnectionW, 'WNetGetConnectionW', CdStdCall);
 S.RegisterDelphiFunction(@WNetUseConnection, 'WNetUseConnection', CdStdCall);
 S.RegisterDelphiFunction(@WNetUseConnectionA, 'WNetUseConnectionA', CdStdCall);
 S.RegisterDelphiFunction(@WNetUseConnectionW, 'WNetUseConnectionW', CdStdCall);
 S.RegisterDelphiFunction(@WNetSetConnection, 'WNetSetConnection', CdStdCall);
 S.RegisterDelphiFunction(@WNetSetConnectionA, 'WNetSetConnectionA', CdStdCall);
 S.RegisterDelphiFunction(@WNetSetConnectionW, 'WNetSetConnectionW', CdStdCall);
 S.RegisterDelphiFunction(@WNetConnectionDialog, 'WNetConnectionDialog', CdStdCall);
 S.RegisterDelphiFunction(@WNetDisconnectDialog, 'WNetDisconnectDialog', CdStdCall);
 S.RegisterDelphiFunction(@WNetConnectionDialog1, 'WNetConnectionDialog1', CdStdCall);
 S.RegisterDelphiFunction(@WNetConnectionDialog1A, 'WNetConnectionDialog1A', CdStdCall);
 S.RegisterDelphiFunction(@WNetConnectionDialog1W, 'WNetConnectionDialog1W', CdStdCall);
 S.RegisterDelphiFunction(@WNetDisconnectDialog1, 'WNetDisconnectDialog1', CdStdCall);
 S.RegisterDelphiFunction(@WNetDisconnectDialog1A, 'WNetDisconnectDialog1A', CdStdCall);
 S.RegisterDelphiFunction(@WNetDisconnectDialog1W, 'WNetDisconnectDialog1W', CdStdCall);
 S.RegisterDelphiFunction(@WNetOpenEnum, 'WNetOpenEnum', CdStdCall);
 S.RegisterDelphiFunction(@WNetOpenEnumA, 'WNetOpenEnumA', CdStdCall);
 S.RegisterDelphiFunction(@WNetOpenEnumW, 'WNetOpenEnumW', CdStdCall);
 S.RegisterDelphiFunction(@WNetEnumResource, 'WNetEnumResource', CdStdCall);
 S.RegisterDelphiFunction(@WNetEnumResourceA, 'WNetEnumResourceA', CdStdCall);
 S.RegisterDelphiFunction(@WNetEnumResourceW, 'WNetEnumResourceW', CdStdCall);
 S.RegisterDelphiFunction(@WNetCloseEnum, 'WNetCloseEnum', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetResourceParent, 'WNetGetResourceParent', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetResourceParentA, 'WNetGetResourceParentA', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetResourceParentW, 'WNetGetResourceParentW', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetUniversalName, 'WNetGetUniversalName', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetUniversalNameA, 'WNetGetUniversalNameA', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetUniversalNameW, 'WNetGetUniversalNameW', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetUser, 'WNetGetUser', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetUserA, 'WNetGetUserA', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetUserW, 'WNetGetUserW', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetProviderName, 'WNetGetProviderName', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetProviderNameA, 'WNetGetProviderNameA', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetProviderNameW, 'WNetGetProviderNameW', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetNetworkInformation, 'WNetGetNetworkInformation', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetNetworkInformationA, 'WNetGetNetworkInformationA', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetNetworkInformationW, 'WNetGetNetworkInformationW', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetLastError, 'WNetGetLastError', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetLastErrorA, 'WNetGetLastErrorA', CdStdCall);
 S.RegisterDelphiFunction(@WNetGetLastErrorW, 'WNetGetLastErrorW', CdStdCall);
 S.RegisterDelphiFunction(@MultinetGetConnectionPerformance, 'MultinetGetConnectionPerformance', CdStdCall);
 S.RegisterDelphiFunction(@MultinetGetConnectionPerformanceA, 'MultinetGetConnectionPerformanceA', CdStdCall);
 S.RegisterDelphiFunction(@MultinetGetConnectionPerformanceW, 'MultinetGetConnectionPerformanceW', CdStdCall);
 S.RegisterDelphiFunction(@DdeSetQualityOfService, 'DdeSetQualityOfService', CdStdCall);
 S.RegisterDelphiFunction(@ImpersonateDdeClientWindow, 'ImpersonateDdeClientWindow', CdStdCall);
 S.RegisterDelphiFunction(@PackDDElParam, 'PackDDElParam', CdStdCall);
 S.RegisterDelphiFunction(@UnpackDDElParam, 'UnpackDDElParam', CdStdCall);
 S.RegisterDelphiFunction(@FreeDDElParam, 'FreeDDElParam', CdStdCall);
 S.RegisterDelphiFunction(@ReuseDDElParam, 'ReuseDDElParam', CdStdCall);
 S.RegisterDelphiFunction(@HwndMSWheel, 'HwndMSWheel', cdRegister);
end;

 
 
{ TPSImport_Windows }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Windows.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Windows(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Windows.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Windows(ri);
  RIRegister_Windows_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
