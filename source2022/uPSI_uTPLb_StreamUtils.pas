unit uPSI_uTPLb_StreamUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
  function  Read( var Buffer; Count: Longint): Longint; override;
  rename Base64_to_stream

  function Stream_to_Base64Bytes(ASource: TStream; const ATransform: TBytes = nil): TBytes;

  procedure Base64_to_streamBytes( const Base64: TBytes; Destin: TStream);


}

interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uTPLb_StreamUtils = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TDesalinationWriteStream(CL: TPSPascalCompiler);
procedure SIRegister_uTPLb_StreamUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_uTPLb_StreamUtils_Routines(S: TPSExec);
procedure RIRegister_TDesalinationWriteStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_uTPLb_StreamUtils(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   uTPLb_StreamUtils, uTPLb_PointerArithmetic
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uTPLb_StreamUtils]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TDesalinationWriteStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStream', 'TDesalinationWriteStream') do
  with CL.AddClassN(CL.FindClass('TStream'),'TDesalinationWriteStream') do begin
    RegisterProperty('FreshwaterStream', 'TStream', iptrw);
    RegisterProperty('SaltVolume', 'integer', iptrw);
     RegisterMethod('function Read(var Buffer: string; Count : longint) : longint;');
    RegisterMethod('function Seek(Offset : int64; Origin : TSeekOrigin) : longint;');
    RegisterMethod('function Write(const Buffer: string; Count : longint) : longint;');
  end;
end;


//1) read the available Size of the TStream, allocate a String of that length,
//and then Read() the TStream contents into the String:

 function StreamToString2(Stream: TStream): String;
 var
  len: Integer;
 begin
    len:= Stream.Size - Stream.Position;  
    SetLength(Result, len);
    if len > 0 then Stream.ReadBuffer(Result[1], len);
      //writeln('test - buffer read check!')
 end;
 {code}

//2) create an intermediate TStringStream, CopyFrom() the TStream to the
//TStringStream, and then read the TStringStream.DataString property:

{code:delphi}
 function StreamToString3(Stream: TStream): String;
 begin
    with TStringStream.Create('') do
    try
        CopyFrom(Stream, Stream.Size - Stream.Position);
        Result:= DataString;
    finally
        Free;
    end;
 end;

 function StreamToString4(Stream: TStream): string;
 var
  ms: TMemoryStream;
 begin
   Result := '';
   ms := TMemoryStream.Create;
   try
     ms.LoadFromStream(Stream);
    SetString(Result, PChar(ms.memory), ms.Size);
   finally
    ms.Free;
  end;
 end;


  function MemoryStreamToString(M: TMemoryStream): String;
var
  NewCapacity: Longint;
begin
  if (M.Size = 0) or (M.Memory = nil) then
    Result:= ''
  else
  begin
   (* if TMemoryStreamProtected(M).Capacity = M.Size then
    begin
      NewCapacity:= M.Size+1;
      TMemoryStreamProtected(M).Realloc(NewCapacity);
    end; *)
    //NullString(M.Memory^)[M.Size]:= #0;
    Result:= StrPas(M.Memory);
  end;
end;

procedure BurnMemoryString( var Buff: string; BuffLen: integer);
begin
FillChar( Buff, BuffLen, 0)
end;

procedure BurnMemoryString2( var Buff; BuffLen: integer);
begin
FillChar( Buff, BuffLen, 0)
end;

procedure BurnMemoryInteger( var Buff: integer; BuffLen: integer);
begin
FillChar( Buff, BuffLen, 0)
end;

procedure BurnMemoryInteger2( var Buff; BuffLen: integer);
begin
FillChar( Buff, BuffLen, 0)
end;

procedure BurnMemoryByteArray( var buff: array of byte; BuffLen: integer);
begin
FillChar( Buff, BuffLen, 0)
end;

procedure BurnMemoryByteArray3( var buff; BuffLen: integer);
begin
FillChar( Buff, BuffLen, 0)
end;

type TByteDynArray = array of Byte;


procedure BurnMemoryByteArray2( var buff: TByteDynArray; BuffLen: integer);
begin
FillChar( Buff, BuffLen, 0)
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uTPLb_StreamUtils(CL: TPSPascalCompiler);
begin
  SIRegister_TDesalinationWriteStream(CL);
 // CL.AddTypeS('TByteDynArray', 'array of Byte');
 CL.AddDelphiFunction('Function CloneMemoryStream( Original : TMemoryStream) : TMemoryStream');
 CL.AddDelphiFunction('Procedure CopyMemoryStream( Source, Destination : TMemoryStream)');
 CL.AddDelphiFunction('Procedure BurnMemoryStream( Destructo : TMemoryStream)');
 CL.AddDelphiFunction('Procedure BurnMemory( var Buff, BuffLen : integer)');
 CL.AddDelphiFunction('Procedure BurnMemoryString( var Buff: string; BuffLen : integer)');
 CL.AddDelphiFunction('Procedure BurnMemoryInteger( var Buff: Integer; BuffLen : integer)');
 CL.AddDelphiFunction('Procedure BurnMemoryString2( Buff: string; BuffLen : integer)');
 CL.AddDelphiFunction('Procedure BurnMemoryInteger2( Buff: Integer; BuffLen : integer)');

 //CL.AddDelphiFunction('Procedure BurnMemoryByteArray( var array of Byte; BuffLen : integer)');
 CL.AddDelphiFunction('Procedure BurnMemoryByteArray2( var buff: TByteDynArray; BuffLen : integer)');
 CL.AddDelphiFunction('Procedure BurnMemoryByteArray3( buff: TByteDynArray; BuffLen : integer)');

 CL.AddDelphiFunction('Procedure ZeroFillStream( Stream : TMemoryStream)');
 CL.AddDelphiFunction('Procedure RandomFillStream( Stream : TMemoryStream)');
 CL.AddDelphiFunction('Procedure XOR_Streams2( Dest, Srce : TMemoryStream)');
 CL.AddDelphiFunction('Procedure XOR_Streams3( Dest, SrceA, SrceB : TMemoryStream)');
 CL.AddDelphiFunction('Function CompareMemoryStreams( S1, S2 : TMemoryStream) : boolean');
 CL.AddDelphiFunction('Function Stream_to_Base64( Source : TStream) : ansistring');
 CL.AddDelphiFunction('Function Stream_to_Base642( Source : TStream) : ansistring');
 CL.AddDelphiFunction('Procedure Base64_to_stream2( const Base64 : ansistring; Destin : TStream)');
 CL.AddDelphiFunction('Procedure Base64_to_stream( const Base64 : ansistring; Destin : TStream)');

 CL.AddDelphiFunction('Function Stream_to_AnsiString( Source : TStream) : ansistring');
 CL.AddDelphiFunction('Function StreamtoAnsiString( Source : TStream) : ansistring');

 CL.AddDelphiFunction('Function StreamToString( Source : TStream) : string');
 CL.AddDelphiFunction('Function StreamToString2( Source : TStream) : string');
CL.AddDelphiFunction('Function StreamToString3( Source : TStream) : string');
CL.AddDelphiFunction('Function StreamToString4( Source : TStream) : string');

 CL.AddDelphiFunction('Procedure AnsiString_to_stream( const Value : ansistring; Destin : TStream)');
 CL.AddDelphiFunction('Function CompareFiles( const FN1, FN2 : string; Breathe : TNotifyEvent; BreathingSender : TObject) : boolean');
 CL.AddDelphiFunction('Function FileSize( const FileName : string) : int64');
 CL.AddDelphiFunction('Function Stream_to_decimalbytes( Source : TStream) : string');
 CL.AddDelphiFunction('Function StreamToDecimalbytes( Source : TStream) : string');
 CL.AddDelphiFunction('Function StreamtoOrd( Source : TStream) : string');
 CL.AddDelphiFunction('Function StreamToByte( Source : TStream) : string');

 CL.AddDelphiFunction('Function DisplayStream( Stream : TStream) : string');

 CL.AddDelphiFunction('procedure Base64_to_streamBytes( const Base64: TBytes; Destin: TStream);');
 CL.AddDelphiFunction('function Stream_to_Base64Bytes(ASource: TStream; const ATransform: TBytes): TBytes;');
 CL.AddDelphiFunction('function Stream_To_Hex(ASource: TStream): Ansistring;');
 CL.AddDelphiFunction('Procedure ClearMemory( Stream : TMemoryStream; Offset, CountBytes : integer)');
 CL.AddDelphiFunction('Function ReadMem( Source : TStream; Destin : TMemoryStream; DestinOffset, CountBytes : integer) : integer');
 CL.AddDelphiFunction('Function WriteMem( Source : TMemoryStream; SourceOffset : integer; Destin : TStream; CountBytes : integer) : integer');


end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TDesalinationWriteStreamSaltVolume_W(Self: TDesalinationWriteStream; const T: integer);
begin Self.SaltVolume := T; end;

(*----------------------------------------------------------------------------*)
procedure TDesalinationWriteStreamSaltVolume_R(Self: TDesalinationWriteStream; var T: integer);
begin T := Self.SaltVolume; end;

(*----------------------------------------------------------------------------*)
procedure TDesalinationWriteStreamFreshwaterStream_W(Self: TDesalinationWriteStream; const T: TStream);
begin Self.FreshwaterStream := T; end;

(*----------------------------------------------------------------------------*)
procedure TDesalinationWriteStreamFreshwaterStream_R(Self: TDesalinationWriteStream; var T: TStream);
begin T := Self.FreshwaterStream; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uTPLb_StreamUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CloneMemoryStream, 'CloneMemoryStream', cdRegister);
 S.RegisterDelphiFunction(@CopyMemoryStream, 'CopyMemoryStream', cdRegister);
 S.RegisterDelphiFunction(@BurnMemoryStream, 'BurnMemoryStream', cdRegister);
 S.RegisterDelphiFunction(@BurnMemory, 'BurnMemory', cdRegister);
 S.RegisterDelphiFunction(@BurnMemoryString, 'BurnMemoryString', cdRegister);
 S.RegisterDelphiFunction(@BurnMemoryInteger, 'BurnMemoryInteger', cdRegister);
 S.RegisterDelphiFunction(@BurnMemoryString2, 'BurnMemoryString2', cdRegister);
 S.RegisterDelphiFunction(@BurnMemoryInteger2, 'BurnMemoryInteger2', cdRegister);

 S.RegisterDelphiFunction(@BurnMemoryByteArray, 'BurnMemoryByteArray', cdRegister);
 S.RegisterDelphiFunction(@BurnMemoryByteArray2, 'BurnMemoryByteArray2', cdRegister);
 S.RegisterDelphiFunction(@BurnMemoryByteArray3, 'BurnMemoryByteArray3', cdRegister);


 S.RegisterDelphiFunction(@ZeroFillStream, 'ZeroFillStream', cdRegister);
 S.RegisterDelphiFunction(@RandomFillStream, 'RandomFillStream', cdRegister);
 S.RegisterDelphiFunction(@XOR_Streams2, 'XOR_Streams2', cdRegister);
 S.RegisterDelphiFunction(@XOR_Streams3, 'XOR_Streams3', cdRegister);
 S.RegisterDelphiFunction(@CompareMemoryStreams, 'CompareMemoryStreams', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_Base64, 'Stream_to_Base64', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_Base64, 'Stream_to_Base642', cdRegister);
  S.RegisterDelphiFunction(@Base64_to_stream, 'Base64_to_stream2', cdRegister);
 S.RegisterDelphiFunction(@Base64_to_stream, 'Base64_to_stream', cdRegister);

 S.RegisterDelphiFunction(@Stream_to_AnsiString, 'Stream_to_AnsiString', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_AnsiString, 'StreamtoAnsiString', cdRegister);

 S.RegisterDelphiFunction(@StreamToString, 'StreamtoString', cdRegister);
 S.RegisterDelphiFunction(@StreamToString2, 'StreamtoString2', cdRegister);
 S.RegisterDelphiFunction(@StreamToString3, 'StreamtoString3', cdRegister);
 S.RegisterDelphiFunction(@StreamToString4, 'StreamtoString4', cdRegister);

 S.RegisterDelphiFunction(@AnsiString_to_stream, 'AnsiString_to_stream', cdRegister);
 S.RegisterDelphiFunction(@CompareFiles, 'CompareFiles', cdRegister);
 S.RegisterDelphiFunction(@FileSize, 'FileSize', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_decimalbytes, 'Stream_to_decimalbytes', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_decimalbytes, 'StreamToDecimalbytes', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_decimalbytes, 'StreamToOrd', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_decimalbytes, 'StreamToByte', cdRegister);

 S.RegisterDelphiFunction(@DisplayStream, 'DisplayStream', cdRegister);

 S.RegisterDelphiFunction(@Base64_to_streamBytes, 'Base64_to_streamBytes', cdRegister);
 S.RegisterDelphiFunction(@Stream_to_Base64Bytes, 'Stream_to_Base64Bytes', cdRegister);
 S.RegisterDelphiFunction(@Stream_To_Hex, 'Stream_To_Hex', cdRegister);

 S.RegisterDelphiFunction(@ClearMemory, 'ClearMemory', cdRegister);
 S.RegisterDelphiFunction(@ReadMem, 'ReadMem', cdRegister);
 S.RegisterDelphiFunction(@WriteMem, 'WriteMem', cdRegister);

 {
 CL.AddDelphiFunction('procedure Base64_to_streamBytes( const Base64: TBytes; Destin: TStream);');
 CL.AddDelphiFunction('function Stream_to_Base64Bytes(ASource: TStream; const ATransform: TBytes): TBytes;');
 CL.AddDelphiFunction('function Stream_To_Hex(ASource: TStream): Ansistring;');   }

end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDesalinationWriteStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDesalinationWriteStream) do begin
   RegisterMethod(@TDesalinationWriteStream.Read, 'Read');
    RegisterMethod(@TDesalinationWriteStream.Seek, 'Seek');
     RegisterMethod(@TDesalinationWriteStream.Write, 'Write');
        RegisterPropertyHelper(@TDesalinationWriteStreamFreshwaterStream_R,@TDesalinationWriteStreamFreshwaterStream_W,'FreshwaterStream');
    RegisterPropertyHelper(@TDesalinationWriteStreamSaltVolume_R,@TDesalinationWriteStreamSaltVolume_W,'SaltVolume');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uTPLb_StreamUtils(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TDesalinationWriteStream(CL);
end;

 
 
{ TPSImport_uTPLb_StreamUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uTPLb_StreamUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uTPLb_StreamUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uTPLb_StreamUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uTPLb_StreamUtils(ri);
  RIRegister_uTPLb_StreamUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
