unit uPSI_JclMiscel;
{
This file has been generated by UnitParser v0.7, written by M. Knight
updatet on 3.9.9.8


}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JclMiscel = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_JclMiscel(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_JclMiscel_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Windows
  ,JclBase
  ,JclMiscel
   ,JclValidation
   ;

 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JclMiscel]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_JclMiscel(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('HKEY','LongWord');   //win reg layout

 //.AddConstantN('HKCR','LongWord').SetInt($80000000);
 {CL.AddConstantN('HKCU','HKEY').SetString('HKEY_CURRENT_USER');
 CL.AddConstantN('HKLM','HKEY').SetString('HKEY_LOCAL_MACHINE');
 CL.AddConstantN('HKUS','HKEY').SetString('HKEY_USERS');
 CL.AddConstantN('HKCC','HKEY').SetString('HKEY_CURRENT_CONFIG');
 CL.AddConstantN('HKPD','HKEY').SetString('HKEY_PERFORMANCE_DATA');}
 CL.AddDelphiFunction('Function SetDisplayResolution( const XRes, YRes : DWORD) : Longint');
 CL.AddDelphiFunction('Function CreateDOSProcessRedirected( const CommandLine, InputFile, OutputFile : string) : Boolean');
 CL.AddDelphiFunction('Function WinExec32( const Cmd : string; const CmdShow : Integer) : Boolean');
 CL.AddDelphiFunction('Function WinExec32AndWait( const Cmd : string; const CmdShow : Integer) : Cardinal');
 CL.AddDelphiFunction('Function ExitWindows( ExitCode : Cardinal) : Boolean');
 CL.AddDelphiFunction('Function LogOffOS : Boolean');
 CL.AddDelphiFunction('Function PowerOffOS : Boolean');
 CL.AddDelphiFunction('Function ShutDownOS : Boolean');
 CL.AddDelphiFunction('Function RebootOS : Boolean');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclCreateProcessError');
 CL.AddDelphiFunction('Procedure CreateProcAsUser( const UserDomain, UserName, PassWord, CommandLine : string)');
 CL.AddDelphiFunction('Procedure CreateProcAsUserEx( const UserDomain, UserName, Password, CommandLine : string; const Environment : PChar)');
  CL.AddDelphiFunction('Function IsValidISBN( const ISBN : AnsiString) : Boolean');

 end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_JclMiscel_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@SetDisplayResolution, 'SetDisplayResolution', cdRegister);
 S.RegisterDelphiFunction(@CreateDOSProcessRedirected, 'CreateDOSProcessRedirected', cdRegister);
 S.RegisterDelphiFunction(@WinExec32, 'WinExec32', cdRegister);
 S.RegisterDelphiFunction(@WinExec32AndWait, 'WinExec32AndWait', cdRegister);
 S.RegisterDelphiFunction(@ExitWindows, 'ExitWindows', cdRegister);
 S.RegisterDelphiFunction(@LogOffOS, 'LogOffOS', cdRegister);
 S.RegisterDelphiFunction(@PowerOffOS, 'PowerOffOS', cdRegister);
 S.RegisterDelphiFunction(@ShutDownOS, 'ShutDownOS', cdRegister);
 S.RegisterDelphiFunction(@RebootOS, 'RebootOS', cdRegister);
 // with CL.Add(EJclCreateProcessError) do
 S.RegisterDelphiFunction(@CreateProcAsUser, 'CreateProcAsUser', cdRegister);
 S.RegisterDelphiFunction(@CreateProcAsUserEx, 'CreateProcAsUserEx', cdRegister);
 S.RegisterDelphiFunction(@IsValidISBN, 'IsValidISBN', cdRegister);
end;

 
 
{ TPSImport_JclMiscel }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JclMiscel.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JclMiscel(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JclMiscel.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_JclMiscel(ri);
  with ri.Add(EJclCreateProcessError) do

  RIRegister_JclMiscel_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
