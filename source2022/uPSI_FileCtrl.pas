unit uPSI_FileCtrl;
{
This file has been generated by UnitParser v0.7, written by M. Knight
firs the function processpath and second 3 objects  - add free
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_FileCtrl = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TFilterComboBox(CL: TPSPascalCompiler);
procedure SIRegister_TDriveComboBox(CL: TPSPascalCompiler);
procedure SIRegister_TDirectoryListBox(CL: TPSPascalCompiler);
procedure SIRegister_TFileListBox(CL: TPSPascalCompiler);
procedure SIRegister_FileCtrl(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_FileCtrl_Routines(S: TPSExec);
procedure RIRegister_TFilterComboBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDriveComboBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDirectoryListBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFileListBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_FileCtrl(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Controls
  ,Graphics
  ,Forms
  ,Menus
  ,StdCtrls
  ,Buttons
  ,FileCtrl
  ;
 

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_FileCtrl]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TFilterComboBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomComboBox', 'TFilterComboBox') do
  with CL.AddClassN(CL.FindClass('TCustomComboBox'),'TFilterComboBox') do begin
    RegisterPublishedProperties;
    RegisterMethod('Constructor Create( AOwner : TComponent)');
       RegisterMethod('Procedure Free');
      RegisterProperty('Mask', 'string', iptr);
    RegisterProperty('FileList', 'TFileListBox', iptrw);
    RegisterProperty('Filter', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDriveComboBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomComboBox', 'TDriveComboBox') do
  with CL.AddClassN(CL.FindClass('TCustomComboBox'),'TDriveComboBox') do begin
    RegisterPublishedProperties;
    RegisterMethod('Constructor Create( AOwner : TComponent)');
       RegisterMethod('Procedure Free');
      RegisterProperty('Drive', 'Char', iptrw);
    RegisterProperty('DirList', 'TDirectoryListBox', iptrw);
    RegisterProperty('TextCase', 'TTextCase', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONENTER', 'TNotifyEvent', iptrw);
    RegisterProperty('ONEXIT', 'TNotifyEvent', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDirectoryListBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomListBox', 'TDirectoryListBox') do
  with CL.AddClassN(CL.FindClass('TCustomListBox'),'TDirectoryListBox') do begin
    RegisterPublishedProperties;
    RegisterMethod('Constructor Create( AOwner : TComponent)');
       RegisterMethod('Procedure Free');
        RegisterMethod('Function DisplayCase( const S : String) : String');
    RegisterMethod('Function FileCompareText( const A, B : String) : Integer');
    RegisterMethod('Function GetItemPath( Index : Integer) : string');
    RegisterMethod('Procedure OpenCurrent');
    RegisterMethod('Procedure Update');
    RegisterProperty('Drive', 'Char', iptrw);
    RegisterProperty('Directory', 'string', iptrw);
    RegisterProperty('PreserveCase', 'Boolean', iptr);
    RegisterProperty('CaseSensitive', 'Boolean', iptr);
    RegisterProperty('DirLabel', 'TLabel', iptrw);
    RegisterProperty('FileList', 'TFileListBox', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONENTER', 'TNotifyEvent', iptrw);
    RegisterProperty('ONEXIT', 'TNotifyEvent', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFileListBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomListBox', 'TFileListBox') do
  with CL.AddClassN(CL.FindClass('TCustomListBox'),'TFileListBox') do begin
    RegisterPublishedProperties;
    RegisterMethod('Constructor Create( AOwner : TComponent)');
       RegisterMethod('Procedure Free');
        RegisterMethod('Procedure Update');
    RegisterMethod('Procedure ApplyFilePath( const EditText : string)');
    RegisterProperty('Drive', 'char', iptrw);
    RegisterProperty('Directory', 'string', iptrw);
    RegisterProperty('FileName', 'string', iptrw);
    RegisterProperty('FileEdit', 'TEdit', iptrw);
    RegisterProperty('FileType', 'TFileType', iptrw);
    RegisterProperty('Mask', 'string', iptrw);
    RegisterProperty('ShowGlyphs', 'Boolean', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_FileCtrl(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TFileAttr', '( ftReadOnly, ftHidden, ftSystem, ftVolumeID, ftDirectory, ftArchive, ftNormal )');
  CL.AddTypeS('TFileType', 'set of TFileAttr');
  CL.AddTypeS('TDriveType', '( dtUnknown, dtNoDrive, dtFloppy, dtFixed, dtNetwork, dtCDROM, dtRAM )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TDirectoryListBox');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TFilterComboBox');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TDriveComboBox');
  SIRegister_TFileListBox(CL);
  SIRegister_TDirectoryListBox(CL);
  CL.AddTypeS('TTextCase', '( tcLowerCase, tcUpperCase )');
  SIRegister_TDriveComboBox(CL);
  SIRegister_TFilterComboBox(CL);
 CL.AddDelphiFunction('Procedure ProcessPath(const EditText : string; var Drive : Char; var DirPart : string; var FilePart : string)');
 CL.AddDelphiFunction('Function MinimizeName( const Filename : TFileName; Canvas : TCanvas; MaxLen : Integer) : TFileName');
 CL.AddConstantN('WNTYPE_DRIVE','LongInt').SetInt( 1);
  CL.AddTypeS('TSelectDirOpt', '( sdAllowCreate, sdPerformCreate, sdPrompt )');
  CL.AddTypeS('TSelectDirOpts', 'set of TSelectDirOpt');
  CL.AddTypeS('TSelectDirExtOpt', '(sdNewFolder, sdShowEdit, sdShowShares, sdNewUI, sdShowFiles, sdValidateDir )');
  CL.AddTypeS('TSelectDirExtOpts', 'set of TSelectDirExtOpt');
 CL.AddDelphiFunction('Function SelectDirectory( var Directory : string; Options : TSelectDirOpts; HelpCtx : Longint) : Boolean;');
 CL.AddDelphiFunction('Function SelectDirectory1( const Caption : string; const Root : WideString; var Directory : string; Options : TSelectDirExtOpts; Parent : TWinControl) : Boolean;');
 CL.AddDelphiFunction('Function DirectoryExists( const Name : string) : Boolean');
 CL.AddDelphiFunction('Function ForceDirectories( const Dir : string) : Boolean');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function SelectDirectory1_P( const Caption : string; const Root : WideString; var Directory : string; Options : TSelectDirExtOpts; Parent : TWinControl) : Boolean;
Begin Result := FileCtrl.SelectDirectory(Caption, Root, Directory, Options, Parent); END;

(*----------------------------------------------------------------------------*)
Function SelectDirectory_P( var Directory : string; Options : TSelectDirOpts; HelpCtx : Longint) : Boolean;
Begin Result := FileCtrl.SelectDirectory(Directory, Options, HelpCtx); END;

(*----------------------------------------------------------------------------*)
procedure TFilterComboBoxFilter_W(Self: TFilterComboBox; const T: string);
begin Self.Filter := T; end;

(*----------------------------------------------------------------------------*)
procedure TFilterComboBoxFilter_R(Self: TFilterComboBox; var T: string);
begin T := Self.Filter; end;

(*----------------------------------------------------------------------------*)
procedure TFilterComboBoxFileList_W(Self: TFilterComboBox; const T: TFileListBox);
begin Self.FileList := T; end;

(*----------------------------------------------------------------------------*)
procedure TFilterComboBoxFileList_R(Self: TFilterComboBox; var T: TFileListBox);
begin T := Self.FileList; end;

(*----------------------------------------------------------------------------*)
procedure TFilterComboBoxMask_R(Self: TFilterComboBox; var T: string);
begin T := Self.Mask; end;

(*----------------------------------------------------------------------------*)
procedure TDriveComboBoxTextCase_W(Self: TDriveComboBox; const T: TTextCase);
begin Self.TextCase := T; end;

(*----------------------------------------------------------------------------*)
procedure TDriveComboBoxTextCase_R(Self: TDriveComboBox; var T: TTextCase);
begin T := Self.TextCase; end;

(*----------------------------------------------------------------------------*)
procedure TDriveComboBoxDirList_W(Self: TDriveComboBox; const T: TDirectoryListBox);
begin Self.DirList := T; end;

(*----------------------------------------------------------------------------*)
procedure TDriveComboBoxDirList_R(Self: TDriveComboBox; var T: TDirectoryListBox);
begin T := Self.DirList; end;

(*----------------------------------------------------------------------------*)
procedure TDriveComboBoxDrive_W(Self: TDriveComboBox; const T: Char);
begin Self.Drive := T; end;

(*----------------------------------------------------------------------------*)
procedure TDriveComboBoxDrive_R(Self: TDriveComboBox; var T: Char);
begin T := Self.Drive; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxOnChange_W(Self: TDirectoryListBox; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxOnChange_R(Self: TDirectoryListBox; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxFileList_W(Self: TDirectoryListBox; const T: TFileListBox);
begin Self.FileList := T; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxFileList_R(Self: TDirectoryListBox; var T: TFileListBox);
begin T := Self.FileList; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxDirLabel_W(Self: TDirectoryListBox; const T: TLabel);
begin Self.DirLabel := T; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxDirLabel_R(Self: TDirectoryListBox; var T: TLabel);
begin T := Self.DirLabel; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxCaseSensitive_R(Self: TDirectoryListBox; var T: Boolean);
begin T := Self.CaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxPreserveCase_R(Self: TDirectoryListBox; var T: Boolean);
begin T := Self.PreserveCase; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxDirectory_W(Self: TDirectoryListBox; const T: string);
begin Self.Directory := T; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxDirectory_R(Self: TDirectoryListBox; var T: string);
begin T := Self.Directory; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxDrive_W(Self: TDirectoryListBox; const T: Char);
begin Self.Drive := T; end;

(*----------------------------------------------------------------------------*)
procedure TDirectoryListBoxDrive_R(Self: TDirectoryListBox; var T: Char);
begin T := Self.Drive; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxOnChange_W(Self: TFileListBox; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxOnChange_R(Self: TFileListBox; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxShowGlyphs_W(Self: TFileListBox; const T: Boolean);
begin Self.ShowGlyphs := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxShowGlyphs_R(Self: TFileListBox; var T: Boolean);
begin T := Self.ShowGlyphs; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxMask_W(Self: TFileListBox; const T: string);
begin Self.Mask := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxMask_R(Self: TFileListBox; var T: string);
begin T := Self.Mask; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxFileType_W(Self: TFileListBox; const T: TFileType);
begin Self.FileType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxFileType_R(Self: TFileListBox; var T: TFileType);
begin T := Self.FileType; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxFileEdit_W(Self: TFileListBox; const T: TEdit);
begin Self.FileEdit := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxFileEdit_R(Self: TFileListBox; var T: TEdit);
begin T := Self.FileEdit; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxFileName_W(Self: TFileListBox; const T: string);
begin Self.FileName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxFileName_R(Self: TFileListBox; var T: string);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxDirectory_W(Self: TFileListBox; const T: string);
begin Self.Directory := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxDirectory_R(Self: TFileListBox; var T: string);
begin T := Self.Directory; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxDrive_W(Self: TFileListBox; const T: char);
begin Self.Drive := T; end;

(*----------------------------------------------------------------------------*)
procedure TFileListBoxDrive_R(Self: TFileListBox; var T: char);
begin T := Self.Drive; end;


procedure TITEMONCLICK_W(Self: TDirectoryListBox; const T: TNOTIFYEVENT);
begin Self.ONCLICK := T; end;
procedure TITEMONCLICK_R(Self: TDirectoryListBox; var T: TNOTIFYEVENT);
begin T := Self.ONCLICK; end;

procedure TITEMONDBLCLICK_W(Self: TDirectoryListBox; const T: TNOTIFYEVENT);
begin Self.ONDBLCLICK := T; end;
procedure TITEMONDBLCLICK_R(Self: TDirectoryListBox; var T: TNOTIFYEVENT);
begin T := Self.ONDBLCLICK; end;
procedure TITEMONENTER_W(Self: TDirectoryListBox; const T: TNOTIFYEVENT);
begin Self.ONENTER:= T; end;
procedure TITEMONENTER_R(Self: TDirectoryListBox; var T: TNOTIFYEVENT);
begin T := Self.ONENTER; end;
procedure TITEMONEXIT_W(Self: TDirectoryListBox; const T: TNOTIFYEVENT);
begin Self.ONEXIT:= T; end;
procedure TITEMONEXIT_R(Self: TDirectoryListBox; var T: TNOTIFYEVENT);
begin T := Self.ONEXIT; end;

procedure TITEMONCLICK1_W(Self: TDriveComboBox; const T: TNOTIFYEVENT);
begin Self.ONCLICK := T; end;
procedure TITEMONCLICK1_R(Self: TDriveComboBox; var T: TNOTIFYEVENT);
begin T := Self.ONCLICK; end;

procedure TITEMONDBLCLICK1_W(Self: TDriveComboBox; const T: TNOTIFYEVENT);
begin Self.ONDBLCLICK := T; end;
procedure TITEMONDBLCLICK1_R(Self: TDriveComboBox; var T: TNOTIFYEVENT);
begin T := Self.ONDBLCLICK; end;
procedure TITEMONENTER1_W(Self: TDriveComboBox; const T: TNOTIFYEVENT);
begin Self.ONENTER:= T; end;
procedure TITEMONENTER1_R(Self: TDriveComboBox; var T: TNOTIFYEVENT);
begin T := Self.ONENTER; end;
procedure TITEMONEXIT1_W(Self: TDriveComboBox; const T: TNOTIFYEVENT);
begin Self.ONEXIT:= T; end;
procedure TITEMONEXIT1_R(Self: TDriveComboBox; var T: TNOTIFYEVENT);
begin T := Self.ONEXIT; end;

procedure TITEMONCLICK2_W(Self: TFileListBox; const T: TNOTIFYEVENT);
begin Self.ONCLICK := T; end;
procedure TITEMONCLICK2_R(Self: TFileListBox; var T: TNOTIFYEVENT);
begin T := Self.ONCLICK; end;

procedure TITEMONDBLCLICK2_W(Self: TFileListBox; const T: TNOTIFYEVENT);
begin Self.ONDBLCLICK := T; end;
procedure TITEMONDBLCLICK2_R(Self: TFileListBox; var T: TNOTIFYEVENT);
begin T := Self.ONDBLCLICK; end;
procedure TITEMONENTER2_W(Self: TFileListBox; const T: TNOTIFYEVENT);
begin Self.ONENTER:= T; end;
procedure TITEMONENTER2_R(Self: TFileListBox; var T: TNOTIFYEVENT);
begin T := Self.ONENTER; end;
procedure TITEMONEXIT2_W(Self: TFileListBox; const T: TNOTIFYEVENT);
begin Self.ONEXIT:= T; end;
procedure TITEMONEXIT2_R(Self: TFileListBox; var T: TNOTIFYEVENT);
begin T := Self.ONEXIT; end;




(*----------------------------------------------------------------------------*)
procedure RIRegister_FileCtrl_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ProcessPath, 'ProcessPath', cdRegister);
 S.RegisterDelphiFunction(@MinimizeName, 'MinimizeName', cdRegister);
 S.RegisterDelphiFunction(@SelectDirectory_P, 'SelectDirectory', cdRegister);
 S.RegisterDelphiFunction(@SelectDirectory1_P, 'SelectDirectory1', cdRegister);
 S.RegisterDelphiFunction(@DirectoryExists, 'DirectoryExists', cdRegister);
 S.RegisterDelphiFunction(@ForceDirectories, 'ForceDirectories', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFilterComboBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFilterComboBox) do begin
    RegisterConstructor(@TFilterComboBox.Create, 'Create');
   RegisterMethod(@TFilterComboBox.Destroy, 'Free');
    //RegisterMethod(@TCustomStatusBar.ExecuteAction, 'ExecuteAction');
     RegisterPropertyHelper(@TFilterComboBoxMask_R,nil,'Mask');
    RegisterPropertyHelper(@TFilterComboBoxFileList_R,@TFilterComboBoxFileList_W,'FileList');
    RegisterPropertyHelper(@TFilterComboBoxFilter_R,@TFilterComboBoxFilter_W,'Filter');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDriveComboBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDriveComboBox) do begin
    RegisterConstructor(@TDriveComboBox.Create, 'Create');
   RegisterMethod(@TDriveComboBox.Destroy, 'Free');
     RegisterPropertyHelper(@TDriveComboBoxDrive_R,@TDriveComboBoxDrive_W,'Drive');
    RegisterPropertyHelper(@TDriveComboBoxDirList_R,@TDriveComboBoxDirList_W,'DirList');
    RegisterPropertyHelper(@TDriveComboBoxTextCase_R,@TDriveComboBoxTextCase_W,'TextCase');
		RegisterEventPropertyHelper(@TITEMONCLICK1_R,@TITEMONCLICK1_W,'ONCLICK');
 		RegisterEventPropertyHelper(@TITEMONDBLCLICK1_R,@TITEMONDBLCLICK1_W,'ONDBLCLICK');
 		RegisterEventPropertyHelper(@TITEMONENTER1_R,@TITEMONENTER1_W,'ONENTER');
 		RegisterEventPropertyHelper(@TITEMONEXIT1_R,@TITEMONEXIT1_W,'ONEXIT');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDirectoryListBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDirectoryListBox) do
  begin
    RegisterConstructor(@TDirectoryListBox.Create, 'Create');
   RegisterMethod(@TDirectoryListBox.Destroy, 'Free');
     RegisterMethod(@TDirectoryListBox.DisplayCase, 'DisplayCase');
    RegisterMethod(@TDirectoryListBox.FileCompareText, 'FileCompareText');
    RegisterMethod(@TDirectoryListBox.GetItemPath, 'GetItemPath');
    RegisterMethod(@TDirectoryListBox.OpenCurrent, 'OpenCurrent');
    RegisterMethod(@TDirectoryListBox.Update, 'Update');
    RegisterPropertyHelper(@TDirectoryListBoxDrive_R,@TDirectoryListBoxDrive_W,'Drive');
    RegisterPropertyHelper(@TDirectoryListBoxDirectory_R,@TDirectoryListBoxDirectory_W,'Directory');
    RegisterPropertyHelper(@TDirectoryListBoxPreserveCase_R,nil,'PreserveCase');
    RegisterPropertyHelper(@TDirectoryListBoxCaseSensitive_R,nil,'CaseSensitive');
    RegisterPropertyHelper(@TDirectoryListBoxDirLabel_R,@TDirectoryListBoxDirLabel_W,'DirLabel');
    RegisterPropertyHelper(@TDirectoryListBoxFileList_R,@TDirectoryListBoxFileList_W,'FileList');
    RegisterPropertyHelper(@TDirectoryListBoxOnChange_R,@TDirectoryListBoxOnChange_W,'OnChange');
		RegisterEventPropertyHelper(@TITEMONCLICK_R,@TITEMONCLICK_W,'ONCLICK');
 		RegisterEventPropertyHelper(@TITEMONDBLCLICK_R,@TITEMONDBLCLICK_W,'ONDBLCLICK');
 		RegisterEventPropertyHelper(@TITEMONENTER_R,@TITEMONENTER_W,'ONENTER');
 		RegisterEventPropertyHelper(@TITEMONEXIT_R,@TITEMONEXIT_W,'ONEXIT');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFileListBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFileListBox) do begin
    RegisterConstructor(@TFileListBox.Create, 'Create');
    RegisterMethod(@TFileListBox.Destroy, 'Free');
   RegisterMethod(@TFileListBox.Update, 'Update');
    RegisterMethod(@TFileListBox.ApplyFilePath, 'ApplyFilePath');
    RegisterPropertyHelper(@TFileListBoxDrive_R,@TFileListBoxDrive_W,'Drive');
    RegisterPropertyHelper(@TFileListBoxDirectory_R,@TFileListBoxDirectory_W,'Directory');
    RegisterPropertyHelper(@TFileListBoxFileName_R,@TFileListBoxFileName_W,'FileName');
    RegisterPropertyHelper(@TFileListBoxFileEdit_R,@TFileListBoxFileEdit_W,'FileEdit');
    RegisterPropertyHelper(@TFileListBoxFileType_R,@TFileListBoxFileType_W,'FileType');
    RegisterPropertyHelper(@TFileListBoxMask_R,@TFileListBoxMask_W,'Mask');
    RegisterPropertyHelper(@TFileListBoxShowGlyphs_R,@TFileListBoxShowGlyphs_W,'ShowGlyphs');
    RegisterPropertyHelper(@TFileListBoxOnChange_R,@TFileListBoxOnChange_W,'OnChange');
		RegisterEventPropertyHelper(@TITEMONCLICK2_R,@TITEMONCLICK2_W,'ONCLICK');
 		RegisterEventPropertyHelper(@TITEMONDBLCLICK2_R,@TITEMONDBLCLICK2_W,'ONDBLCLICK');
 		RegisterEventPropertyHelper(@TITEMONENTER2_R,@TITEMONENTER2_W,'ONENTER');
 		RegisterEventPropertyHelper(@TITEMONEXIT2_R,@TITEMONEXIT2_W,'ONEXIT');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_FileCtrl(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDirectoryListBox) do
  with CL.Add(TFilterComboBox) do
  with CL.Add(TDriveComboBox) do
  RIRegister_TFileListBox(CL);
  RIRegister_TDirectoryListBox(CL);
  RIRegister_TDriveComboBox(CL);
  RIRegister_TFilterComboBox(CL);
end;

 
 
{ TPSImport_FileCtrl }
(*----------------------------------------------------------------------------*)
procedure TPSImport_FileCtrl.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_FileCtrl(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_FileCtrl.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_FileCtrl(ri);
  RIRegister_FileCtrl_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
