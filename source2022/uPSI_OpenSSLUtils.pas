unit uPSI_OpenSSLUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_OpenSSLUtils = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMessageSigner(CL: TPSPascalCompiler);
procedure SIRegister_TPKCS7(CL: TPSPascalCompiler);
procedure SIRegister_TX509Certificate(CL: TPSPascalCompiler);
procedure SIRegister_TKeyPairGenerator(CL: TPSPascalCompiler);
procedure SIRegister_EOpenSSL(CL: TPSPascalCompiler);
procedure SIRegister_OpenSSLUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_OpenSSLUtils_Routines(S: TPSExec);
procedure RIRegister_TMessageSigner(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPKCS7(CL: TPSRuntimeClassImporter);
procedure RIRegister_TX509Certificate(CL: TPSRuntimeClassImporter);
procedure RIRegister_TKeyPairGenerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_EOpenSSL(CL: TPSRuntimeClassImporter);
procedure RIRegister_OpenSSLUtils(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   libeay32
  ,OpenSSLUtils
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_OpenSSLUtils]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMessageSigner(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TMessageSigner') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TMessageSigner') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure MIMESign');
    RegisterMethod('Procedure LoadPrivateKey( KeyFilename : TFileName);');
    RegisterMethod('Procedure LoadPrivateKey1( KeyFilename : TFileName; KeyPassword : ansistring);');
    RegisterMethod('Procedure LoadCertificate( CertificateFilename : TFileName)');
    RegisterProperty('Password', 'ansistring', iptw);
    RegisterProperty('PrivateKeyFile', 'TFileName', iptrw);
    RegisterProperty('CertificateFile', 'TFileName', iptrw);
    RegisterProperty('PlainMessage', 'ansistring', iptrw);
    RegisterProperty('SignedMessage', 'ansistring', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPKCS7(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TPKCS7') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TPKCS7') do
  begin
    RegisterMethod('Constructor Create');
    RegisterProperty('Encoding', 'TEncoding', iptrw);
    RegisterProperty('CountCertificate', 'integer', iptr);
    RegisterProperty('Certificate', 'TX509Certificate Integer', iptr);
    RegisterMethod('Procedure Open( FileName : string)');
    RegisterMethod('Procedure Save( Filename : String);');
    RegisterMethod('Procedure Save1( Filename : String; Encoding : TEncoding);');
    RegisterMethod('Procedure SaveContent( Filename : String)');
    RegisterMethod('Function VerifyData : boolean;');
    RegisterMethod('Function VerifyData1( Content : pointer) : boolean;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TX509Certificate(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TX509Certificate') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TX509Certificate') do
  begin
    RegisterMethod('Constructor Create');
    RegisterProperty('Issuer', 'String', iptr);
    RegisterProperty('Subject', 'String', iptr);
    RegisterProperty('NotBefore', 'TDateTime', iptr);
    RegisterProperty('NotAfter', 'TDateTime', iptr);
    RegisterMethod('Function IsTrusted( CACertificate : array of TX509Certificate) : boolean;');
    RegisterMethod('Function IsTrusted1( CACertificate : TX509Certificate) : boolean;');
    RegisterMethod('Function IsExpired : boolean');
    RegisterMethod('Function Text : String');
    RegisterMethod('Procedure LoadFromFile( FileName : string);');
    RegisterMethod('Procedure LoadFromFile1( FileName : string; Encoding : TEncoding);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TKeyPairGenerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TKeyPairGenerator') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TKeyPairGenerator') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure KeyFileNames( KeyPairNames : string);');
    RegisterMethod('Procedure KeyFileNames1( PrivateKeyName, PublicKeyName : TFileName);');
    RegisterMethod('Procedure GenerateRSA');
    RegisterProperty('KeyLength', 'word', iptrw);
    RegisterProperty('Password', 'string', iptw);
    RegisterProperty('SeedFile', 'TFileName', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EOpenSSL(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'EOpenSSL') do
  with CL.AddClassN(CL.FindClass('Exception'),'EOpenSSL') do
  begin
    RegisterProperty('OpenSSLError', 'integer', iptrw);
    RegisterProperty('OpenSSLErrorMessage', 'string', iptrw);
    RegisterMethod('Constructor Create( Msg : string)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_OpenSSLUtils(CL: TPSPascalCompiler);
begin
  SIRegister_EOpenSSL(CL);
  CL.AddTypeS('TEncoding', '( auto, PEM, DER, SMIME, NETSCAPE, PKCS12 )');
  SIRegister_TKeyPairGenerator(CL);
  SIRegister_TX509Certificate(CL);
  CL.AddTypeS('TX509CertificateArray', 'array of TX509Certificate');
  SIRegister_TPKCS7(CL);
  SIRegister_TMessageSigner(CL);
 CL.AddDelphiFunction('Procedure AppStartup');
 CL.AddDelphiFunction('Function GetErrorMessage : string');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TMessageSignerSignedMessage_R(Self: TMessageSigner; var T: ansistring);
begin T := Self.SignedMessage; end;

(*----------------------------------------------------------------------------*)
procedure TMessageSignerPlainMessage_W(Self: TMessageSigner; const T: ansistring);
begin Self.PlainMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TMessageSignerPlainMessage_R(Self: TMessageSigner; var T: ansistring);
begin T := Self.PlainMessage; end;

(*----------------------------------------------------------------------------*)
procedure TMessageSignerCertificateFile_W(Self: TMessageSigner; const T: TFileName);
begin Self.CertificateFile := T; end;

(*----------------------------------------------------------------------------*)
procedure TMessageSignerCertificateFile_R(Self: TMessageSigner; var T: TFileName);
begin T := Self.CertificateFile; end;

(*----------------------------------------------------------------------------*)
procedure TMessageSignerPrivateKeyFile_W(Self: TMessageSigner; const T: TFileName);
begin Self.PrivateKeyFile := T; end;

(*----------------------------------------------------------------------------*)
procedure TMessageSignerPrivateKeyFile_R(Self: TMessageSigner; var T: TFileName);
begin T := Self.PrivateKeyFile; end;

(*----------------------------------------------------------------------------*)
procedure TMessageSignerPassword_W(Self: TMessageSigner; const T: ansistring);
begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
Procedure TMessageSignerLoadPrivateKey1_P(Self: TMessageSigner;  KeyFilename : TFileName; KeyPassword : ansistring);
Begin Self.LoadPrivateKey(KeyFilename, KeyPassword); END;

(*----------------------------------------------------------------------------*)
Procedure TMessageSignerLoadPrivateKey_P(Self: TMessageSigner;  KeyFilename : TFileName);
Begin Self.LoadPrivateKey(KeyFilename); END;

(*----------------------------------------------------------------------------*)
Function TPKCS7VerifyData1_P(Self: TPKCS7;  Content : pointer) : boolean;
Begin Result := Self.VerifyData(Content); END;

(*----------------------------------------------------------------------------*)
Function TPKCS7VerifyData_P(Self: TPKCS7) : boolean;
Begin Result := Self.VerifyData; END;

(*----------------------------------------------------------------------------*)
Procedure TPKCS7Save1_P(Self: TPKCS7;  Filename : String; Encoding : TEncoding);
Begin Self.Save(Filename, Encoding); END;

(*----------------------------------------------------------------------------*)
Procedure TPKCS7Save_P(Self: TPKCS7;  Filename : String);
Begin Self.Save(Filename); END;

(*----------------------------------------------------------------------------*)
procedure TPKCS7Certificate_R(Self: TPKCS7; var T: TX509Certificate; const t1: Integer);
begin T := Self.Certificate[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TPKCS7CountCertificate_R(Self: TPKCS7; var T: integer);
begin T := Self.CountCertificate; end;

(*----------------------------------------------------------------------------*)
procedure TPKCS7Encoding_W(Self: TPKCS7; const T: TEncoding);
begin Self.Encoding := T; end;

(*----------------------------------------------------------------------------*)
procedure TPKCS7Encoding_R(Self: TPKCS7; var T: TEncoding);
begin T := Self.Encoding; end;

(*----------------------------------------------------------------------------*)
Procedure TX509CertificateLoadFromFile1_P(Self: TX509Certificate;  FileName : string; Encoding : TEncoding);
Begin Self.LoadFromFile(FileName, Encoding); END;

(*----------------------------------------------------------------------------*)
Procedure TX509CertificateLoadFromFile_P(Self: TX509Certificate;  FileName : string);
Begin Self.LoadFromFile(FileName); END;

(*----------------------------------------------------------------------------*)
Function TX509CertificateIsTrusted1_P(Self: TX509Certificate;  CACertificate : TX509Certificate) : boolean;
Begin Result := Self.IsTrusted(CACertificate); END;

(*----------------------------------------------------------------------------*)
Function TX509CertificateIsTrusted_P(Self: TX509Certificate;  CACertificate : array of TX509Certificate) : boolean;
Begin Result := Self.IsTrusted(CACertificate); END;

(*----------------------------------------------------------------------------*)
procedure TX509CertificateNotAfter_R(Self: TX509Certificate; var T: TDateTime);
begin T := Self.NotAfter; end;

(*----------------------------------------------------------------------------*)
procedure TX509CertificateNotBefore_R(Self: TX509Certificate; var T: TDateTime);
begin T := Self.NotBefore; end;

(*----------------------------------------------------------------------------*)
procedure TX509CertificateSubject_R(Self: TX509Certificate; var T: String);
begin T := Self.Subject; end;

(*----------------------------------------------------------------------------*)
procedure TX509CertificateIssuer_R(Self: TX509Certificate; var T: String);
begin T := Self.Issuer; end;

(*----------------------------------------------------------------------------*)
Function TX509CertificateCreate_P(Self: TClass; CreateNewInstance: Boolean;  pCert : pX509):TObject;
Begin Result := TX509Certificate.Create(pCert); END;

(*----------------------------------------------------------------------------*)
procedure TKeyPairGeneratorSeedFile_W(Self: TKeyPairGenerator; const T: TFileName);
begin Self.SeedFile := T; end;

(*----------------------------------------------------------------------------*)
procedure TKeyPairGeneratorSeedFile_R(Self: TKeyPairGenerator; var T: TFileName);
begin T := Self.SeedFile; end;

(*----------------------------------------------------------------------------*)
procedure TKeyPairGeneratorPassword_W(Self: TKeyPairGenerator; const T: string);
begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
procedure TKeyPairGeneratorKeyLength_W(Self: TKeyPairGenerator; const T: word);
begin Self.KeyLength := T; end;

(*----------------------------------------------------------------------------*)
procedure TKeyPairGeneratorKeyLength_R(Self: TKeyPairGenerator; var T: word);
begin T := Self.KeyLength; end;

(*----------------------------------------------------------------------------*)
Procedure TKeyPairGeneratorKeyFileNames1_P(Self: TKeyPairGenerator;  PrivateKeyName, PublicKeyName : TFileName);
Begin Self.KeyFileNames(PrivateKeyName, PublicKeyName); END;

(*----------------------------------------------------------------------------*)
Procedure TKeyPairGeneratorKeyFileNames_P(Self: TKeyPairGenerator;  KeyPairNames : string);
Begin Self.KeyFileNames(KeyPairNames); END;

(*----------------------------------------------------------------------------*)
procedure EOpenSSLOpenSSLErrorMessage_W(Self: EOpenSSL; const T: string);
Begin Self.OpenSSLErrorMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure EOpenSSLOpenSSLErrorMessage_R(Self: EOpenSSL; var T: string);
Begin T := Self.OpenSSLErrorMessage; end;

(*----------------------------------------------------------------------------*)
procedure EOpenSSLOpenSSLError_W(Self: EOpenSSL; const T: integer);
Begin Self.OpenSSLError := T; end;

(*----------------------------------------------------------------------------*)
procedure EOpenSSLOpenSSLError_R(Self: EOpenSSL; var T: integer);
Begin T := Self.OpenSSLError; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_OpenSSLUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@AppStartup, 'AppStartup', cdRegister);
 S.RegisterDelphiFunction(@GetErrorMessage, 'GetErrorMessage', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMessageSigner(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMessageSigner) do
  begin
    RegisterConstructor(@TMessageSigner.Create, 'Create');
    RegisterMethod(@TMessageSigner.MIMESign, 'MIMESign');
    RegisterMethod(@TMessageSignerLoadPrivateKey_P, 'LoadPrivateKey');
    RegisterMethod(@TMessageSignerLoadPrivateKey1_P, 'LoadPrivateKey1');
    RegisterMethod(@TMessageSigner.LoadCertificate, 'LoadCertificate');
    RegisterPropertyHelper(nil,@TMessageSignerPassword_W,'Password');
    RegisterPropertyHelper(@TMessageSignerPrivateKeyFile_R,@TMessageSignerPrivateKeyFile_W,'PrivateKeyFile');
    RegisterPropertyHelper(@TMessageSignerCertificateFile_R,@TMessageSignerCertificateFile_W,'CertificateFile');
    RegisterPropertyHelper(@TMessageSignerPlainMessage_R,@TMessageSignerPlainMessage_W,'PlainMessage');
    RegisterPropertyHelper(@TMessageSignerSignedMessage_R,nil,'SignedMessage');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPKCS7(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPKCS7) do
  begin
    RegisterConstructor(@TPKCS7.Create, 'Create');
    RegisterPropertyHelper(@TPKCS7Encoding_R,@TPKCS7Encoding_W,'Encoding');
    RegisterPropertyHelper(@TPKCS7CountCertificate_R,nil,'CountCertificate');
    RegisterPropertyHelper(@TPKCS7Certificate_R,nil,'Certificate');
    RegisterMethod(@TPKCS7.Open, 'Open');
    RegisterMethod(@TPKCS7Save_P, 'Save');
    RegisterMethod(@TPKCS7Save1_P, 'Save1');
    RegisterMethod(@TPKCS7.SaveContent, 'SaveContent');
    RegisterMethod(@TPKCS7VerifyData_P, 'VerifyData');
    RegisterMethod(@TPKCS7VerifyData1_P, 'VerifyData1');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TX509Certificate(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TX509Certificate) do
  begin
    RegisterConstructor(@TX509Certificate.Create, 'Create');
    RegisterPropertyHelper(@TX509CertificateIssuer_R,nil,'Issuer');
    RegisterPropertyHelper(@TX509CertificateSubject_R,nil,'Subject');
    RegisterPropertyHelper(@TX509CertificateNotBefore_R,nil,'NotBefore');
    RegisterPropertyHelper(@TX509CertificateNotAfter_R,nil,'NotAfter');
    RegisterMethod(@TX509CertificateIsTrusted_P, 'IsTrusted');
    RegisterMethod(@TX509CertificateIsTrusted1_P, 'IsTrusted1');
    RegisterMethod(@TX509Certificate.IsExpired, 'IsExpired');
    RegisterMethod(@TX509Certificate.Text, 'Text');
    RegisterMethod(@TX509CertificateLoadFromFile_P, 'LoadFromFile');
    RegisterMethod(@TX509CertificateLoadFromFile1_P, 'LoadFromFile1');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TKeyPairGenerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TKeyPairGenerator) do
  begin
    RegisterConstructor(@TKeyPairGenerator.Create, 'Create');
    RegisterMethod(@TKeyPairGeneratorKeyFileNames_P, 'KeyFileNames');
    RegisterMethod(@TKeyPairGeneratorKeyFileNames1_P, 'KeyFileNames1');
    RegisterMethod(@TKeyPairGenerator.GenerateRSA, 'GenerateRSA');
    RegisterPropertyHelper(@TKeyPairGeneratorKeyLength_R,@TKeyPairGeneratorKeyLength_W,'KeyLength');
    RegisterPropertyHelper(nil,@TKeyPairGeneratorPassword_W,'Password');
    RegisterPropertyHelper(@TKeyPairGeneratorSeedFile_R,@TKeyPairGeneratorSeedFile_W,'SeedFile');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EOpenSSL(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EOpenSSL) do
  begin
    RegisterPropertyHelper(@EOpenSSLOpenSSLError_R,@EOpenSSLOpenSSLError_W,'OpenSSLError');
    RegisterPropertyHelper(@EOpenSSLOpenSSLErrorMessage_R,@EOpenSSLOpenSSLErrorMessage_W,'OpenSSLErrorMessage');
    RegisterConstructor(@EOpenSSL.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_OpenSSLUtils(CL: TPSRuntimeClassImporter);
begin
  RIRegister_EOpenSSL(CL);
  RIRegister_TKeyPairGenerator(CL);
  RIRegister_TX509Certificate(CL);
  RIRegister_TPKCS7(CL);
  RIRegister_TMessageSigner(CL);
end;

 
 
{ TPSImport_OpenSSLUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_OpenSSLUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_OpenSSLUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_OpenSSLUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_OpenSSLUtils(ri);
  RIRegister_OpenSSLUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
