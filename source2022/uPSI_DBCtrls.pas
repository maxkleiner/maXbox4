unit uPSI_DBCtrls;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by max.  works just with a DB Source , setbounds and more
     navdatalink with free
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_DBCtrls = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TDBRichEdit(CL: TPSPascalCompiler);
procedure SIRegister_TDBLookupComboBox(CL: TPSPascalCompiler);
procedure SIRegister_TPopupDataList(CL: TPSPascalCompiler);
procedure SIRegister_TDBLookupListBox(CL: TPSPascalCompiler);
procedure SIRegister_TDBLookupControl(CL: TPSPascalCompiler);
procedure SIRegister_TListSourceLink(CL: TPSPascalCompiler);
procedure SIRegister_TDataSourceLink(CL: TPSPascalCompiler);
procedure SIRegister_TNavDataLink(CL: TPSPascalCompiler);
procedure SIRegister_TNavButton(CL: TPSPascalCompiler);
procedure SIRegister_TDBNavigator(CL: TPSPascalCompiler);
procedure SIRegister_TDBImage(CL: TPSPascalCompiler);
procedure SIRegister_TDBMemo(CL: TPSPascalCompiler);
procedure SIRegister_TDBRadioGroup(CL: TPSPascalCompiler);
procedure SIRegister_TDBListBox(CL: TPSPascalCompiler);
procedure SIRegister_TDBComboBox(CL: TPSPascalCompiler);
procedure SIRegister_TDBCheckBox(CL: TPSPascalCompiler);
procedure SIRegister_TDBText(CL: TPSPascalCompiler);
procedure SIRegister_TDBEdit(CL: TPSPascalCompiler);
procedure SIRegister_TPaintControl(CL: TPSPascalCompiler);
procedure SIRegister_TFieldDataLink(CL: TPSPascalCompiler);
procedure SIRegister_DBCtrls(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_DBCtrls_Routines(S: TPSExec);
procedure RIRegister_TDBRichEdit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBLookupComboBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPopupDataList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBLookupListBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBLookupControl(CL: TPSRuntimeClassImporter);
procedure RIRegister_TListSourceLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDataSourceLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNavDataLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNavButton(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBNavigator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBImage(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBMemo(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBRadioGroup(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBListBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBComboBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBCheckBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBText(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBEdit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPaintControl(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFieldDataLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_DBCtrls(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Variants
  ,Windows
  ,Messages
  ,Controls
  ,Forms
  ,Graphics
  ,Menus
  ,StdCtrls
  ,ExtCtrls
  ,Mask
  ,Buttons
  ,ComCtrls
  ,DB
  ,DBCtrls
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_DBCtrls]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBRichEdit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomRichEdit', 'TDBRichEdit') do
  with CL.AddClassN(CL.FindClass('TCustomRichEdit'),'TDBRichEdit') do begin
    //RegisterPublishedProperties;
    //RegisterMethod('Constructor Create( AOwner : TComponent)');
         RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
          RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');

    //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    RegisterMethod('Procedure LoadMemo');
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('AutoDisplay', 'Boolean', iptrw);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBLookupComboBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDBLookupControl', 'TDBLookupComboBox') do
  with CL.AddClassN(CL.FindClass('TDBLookupControl'),'TDBLookupComboBox') do begin
    RegisterMethod('Procedure CloseUp( Accept : Boolean)');
    RegisterMethod('Procedure DropDown');
              RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
       RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
    //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    RegisterProperty('ListVisible', 'Boolean', iptr);
    RegisterProperty('Text', 'string', iptr);
    RegisterProperty('DropDownAlign', 'TDropDownAlign', iptrw);
    RegisterProperty('DropDownRows', 'Integer', iptrw);
    RegisterProperty('DropDownWidth', 'Integer', iptrw);
    RegisterProperty('OnCloseUp', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDropDown', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPopupDataList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDBLookupListBox', 'TPopupDataList') do
  with CL.AddClassN(CL.FindClass('TDBLookupListBox'),'TPopupDataList') do begin
      RegisterMethod('Constructor Create(AOwner : TComponent)');
    end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBLookupListBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDBLookupControl', 'TDBLookupListBox') do
  with CL.AddClassN(CL.FindClass('TDBLookupControl'),'TDBLookupListBox') do begin
          RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
        RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
     //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    //RegisterPublishedProperties;
    //RegisterMethod('Constructor Create( AOwner : TComponent)');

    RegisterProperty('SelectedItem', 'string', iptr);
    RegisterProperty('BorderStyle', 'TBorderStyle', iptrw);
    RegisterProperty('RowCount', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBLookupControl(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomControl', 'TDBLookupControl') do
  with CL.AddClassN(CL.FindClass('TCustomControl'),'TDBLookupControl') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
     RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
    RegisterMethod('function UseRightToLeftAlignment: Boolean');
         RegisterMethod('Procedure Free');
     RegisterProperty('Field', 'TField', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TListSourceLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDataLink', 'TListSourceLink') do
  with CL.AddClassN(CL.FindClass('TDataLink'),'TListSourceLink') do begin
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDataSourceLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDataLink', 'TDataSourceLink') do
  with CL.AddClassN(CL.FindClass('TDataLink'),'TDataSourceLink') do begin
  RegisterPublishedProperties;
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNavDataLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDataLink', 'TNavDataLink') do
  with CL.AddClassN(CL.FindClass('TDataLink'),'TNavDataLink') do begin
  RegisterPublishedProperties;
    RegisterMethod('Constructor Create( ANav : TDBNavigator)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNavButton(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSpeedButton', 'TNavButton') do
  with CL.AddClassN(CL.FindClass('TSpeedButton'),'TNavButton') do begin
          RegisterMethod('Procedure Free');
       RegisterProperty('NavStyle', 'TNavButtonStyle', iptrw);
    RegisterProperty('Index', 'TNavigateBtn', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBNavigator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomPanel', 'TDBNavigator') do
  with CL.AddClassN(CL.FindClass('TCustomPanel'),'TDBNavigator') do begin
    RegisterPublishedProperties;
    RegisterMethod('Constructor Create(AOwner : TComponent)');
          RegisterMethod('Procedure Free');
      RegisterMethod('Procedure BtnClick( Index : TNavigateBtn)');
    RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('VisibleButtons', 'TNavButtonSet', iptrw);
    RegisterProperty('Flat', 'Boolean', iptrw);
    RegisterProperty('Hints', 'TStrings', iptrw);
    RegisterProperty('ConfirmDelete', 'Boolean', iptrw);
    //RegisterProperty('BeforeAction', 'ENavClick', iptrw);
    RegisterProperty('OnClick', 'ENavClick', iptrw);
         RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
     RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
    RegisterProperty('BORDERSTYLE', 'TBorderStyle', iptrw);
    RegisterProperty('ShowButtons', 'Boolean', iptrw);
    RegisterProperty('BorderStyle', 'TBorderStyle', iptrw);
    RegisterProperty('BORDERWIDTH', 'Integer', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('HIDESELECTION', 'Boolean', iptrw);
    RegisterProperty('MAXLENGTH', 'Integer', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('READONLY', 'Boolean', iptrw);
    RegisterProperty('SCROLLBARS', 'TScrollStyle', iptrw);
    RegisterProperty('ONCHANGE', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONENTER', 'TNotifyEvent', iptrw);
    RegisterProperty('ONEXIT', 'TNotifyEvent', iptrw);
    RegisterProperty('ONKEYDOWN', 'TKeyEvent', iptrw);
    RegisterProperty('ONKEYPRESS', 'TKeyPressEvent', iptrw);
    RegisterProperty('ONKEYUP', 'TKeyEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBImage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomControl', 'TDBImage') do
  with CL.AddClassN(CL.FindClass('TCustomControl'),'TDBImage') do begin
    //RegisterPublishedProperties;
          RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
       RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
      //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    //RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure CopyToClipboard');
    RegisterMethod('Procedure CutToClipboard');
    RegisterMethod('Procedure LoadPicture');
    RegisterMethod('Procedure PasteFromClipboard');
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('Picture', 'TPicture', iptrw);
    RegisterProperty('AutoDisplay', 'Boolean', iptrw);
    RegisterProperty('BorderStyle', 'TBorderStyle', iptrw);
    RegisterProperty('Center', 'Boolean', iptrw);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('QuickDraw', 'Boolean', iptrw);
    RegisterProperty('Stretch', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBMemo(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMemo', 'TDBMemo') do
  with CL.AddClassN(CL.FindClass('TCustomMemo'),'TDBMemo') do begin
    //RegisterPublishedProperties;
           RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
     RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
      //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    //RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure LoadMemo');
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('AutoDisplay', 'Boolean', iptrw);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBRadioGroup(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomRadioGroup', 'TDBRadioGroup') do
  with CL.AddClassN(CL.FindClass('TCustomRadioGroup'),'TDBRadioGroup') do begin
        RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
     RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
      //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

  RegisterPublishedProperties;
    //RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('Value', 'string', iptrw);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('Values', 'TStrings', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBListBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomListBox', 'TDBListBox') do
  with CL.AddClassN(CL.FindClass('TCustomListBox'),'TDBListBox') do begin
  //RegisterPublishedProperties;
        RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
      RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
      //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    //RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBComboBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomComboBox', 'TDBComboBox') do
  with CL.AddClassN(CL.FindClass('TCustomComboBox'),'TDBComboBox') do begin
  //RegisterPublishedProperties;
          RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
     RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
      //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    //RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBCheckBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomCheckBox', 'TDBCheckBox') do
  with CL.AddClassN(CL.FindClass('TCustomCheckBox'),'TDBCheckBox') do begin
    RegisterPublishedProperties;
           RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
     RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
     //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
   RegisterPublishedProperties;
       RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
         RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

    //RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('ValueChecked', 'string', iptrw);
    RegisterProperty('ValueUnchecked', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBText(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomLabel', 'TDBText') do
  with CL.AddClassN(CL.FindClass('TCustomLabel'),'TDBText') do begin
         RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
     RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
     RegisterPublishedProperties;
    //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
      RegisterMethod('Procedure Free');
     RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
      RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBEdit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMaskEdit', 'TDBEdit') do
  with CL.AddClassN(CL.FindClass('TCustomMaskEdit'),'TDBEdit') do begin
         RegisterMethod('function ExecuteAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UpdateAction(Action: TBasicAction): Boolean');
         RegisterMethod('function UseRightToLeftAlignment: Boolean');
      RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
    RegisterPublishedProperties;
    //RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Constructor Create(AOwner : TComponent)');
          RegisterMethod('Procedure Free');
      RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('DataField', 'WideString', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
        RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptr);
    RegisterProperty('ClientRect', 'TRect', iptr);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptr);
    RegisterProperty('BoundsRect', 'TRect', iptr);
    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPaintControl(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TPaintControl') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TPaintControl') do begin
    RegisterMethod('Constructor Create( AOwner : TWinControl; const ClassName : string)');
     RegisterMethod('Procedure Free');
      RegisterMethod('Procedure DestroyHandle');
    RegisterProperty('Ctl3DButton', 'Boolean', iptrw);
    RegisterProperty('Handle', 'HWnd', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFieldDataLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDataLink', 'TFieldDataLink') do
  with CL.AddClassN(CL.FindClass('TDataLink'),'TFieldDataLink') do begin
  RegisterPublishedProperties;
    RegisterMethod('Constructor Create');
    RegisterMethod('Function Edit : Boolean');
    RegisterMethod('Procedure Modified');
    RegisterMethod('Procedure Reset');
    RegisterProperty('CanModify', 'Boolean', iptr);
    RegisterProperty('Control', 'TComponent', iptrw);
    RegisterProperty('Editing', 'Boolean', iptr);
    RegisterProperty('Field', 'TField', iptr);
    RegisterProperty('FieldName', 'WideString', iptrw);
    RegisterProperty('OnDataChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnEditingChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnUpdateData', 'TNotifyEvent', iptrw);
    RegisterProperty('OnActiveChange', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_DBCtrls(CL: TPSPascalCompiler);
begin
  SIRegister_TFieldDataLink(CL);
  SIRegister_TPaintControl(CL);
  SIRegister_TDBEdit(CL);
  SIRegister_TDBText(CL);
  SIRegister_TDBCheckBox(CL);
  SIRegister_TDBComboBox(CL);
  SIRegister_TDBListBox(CL);
  SIRegister_TDBRadioGroup(CL);
  SIRegister_TDBMemo(CL);
  SIRegister_TDBImage(CL);
 CL.AddConstantN('InitRepeatPause','LongInt').SetInt( 400);
 CL.AddConstantN('RepeatPause','LongInt').SetInt( 100);
 CL.AddConstantN('SpaceSize','LongInt').SetInt( 5);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNavButton');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNavDataLink');
  CL.AddTypeS('TNavGlyph', '( ngEnabled, ngDisabled )');
  CL.AddTypeS('TNavigateBtn', '( nbFirst, nbPrior, nbNext, nbLast, nbInsert, nbDelete, nbEdit, nbPost, nbCancel, nbRefresh )');
  CL.AddTypeS('TNavButtonSet', 'set of TNavigateBtn');
  CL.AddTypeS('TNavButtonStyles', '( nsAllowTimer, nsFocusRect )');
  CL.AddTypeS('TNavButtonStyle', 'set of TNavButtonStyles)');
  CL.AddTypeS('ENavClick', 'procedure (Sender: TObject; Button: TNavigateBtn) of object;');

  //CL.AddTypeS('ENavClick', 'Procedure (Sender : TObject; Button : TNavigateBtn');
  SIRegister_TDBNavigator(CL);
  SIRegister_TNavButton(CL);
  SIRegister_TNavDataLink(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TDBLookupControl');
  SIRegister_TDataSourceLink(CL);
  SIRegister_TListSourceLink(CL);
  SIRegister_TDBLookupControl(CL);
  SIRegister_TDBLookupListBox(CL);
  SIRegister_TPopupDataList(CL);
  CL.AddTypeS('TDropDownAlign', '( daLeft, daRight, daCenter )');
  SIRegister_TDBLookupComboBox(CL);
  SIRegister_TDBRichEdit(CL);
 CL.AddDelphiFunction('Function OkToChangeFieldAlignment( AField : TField; Alignment : TAlignment) : Boolean');
 CL.AddDelphiFunction('Function DBUseRightToLeftAlignment( AControl : TControl; AField : TField) : Boolean');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TDBRichEditReadOnly_W(Self: TDBRichEdit; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditReadOnly_R(Self: TDBRichEdit; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditDataSource_W(Self: TDBRichEdit; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditDataSource_R(Self: TDBRichEdit; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditDataField_W(Self: TDBRichEdit; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditDataField_R(Self: TDBRichEdit; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditAutoDisplay_W(Self: TDBRichEdit; const T: Boolean);
begin Self.AutoDisplay := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditAutoDisplay_R(Self: TDBRichEdit; var T: Boolean);
begin T := Self.AutoDisplay; end;

(*----------------------------------------------------------------------------*)
procedure TDBRichEditField_R(Self: TDBRichEdit; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxOnDropDown_W(Self: TDBLookupComboBox; const T: TNotifyEvent);
begin Self.OnDropDown := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxOnDropDown_R(Self: TDBLookupComboBox; var T: TNotifyEvent);
begin T := Self.OnDropDown; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxOnCloseUp_W(Self: TDBLookupComboBox; const T: TNotifyEvent);
begin Self.OnCloseUp := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxOnCloseUp_R(Self: TDBLookupComboBox; var T: TNotifyEvent);
begin T := Self.OnCloseUp; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxDropDownWidth_W(Self: TDBLookupComboBox; const T: Integer);
begin Self.DropDownWidth := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxDropDownWidth_R(Self: TDBLookupComboBox; var T: Integer);
begin T := Self.DropDownWidth; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxDropDownRows_W(Self: TDBLookupComboBox; const T: Integer);
begin Self.DropDownRows := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxDropDownRows_R(Self: TDBLookupComboBox; var T: Integer);
begin T := Self.DropDownRows; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxDropDownAlign_W(Self: TDBLookupComboBox; const T: TDropDownAlign);
begin Self.DropDownAlign := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxDropDownAlign_R(Self: TDBLookupComboBox; var T: TDropDownAlign);
begin T := Self.DropDownAlign; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxText_R(Self: TDBLookupComboBox; var T: string);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupComboBoxListVisible_R(Self: TDBLookupComboBox; var T: Boolean);
begin T := Self.ListVisible; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupListBoxRowCount_W(Self: TDBLookupListBox; const T: Integer);
begin Self.RowCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupListBoxRowCount_R(Self: TDBLookupListBox; var T: Integer);
begin T := Self.RowCount; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupListBoxBorderStyle_W(Self: TDBLookupListBox; const T: TBorderStyle);
begin Self.BorderStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupListBoxBorderStyle_R(Self: TDBLookupListBox; var T: TBorderStyle);
begin T := Self.BorderStyle; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupListBoxSelectedItem_R(Self: TDBLookupListBox; var T: string);
begin T := Self.SelectedItem; end;

(*----------------------------------------------------------------------------*)
procedure TDBLookupControlField_R(Self: TDBLookupControl; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TNavButtonIndex_W(Self: TNavButton; const T: TNavigateBtn);
begin Self.Index := T; end;

(*----------------------------------------------------------------------------*)
procedure TNavButtonIndex_R(Self: TNavButton; var T: TNavigateBtn);
begin T := Self.Index; end;

(*----------------------------------------------------------------------------*)
procedure TNavButtonNavStyle_W(Self: TNavButton; const T: TNavButtonStyle);
begin Self.NavStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TNavButtonNavStyle_R(Self: TNavButton; var T: TNavButtonStyle);
begin T := Self.NavStyle; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorOnClick_W(Self: TDBNavigator; const T: ENavClick);
begin Self.OnClick := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorOnClick_R(Self: TDBNavigator; var T: ENavClick);
begin T := Self.OnClick; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorBeforeAction_W(Self: TDBNavigator; const T: ENavClick);
begin Self.BeforeAction := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorBeforeAction_R(Self: TDBNavigator; var T: ENavClick);
begin T := Self.BeforeAction; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorConfirmDelete_W(Self: TDBNavigator; const T: Boolean);
begin Self.ConfirmDelete := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorConfirmDelete_R(Self: TDBNavigator; var T: Boolean);
begin T := Self.ConfirmDelete; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorHints_W(Self: TDBNavigator; const T: TStrings);
begin Self.Hints := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorHints_R(Self: TDBNavigator; var T: TStrings);
begin T := Self.Hints; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorFlat_W(Self: TDBNavigator; const T: Boolean);
begin Self.Flat := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorFlat_R(Self: TDBNavigator; var T: Boolean);
begin T := Self.Flat; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorVisibleButtons_W(Self: TDBNavigator; const T: TNavButtonSet);
begin Self.VisibleButtons := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorVisibleButtons_R(Self: TDBNavigator; var T: TNavButtonSet);
begin T := Self.VisibleButtons; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorDataSource_W(Self: TDBNavigator; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBNavigatorDataSource_R(Self: TDBNavigator; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageStretch_W(Self: TDBImage; const T: Boolean);
begin Self.Stretch := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageStretch_R(Self: TDBImage; var T: Boolean);
begin T := Self.Stretch; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageQuickDraw_W(Self: TDBImage; const T: Boolean);
begin Self.QuickDraw := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageQuickDraw_R(Self: TDBImage; var T: Boolean);
begin T := Self.QuickDraw; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageReadOnly_W(Self: TDBImage; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageReadOnly_R(Self: TDBImage; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageDataSource_W(Self: TDBImage; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageDataSource_R(Self: TDBImage; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageDataField_W(Self: TDBImage; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageDataField_R(Self: TDBImage; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageCenter_W(Self: TDBImage; const T: Boolean);
begin Self.Center := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageCenter_R(Self: TDBImage; var T: Boolean);
begin T := Self.Center; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageBorderStyle_W(Self: TDBImage; const T: TBorderStyle);
begin Self.BorderStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageBorderStyle_R(Self: TDBImage; var T: TBorderStyle);
begin T := Self.BorderStyle; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageAutoDisplay_W(Self: TDBImage; const T: Boolean);
begin Self.AutoDisplay := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageAutoDisplay_R(Self: TDBImage; var T: Boolean);
begin T := Self.AutoDisplay; end;

(*----------------------------------------------------------------------------*)
procedure TDBImagePicture_W(Self: TDBImage; const T: TPicture);
begin Self.Picture := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBImagePicture_R(Self: TDBImage; var T: TPicture);
begin T := Self.Picture; end;

(*----------------------------------------------------------------------------*)
procedure TDBImageField_R(Self: TDBImage; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoReadOnly_W(Self: TDBMemo; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoReadOnly_R(Self: TDBMemo; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoDataSource_W(Self: TDBMemo; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoDataSource_R(Self: TDBMemo; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoDataField_W(Self: TDBMemo; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoDataField_R(Self: TDBMemo; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoAutoDisplay_W(Self: TDBMemo; const T: Boolean);
begin Self.AutoDisplay := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoAutoDisplay_R(Self: TDBMemo; var T: Boolean);
begin T := Self.AutoDisplay; end;

(*----------------------------------------------------------------------------*)
procedure TDBMemoField_R(Self: TDBMemo; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupOnChange_W(Self: TDBRadioGroup; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupOnChange_R(Self: TDBRadioGroup; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupValues_W(Self: TDBRadioGroup; const T: TStrings);
begin Self.Values := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupValues_R(Self: TDBRadioGroup; var T: TStrings);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupReadOnly_W(Self: TDBRadioGroup; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupReadOnly_R(Self: TDBRadioGroup; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupDataSource_W(Self: TDBRadioGroup; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupDataSource_R(Self: TDBRadioGroup; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupDataField_W(Self: TDBRadioGroup; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupDataField_R(Self: TDBRadioGroup; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupValue_W(Self: TDBRadioGroup; const T: string);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupValue_R(Self: TDBRadioGroup; var T: string);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TDBRadioGroupField_R(Self: TDBRadioGroup; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBListBoxReadOnly_W(Self: TDBListBox; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBListBoxReadOnly_R(Self: TDBListBox; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBListBoxDataSource_W(Self: TDBListBox; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBListBoxDataSource_R(Self: TDBListBox; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBListBoxDataField_W(Self: TDBListBox; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBListBoxDataField_R(Self: TDBListBox; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBListBoxField_R(Self: TDBListBox; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBComboBoxReadOnly_W(Self: TDBComboBox; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBComboBoxReadOnly_R(Self: TDBComboBox; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBComboBoxDataSource_W(Self: TDBComboBox; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBComboBoxDataSource_R(Self: TDBComboBox; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBComboBoxDataField_W(Self: TDBComboBox; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBComboBoxDataField_R(Self: TDBComboBox; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBComboBoxField_R(Self: TDBComboBox; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxValueUnchecked_W(Self: TDBCheckBox; const T: string);
begin Self.ValueUnchecked := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxValueUnchecked_R(Self: TDBCheckBox; var T: string);
begin T := Self.ValueUnchecked; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxValueChecked_W(Self: TDBCheckBox; const T: string);
begin Self.ValueChecked := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxValueChecked_R(Self: TDBCheckBox; var T: string);
begin T := Self.ValueChecked; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxReadOnly_W(Self: TDBCheckBox; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxReadOnly_R(Self: TDBCheckBox; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxDataSource_W(Self: TDBCheckBox; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxDataSource_R(Self: TDBCheckBox; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxDataField_W(Self: TDBCheckBox; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxDataField_R(Self: TDBCheckBox; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBCheckBoxField_R(Self: TDBCheckBox; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBTextDataSource_W(Self: TDBText; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBTextDataSource_R(Self: TDBText; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBTextDataField_W(Self: TDBText; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBTextDataField_R(Self: TDBText; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBTextField_R(Self: TDBText; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TDBEditReadOnly_W(Self: TDBEdit; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBEditReadOnly_R(Self: TDBEdit; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TDBEditDataSource_W(Self: TDBEdit; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBEditDataSource_R(Self: TDBEdit; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TDBEditDataField_W(Self: TDBEdit; const T: WideString);
begin Self.DataField := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBEditDataField_R(Self: TDBEdit; var T: WideString);
begin T := Self.DataField; end;

(*----------------------------------------------------------------------------*)
procedure TDBEditField_R(Self: TDBEdit; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TPaintControlHandle_R(Self: TPaintControl; var T: HWnd);
begin T := Self.Handle; end;

(*----------------------------------------------------------------------------*)
procedure TPaintControlCtl3DButton_W(Self: TPaintControl; const T: Boolean);
begin Self.Ctl3DButton := T; end;

(*----------------------------------------------------------------------------*)
procedure TPaintControlCtl3DButton_R(Self: TPaintControl; var T: Boolean);
begin T := Self.Ctl3DButton; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnActiveChange_W(Self: TFieldDataLink; const T: TNotifyEvent);
begin Self.OnActiveChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnActiveChange_R(Self: TFieldDataLink; var T: TNotifyEvent);
begin T := Self.OnActiveChange; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnUpdateData_W(Self: TFieldDataLink; const T: TNotifyEvent);
begin Self.OnUpdateData := T; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnUpdateData_R(Self: TFieldDataLink; var T: TNotifyEvent);
begin T := Self.OnUpdateData; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnEditingChange_W(Self: TFieldDataLink; const T: TNotifyEvent);
begin Self.OnEditingChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnEditingChange_R(Self: TFieldDataLink; var T: TNotifyEvent);
begin T := Self.OnEditingChange; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnDataChange_W(Self: TFieldDataLink; const T: TNotifyEvent);
begin Self.OnDataChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkOnDataChange_R(Self: TFieldDataLink; var T: TNotifyEvent);
begin T := Self.OnDataChange; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkFieldName_W(Self: TFieldDataLink; const T: WideString);
begin Self.FieldName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkFieldName_R(Self: TFieldDataLink; var T: WideString);
begin T := Self.FieldName; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkField_R(Self: TFieldDataLink; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkEditing_R(Self: TFieldDataLink; var T: Boolean);
begin T := Self.Editing; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkControl_W(Self: TFieldDataLink; const T: TComponent);
begin Self.Control := T; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkControl_R(Self: TFieldDataLink; var T: TComponent);
begin T := Self.Control; end;

(*----------------------------------------------------------------------------*)
procedure TFieldDataLinkCanModify_R(Self: TFieldDataLink; var T: Boolean);
begin T := Self.CanModify; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DBCtrls_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@OkToChangeFieldAlignment, 'OkToChangeFieldAlignment', cdRegister);
 S.RegisterDelphiFunction(@DBUseRightToLeftAlignment, 'DBUseRightToLeftAlignment', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBRichEdit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBRichEdit) do begin
    RegisterConstructor(@TDBRichEdit.Create, 'Create');
    RegisterVirtualMethod(@TDBRichEdit.LoadMemo, 'LoadMemo');
    RegisterPropertyHelper(@TDBRichEditField_R,nil,'Field');
       RegisterMethod(@TDBRichEdit.ExecuteAction, 'ExecuteAction');
       RegisterMethod(@TDBRichEdit.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBRichEdit.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBRichEdit.SetBounds, 'SetBounds');
    RegisterMethod(@TDBRichEdit.Destroy, 'Free');
     RegisterPropertyHelper(@TDBRichEditAutoDisplay_R,@TDBRichEditAutoDisplay_W,'AutoDisplay');
    RegisterPropertyHelper(@TDBRichEditDataField_R,@TDBRichEditDataField_W,'DataField');
    RegisterPropertyHelper(@TDBRichEditDataSource_R,@TDBRichEditDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBRichEditReadOnly_R,@TDBRichEditReadOnly_W,'ReadOnly');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBLookupComboBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBLookupComboBox) do begin
     RegisterMethod(@TDBLookupComboBox.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBLookupComboBox.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBLookupComboBox.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBLookupComboBox.SetBounds, 'SetBounds');
    RegisterMethod(@TDBLookupComboBox.Create, 'Create');

    RegisterVirtualMethod(@TDBLookupComboBox.CloseUp, 'CloseUp');
    RegisterVirtualMethod(@TDBLookupComboBox.DropDown, 'DropDown');
    RegisterPropertyHelper(@TDBLookupComboBoxListVisible_R,nil,'ListVisible');
    RegisterPropertyHelper(@TDBLookupComboBoxText_R,nil,'Text');
    RegisterPropertyHelper(@TDBLookupComboBoxDropDownAlign_R,@TDBLookupComboBoxDropDownAlign_W,'DropDownAlign');
    RegisterPropertyHelper(@TDBLookupComboBoxDropDownRows_R,@TDBLookupComboBoxDropDownRows_W,'DropDownRows');
    RegisterPropertyHelper(@TDBLookupComboBoxDropDownWidth_R,@TDBLookupComboBoxDropDownWidth_W,'DropDownWidth');
    RegisterPropertyHelper(@TDBLookupComboBoxOnCloseUp_R,@TDBLookupComboBoxOnCloseUp_W,'OnCloseUp');
    RegisterPropertyHelper(@TDBLookupComboBoxOnDropDown_R,@TDBLookupComboBoxOnDropDown_W,'OnDropDown');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPopupDataList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPopupDataList) do begin
   RegisterConstructor(@TPopupDataList.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBLookupListBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBLookupListBox) do begin
    RegisterConstructor(@TDBLookupListBox.Create, 'Create');
   // RegisterVirtualMethod(@TDBLookupListBox.LoadMemo, 'LoadMemo');
    //RegisterPropertyHelper(@TDBLookupListBox,nil,'Field');
       RegisterMethod(@TDBLookupListBox.ExecuteAction, 'ExecuteAction');
       RegisterMethod(@TDBLookupListBox.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBLookupListBox.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBLookupListBox.SetBounds, 'SetBounds');
    RegisterMethod(@TDBLookupListBox.Destroy, 'Free');

      RegisterPropertyHelper(@TDBLookupListBoxSelectedItem_R,nil,'SelectedItem');
    RegisterPropertyHelper(@TDBLookupListBoxBorderStyle_R,@TDBLookupListBoxBorderStyle_W,'BorderStyle');
    RegisterPropertyHelper(@TDBLookupListBoxRowCount_R,@TDBLookupListBoxRowCount_W,'RowCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBLookupControl(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBLookupControl) do begin
    RegisterConstructor(@TDBLookupControl.Create, 'Create');
       RegisterMethod(@TDBLookupControl.ExecuteAction, 'ExecuteAction');
       RegisterMethod(@TDBLookupControl.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBLookupControl.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBLookupControl.SetBounds, 'SetBounds');
    RegisterMethod(@TDBLookupControl.Destroy, 'Free');
     RegisterPropertyHelper(@TDBLookupControlField_R,nil,'Field');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TListSourceLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TListSourceLink) do begin
    RegisterConstructor(@TListSourceLink.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDataSourceLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDataSourceLink) do begin
    RegisterConstructor(@TDataSourceLink.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNavDataLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNavDataLink) do begin
    RegisterConstructor(@TNavDataLink.Create, 'Create');
    RegisterMethod(@TNavDataLink.Destroy, 'Free');
   end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNavButton(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNavButton) do begin
    RegisterMethod(@TNavButton.Destroy, 'Free');
     RegisterPropertyHelper(@TNavButtonNavStyle_R,@TNavButtonNavStyle_W,'NavStyle');
    RegisterPropertyHelper(@TNavButtonIndex_R,@TNavButtonIndex_W,'Index');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBNavigator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBNavigator) do begin
    RegisterConstructor(@TDBNavigator.Create, 'Create');
    RegisterVirtualMethod(@TDBNavigator.BtnClick, 'BtnClick');
    RegisterMethod(@TDBNavigator.SetBounds, 'SetBounds');
    RegisterMethod(@TDBNavigator.Destroy, 'Free');
    //SetBounds  3.7
    RegisterPropertyHelper(@TDBNavigatorDataSource_R,@TDBNavigatorDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBNavigatorVisibleButtons_R,@TDBNavigatorVisibleButtons_W,'VisibleButtons');
    RegisterPropertyHelper(@TDBNavigatorFlat_R,@TDBNavigatorFlat_W,'Flat');
    RegisterPropertyHelper(@TDBNavigatorHints_R,@TDBNavigatorHints_W,'Hints');
    RegisterPropertyHelper(@TDBNavigatorConfirmDelete_R,@TDBNavigatorConfirmDelete_W,'ConfirmDelete');
    RegisterPropertyHelper(@TDBNavigatorBeforeAction_R,@TDBNavigatorBeforeAction_W,'BeforeAction');
    RegisterPropertyHelper(@TDBNavigatorOnClick_R,@TDBNavigatorOnClick_W,'OnClick');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBImage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBImage) do begin
    RegisterConstructor(@TDBImage.Create, 'Create');
     RegisterMethod(@TDBImage.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBImage.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBImage.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBImage.SetBounds, 'SetBounds');
    RegisterMethod(@TDBImage.Destroy, 'Free');

    RegisterMethod(@TDBImage.CopyToClipboard, 'CopyToClipboard');
    RegisterMethod(@TDBImage.CutToClipboard, 'CutToClipboard');
    RegisterMethod(@TDBImage.LoadPicture, 'LoadPicture');
    RegisterMethod(@TDBImage.PasteFromClipboard, 'PasteFromClipboard');
    RegisterPropertyHelper(@TDBImageField_R,nil,'Field');
    RegisterPropertyHelper(@TDBImagePicture_R,@TDBImagePicture_W,'Picture');
    RegisterPropertyHelper(@TDBImageAutoDisplay_R,@TDBImageAutoDisplay_W,'AutoDisplay');
    RegisterPropertyHelper(@TDBImageBorderStyle_R,@TDBImageBorderStyle_W,'BorderStyle');
    RegisterPropertyHelper(@TDBImageCenter_R,@TDBImageCenter_W,'Center');
    RegisterPropertyHelper(@TDBImageDataField_R,@TDBImageDataField_W,'DataField');
    RegisterPropertyHelper(@TDBImageDataSource_R,@TDBImageDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBImageReadOnly_R,@TDBImageReadOnly_W,'ReadOnly');
    RegisterPropertyHelper(@TDBImageQuickDraw_R,@TDBImageQuickDraw_W,'QuickDraw');
    RegisterPropertyHelper(@TDBImageStretch_R,@TDBImageStretch_W,'Stretch');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBMemo(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBMemo) do begin
    RegisterConstructor(@TDBMemo.Create, 'Create');
     RegisterMethod(@TDBMemo.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBMemo.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBMemo.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBMemo.SetBounds, 'SetBounds');
    RegisterMethod(@TDBMemo.Destroy, 'Free');

    RegisterVirtualMethod(@TDBMemo.LoadMemo, 'LoadMemo');
    RegisterPropertyHelper(@TDBMemoField_R,nil,'Field');
    RegisterPropertyHelper(@TDBMemoAutoDisplay_R,@TDBMemoAutoDisplay_W,'AutoDisplay');
    RegisterPropertyHelper(@TDBMemoDataField_R,@TDBMemoDataField_W,'DataField');
    RegisterPropertyHelper(@TDBMemoDataSource_R,@TDBMemoDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBMemoReadOnly_R,@TDBMemoReadOnly_W,'ReadOnly');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBRadioGroup(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBRadioGroup) do begin
    RegisterConstructor(@TDBRadioGroup.Create, 'Create');
     RegisterMethod(@TDBRadioGroup.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBRadioGroup.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBRadioGroup.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBRadioGroup.SetBounds, 'SetBounds');
    RegisterMethod(@TDBRadioGroup.Destroy, 'Free');

    RegisterPropertyHelper(@TDBRadioGroupField_R,nil,'Field');
    RegisterPropertyHelper(@TDBRadioGroupValue_R,@TDBRadioGroupValue_W,'Value');
    RegisterPropertyHelper(@TDBRadioGroupDataField_R,@TDBRadioGroupDataField_W,'DataField');
    RegisterPropertyHelper(@TDBRadioGroupDataSource_R,@TDBRadioGroupDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBRadioGroupReadOnly_R,@TDBRadioGroupReadOnly_W,'ReadOnly');
    RegisterPropertyHelper(@TDBRadioGroupValues_R,@TDBRadioGroupValues_W,'Values');
    RegisterPropertyHelper(@TDBRadioGroupOnChange_R,@TDBRadioGroupOnChange_W,'OnChange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBListBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBListBox) do begin
    RegisterConstructor(@TDBListBox.Create, 'Create');
     RegisterMethod(@TDBListBox.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBListBox.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBListBox.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBListBox.SetBounds, 'SetBounds');
    RegisterMethod(@TDBListBox.Destroy, 'Free');

    RegisterPropertyHelper(@TDBListBoxField_R,nil,'Field');
    RegisterPropertyHelper(@TDBListBoxDataField_R,@TDBListBoxDataField_W,'DataField');
    RegisterPropertyHelper(@TDBListBoxDataSource_R,@TDBListBoxDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBListBoxReadOnly_R,@TDBListBoxReadOnly_W,'ReadOnly');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBComboBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBComboBox) do begin
    RegisterConstructor(@TDBComboBox.Create, 'Create');
     RegisterMethod(@TDBComboBox.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBComboBox.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBComboBox.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBComboBox.SetBounds, 'SetBounds');
    RegisterMethod(@TDBComboBox.Destroy, 'Free');

    RegisterPropertyHelper(@TDBComboBoxField_R,nil,'Field');
    RegisterPropertyHelper(@TDBComboBoxDataField_R,@TDBComboBoxDataField_W,'DataField');
    RegisterPropertyHelper(@TDBComboBoxDataSource_R,@TDBComboBoxDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBComboBoxReadOnly_R,@TDBComboBoxReadOnly_W,'ReadOnly');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBCheckBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBCheckBox) do begin
    RegisterConstructor(@TDBCheckBox.Create, 'Create');
     RegisterMethod(@TDBCheckBox.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBCheckBox.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBCheckBox.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBCheckBox.SetBounds, 'SetBounds');
    RegisterMethod(@TDBCheckBox.Destroy, 'Free');

    RegisterPropertyHelper(@TDBCheckBoxField_R,nil,'Field');
    RegisterPropertyHelper(@TDBCheckBoxDataField_R,@TDBCheckBoxDataField_W,'DataField');
    RegisterPropertyHelper(@TDBCheckBoxDataSource_R,@TDBCheckBoxDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBCheckBoxReadOnly_R,@TDBCheckBoxReadOnly_W,'ReadOnly');
    RegisterPropertyHelper(@TDBCheckBoxValueChecked_R,@TDBCheckBoxValueChecked_W,'ValueChecked');
    RegisterPropertyHelper(@TDBCheckBoxValueUnchecked_R,@TDBCheckBoxValueUnchecked_W,'ValueUnchecked');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBText(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBText) do begin
    RegisterConstructor(@TDBText.Create, 'Create');
     RegisterMethod(@TDBText.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBText.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBText.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBText.SetBounds, 'SetBounds');
    RegisterMethod(@TDBText.Destroy, 'Free');

    RegisterPropertyHelper(@TDBTextField_R,nil,'Field');
    RegisterPropertyHelper(@TDBTextDataField_R,@TDBTextDataField_W,'DataField');
    RegisterPropertyHelper(@TDBTextDataSource_R,@TDBTextDataSource_W,'DataSource');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBEdit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBEdit) do begin
    RegisterConstructor(@TDBEdit.Create, 'Create');
    RegisterMethod(@TDBEdit.ExecuteAction, 'ExecuteAction');
     RegisterMethod(@TDBEdit.UpdateAction, 'UpdateAction');
   RegisterMethod(@TDBEdit.UseRightToLeftAlignment, 'UseRightToLeftAlignment');
   RegisterMethod(@TDBEdit.SetBounds, 'SetBounds');
    RegisterMethod(@TDBEdit .Destroy, 'Free');

    RegisterPropertyHelper(@TDBEditField_R,nil,'Field');
    RegisterPropertyHelper(@TDBEditDataField_R,@TDBEditDataField_W,'DataField');
    RegisterPropertyHelper(@TDBEditDataSource_R,@TDBEditDataSource_W,'DataSource');
    RegisterPropertyHelper(@TDBEditReadOnly_R,@TDBEditReadOnly_W,'ReadOnly');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPaintControl(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPaintControl) do begin
    RegisterConstructor(@TPaintControl.Create, 'Create');
    RegisterMethod(@TPaintControl.DestroyHandle, 'DestroyHandle');
    RegisterPropertyHelper(@TPaintControlCtl3DButton_R,@TPaintControlCtl3DButton_W,'Ctl3DButton');
    RegisterPropertyHelper(@TPaintControlHandle_R,nil,'Handle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFieldDataLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFieldDataLink) do begin
    RegisterConstructor(@TFieldDataLink.Create, 'Create');
    RegisterMethod(@TFieldDataLink.Edit, 'Edit');
    RegisterMethod(@TFieldDataLink.Modified, 'Modified');
    RegisterMethod(@TFieldDataLink.Reset, 'Reset');
    RegisterPropertyHelper(@TFieldDataLinkCanModify_R,nil,'CanModify');
    RegisterPropertyHelper(@TFieldDataLinkControl_R,@TFieldDataLinkControl_W,'Control');
    RegisterPropertyHelper(@TFieldDataLinkEditing_R,nil,'Editing');
    RegisterPropertyHelper(@TFieldDataLinkField_R,nil,'Field');
    RegisterPropertyHelper(@TFieldDataLinkFieldName_R,@TFieldDataLinkFieldName_W,'FieldName');
    RegisterPropertyHelper(@TFieldDataLinkOnDataChange_R,@TFieldDataLinkOnDataChange_W,'OnDataChange');
    RegisterPropertyHelper(@TFieldDataLinkOnEditingChange_R,@TFieldDataLinkOnEditingChange_W,'OnEditingChange');
    RegisterPropertyHelper(@TFieldDataLinkOnUpdateData_R,@TFieldDataLinkOnUpdateData_W,'OnUpdateData');
    RegisterPropertyHelper(@TFieldDataLinkOnActiveChange_R,@TFieldDataLinkOnActiveChange_W,'OnActiveChange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DBCtrls(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TFieldDataLink(CL);
  RIRegister_TPaintControl(CL);
  RIRegister_TDBEdit(CL);
  RIRegister_TDBText(CL);
  RIRegister_TDBCheckBox(CL);
  RIRegister_TDBComboBox(CL);
  RIRegister_TDBListBox(CL);
  RIRegister_TDBRadioGroup(CL);
  RIRegister_TDBMemo(CL);
  RIRegister_TDBImage(CL);
  with CL.Add(TNavButton) do
  with CL.Add(TNavDataLink) do
  RIRegister_TDBNavigator(CL);
  RIRegister_TNavButton(CL);
  RIRegister_TNavDataLink(CL);
  with CL.Add(TDBLookupControl) do
  RIRegister_TDataSourceLink(CL);
  RIRegister_TListSourceLink(CL);
  RIRegister_TDBLookupControl(CL);
  RIRegister_TDBLookupListBox(CL);
  RIRegister_TPopupDataList(CL);
  RIRegister_TDBLookupComboBox(CL);
  RIRegister_TDBRichEdit(CL);
end;

 
 
{ TPSImport_DBCtrls }
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBCtrls.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_DBCtrls(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBCtrls.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_DBCtrls(ri);
  RIRegister_DBCtrls_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
