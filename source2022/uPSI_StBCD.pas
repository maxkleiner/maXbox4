unit uPSI_StBCD;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_StBCD = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_StBCD(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_StBCD_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Windows
  ,StConst
  ,StBase
  ,StStrL
  ,StBCD
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_StBCD]);
end;

function AbsInt(const B : integer) : integer;
  begin
     result:= Abs(B);
  end;

function AbsFloat(const B : double) : extended;
  begin
     result:= Abs(B);
  end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_StBCD(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('BcdSize','LongInt').SetInt( 10);

 {const
  BcdSize = 10;                   {bytes in BCD, valid range 4-20}
  //{.Z+}
  //MantissaDigits = 2*(BcdSize-1); {digits in mantissa}
  //OverflowChar = '*';             {character used to fill an overflow string}
  //{.Z-}    }
//type TBcd = array[0..BcdSize-1] of Byte;
  CL.AddTypeS('TBCDS', 'array[0..BcdSize-1] of Byte');
  //CL.AddTypeS('TBCD', 'array[0..BcdSize-1] of Byte');

 CL.AddConstantN('OverflowChar','String').SetString( '*');
 CL.AddDelphiFunction('Function AddBcd( const B1, B2 : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function SubBcd( const B1, B2 : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function MulBcd( const B1, B2 : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function DivBcd( const B1, B2 : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function ModBcd( const B1, B2 : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function NegBcd( const B : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function AbsBcd( const B : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function AbsInt( const B : integer) : integer');
 CL.AddDelphiFunction('Function AbsFloat( const B : double) : extended');

 CL.AddDelphiFunction('Function FracBcd( const B : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function IntBcd( const B : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function RoundDigitsBcd( const B : TbcdS; Digits : Cardinal) : TbcdS');
 CL.AddDelphiFunction('Function RoundPlacesBcd( const B : TbcdS; Places : Cardinal) : TbcdS');
 CL.AddDelphiFunction('Function ValBcd( const S : string) : TbcdS');
 CL.AddDelphiFunction('Function LongBcd( L : LongInt) : TbcdS');
 CL.AddDelphiFunction('Function ExtBcd( E : Extended) : TbcdS');
 CL.AddDelphiFunction('Function ExpBcd( const B : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function LnBcd( const B : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function IntPowBcd( const B : TbcdS; E : LongInt) : TbcdS');
 CL.AddDelphiFunction('Function PowBcd( const B, E : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function SqrtBcd( const B : TbcdS) : TbcdS');
 CL.AddDelphiFunction('Function CmpBcd( const B1, B2 : TbcdS) : Integer');
 CL.AddDelphiFunction('Function EqDigitsBcd( const B1, B2 : TbcdS; Digits : Cardinal) : Boolean');
 CL.AddDelphiFunction('Function EqPlacesBcd( const B1, B2 : TbcdS; Digits : Cardinal) : Boolean');
 CL.AddDelphiFunction('Function IsIntBcd( const B : TbcdS) : Boolean');
 CL.AddDelphiFunction('Function TruncBcd( const B : TbcdS) : LongInt');
 CL.AddDelphiFunction('Function BcdExt( const B : TbcdS) : Extended');
 CL.AddDelphiFunction('Function RoundBcd( const B : TbcdS) : LongInt');
 CL.AddDelphiFunction('Function StrBcd( const B : TbcdS; Width, Places : Cardinal) : string');
 CL.AddDelphiFunction('Function StrExpBcd( const B : TbcdS; Width : Cardinal) : string');
 CL.AddDelphiFunction('Function FormatBcd( const Format : string; const B : TbcdS) : string');
 CL.AddDelphiFunction('Function StrGeneralBcd( const B : TbcdS) : string');
 //CL.AddDelphiFunction('Function FloatFormBcd( const Mask : string; B : TbcdS; const LtCurr, RtCurr : string; Sep, DecPt : AnsiChar) : string');
 CL.AddDelphiFunction('Procedure ConvertBcd( const SrcB, SrcSize : Byte; var DestB, DestSize : Byte)');
 {CL.AddDelphiFunction('Procedure AddBcd_C( const B1, B2 : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure SubBcd_C( const B1, B2 : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure MulBcd_C( const B1, B2 : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure DivBcd_C( const B1, B2 : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure ModBcd_C( const B1, B2 : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure NegBcd_C( const B : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure AbsBcd_C( const B : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure FracBcd_C( const B : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure IntBcd_C( const B : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure RoundDigitsBcd_C( const B : TBcd; Digits : Cardinal; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure RoundPlacesBcd_C( const B : TBcd; Places : Cardinal; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure ValBcd_C( const S : string; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure LongBcd_C( L : LongInt; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure ExtBcd_C( E : Extended; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure ExpBcd_C( const B : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure LnBcd_C( const B : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure IntPowBcd_C( const B : TBcd; E : LongInt; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure PowBcd_C( const B, E : TBcd; var Res : TBcd)');
 CL.AddDelphiFunction('Procedure SqrtBcd_C( const B : TBcd; var Res : TBcd)');}
 CL.AddDelphiFunction('Function LnBcd20( const B : TBcdS) : TBcdS');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_StBCD_Routines(S: TPSExec);
begin

 S.RegisterDelphiFunction(@AddBcd, 'AddBcd', cdRegister);
 S.RegisterDelphiFunction(@SubBcd, 'SubBcd', cdRegister);
 S.RegisterDelphiFunction(@MulBcd, 'MulBcd', cdRegister);
 S.RegisterDelphiFunction(@DivBcd, 'DivBcd', cdRegister);
 S.RegisterDelphiFunction(@ModBcd, 'ModBcd', cdRegister);
 S.RegisterDelphiFunction(@NegBcd, 'NegBcd', cdRegister);
 S.RegisterDelphiFunction(@AbsBcd, 'AbsBcd', cdRegister);
 S.RegisterDelphiFunction(@AbsInt, 'AbsInt', cdRegister);
 S.RegisterDelphiFunction(@AbsFloat, 'AbsFloat', cdRegister);

 S.RegisterDelphiFunction(@FracBcd, 'FracBcd', cdRegister);
 S.RegisterDelphiFunction(@IntBcd, 'IntBcd', cdRegister);
 S.RegisterDelphiFunction(@RoundDigitsBcd, 'RoundDigitsBcd', cdRegister);
 S.RegisterDelphiFunction(@RoundPlacesBcd, 'RoundPlacesBcd', cdRegister);
 S.RegisterDelphiFunction(@ValBcd, 'ValBcd', cdRegister);
 S.RegisterDelphiFunction(@LongBcd, 'LongBcd', cdRegister);
 S.RegisterDelphiFunction(@ExtBcd, 'ExtBcd', cdRegister);
 S.RegisterDelphiFunction(@ExpBcd, 'ExpBcd', cdRegister);
 S.RegisterDelphiFunction(@LnBcd, 'LnBcd', cdRegister);
 S.RegisterDelphiFunction(@IntPowBcd, 'IntPowBcd', cdRegister);
 S.RegisterDelphiFunction(@PowBcd, 'PowBcd', cdRegister);
 S.RegisterDelphiFunction(@SqrtBcd, 'SqrtBcd', cdRegister);
 S.RegisterDelphiFunction(@CmpBcd, 'CmpBcd', cdRegister);
 S.RegisterDelphiFunction(@EqDigitsBcd, 'EqDigitsBcd', cdRegister);
 S.RegisterDelphiFunction(@EqPlacesBcd, 'EqPlacesBcd', cdRegister);
 S.RegisterDelphiFunction(@IsIntBcd, 'IsIntBcd', cdRegister);
 S.RegisterDelphiFunction(@TruncBcd, 'TruncBcd', cdRegister);
 S.RegisterDelphiFunction(@BcdExt, 'BcdExt', cdRegister);
 S.RegisterDelphiFunction(@RoundBcd, 'RoundBcd', cdRegister);
 S.RegisterDelphiFunction(@StrBcd, 'StrBcd', cdRegister);
 S.RegisterDelphiFunction(@StrExpBcd, 'StrExpBcd', cdRegister);
 S.RegisterDelphiFunction(@FormatBcd, 'FormatBcd', cdRegister);
 S.RegisterDelphiFunction(@StrGeneralBcd, 'StrGeneralBcd', cdRegister);
 S.RegisterDelphiFunction(@FloatFormBcd, 'FloatFormBcd', cdRegister);
 S.RegisterDelphiFunction(@ConvertBcd, 'ConvertBcd', cdRegister);
 {S.RegisterDelphiFunction(@AddBcd_C, 'AddBcd_C', cdRegister);
 S.RegisterDelphiFunction(@SubBcd_C, 'SubBcd_C', cdRegister);
 S.RegisterDelphiFunction(@MulBcd_C, 'MulBcd_C', cdRegister);
 S.RegisterDelphiFunction(@DivBcd_C, 'DivBcd_C', cdRegister);
 S.RegisterDelphiFunction(@ModBcd_C, 'ModBcd_C', cdRegister);
 S.RegisterDelphiFunction(@NegBcd_C, 'NegBcd_C', cdRegister);
 S.RegisterDelphiFunction(@AbsBcd_C, 'AbsBcd_C', cdRegister);
 S.RegisterDelphiFunction(@FracBcd_C, 'FracBcd_C', cdRegister);
 S.RegisterDelphiFunction(@IntBcd_C, 'IntBcd_C', cdRegister);
 S.RegisterDelphiFunction(@RoundDigitsBcd_C, 'RoundDigitsBcd_C', cdRegister);
 S.RegisterDelphiFunction(@RoundPlacesBcd_C, 'RoundPlacesBcd_C', cdRegister);
 S.RegisterDelphiFunction(@ValBcd_C, 'ValBcd_C', cdRegister);
 S.RegisterDelphiFunction(@LongBcd_C, 'LongBcd_C', cdRegister);
 S.RegisterDelphiFunction(@ExtBcd_C, 'ExtBcd_C', cdRegister);
 S.RegisterDelphiFunction(@ExpBcd_C, 'ExpBcd_C', cdRegister);
 S.RegisterDelphiFunction(@LnBcd_C, 'LnBcd_C', cdRegister);
 S.RegisterDelphiFunction(@IntPowBcd_C, 'IntPowBcd_C', cdRegister);
 S.RegisterDelphiFunction(@PowBcd_C, 'PowBcd_C', cdRegister);
 S.RegisterDelphiFunction(@SqrtBcd_C, 'SqrtBcd_C', cdRegister);}
 S.RegisterDelphiFunction(@LnBcd20, 'LnBcd20', cdRegister);
end;

 
 
{ TPSImport_StBCD }
(*----------------------------------------------------------------------------*)
procedure TPSImport_StBCD.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_StBCD(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_StBCD.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_StBCD(ri);
  RIRegister_StBCD_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
