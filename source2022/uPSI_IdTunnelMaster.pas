unit uPSI_IdTunnelMaster;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdTunnelMaster = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdTunnelMaster(CL: TPSPascalCompiler);
procedure SIRegister_TSlaveData(CL: TPSPascalCompiler);
procedure SIRegister_MClientThread(CL: TPSPascalCompiler);
procedure SIRegister_IdTunnelMaster(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdTunnelMaster(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSlaveData(CL: TPSRuntimeClassImporter);
procedure RIRegister_MClientThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdTunnelMaster(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   SyncObjs
  ,IdTCPServer
  ,IdTCPClient
  ,IdTunnelCommon
  ,IdTunnelMaster
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdTunnelMaster]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdTunnelMaster(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPServer', 'TIdTunnelMaster') do
  with CL.AddClassN(CL.FindClass('TIdTCPServer'),'TIdTunnelMaster') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure SetStatistics( Module : Integer; Value : Integer)');
    RegisterMethod('Procedure GetStatistics( Module : Integer; var Value : Integer)');
    RegisterProperty('Active', 'Boolean', iptrw);
    RegisterProperty('Logger', 'TLogger', iptrw);
    RegisterProperty('NumSlaves', 'Integer', iptr);
    RegisterProperty('NumServices', 'Integer', iptr);
    RegisterProperty('MappedHost', 'string', iptrw);
    RegisterProperty('MappedPort', 'Integer', iptrw);
    RegisterProperty('LockDestinationHost', 'Boolean', iptrw);
    RegisterProperty('LockDestinationPort', 'Boolean', iptrw);
    RegisterProperty('OnConnect', 'TIdServerThreadEvent', iptrw);
    RegisterProperty('OnDisconnect', 'TIdServerThreadEvent', iptrw);
    RegisterProperty('OnTransformRead', 'TIdServerThreadEvent', iptrw);
    RegisterProperty('OnTransformSend', 'TSendTrnEvent', iptrw);
    RegisterProperty('OnInterpretMsg', 'TSendMsgEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSlaveData(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TSlaveData') do
  with CL.AddClassN(CL.FindClass('TObject'),'TSlaveData') do
  begin
    RegisterProperty('Receiver', 'TReceiver', iptrw);
    RegisterProperty('Sender', 'TSender', iptrw);
    RegisterProperty('Locker', 'TCriticalSection', iptrw);
    RegisterProperty('SelfDisconnected', 'Boolean', iptrw);
    RegisterProperty('UserData', 'TObject', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_MClientThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'MClientThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'MClientThread') do
  begin
    RegisterProperty('MasterParent', 'TIdTunnelMaster', iptrw);
    RegisterProperty('UserId', 'Integer', iptrw);
    RegisterProperty('MasterThread', 'TIdPeerThread', iptrw);
    RegisterProperty('OutboundClient', 'TIdTCPClient', iptrw);
    RegisterProperty('DisconnectedOnRequest', 'Boolean', iptrw);
    RegisterProperty('Locker', 'TCriticalSection', iptrw);
    RegisterProperty('SelfDisconnected', 'Boolean', iptrw);
    RegisterMethod('Constructor Create( AMaster : TIdTunnelMaster)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdTunnelMaster(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIdTunnelMaster');
  SIRegister_MClientThread(CL);
  SIRegister_TSlaveData(CL);
  CL.AddTypeS('TIdSendMsgEvent', 'Procedure ( Thread : TIdPeerThread; var Custo'
   +'mMsg : String)');
  CL.AddTypeS('TIdSendTrnEvent', 'Procedure ( Thread : TIdPeerThread; var Heade'
   +'r : TIdHeader; var CustomMsg : String)');
  CL.AddTypeS('TIdSendTrnEventC', 'Procedure ( var Header : TIdHeader; var Cust'
   +'omMsg : String)');
  CL.AddTypeS('TIdTunnelEventC', 'Procedure ( Receiver : TReceiver)');
  CL.AddTypeS('TIdSendMsgEventC', 'Procedure ( var CustomMsg : String)');
  SIRegister_TIdTunnelMaster(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnInterpretMsg_W(Self: TIdTunnelMaster; const T: TSendMsgEvent);
begin Self.OnInterpretMsg := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnInterpretMsg_R(Self: TIdTunnelMaster; var T: TSendMsgEvent);
begin T := Self.OnInterpretMsg; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnTransformSend_W(Self: TIdTunnelMaster; const T: TSendTrnEvent);
begin Self.OnTransformSend := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnTransformSend_R(Self: TIdTunnelMaster; var T: TSendTrnEvent);
begin T := Self.OnTransformSend; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnTransformRead_W(Self: TIdTunnelMaster; const T: TIdServerThreadEvent);
begin Self.OnTransformRead := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnTransformRead_R(Self: TIdTunnelMaster; var T: TIdServerThreadEvent);
begin T := Self.OnTransformRead; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnDisconnect_W(Self: TIdTunnelMaster; const T: TIdServerThreadEvent);
begin Self.OnDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnDisconnect_R(Self: TIdTunnelMaster; var T: TIdServerThreadEvent);
begin T := Self.OnDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnConnect_W(Self: TIdTunnelMaster; const T: TIdServerThreadEvent);
begin Self.OnConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterOnConnect_R(Self: TIdTunnelMaster; var T: TIdServerThreadEvent);
begin T := Self.OnConnect; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterLockDestinationPort_W(Self: TIdTunnelMaster; const T: Boolean);
begin Self.LockDestinationPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterLockDestinationPort_R(Self: TIdTunnelMaster; var T: Boolean);
begin T := Self.LockDestinationPort; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterLockDestinationHost_W(Self: TIdTunnelMaster; const T: Boolean);
begin Self.LockDestinationHost := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterLockDestinationHost_R(Self: TIdTunnelMaster; var T: Boolean);
begin T := Self.LockDestinationHost; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterMappedPort_W(Self: TIdTunnelMaster; const T: Integer);
begin Self.MappedPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterMappedPort_R(Self: TIdTunnelMaster; var T: Integer);
begin T := Self.MappedPort; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterMappedHost_W(Self: TIdTunnelMaster; const T: string);
begin Self.MappedHost := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterMappedHost_R(Self: TIdTunnelMaster; var T: string);
begin T := Self.MappedHost; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterNumServices_R(Self: TIdTunnelMaster; var T: Integer);
begin T := Self.NumServices; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterNumSlaves_R(Self: TIdTunnelMaster; var T: Integer);
begin T := Self.NumSlaves; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterLogger_W(Self: TIdTunnelMaster; const T: TLogger);
begin Self.Logger := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterLogger_R(Self: TIdTunnelMaster; var T: TLogger);
begin T := Self.Logger; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterActive_W(Self: TIdTunnelMaster; const T: Boolean);
begin Self.Active := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTunnelMasterActive_R(Self: TIdTunnelMaster; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataUserData_W(Self: TSlaveData; const T: TObject);
Begin Self.UserData := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataUserData_R(Self: TSlaveData; var T: TObject);
Begin T := Self.UserData; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataSelfDisconnected_W(Self: TSlaveData; const T: Boolean);
Begin Self.SelfDisconnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataSelfDisconnected_R(Self: TSlaveData; var T: Boolean);
Begin T := Self.SelfDisconnected; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataLocker_W(Self: TSlaveData; const T: TCriticalSection);
Begin Self.Locker := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataLocker_R(Self: TSlaveData; var T: TCriticalSection);
Begin T := Self.Locker; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataSender_W(Self: TSlaveData; const T: TSender);
Begin Self.Sender := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataSender_R(Self: TSlaveData; var T: TSender);
Begin T := Self.Sender; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataReceiver_W(Self: TSlaveData; const T: TReceiver);
Begin Self.Receiver := T; end;

(*----------------------------------------------------------------------------*)
procedure TSlaveDataReceiver_R(Self: TSlaveData; var T: TReceiver);
Begin T := Self.Receiver; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadSelfDisconnected_W(Self: MClientThread; const T: Boolean);
Begin Self.SelfDisconnected := T; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadSelfDisconnected_R(Self: MClientThread; var T: Boolean);
Begin T := Self.SelfDisconnected; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadLocker_W(Self: MClientThread; const T: TCriticalSection);
Begin Self.Locker := T; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadLocker_R(Self: MClientThread; var T: TCriticalSection);
Begin T := Self.Locker; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadDisconnectedOnRequest_W(Self: MClientThread; const T: Boolean);
Begin Self.DisconnectedOnRequest := T; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadDisconnectedOnRequest_R(Self: MClientThread; var T: Boolean);
Begin T := Self.DisconnectedOnRequest; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadOutboundClient_W(Self: MClientThread; const T: TIdTCPClient);
Begin Self.OutboundClient := T; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadOutboundClient_R(Self: MClientThread; var T: TIdTCPClient);
Begin T := Self.OutboundClient; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadMasterThread_W(Self: MClientThread; const T: TIdPeerThread);
Begin Self.MasterThread := T; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadMasterThread_R(Self: MClientThread; var T: TIdPeerThread);
Begin T := Self.MasterThread; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadUserId_W(Self: MClientThread; const T: Integer);
Begin Self.UserId := T; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadUserId_R(Self: MClientThread; var T: Integer);
Begin T := Self.UserId; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadMasterParent_W(Self: MClientThread; const T: TIdTunnelMaster);
Begin Self.MasterParent := T; end;

(*----------------------------------------------------------------------------*)
procedure MClientThreadMasterParent_R(Self: MClientThread; var T: TIdTunnelMaster);
Begin T := Self.MasterParent; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdTunnelMaster(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTunnelMaster) do
  begin
    RegisterConstructor(@TIdTunnelMaster.Create, 'Create');
    RegisterMethod(@TIdTunnelMaster.SetStatistics, 'SetStatistics');
    RegisterMethod(@TIdTunnelMaster.GetStatistics, 'GetStatistics');
    RegisterPropertyHelper(@TIdTunnelMasterActive_R,@TIdTunnelMasterActive_W,'Active');
    RegisterPropertyHelper(@TIdTunnelMasterLogger_R,@TIdTunnelMasterLogger_W,'Logger');
    RegisterPropertyHelper(@TIdTunnelMasterNumSlaves_R,nil,'NumSlaves');
    RegisterPropertyHelper(@TIdTunnelMasterNumServices_R,nil,'NumServices');
    RegisterPropertyHelper(@TIdTunnelMasterMappedHost_R,@TIdTunnelMasterMappedHost_W,'MappedHost');
    RegisterPropertyHelper(@TIdTunnelMasterMappedPort_R,@TIdTunnelMasterMappedPort_W,'MappedPort');
    RegisterPropertyHelper(@TIdTunnelMasterLockDestinationHost_R,@TIdTunnelMasterLockDestinationHost_W,'LockDestinationHost');
    RegisterPropertyHelper(@TIdTunnelMasterLockDestinationPort_R,@TIdTunnelMasterLockDestinationPort_W,'LockDestinationPort');
    RegisterPropertyHelper(@TIdTunnelMasterOnConnect_R,@TIdTunnelMasterOnConnect_W,'OnConnect');
    RegisterPropertyHelper(@TIdTunnelMasterOnDisconnect_R,@TIdTunnelMasterOnDisconnect_W,'OnDisconnect');
    RegisterPropertyHelper(@TIdTunnelMasterOnTransformRead_R,@TIdTunnelMasterOnTransformRead_W,'OnTransformRead');
    RegisterPropertyHelper(@TIdTunnelMasterOnTransformSend_R,@TIdTunnelMasterOnTransformSend_W,'OnTransformSend');
    RegisterPropertyHelper(@TIdTunnelMasterOnInterpretMsg_R,@TIdTunnelMasterOnInterpretMsg_W,'OnInterpretMsg');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSlaveData(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSlaveData) do
  begin
    RegisterPropertyHelper(@TSlaveDataReceiver_R,@TSlaveDataReceiver_W,'Receiver');
    RegisterPropertyHelper(@TSlaveDataSender_R,@TSlaveDataSender_W,'Sender');
    RegisterPropertyHelper(@TSlaveDataLocker_R,@TSlaveDataLocker_W,'Locker');
    RegisterPropertyHelper(@TSlaveDataSelfDisconnected_R,@TSlaveDataSelfDisconnected_W,'SelfDisconnected');
    RegisterPropertyHelper(@TSlaveDataUserData_R,@TSlaveDataUserData_W,'UserData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_MClientThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(MClientThread) do
  begin
    RegisterPropertyHelper(@MClientThreadMasterParent_R,@MClientThreadMasterParent_W,'MasterParent');
    RegisterPropertyHelper(@MClientThreadUserId_R,@MClientThreadUserId_W,'UserId');
    RegisterPropertyHelper(@MClientThreadMasterThread_R,@MClientThreadMasterThread_W,'MasterThread');
    RegisterPropertyHelper(@MClientThreadOutboundClient_R,@MClientThreadOutboundClient_W,'OutboundClient');
    RegisterPropertyHelper(@MClientThreadDisconnectedOnRequest_R,@MClientThreadDisconnectedOnRequest_W,'DisconnectedOnRequest');
    RegisterPropertyHelper(@MClientThreadLocker_R,@MClientThreadLocker_W,'Locker');
    RegisterPropertyHelper(@MClientThreadSelfDisconnected_R,@MClientThreadSelfDisconnected_W,'SelfDisconnected');
    RegisterConstructor(@MClientThread.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdTunnelMaster(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTunnelMaster) do
  RIRegister_MClientThread(CL);
  RIRegister_TSlaveData(CL);
  RIRegister_TIdTunnelMaster(CL);
end;

 
 
{ TPSImport_IdTunnelMaster }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTunnelMaster.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdTunnelMaster(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTunnelMaster.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdTunnelMaster(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
