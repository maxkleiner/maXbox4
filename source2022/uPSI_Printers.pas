unit uPSI_Printers;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Printers = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPrinter(CL: TPSPascalCompiler);
procedure SIRegister_Printers(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Printers_Routines(S: TPSExec);
procedure RIRegister_TPrinter(CL: TPSRuntimeClassImporter);
procedure RIRegister_Printers(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   //WinUtils
  Windows
  ,WinSpool
  ,Graphics
  //,Forms
  ,Printers
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Printers]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPrinter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TPrinter') do
  with CL.AddClassN(CL.FindClass('TObject'),'TPrinter') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure Abort');
    RegisterMethod('Procedure BeginDoc');
    RegisterMethod('Procedure EndDoc');
    RegisterMethod('Procedure NewPage');
    RegisterMethod('Procedure GetPrinter( ADevice, ADriver, APort : PChar; var ADeviceMode : THandle)');
    RegisterMethod('Procedure SetPrinter( ADevice, ADriver, APort : PChar; ADeviceMode : THandle)');
    RegisterMethod('Procedure Refresh');
    RegisterProperty('Aborted', 'Boolean', iptr);
    RegisterProperty('Canvas', 'TCanvas', iptr);
    RegisterProperty('Capabilities', 'TPrinterCapabilities', iptr);
    RegisterProperty('Copies', 'Integer', iptrw);
    RegisterProperty('Fonts', 'TStrings', iptr);
    RegisterProperty('Handle', 'HDC', iptr);
    RegisterProperty('Orientation', 'TPrinterOrientation', iptrw);
    RegisterProperty('PageHeight', 'Integer', iptr);
    RegisterProperty('PageWidth', 'Integer', iptr);
    RegisterProperty('PageNumber', 'Integer', iptr);
    RegisterProperty('PrinterIndex', 'Integer', iptrw);
    RegisterProperty('Printing', 'Boolean', iptr);
    RegisterProperty('Printers', 'TStrings', iptr);
    RegisterProperty('Title', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Printers(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPrinter');
  CL.AddTypeS('TPrinterState', '( psNoHandle, psHandleIC, psHandleDC )');
  CL.AddTypeS('TPrinterOrientation', '( poPortrait, poLandscape )');
  CL.AddTypeS('TPrinterCapability', '( pcCopies, pcOrientation, pcCollation )');
  CL.AddTypeS('TPrinterCapabilities', 'set of TPrinterCapability');
  SIRegister_TPrinter(CL);
 CL.AddDelphiFunction('Function Printer : TPrinter');
 CL.AddDelphiFunction('Function SetPrinter( NewPrinter : TPrinter) : TPrinter');
 CL.AddDelphiFunction('Procedure AssignPrn( var F : Text)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TPrinterTitle_W(Self: TPrinter; const T: string);
begin Self.Title := T; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterTitle_R(Self: TPrinter; var T: string);
begin T := Self.Title; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterPrinters_R(Self: TPrinter; var T: TStrings);
begin T := Self.Printers; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterPrinting_R(Self: TPrinter; var T: Boolean);
begin T := Self.Printing; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterPrinterIndex_W(Self: TPrinter; const T: Integer);
begin Self.PrinterIndex := T; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterPrinterIndex_R(Self: TPrinter; var T: Integer);
begin T := Self.PrinterIndex; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterPageNumber_R(Self: TPrinter; var T: Integer);
begin T := Self.PageNumber; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterPageWidth_R(Self: TPrinter; var T: Integer);
begin T := Self.PageWidth; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterPageHeight_R(Self: TPrinter; var T: Integer);
begin T := Self.PageHeight; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterOrientation_W(Self: TPrinter; const T: TPrinterOrientation);
begin Self.Orientation := T; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterOrientation_R(Self: TPrinter; var T: TPrinterOrientation);
begin T := Self.Orientation; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterHandle_R(Self: TPrinter; var T: HDC);
begin T := Self.Handle; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterFonts_R(Self: TPrinter; var T: TStrings);
begin T := Self.Fonts; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterCopies_W(Self: TPrinter; const T: Integer);
begin Self.Copies := T; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterCopies_R(Self: TPrinter; var T: Integer);
begin T := Self.Copies; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterCapabilities_R(Self: TPrinter; var T: TPrinterCapabilities);
begin T := Self.Capabilities; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterCanvas_R(Self: TPrinter; var T: TCanvas);
begin T := Self.Canvas; end;

(*----------------------------------------------------------------------------*)
procedure TPrinterAborted_R(Self: TPrinter; var T: Boolean);
begin T := Self.Aborted; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Printers_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Printer, 'Printer', cdRegister);
 S.RegisterDelphiFunction(@SetPrinter, 'SetPrinter', cdRegister);
 S.RegisterDelphiFunction(@AssignPrn, 'AssignPrn', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPrinter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPrinter) do
  begin
    RegisterConstructor(@TPrinter.Create, 'Create');
    RegisterMethod(@TPrinter.Abort, 'Abort');
    RegisterMethod(@TPrinter.BeginDoc, 'BeginDoc');
    RegisterMethod(@TPrinter.EndDoc, 'EndDoc');
    RegisterMethod(@TPrinter.NewPage, 'NewPage');
    RegisterMethod(@TPrinter.GetPrinter, 'GetPrinter');
    RegisterMethod(@TPrinter.SetPrinter, 'SetPrinter');
    RegisterMethod(@TPrinter.Refresh, 'Refresh');
    RegisterPropertyHelper(@TPrinterAborted_R,nil,'Aborted');
    RegisterPropertyHelper(@TPrinterCanvas_R,nil,'Canvas');
    RegisterPropertyHelper(@TPrinterCapabilities_R,nil,'Capabilities');
    RegisterPropertyHelper(@TPrinterCopies_R,@TPrinterCopies_W,'Copies');
    RegisterPropertyHelper(@TPrinterFonts_R,nil,'Fonts');
    RegisterPropertyHelper(@TPrinterHandle_R,nil,'Handle');
    RegisterPropertyHelper(@TPrinterOrientation_R,@TPrinterOrientation_W,'Orientation');
    RegisterPropertyHelper(@TPrinterPageHeight_R,nil,'PageHeight');
    RegisterPropertyHelper(@TPrinterPageWidth_R,nil,'PageWidth');
    RegisterPropertyHelper(@TPrinterPageNumber_R,nil,'PageNumber');
    RegisterPropertyHelper(@TPrinterPrinterIndex_R,@TPrinterPrinterIndex_W,'PrinterIndex');
    RegisterPropertyHelper(@TPrinterPrinting_R,nil,'Printing');
    RegisterPropertyHelper(@TPrinterPrinters_R,nil,'Printers');
    RegisterPropertyHelper(@TPrinterTitle_R,@TPrinterTitle_W,'Title');
    RegisterMethod(@TPrinter.Destroy, 'Free');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Printers(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EPrinter) do
  RIRegister_TPrinter(CL);
end;

 
 
{ TPSImport_Printers }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Printers.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Printers(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Printers.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Printers(ri);
  RIRegister_Printers_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
