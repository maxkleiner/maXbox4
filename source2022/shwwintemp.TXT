 Function StrChr( lpStart : PChar; wMatch : WORD) : PChar');
 Function StrChrI( lpStart : PChar; wMatch : WORD) : PChar');
 Function StrCmpN( lpStr1, lpStr2 : PChar; nChar : Integer) : Integer');
 Function StrCmpNI( lpStr1, lpStr2 : PChar; nChar : Integer) : Integer');
 Function StrCSpn( lpStr_, lpSet : PChar) : Integer');
 Function StrCSpnI( lpStr1, lpSet : PChar) : Integer');
 Function StrDup( lpSrch : PChar) : PChar');
 Function StrFormatByteSize( dw : DWORD; szBuf : PChar; uiBufSize : UINT) : PChar');
 Function StrFormatKBSize( qdw : Dword; szBuf : PChar; uiBufSize : UINT) : PChar');
 Function StrFromTimeInterval( pszOut : PChar; cchMax : UINT; dwTimeMS : DWORD; digits : Integer) : Integer');
 Function StrIsIntlEqual( fCaseSens : BOOL; lpString1, lpString2 : PChar; nChar : Integer) : BOOL');
/Function StrNCat( psz1 : PChar; psz2 : PChar; cchMax : Integer) : PChar');
 Function StrPBrk( psz, pszSet : PChar) : PChar');
 Function StrRChr( lpStart, lpEnd : PChar; wMatch : WORD) : PChar');
 Function StrRChrI( lpStart, lpEnd : PChar; wMatch : WORD) : PChar');
 Function StrRStrI( lpSource, lpLast, lpSrch : PChar) : PChar');
 Function StrSpn( psz, pszSet : PChar) : Integer');
 Function StrStr( lpFirst, lpSrch : PChar) : PChar');
 Function StrStrI( lpFirst, lpSrch : PChar) : PChar');
 Function StrToInt( lpSrch : PChar) : Integer');
 Function StrToIntEx( pszString : PChar; dwFlags : DWORD; var piRet : Integer) : BOOL');
 Function StrTrim( psz : PChar; pszTrimChars : PChar) : BOOL');
 Function ChrCmpI( w1, w2 : WORD) : BOOL');
 Function ChrCmpIA( w1, w2 : WORD) : BOOL');
 Function ChrCmpIW( w1, w2 : WORD) : BOOL');
 Function StrIntlEqN( s1, s2 : PChar; nChar : Integer) : BOOL');
 Function StrIntlEqNI( s1, s2 : PChar; nChar : Integer) : BOOL');
 Function StrCatBuff( pszDest, pszSrc : PChar; cchDestBuffSize : Integer) : PChar');
 Function StrCpyNX( psz1 : PChar; psz2 : PChar; cchMax : Integer) : PChar');
 Function IntlStrEqWorker( fCaseSens : BOOL; lpString1, lpString2 : PChar; nChar : Integer) : BOOL');
 Function IntlStrEqN( s1, s2 : PChar; nChar : Integer) : BOOL');
 SZ_CONTENTTYPE_HTMLA','String').SetString( 'text/html');
 SZ_CONTENTTYPE_HTMLW','String').SetString( 'text/html');
 SZ_CONTENTTYPE_HTML','string').SetString( SZ_CONTENTTYPE_HTMLA);
 SZ_CONTENTTYPE_CDFA','String').SetString( 'application/x-cdf');
 SZ_CONTENTTYPE_CDFW','String').SetString( 'application/x-cdf');
 SZ_CONTENTTYPE_CDF','string').SetString( SZ_CONTENTTYPE_CDFA);
 Function PathIsHTMLFile( pszPath : PChar) : BOOL');
 STIF_DEFAULT','LongWord').SetUInt( $00000000);
 STIF_SUPPORT_HEX','LongWord').SetUInt( $00000001);
 Function StrNCmpI( lpStr1, lpStr2 : PChar; nChar : Integer) : Integer');
 Function StrNCpy( psz1, psz2 : PChar; cchMax : Integer) : PChar');
 Function StrCatN( psz1 : PChar; psz2 : PChar; cchMax : Integer) : PChar');
 Function PathAddBackslash( pszPath : PChar) : PChar');
 Function PathAddExtension( pszPath : PChar; pszExt : PChar) : BOOL');
 Function PathAppend( pszPath : PChar; pMore : PChar) : BOOL');
 Function PathBuildRoot( szRoot : PChar; iDrive : Integer) : PChar');
 Function PathCanonicalize( pszBuf : PChar; pszPath : PChar) : BOOL');
 Function PathCombine( szDest : PChar; lpszDir, lpszFile : PChar) : PChar');
 Function PathCompactPath( hDC : HDC; pszPath : PChar; dx : UINT) : BOOL');
 Function PathCompactPathEx( pszOut : PChar; pszSrc : PChar; cchMax : UINT; dwFlags : DWORD) : BOOL');
 Function PathCommonPrefix( pszFile1, pszFile2 : PChar; achPath : PChar) : Integer');
 Function PathFileExists( pszPath : PChar) : BOOL');
 Function PathFindExtension( pszPath : PChar) : PChar');
 Function PathFindFileName( pszPath : PChar) : PChar');
 Function PathFindNextComponent( pszPath : PChar) : PChar');
 Function PathFindOnPath( pszPath : PChar; var ppszOtherDirs : PChar) : BOOL');
 Function PathGetArgs( pszPath : PChar) : PChar');
 Function PathFindSuffixArray( pszPath : PChar; const apszSuffix : PChar; iArraySize : Integer) : PChar');
 Function PathIsLFNFileSpec( lpName : PChar) : BOOL');
 Function PathGetCharType( ch : Char) : UINT');
 GCT_INVALID','LongWord').SetUInt( $0000);
 GCT_LFNCHAR','LongWord').SetUInt( $0001);
 GCT_SHORTCHAR','LongWord').SetUInt( $0002);
 GCT_WILD','LongWord').SetUInt( $0004);
 GCT_SEPARATOR','LongWord').SetUInt( $0008);
 Function PathGetDriveNumber( pszPath : PChar) : Integer');
 Function PathIsDirectory( pszPath : PChar) : BOOL');
 Function PathIsDirectoryEmpty( pszPath : PChar) : BOOL');
 Function PathIsFileSpec( pszPath : PChar) : BOOL');
 Function PathIsPrefix( pszPrefix, pszPath : PChar) : BOOL');
 Function PathIsRelative( pszPath : PChar) : BOOL');
 Function PathIsRoot( pszPath : PChar) : BOOL');
 Function PathIsSameRoot( pszPath1, pszPath2 : PChar) : BOOL');
 Function PathIsUNC( pszPath : PChar) : BOOL');
 Function PathIsNetworkPath( pszPath : PChar) : BOOL');
 Function PathIsUNCServer( pszPath : PChar) : BOOL');
 Function PathIsUNCServerShare( pszPath : PChar) : BOOL');
 Function PathIsContentType( pszPath, pszContentType : PChar) : BOOL');
 Function PathIsURL( pszPath : PChar) : BOOL');
 Function PathMakePretty( pszPath : PChar) : BOOL');
 Function PathMatchSpec( pszFile, pszSpec : PChar) : BOOL');
 Function PathParseIconLocation( pszIconFile : PChar) : Integer');
 Procedure PathQuoteSpaces( lpsz : PChar)');
 Function PathRelativePathTo( pszPath : PChar; pszFrom : PChar; dwAttrFrom : DWORD; pszTo : PChar; dwAttrTo : DWORD) : BOOL');
 Procedure PathRemoveArgs( pszPath : PChar)');
 Function PathRemoveBackslash( pszPath : PChar) : PChar');
 Procedure PathRemoveBlanks( pszPath : PChar)');
 Procedure PathRemoveExtension( pszPath : PChar)');
 Function PathRemoveFileSpec( pszPath : PChar) : BOOL');
 Function PathRenameExtension( pszPath : PChar; pszExt : PChar) : BOOL');
 Function PathSearchAndQualify( pszPath : PChar; pszBuf : PChar; cchBuf : UINT) : BOOL');
 Procedure PathSetDlgItemPath( hDlg : HWND; id : Integer; pszPath : PChar)');
 Function PathSkipRoot( pszPath : PChar) : PChar');
 Procedure PathStripPath( pszPath : PChar)');
 Function PathStripToRoot( pszPath : PChar) : BOOL');
 Procedure PathUnquoteSpaces( lpsz : PChar)');
 Function PathMakeSystemFolder( pszPath : PChar) : BOOL');
 Function PathUnmakeSystemFolder( pszPath : PChar) : BOOL');
 Function PathIsSystemFolder( pszPath : PChar; dwAttrb : DWORD) : BOOL');
 Procedure PathUndecorate( pszPath : PChar)');
 Function PathUnExpandEnvStrings( pszPath : PChar; pszBuf : PChar; cchBuf : UINT) : BOOL');
 URL_SCHEME_INVALID','LongInt').SetInt( - 1);
 URL_SCHEME_UNKNOWN','LongInt').SetInt( 0);
 URL_SCHEME_FTP','LongInt').SetInt( 1);
 URL_SCHEME_HTTP','LongInt').SetInt( 2);
 URL_SCHEME_GOPHER','LongInt').SetInt( 3);
 URL_SCHEME_MAILTO','LongInt').SetInt( 4);
 URL_SCHEME_NEWS','LongInt').SetInt( 5);
 URL_SCHEME_NNTP','LongInt').SetInt( 6);
 URL_SCHEME_TELNET','LongInt').SetInt( 7);
 URL_SCHEME_WAIS','LongInt').SetInt( 8);
 URL_SCHEME_FILE','LongInt').SetInt( 9);
 URL_SCHEME_MK','LongInt').SetInt( 10);
 URL_SCHEME_HTTPS','LongInt').SetInt( 11);
 URL_SCHEME_SHELL','LongInt').SetInt( 12);
 URL_SCHEME_SNEWS','LongInt').SetInt( 13);
 URL_SCHEME_LOCAL','LongInt').SetInt( 14);
 URL_SCHEME_JAVASCRIPT','LongInt').SetInt( 15);
 URL_SCHEME_VBSCRIPT','LongInt').SetInt( 16);
 URL_SCHEME_ABOUT','LongInt').SetInt( 17);
 URL_SCHEME_RES','LongInt').SetInt( 18);
 URL_SCHEME_MAXVALUE','LongInt').SetInt( 19);
  CL.AddTypeS('URL_SCHEME', 'Integer');
 URL_PART_NONE','LongInt').SetInt( 0);
 URL_PART_SCHEME','LongInt').SetInt( 1);
 URL_PART_HOSTNAME','LongInt').SetInt( 2);
 URL_PART_USERNAME','LongInt').SetInt( 3);
 URL_PART_PASSWORD','LongInt').SetInt( 4);
 URL_PART_PORT','LongInt').SetInt( 5);
 URL_PART_QUERY','LongInt').SetInt( 6);
  CL.AddTypeS('URL_PART', 'DWORD');
 URLIS_URL','LongInt').SetInt( 0);
 URLIS_OPAQUE','LongInt').SetInt( 1);
 URLIS_NOHISTORY','LongInt').SetInt( 2);
 URLIS_FILEURL','LongInt').SetInt( 3);
 URLIS_APPLIABLE','LongInt').SetInt( 4);
 URLIS_DIRECTORY','LongInt').SetInt( 5);
 URLIS_HASQUERY','LongInt').SetInt( 6);
  CL.AddTypeS('TUrlIs', 'DWORD');
 URL_UNESCAPE','LongWord').SetUInt( $10000000);
 URL_ESCAPE_UNSAFE','LongWord').SetUInt( $20000000);
 URL_PLUGGABLE_PROTOCOL','LongWord').SetUInt( $40000000);
 URL_WININET_COMPATIBILITY','LongWord').SetUInt( DWORD ( $80000000 ));
 URL_DONT_ESCAPE_EXTRA_INFO','LongWord').SetUInt( $02000000);
 URL_ESCAPE_SPACES_ONLY','LongWord').SetUInt( $04000000);
 URL_DONT_SIMPLIFY','LongWord').SetUInt( $08000000);
 URL_NO_META','longword').SetUInt( URL_DONT_SIMPLIFY);
 URL_UNESCAPE_INPLACE','LongWord').SetUInt( $00100000);
 URL_CONVERT_IF_DOSPATH','LongWord').SetUInt( $00200000);
 URL_UNESCAPE_HIGH_ANSI_ONLY','LongWord').SetUInt( $00400000);
 URL_INTERNAL_PATH','LongWord').SetUInt( $00800000);
 URL_FILE_USE_PATHURL','LongWord').SetUInt( $00010000);
 URL_ESCAPE_PERCENT','LongWord').SetUInt( $00001000);
 URL_ESCAPE_SEGMENT_ONLY','LongWord').SetUInt( $00002000);
 URL_PARTFLAG_KEEPSCHEME','LongWord').SetUInt( $00000001);
 URL_APPLY_DEFAULT','LongWord').SetUInt( $00000001);
 URL_APPLY_GUESSSCHEME','LongWord').SetUInt( $00000002);
 URL_APPLY_GUESSFILE','LongWord').SetUInt( $00000004);
 URL_APPLY_FORCEAPPLY','LongWord').SetUInt( $00000008);
 Function UrlCompare( psz1, psz2 : PChar; fIgnoreSlash : BOOL) : Integer');
 Function UrlCombine( pszBase, pszRelative : PChar; pszCombined : PChar; out pcchCombined : DWORD; dwFlags : DWORD) : HRESULT');
 Function UrlCanonicalize( pszUrl : PChar; pszCanonicalized : PChar; pcchCanonicalized : DWORD; dwFlags : DWORD) : HRESULT');
 Function UrlIsOpaque( pszURL : PChar) : BOOL');
 Function UrlIsNoHistory( pszURL : PChar) : BOOL');
 Function UrlIsFileUrl( pszURL : PChar) : BOOL');
 Function UrlIs( pszUrl : PChar; UrlIs : TUrlIs) : BOOL');
 Function UrlGetLocation( psz1 : PChar) : PChar');
 Function UrlUnescape( pszUrl, pszUnescaped : PChar; pcchUnescaped : DWORD; dwFlags : DWORD) : HRESULT');
 Function UrlEscape( pszUrl : PChar; pszEscaped : PChar; pcchEscaped : DWORD; dwFlags : DWORD) : HRESULT');
 Function UrlCreateFromPath( pszPath : PChar; pszUrl : PChar; pcchUrl : DWORD; dwFlags : DWORD) : HRESULT');
 Function PathCreateFromUrl( pszUrl : PChar; pszPath : PChar; pcchPath : DWORD; dwFlags : DWORD) : HRESULT');
 Function UrlHash( pszUrl : PChar; pbHash : BYTE; cbHash : DWORD) : HRESULT');
 Function UrlGetPart( pszIn : PChar; pszOut : PChar; pcchOut : DWORD; dwPart, dwFlags : DWORD) : HRESULT');
 Function UrlApplyScheme( pszIn : PChar; pszOut : PChar; pcchOut : DWORD; dwFlags : DWORD) : HRESULT');
 Function HashData( pbData : BYTE; cbData : DWORD; pbHash : BYTE; cbHash : DWORD) : HRESULT');
 Function UrlEscapeSpaces( pszUrl : PChar; pszEscaped : PChar; pcchEscaped : DWORD) : HRESULT');
 Function UrlUnescapeInPlace( pszUrl : PChar; dwFlags : DWORD) : HRESULT');
 Function SHDeleteEmptyKey( hKey : HKEY; pszSubKey : PChar) : DWORD');
 Function SHDeleteKey( hKey : HKEY; pszSubKey : PChar) : DWORD');
 Function SHDeleteValue( hKey : HKEY; pszSubKey, pszValue : PChar) : DWORD');
 Function SHEnumKeyEx( hKey : HKEY; dwIndex : DWORD; pszName : PChar; var pcchName : DWORD) : Longint');
 Function SHEnumValue( hKey : HKEY; dwIndex : DWORD; pszValueName : PChar; var pcchValueName : DWORD; pdwType : DWORD; pvData : ___Pointer; pcbData : DWORD) : Longint');
 Function SHQueryInfoKey( hKey : HKEY; pcSubKeys, pcchMaxSubKeyLen, pcValues, pcchMaxValueNameLen : DWORD) : Longint');
 Function SHCopyKey( hkeySrc : HKEY; szSrcSubKey : PChar; hkeyDest : HKEY; fReserved : DWORD) : DWORD');
 Function SHRegGetPath( hKey : HKEY; pcszSubKey, pcszValue : PChar; pszPath : PChar; dwFlags : DWORD) : DWORD');
 Function SHRegSetPath( hKey : HKEY; pcszSubKey, pcszValue, pcszPath : PChar; dwFlags : DWORD) : DWORD');
 SHREGDEL_DEFAULT','LongWord').SetUInt( $00000000);
 SHREGDEL_HKCU','LongWord').SetUInt( $00000001);
 SHREGDEL_HKLM','LongWord').SetUInt( $00000010);
 SHREGDEL_BOTH','LongWord').SetUInt( $00000011);
 SHREGENUM_DEFAULT','LongWord').SetUInt( $00000000);
 SHREGENUM_HKCU','LongWord').SetUInt( $00000001);
 SHREGENUM_HKLM','LongWord').SetUInt( $00000010);
 SHREGENUM_BOTH','LongWord').SetUInt( $00000011);
 SHREGSET_HKCU','LongWord').SetUInt( $00000001);
 SHREGSET_FORCE_HKCU','LongWord').SetUInt( $00000002);
 SHREGSET_HKLM','LongWord').SetUInt( $00000004);
 SHREGSET_FORCE_HKLM','LongWord').SetUInt( $00000008);
  CL.AddTypeS('TSHRegDelFlags', 'DWORD');
  CL.AddTypeS('TSHRegEnumFlags', 'DWORD');
  CL.AddTypeS('HUSKEY', 'THandle');
 ASSOCF_INIT_NOREMAPCLSID','LongWord').SetUInt( $00000001);
 ASSOCF_INIT_BYEXENAME','LongWord').SetUInt( $00000002);
 ASSOCF_OPEN_BYEXENAME','LongWord').SetUInt( $00000002);
 ASSOCF_INIT_DEFAULTTOSTAR','LongWord').SetUInt( $00000004);
 ASSOCF_INIT_DEFAULTTOFOLDER','LongWord').SetUInt( $00000008);
 ASSOCF_NOUSERSETTINGS','LongWord').SetUInt( $00000010);
 ASSOCF_NOTRUNCATE','LongWord').SetUInt( $00000020);
 ASSOCF_VERIFY','LongWord').SetUInt( $00000040);
 ASSOCF_REMAPRUNDLL','LongWord').SetUInt( $00000080);
 ASSOCF_NOFIXUPS','LongWord').SetUInt( $00000100);
 ASSOCF_IGNOREBASECLASS','LongWord').SetUInt( $00000200);
  CL.AddTypeS('ASSOCF', 'DWORD');
 ASSOCSTR_COMMAND','LongInt').SetInt( 1);
 ASSOCSTR_EXECUTABLE','LongInt').SetInt( 2);
 ASSOCSTR_FRIENDLYDOCNAME','LongInt').SetInt( 3);
 ASSOCSTR_FRIENDLYAPPNAME','LongInt').SetInt( 4);
 ASSOCSTR_NOOPEN','LongInt').SetInt( 5);
 ASSOCSTR_SHELLNEWVALUE','LongInt').SetInt( 6);
 ASSOCSTR_DDECOMMAND','LongInt').SetInt( 7);
 ASSOCSTR_DDEIFEXEC','LongInt').SetInt( 8);
 ASSOCSTR_DDEAPPLICATION','LongInt').SetInt( 9);
 ASSOCSTR_DDETOPIC','LongInt').SetInt( 10);
 ASSOCSTR_INFOTIP','LongInt').SetInt( 11);
 ASSOCSTR_MAX','LongInt').SetInt( 12);
  CL.AddTypeS('ASSOCSTR', 'DWORD');
 ASSOCKEY_SHELLEXECCLASS','LongInt').SetInt( 1);
 ASSOCKEY_APP','LongInt').SetInt( 2);
 ASSOCKEY_CLASS','LongInt').SetInt( 3);
 ASSOCKEY_BASECLASS','LongInt').SetInt( 4);
 ASSOCKEY_MAX','LongInt').SetInt( 5);
  CL.AddTypeS('ASSOCKEY', 'DWORD');
 ASSOCDATA_MSIDESCRIPTOR','LongInt').SetInt( 1);
 ASSOCDATA_NOACTIVATEHANDLER','LongInt').SetInt( 2);
 ASSOCDATA_QUERYCLASSSTORE','LongInt').SetInt( 3);
 ASSOCDATA_HASPERUSERASSOC','LongInt').SetInt( 4);
 ASSOCDATA_MAX','LongInt').SetInt( 5);
  CL.AddTypeS('ASSOCDATA', 'DWORD');
 ASSOCENUM_NONE','LongInt').SetInt( 0);
  CL.AddTypeS('ASSOCENUM', 'DWORD');
 SID_IQueryAssociations','String').SetString( '{c46ca590-3c3f-11d2-bee6-0000f805ca57}');
 SHACF_DEFAULT','LongWord').SetUInt( $00000000);
 SHACF_FILESYSTEM','LongWord').SetUInt( $00000001);
 SHACF_URLHISTORY','LongWord').SetUInt( $00000002);
 SHACF_URLMRU','LongWord').SetUInt( $00000004);
 SHACF_USETAB','LongWord').SetUInt( $00000008);
 SHACF_FILESYS_ONLY','LongWord').SetUInt( $00000010);
 SHACF_AUTOSUGGEST_FORCE_ON','LongWord').SetUInt( $10000000);
 SHACF_AUTOSUGGEST_FORCE_OFF','LongWord').SetUInt( $20000000);
 SHACF_AUTOAPPEND_FORCE_ON','LongWord').SetUInt( $40000000);
 SHACF_AUTOAPPEND_FORCE_OFF','LongWord').SetUInt( DWORD ( $80000000 ));
 Function SHAutoComplete( hwndEdit : HWND; dwFlags : DWORD) : HRESULT');
 Procedure SHSetThreadRef( punk : IUnknown)');
 Procedure SHGetThreadRef( out ppunk : IUnknown)');
 CTF_INSIST','LongWord').SetUInt( $00000001);
 CTF_THREAD_REF','LongWord').SetUInt( $00000002);
 CTF_PROCESS_REF','LongWord').SetUInt( $00000004);
 CTF_COINIT','LongWord').SetUInt( $00000008);
 Function SHCreateShellPalette( hdc : HDC) : HPALETTE');
 Procedure ColorRGBToHLS( clrRGB : TColorRef; out pwHue, pwLuminance, pwSaturation : WORD)');
 Function ColorHLSToRGB( wHue, wLuminance, wSaturation : WORD) : TColorRef');
 Function ColorAdjustLuma( clrRGB : TColorRef; n : Integer; fScale : Boolean) : TColorRef');
 DLLVER_PLATFORM_WINDOWS','LongWord').SetUInt( $00000001);
 DLLVER_PLATFORM_NT','LongWord').SetUInt( $00000002);
 DLLVER_MAJOR_MASK','LongWord').SetUInt( Int64 ( $FFFF000000000000 ));
 DLLVER_MINOR_MASK','LongWord').SetUInt( Int64 ( $0000FFFF00000000 ));
 DLLVER_BUILD_MASK','LongWord').SetUInt( Int64 ( $00000000FFFF0000 ));
 DLLVER_QFE_MASK','LongWord').SetUInt( Int64 ( $000000000000FFFF ));
 Function MAKEDLLVERULL( Major, Minor, Build, Qfe : Word) : Int64');

----code_cleared_checked----