unit uPSI_niExtendedRegularExpression;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_niExtendedRegularExpression = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TniTestExtendedRegularExpression(CL: TPSPascalCompiler);
procedure SIRegister_TniSubRegularExpression(CL: TPSPascalCompiler);
procedure SIRegister_TniExtendedRegularExpression(CL: TPSPascalCompiler);
procedure SIRegister_niExtendedRegularExpression(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TniTestExtendedRegularExpression(CL: TPSRuntimeClassImporter);
procedure RIRegister_TniSubRegularExpression(CL: TPSRuntimeClassImporter);
procedure RIRegister_TniExtendedRegularExpression(CL: TPSRuntimeClassImporter);
procedure RIRegister_niExtendedRegularExpression(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   niRegularExpression
  ,niTestCase
  ,niExtendedRegularExpression
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_niExtendedRegularExpression]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TniTestExtendedRegularExpression(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TniTestCase', 'TniTestExtendedRegularExpression') do
  with CL.AddClassN(CL.FindClass('TniTestCase'),'TniTestExtendedRegularExpression') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TniSubRegularExpression(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TniRegularExpression', 'TniSubRegularExpression') do
  with CL.AddClassN(CL.FindClass('TniRegularExpression'),'TniSubRegularExpression') do
  begin
    RegisterMethod('Constructor Create( const sRule : string; xFlags : TniRegularExpressionMatchFlags)');
    RegisterProperty('Name', 'string', iptrw);
    RegisterProperty('ExtractMatch', 'boolean', iptrw);
    RegisterProperty('Identified', 'boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TniExtendedRegularExpression(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TniExtendedRegularExpression') do
  with CL.AddClassN(CL.FindClass('TObject'),'TniExtendedRegularExpression') do
  begin
    RegisterMethod('Constructor Create( const sRegularExpression : string; xFlags : TniRegularExpressionMatchFlags)');
    RegisterMethod('Function Match( const sString : string) : TniRegularExpressionMatchResult');
    RegisterProperty('MatchStart', 'integer', iptr);
    RegisterProperty('MatchLength', 'integer', iptr);
    RegisterProperty('MatchCount', 'integer', iptr);
    RegisterProperty('Matches', 'string integer', iptr);
    RegisterProperty('MatchIdentifier', 'string integer', iptr);
    RegisterProperty('NamedMatches', 'string string', iptr);
    RegisterProperty('SubExpressionCount', 'integer', iptr);
    RegisterProperty('SubExpressions', 'TniSubRegularExpression integer', iptr);
    RegisterProperty('IdentifierCount', 'integer', iptr);
    RegisterProperty('Identifiers', 'string integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_niExtendedRegularExpression(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TniSubRegularExpression');
  SIRegister_TniExtendedRegularExpression(CL);
  SIRegister_TniSubRegularExpression(CL);
  SIRegister_TniTestExtendedRegularExpression(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TniSubRegularExpressionIdentified_R(Self: TniSubRegularExpression; var T: boolean);
begin T := Self.Identified; end;

(*----------------------------------------------------------------------------*)
procedure TniSubRegularExpressionExtractMatch_W(Self: TniSubRegularExpression; const T: boolean);
begin Self.ExtractMatch := T; end;

(*----------------------------------------------------------------------------*)
procedure TniSubRegularExpressionExtractMatch_R(Self: TniSubRegularExpression; var T: boolean);
begin T := Self.ExtractMatch; end;

(*----------------------------------------------------------------------------*)
procedure TniSubRegularExpressionName_W(Self: TniSubRegularExpression; const T: string);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TniSubRegularExpressionName_R(Self: TniSubRegularExpression; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionIdentifiers_R(Self: TniExtendedRegularExpression; var T: string; const t1: integer);
begin T := Self.Identifiers[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionIdentifierCount_R(Self: TniExtendedRegularExpression; var T: integer);
begin T := Self.IdentifierCount; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionSubExpressions_R(Self: TniExtendedRegularExpression; var T: TniSubRegularExpression; const t1: integer);
begin T := Self.SubExpressions[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionSubExpressionCount_R(Self: TniExtendedRegularExpression; var T: integer);
begin T := Self.SubExpressionCount; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionNamedMatches_R(Self: TniExtendedRegularExpression; var T: string; const t1: string);
begin T := Self.NamedMatches[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionMatchIdentifier_R(Self: TniExtendedRegularExpression; var T: string; const t1: integer);
begin T := Self.MatchIdentifier[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionMatches_R(Self: TniExtendedRegularExpression; var T: string; const t1: integer);
begin T := Self.Matches[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionMatchCount_R(Self: TniExtendedRegularExpression; var T: integer);
begin T := Self.MatchCount; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionMatchLength_R(Self: TniExtendedRegularExpression; var T: integer);
begin T := Self.MatchLength; end;

(*----------------------------------------------------------------------------*)
procedure TniExtendedRegularExpressionMatchStart_R(Self: TniExtendedRegularExpression; var T: integer);
begin T := Self.MatchStart; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TniTestExtendedRegularExpression(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TniTestExtendedRegularExpression) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TniSubRegularExpression(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TniSubRegularExpression) do
  begin
    RegisterConstructor(@TniSubRegularExpression.Create, 'Create');
    RegisterPropertyHelper(@TniSubRegularExpressionName_R,@TniSubRegularExpressionName_W,'Name');
    RegisterPropertyHelper(@TniSubRegularExpressionExtractMatch_R,@TniSubRegularExpressionExtractMatch_W,'ExtractMatch');
    RegisterPropertyHelper(@TniSubRegularExpressionIdentified_R,nil,'Identified');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TniExtendedRegularExpression(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TniExtendedRegularExpression) do
  begin
    RegisterConstructor(@TniExtendedRegularExpression.Create, 'Create');
    RegisterMethod(@TniExtendedRegularExpression.Match, 'Match');
    RegisterPropertyHelper(@TniExtendedRegularExpressionMatchStart_R,nil,'MatchStart');
    RegisterPropertyHelper(@TniExtendedRegularExpressionMatchLength_R,nil,'MatchLength');
    RegisterPropertyHelper(@TniExtendedRegularExpressionMatchCount_R,nil,'MatchCount');
    RegisterPropertyHelper(@TniExtendedRegularExpressionMatches_R,nil,'Matches');
    RegisterPropertyHelper(@TniExtendedRegularExpressionMatchIdentifier_R,nil,'MatchIdentifier');
    RegisterPropertyHelper(@TniExtendedRegularExpressionNamedMatches_R,nil,'NamedMatches');
    RegisterPropertyHelper(@TniExtendedRegularExpressionSubExpressionCount_R,nil,'SubExpressionCount');
    RegisterPropertyHelper(@TniExtendedRegularExpressionSubExpressions_R,nil,'SubExpressions');
    RegisterPropertyHelper(@TniExtendedRegularExpressionIdentifierCount_R,nil,'IdentifierCount');
    RegisterPropertyHelper(@TniExtendedRegularExpressionIdentifiers_R,nil,'Identifiers');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_niExtendedRegularExpression(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TniSubRegularExpression) do
  RIRegister_TniExtendedRegularExpression(CL);
  RIRegister_TniSubRegularExpression(CL);
  RIRegister_TniTestExtendedRegularExpression(CL);
end;

 
 
{ TPSImport_niExtendedRegularExpression }
(*----------------------------------------------------------------------------*)
procedure TPSImport_niExtendedRegularExpression.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_niExtendedRegularExpression(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_niExtendedRegularExpression.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_niExtendedRegularExpression(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
