unit uPSI_JvValidators;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvValidators = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJvValidationSummary(CL: TPSPascalCompiler);
procedure SIRegister_TJvValidators(CL: TPSPascalCompiler);
procedure SIRegister_TJvControlsCompareValidator(CL: TPSPascalCompiler);
procedure SIRegister_TJvCustomValidator(CL: TPSPascalCompiler);
procedure SIRegister_TJvRegularExpressionValidator(CL: TPSPascalCompiler);
procedure SIRegister_TJvRangeValidator(CL: TPSPascalCompiler);
procedure SIRegister_TJvCompareValidator(CL: TPSPascalCompiler);
procedure SIRegister_TJvRequiredFieldValidator(CL: TPSPascalCompiler);
procedure SIRegister_TJvBaseValidator(CL: TPSPascalCompiler);
procedure SIRegister_IJvValidationSummary(CL: TPSPascalCompiler);
procedure SIRegister_IJvValidationProperty(CL: TPSPascalCompiler);
procedure SIRegister_JvValidators(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvValidationSummary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvValidators(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvControlsCompareValidator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvCustomValidator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvRegularExpressionValidator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvRangeValidator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvCompareValidator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvRequiredFieldValidator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvBaseValidator(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvValidators(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   DB
  //,JclUnitVersioning
  ,Windows
  ,Controls
  ,Forms
  ,JvComponentBase
  //,JvErrorIndicator
  ,JvValidators
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvValidators]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvValidationSummary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvComponent', 'TJvValidationSummary') do
  with CL.AddClassN(CL.FindClass('TJvComponent'),'TJvValidationSummary') do
  begin
    RegisterProperty('Summaries', 'TStrings', iptr);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnAddError', 'TNotifyEvent', iptrw);
    RegisterProperty('OnRemoveError', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvValidators(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvComponent', 'TJvValidators') do
  with CL.AddClassN(CL.FindClass('TJvComponent'),'TJvValidators') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Insert( AValidator : TJvBaseValidator)');
    RegisterMethod('Procedure Remove( AValidator : TJvBaseValidator)');
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)');
    RegisterMethod('Function Validate : Boolean;');
    RegisterMethod('Function Validate1( const GroupName : string) : Boolean;');
    RegisterProperty('Items', 'TJvBaseValidator Integer', iptr);
    SetDefaultPropery('Items');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('ValidationSummary', 'IJvValidationSummary', iptrw);
    RegisterProperty('ErrorIndicator', 'IJvErrorIndicator', iptrw);
    RegisterProperty('OnValidateFailed', 'TJvValidateFailEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvControlsCompareValidator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseValidator', 'TJvControlsCompareValidator') do
  with CL.AddClassN(CL.FindClass('TJvBaseValidator'),'TJvControlsCompareValidator') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('CompareToControl', 'TControl', iptrw);
    RegisterProperty('CompareToProperty', 'string', iptrw);
    RegisterProperty('Operator', 'TJvValidateCompareOperator', iptrw);
    RegisterProperty('AllowNull', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvCustomValidator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseValidator', 'TJvCustomValidator') do
  with CL.AddClassN(CL.FindClass('TJvBaseValidator'),'TJvCustomValidator') do
  begin
    RegisterProperty('OnValidate', 'TJvCustomValidateEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvRegularExpressionValidator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseValidator', 'TJvRegularExpressionValidator') do
  with CL.AddClassN(CL.FindClass('TJvBaseValidator'),'TJvRegularExpressionValidator') do
  begin
    RegisterProperty('ValidationExpression', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvRangeValidator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseValidator', 'TJvRangeValidator') do
  with CL.AddClassN(CL.FindClass('TJvBaseValidator'),'TJvRangeValidator') do
  begin
    RegisterProperty('MinimumValue', 'Variant', iptrw);
    RegisterProperty('MaximumValue', 'Variant', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvCompareValidator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseValidator', 'TJvCompareValidator') do
  with CL.AddClassN(CL.FindClass('TJvBaseValidator'),'TJvCompareValidator') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('ValueToCompare', 'Variant', iptrw);
    RegisterProperty('Operator', 'TJvValidateCompareOperator', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvRequiredFieldValidator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvBaseValidator', 'TJvRequiredFieldValidator') do
  with CL.AddClassN(CL.FindClass('TJvBaseValidator'),'TJvRequiredFieldValidator') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvBaseValidator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvComponent', 'TJvBaseValidator') do
  with CL.AddClassN(CL.FindClass('TJvComponent'),'TJvBaseValidator') do
  begin
    RegisterMethod('Function GetDataLink( AControl : TControl) : TDataLink');
    RegisterMethod('Function GetDataLink( AControl : TControl) : TObject');
    RegisterMethod('Procedure RegisterBaseValidator( const DisplayName : string; AValidatorClass : TJvBaseValidatorClass)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function GetParentComponent : TComponent');
    RegisterProperty('Value', 'Variant', iptr);
    RegisterProperty('Valid', 'Boolean', iptrw);
    RegisterProperty('ErrorControl', 'TControl', iptrw);
    RegisterProperty('ControlToValidate', 'TControl', iptrw);
    RegisterProperty('PropertyToValidate', 'string', iptrw);
    RegisterProperty('GroupName', 'string', iptrw);
    RegisterProperty('Enabled', 'Boolean', iptrw);
    RegisterProperty('ErrorMessage', 'string', iptrw);
    RegisterProperty('OnValidateFailed', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IJvValidationSummary(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IJvValidationSummary') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IJvValidationSummary, 'IJvValidationSummary') do
  begin
    RegisterMethod('Procedure BeginUpdate', cdRegister);
    RegisterMethod('Procedure EndUpdate', cdRegister);
    RegisterMethod('Procedure AddError( const ErrorMessage : string)', cdRegister);
    RegisterMethod('Procedure RemoveError( const ErrorMessage : string)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IJvValidationProperty(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IJvValidationProperty') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IJvValidationProperty, 'IJvValidationProperty') do
  begin
    RegisterMethod('Function GetValidationPropertyValue : Variant', cdRegister);
    RegisterMethod('Function GetValidationPropertyName : WideString', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvValidators(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EValidatorError');
  SIRegister_IJvValidationProperty(CL);
  SIRegister_IJvValidationSummary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvBaseValidator');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvValidators');
  //CL.AddTypeS('TJvBaseValidatorClass', 'class of TJvBaseValidator');
  SIRegister_TJvBaseValidator(CL);
  SIRegister_TJvRequiredFieldValidator(CL);
  CL.AddTypeS('TJvValidateCompareOperator', '( vcoLessThan, vcoLessOrEqual, vco'
   +'Equal, vcoGreaterOrEqual, vcoGreaterThan, vcoNotEqual )');
  SIRegister_TJvCompareValidator(CL);
  SIRegister_TJvRangeValidator(CL);
  SIRegister_TJvRegularExpressionValidator(CL);
  CL.AddTypeS('TJvCustomValidateEvent', 'Procedure ( Sender : TObject; ValueToV'
   +'alidate : Variant; var Valid : Boolean)');
  SIRegister_TJvCustomValidator(CL);
  SIRegister_TJvControlsCompareValidator(CL);
  CL.AddTypeS('TJvValidateFailEvent', 'Procedure ( Sender : TObject; BaseValida'
   +'tor : TJvBaseValidator; var Continue : Boolean)');
  SIRegister_TJvValidators(CL);
  SIRegister_TJvValidationSummary(CL);
 CL.AddConstantN('cValidatorsDBValue','String').SetString( '(DBValue)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvValidationSummaryOnRemoveError_W(Self: TJvValidationSummary; const T: TNotifyEvent);
begin Self.OnRemoveError := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidationSummaryOnRemoveError_R(Self: TJvValidationSummary; var T: TNotifyEvent);
begin T := Self.OnRemoveError; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidationSummaryOnAddError_W(Self: TJvValidationSummary; const T: TNotifyEvent);
begin Self.OnAddError := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidationSummaryOnAddError_R(Self: TJvValidationSummary; var T: TNotifyEvent);
begin T := Self.OnAddError; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidationSummaryOnChange_W(Self: TJvValidationSummary; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidationSummaryOnChange_R(Self: TJvValidationSummary; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidationSummarySummaries_R(Self: TJvValidationSummary; var T: TStrings);
begin T := Self.Summaries; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsOnValidateFailed_W(Self: TJvValidators; const T: TJvValidateFailEvent);
begin Self.OnValidateFailed := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsOnValidateFailed_R(Self: TJvValidators; var T: TJvValidateFailEvent);
begin T := Self.OnValidateFailed; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsErrorIndicator_W(Self: TJvValidators; const T: IJvErrorIndicator);
begin Self.ErrorIndicator := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsErrorIndicator_R(Self: TJvValidators; var T: IJvErrorIndicator);
begin T := Self.ErrorIndicator; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsValidationSummary_W(Self: TJvValidators; const T: IJvValidationSummary);
begin Self.ValidationSummary := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsValidationSummary_R(Self: TJvValidators; var T: IJvValidationSummary);
begin T := Self.ValidationSummary; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsCount_R(Self: TJvValidators; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TJvValidatorsItems_R(Self: TJvValidators; var T: TJvBaseValidator; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
Function TJvValidatorsValidate1_P(Self: TJvValidators;  const GroupName : string) : Boolean;
Begin Result := Self.Validate(GroupName); END;

(*----------------------------------------------------------------------------*)
Function TJvValidatorsValidate_P(Self: TJvValidators) : Boolean;
Begin Result := Self.Validate; END;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorAllowNull_W(Self: TJvControlsCompareValidator; const T: Boolean);
begin Self.AllowNull := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorAllowNull_R(Self: TJvControlsCompareValidator; var T: Boolean);
begin T := Self.AllowNull; end;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorOperator_W(Self: TJvControlsCompareValidator; const T: TJvValidateCompareOperator);
begin Self.Operator := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorOperator_R(Self: TJvControlsCompareValidator; var T: TJvValidateCompareOperator);
begin T := Self.Operator; end;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorCompareToProperty_W(Self: TJvControlsCompareValidator; const T: string);
begin Self.CompareToProperty := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorCompareToProperty_R(Self: TJvControlsCompareValidator; var T: string);
begin T := Self.CompareToProperty; end;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorCompareToControl_W(Self: TJvControlsCompareValidator; const T: TControl);
begin Self.CompareToControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvControlsCompareValidatorCompareToControl_R(Self: TJvControlsCompareValidator; var T: TControl);
begin T := Self.CompareToControl; end;

(*----------------------------------------------------------------------------*)
procedure TJvCustomValidatorOnValidate_W(Self: TJvCustomValidator; const T: TJvCustomValidateEvent);
begin Self.OnValidate := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvCustomValidatorOnValidate_R(Self: TJvCustomValidator; var T: TJvCustomValidateEvent);
begin T := Self.OnValidate; end;

(*----------------------------------------------------------------------------*)
procedure TJvRegularExpressionValidatorValidationExpression_W(Self: TJvRegularExpressionValidator; const T: string);
begin Self.ValidationExpression := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRegularExpressionValidatorValidationExpression_R(Self: TJvRegularExpressionValidator; var T: string);
begin T := Self.ValidationExpression; end;

(*----------------------------------------------------------------------------*)
procedure TJvRangeValidatorMaximumValue_W(Self: TJvRangeValidator; const T: Variant);
begin Self.MaximumValue := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRangeValidatorMaximumValue_R(Self: TJvRangeValidator; var T: Variant);
begin T := Self.MaximumValue; end;

(*----------------------------------------------------------------------------*)
procedure TJvRangeValidatorMinimumValue_W(Self: TJvRangeValidator; const T: Variant);
begin Self.MinimumValue := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvRangeValidatorMinimumValue_R(Self: TJvRangeValidator; var T: Variant);
begin T := Self.MinimumValue; end;

(*----------------------------------------------------------------------------*)
procedure TJvCompareValidatorOperator_W(Self: TJvCompareValidator; const T: TJvValidateCompareOperator);
begin Self.Operator := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvCompareValidatorOperator_R(Self: TJvCompareValidator; var T: TJvValidateCompareOperator);
begin T := Self.Operator; end;

(*----------------------------------------------------------------------------*)
procedure TJvCompareValidatorValueToCompare_W(Self: TJvCompareValidator; const T: Variant);
begin Self.ValueToCompare := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvCompareValidatorValueToCompare_R(Self: TJvCompareValidator; var T: Variant);
begin T := Self.ValueToCompare; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorOnValidateFailed_W(Self: TJvBaseValidator; const T: TNotifyEvent);
begin Self.OnValidateFailed := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorOnValidateFailed_R(Self: TJvBaseValidator; var T: TNotifyEvent);
begin T := Self.OnValidateFailed; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorErrorMessage_W(Self: TJvBaseValidator; const T: string);
begin Self.ErrorMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorErrorMessage_R(Self: TJvBaseValidator; var T: string);
begin T := Self.ErrorMessage; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorEnabled_W(Self: TJvBaseValidator; const T: Boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorEnabled_R(Self: TJvBaseValidator; var T: Boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorGroupName_W(Self: TJvBaseValidator; const T: string);
begin Self.GroupName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorGroupName_R(Self: TJvBaseValidator; var T: string);
begin T := Self.GroupName; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorPropertyToValidate_W(Self: TJvBaseValidator; const T: string);
begin Self.PropertyToValidate := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorPropertyToValidate_R(Self: TJvBaseValidator; var T: string);
begin T := Self.PropertyToValidate; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorControlToValidate_W(Self: TJvBaseValidator; const T: TControl);
begin Self.ControlToValidate := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorControlToValidate_R(Self: TJvBaseValidator; var T: TControl);
begin T := Self.ControlToValidate; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorErrorControl_W(Self: TJvBaseValidator; const T: TControl);
begin Self.ErrorControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorErrorControl_R(Self: TJvBaseValidator; var T: TControl);
begin T := Self.ErrorControl; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorValid_W(Self: TJvBaseValidator; const T: Boolean);
begin Self.Valid := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorValid_R(Self: TJvBaseValidator; var T: Boolean);
begin T := Self.Valid; end;

(*----------------------------------------------------------------------------*)
procedure TJvBaseValidatorValue_R(Self: TJvBaseValidator; var T: Variant);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvValidationSummary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvValidationSummary) do
  begin
    RegisterPropertyHelper(@TJvValidationSummarySummaries_R,nil,'Summaries');
    RegisterPropertyHelper(@TJvValidationSummaryOnChange_R,@TJvValidationSummaryOnChange_W,'OnChange');
    RegisterPropertyHelper(@TJvValidationSummaryOnAddError_R,@TJvValidationSummaryOnAddError_W,'OnAddError');
    RegisterPropertyHelper(@TJvValidationSummaryOnRemoveError_R,@TJvValidationSummaryOnRemoveError_W,'OnRemoveError');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvValidators(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvValidators) do
  begin
    RegisterConstructor(@TJvValidators.Create, 'Create');
    RegisterMethod(@TJvValidators.Insert, 'Insert');
    RegisterMethod(@TJvValidators.Remove, 'Remove');
    RegisterMethod(@TJvValidators.Exchange, 'Exchange');
    RegisterMethod(@TJvValidatorsValidate_P, 'Validate');
    RegisterMethod(@TJvValidatorsValidate1_P, 'Validate1');
    RegisterPropertyHelper(@TJvValidatorsItems_R,nil,'Items');
    RegisterPropertyHelper(@TJvValidatorsCount_R,nil,'Count');
    RegisterPropertyHelper(@TJvValidatorsValidationSummary_R,@TJvValidatorsValidationSummary_W,'ValidationSummary');
    RegisterPropertyHelper(@TJvValidatorsErrorIndicator_R,@TJvValidatorsErrorIndicator_W,'ErrorIndicator');
    RegisterPropertyHelper(@TJvValidatorsOnValidateFailed_R,@TJvValidatorsOnValidateFailed_W,'OnValidateFailed');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvControlsCompareValidator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvControlsCompareValidator) do
  begin
    RegisterConstructor(@TJvControlsCompareValidator.Create, 'Create');
    RegisterPropertyHelper(@TJvControlsCompareValidatorCompareToControl_R,@TJvControlsCompareValidatorCompareToControl_W,'CompareToControl');
    RegisterPropertyHelper(@TJvControlsCompareValidatorCompareToProperty_R,@TJvControlsCompareValidatorCompareToProperty_W,'CompareToProperty');
    RegisterPropertyHelper(@TJvControlsCompareValidatorOperator_R,@TJvControlsCompareValidatorOperator_W,'Operator');
    RegisterPropertyHelper(@TJvControlsCompareValidatorAllowNull_R,@TJvControlsCompareValidatorAllowNull_W,'AllowNull');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvCustomValidator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvCustomValidator) do
  begin
    RegisterPropertyHelper(@TJvCustomValidatorOnValidate_R,@TJvCustomValidatorOnValidate_W,'OnValidate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvRegularExpressionValidator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvRegularExpressionValidator) do
  begin
    RegisterPropertyHelper(@TJvRegularExpressionValidatorValidationExpression_R,@TJvRegularExpressionValidatorValidationExpression_W,'ValidationExpression');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvRangeValidator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvRangeValidator) do
  begin
    RegisterPropertyHelper(@TJvRangeValidatorMinimumValue_R,@TJvRangeValidatorMinimumValue_W,'MinimumValue');
    RegisterPropertyHelper(@TJvRangeValidatorMaximumValue_R,@TJvRangeValidatorMaximumValue_W,'MaximumValue');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvCompareValidator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvCompareValidator) do
  begin
    RegisterConstructor(@TJvCompareValidator.Create, 'Create');
    RegisterPropertyHelper(@TJvCompareValidatorValueToCompare_R,@TJvCompareValidatorValueToCompare_W,'ValueToCompare');
    RegisterPropertyHelper(@TJvCompareValidatorOperator_R,@TJvCompareValidatorOperator_W,'Operator');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvRequiredFieldValidator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvRequiredFieldValidator) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvBaseValidator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvBaseValidator) do
  begin
    RegisterVirtualMethod(@TJvBaseValidator.GetDataLink, 'GetDataLink');
    RegisterVirtualMethod(@TJvBaseValidator.GetDataLink, 'GetDataLink');
    RegisterMethod(@TJvBaseValidator.RegisterBaseValidator, 'RegisterBaseValidator');
    RegisterConstructor(@TJvBaseValidator.Create, 'Create');
    RegisterMethod(@TJvBaseValidator.GetParentComponent, 'GetParentComponent');
    RegisterPropertyHelper(@TJvBaseValidatorValue_R,nil,'Value');
    RegisterPropertyHelper(@TJvBaseValidatorValid_R,@TJvBaseValidatorValid_W,'Valid');
    RegisterPropertyHelper(@TJvBaseValidatorErrorControl_R,@TJvBaseValidatorErrorControl_W,'ErrorControl');
    RegisterPropertyHelper(@TJvBaseValidatorControlToValidate_R,@TJvBaseValidatorControlToValidate_W,'ControlToValidate');
    RegisterPropertyHelper(@TJvBaseValidatorPropertyToValidate_R,@TJvBaseValidatorPropertyToValidate_W,'PropertyToValidate');
    RegisterPropertyHelper(@TJvBaseValidatorGroupName_R,@TJvBaseValidatorGroupName_W,'GroupName');
    RegisterPropertyHelper(@TJvBaseValidatorEnabled_R,@TJvBaseValidatorEnabled_W,'Enabled');
    RegisterPropertyHelper(@TJvBaseValidatorErrorMessage_R,@TJvBaseValidatorErrorMessage_W,'ErrorMessage');
    RegisterPropertyHelper(@TJvBaseValidatorOnValidateFailed_R,@TJvBaseValidatorOnValidateFailed_W,'OnValidateFailed');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvValidators(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EValidatorError) do
  with CL.Add(TJvBaseValidator) do
  with CL.Add(TJvValidators) do
  RIRegister_TJvBaseValidator(CL);
  RIRegister_TJvRequiredFieldValidator(CL);
  RIRegister_TJvCompareValidator(CL);
  RIRegister_TJvRangeValidator(CL);
  RIRegister_TJvRegularExpressionValidator(CL);
  RIRegister_TJvCustomValidator(CL);
  RIRegister_TJvControlsCompareValidator(CL);
  RIRegister_TJvValidators(CL);
  RIRegister_TJvValidationSummary(CL);
end;

 
 
{ TPSImport_JvValidators }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvValidators.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvValidators(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvValidators.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
end;
(*----------------------------------------------------------------------------*)
 
 
end.
