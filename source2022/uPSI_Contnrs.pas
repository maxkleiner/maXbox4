unit uPSI_Contnrs;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
extension for V3.5 to manage own objects, no pointer allowed
extended with props. from TList  extended with TObject as pointer

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Contnrs = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIntegerBucketList(CL: TPSPascalCompiler);
procedure SIRegister_TObjectBucketList(CL: TPSPascalCompiler);
procedure SIRegister_TBucketList(CL: TPSPascalCompiler);
procedure SIRegister_TCustomBucketList(CL: TPSPascalCompiler);
procedure SIRegister_TObjectQueue(CL: TPSPascalCompiler);
procedure SIRegister_TQueue(CL: TPSPascalCompiler);
procedure SIRegister_TObjectStack(CL: TPSPascalCompiler);
procedure SIRegister_TStack(CL: TPSPascalCompiler);
procedure SIRegister_TOrderedList(CL: TPSPascalCompiler);
procedure SIRegister_TClassList(CL: TPSPascalCompiler);
procedure SIRegister_TComponentList(CL: TPSPascalCompiler);
procedure SIRegister_TObjectList(CL: TPSPascalCompiler);
procedure SIRegister_Contnrs(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Contnrs_Routines(S: TPSExec);
procedure RIRegister_TIntegerBucketList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectBucketList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBucketList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomBucketList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectQueue(CL: TPSRuntimeClassImporter);
procedure RIRegister_TQueue(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectStack(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStack(CL: TPSRuntimeClassImporter);
procedure RIRegister_TOrderedList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TClassList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TComponentList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectList(CL: TPSRuntimeClassImporter);
procedure RIRegister_Contnrs(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Contnrs;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Contnrs]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIntegerBucketList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TBucketList', 'TIntegerBucketList') do
  with CL.AddClassN(CL.FindClass('TBucketList'),'TIntegerBucketList') do begin
    RegisterMethod('Function Add( AItem, AData : Integer) : Integer');
    RegisterMethod('Function Remove( AItem : Integer) : Integer');
    RegisterProperty('Data', 'Integer Integer', iptrw);
    SetDefaultPropery('Data');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectBucketList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TBucketList', 'TObjectBucketList') do
  with CL.AddClassN(CL.FindClass('TBucketList'),'TObjectBucketList') do begin
    RegisterMethod('Function Add( AItem, AData : TObject) : TObject');
    RegisterMethod('Function Remove( AItem : TObject) : TObject');
    RegisterProperty('Data', 'TObject TObject', iptrw);
    SetDefaultPropery('Data');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBucketList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomBucketList', 'TBucketList') do
  with CL.AddClassN(CL.FindClass('TCustomBucketList'),'TBucketList') do begin
    RegisterMethod('Constructor Create( ABuckets : TBucketListSizes)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomBucketList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TCustomBucketList') do
  with CL.AddClassN(CL.FindClass('TObject'),'TCustomBucketList') do begin
    RegisterMethod('Procedure Clear');
    {RegisterMethod('Function Add( AItem, AData : Pointer) : Pointer');
    RegisterMethod('Function Remove( AItem : Pointer) : Pointer');
    RegisterMethod('Function ForEach( AProc : TBucketProc; AInfo : Pointer) : Boolean;');
    RegisterMethod('Function ForEach1( AEvent : TBucketEvent) : Boolean;');
    RegisterMethod('Procedure Assign( AList : TCustomBucketList)');
    RegisterMethod('Function Exists( AItem : Pointer) : Boolean');
    RegisterMethod('Function Find( AItem : Pointer; out AData : Pointer) : Boolean');}

    RegisterMethod('Function Add( AItem, AData : TObject) : TObject');
    RegisterMethod('Function Remove( AItem : TObject) : TObject');
    RegisterMethod('Function ForEach( AProc : TBucketProc; AInfo : TObject) : Boolean;');
    RegisterMethod('Function ForEach1( AEvent : TBucketEvent) : Boolean;');
    RegisterMethod('Procedure Assign( AList : TCustomBucketList)');
    RegisterMethod('Function Exists( AItem : TObject) : Boolean');
    RegisterMethod('Function Find( AItem : TObject; out AData : TObject) : Boolean');

    //RegisterProperty('Data', 'Pointer Pointer', iptrw);
    //SetDefaultPropery('Data');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectQueue(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TQueue', 'TObjectQueue') do
  with CL.AddClassN(CL.FindClass('TQueue'),'TObjectQueue') do begin
    RegisterMethod('Function Push( AObject : TObject) : TObject');
    RegisterMethod('Function Pop : TObject');
    RegisterMethod('Function Peek : TObject');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TQueue(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOrderedList', 'TQueue') do
  with CL.AddClassN(CL.FindClass('TOrderedList'),'TQueue') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectStack(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStack', 'TObjectStack') do
  with CL.AddClassN(CL.FindClass('TStack'),'TObjectStack') do begin
    RegisterMethod('Function Push( AObject : TObject) : TObject');
    RegisterMethod('Function Pop : TObject');
    RegisterMethod('Function Peek : TObject');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStack(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOrderedList', 'TStack') do
  with CL.AddClassN(CL.FindClass('TOrderedList'),'TStack') do begin
     RegisterMethod('procedure PushItem(AItem: TObject)');  //pointer

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TOrderedList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TOrderedList') do
  with CL.AddClassN(CL.FindClass('TObject'),'TOrderedList') do begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function AtLeast( ACount : Integer) : Boolean');
    //RegisterMethod('Function Push( AItem : Pointer) : Pointer');
    //RegisterMethod('Function Pop : Pointer');
    //RegisterMethod('Function Peek : Pointer');
    RegisterMethod('Function Push( AItem : TObject) : TObject');
    RegisterMethod('Function Pop : TObject');
    RegisterMethod('Function Peek : TObject');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TClassList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TClassList') do
  with CL.AddClassN(CL.FindClass('TList'),'TClassList') do begin
    RegisterMethod('Constructor Create;');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Function Add( AClass : TClass) : Integer');
    RegisterMethod('Function Extract( Item : TClass) : TClass');
    RegisterMethod('Function Remove( AClass : TClass) : Integer');
    RegisterMethod('Function IndexOf( AClass : TClass) : Integer');
    RegisterMethod('Function First : TClass');
    RegisterMethod('Function Last : TClass');
    RegisterMethod('Procedure Insert( Index : Integer; AClass : TClass)');
    RegisterPublishedProperties;
     RegisterProperty('Items', 'TClass Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TComponentList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObjectList', 'TComponentList') do
  with CL.AddClassN(CL.FindClass('TObjectList'),'TComponentList') do begin
    RegisterPublishedProperties;
    RegisterMethod('Function Add( AComponent : TComponent) : Integer');
    RegisterMethod('Function Extract( Item : TComponent) : TComponent');
    RegisterMethod('Function Remove( AComponent : TComponent) : Integer');
    RegisterMethod('Function IndexOf( AComponent : TComponent) : Integer');
    RegisterMethod('Function First : TComponent');
    RegisterMethod('Function Last : TComponent');
    RegisterMethod('Procedure Insert( Index : Integer; AComponent : TComponent)');
    RegisterProperty('Items', 'TComponent Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TObjectList') do
  with CL.AddClassN(CL.FindClass('TList'),'TObjectList') do begin
    RegisterMethod('Constructor Create;');
    RegisterMethod('Constructor Create1(AOwnsObjects : Boolean);');
    RegisterMethod('Procedure Free;');

    RegisterMethod('Function Add( AObject : TObject) : Integer');
    RegisterMethod('Function Extract( Item : TObject) : TObject');
    RegisterMethod('Function Remove( AObject : TObject) : Integer');
    RegisterMethod('Function IndexOf( AObject : TObject) : Integer');
    RegisterMethod('Function FindInstanceOf( AClass : TClass; AExact : Boolean; AStartAt : Integer) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; AObject : TObject)');
    RegisterMethod('Function First : TObject');
    RegisterMethod('Function Last : TObject');
    //property Count: Integer read FCount write SetCount;

    RegisterPublishedProperties;
    RegisterProperty('Count', 'Integer', iptrw);

    RegisterProperty('OwnsObjects', 'Boolean', iptrw);
    RegisterProperty('Items', 'TObject Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

  //TClass = class of TObject;


(*----------------------------------------------------------------------------*)
procedure SIRegister_Contnrs(CL: TPSPascalCompiler);
begin
  SIRegister_TObjectList(CL);
  SIRegister_TComponentList(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TClass');
  SIRegister_TClassList(CL);
  SIRegister_TOrderedList(CL);
  SIRegister_TStack(CL);
  SIRegister_TObjectStack(CL);
  SIRegister_TQueue(CL);
  SIRegister_TObjectQueue(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomBucketList');

  CL.AddTypeS('TBucketItem', 'record Item : integer; Data : integer; end');
  CL.AddTypeS('TBucketItemArray', 'array of TBucketItem');
  CL.AddTypeS('TBucket', 'record Count : Integer; Items : TBucketItemArray; end');
  CL.AddTypeS('TBucketArray', 'array of TBucket');
  //CL.AddTypeS('TBucketEvent', 'Procedure ( AItem, AData : Pointer; out AContinu'
  // +'e : Boolean)');
  SIRegister_TCustomBucketList(CL);
  CL.AddTypeS('TBucketListSizes', '( bl2, bl4, bl8, bl16, bl32, bl64, bl128, bl256 )');
  SIRegister_TBucketList(CL);
  SIRegister_TObjectBucketList(CL);
  SIRegister_TIntegerBucketList(CL);
 CL.AddDelphiFunction('Procedure RaiseListError( const ATemplate : string; const AData : array of const)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIntegerBucketListData_W(Self: TIntegerBucketList; const T: Integer; const t1: Integer);
begin Self.Data[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TIntegerBucketListData_R(Self: TIntegerBucketList; var T: Integer; const t1: Integer);
begin T := Self.Data[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TObjectBucketListData_W(Self: TObjectBucketList; const T: TObject; const t1: TObject);
begin Self.Data[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectBucketListData_R(Self: TObjectBucketList; var T: TObject; const t1: TObject);
begin T := Self.Data[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBucketListData_W(Self: TCustomBucketList; const T: TObject; const t1: TObject);
begin Self.Data[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomBucketListData_R(Self: TCustomBucketList; var T: TObject; const t1: TObject);
begin T := Self.Data[t1]; end;

(*----------------------------------------------------------------------------*)
Function TCustomBucketListForEach1_P(Self: TCustomBucketList;  AEvent : TBucketEvent) : Boolean;
Begin Result := Self.ForEach(AEvent); END;

(*----------------------------------------------------------------------------*)
Function TCustomBucketListForEach_P(Self: TCustomBucketList;  AProc : TBucketProc; AInfo : TObject) : Boolean;
Begin Result := Self.ForEach(AProc, AInfo); END;

(*----------------------------------------------------------------------------*)
procedure TClassListItems_W(Self: TClassList; const T: TClass; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TClassListItems_R(Self: TClassList; var T: TClass; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TComponentListItems_W(Self: TComponentList; const T: TComponent; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TComponentListItems_R(Self: TComponentList; var T: TComponent; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TObjectListItems_W(Self: TObjectList; const T: TObject; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectListItems_R(Self: TObjectList; var T: TObject; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TObjectListOwnsObjects_W(Self: TObjectList; const T: Boolean);
begin Self.OwnsObjects := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectListOwnsObjects_R(Self: TObjectList; var T: Boolean);
begin T := Self.OwnsObjects; end;

(*--------------------------own-count----------------------------------------------*)
procedure TObjectListCount_W(Self: TObjectList; const T: Integer);
begin Self.Count:= T; end;

procedure TObjectListCount_R(Self: TObjectList; var T: Integer);
begin T:= Self.Count; end;


(*----------------------------------------------------------------------------*)
Function TObjectListCreate1_P(Self: TClass; CreateNewInstance: Boolean;  AOwnsObjects : Boolean):TObject;
Begin Result := TObjectList.Create(AOwnsObjects); END;

(*----------------------------------------------------------------------------*)
Function TObjectListCreate_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TObjectList.Create; END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Contnrs_Routines(S: TPSExec);
begin
  S.RegisterDelphiFunction(@RaiseListError, 'RaiseListError', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIntegerBucketList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIntegerBucketList) do begin
    RegisterMethod(@TIntegerBucketList.Add, 'Add');
    RegisterMethod(@TIntegerBucketList.Remove, 'Remove');
    RegisterPropertyHelper(@TIntegerBucketListData_R,@TIntegerBucketListData_W,'Data');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectBucketList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectBucketList) do begin
    RegisterMethod(@TObjectBucketList.Add, 'Add');
    RegisterMethod(@TObjectBucketList.Remove, 'Remove');
    RegisterPropertyHelper(@TObjectBucketListData_R,@TObjectBucketListData_W,'Data');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBucketList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBucketList) do begin
    RegisterConstructor(@TBucketList.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomBucketList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomBucketList) do begin
    RegisterMethod(@TCustomBucketList.Clear, 'Clear');
    RegisterMethod(@TCustomBucketList.Add, 'Add');
    RegisterMethod(@TCustomBucketList.Remove, 'Remove');
    RegisterMethod(@TCustomBucketListForEach_P, 'ForEach');
    RegisterMethod(@TCustomBucketListForEach1_P, 'ForEach1');
    RegisterMethod(@TCustomBucketList.Assign, 'Assign');
    RegisterMethod(@TCustomBucketList.Exists, 'Exists');
    RegisterMethod(@TCustomBucketList.Find, 'Find');
    RegisterPropertyHelper(@TCustomBucketListData_R,@TCustomBucketListData_W,'Data');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectQueue(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectQueue) do begin
    RegisterMethod(@TObjectQueue.Push, 'Push');
    RegisterMethod(@TObjectQueue.Pop, 'Pop');
    RegisterMethod(@TObjectQueue.Peek, 'Peek');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TQueue(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TQueue) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectStack(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectStack) do begin
    RegisterMethod(@TObjectStack.Push, 'Push');
    RegisterMethod(@TObjectStack.Pop, 'Pop');
    RegisterMethod(@TObjectStack.Peek, 'Peek');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStack(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStack) do begin
    //RegisterMethod(@TStack.PushItem, 'PushItem');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TOrderedList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TOrderedList) do begin
    RegisterConstructor(@TOrderedList.Create, 'Create');
    RegisterMethod(@TOrderedList.Destroy, 'Free');
    RegisterMethod(@TOrderedList.Count, 'Count');
    RegisterMethod(@TOrderedList.AtLeast, 'AtLeast');
    RegisterMethod(@TOrderedList.Push, 'Push');
    RegisterMethod(@TOrderedList.Pop, 'Pop');
    RegisterMethod(@TOrderedList.Peek, 'Peek');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TClassList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TClassList) do begin
    RegisterConstructor(@TClassList.Create, 'Create');
    //RegisterConstructor(@TObjectListCreate1_P, 'Create1');
    RegisterMethod(@TClassList.Destroy, 'Free');
    RegisterMethod(@TClassList.Add, 'Add');
    RegisterMethod(@TClassList.Extract, 'Extract');
    RegisterMethod(@TClassList.Remove, 'Remove');
    RegisterMethod(@TClassList.IndexOf, 'IndexOf');
    RegisterMethod(@TClassList.First, 'First');
    RegisterMethod(@TClassList.Last, 'Last');
    RegisterMethod(@TClassList.Insert, 'Insert');
    RegisterPropertyHelper(@TClassListItems_R,@TClassListItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TComponentList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TComponentList) do begin
    RegisterMethod(@TComponentList.Add, 'Add');
    RegisterMethod(@TComponentList.Extract, 'Extract');
    RegisterMethod(@TComponentList.Remove, 'Remove');
    RegisterMethod(@TComponentList.IndexOf, 'IndexOf');
    RegisterMethod(@TComponentList.First, 'First');
    RegisterMethod(@TComponentList.Last, 'Last');
    RegisterMethod(@TComponentList.Insert, 'Insert');
    RegisterPropertyHelper(@TComponentListItems_R,@TComponentListItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectList) do begin
    RegisterConstructor(@TObjectListCreate_P, 'Create');
    RegisterConstructor(@TObjectListCreate1_P, 'Create1');
    RegisterMethod(@TObjectList.Destroy, 'Free');

   //RegisterPublishedProperties;
    RegisterMethod(@TObjectList.Add, 'Add');
    RegisterMethod(@TObjectList.Extract, 'Extract');
    RegisterMethod(@TObjectList.Remove, 'Remove');
    RegisterMethod(@TObjectList.IndexOf, 'IndexOf');
    RegisterMethod(@TObjectList.FindInstanceOf, 'FindInstanceOf');
    RegisterMethod(@TObjectList.Insert, 'Insert');
    RegisterMethod(@TObjectList.First, 'First');
    RegisterMethod(@TObjectList.Last, 'Last');
    RegisterPropertyHelper(@TObjectListCount_R,@TObjectListCount_W,'Count');
    RegisterPropertyHelper(@TObjectListOwnsObjects_R,@TObjectListOwnsObjects_W,'OwnsObjects');
    RegisterPropertyHelper(@TObjectListItems_R,@TObjectListItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Contnrs(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TObjectList(CL);
  RIRegister_TComponentList(CL);
  RIRegister_TClassList(CL);
  RIRegister_TOrderedList(CL);
  RIRegister_TStack(CL);
  RIRegister_TObjectStack(CL);
  RIRegister_TQueue(CL);
  RIRegister_TObjectQueue(CL);
  with CL.Add(TCustomBucketList) do
  RIRegister_TCustomBucketList(CL);
  RIRegister_TBucketList(CL);
  RIRegister_TObjectBucketList(CL);
  RIRegister_TIntegerBucketList(CL);
end;

 
 
{ TPSImport_Contnrs }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Contnrs.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Contnrs(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Contnrs.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Contnrs(ri);
  RIRegister_Contnrs_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
