unit uPSI_umodels;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_umodels = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_umodels(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_umodels_Routines(S: TPSExec);

procedure Register;

implementation


uses
   utypes
 // ,uErrors
 //,upolynom
  ,ulinfit
 //,umulfit
  ,usvdfit
 // ,upolfit
  ,unlfit
 //,ufracfit
  {,uexpfit
  ,uiexpfit
  ,uexlfit
  ,ulogifit
  ,upowfit
  ,umichfit
  ,umintfit
  ,uhillfit
  ,upkfit
  ,ugamfit
  ,uevalfit
  ,uregtest   }
  ,umodels
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_umodels]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_umodels(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TRegType', '( REG_LIN, REG_MULT, REG_POL, REG_FRAC, REG_EXPO, RE'
   +'G_IEXPO, REG_EXLIN, REG_LOGIS, REG_POWER, REG_GAMMA, REG_MICH, REG_MINT, R'
   +'EG_HILL, REG_PK, REG_EVAL )');
  CL.AddTypeS('TModel', 'record end');
 CL.AddDelphiFunction('Function FirstParam( Model : TModel) : Integer');
 CL.AddDelphiFunction('Function LastParam( Model : TModel) : Integer');
 CL.AddDelphiFunction('Function FuncName( Model : TModel) : String');
 CL.AddDelphiFunction('Function ParamName( Model : TModel; I : Integer) : String');
 CL.AddDelphiFunction('Function RegFunc( Model : TModel; X : Float; B : TVector) : Float');
 CL.AddDelphiFunction('Procedure FitModel( Model : TModel; X, Y, Ycalc : TVector; U : TMatrix; Lb, Ub : Integer; MaxIter : Integer; Tol, SVDTol : Float; B : TVector; V : TMatrix; var Test : TRegTest)');
 CL.AddDelphiFunction('Procedure WFitModel( Model : TModel; X, Y, S : TVector; Ycalc : TVector; U : TMatrix; Lb, Ub : Integer; MaxIter : Integer; Tol, SVDTol : Float; B : TVector; V : TMatrix; var Test : TRegTest)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_umodels_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@FirstParam, 'FirstParam', cdRegister);
 S.RegisterDelphiFunction(@LastParam, 'LastParam', cdRegister);
 S.RegisterDelphiFunction(@FuncName, 'FuncName', cdRegister);
 S.RegisterDelphiFunction(@ParamName, 'ParamName', cdRegister);
 S.RegisterDelphiFunction(@RegFunc, 'RegFunc', cdRegister);
 S.RegisterDelphiFunction(@FitModel, 'FitModel', cdRegister);
 S.RegisterDelphiFunction(@WFitModel, 'WFitModel', cdRegister);
end;

 
 
{ TPSImport_umodels }
(*----------------------------------------------------------------------------*)
procedure TPSImport_umodels.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_umodels(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_umodels.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_umodels_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
