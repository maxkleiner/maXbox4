unit uPSI_SqlExpr;
{
This file has been generated by UnitParser v0.7, written by M. Knight
extended by max to V3.2 in TWideStrings and missing TCustomConnection = class(TComponent)
commandtype in 3.7}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SqlExpr = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TSQLTable(CL: TPSPascalCompiler);
procedure SIRegister_TSQLStoredProc(CL: TPSPascalCompiler);
procedure SIRegister_TSQLQuery(CL: TPSPascalCompiler);
procedure SIRegister_TSQLDataSet(CL: TPSPascalCompiler);
procedure SIRegister_TCustomSQLDataSet(CL: TPSPascalCompiler);
procedure SIRegister_TFLDDesc(CL: TPSPascalCompiler);
procedure SIRegister_TSQLDataLink(CL: TPSPascalCompiler);
procedure SIRegister_TSQLConnection(CL: TPSPascalCompiler);
procedure SIRegister_TTransactionItem(CL: TPSPascalCompiler);
procedure SIRegister_TSQLMonitor(CL: TPSPascalCompiler);
procedure SIRegister_TSQLBlobStream(CL: TPSPascalCompiler);
procedure SIRegister_SPParamDesc(CL: TPSPascalCompiler);
procedure SIRegister_SqlExpr(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_SqlExpr_Routines(S: TPSExec);
procedure RIRegister_TSQLTable(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLStoredProc(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLQuery(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLDataSet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomSQLDataSet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFLDDesc(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLDataLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TTransactionItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLMonitor(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLBlobStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_SPParamDesc(CL: TPSRuntimeClassImporter);
procedure RIRegister_SqlExpr(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
  //Windows
  //,Variants
  DB
  ,DBCommon
  ,DBCommonTypes
  //,DBByteBuffer
  ,DBXCommon
  //,DbxDefaultDrivers
  //,SqlTimSt
  ,DBPlatform
  //,Contnrs
  ,WideStrings
  ,SqlExpr
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SqlExpr]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLTable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLTable') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLTable') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure DeleteRecords');
    RegisterMethod('Procedure GetIndexNames( List : TWideStrings)');
    RegisterMethod('Procedure PrepareStatement');
    RegisterProperty('IndexFields', 'TField Integer', iptrw);
    RegisterProperty('IndexFieldCount', 'Integer', iptr);
    RegisterProperty('IndexFieldNames', 'WideString', iptrw);
    RegisterProperty('IndexName', 'WideString', iptrw);
    RegisterProperty('MasterFields', 'WideString', iptrw);
    RegisterProperty('MasterSource', 'TDataSource', iptrw);
    RegisterProperty('TableName', 'WideString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLStoredProc(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLStoredProc') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLStoredProc') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function ExecProc : Integer');
    RegisterMethod('Function NextRecordSet : TCustomSQLDataSet');
    RegisterMethod('Procedure PrepareStatement');
    RegisterProperty('PackageName', 'WideString', iptrw);
    RegisterProperty('StoredProcName', 'WideString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLQuery(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLQuery') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLQuery') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Function ExecSQL( ExecDirect : Boolean) : Integer');
    RegisterMethod('Procedure PrepareStatement');
    RegisterProperty('Text', 'string', iptr);
    RegisterProperty('SQL', 'TWideStrings', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLDataSet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLDataSet') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLDataSet') do begin
    RegisterPublishedProperties;
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function ExecSQL( ExecDirect : Boolean) : Integer');
    RegisterProperty('CommandType', 'TSQLCommandType', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomSQLDataSet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWideDataSet', 'TCustomSQLDataSet') do
  with CL.AddClassN(CL.FindClass('TWideDataSet'),'TCustomSQLDataSet') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    //RegisterMethod('Constructor Open( AOwner : TComponent)');
    RegisterMethod('Procedure Free;');
    RegisterProperty('CommandText', 'WideString', iptrw);
    RegisterMethod('Procedure GetCommandNames( List : TWideStrings)');
    RegisterMethod('Function GetKeyFieldNames( List : TStrings) : Integer;');
    RegisterMethod('Function GetKeyFieldNames1( List : TWideStrings) : Integer;');
    RegisterMethod('Function GetQuoteChar : WideString');
    RegisterMethod('Function ParamByName( const Value : string) : TParam');
    RegisterMethod('Procedure PrepareStatement');
    RegisterProperty('IndexDefs', 'TIndexDefs', iptrw);
    RegisterMethod('Procedure SetSchemaInfo( SchemaType : TSchemaType; SchemaObjectName, SchemaPattern : WideString; PackageName : WideString)');
    RegisterProperty('Prepared', 'Boolean', iptrw);
    RegisterProperty('DesignerData', 'string', iptrw);
    RegisterProperty('RecordCount', 'Integer', iptr);
    RegisterProperty('SQLConnection', 'TSQLConnection', iptrw);
    RegisterProperty('TransactionLevel', 'SmallInt', iptrw);
    RegisterProperty('ParseSelectSql', 'TParseSqlEvent', iptrw);
    RegisterProperty('ParseDeleteSql', 'TParseSqlEvent', iptrw);
    RegisterProperty('ParseUpdateSql', 'TParseSqlEvent', iptrw);
    RegisterProperty('ParseInsertSql', 'TParseInsertSqlEvent', iptrw);
    RegisterProperty('SchemaName', 'string', iptrw);
    RegisterProperty('GetMetadata', 'Boolean', iptrw);
    RegisterProperty('NumericMapping', 'Boolean', iptrw);
    RegisterProperty('CommandType', 'TSQLCommandType', iptrw);

  //from dataset cause TWideSet

  RegisterMethod('Function ACTIVEBUFFER : PCHAR');
  RegisterMethod('Procedure APPEND');
  RegisterMethod('Procedure APPENDRECORD( const VALUES : array of const)');
//  RegisterMethod('Function BOOKMARKVALID( BOOKMARK : TBOOKMARK) : BOOLEAN');
  RegisterMethod('Procedure CANCEL');
  RegisterMethod('Procedure CHECKBROWSEMODE');
  RegisterMethod('Procedure CLEARFIELDS');
  RegisterMethod('Procedure CLOSE');
  RegisterMethod('Function CONTROLSDISABLED : BOOLEAN');
//  RegisterMethod('Function COMPAREBOOKMARKS( BOOKMARK1, BOOKMARK2 : TBOOKMARK) : INTEGER');
  RegisterMethod('Function CREATEBLOBSTREAM( FIELD : TFIELD; MODE : TBLOBSTREAMMODE) : TSTREAM');
  RegisterMethod('Procedure CURSORPOSCHANGED');
  RegisterMethod('Procedure DELETE');
  RegisterMethod('Procedure DISABLECONTROLS');
  RegisterMethod('Procedure EDIT');
  RegisterMethod('Procedure ENABLECONTROLS');
{$IFDEF DELPHI2006UP}
  RegisterMethod('Function FIELDBYNAME( const FIELDNAME : WIDESTRING) : TFIELD');
  RegisterMethod('Function FINDFIELD( const FIELDNAME : WideString) : TFIELD');
{$ELSE}
  RegisterMethod('Function FIELDBYNAME( const FIELDNAME : STRING) : TFIELD');
  RegisterMethod('Function FINDFIELD( const FIELDNAME : STRING) : TFIELD');
{$ENDIF}
  RegisterMethod('Function FINDFIRST : BOOLEAN');
  RegisterMethod('Function FINDLAST : BOOLEAN');
  RegisterMethod('Function FINDNEXT : BOOLEAN');
  RegisterMethod('Function FINDPRIOR : BOOLEAN');
  RegisterMethod('Procedure FIRST');
//  RegisterMethod('Procedure FREEBOOKMARK( BOOKMARK : TBOOKMARK)');
//  RegisterMethod('Function GETBOOKMARK : TBOOKMARK');
  RegisterMethod('Function GETCURRENTRECORD( BUFFER : PCHAR) : BOOLEAN');
//  RegisterMethod('Procedure GETDETAILDATASETS( LIST : TLIST)');
//  RegisterMethod('Procedure GETFIELDLIST( LIST : TLIST; const FIELDNAMES : STRING)');
//  RegisterMethod('Procedure GETDETAILLINKFIELDS( MASTERFIELDS, DETAILFIELDS : TLIST)');
//  RegisterMethod('Function GETBLOBFIELDDATA( FIELDNO : INTEGER; var BUFFER : TBLOBBYTEDATA) : INTEGER');
  RegisterMethod('Procedure GETFIELDNAMES( LIST : TSTRINGS)');
//  RegisterMethod('Procedure GOTOBOOKMARK( BOOKMARK : TBOOKMARK)');
  RegisterMethod('Procedure INSERT');
  RegisterMethod('Procedure INSERTRECORD( const VALUES : array of const)');
  RegisterMethod('Function ISEMPTY : BOOLEAN');
  RegisterMethod('Function ISLINKEDTO( DATASOURCE : TDATASOURCE) : BOOLEAN');
  RegisterMethod('Function ISSEQUENCED : BOOLEAN');
  RegisterMethod('Procedure LAST');
  RegisterMethod('Function LOCATE( const KEYFIELDS : String; const KEYVALUES : VARIANT; OPTIONS : TLOCATEOPTIONS) : BOOLEAN');
  RegisterMethod('Function LOOKUP( const KEYFIELDS : String; const KEYVALUES : VARIANT; const RESULTFIELDS : String) : VARIANT');
  RegisterMethod('Function MOVEBY( DISTANCE : INTEGER) : INTEGER');
  RegisterMethod('Procedure NEXT');
  RegisterMethod('Procedure OPEN');
  RegisterMethod('Procedure POST');
  RegisterMethod('Procedure PRIOR');
  RegisterMethod('Procedure REFRESH');
//  RegisterMethod('Procedure RESYNC( MODE : TRESYNCMODE)');
  RegisterMethod('Procedure SETFIELDS( const VALUES : array of const)');
  RegisterMethod('Function TRANSLATE( SRC, DEST : PCHAR; TOOEM : BOOLEAN) : INTEGER');
  RegisterMethod('Procedure UPDATECURSORPOS');
  RegisterMethod('Procedure UPDATERECORD');
  RegisterMethod('Function UPDATESTATUS : TUPDATESTATUS');
  RegisterProperty('AGGFIELDS', 'TFIELDS', iptr);
  RegisterProperty('BOF', 'BOOLEAN', iptr);
//  RegisterProperty('BOOKMARK', 'TBOOKMARKSTR', iptrw);
  RegisterProperty('CANMODIFY', 'BOOLEAN', iptr);
  RegisterProperty('DATASETFIELD', 'TDATASETFIELD', iptrw);
  RegisterProperty('DATASOURCE', 'TDATASOURCE', iptr);
  RegisterProperty('DEFAULTFIELDS', 'BOOLEAN', iptr);
  RegisterProperty('DESIGNER', 'TDATASETDESIGNER', iptr);
  RegisterProperty('EOF', 'BOOLEAN', iptr);
  RegisterProperty('BLOCKREADSIZE', 'INTEGER', iptrw);
  RegisterProperty('FIELDCOUNT', 'INTEGER', iptr);
  RegisterProperty('FIELDDEFS', 'TFIELDDEFS', iptrw);
  RegisterProperty('FIELDDEFLIST', 'TFIELDDEFLIST', iptr);
  RegisterProperty('FIELDS', 'TFIELDS', iptr);
  RegisterProperty('FIELDLIST', 'TFIELDLIST', iptr);
  RegisterProperty('FIELDVALUES', 'VARIANT String', iptrw);
  RegisterProperty('FOUND', 'BOOLEAN', iptr);
{$IFDEF DELPHI6UP}
  RegisterProperty('ISUNIDIRECTIONAL', 'BOOLEAN', iptr);
{$ENDIF}
  RegisterProperty('MODIFIED', 'BOOLEAN', iptr);
  RegisterProperty('OBJECTVIEW', 'BOOLEAN', iptrw);
  RegisterProperty('RECORDCOUNT', 'INTEGER', iptr);
  RegisterProperty('RECNO', 'INTEGER', iptrw);
  RegisterProperty('RECORDSIZE', 'WORD', iptr);
  RegisterProperty('SPARSEARRAYS', 'BOOLEAN', iptrw);
  RegisterProperty('STATE', 'TDATASETSTATE', iptr);
  RegisterProperty('FILTER', 'String', iptrw);
  RegisterProperty('FILTERED', 'BOOLEAN', iptrw);
  RegisterProperty('FILTEROPTIONS', 'TFILTEROPTIONS', iptrw);
  RegisterProperty('ACTIVE', 'BOOLEAN', iptrw);
  RegisterProperty('AUTOCALCFIELDS', 'BOOLEAN', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFLDDesc(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TFLDDesc') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TFLDDesc') do begin
    RegisterProperty('FFldNum', 'Word', iptrw);
    RegisterProperty('FName', 'WideString', iptrw);
    RegisterProperty('FFldType', 'Word', iptrw);
    RegisterProperty('FSubType', 'Word', iptrw);
    RegisterProperty('FUnits1', 'SmallInt', iptrw);
    RegisterProperty('FUnits2', 'SmallInt', iptrw);
    RegisterProperty('FOffset', 'Word', iptrw);
    RegisterProperty('FLen', 'LongWord', iptrw);
    RegisterProperty('FNullOffset', 'Word', iptrw);
    RegisterProperty('FFLDVchk', 'FLDVchk', iptrw);
    RegisterProperty('FFLDRights', 'FLDRights', iptrw);
    RegisterProperty('FCalcField', 'WordBool', iptrw);
    RegisterProperty('iFldNum', 'Word', iptrw);
    RegisterProperty('szName', 'WideString', iptrw);
    RegisterProperty('iFldType', 'Word', iptrw);
    RegisterProperty('iSubType', 'Word', iptrw);
    RegisterProperty('iUnits1', 'SmallInt', iptrw);
    RegisterProperty('iUnits2', 'SmallInt', iptrw);
    RegisterProperty('iOffset', 'Word', iptrw);
    RegisterProperty('iLen', 'LongWord', iptrw);
    RegisterProperty('iNullOffset', 'Word', iptrw);
    RegisterProperty('efldvVchk', 'FLDVchk', iptrw);
    RegisterProperty('efldrRights', 'FLDRights', iptrw);
    RegisterProperty('bCalcField', 'WordBool', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLDataLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDetailDataLink', 'TSQLDataLink') do
  with CL.AddClassN(CL.FindClass('TDetailDataLink'),'TSQLDataLink') do begin
    RegisterMethod('Constructor Create( ADataSet : TCustomSQLDataSet)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomConnection', 'TSQLConnection') do
  with CL.AddClassN(CL.FindClass('TCustomConnection'),'TSQLConnection') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function CloneConnection : TSQLConnection');
    RegisterMethod('Procedure CloseDataSets');
   // procedure Open; overload;  from TCustomConnection
   // procedure Close;

    RegisterMethod('Procedure Commit( TransDesc : TTransactionDesc)');
    RegisterMethod('Procedure CommitFreeAndNil( var Transaction : TDBXTransaction)');
    RegisterMethod('Function Execute( const SQL : WideString; Params : TParams; ResultSet : TPSResult) : Integer');
    RegisterMethod('Function ExecuteDirect( const SQL : WideString) : Integer');
    RegisterMethod('Procedure GetFieldNames( const TableName : string; List : TStrings);');
    RegisterMethod('Procedure GetFieldNames1( const TableName : string; SchemaName : string; List : TStrings);');
    RegisterMethod('Procedure GetFieldNames2( const TableName : WideString; SchemaName : WideString; List : TWideStrings);');
    RegisterMethod('Procedure GetFieldNames3( const TableName : WideString; List : TWideStrings);');
    RegisterMethod('Procedure GetIndexNames4( const TableName : string; List : TStrings);');
    RegisterMethod('Procedure GetIndexNames( const TableName, SchemaName : string; List : TStrings);');
    RegisterMethod('Procedure GetIndexNames1( const TableName : WideString; List : TWideStrings);');
    RegisterMethod('Procedure GetIndexNames2( const TableName, SchemaName : WideString; List : TWideStrings);');
    RegisterMethod('Procedure GetProcedureNames( List : TStrings);');
    RegisterMethod('Procedure GetProcedureNames1( const PackageName : string; List : TStrings);');
    RegisterMethod('Procedure GetProcedureNames2( const PackageName, SchemaName : string; List : TStrings);');
    RegisterMethod('Procedure GetProcedureNames3( List : TWideStrings);');
    RegisterMethod('Procedure GetProcedureNames4( const PackageName : Widestring; List : TWideStrings);');
    RegisterMethod('Procedure GetProcedureNames5( const PackageName, SchemaName : WideString; List : TWideStrings);');
    RegisterMethod('Procedure GetPackageNames( List : TStrings);');
    RegisterMethod('Procedure GetSchemaNames( List : TStrings);');
    RegisterMethod('Procedure GetCommandTypes( List : TWideStrings)');
    RegisterMethod('Procedure GetPackageNames1( List : TWideStrings);');
    RegisterMethod('Procedure GetSchemaNames1( List : TWideStrings);');
    RegisterMethod('Function GetDefaultSchemaName : WideString');
    RegisterMethod('Procedure GetProcedureParams( ProcedureName : WideString; List : TList);');
    RegisterMethod('Procedure GetProcedureParams1( ProcedureName, PackageName : WideString; List : TList);');
    RegisterMethod('Procedure GetProcedureParams2( ProcedureName, PackageName, SchemaName : Widestring; List : TList);');
    RegisterMethod('Procedure GetTableNames( List : TStrings; SystemTables : Boolean);');
    RegisterMethod('Procedure GetTableNames1( List : TStrings; SchemaName : WideString; SystemTables : Boolean);');
    RegisterMethod('Procedure GetTableNames2( List : TWideStrings; SchemaName : WideString; SystemTables : Boolean);');
    RegisterMethod('Procedure GetTableNames( List : TWideStrings; SystemTables : Boolean);');
    RegisterMethod('Procedure LoadParamsFromIniFile( FFileName : WideString)');
    RegisterMethod('Procedure Rollback( TransDesc : TTransactionDesc)');
    RegisterMethod('Procedure RollbackFreeAndNil( var Transaction : TDBXTransaction)');
    RegisterMethod('Procedure RollbackIncompleteFreeAndNil( var Transaction : TDBXTransaction)');
    RegisterMethod('Function HasTransaction( Transaction : TDBXTransaction) : Boolean');
    RegisterMethod('Procedure SetTraceEvent( Event : TDBXTraceEvent)');
    RegisterMethod('Function BeginTransaction : TDBXTransaction;');
    RegisterMethod('Function BeginTransaction1( Isolation : TDBXIsolation) : TDBXTransaction;');
    RegisterMethod('Procedure StartTransaction( TransDesc : TTransactionDesc)');
    RegisterMethod('Function GetLoginUsername : WideString');
    RegisterProperty('ActiveStatements', 'LongWord', iptr);
    RegisterProperty('AutoClone', 'Boolean', iptrw);
    RegisterProperty('ConnectionState', 'TConnectionState', iptrw);
    RegisterProperty('DataSets', 'TCustomSQLDataSet Integer', iptr);
    RegisterProperty('InTransaction', 'Boolean', iptr);
    RegisterProperty('LocaleCode', 'TLocaleCode', iptrw);
    RegisterProperty('MaxStmtsPerConn', 'LongWord', iptr);
    RegisterProperty('MetaData', 'TDBXDatabaseMetaData', iptr);
    RegisterProperty('MultipleTransactionsSupported', 'LongBool', iptr);
    RegisterProperty('ParamsLoaded', 'Boolean', iptrw);
    RegisterProperty('DBXConnection', 'TDBXConnection', iptrw);
    RegisterProperty('SQLHourGlass', 'Boolean', iptrw);
    RegisterProperty('TraceCallbackEvent', 'TDBXTraceEvent', iptr);
    RegisterProperty('TransactionsSupported', 'LongBool', iptr);
    RegisterProperty('ConnectionName', 'string', iptrw);
    RegisterProperty('DriverName', 'string', iptrw);
    RegisterProperty('GetDriverFunc', 'string', iptrw);
    RegisterProperty('KeepConnection', 'Boolean', iptrw);
    RegisterProperty('LibraryName', 'string', iptrw);
    RegisterProperty('LoadParamsOnConnect', 'Boolean', iptrw);
    RegisterProperty('Params', 'TWideStrings', iptrw);
    RegisterProperty('TableScope', 'TTableScopes', iptrw);
    RegisterProperty('VendorLib', 'string', iptrw);
    RegisterProperty('OnLogin', 'TSQLConnectionLoginEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TTransactionItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TTransactionItem') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TTransactionItem') do
  begin
    RegisterProperty('FTransaction', 'TDBXTransaction', iptrw);
    RegisterProperty('FTransactionDesc', 'TTransactionDesc', iptrw);
    RegisterProperty('FNext', 'TTransactionItem', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLMonitor(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TSQLMonitor') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TSQLMonitor') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure LoadFromFile( AFileName : string)');
    RegisterMethod('Procedure SaveToFile( AFileName : string)');
    RegisterProperty('MaxTraceCount', 'Integer', iptrw);
    RegisterProperty('TraceCount', 'Integer', iptr);
    RegisterProperty('Active', 'Boolean', iptrw);
    RegisterProperty('AutoSave', 'Boolean', iptrw);
    RegisterProperty('FileName', 'string', iptrw);
    RegisterProperty('OnLogTrace', 'TTraceLogEvent', iptrw);
    RegisterProperty('OnTrace', 'TTraceEvent', iptrw);
    RegisterProperty('TraceList', 'TWideStrings', iptrw);
    RegisterProperty('SQLConnection', 'TSQLConnection', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLBlobStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMemoryStream', 'TSQLBlobStream') do
  with CL.AddClassN(CL.FindClass('TMemoryStream'),'TSQLBlobStream') do
  begin
    RegisterMethod('Constructor Create( Field : TBlobField; Mode : TBlobStreamMode)');
    RegisterMethod('Procedure ReadBlobData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SPParamDesc(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'SPParamDesc') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'SPParamDesc') do begin
    RegisterProperty('iParamNum', 'Word', iptrw);
    RegisterProperty('szName', 'WideString', iptrw);
    RegisterProperty('iArgType', 'TParamType', iptrw);
    RegisterProperty('iDataType', 'TFieldType', iptrw);
    RegisterProperty('iUnits1', 'SmallInt', iptrw);
    RegisterProperty('iUnits2', 'SmallInt', iptrw);
    RegisterProperty('iLen', 'LongWord', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SqlExpr(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('eSQLTable','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLView','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLSystemTable','LongWord').SetUInt( $0004);
 CL.AddConstantN('eSQLSynonym','LongWord').SetUInt( $0008);
 CL.AddConstantN('eSQLTempTable','LongWord').SetUInt( $0010);
 CL.AddConstantN('eSQLLocal','LongWord').SetUInt( $0020);
 CL.AddConstantN('eSQLProcedure','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLFunction','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLPackage','LongWord').SetUInt( $0004);
 CL.AddConstantN('eSQLSysProcedure','LongWord').SetUInt( $0008);
 CL.AddConstantN('eSQLRowId','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLRowVersion','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLAutoIncr','LongWord').SetUInt( $0004);
 CL.AddConstantN('eSQLDefault','LongWord').SetUInt( $0008);
 CL.AddConstantN('eSQLNonUnique','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLUnique','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLPrimaryKey','LongWord').SetUInt( $0004);
 CL.AddConstantN('SSelect','String').SetString( 'select');
 CL.AddConstantN('SSelectStar','String').SetString( ' select * ');
 CL.AddConstantN('SSelectStarFrom','String').SetString( ' select * from ');
 CL.AddConstantN('SSelectSpaces','String').SetString( ' select ');
 CL.AddConstantN('SWhere','String').SetString( ' where ');
 CL.AddConstantN('SAnd','String').SetString( ' and ');
 CL.AddConstantN('SOrderBy','String').SetString( ' order by ');
 CL.AddConstantN('SParam','String').SetString( '?');
 CL.AddConstantN('DefaultCursor','LongInt').SetInt( 0);
 CL.AddConstantN('HourGlassCursor','LongInt').SetInt( - 11);
 CL.AddConstantN('DefaultMaxBlobSize','LongInt').SetInt( - 1);
 //CL.AddConstantN('DefaultRowsetSize','').SetString( DBXDefaultRowSetSize);
 CL.AddConstantN('TErrorMessageSize','LongInt').SetInt( 2048);
  CL.AddTypeS('TWideDataSet', 'TDataSet');
  //CL.AddTypeS('TFieldList', 'TObjectList');
  //CL.AddTypeS('TLocale', 'IntPtr');
  //CL.AddTypeS('TFieldList', 'TList');
  //CL.AddTypeS('TLocale', 'Pointer');
  //CL.AddTypeS('SQLResult', 'TDBXErrorCode');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSQLConnection');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomSQLDataSet');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSQLDataSet');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSQLQuery');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSQLStoredProc');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSQLTable');
  CL.AddTypeS('TLocaleCode', 'Integer');
  CL.AddTypeS('TSQLExceptionType', '( exceptConnection, exceptCommand, exceptCu'
   +'rsor, exceptMetaData, exceptUseLast )');
  CL.AddTypeS('TTransIsolationLevel', '( xilREADCOMMITTED, xilREPEATABLEREAD, x'
   +'ilDIRTYREAD, xilCUSTOM )');
  SIRegister_SPParamDesc(CL);
  SIRegister_TSQLBlobStream(CL);
  CL.AddTypeS('TConnectionUserType', '( eUserMonitor, eUserDataSet )');
  //CL.AddTypeS('TTraceEvent', 'Procedure ( Sender : TObject; TraceInfo : TDBXTra'
  // +'ceInfo; var LogTrace : Boolean)');
  //CL.AddTypeS('TTraceLogEvent', 'Procedure ( Sender : TObject; TraceInfo : TDBX'
  // +'TraceInfo)');
  SIRegister_TSQLMonitor(CL);
  CL.AddTypeS('EConnectFlag', '( eConnect, eReconnect, eDisconnect )');
  CL.AddTypeS('TSchemaType', '( stNoSchema, stTables, stSysTables, stProcedures'
   +', stColumns, stProcedureParams, stIndexes, stPackages, stUserNames )');
  CL.AddTypeS('TConnectionState', '( csStateClosed, csStateOpen, csStateConnect'
   +'ing, csStateExecuting, csStateFetching, csStateDisconnecting )');

  CL.AddTypeS('TSQLCommandType', '(ctQuery, ctTable, ctStoredProc)'); //3.7
   CL.AddTypeS('TTableScope', '( tsSynonym, tsSysTable, tsTable, tsView )');
  CL.AddTypeS('TTableScopes', 'set of TTableScope');
  CL.AddTypeS('TSQLConnectionLoginEvent', 'Procedure ( Database : TSQLConnectio'
   +'n; LoginParams : TWideStrings)');
  SIRegister_TTransactionItem(CL);
  SIRegister_TSQLConnection(CL);
  SIRegister_TSQLDataLink(CL);
  SIRegister_TFLDDesc(CL);
  CL.AddTypeS('TSQLSchemaInfo', 'record FType : TSchemaType; ObjectName : WideS'
   +'tring; Pattern : WideString; PackageName : WideString; end');
  CL.AddTypeS('TFieldDescList', 'array of TFLDDesc');
  CL.AddTypeS('TParseSqlEvent', 'Procedure ( var FieldNames : TWideStrings; SQL'
   +' : WideString; var TableName : WideString)');
  CL.AddTypeS('TParseInsertSqlEvent', 'Procedure ( var FieldNames : TWideString'
   +'s; SQL : WideString; var BindAllFields : Boolean; var TableName : WideString)');
  SIRegister_TCustomSQLDataSet(CL);
  SIRegister_TSQLDataSet(CL);
  SIRegister_TSQLQuery(CL);
  SIRegister_TSQLStoredProc(CL);
  SIRegister_TSQLTable(CL);
 //CL.AddDelphiFunction('Procedure LoadParamListItems( Params : TParams; ProcParams : TList)');
 //CL.AddDelphiFunction('Procedure FreeProcParams( var ProcParams : TList)');
 CL.AddDelphiFunction('Procedure GetConnectionNames( List : TStrings; Driver : string; DesignMode : Boolean)');
 CL.AddDelphiFunction('Procedure GetDriverNames( List : TStrings; DesignMode : Boolean)');
 CL.AddDelphiFunction('Function GetDriverRegistryFile( DesignMode : Boolean) : string');
 CL.AddDelphiFunction('Function GetConnectionRegistryFile( DesignMode : Boolean) : string');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSQLTableTableName_W(Self: TSQLTable; const T: WideString);
begin Self.TableName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableTableName_R(Self: TSQLTable; var T: WideString);
begin T := Self.TableName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterSource_W(Self: TSQLTable; const T: TDataSource);
begin Self.MasterSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterSource_R(Self: TSQLTable; var T: TDataSource);
begin T := Self.MasterSource; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterFields_W(Self: TSQLTable; const T: WideString);
begin Self.MasterFields := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterFields_R(Self: TSQLTable; var T: WideString);
begin T := Self.MasterFields; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexName_W(Self: TSQLTable; const T: WideString);
begin Self.IndexName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexName_R(Self: TSQLTable; var T: WideString);
begin T := Self.IndexName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFieldNames_W(Self: TSQLTable; const T: WideString);
begin Self.IndexFieldNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFieldNames_R(Self: TSQLTable; var T: WideString);
begin T := Self.IndexFieldNames; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFieldCount_R(Self: TSQLTable; var T: Integer);
begin T := Self.IndexFieldCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFields_W(Self: TSQLTable; const T: TField; const t1: Integer);
begin Self.IndexFields[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFields_R(Self: TSQLTable; var T: TField; const t1: Integer);
begin T := Self.IndexFields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcStoredProcName_W(Self: TSQLStoredProc; const T: WideString);
begin Self.StoredProcName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcStoredProcName_R(Self: TSQLStoredProc; var T: WideString);
begin T := Self.StoredProcName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcPackageName_W(Self: TSQLStoredProc; const T: WideString);
begin Self.PackageName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcPackageName_R(Self: TSQLStoredProc; var T: WideString);
begin T := Self.PackageName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLQuerySQL_W(Self: TSQLQuery; const T: TWideStrings);
begin Self.SQL := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLQuerySQL_R(Self: TSQLQuery; var T: TWideStrings);
begin T := Self.SQL; end;

(*----------------------------------------------------------------------------*)
procedure TSQLQueryText_R(Self: TSQLQuery; var T: string);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetNumericMapping_W(Self: TCustomSQLDataSet; const T: Boolean);
begin Self.NumericMapping := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetNumericMapping_R(Self: TCustomSQLDataSet; var T: Boolean);
begin T := Self.NumericMapping; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDataSetCommandType_W(Self: TSQLDataSet; const T: TSQLCommandType);
begin Self.commandType:= T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDataSetCommandType_R(Self: TSQLDataSet; var T: TSQLCommandType);
begin T:= Self.commandType; end;


(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetGetMetadata_W(Self: TCustomSQLDataSet; const T: Boolean);
begin Self.GetMetadata := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetGetMetadata_R(Self: TCustomSQLDataSet; var T: Boolean);
begin T := Self.GetMetadata; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSchemaName_W(Self: TCustomSQLDataSet; const T: string);
begin Self.SchemaName := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSchemaName_R(Self: TCustomSQLDataSet; var T: string);
begin T := Self.SchemaName; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseInsertSql_W(Self: TCustomSQLDataSet; const T: TParseInsertSqlEvent);
begin Self.ParseInsertSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseInsertSql_R(Self: TCustomSQLDataSet; var T: TParseInsertSqlEvent);
begin T := Self.ParseInsertSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseUpdateSql_W(Self: TCustomSQLDataSet; const T: TParseSqlEvent);
begin Self.ParseUpdateSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseUpdateSql_R(Self: TCustomSQLDataSet; var T: TParseSqlEvent);
begin T := Self.ParseUpdateSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseDeleteSql_W(Self: TCustomSQLDataSet; const T: TParseSqlEvent);
begin Self.ParseDeleteSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseDeleteSql_R(Self: TCustomSQLDataSet; var T: TParseSqlEvent);
begin T := Self.ParseDeleteSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseSelectSql_W(Self: TCustomSQLDataSet; const T: TParseSqlEvent);
begin Self.ParseSelectSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseSelectSql_R(Self: TCustomSQLDataSet; var T: TParseSqlEvent);
begin T := Self.ParseSelectSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetTransactionLevel_W(Self: TCustomSQLDataSet; const T: SmallInt);
begin Self.TransactionLevel := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetTransactionLevel_R(Self: TCustomSQLDataSet; var T: SmallInt);
begin T := Self.TransactionLevel; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSQLConnection_W(Self: TCustomSQLDataSet; const T: TSQLConnection);
begin Self.SQLConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSQLConnection_R(Self: TCustomSQLDataSet; var T: TSQLConnection);
begin T := Self.SQLConnection; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetRecordCount_R(Self: TCustomSQLDataSet; var T: Integer);
begin T := Self.RecordCount; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetDesignerData_W(Self: TCustomSQLDataSet; const T: string);
begin Self.DesignerData := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetDesignerData_R(Self: TCustomSQLDataSet; var T: string);
begin T := Self.DesignerData; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetPrepared_W(Self: TCustomSQLDataSet; const T: Boolean);
begin Self.Prepared := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetPrepared_R(Self: TCustomSQLDataSet; var T: Boolean);
begin T := Self.Prepared; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetIndexDefs_W(Self: TCustomSQLDataSet; const T: TIndexDefs);
begin Self.IndexDefs := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetIndexDefs_R(Self: TCustomSQLDataSet; var T: TIndexDefs);
begin T := Self.IndexDefs; end;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetKeyFieldNames1_P(Self: TCustomSQLDataSet;  List : TWideStrings) : Integer;
Begin Result := Self.GetKeyFieldNames(List); END;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetKeyFieldNames_P(Self: TCustomSQLDataSet;  List : TStrings) : Integer;
Begin Result := Self.GetKeyFieldNames(List); END;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetFieldData3_P(Self: TCustomSQLDataSet;  Field : TField; Buffer : Pointer) : Boolean;
Begin Result := Self.GetFieldData(Field, Buffer); END;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetFieldData2_P(Self: TCustomSQLDataSet;  FieldNo : Integer; Buffer : Pointer) : Boolean;
Begin Result := Self.GetFieldData(FieldNo, Buffer); END;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetFieldData1_P(Self: TCustomSQLDataSet;  Field : TField; Buffer : TValueBuffer) : Boolean;
Begin Result := Self.GetFieldData(Field, Buffer); END;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetFieldData_P(Self: TCustomSQLDataSet;  FieldNo : Integer; Buffer : TValueBuffer) : Boolean;
Begin Result := Self.GetFieldData(FieldNo, Buffer); END;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetCommandText_W(Self: TCustomSQLDataSet; const T: WideString);
begin Self.CommandText := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetCommandText_R(Self: TCustomSQLDataSet; var T: WideString);
begin T := Self.CommandText; end;

(*----------------------------------------------------------------------------*)
Procedure TCustomSQLDataSetLoadFieldDef_P(Self: TCustomSQLDataSet;  FieldID : Word; var FldDesc : TFLDDesc);
Begin //Self.LoadFieldDef(FieldID, FldDesc);
END;

(*----------------------------------------------------------------------------*)
procedure TFLDDescbCalcField_W(Self: TFLDDesc; const T: WordBool);
begin Self.bCalcField := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescbCalcField_R(Self: TFLDDesc; var T: WordBool);
begin T := Self.bCalcField; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldrRights_W(Self: TFLDDesc; const T: FLDRights);
begin Self.efldrRights := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldrRights_R(Self: TFLDDesc; var T: FLDRights);
begin T := Self.efldrRights; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldvVchk_W(Self: TFLDDesc; const T: FLDVchk);
begin Self.efldvVchk := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldvVchk_R(Self: TFLDDesc; var T: FLDVchk);
begin T := Self.efldvVchk; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciNullOffset_W(Self: TFLDDesc; const T: Word);
begin Self.iNullOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciNullOffset_R(Self: TFLDDesc; var T: Word);
begin T := Self.iNullOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciLen_W(Self: TFLDDesc; const T: LongWord);
begin Self.iLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciLen_R(Self: TFLDDesc; var T: LongWord);
begin T := Self.iLen; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciOffset_W(Self: TFLDDesc; const T: Word);
begin Self.iOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciOffset_R(Self: TFLDDesc; var T: Word);
begin T := Self.iOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits2_W(Self: TFLDDesc; const T: SmallInt);
begin Self.iUnits2 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits2_R(Self: TFLDDesc; var T: SmallInt);
begin T := Self.iUnits2; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits1_W(Self: TFLDDesc; const T: SmallInt);
begin Self.iUnits1 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits1_R(Self: TFLDDesc; var T: SmallInt);
begin T := Self.iUnits1; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciSubType_W(Self: TFLDDesc; const T: Word);
begin Self.iSubType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciSubType_R(Self: TFLDDesc; var T: Word);
begin T := Self.iSubType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldType_W(Self: TFLDDesc; const T: Word);
begin Self.iFldType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldType_R(Self: TFLDDesc; var T: Word);
begin T := Self.iFldType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescszName_W(Self: TFLDDesc; const T: WideString);
begin Self.szName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescszName_R(Self: TFLDDesc; var T: WideString);
begin T := Self.szName; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldNum_W(Self: TFLDDesc; const T: Word);
begin Self.iFldNum := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldNum_R(Self: TFLDDesc; var T: Word);
begin T := Self.iFldNum; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFCalcField_W(Self: TFLDDesc; const T: WordBool);
Begin Self.FCalcField := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFCalcField_R(Self: TFLDDesc; var T: WordBool);
Begin T := Self.FCalcField; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDRights_W(Self: TFLDDesc; const T: FLDRights);
Begin Self.FFLDRights := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDRights_R(Self: TFLDDesc; var T: FLDRights);
Begin T := Self.FFLDRights; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDVchk_W(Self: TFLDDesc; const T: FLDVchk);
Begin Self.FFLDVchk := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDVchk_R(Self: TFLDDesc; var T: FLDVchk);
Begin T := Self.FFLDVchk; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFNullOffset_W(Self: TFLDDesc; const T: Word);
Begin Self.FNullOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFNullOffset_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FNullOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFLen_W(Self: TFLDDesc; const T: LongWord);
Begin Self.FLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFLen_R(Self: TFLDDesc; var T: LongWord);
Begin T := Self.FLen; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFOffset_W(Self: TFLDDesc; const T: Word);
Begin Self.FOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFOffset_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits2_W(Self: TFLDDesc; const T: SmallInt);
Begin Self.FUnits2 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits2_R(Self: TFLDDesc; var T: SmallInt);
Begin T := Self.FUnits2; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits1_W(Self: TFLDDesc; const T: SmallInt);
Begin Self.FUnits1 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits1_R(Self: TFLDDesc; var T: SmallInt);
Begin T := Self.FUnits1; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFSubType_W(Self: TFLDDesc; const T: Word);
Begin Self.FSubType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFSubType_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FSubType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldType_W(Self: TFLDDesc; const T: Word);
Begin Self.FFldType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldType_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FFldType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFName_W(Self: TFLDDesc; const T: WideString);
Begin Self.FName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFName_R(Self: TFLDDesc; var T: WideString);
Begin T := Self.FName; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldNum_W(Self: TFLDDesc; const T: Word);
Begin Self.FFldNum := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldNum_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FFldNum; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionOnLogin_W(Self: TSQLConnection; const T: TSQLConnectionLoginEvent);
begin Self.OnLogin := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionOnLogin_R(Self: TSQLConnection; var T: TSQLConnectionLoginEvent);
begin T := Self.OnLogin; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionVendorLib_W(Self: TSQLConnection; const T: string);
begin Self.VendorLib := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionVendorLib_R(Self: TSQLConnection; var T: string);
begin T := Self.VendorLib; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTableScope_W(Self: TSQLConnection; const T: TTableScopes);
begin Self.TableScope := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTableScope_R(Self: TSQLConnection; var T: TTableScopes);
begin T := Self.TableScope; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParams_W(Self: TSQLConnection; const T: TWideStrings);
begin Self.Params := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParams_R(Self: TSQLConnection; var T: TWideStrings);
begin T := Self.Params; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLoadParamsOnConnect_W(Self: TSQLConnection; const T: Boolean);
begin Self.LoadParamsOnConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLoadParamsOnConnect_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.LoadParamsOnConnect; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLibraryName_W(Self: TSQLConnection; const T: string);
begin Self.LibraryName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLibraryName_R(Self: TSQLConnection; var T: string);
begin T := Self.LibraryName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionKeepConnection_W(Self: TSQLConnection; const T: Boolean);
begin Self.KeepConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionKeepConnection_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.KeepConnection; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionGetDriverFunc_W(Self: TSQLConnection; const T: string);
begin Self.GetDriverFunc := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionGetDriverFunc_R(Self: TSQLConnection; var T: string);
begin T := Self.GetDriverFunc; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDriverName_W(Self: TSQLConnection; const T: string);
begin Self.DriverName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDriverName_R(Self: TSQLConnection; var T: string);
begin T := Self.DriverName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionName_W(Self: TSQLConnection; const T: string);
begin Self.ConnectionName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionName_R(Self: TSQLConnection; var T: string);
begin T := Self.ConnectionName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTransactionsSupported_R(Self: TSQLConnection; var T: LongBool);
begin T := Self.TransactionsSupported; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTraceCallbackEvent_R(Self: TSQLConnection; var T: TDBXTraceEvent);
begin T := Self.TraceCallbackEvent; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionSQLHourGlass_W(Self: TSQLConnection; const T: Boolean);
begin Self.SQLHourGlass := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionSQLHourGlass_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.SQLHourGlass; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDBXConnection_W(Self: TSQLConnection; const T: TDBXConnection);
begin Self.DBXConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDBXConnection_R(Self: TSQLConnection; var T: TDBXConnection);
begin T := Self.DBXConnection; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParamsLoaded_W(Self: TSQLConnection; const T: Boolean);
begin Self.ParamsLoaded := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParamsLoaded_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.ParamsLoaded; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionMultipleTransactionsSupported_R(Self: TSQLConnection; var T: LongBool);
begin T := Self.MultipleTransactionsSupported; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionMetaData_R(Self: TSQLConnection; var T: TDBXDatabaseMetaData);
begin T := Self.MetaData; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionMaxStmtsPerConn_R(Self: TSQLConnection; var T: LongWord);
begin T := Self.MaxStmtsPerConn; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLocaleCode_W(Self: TSQLConnection; const T: TLocaleCode);
begin Self.LocaleCode := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLocaleCode_R(Self: TSQLConnection; var T: TLocaleCode);
begin T := Self.LocaleCode; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionInTransaction_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.InTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDataSets_R(Self: TSQLConnection; var T: TCustomSQLDataSet; const t1: Integer);
begin T := Self.DataSets[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionState_W(Self: TSQLConnection; const T: TConnectionState);
begin Self.ConnectionState := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionState_R(Self: TSQLConnection; var T: TConnectionState);
begin T := Self.ConnectionState; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionAutoClone_W(Self: TSQLConnection; const T: Boolean);
begin Self.AutoClone := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionAutoClone_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.AutoClone; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionActiveStatements_R(Self: TSQLConnection; var T: LongWord);
begin T := Self.ActiveStatements; end;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionBeginTransaction1_P(Self: TSQLConnection;  Isolation : TDBXIsolation) : TDBXTransaction;
Begin Result := Self.BeginTransaction(Isolation); END;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionBeginTransaction_P(Self: TSQLConnection) : TDBXTransaction;
Begin Result := Self.BeginTransaction; END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetTableNames_P(Self: TSQLConnection;  List : TWideStrings; SystemTables : Boolean);
Begin Self.GetTableNames(List, SystemTables); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetTableNames2_P(Self: TSQLConnection;  List : TWideStrings; SchemaName : WideString; SystemTables : Boolean);
Begin Self.GetTableNames(List, SchemaName, SystemTables); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetTableNames1_P(Self: TSQLConnection;  List : TStrings; SchemaName : WideString; SystemTables : Boolean);
Begin Self.GetTableNames(List, SchemaName, SystemTables); END;

(*----------------------------------------------------------------------------*)
//Procedure TSQLConnectionGetTableNames_P(Self: TSQLConnection;  List : TStrings; SystemTables : Boolean);
//Begin Self.GetTableNames(List, SystemTables); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureParams2_P(Self: TSQLConnection;  ProcedureName, PackageName, SchemaName : Widestring; List : TList);
Begin Self.GetProcedureParams(ProcedureName, PackageName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureParams1_P(Self: TSQLConnection;  ProcedureName, PackageName : WideString; List : TList);
Begin Self.GetProcedureParams(ProcedureName, PackageName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureParams_P(Self: TSQLConnection;  ProcedureName : WideString; List : TList);
Begin Self.GetProcedureParams(ProcedureName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetSchemaNames1_P(Self: TSQLConnection;  List : TWideStrings);
Begin Self.GetSchemaNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetPackageNames1_P(Self: TSQLConnection;  List : TWideStrings);
Begin Self.GetPackageNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetSchemaNames_P(Self: TSQLConnection;  List : TStrings);
Begin Self.GetSchemaNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetPackageNames_P(Self: TSQLConnection;  List : TStrings);
Begin Self.GetPackageNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames5_P(Self: TSQLConnection;  const PackageName, SchemaName : WideString; List : TWideStrings);
Begin Self.GetProcedureNames(PackageName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames4_P(Self: TSQLConnection;  const PackageName : Widestring; List : TWideStrings);
Begin Self.GetProcedureNames(PackageName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames3_P(Self: TSQLConnection;  List : TWideStrings);
Begin Self.GetProcedureNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames2_P(Self: TSQLConnection;  const PackageName, SchemaName : string; List : TStrings);
Begin Self.GetProcedureNames(PackageName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames1_P(Self: TSQLConnection;  const PackageName : string; List : TStrings);
Begin Self.GetProcedureNames(PackageName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames_P(Self: TSQLConnection;  List : TStrings);
Begin Self.GetProcedureNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetIndexNames2_P(Self: TSQLConnection;  const TableName, SchemaName : WideString; List : TWideStrings);
Begin Self.GetIndexNames(TableName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetIndexNames1_P(Self: TSQLConnection;  const TableName : WideString; List : TWideStrings);
Begin Self.GetIndexNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetIndexNames_P(Self: TSQLConnection;  const TableName, SchemaName : string; List : TStrings);
Begin Self.GetIndexNames(TableName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetIndexNames4_P(Self: TSQLConnection;  const TableName : string; List : TStrings);
Begin Self.GetIndexNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetFieldNames3_P(Self: TSQLConnection;  const TableName : WideString; List : TWideStrings);
Begin Self.GetFieldNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetFieldNames2_P(Self: TSQLConnection;  const TableName : WideString; SchemaName : WideString; List : TWideStrings);
Begin Self.GetFieldNames(TableName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetFieldNames1_P(Self: TSQLConnection;  const TableName : string; SchemaName : string; List : TStrings);
Begin Self.GetFieldNames(TableName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetFieldNames_P(Self: TSQLConnection;  const TableName : string; List : TStrings);
Begin Self.GetFieldNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionOpenSchema1_P(Self: TSQLConnection;  eKind : TSchemaType; sInfo, SSchemaName : WideString; List : TWideStrings);
Begin //Self.OpenSchema(eKind, sInfo, SSchemaName, List);
 END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionOpenSchema_P(Self: TSQLConnection;  eKind : TSchemaType; sInfo : Widestring; List : TWideStrings);
Begin //Self.OpenSchema(eKind, sInfo, List);
END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionEndAndFreeTransaction1_P(Self: TSQLConnection;  TransDesc : TTransactionDesc; Commit : Boolean);
Begin //Self.EndAndFreeTransaction(TransDesc, Commit);
END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionEndAndFreeTransaction_P(Self: TSQLConnection;  Commit : Boolean);
Begin //Self.EndAndFreeTransaction(Commit);
END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionEndFreeAndNilTransaction_P(Self: TSQLConnection;  var Transaction : TDBXTransaction; Commit : Boolean);
Begin //Self.EndFreeAndNilTransaction(Transaction, Commit);
END;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionOpenSchemaTable1_P(Self: TSQLConnection;  eKind : TSchemaType; SInfo : WideString; SQualifier : WideString; SPackage : WideString; SSchemaName : WideString) : TCustomSQLDataSet;
Begin //Result := Self.OpenSchemaTable(eKind, SInfo, SQualifier, SPackage, SSchemaName);
 END;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionOpenSchemaTable_P(Self: TSQLConnection;  eKind : TSchemaType; SInfo : WideString; SQualifier : WideString; SPackage : WideString) : TCustomSQLDataSet;
Begin //Result := Self.OpenSchemaTable(eKind, SInfo, SQualifier, SPackage);
 END;

(*----------------------------------------------------------------------------*)
//Function TSQLConnectionBeginTransaction_P(Self: TSQLConnection;  TransDesc : TTransactionDesc; Isolation : TDBXIsolation) : TDBXTransaction;
//Begin Result := Self.BeginTransaction(TransDesc, Isolation); END;

(*----------------------------------------------------------------------------*)
procedure TTransactionItemFNext_W(Self: TTransactionItem; const T: TTransactionItem);
Begin Self.FNext := T; end;

(*----------------------------------------------------------------------------*)
procedure TTransactionItemFNext_R(Self: TTransactionItem; var T: TTransactionItem);
Begin T := Self.FNext; end;

(*----------------------------------------------------------------------------*)
procedure TTransactionItemFTransactionDesc_W(Self: TTransactionItem; const T: TTransactionDesc);
Begin Self.FTransactionDesc := T; end;

(*----------------------------------------------------------------------------*)
procedure TTransactionItemFTransactionDesc_R(Self: TTransactionItem; var T: TTransactionDesc);
Begin T := Self.FTransactionDesc; end;

(*----------------------------------------------------------------------------*)
procedure TTransactionItemFTransaction_W(Self: TTransactionItem; const T: TDBXTransaction);
Begin Self.FTransaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TTransactionItemFTransaction_R(Self: TTransactionItem; var T: TDBXTransaction);
Begin T := Self.FTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorSQLConnection_W(Self: TSQLMonitor; const T: TSQLConnection);
begin Self.SQLConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorSQLConnection_R(Self: TSQLMonitor; var T: TSQLConnection);
begin T := Self.SQLConnection; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorTraceList_W(Self: TSQLMonitor; const T: TWideStrings);
begin Self.TraceList := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorTraceList_R(Self: TSQLMonitor; var T: TWideStrings);
begin T := Self.TraceList; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorOnTrace_W(Self: TSQLMonitor; const T: TTraceEvent);
begin Self.OnTrace := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorOnTrace_R(Self: TSQLMonitor; var T: TTraceEvent);
begin T := Self.OnTrace; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorOnLogTrace_W(Self: TSQLMonitor; const T: TTraceLogEvent);
begin Self.OnLogTrace := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorOnLogTrace_R(Self: TSQLMonitor; var T: TTraceLogEvent);
begin T := Self.OnLogTrace; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorFileName_W(Self: TSQLMonitor; const T: string);
begin Self.FileName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorFileName_R(Self: TSQLMonitor; var T: string);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorAutoSave_W(Self: TSQLMonitor; const T: Boolean);
begin Self.AutoSave := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorAutoSave_R(Self: TSQLMonitor; var T: Boolean);
begin T := Self.AutoSave; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorActive_W(Self: TSQLMonitor; const T: Boolean);
begin Self.Active := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorActive_R(Self: TSQLMonitor; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorTraceCount_R(Self: TSQLMonitor; var T: Integer);
begin T := Self.TraceCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorMaxTraceCount_W(Self: TSQLMonitor; const T: Integer);
begin Self.MaxTraceCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorMaxTraceCount_R(Self: TSQLMonitor; var T: Integer);
begin T := Self.MaxTraceCount; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciLen_W(Self: SPParamDesc; const T: LongWord);
Begin Self.iLen := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciLen_R(Self: SPParamDesc; var T: LongWord);
Begin T := Self.iLen; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits2_W(Self: SPParamDesc; const T: SmallInt);
Begin Self.iUnits2 := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits2_R(Self: SPParamDesc; var T: SmallInt);
Begin T := Self.iUnits2; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits1_W(Self: SPParamDesc; const T: SmallInt);
Begin Self.iUnits1 := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits1_R(Self: SPParamDesc; var T: SmallInt);
Begin T := Self.iUnits1; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciDataType_W(Self: SPParamDesc; const T: TFieldType);
Begin Self.iDataType := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciDataType_R(Self: SPParamDesc; var T: TFieldType);
Begin T := Self.iDataType; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciArgType_W(Self: SPParamDesc; const T: TParamType);
Begin Self.iArgType := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciArgType_R(Self: SPParamDesc; var T: TParamType);
Begin T := Self.iArgType; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDescszName_W(Self: SPParamDesc; const T: WideString);
Begin Self.szName := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDescszName_R(Self: SPParamDesc; var T: WideString);
Begin T := Self.szName; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciParamNum_W(Self: SPParamDesc; const T: Word);
Begin Self.iParamNum := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciParamNum_R(Self: SPParamDesc; var T: Word);
Begin T := Self.iParamNum; end;

//------------------from dataset
procedure TDATASETAUTOCALCFIELDS_W(Self: TCustomSQLDataSet; const T: BOOLEAN);
begin Self.AUTOCALCFIELDS := T; end;

procedure TDATASETAUTOCALCFIELDS_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.AUTOCALCFIELDS; end;

procedure TDATASETACTIVE_W(Self: TCustomSQLDataSet; const T: BOOLEAN);
begin Self.ACTIVE := T; end;

procedure TDATASETACTIVE_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.ACTIVE; end;

procedure TDATASETFILTEROPTIONS_W(Self: TCustomSQLDataSet; const T: TFILTEROPTIONS);
begin Self.FILTEROPTIONS := T; end;

procedure TDATASETFILTEROPTIONS_R(Self: TCustomSQLDataSet; var T: TFILTEROPTIONS);
begin T := Self.FILTEROPTIONS; end;

procedure TDATASETFILTERED_W(Self: TCustomSQLDataSet; const T: BOOLEAN);
begin Self.FILTERED := T; end;

procedure TDATASETFILTERED_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.FILTERED; end;

procedure TDATASETFILTER_W(Self: TCustomSQLDataSet; const T: String);
begin Self.FILTER := T; end;

procedure TDATASETFILTER_R(Self: TCustomSQLDataSet; var T: String);
begin T := Self.FILTER; end;

procedure TDATASETSTATE_R(Self: TCustomSQLDataSet; var T: TDATASETSTATE);
begin T := Self.STATE; end;

{$IFNDEF FPC}
procedure TDATASETSPARSEARRAYS_W(Self: TCustomSQLDataSet; const T: BOOLEAN);
begin Self.SPARSEARRAYS := T; end;

procedure TDATASETSPARSEARRAYS_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.SPARSEARRAYS; end;
{$ENDIF}

procedure TDATASETRECORDSIZE_R(Self: TCustomSQLDataSet; var T: WORD);
begin T := Self.RECORDSIZE; end;

procedure TDATASETRECNO_W(Self: TCustomSQLDataSet; const T: INTEGER);
begin Self.RECNO := T; end;

procedure TDATASETRECNO_R(Self: TCustomSQLDataSet; var T: INTEGER);
begin T := Self.RECNO; end;

procedure TDATASETRECORDCOUNT_R(Self: TCustomSQLDataSet; var T: INTEGER);
begin T := Self.RECORDCOUNT; end;

{$IFNDEF FPC}
procedure TDATASETOBJECTVIEW_W(Self: TCustomSQLDataSet; const T: BOOLEAN);
begin Self.OBJECTVIEW := T; end;

procedure TDATASETOBJECTVIEW_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.OBJECTVIEW; end;
{$ENDIF}

procedure TDATASETMODIFIED_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.MODIFIED; end;

{$IFDEF DELPHI6UP}
procedure TDATASETISUNIDIRECTIONAL_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.ISUNIDIRECTIONAL; end;
{$ENDIF}

procedure TDATASETFOUND_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.FOUND; end;

procedure TDATASETFIELDVALUES_W(Self: TCustomSQLDataSet; const T: VARIANT; const t1: String);
begin Self.FIELDVALUES[t1] := T; end;

procedure TDATASETFIELDVALUES_R(Self: TCustomSQLDataSet; var T: VARIANT; const t1: String);
begin T := Self.FIELDVALUES[t1]; end;

procedure TDATASETFIELDS_R(Self: TCustomSQLDataSet; var T: TFIELDS);
begin T := Self.FIELDS; end;

{$IFNDEF FPC}

//Self.FIELDLIST
//procedure TDATASETFIELDLIST_R(Self: TCustomSQLDataSet; var T: TLIST);
//begin T := Self.TLIST; end;


procedure TDATASETFIELDDEFLIST_R(Self: TCustomSQLDataSet; var T: TFIELDDEFLIST);
begin T := Self.FIELDDEFLIST; end;

procedure TDATASETFIELDDEFS_W(Self: TCustomSQLDataSet; const T: TFIELDDEFS);
begin Self.FIELDDEFS := T; end;

procedure TDATASETFIELDDEFS_R(Self: TCustomSQLDataSet; var T: TFIELDDEFS);
begin T := Self.FIELDDEFS; end;

procedure TDATASETBLOCKREADSIZE_W(Self: TCustomSQLDataSet; const T: INTEGER);
begin Self.BLOCKREADSIZE := T; end;

procedure TDATASETBLOCKREADSIZE_R(Self: TCustomSQLDataSet; var T: INTEGER);
begin T := Self.BLOCKREADSIZE; end;

procedure TDATASETDESIGNER_R(Self: TCustomSQLDataSet; var T: TDATASETDESIGNER);
begin T := Self.DESIGNER; end;


procedure TDATASETDATASETFIELD_W(Self: TCustomSQLDataSet; const T: TDATASETFIELD);
begin Self.DATASETFIELD := T; end;



procedure TDATASETDATASETFIELD_R(Self: TCustomSQLDataSet; var T: TDATASETFIELD);
begin T := Self.DATASETFIELD; end;


procedure TDATASETAGGFIELDS_R(Self: TCustomSQLDataSet; var T: TFIELDS);
begin T := Self.AGGFIELDS; end;

{$ENDIF}

procedure TDATASETFIELDCOUNT_R(Self: TCustomSQLDataSet; var T: INTEGER);
begin T := Self.FIELDCOUNT; end;


procedure TDATASETEOF_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.EOF; end;

procedure TDATASETDEFAULTFIELDS_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.DEFAULTFIELDS; end;

procedure TDATASETDATASOURCE_R(Self: TCustomSQLDataSet; var T: TDATASOURCE);
begin T := Self.DATASOURCE; end;



procedure TDATASETCANMODIFY_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.CANMODIFY; end;

//procedure TDATASETBOOKMARK_W(Self: TDATASET; const T: TBOOKMARKSTR);
//begin Self.BOOKMARK := T; end;

//procedure TDATASETBOOKMARK_R(Self: TDATASET; var T: TBOOKMARKSTR);
//begin T := Self.BOOKMARK; end;

procedure TDATASETBOF_R(Self: TCustomSQLDataSet; var T: BOOLEAN);
begin T := Self.BOF; end;


(*----------------------------------------------------------------------------*)
procedure RIRegister_SqlExpr_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@LoadParamListItems, 'LoadParamListItems', cdRegister);
 S.RegisterDelphiFunction(@FreeProcParams, 'FreeProcParams', cdRegister);
 S.RegisterDelphiFunction(@GetConnectionNames, 'GetConnectionNames', cdRegister);
 S.RegisterDelphiFunction(@GetDriverNames, 'GetDriverNames', cdRegister);
 S.RegisterDelphiFunction(@GetDriverRegistryFile, 'GetDriverRegistryFile', cdRegister);
 S.RegisterDelphiFunction(@GetConnectionRegistryFile, 'GetConnectionRegistryFile', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLTable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLTable) do begin
    RegisterConstructor(@TSQLTable.Create, 'Create');
    RegisterMethod(@TSQLTable.DeleteRecords, 'DeleteRecords');
    RegisterMethod(@TSQLTable.GetIndexNames, 'GetIndexNames');
    RegisterMethod(@TSQLTable.PrepareStatement, 'PrepareStatement');
    RegisterPropertyHelper(@TSQLTableIndexFields_R,@TSQLTableIndexFields_W,'IndexFields');
    RegisterPropertyHelper(@TSQLTableIndexFieldCount_R,nil,'IndexFieldCount');
    RegisterPropertyHelper(@TSQLTableIndexFieldNames_R,@TSQLTableIndexFieldNames_W,'IndexFieldNames');
    RegisterPropertyHelper(@TSQLTableIndexName_R,@TSQLTableIndexName_W,'IndexName');
    RegisterPropertyHelper(@TSQLTableMasterFields_R,@TSQLTableMasterFields_W,'MasterFields');
    RegisterPropertyHelper(@TSQLTableMasterSource_R,@TSQLTableMasterSource_W,'MasterSource');
    RegisterPropertyHelper(@TSQLTableTableName_R,@TSQLTableTableName_W,'TableName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLStoredProc(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLStoredProc) do begin
    RegisterConstructor(@TSQLStoredProc.Create, 'Create');
    RegisterVirtualMethod(@TSQLStoredProc.ExecProc, 'ExecProc');
    RegisterMethod(@TSQLStoredProc.NextRecordSet, 'NextRecordSet');
    RegisterMethod(@TSQLStoredProc.PrepareStatement, 'PrepareStatement');
    RegisterPropertyHelper(@TSQLStoredProcPackageName_R,@TSQLStoredProcPackageName_W,'PackageName');
    RegisterPropertyHelper(@TSQLStoredProcStoredProcName_R,@TSQLStoredProcStoredProcName_W,'StoredProcName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLQuery(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLQuery) do begin
    RegisterConstructor(@TSQLQuery.Create, 'Create');
    RegisterMethod(@TSQLQuery.Destroy, 'Free');
    RegisterMethod(@TSQLQuery.ExecSQL, 'ExecSQL');
    RegisterMethod(@TSQLQuery.PrepareStatement, 'PrepareStatement');
    RegisterPropertyHelper(@TSQLQueryText_R,nil,'Text');
    RegisterPropertyHelper(@TSQLQuerySQL_R,@TSQLQuerySQL_W,'SQL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLDataSet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLDataSet) do begin
    RegisterConstructor(@TSQLDataSet.Create, 'Create');
    RegisterMethod(@TSQLDataSet.ExecSQL, 'ExecSQL');
    RegisterPropertyHelper(@TSQLDataSetCommandType_R,@TSQLDataSetCommandType_W,'CommandType');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomSQLDataSet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomSQLDataSet) do begin
    RegisterConstructor(@TCustomSQLDataSet.Create, 'Create');
    RegisterMethod(@TCustomSQLDataSet.Destroy, 'Free');
    RegisterPropertyHelper(@TCustomSQLDataSetCommandText_R,@TCustomSQLDataSetCommandText_W,'CommandText');
    RegisterMethod(@TCustomSQLDataSet.GetCommandNames, 'GetCommandNames');
    RegisterMethod(@TCustomSQLDataSetGetKeyFieldNames_P, 'GetKeyFieldNames');
    RegisterMethod(@TCustomSQLDataSetGetKeyFieldNames1_P, 'GetKeyFieldNames1');
    RegisterVirtualMethod(@TCustomSQLDataSet.GetQuoteChar, 'GetQuoteChar');
    RegisterMethod(@TCustomSQLDataSet.ParamByName, 'ParamByName');
    RegisterVirtualMethod(@TCustomSQLDataSet.PrepareStatement, 'PrepareStatement');
    RegisterPropertyHelper(@TCustomSQLDataSetIndexDefs_R,@TCustomSQLDataSetIndexDefs_W,'IndexDefs');
    RegisterMethod(@TCustomSQLDataSet.SetSchemaInfo, 'SetSchemaInfo');
    RegisterPropertyHelper(@TCustomSQLDataSetPrepared_R,@TCustomSQLDataSetPrepared_W,'Prepared');
    RegisterPropertyHelper(@TCustomSQLDataSetDesignerData_R,@TCustomSQLDataSetDesignerData_W,'DesignerData');
    RegisterPropertyHelper(@TCustomSQLDataSetRecordCount_R,nil,'RecordCount');
    RegisterPropertyHelper(@TCustomSQLDataSetSQLConnection_R,@TCustomSQLDataSetSQLConnection_W,'SQLConnection');
    RegisterPropertyHelper(@TCustomSQLDataSetTransactionLevel_R,@TCustomSQLDataSetTransactionLevel_W,'TransactionLevel');
    RegisterPropertyHelper(@TCustomSQLDataSetParseSelectSql_R,@TCustomSQLDataSetParseSelectSql_W,'ParseSelectSql');
    RegisterPropertyHelper(@TCustomSQLDataSetParseDeleteSql_R,@TCustomSQLDataSetParseDeleteSql_W,'ParseDeleteSql');
    RegisterPropertyHelper(@TCustomSQLDataSetParseUpdateSql_R,@TCustomSQLDataSetParseUpdateSql_W,'ParseUpdateSql');
    RegisterPropertyHelper(@TCustomSQLDataSetParseInsertSql_R,@TCustomSQLDataSetParseInsertSql_W,'ParseInsertSql');
    RegisterPropertyHelper(@TCustomSQLDataSetSchemaName_R,@TCustomSQLDataSetSchemaName_W,'SchemaName');
    RegisterPropertyHelper(@TCustomSQLDataSetGetMetadata_R,@TCustomSQLDataSetGetMetadata_W,'GetMetadata');
    RegisterPropertyHelper(@TCustomSQLDataSetNumericMapping_R,@TCustomSQLDataSetNumericMapping_W,'NumericMapping');
    //RegisterPropertyHelper(@TCustomSQLDataSetCommandType_R,@TCustomSQLDataSetCommandType_W,'CommandType');

  RegisterMethod(@TCustomSQLDataSet.ACTIVEBUFFER, 'ACTIVEBUFFER');
  RegisterMethod(@TCustomSQLDataSet.APPEND, 'APPEND');
  RegisterMethod(@TCustomSQLDataSet.APPENDRECORD, 'APPENDRECORD');
//  RegisterVirtualMethod(@TDATASET.BOOKMARKVALID, 'BOOKMARKVALID');
  RegisterVirtualMethod(@TCustomSQLDataSet.CANCEL, 'CANCEL');
  RegisterMethod(@TCustomSQLDataSet.CHECKBROWSEMODE, 'CHECKBROWSEMODE');
  RegisterMethod(@TCustomSQLDataSet.CLEARFIELDS, 'CLEARFIELDS');
  RegisterMethod(@TCustomSQLDataSet.CLOSE, 'CLOSE');
  RegisterMethod(@TCustomSQLDataSet.CONTROLSDISABLED, 'CONTROLSDISABLED');
//  RegisterVirtualMethod(@TDATASET.COMPAREBOOKMARKS, 'COMPAREBOOKMARKS');
  RegisterVirtualMethod(@TCustomSQLDataSet.CREATEBLOBSTREAM, 'CREATEBLOBSTREAM');
  RegisterMethod(@TCustomSQLDataSet.CURSORPOSCHANGED, 'CURSORPOSCHANGED');
  RegisterMethod(@TCustomSQLDataSet.DELETE, 'DELETE');
  RegisterMethod(@TCustomSQLDataSet.DISABLECONTROLS, 'DISABLECONTROLS');
  RegisterMethod(@TCustomSQLDataSet.EDIT, 'EDIT');
  RegisterMethod(@TCustomSQLDataSet.ENABLECONTROLS, 'ENABLECONTROLS');
  RegisterMethod(@TCustomSQLDataSet.FIELDBYNAME, 'FIELDBYNAME');
  RegisterMethod(@TCustomSQLDataSet.FINDFIELD, 'FINDFIELD');
  RegisterMethod(@TCustomSQLDataSet.FINDFIRST, 'FINDFIRST');
  RegisterMethod(@TCustomSQLDataSet.FINDLAST, 'FINDLAST');
  RegisterMethod(@TCustomSQLDataSet.FINDNEXT, 'FINDNEXT');
  RegisterMethod(@TCustomSQLDataSet.FINDPRIOR, 'FINDPRIOR');
  RegisterMethod(@TCustomSQLDataSet.FIRST, 'FIRST');
//  RegisterVirtualMethod(@TDATASET.FREEBOOKMARK, 'FREEBOOKMARK');
//  RegisterVirtualMethod(@TDATASET.GETBOOKMARK, 'GETBOOKMARK');
  RegisterVirtualMethod(@TCustomSQLDataSet.GETCURRENTRECORD, 'GETCURRENTRECORD');
//  RegisterVirtualMethod(@TDATASET.GETDETAILDATASETS, 'GETDETAILDATASETS');
//  RegisterVirtualMethod(@TDATASET.GETDETAILLINKFIELDS, 'GETDETAILLINKFIELDS');
//  RegisterVirtualMethod(@TDATASET.GETBLOBFIELDDATA, 'GETBLOBFIELDDATA');
//  RegisterMethod(@TDATASET.GETFIELDLIST, 'GETFIELDLIST');
  RegisterMethod(@TCustomSQLDataSet.GETFIELDNAMES, 'GETFIELDNAMES');
//  RegisterMethod(@TDATASET.GOTOBOOKMARK, 'GOTOBOOKMARK');
  RegisterMethod(@TCustomSQLDataSet.INSERT, 'INSERT');
  RegisterMethod(@TCustomSQLDataSet.INSERTRECORD, 'INSERTRECORD');
  RegisterMethod(@TCustomSQLDataSet.ISEMPTY, 'ISEMPTY');
  RegisterMethod(@TCustomSQLDataSet.ISLINKEDTO, 'ISLINKEDTO');
  RegisterVirtualMethod(@TCustomSQLDataSet.ISSEQUENCED, 'ISSEQUENCED');
  RegisterMethod(@TCustomSQLDataSet.LAST, 'LAST');
  RegisterVirtualMethod(@TCustomSQLDataSet.LOCATE, 'LOCATE');
  RegisterVirtualMethod(@TCustomSQLDataSet.LOOKUP, 'LOOKUP');
  RegisterMethod(@TCustomSQLDataSet.MOVEBY, 'MOVEBY');
  RegisterMethod(@TCustomSQLDataSet.NEXT, 'NEXT');
  RegisterMethod(@TCustomSQLDataSet.OPEN, 'OPEN');
  RegisterVirtualMethod(@TCustomSQLDataSet.POST, 'POST');
  RegisterMethod(@TCustomSQLDataSet.PRIOR, 'PRIOR');
  RegisterMethod(@TCustomSQLDataSet.REFRESH, 'REFRESH');
//  RegisterVirtualMethod(@TDATASET.RESYNC, 'RESYNC');
  RegisterMethod(@TCustomSQLDataSet.SETFIELDS, 'SETFIELDS');
  RegisterVirtualMethod(@TCustomSQLDataSet.TRANSLATE, 'TRANSLATE');
  RegisterMethod(@TCustomSQLDataSet.UPDATECURSORPOS, 'UPDATECURSORPOS');
  RegisterMethod(@TCustomSQLDataSet.UPDATERECORD, 'UPDATERECORD');
  RegisterVirtualMethod(@TCustomSQLDataSet.UPDATESTATUS, 'UPDATESTATUS');
  RegisterPropertyHelper(@TDATASETBOF_R,nil,'BOF');
//  RegisterPropertyHelper(@TDATASETBOOKMARK_R,@TDATASETBOOKMARK_W,'BOOKMARK');
  RegisterPropertyHelper(@TDATASETCANMODIFY_R,nil,'CANMODIFY');
  RegisterPropertyHelper(@TDATASETDATASOURCE_R,nil,'DATASOURCE');
  RegisterPropertyHelper(@TDATASETDEFAULTFIELDS_R,nil,'DEFAULTFIELDS');
  RegisterPropertyHelper(@TDATASETEOF_R,nil,'EOF');
  RegisterPropertyHelper(@TDATASETFIELDCOUNT_R,nil,'FIELDCOUNT');
  RegisterPropertyHelper(@TDATASETFIELDS_R,nil,'FIELDS');
  RegisterPropertyHelper(@TDATASETFIELDVALUES_R,@TDATASETFIELDVALUES_W,'FIELDVALUES');
  RegisterPropertyHelper(@TDATASETFOUND_R,nil,'FOUND');
{$IFDEF DELPHI6UP}
  RegisterPropertyHelper(@TDATASETISUNIDIRECTIONAL_R,nil,'ISUNIDIRECTIONAL');
{$ENDIF}
  RegisterPropertyHelper(@TDATASETMODIFIED_R,nil,'MODIFIED');
  RegisterPropertyHelper(@TDATASETRECORDCOUNT_R,nil,'RECORDCOUNT');
  RegisterPropertyHelper(@TDATASETRECNO_R,@TDATASETRECNO_W,'RECNO');
  RegisterPropertyHelper(@TDATASETRECORDSIZE_R,nil,'RECORDSIZE');
  RegisterPropertyHelper(@TDATASETSTATE_R,nil,'STATE');
  RegisterPropertyHelper(@TDATASETFILTER_R,@TDATASETFILTER_W,'FILTER');
  RegisterPropertyHelper(@TDATASETFILTERED_R,@TDATASETFILTERED_W,'FILTERED');
  RegisterPropertyHelper(@TDATASETFILTEROPTIONS_R,@TDATASETFILTEROPTIONS_W,'FILTEROPTIONS');
  RegisterPropertyHelper(@TDATASETACTIVE_R,@TDATASETACTIVE_W,'ACTIVE');
  RegisterPropertyHelper(@TDATASETAUTOCALCFIELDS_R,@TDATASETAUTOCALCFIELDS_W,'AUTOCALCFIELDS');
  {RegisterPropertyHelper(@TDATASETBEFOREOPEN_R,@TDATASETBEFOREOPEN_W,'BEFOREOPEN');
  RegisterPropertyHelper(@TDATASETAFTEROPEN_R,@TDATASETAFTEROPEN_W,'AFTEROPEN');
  RegisterPropertyHelper(@TDATASETBEFORECLOSE_R,@TDATASETBEFORECLOSE_W,'BEFORECLOSE');
  RegisterPropertyHelper(@TDATASETAFTERCLOSE_R,@TDATASETAFTERCLOSE_W,'AFTERCLOSE');
  RegisterPropertyHelper(@TDATASETBEFOREINSERT_R,@TDATASETBEFOREINSERT_W,'BEFOREINSERT');
  RegisterPropertyHelper(@TDATASETAFTERINSERT_R,@TDATASETAFTERINSERT_W,'AFTERINSERT');
  RegisterPropertyHelper(@TDATASETBEFOREEDIT_R,@TDATASETBEFOREEDIT_W,'BEFOREEDIT');
  RegisterPropertyHelper(@TDATASETAFTEREDIT_R,@TDATASETAFTEREDIT_W,'AFTEREDIT');
  RegisterPropertyHelper(@TDATASETBEFOREPOST_R,@TDATASETBEFOREPOST_W,'BEFOREPOST');
  RegisterPropertyHelper(@TDATASETAFTERPOST_R,@TDATASETAFTERPOST_W,'AFTERPOST');
  RegisterPropertyHelper(@TDATASETBEFORECANCEL_R,@TDATASETBEFORECANCEL_W,'BEFORECANCEL');
  RegisterPropertyHelper(@TDATASETAFTERCANCEL_R,@TDATASETAFTERCANCEL_W,'AFTERCANCEL');
  RegisterPropertyHelper(@TDATASETBEFOREDELETE_R,@TDATASETBEFOREDELETE_W,'BEFOREDELETE');
  RegisterPropertyHelper(@TDATASETAFTERDELETE_R,@TDATASETAFTERDELETE_W,'AFTERDELETE');
  RegisterPropertyHelper(@TDATASETBEFORESCROLL_R,@TDATASETBEFORESCROLL_W,'BEFORESCROLL');
  RegisterPropertyHelper(@TDATASETAFTERSCROLL_R,@TDATASETAFTERSCROLL_W,'AFTERSCROLL');}
  {$IFNDEF FPC}
  //RegisterPropertyHelper(@TDATASETFIELDLIST_R,nil,'FIELDLIST');
  RegisterPropertyHelper(@TDATASETDESIGNER_R,nil,'DESIGNER');
  RegisterPropertyHelper(@TDATASETBLOCKREADSIZE_R,@TDATASETBLOCKREADSIZE_W,'BLOCKREADSIZE');
  //RegisterPropertyHelper(@TDATASETBEFOREREFRESH_R,@TDATASETBEFOREREFRESH_W,'BEFOREREFRESH');
  //RegisterPropertyHelper(@TDATASETAFTERREFRESH_R,@TDATASETAFTERREFRESH_W,'AFTERREFRESH');
  RegisterPropertyHelper(@TDATASETAGGFIELDS_R,nil,'AGGFIELDS');
  RegisterPropertyHelper(@TDATASETDATASETFIELD_R,@TDATASETDATASETFIELD_W,'DATASETFIELD');
  RegisterPropertyHelper(@TDATASETOBJECTVIEW_R,@TDATASETOBJECTVIEW_W,'OBJECTVIEW');
  RegisterPropertyHelper(@TDATASETSPARSEARRAYS_R,@TDATASETSPARSEARRAYS_W,'SPARSEARRAYS');
  RegisterPropertyHelper(@TDATASETFIELDDEFS_R,@TDATASETFIELDDEFS_W,'FIELDDEFS');
  RegisterPropertyHelper(@TDATASETFIELDDEFLIST_R,nil,'FIELDDEFLIST');

  {$ENDIF}
  {RegisterEventPropertyHelper(@TDATASETONCALCFIELDS_R,@TDATASETONCALCFIELDS_W,'ONCALCFIELDS');
  RegisterEventPropertyHelper(@TDATASETONDELETEERROR_R,@TDATASETONDELETEERROR_W,'ONDELETEERROR');
  RegisterEventPropertyHelper(@TDATASETONEDITERROR_R,@TDATASETONEDITERROR_W,'ONEDITERROR');
  RegisterEventPropertyHelper(@TDATASETONFILTERRECORD_R,@TDATASETONFILTERRECORD_W,'ONFILTERRECORD');
  RegisterEventPropertyHelper(@TDATASETONNEWRECORD_R,@TDATASETONNEWRECORD_W,'ONNEWRECORD');
  RegisterEventPropertyHelper(@TDATASETONPOSTERROR_R,@TDATASETONPOSTERROR_W,'ONPOSTERROR');}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFLDDesc(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFLDDesc) do begin
    RegisterPropertyHelper(@TFLDDescFFldNum_R,@TFLDDescFFldNum_W,'FFldNum');
    RegisterPropertyHelper(@TFLDDescFName_R,@TFLDDescFName_W,'FName');
    RegisterPropertyHelper(@TFLDDescFFldType_R,@TFLDDescFFldType_W,'FFldType');
    RegisterPropertyHelper(@TFLDDescFSubType_R,@TFLDDescFSubType_W,'FSubType');
    RegisterPropertyHelper(@TFLDDescFUnits1_R,@TFLDDescFUnits1_W,'FUnits1');
    RegisterPropertyHelper(@TFLDDescFUnits2_R,@TFLDDescFUnits2_W,'FUnits2');
    RegisterPropertyHelper(@TFLDDescFOffset_R,@TFLDDescFOffset_W,'FOffset');
    RegisterPropertyHelper(@TFLDDescFLen_R,@TFLDDescFLen_W,'FLen');
    RegisterPropertyHelper(@TFLDDescFNullOffset_R,@TFLDDescFNullOffset_W,'FNullOffset');
    RegisterPropertyHelper(@TFLDDescFFLDVchk_R,@TFLDDescFFLDVchk_W,'FFLDVchk');
    RegisterPropertyHelper(@TFLDDescFFLDRights_R,@TFLDDescFFLDRights_W,'FFLDRights');
    RegisterPropertyHelper(@TFLDDescFCalcField_R,@TFLDDescFCalcField_W,'FCalcField');
    RegisterPropertyHelper(@TFLDDesciFldNum_R,@TFLDDesciFldNum_W,'iFldNum');
    RegisterPropertyHelper(@TFLDDescszName_R,@TFLDDescszName_W,'szName');
    RegisterPropertyHelper(@TFLDDesciFldType_R,@TFLDDesciFldType_W,'iFldType');
    RegisterPropertyHelper(@TFLDDesciSubType_R,@TFLDDesciSubType_W,'iSubType');
    RegisterPropertyHelper(@TFLDDesciUnits1_R,@TFLDDesciUnits1_W,'iUnits1');
    RegisterPropertyHelper(@TFLDDesciUnits2_R,@TFLDDesciUnits2_W,'iUnits2');
    RegisterPropertyHelper(@TFLDDesciOffset_R,@TFLDDesciOffset_W,'iOffset');
    RegisterPropertyHelper(@TFLDDesciLen_R,@TFLDDesciLen_W,'iLen');
    RegisterPropertyHelper(@TFLDDesciNullOffset_R,@TFLDDesciNullOffset_W,'iNullOffset');
    RegisterPropertyHelper(@TFLDDescefldvVchk_R,@TFLDDescefldvVchk_W,'efldvVchk');
    RegisterPropertyHelper(@TFLDDescefldrRights_R,@TFLDDescefldrRights_W,'efldrRights');
    RegisterPropertyHelper(@TFLDDescbCalcField_R,@TFLDDescbCalcField_W,'bCalcField');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLDataLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLDataLink) do
  begin
    RegisterConstructor(@TSQLDataLink.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLConnection) do begin
    RegisterConstructor(@TSQLConnection.Create, 'Create');
    RegisterMethod(@TSQLConnection.CloneConnection, 'CloneConnection');
    RegisterMethod(@TSQLConnection.CloseDataSets, 'CloseDataSets');
    RegisterMethod(@TSQLConnection.Commit, 'Commit');
    RegisterMethod(@TSQLConnection.CommitFreeAndNil, 'CommitFreeAndNil');
    RegisterMethod(@TSQLConnection.Execute, 'Execute');
    RegisterMethod(@TSQLConnection.ExecuteDirect, 'ExecuteDirect');
    RegisterMethod(@TSQLConnectionGetFieldNames_P, 'GetFieldNames');
    RegisterMethod(@TSQLConnectionGetFieldNames1_P, 'GetFieldNames1');
    RegisterMethod(@TSQLConnectionGetFieldNames2_P, 'GetFieldNames2');
    RegisterMethod(@TSQLConnectionGetFieldNames3_P, 'GetFieldNames3');
    RegisterMethod(@TSQLConnectionGetIndexNames4_P, 'GetIndexNames4');
    RegisterMethod(@TSQLConnectionGetIndexNames_P, 'GetIndexNames');
    RegisterMethod(@TSQLConnectionGetIndexNames1_P, 'GetIndexNames1');
    RegisterMethod(@TSQLConnectionGetIndexNames2_P, 'GetIndexNames2');
    RegisterMethod(@TSQLConnectionGetProcedureNames_P, 'GetProcedureNames');
    RegisterMethod(@TSQLConnectionGetProcedureNames1_P, 'GetProcedureNames1');
    RegisterMethod(@TSQLConnectionGetProcedureNames2_P, 'GetProcedureNames2');
    RegisterMethod(@TSQLConnectionGetProcedureNames3_P, 'GetProcedureNames3');
    RegisterMethod(@TSQLConnectionGetProcedureNames4_P, 'GetProcedureNames4');
    RegisterMethod(@TSQLConnectionGetProcedureNames5_P, 'GetProcedureNames5');
    RegisterMethod(@TSQLConnectionGetPackageNames_P, 'GetPackageNames');
    RegisterMethod(@TSQLConnectionGetSchemaNames_P, 'GetSchemaNames');
    RegisterMethod(@TSQLConnection.GetCommandTypes, 'GetCommandTypes');
    RegisterMethod(@TSQLConnectionGetPackageNames1_P, 'GetPackageNames1');
    RegisterMethod(@TSQLConnectionGetSchemaNames1_P, 'GetSchemaNames1');
    RegisterMethod(@TSQLConnection.GetDefaultSchemaName, 'GetDefaultSchemaName');
    RegisterMethod(@TSQLConnectionGetProcedureParams_P, 'GetProcedureParams');
    RegisterMethod(@TSQLConnectionGetProcedureParams1_P, 'GetProcedureParams1');
    RegisterMethod(@TSQLConnectionGetProcedureParams2_P, 'GetProcedureParams2');
    RegisterMethod(@TSQLConnectionGetTableNames_P, 'GetTableNames');
    RegisterMethod(@TSQLConnectionGetTableNames1_P, 'GetTableNames1');
    RegisterMethod(@TSQLConnectionGetTableNames2_P, 'GetTableNames2');
    RegisterMethod(@TSQLConnectionGetTableNames_P, 'GetTableNames');
    RegisterMethod(@TSQLConnection.LoadParamsFromIniFile, 'LoadParamsFromIniFile');
    RegisterMethod(@TSQLConnection.Rollback, 'Rollback');
    RegisterMethod(@TSQLConnection.RollbackFreeAndNil, 'RollbackFreeAndNil');
    RegisterMethod(@TSQLConnection.RollbackIncompleteFreeAndNil, 'RollbackIncompleteFreeAndNil');
    RegisterMethod(@TSQLConnection.HasTransaction, 'HasTransaction');
    RegisterMethod(@TSQLConnection.SetTraceEvent, 'SetTraceEvent');
    RegisterMethod(@TSQLConnectionBeginTransaction_P, 'BeginTransaction');
    RegisterMethod(@TSQLConnectionBeginTransaction1_P, 'BeginTransaction1');
    RegisterMethod(@TSQLConnection.StartTransaction, 'StartTransaction');
    RegisterMethod(@TSQLConnection.GetLoginUsername, 'GetLoginUsername');
    RegisterPropertyHelper(@TSQLConnectionActiveStatements_R,nil,'ActiveStatements');
    RegisterPropertyHelper(@TSQLConnectionAutoClone_R,@TSQLConnectionAutoClone_W,'AutoClone');
    RegisterPropertyHelper(@TSQLConnectionConnectionState_R,@TSQLConnectionConnectionState_W,'ConnectionState');
    RegisterPropertyHelper(@TSQLConnectionDataSets_R,nil,'DataSets');
    RegisterPropertyHelper(@TSQLConnectionInTransaction_R,nil,'InTransaction');
    RegisterPropertyHelper(@TSQLConnectionLocaleCode_R,@TSQLConnectionLocaleCode_W,'LocaleCode');
    RegisterPropertyHelper(@TSQLConnectionMaxStmtsPerConn_R,nil,'MaxStmtsPerConn');
    RegisterPropertyHelper(@TSQLConnectionMetaData_R,nil,'MetaData');
    RegisterPropertyHelper(@TSQLConnectionMultipleTransactionsSupported_R,nil,'MultipleTransactionsSupported');
    RegisterPropertyHelper(@TSQLConnectionParamsLoaded_R,@TSQLConnectionParamsLoaded_W,'ParamsLoaded');
    RegisterPropertyHelper(@TSQLConnectionDBXConnection_R,@TSQLConnectionDBXConnection_W,'DBXConnection');
    RegisterPropertyHelper(@TSQLConnectionSQLHourGlass_R,@TSQLConnectionSQLHourGlass_W,'SQLHourGlass');
    RegisterPropertyHelper(@TSQLConnectionTraceCallbackEvent_R,nil,'TraceCallbackEvent');
    RegisterPropertyHelper(@TSQLConnectionTransactionsSupported_R,nil,'TransactionsSupported');
    RegisterPropertyHelper(@TSQLConnectionConnectionName_R,@TSQLConnectionConnectionName_W,'ConnectionName');
    RegisterPropertyHelper(@TSQLConnectionDriverName_R,@TSQLConnectionDriverName_W,'DriverName');
    RegisterPropertyHelper(@TSQLConnectionGetDriverFunc_R,@TSQLConnectionGetDriverFunc_W,'GetDriverFunc');
    RegisterPropertyHelper(@TSQLConnectionKeepConnection_R,@TSQLConnectionKeepConnection_W,'KeepConnection');
    RegisterPropertyHelper(@TSQLConnectionLibraryName_R,@TSQLConnectionLibraryName_W,'LibraryName');
    RegisterPropertyHelper(@TSQLConnectionLoadParamsOnConnect_R,@TSQLConnectionLoadParamsOnConnect_W,'LoadParamsOnConnect');
    RegisterPropertyHelper(@TSQLConnectionParams_R,@TSQLConnectionParams_W,'Params');
    RegisterPropertyHelper(@TSQLConnectionTableScope_R,@TSQLConnectionTableScope_W,'TableScope');
    RegisterPropertyHelper(@TSQLConnectionVendorLib_R,@TSQLConnectionVendorLib_W,'VendorLib');
    RegisterPropertyHelper(@TSQLConnectionOnLogin_R,@TSQLConnectionOnLogin_W,'OnLogin');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTransactionItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTransactionItem) do
  begin
    RegisterPropertyHelper(@TTransactionItemFTransaction_R,@TTransactionItemFTransaction_W,'FTransaction');
    RegisterPropertyHelper(@TTransactionItemFTransactionDesc_R,@TTransactionItemFTransactionDesc_W,'FTransactionDesc');
    RegisterPropertyHelper(@TTransactionItemFNext_R,@TTransactionItemFNext_W,'FNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLMonitor(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLMonitor) do
  begin
    RegisterConstructor(@TSQLMonitor.Create, 'Create');
    RegisterMethod(@TSQLMonitor.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TSQLMonitor.SaveToFile, 'SaveToFile');
    RegisterPropertyHelper(@TSQLMonitorMaxTraceCount_R,@TSQLMonitorMaxTraceCount_W,'MaxTraceCount');
    RegisterPropertyHelper(@TSQLMonitorTraceCount_R,nil,'TraceCount');
    RegisterPropertyHelper(@TSQLMonitorActive_R,@TSQLMonitorActive_W,'Active');
    RegisterPropertyHelper(@TSQLMonitorAutoSave_R,@TSQLMonitorAutoSave_W,'AutoSave');
    RegisterPropertyHelper(@TSQLMonitorFileName_R,@TSQLMonitorFileName_W,'FileName');
    RegisterPropertyHelper(@TSQLMonitorOnLogTrace_R,@TSQLMonitorOnLogTrace_W,'OnLogTrace');
    RegisterPropertyHelper(@TSQLMonitorOnTrace_R,@TSQLMonitorOnTrace_W,'OnTrace');
    RegisterPropertyHelper(@TSQLMonitorTraceList_R,@TSQLMonitorTraceList_W,'TraceList');
    RegisterPropertyHelper(@TSQLMonitorSQLConnection_R,@TSQLMonitorSQLConnection_W,'SQLConnection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLBlobStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLBlobStream) do
  begin
    RegisterConstructor(@TSQLBlobStream.Create, 'Create');
    RegisterMethod(@TSQLBlobStream.ReadBlobData, 'ReadBlobData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SPParamDesc(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(SPParamDesc) do begin
    RegisterPropertyHelper(@SPParamDesciParamNum_R,@SPParamDesciParamNum_W,'iParamNum');
    RegisterPropertyHelper(@SPParamDescszName_R,@SPParamDescszName_W,'szName');
    RegisterPropertyHelper(@SPParamDesciArgType_R,@SPParamDesciArgType_W,'iArgType');
    RegisterPropertyHelper(@SPParamDesciDataType_R,@SPParamDesciDataType_W,'iDataType');
    RegisterPropertyHelper(@SPParamDesciUnits1_R,@SPParamDesciUnits1_W,'iUnits1');
    RegisterPropertyHelper(@SPParamDesciUnits2_R,@SPParamDesciUnits2_W,'iUnits2');
    RegisterPropertyHelper(@SPParamDesciLen_R,@SPParamDesciLen_W,'iLen');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SqlExpr(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLConnection) do
  with CL.Add(TCustomSQLDataSet) do
  with CL.Add(TSQLDataSet) do
  with CL.Add(TSQLQuery) do
  with CL.Add(TSQLStoredProc) do
  with CL.Add(TSQLTable) do
  RIRegister_SPParamDesc(CL);
  RIRegister_TSQLBlobStream(CL);
  RIRegister_TSQLMonitor(CL);
  RIRegister_TTransactionItem(CL);
  RIRegister_TSQLConnection(CL);
  RIRegister_TSQLDataLink(CL);
  RIRegister_TFLDDesc(CL);
  RIRegister_TCustomSQLDataSet(CL);
  RIRegister_TSQLDataSet(CL);
  RIRegister_TSQLQuery(CL);
  RIRegister_TSQLStoredProc(CL);
  RIRegister_TSQLTable(CL);
end;

 
 
{ TPSImport_SqlExpr }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SqlExpr.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SqlExpr(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SqlExpr.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SqlExpr(ri);
  RIRegister_SqlExpr_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
