unit uPSI_IdTunnelCommon;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdTunnelCommon = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TLogger(CL: TPSPascalCompiler);
procedure SIRegister_TSender(CL: TPSPascalCompiler);
procedure SIRegister_TReceiver(CL: TPSPascalCompiler);
procedure SIRegister_IdTunnelCommon(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TLogger(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSender(CL: TPSRuntimeClassImporter);
procedure RIRegister_TReceiver(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdTunnelCommon(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   SyncObjs
  ,IdException
  ,IdHashCRC
  ,IdStack
  ,IdCoder
  ,IdResourceStrings
  ,IdTCPServer
  ,IdTunnelCommon
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdTunnelCommon]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TLogger(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TLogger') do
  with CL.AddClassN(CL.FindClass('TObject'),'TLogger') do
  begin
    RegisterProperty('Active', 'Boolean', iptr);
    RegisterMethod('Procedure LogEvent( Msg : String)');
    RegisterMethod('Constructor Create( LogFileName : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSender(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TSender') do
  with CL.AddClassN(CL.FindClass('TObject'),'TSender') do
  begin
    RegisterProperty('Header', 'TIdHeader', iptrw);
    RegisterProperty('DataLen', 'Word', iptrw);
    RegisterProperty('HeaderLen', 'Integer', iptrw);
    RegisterProperty('pMsg', 'PChar', iptrw);
    RegisterProperty('Locker', 'TCriticalSection', iptrw);
    RegisterProperty('CRC16Calculator', 'TIdHashCRC16', iptrw);
    RegisterProperty('Msg', 'String', iptrw);
    RegisterMethod('Procedure PrepareMsg( var Header : TIdHeader; buffer : PChar; buflen : Integer)');
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TReceiver(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TReceiver') do
  with CL.AddClassN(CL.FindClass('TObject'),'TReceiver') do
  begin
    RegisterProperty('pBuffer', 'PChar', iptrw);
    RegisterProperty('HeaderLen', 'Integer', iptrw);
    RegisterProperty('Header', 'TIdHeader', iptrw);
    RegisterProperty('MsgLen', 'Word', iptrw);
    RegisterProperty('TypeDetected', 'Boolean', iptrw);
    RegisterProperty('Msg', 'PChar', iptrw);
    RegisterProperty('Data', 'String', iptrw);
    RegisterProperty('NewMessage', 'Boolean', iptr);
    RegisterProperty('CRCFailed', 'Boolean', iptr);
    RegisterMethod('Procedure ShiftData');
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdTunnelCommon(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('BUFFERLEN','LongWord').SetUInt( $4000);
 CL.AddConstantN('NumberOfConnectionsType','LongInt').SetInt( 1);
 CL.AddConstantN('NumberOfPacketsType','LongInt').SetInt( 2);
 CL.AddConstantN('CompressionRatioType','LongInt').SetInt( 3);
 CL.AddConstantN('CompressedBytesType','LongInt').SetInt( 4);
 CL.AddConstantN('BytesReadType','LongInt').SetInt( 5);
 CL.AddConstantN('BytesWriteType','LongInt').SetInt( 6);
 CL.AddConstantN('NumberOfClientsType','LongInt').SetInt( 7);
 CL.AddConstantN('NumberOfSlavesType','LongInt').SetInt( 8);
 CL.AddConstantN('NumberOfServicesType','LongInt').SetInt( 9);
 CL.AddConstantN('tmError','LongInt').SetInt( 0);
 CL.AddConstantN('tmData','LongInt').SetInt( 1);
 CL.AddConstantN('tmDisconnect','LongInt').SetInt( 2);
 CL.AddConstantN('tmConnect','LongInt').SetInt( 3);
 CL.AddConstantN('tmCustom','LongInt').SetInt( 99);
  CL.AddTypeS('TIdStatisticsOperation', '( soIncrease, soDecrease )');
  CL.AddTypeS('TIdHeader', 'record CRC16 : Word; MsgType : Word; MsgLen : Word;'
   +' UserId : Word; Port : Word; IpAddr : TIdInAddr; end');
  SIRegister_TReceiver(CL);
  SIRegister_TSender(CL);
  SIRegister_TLogger(CL);
  CL.AddTypeS('TSendMsgEvent', 'Procedure ( Thread : TIdPeerThread; var CustomM'
   +'sg : String)');
  CL.AddTypeS('TSendTrnEvent', 'Procedure ( Thread : TIdPeerThread; var Header '
   +': TIdHeader; var CustomMsg : String)');
  CL.AddTypeS('TSendTrnEventC', 'Procedure ( var Header : TIdHeader; var Custom'
   +'Msg : String)');
  CL.AddTypeS('TTunnelEventC', 'Procedure ( Receiver : TReceiver)');
  CL.AddTypeS('TSendMsgEventC', 'Procedure ( var CustomMsg : String)');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelTransformErrorBeforeSend');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelTransformError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelConnectToMasterFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelDontAllowConnections');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelCRCFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelMessageTypeRecognitionError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelMessageHandlingFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelInterpretationOfMessageFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTunnelCustomMessageInterpretationFailure');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TLoggerActive_R(Self: TLogger; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TSenderMsg_W(Self: TSender; const T: String);
Begin Self.Msg := T; end;

(*----------------------------------------------------------------------------*)
procedure TSenderMsg_R(Self: TSender; var T: String);
Begin T := Self.Msg; end;

(*----------------------------------------------------------------------------*)
procedure TSenderCRC16Calculator_W(Self: TSender; const T: TIdHashCRC16);
Begin Self.CRC16Calculator := T; end;

(*----------------------------------------------------------------------------*)
procedure TSenderCRC16Calculator_R(Self: TSender; var T: TIdHashCRC16);
Begin T := Self.CRC16Calculator; end;

(*----------------------------------------------------------------------------*)
procedure TSenderLocker_W(Self: TSender; const T: TCriticalSection);
Begin Self.Locker := T; end;

(*----------------------------------------------------------------------------*)
procedure TSenderLocker_R(Self: TSender; var T: TCriticalSection);
Begin T := Self.Locker; end;

(*----------------------------------------------------------------------------*)
procedure TSenderpMsg_W(Self: TSender; const T: PChar);
Begin Self.pMsg := T; end;

(*----------------------------------------------------------------------------*)
procedure TSenderpMsg_R(Self: TSender; var T: PChar);
Begin T := Self.pMsg; end;

(*----------------------------------------------------------------------------*)
procedure TSenderHeaderLen_W(Self: TSender; const T: Integer);
Begin Self.HeaderLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TSenderHeaderLen_R(Self: TSender; var T: Integer);
Begin T := Self.HeaderLen; end;

(*----------------------------------------------------------------------------*)
procedure TSenderDataLen_W(Self: TSender; const T: Word);
Begin Self.DataLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TSenderDataLen_R(Self: TSender; var T: Word);
Begin T := Self.DataLen; end;

(*----------------------------------------------------------------------------*)
procedure TSenderHeader_W(Self: TSender; const T: TIdHeader);
Begin Self.Header := T; end;

(*----------------------------------------------------------------------------*)
procedure TSenderHeader_R(Self: TSender; var T: TIdHeader);
Begin T := Self.Header; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverCRCFailed_R(Self: TReceiver; var T: Boolean);
begin T := Self.CRCFailed; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverNewMessage_R(Self: TReceiver; var T: Boolean);
begin T := Self.NewMessage; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverData_W(Self: TReceiver; const T: String);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverData_R(Self: TReceiver; var T: String);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverMsg_W(Self: TReceiver; const T: PChar);
Begin Self.Msg := T; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverMsg_R(Self: TReceiver; var T: PChar);
Begin T := Self.Msg; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverTypeDetected_W(Self: TReceiver; const T: Boolean);
Begin Self.TypeDetected := T; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverTypeDetected_R(Self: TReceiver; var T: Boolean);
Begin T := Self.TypeDetected; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverMsgLen_W(Self: TReceiver; const T: Word);
Begin Self.MsgLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverMsgLen_R(Self: TReceiver; var T: Word);
Begin T := Self.MsgLen; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverHeader_W(Self: TReceiver; const T: TIdHeader);
Begin Self.Header := T; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverHeader_R(Self: TReceiver; var T: TIdHeader);
Begin T := Self.Header; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverHeaderLen_W(Self: TReceiver; const T: Integer);
Begin Self.HeaderLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverHeaderLen_R(Self: TReceiver; var T: Integer);
Begin T := Self.HeaderLen; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverpBuffer_W(Self: TReceiver; const T: PChar);
Begin Self.pBuffer := T; end;

(*----------------------------------------------------------------------------*)
procedure TReceiverpBuffer_R(Self: TReceiver; var T: PChar);
Begin T := Self.pBuffer; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLogger(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLogger) do
  begin
    RegisterPropertyHelper(@TLoggerActive_R,nil,'Active');
    RegisterMethod(@TLogger.LogEvent, 'LogEvent');
    RegisterConstructor(@TLogger.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSender(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSender) do
  begin
    RegisterPropertyHelper(@TSenderHeader_R,@TSenderHeader_W,'Header');
    RegisterPropertyHelper(@TSenderDataLen_R,@TSenderDataLen_W,'DataLen');
    RegisterPropertyHelper(@TSenderHeaderLen_R,@TSenderHeaderLen_W,'HeaderLen');
    RegisterPropertyHelper(@TSenderpMsg_R,@TSenderpMsg_W,'pMsg');
    RegisterPropertyHelper(@TSenderLocker_R,@TSenderLocker_W,'Locker');
    RegisterPropertyHelper(@TSenderCRC16Calculator_R,@TSenderCRC16Calculator_W,'CRC16Calculator');
    RegisterPropertyHelper(@TSenderMsg_R,@TSenderMsg_W,'Msg');
    RegisterMethod(@TSender.PrepareMsg, 'PrepareMsg');
    RegisterConstructor(@TSender.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TReceiver(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TReceiver) do
  begin
    RegisterPropertyHelper(@TReceiverpBuffer_R,@TReceiverpBuffer_W,'pBuffer');
    RegisterPropertyHelper(@TReceiverHeaderLen_R,@TReceiverHeaderLen_W,'HeaderLen');
    RegisterPropertyHelper(@TReceiverHeader_R,@TReceiverHeader_W,'Header');
    RegisterPropertyHelper(@TReceiverMsgLen_R,@TReceiverMsgLen_W,'MsgLen');
    RegisterPropertyHelper(@TReceiverTypeDetected_R,@TReceiverTypeDetected_W,'TypeDetected');
    RegisterPropertyHelper(@TReceiverMsg_R,@TReceiverMsg_W,'Msg');
    RegisterPropertyHelper(@TReceiverData_R,@TReceiverData_W,'Data');
    RegisterPropertyHelper(@TReceiverNewMessage_R,nil,'NewMessage');
    RegisterPropertyHelper(@TReceiverCRCFailed_R,nil,'CRCFailed');
    RegisterMethod(@TReceiver.ShiftData, 'ShiftData');
    RegisterConstructor(@TReceiver.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdTunnelCommon(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TReceiver(CL);
  RIRegister_TSender(CL);
  RIRegister_TLogger(CL);
  with CL.Add(EIdTunnelException) do
  with CL.Add(EIdTunnelTransformErrorBeforeSend) do
  with CL.Add(EIdTunnelTransformError) do
  with CL.Add(EIdTunnelConnectToMasterFailed) do
  with CL.Add(EIdTunnelDontAllowConnections) do
  with CL.Add(EIdTunnelCRCFailed) do
  with CL.Add(EIdTunnelMessageTypeRecognitionError) do
  with CL.Add(EIdTunnelMessageHandlingFailed) do
  with CL.Add(EIdTunnelInterpretationOfMessageFailed) do
  with CL.Add(EIdTunnelCustomMessageInterpretationFailure) do
end;

 
 
{ TPSImport_IdTunnelCommon }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTunnelCommon.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdTunnelCommon(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTunnelCommon.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdTunnelCommon(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
