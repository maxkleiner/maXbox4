unit uPSI_HTTPApp;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
   fix create and free 4.7.6.10

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_HTTPApp = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_EWebBrokerException(CL: TPSPascalCompiler);
procedure SIRegister_TDefaultWebAppServices(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebModuleList(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebPageInfo(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebPageModuleFactory(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebModuleFactory(CL: TPSPascalCompiler);
procedure SIRegister_TWebModule(CL: TPSPascalCompiler);
procedure SIRegister_TWebDispatcher(CL: TPSPascalCompiler);
procedure SIRegister_TCustomWebDispatcher(CL: TPSPascalCompiler);
procedure SIRegister_IWebDispatch(CL: TPSPascalCompiler);
procedure SIRegister_TWebActionItems(CL: TPSPascalCompiler);
procedure SIRegister_TWebActionItem(CL: TPSPascalCompiler);
procedure SIRegister_TCustomContentProducer(CL: TPSPascalCompiler);
procedure SIRegister_IWebDispatcherAccess(CL: TPSPascalCompiler);
procedure SIRegister_IGetWebRequestHandler(CL: TPSPascalCompiler);
procedure SIRegister_IWebDispatchActions(CL: TPSPascalCompiler);
procedure SIRegister_IWebRequestHandler(CL: TPSPascalCompiler);
procedure SIRegister_IGetWebAppServices(CL: TPSPascalCompiler);
procedure SIRegister_IWebExceptionHandler(CL: TPSPascalCompiler);
procedure SIRegister_IWebAppServices(CL: TPSPascalCompiler);
procedure SIRegister_IMultiModuleSupport(CL: TPSPascalCompiler);
procedure SIRegister_IProduceContentFrom(CL: TPSPascalCompiler);
procedure SIRegister_IProduceContent(CL: TPSPascalCompiler);
procedure SIRegister_IGetAppDispatcher(CL: TPSPascalCompiler);
procedure SIRegister_ISetAppDispatcher(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebSession(CL: TPSPascalCompiler);
procedure SIRegister_TWebResponse(CL: TPSPascalCompiler);
procedure SIRegister_TCookieCollection(CL: TPSPascalCompiler);
procedure SIRegister_TCookie(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebRequestFile(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebRequestFiles(CL: TPSPascalCompiler);
procedure SIRegister_TContentParser(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractContentParser(CL: TPSPascalCompiler);
procedure SIRegister_TWebRequest(CL: TPSPascalCompiler);
procedure SIRegister_HTTPApp(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_HTTPApp_Routines(S: TPSExec);
procedure RIRegister_EWebBrokerException(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDefaultWebAppServices(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebModuleList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebPageInfo(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebPageModuleFactory(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebModuleFactory(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebModule(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebDispatcher(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomWebDispatcher(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebActionItems(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebActionItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomContentProducer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebSession(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebResponse(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCookieCollection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCookie(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebRequestFile(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebRequestFiles(CL: TPSRuntimeClassImporter);
procedure RIRegister_TContentParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractContentParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebRequest(CL: TPSRuntimeClassImporter);
procedure RIRegister_HTTPApp(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Masks
  ,Contnrs
  ,HTTPApp
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_HTTPApp]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_EWebBrokerException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'EWebBrokerException') do
  with CL.AddClassN(CL.FindClass('Exception'),'EWebBrokerException') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDefaultWebAppServices(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInterfacedObject', 'TDefaultWebAppServices') do
  with CL.AddClassN(CL.FindClass('TInterfacedObject'),'TDefaultWebAppServices') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebModuleList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractWebModuleList') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractWebModuleList') do
  begin
    RegisterMethod('Function FindModuleClass( AClass : TComponentClass) : TComponent');
    RegisterMethod('Function FindModuleName( const AClass : string) : TComponent');
    RegisterMethod('Function AddModuleClass( AClass : TComponentClass) : TComponent');
    RegisterMethod('Function AddModuleName( const AClass : string) : TComponent');
    RegisterProperty('Items', 'TComponent Integer', iptr);
    SetDefaultPropery('Items');
    RegisterProperty('ItemCount', 'Integer', iptr);
    RegisterProperty('FactoryCount', 'Integer', iptr);
    RegisterProperty('Factory', 'TAbstractWebModuleFactory Integer', iptr);
    RegisterProperty('OnModuleAdded', 'TModuleAddedProc', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebPageInfo(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TAbstractWebPageInfo') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebPageInfo') do
  begin
    RegisterProperty('PageHREF', 'string', iptr);
    RegisterProperty('PageDescription', 'string', iptr);
    RegisterProperty('PageTitle', 'string', iptr);
    RegisterProperty('PageName', 'string', iptr);
    RegisterProperty('IsPublished', 'Boolean', iptr);
    RegisterProperty('IsLoginRequired', 'Boolean', iptr);
    RegisterProperty('PageFile', 'string', iptr);
    RegisterProperty('ViewAccess', 'string', iptr);
    RegisterProperty('Factory', 'TAbstractWebPageModuleFactory', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebPageModuleFactory(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAbstractWebModuleFactory', 'TAbstractWebPageModuleFactory') do
  with CL.AddClassN(CL.FindClass('TAbstractWebModuleFactory'),'TAbstractWebPageModuleFactory') do
  begin
    RegisterMethod('Constructor Create( AWebPageInfo : TAbstractWebPageInfo)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebModuleFactory(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TAbstractWebModuleFactory') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebModuleFactory') do
  begin
    RegisterMethod('Function GetModule : TComponent');
    RegisterMethod('Procedure PreventDestruction');
    RegisterProperty('ModuleName', 'string', iptr);
    RegisterProperty('IsAppModule', 'Boolean', iptr);
    RegisterProperty('ComponentClass', 'TComponentClass', iptr);
    RegisterProperty('CreateMode', 'TWebModuleCreateMode', iptr);
    RegisterProperty('CacheMode', 'TWebModuleCacheMode', iptr);
    RegisterProperty('WebPageInfo', 'TAbstractWebPageInfo', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebModule(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomWebDispatcher', 'TWebModule') do
  with CL.AddClassN(CL.FindClass('TCustomWebDispatcher'),'TWebModule') do begin
     RegisterMethod('Constructor Create');
      registerpublishedproperties;
    RegisterProperty('Actions', 'TWebActionItems', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebDispatcher(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomWebDispatcher', 'TWebDispatcher') do
  with CL.AddClassN(CL.FindClass('TCustomWebDispatcher'),'TWebDispatcher') do
  begin
    registerpublishedproperties;
    RegisterProperty('Actions', 'TWebActionItems', iptrw);
    //RegisterProperty('Title', 'string', iptrw);
    //RegisterProperty('URL', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomWebDispatcher(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDataModule', 'TCustomWebDispatcher') do
  with CL.AddClassN(CL.FindClass('TDataModule'),'TCustomWebDispatcher') do begin
   RegisterMethod('Constructor Create( AOwner: TComponent)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Function ActionByName( const AName : string) : TWebActionItem');
    RegisterProperty('Actions', 'TWebActionItems', iptrw);
    RegisterProperty('Action', 'TWebActionItem Integer', iptr);
    RegisterProperty('Request', 'TWebRequest', iptr);
    RegisterProperty('Response', 'TWebResponse', iptr);
    RegisterProperty('OnException', 'TWebExceptionEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IWebDispatch(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IWebDispatch') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IWebDispatch, 'IWebDispatch') do
  begin
    RegisterMethod('Function DispatchEnabled : Boolean', cdRegister);
    RegisterMethod('Function DispatchMethodType : TMethodType', cdRegister);
    RegisterMethod('Function DispatchRequest( Sender : TObject; Request : TWebRequest; Response : TWebResponse) : Boolean', cdRegister);
    RegisterMethod('Function DispatchMask : TMask', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebActionItems(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TWebActionItems') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TWebActionItems') do
  begin
    RegisterMethod('Constructor Create( WebDispatcher : TCustomWebDispatcher; ItemClass : TCollectionItemClass)');
    RegisterMethod('Function Add : TWebActionItem');
    RegisterProperty('WebDispatcher', 'TCustomWebDispatcher', iptr);
    RegisterProperty('Items', 'TWebActionItem Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebActionItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TWebActionItem') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TWebActionItem') do begin
    RegisterMethod('procedure AssignTo(Dest: TPersistent)');
    RegisterMethod('Constructor Create( Collection: TCollection)');
    RegisterMethod('Procedure Free');
    RegisterProperty('Default', 'Boolean', iptrw);
    RegisterProperty('Enabled', 'Boolean', iptrw);
    RegisterProperty('MethodType', 'TMethodType', iptrw);
    RegisterProperty('Name', 'string', iptrw);
    RegisterProperty('PathInfo', 'string', iptrw);
    RegisterProperty('Producer', 'TCustomContentProducer', iptrw);
    RegisterProperty('ProducerContent', 'TComponent', iptrw);
    RegisterProperty('OnAction', 'THTTPMethodEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomContentProducer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TCustomContentProducer') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TCustomContentProducer') do
  begin
    RegisterMethod('Function Content : string');
    RegisterMethod('Function ContentFromStream( Stream : TStream) : string');
    RegisterMethod('Function ContentFromString( const S : string) : string');
    RegisterProperty('Dispatcher', 'IWebDispatcherAccess', iptr);
    RegisterProperty('DispatcherComponent', 'TComponent', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IWebDispatcherAccess(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IWebDispatcherAccess') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IWebDispatcherAccess, 'IWebDispatcherAccess') do
  begin
    RegisterMethod('Function Request : TWebRequest', cdRegister);
    RegisterMethod('Function Response : TWebResponse', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IGetWebRequestHandler(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IGetWebRequestHandler') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IGetWebRequestHandler, 'IGetWebRequestHandler') do
  begin
    RegisterMethod('Function GetWebRequestHandler : IWebRequestHandler', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IWebDispatchActions(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IWebDispatchActions') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IWebDispatchActions, 'IWebDispatchActions') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IWebRequestHandler(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IWebRequestHandler') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IWebRequestHandler, 'IWebRequestHandler') do
  begin
    RegisterMethod('Function HandleRequest( Request : TWebRequest; Response : TWebResponse) : Boolean', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IGetWebAppServices(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IGetWebAppServices') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IGetWebAppServices, 'IGetWebAppServices') do
  begin
    RegisterMethod('Function GetWebAppServices : IWebAppServices', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IWebExceptionHandler(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IWebExceptionHandler') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IWebExceptionHandler, 'IWebExceptionHandler') do
  begin
    RegisterMethod('Procedure HandleException( E : Exception; var Handled : Boolean)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IWebAppServices(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IWebAppServices') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IWebAppServices, 'IWebAppServices') do
  begin
    RegisterMethod('Procedure InitContext( WebModuleList : TAbstractWebModuleList; Request : TWebRequest; Response : TWebResponse)', cdRegister);
    RegisterMethod('Function HandleRequest : Boolean', cdRegister);
    RegisterMethod('Procedure FinishContext', cdRegister);
    RegisterMethod('Function GetExceptionHandler : TObject', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IMultiModuleSupport(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IMultiModuleSupport') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IMultiModuleSupport, 'IMultiModuleSupport') do
  begin
    RegisterMethod('Procedure InitContext( Request : TWebRequest; Response : TWebResponse)', cdRegister);
    RegisterMethod('Procedure InitModule( AModule : TComponent)', cdRegister);
    RegisterMethod('Procedure FinishContext', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IProduceContentFrom(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IProduceContentFrom') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IProduceContentFrom, 'IProduceContentFrom') do
  begin
    RegisterMethod('Function ProduceContentFromStream( Stream : TStream) : string', cdRegister);
    RegisterMethod('Function ProduceContentFromString( const S : string) : string', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IProduceContent(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IProduceContent') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IProduceContent, 'IProduceContent') do
  begin
    RegisterMethod('Function ProduceContent : string', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IGetAppDispatcher(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IGetAppDispatcher') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IGetAppDispatcher, 'IGetAppDispatcher') do
  begin
    RegisterMethod('Function GetAppDispatcher : TComponent', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ISetAppDispatcher(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'ISetAppDispatcher') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),ISetAppDispatcher, 'ISetAppDispatcher') do
  begin
    RegisterMethod('Procedure SetAppDispatcher( const ADispatcher : TComponent)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebSession(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractWebSession') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractWebSession') do
  begin
    RegisterMethod('Procedure UpdateResponse( AResponse : TWebResponse)');
    RegisterMethod('Procedure Terminate');
    RegisterProperty('TimeoutMinutes', 'Integer', iptrw);
    RegisterProperty('Values', 'Variant string', iptrw);
    RegisterProperty('SessionID', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebResponse(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWebResponse') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWebResponse') do begin
    RegisterMethod('Constructor Create( HTTPRequest : TWebRequest)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Function GetCustomHeader( const Name : string) : String');
    RegisterMethod('Procedure SendResponse');
    RegisterMethod('Procedure SendRedirect( const URI : string)');
    RegisterMethod('Procedure SendStream( AStream : TStream)');
    RegisterMethod('Function Sent : Boolean');
    RegisterMethod('Procedure SetCookieField( Values : TStrings; const ADomain, APath : string; AExpires : TDateTime; ASecure : Boolean)');
    RegisterMethod('Procedure SetCustomHeader( const Name, Value : string)');
    RegisterProperty('Cookies', 'TCookieCollection', iptr);
    RegisterProperty('HTTPRequest', 'TWebRequest', iptr);
    RegisterProperty('Version', 'string', iptrw);
    RegisterProperty('ReasonString', 'string', iptrw);
    RegisterProperty('Server', 'string', iptrw);
    RegisterProperty('WWWAuthenticate', 'string', iptrw);
    RegisterProperty('Realm', 'string', iptrw);
    RegisterProperty('Allow', 'string', iptrw);
    RegisterProperty('Location', 'string', iptrw);
    RegisterProperty('ContentEncoding', 'string', iptrw);
    RegisterProperty('ContentType', 'string', iptrw);
    RegisterProperty('ContentVersion', 'string', iptrw);
    RegisterProperty('DerivedFrom', 'string', iptrw);
    RegisterProperty('Title', 'string', iptrw);
    RegisterProperty('StatusCode', 'Integer', iptrw);
    RegisterProperty('ContentLength', 'Integer', iptrw);
    RegisterProperty('Date', 'TDateTime', iptrw);
    RegisterProperty('Expires', 'TDateTime', iptrw);
    RegisterProperty('LastModified', 'TDateTime', iptrw);
    RegisterProperty('Content', 'string', iptrw);
    RegisterProperty('ContentStream', 'TStream', iptrw);
    RegisterProperty('LogMessage', 'string', iptrw);
    RegisterProperty('CustomHeaders', 'TStrings', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCookieCollection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TCookieCollection') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TCookieCollection') do
  begin
    RegisterMethod('Constructor Create( WebResponse : TWebResponse; ItemClass : TCollectionItemClass)');
    RegisterMethod('Function Add : TCookie');
    RegisterProperty('WebResponse', 'TWebResponse', iptr);
    RegisterProperty('Items', 'TCookie Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCookie(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TCookie') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TCookie') do begin
   //constructor Create(Collection: TCollection); override;
    //procedure AssignTo(Dest: TPersistent); override;
    RegisterMethod('Constructor Create( Collection: TCollection)');
    RegisterMethod('procedure AssignTo(Dest: TPersistent)');

    RegisterProperty('Name', 'string', iptrw);
    RegisterProperty('Value', 'string', iptrw);
    RegisterProperty('Domain', 'string', iptrw);
    RegisterProperty('Path', 'string', iptrw);
    RegisterProperty('Expires', 'TDateTime', iptrw);
    RegisterProperty('Secure', 'Boolean', iptrw);
    RegisterProperty('HeaderValue', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebRequestFile(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractWebRequestFile') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractWebRequestFile') do
  begin
    RegisterProperty('FieldName', 'string', iptr);
    RegisterProperty('FileName', 'string', iptr);
    RegisterProperty('Stream', 'TStream', iptr);
    RegisterProperty('ContentType', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebRequestFiles(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractWebRequestFiles') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractWebRequestFiles') do
  begin
    RegisterProperty('Items', 'TAbstractWebRequestFile Integer', iptr);
    SetDefaultPropery('Items');
    RegisterProperty('Count', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TContentParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAbstractContentParser', 'TContentParser') do
  with CL.AddClassN(CL.FindClass('TAbstractContentParser'),'TContentParser') do begin

   //destructor Destroy; override;
    RegisterMethod('Procedure Free');
    //function GetContentFields: TStrings; override;
     RegisterMethod('Function GetContentFields: TStrings');
    //function GetFiles: TAbstractWebRequestFiles; override;
     RegisterMethod('function GetFiles: TAbstractWebRequestFiles;');
    RegisterMethod('function CanParse(AWebRequest: TWebRequest): Boolean;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractContentParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractContentParser') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractContentParser') do
  begin
    RegisterMethod('Constructor Create( AWebRequest : TWebRequest)');
    RegisterMethod('Function CanParse( AWebRequest : TWebRequest) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebRequest(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWebRequest') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWebRequest') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Free');
    RegisterMethod('Function ReadClient( var Buffer, Count : Integer) : Integer');
    RegisterMethod('Function ReadString( Count : Integer) : string');
    RegisterMethod('Function TranslateURI( const URI : string) : string');
    RegisterMethod('Function WriteClient( var Buffer, Count : Integer) : Integer');
    RegisterMethod('Function WriteString( const AString : string) : Boolean');
    RegisterMethod('Function WriteHeaders( StatusCode : Integer; const ReasonString, Headers : string) : Boolean');
    RegisterMethod('Procedure ExtractFields( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings)');
    RegisterMethod('Procedure ExtractContentFields( Strings : TStrings)');
    RegisterMethod('Procedure ExtractCookieFields( Strings : TStrings)');
    RegisterMethod('Procedure ExtractQueryFields( Strings : TStrings)');
    RegisterMethod('Function GetFieldByName( const Name : string) : string');
    RegisterProperty('MethodType', 'TMethodType', iptr);
    RegisterProperty('ContentParser', 'TAbstractContentParser', iptr);
    RegisterProperty('ContentFields', 'TStrings', iptr);
    RegisterProperty('CookieFields', 'TStrings', iptr);
    RegisterProperty('QueryFields', 'TStrings', iptr);
    RegisterProperty('Method', 'string', iptr);
    RegisterProperty('ProtocolVersion', 'string', iptr);
    RegisterProperty('URL', 'string', iptr);
    RegisterProperty('Query', 'string', iptr);
    RegisterProperty('PathInfo', 'string', iptr);
    RegisterProperty('PathTranslated', 'string', iptr);
    RegisterProperty('Authorization', 'string', iptr);
    RegisterProperty('CacheControl', 'string', iptr);
    RegisterProperty('Cookie', 'string', iptr);
    RegisterProperty('Date', 'TDateTime', iptr);
    RegisterProperty('Accept', 'string', iptr);
    RegisterProperty('From', 'string', iptr);
    RegisterProperty('Host', 'string', iptr);
    RegisterProperty('IfModifiedSince', 'TDateTime', iptr);
    RegisterProperty('Referer', 'string', iptr);
    RegisterProperty('UserAgent', 'string', iptr);
    RegisterProperty('ContentEncoding', 'string', iptr);
    RegisterProperty('ContentType', 'string', iptr);
    RegisterProperty('ContentLength', 'Integer', iptr);
    RegisterProperty('ContentVersion', 'string', iptr);
    RegisterProperty('Content', 'string', iptr);
    RegisterProperty('Connection', 'string', iptr);
    RegisterProperty('DerivedFrom', 'string', iptr);
    RegisterProperty('Expires', 'TDateTime', iptr);
    RegisterProperty('Title', 'string', iptr);
    RegisterProperty('RemoteAddr', 'string', iptr);
    RegisterProperty('RemoteHost', 'string', iptr);
    RegisterProperty('ScriptName', 'string', iptr);
    RegisterProperty('ServerPort', 'Integer', iptr);
    RegisterProperty('InternalPathInfo', 'string', iptr);
    RegisterProperty('InternalScriptName', 'string', iptr);
    RegisterProperty('Files', 'TAbstractWebRequestFiles', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_HTTPApp(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('sDateFormat','String').SetString( '"%s", dd "%s" yyyy hh:nn:ss');
 CL.AddConstantN('MAX_STRINGS','LongInt').SetInt( 12);
 CL.AddConstantN('MAX_INTEGERS','LongInt').SetInt( 1);
 CL.AddConstantN('MAX_DATETIMES','LongInt').SetInt( 3);
  CL.AddTypeS('TWebExceptionEvent', 'Procedure ( Sender : TObject; E : Exceptio'
   +'n; var Handled : Boolean)');
  CL.AddTypeS('TMethodType', '( mtAny, mtGet, mtPut, mtPost, mtHead )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWebResponse');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractContentParser');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebRequestFiles');
  SIRegister_TWebRequest(CL);
  SIRegister_TAbstractContentParser(CL);
  SIRegister_TContentParser(CL);
  //CL.AddTypeS('TContentParserClass', 'class of TAbstractContentParser');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebRequestFile');
  SIRegister_TAbstractWebRequestFiles(CL);
  SIRegister_TAbstractWebRequestFile(CL);
  SIRegister_TCookie(CL);
  SIRegister_TCookieCollection(CL);
  SIRegister_TWebResponse(CL);
  SIRegister_TAbstractWebSession(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomWebDispatcher');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomContentProducer');
  SIRegister_ISetAppDispatcher(CL);
  SIRegister_IGetAppDispatcher(CL);
  SIRegister_IProduceContent(CL);
  SIRegister_IProduceContentFrom(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebModuleList');
  SIRegister_IMultiModuleSupport(CL);
  SIRegister_IWebAppServices(CL);
  SIRegister_IWebExceptionHandler(CL);
  SIRegister_IGetWebAppServices(CL);
  SIRegister_IWebRequestHandler(CL);
  SIRegister_IWebDispatchActions(CL);
  SIRegister_IGetWebRequestHandler(CL);
  SIRegister_IWebDispatcherAccess(CL);
  SIRegister_TCustomContentProducer(CL);
  CL.AddTypeS('THTTPMethodEvent', 'Procedure ( Sender : TObject; Request : TWeb'
   +'Request; Response : TWebResponse; var Handled : Boolean)');
  SIRegister_TWebActionItem(CL);
  SIRegister_TWebActionItems(CL);
  SIRegister_IWebDispatch(CL);
  SIRegister_TCustomWebDispatcher(CL);
  SIRegister_TWebDispatcher(CL);
  CL.AddTypeS('TWebModuleContext', 'TObject');
  SIRegister_TWebModule(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebPageInfo');
  CL.AddTypeS('TWebModuleCreateMode', '( crOnDemand, crAlways )');
  CL.AddTypeS('TWebModuleCacheMode', '( caCache, caDestroy )');
  SIRegister_TAbstractWebModuleFactory(CL);
  SIRegister_TAbstractWebPageModuleFactory(CL);
  SIRegister_TAbstractWebPageInfo(CL);
  CL.AddTypeS('TModuleAddedProc', 'Procedure ( AWebModule : TComponent)');
  SIRegister_TAbstractWebModuleList(CL);
  SIRegister_TDefaultWebAppServices(CL);
  SIRegister_EWebBrokerException(CL);
 CL.AddDelphiFunction('Function DosPathToUnixPath( const Path : string) : string');
 CL.AddDelphiFunction('Function HTTPDecode( const AStr : String) : string');
 CL.AddDelphiFunction('Function HTTPEncode( const AStr : String) : string');
 CL.AddDelphiFunction('Function HTMLEncode( const AStr : String) : String');
 CL.AddDelphiFunction('Function HTMLDecode( const AStr : String) : String');
 CL.AddDelphiFunction('Function ParseDate( const DateStr : string) : TDateTime');
 CL.AddDelphiFunction('Procedure ExtractHTTPFields( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings; StripQuotes : Boolean)');
 CL.AddDelphiFunction('Procedure ExtractHeaderFields( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings; Decode : Boolean; StripQuotes : Boolean)');
 CL.AddDelphiFunction('Function StatusString( StatusCode : Integer) : string');
 CL.AddDelphiFunction('Function UnixPathToDosPath( const Path : string) : string');
 CL.AddDelphiFunction('Function MonthStr( DateTime : TDateTime) : string');
 CL.AddDelphiFunction('Function DayOfWeekStr( DateTime : TDateTime) : string');
 //CL.AddDelphiFunction('Procedure RegisterContentParser( AClass : TContentParserClass)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleListOnModuleAdded_W(Self: TAbstractWebModuleList; const T: TModuleAddedProc);
begin Self.OnModuleAdded := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleListOnModuleAdded_R(Self: TAbstractWebModuleList; var T: TModuleAddedProc);
begin T := Self.OnModuleAdded; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleListFactory_R(Self: TAbstractWebModuleList; var T: TAbstractWebModuleFactory; const t1: Integer);
begin T := Self.Factory[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleListFactoryCount_R(Self: TAbstractWebModuleList; var T: Integer);
begin T := Self.FactoryCount; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleListItemCount_R(Self: TAbstractWebModuleList; var T: Integer);
begin T := Self.ItemCount; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleListItems_R(Self: TAbstractWebModuleList; var T: TComponent; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoFactory_W(Self: TAbstractWebPageInfo; const T: TAbstractWebPageModuleFactory);
begin Self.Factory := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoFactory_R(Self: TAbstractWebPageInfo; var T: TAbstractWebPageModuleFactory);
begin T := Self.Factory; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoViewAccess_R(Self: TAbstractWebPageInfo; var T: string);
begin T := Self.ViewAccess; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoPageFile_R(Self: TAbstractWebPageInfo; var T: string);
begin T := Self.PageFile; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoIsLoginRequired_R(Self: TAbstractWebPageInfo; var T: Boolean);
begin T := Self.IsLoginRequired; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoIsPublished_R(Self: TAbstractWebPageInfo; var T: Boolean);
begin T := Self.IsPublished; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoPageName_R(Self: TAbstractWebPageInfo; var T: string);
begin T := Self.PageName; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoPageTitle_R(Self: TAbstractWebPageInfo; var T: string);
begin T := Self.PageTitle; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoPageDescription_R(Self: TAbstractWebPageInfo; var T: string);
begin T := Self.PageDescription; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebPageInfoPageHREF_R(Self: TAbstractWebPageInfo; var T: string);
begin T := Self.PageHREF; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleFactoryWebPageInfo_R(Self: TAbstractWebModuleFactory; var T: TAbstractWebPageInfo);
begin T := Self.WebPageInfo; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleFactoryCacheMode_R(Self: TAbstractWebModuleFactory; var T: TWebModuleCacheMode);
begin T := Self.CacheMode; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleFactoryCreateMode_R(Self: TAbstractWebModuleFactory; var T: TWebModuleCreateMode);
begin T := Self.CreateMode; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleFactoryComponentClass_R(Self: TAbstractWebModuleFactory; var T: TComponentClass);
begin T := Self.ComponentClass; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleFactoryIsAppModule_R(Self: TAbstractWebModuleFactory; var T: Boolean);
begin T := Self.IsAppModule; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebModuleFactoryModuleName_R(Self: TAbstractWebModuleFactory; var T: string);
begin T := Self.ModuleName; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWebDispatcherOnException_W(Self: TCustomWebDispatcher; const T: TWebExceptionEvent);
begin Self.OnException := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWebDispatcherOnException_R(Self: TCustomWebDispatcher; var T: TWebExceptionEvent);
begin T := Self.OnException; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWebDispatcherResponse_R(Self: TCustomWebDispatcher; var T: TWebResponse);
begin T := Self.Response; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWebDispatcherRequest_R(Self: TCustomWebDispatcher; var T: TWebRequest);
begin T := Self.Request; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWebDispatcherAction_R(Self: TCustomWebDispatcher; var T: TWebActionItem; const t1: Integer);
begin T := Self.Action[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWebDispatcherActions_W(Self: TCustomWebDispatcher; const T: TWebActionItems);
begin Self.Actions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomWebDispatcherActions_R(Self: TCustomWebDispatcher; var T: TWebActionItems);
begin T := Self.Actions; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemsItems_W(Self: TWebActionItems; const T: TWebActionItem; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemsItems_R(Self: TWebActionItems; var T: TWebActionItem; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemsWebDispatcher_R(Self: TWebActionItems; var T: TCustomWebDispatcher);
begin T := Self.WebDispatcher; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemOnAction_W(Self: TWebActionItem; const T: THTTPMethodEvent);
begin Self.OnAction := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemOnAction_R(Self: TWebActionItem; var T: THTTPMethodEvent);
begin T := Self.OnAction; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemProducerContent_W(Self: TWebActionItem; const T: TComponent);
begin Self.ProducerContent := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemProducerContent_R(Self: TWebActionItem; var T: TComponent);
begin T := Self.ProducerContent; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemProducer_W(Self: TWebActionItem; const T: TCustomContentProducer);
begin Self.Producer := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemProducer_R(Self: TWebActionItem; var T: TCustomContentProducer);
begin T := Self.Producer; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemPathInfo_W(Self: TWebActionItem; const T: string);
begin Self.PathInfo := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemPathInfo_R(Self: TWebActionItem; var T: string);
begin T := Self.PathInfo; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemName_W(Self: TWebActionItem; const T: string);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemName_R(Self: TWebActionItem; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemMethodType_W(Self: TWebActionItem; const T: TMethodType);
begin Self.MethodType := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemMethodType_R(Self: TWebActionItem; var T: TMethodType);
begin T := Self.MethodType; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemEnabled_W(Self: TWebActionItem; const T: Boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemEnabled_R(Self: TWebActionItem; var T: Boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemDefault_W(Self: TWebActionItem; const T: Boolean);
begin Self.Default := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebActionItemDefault_R(Self: TWebActionItem; var T: Boolean);
begin T := Self.Default; end;

(*----------------------------------------------------------------------------*)
procedure TCustomContentProducerDispatcherComponent_R(Self: TCustomContentProducer; var T: TComponent);
begin T := Self.DispatcherComponent; end;

(*----------------------------------------------------------------------------*)
procedure TCustomContentProducerDispatcher_R(Self: TCustomContentProducer; var T: IWebDispatcherAccess);
begin T := Self.Dispatcher; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebSessionSessionID_R(Self: TAbstractWebSession; var T: string);
begin T := Self.SessionID; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebSessionValues_W(Self: TAbstractWebSession; const T: Variant; const t1: string);
begin Self.Values[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebSessionValues_R(Self: TAbstractWebSession; var T: Variant; const t1: string);
begin T := Self.Values[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebSessionTimeoutMinutes_W(Self: TAbstractWebSession; const T: Integer);
begin Self.TimeoutMinutes := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebSessionTimeoutMinutes_R(Self: TAbstractWebSession; var T: Integer);
begin T := Self.TimeoutMinutes; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseCustomHeaders_W(Self: TWebResponse; const T: TStrings);
begin Self.CustomHeaders := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseCustomHeaders_R(Self: TWebResponse; var T: TStrings);
begin T := Self.CustomHeaders; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLogMessage_W(Self: TWebResponse; const T: string);
begin Self.LogMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLogMessage_R(Self: TWebResponse; var T: string);
begin T := Self.LogMessage; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentStream_W(Self: TWebResponse; const T: TStream);
begin Self.ContentStream := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentStream_R(Self: TWebResponse; var T: TStream);
begin T := Self.ContentStream; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContent_W(Self: TWebResponse; const T: string);
begin Self.Content := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContent_R(Self: TWebResponse; var T: string);
begin T := Self.Content; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLastModified_W(Self: TWebResponse; const T: TDateTime);
begin Self.LastModified := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLastModified_R(Self: TWebResponse; var T: TDateTime);
begin T := Self.LastModified; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseExpires_W(Self: TWebResponse; const T: TDateTime);
begin Self.Expires := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseExpires_R(Self: TWebResponse; var T: TDateTime);
begin T := Self.Expires; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDate_W(Self: TWebResponse; const T: TDateTime);
begin Self.Date := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDate_R(Self: TWebResponse; var T: TDateTime);
begin T := Self.Date; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentLength_W(Self: TWebResponse; const T: Integer);
begin Self.ContentLength := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentLength_R(Self: TWebResponse; var T: Integer);
begin T := Self.ContentLength; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseStatusCode_W(Self: TWebResponse; const T: Integer);
begin Self.StatusCode := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseStatusCode_R(Self: TWebResponse; var T: Integer);
begin T := Self.StatusCode; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseTitle_W(Self: TWebResponse; const T: string);
begin Self.Title := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseTitle_R(Self: TWebResponse; var T: string);
begin T := Self.Title; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDerivedFrom_W(Self: TWebResponse; const T: string);
begin Self.DerivedFrom := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDerivedFrom_R(Self: TWebResponse; var T: string);
begin T := Self.DerivedFrom; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentVersion_W(Self: TWebResponse; const T: string);
begin Self.ContentVersion := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentVersion_R(Self: TWebResponse; var T: string);
begin T := Self.ContentVersion; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentType_W(Self: TWebResponse; const T: string);
begin Self.ContentType := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentType_R(Self: TWebResponse; var T: string);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentEncoding_W(Self: TWebResponse; const T: string);
begin Self.ContentEncoding := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentEncoding_R(Self: TWebResponse; var T: string);
begin T := Self.ContentEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLocation_W(Self: TWebResponse; const T: string);
begin Self.Location := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLocation_R(Self: TWebResponse; var T: string);
begin T := Self.Location; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseAllow_W(Self: TWebResponse; const T: string);
begin Self.Allow := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseAllow_R(Self: TWebResponse; var T: string);
begin T := Self.Allow; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseRealm_W(Self: TWebResponse; const T: string);
begin Self.Realm := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseRealm_R(Self: TWebResponse; var T: string);
begin T := Self.Realm; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseWWWAuthenticate_W(Self: TWebResponse; const T: string);
begin Self.WWWAuthenticate := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseWWWAuthenticate_R(Self: TWebResponse; var T: string);
begin T := Self.WWWAuthenticate; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseServer_W(Self: TWebResponse; const T: string);
begin Self.Server := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseServer_R(Self: TWebResponse; var T: string);
begin T := Self.Server; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseReasonString_W(Self: TWebResponse; const T: string);
begin Self.ReasonString := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseReasonString_R(Self: TWebResponse; var T: string);
begin T := Self.ReasonString; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseVersion_W(Self: TWebResponse; const T: string);
begin Self.Version := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseVersion_R(Self: TWebResponse; var T: string);
begin T := Self.Version; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseHTTPRequest_R(Self: TWebResponse; var T: TWebRequest);
begin T := Self.HTTPRequest; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseCookies_R(Self: TWebResponse; var T: TCookieCollection);
begin T := Self.Cookies; end;

(*----------------------------------------------------------------------------*)
procedure TCookieCollectionItems_W(Self: TCookieCollection; const T: TCookie; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieCollectionItems_R(Self: TCookieCollection; var T: TCookie; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCookieCollectionWebResponse_R(Self: TCookieCollection; var T: TWebResponse);
begin T := Self.WebResponse; end;

(*----------------------------------------------------------------------------*)
procedure TCookieHeaderValue_R(Self: TCookie; var T: string);
begin T := Self.HeaderValue; end;

(*----------------------------------------------------------------------------*)
procedure TCookieSecure_W(Self: TCookie; const T: Boolean);
begin Self.Secure := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieSecure_R(Self: TCookie; var T: Boolean);
begin T := Self.Secure; end;

(*----------------------------------------------------------------------------*)
procedure TCookieExpires_W(Self: TCookie; const T: TDateTime);
begin Self.Expires := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieExpires_R(Self: TCookie; var T: TDateTime);
begin T := Self.Expires; end;

(*----------------------------------------------------------------------------*)
procedure TCookiePath_W(Self: TCookie; const T: string);
begin Self.Path := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookiePath_R(Self: TCookie; var T: string);
begin T := Self.Path; end;

(*----------------------------------------------------------------------------*)
procedure TCookieDomain_W(Self: TCookie; const T: string);
begin Self.Domain := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieDomain_R(Self: TCookie; var T: string);
begin T := Self.Domain; end;

(*----------------------------------------------------------------------------*)
procedure TCookieValue_W(Self: TCookie; const T: string);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieValue_R(Self: TCookie; var T: string);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TCookieName_W(Self: TCookie; const T: string);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieName_R(Self: TCookie; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileContentType_R(Self: TAbstractWebRequestFile; var T: string);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileStream_R(Self: TAbstractWebRequestFile; var T: TStream);
begin T := Self.Stream; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileFileName_R(Self: TAbstractWebRequestFile; var T: string);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileFieldName_R(Self: TAbstractWebRequestFile; var T: string);
begin T := Self.FieldName; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFilesCount_R(Self: TAbstractWebRequestFiles; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFilesItems_R(Self: TAbstractWebRequestFiles; var T: TAbstractWebRequestFile; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestFiles_R(Self: TWebRequest; var T: TAbstractWebRequestFiles);
begin T := Self.Files; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestInternalScriptName_R(Self: TWebRequest; var T: string);
begin T := Self.InternalScriptName; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestInternalPathInfo_R(Self: TWebRequest; var T: string);
begin T := Self.InternalPathInfo; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestServerPort_R(Self: TWebRequest; var T: Integer);
begin T := Self.ServerPort; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestScriptName_R(Self: TWebRequest; var T: string);
begin T := Self.ScriptName; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestRemoteHost_R(Self: TWebRequest; var T: string);
begin T := Self.RemoteHost; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestRemoteAddr_R(Self: TWebRequest; var T: string);
begin T := Self.RemoteAddr; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestTitle_R(Self: TWebRequest; var T: string);
begin T := Self.Title; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestExpires_R(Self: TWebRequest; var T: TDateTime);
begin T := Self.Expires; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestDerivedFrom_R(Self: TWebRequest; var T: string);
begin T := Self.DerivedFrom; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestConnection_R(Self: TWebRequest; var T: string);
begin T := Self.Connection; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContent_R(Self: TWebRequest; var T: string);
begin T := Self.Content; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentVersion_R(Self: TWebRequest; var T: string);
begin T := Self.ContentVersion; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentLength_R(Self: TWebRequest; var T: Integer);
begin T := Self.ContentLength; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentType_R(Self: TWebRequest; var T: string);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentEncoding_R(Self: TWebRequest; var T: string);
begin T := Self.ContentEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestUserAgent_R(Self: TWebRequest; var T: string);
begin T := Self.UserAgent; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestReferer_R(Self: TWebRequest; var T: string);
begin T := Self.Referer; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestIfModifiedSince_R(Self: TWebRequest; var T: TDateTime);
begin T := Self.IfModifiedSince; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestHost_R(Self: TWebRequest; var T: string);
begin T := Self.Host; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestFrom_R(Self: TWebRequest; var T: string);
begin T := Self.From; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestAccept_R(Self: TWebRequest; var T: string);
begin T := Self.Accept; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestDate_R(Self: TWebRequest; var T: TDateTime);
begin T := Self.Date; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestCookie_R(Self: TWebRequest; var T: string);
begin T := Self.Cookie; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestCacheControl_R(Self: TWebRequest; var T: string);
begin T := Self.CacheControl; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestAuthorization_R(Self: TWebRequest; var T: string);
begin T := Self.Authorization; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestPathTranslated_R(Self: TWebRequest; var T: string);
begin T := Self.PathTranslated; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestPathInfo_R(Self: TWebRequest; var T: string);
begin T := Self.PathInfo; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestQuery_R(Self: TWebRequest; var T: string);
begin T := Self.Query; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestURL_R(Self: TWebRequest; var T: string);
begin T := Self.URL; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestProtocolVersion_R(Self: TWebRequest; var T: string);
begin T := Self.ProtocolVersion; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestMethod_R(Self: TWebRequest; var T: string);
begin T := Self.Method; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestQueryFields_R(Self: TWebRequest; var T: TStrings);
begin T := Self.QueryFields; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestCookieFields_R(Self: TWebRequest; var T: TStrings);
begin T := Self.CookieFields; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentFields_R(Self: TWebRequest; var T: TStrings);
begin T := Self.ContentFields; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentParser_R(Self: TWebRequest; var T: TAbstractContentParser);
begin T := Self.ContentParser; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestMethodType_R(Self: TWebRequest; var T: TMethodType);
begin T := Self.MethodType; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_HTTPApp_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@DosPathToUnixPath, 'DosPathToUnixPath', cdRegister);
 S.RegisterDelphiFunction(@HTTPDecode, 'HTTPDecode', cdRegister);
 S.RegisterDelphiFunction(@HTTPEncode, 'HTTPEncode', cdRegister);
 S.RegisterDelphiFunction(@HTMLEncode, 'HTMLEncode', cdRegister);
 S.RegisterDelphiFunction(@HTMLDecode, 'HTMLDecode', cdRegister);
 S.RegisterDelphiFunction(@ParseDate, 'ParseDate', cdRegister);
 S.RegisterDelphiFunction(@ExtractHTTPFields, 'ExtractHTTPFields', cdRegister);
 S.RegisterDelphiFunction(@ExtractHeaderFields, 'ExtractHeaderFields', cdRegister);
 S.RegisterDelphiFunction(@StatusString, 'StatusString', cdRegister);
 S.RegisterDelphiFunction(@UnixPathToDosPath, 'UnixPathToDosPath', cdRegister);
 S.RegisterDelphiFunction(@MonthStr, 'MonthStr', cdRegister);
 S.RegisterDelphiFunction(@DayOfWeekStr, 'DayOfWeekStr', cdRegister);
 //S.RegisterDelphiFunction(@RegisterContentParser, 'RegisterContentParser', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EWebBrokerException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EWebBrokerException) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDefaultWebAppServices(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDefaultWebAppServices) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebModuleList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebModuleList) do begin
    //RegisterVirtualAbstractMethod(@TAbstractWebModuleList, @!.FindModuleClass, 'FindModuleClass');
    //RegisterVirtualAbstractMethod(@TAbstractWebModuleList, @!.FindModuleName, 'FindModuleName');
    //RegisterVirtualAbstractMethod(@TAbstractWebModuleList, @!.AddModuleClass, 'AddModuleClass');
    //RegisterVirtualAbstractMethod(@TAbstractWebModuleList, @!.AddModuleName, 'AddModuleName');
    RegisterPropertyHelper(@TAbstractWebModuleListItems_R,nil,'Items');
    RegisterPropertyHelper(@TAbstractWebModuleListItemCount_R,nil,'ItemCount');
    RegisterPropertyHelper(@TAbstractWebModuleListFactoryCount_R,nil,'FactoryCount');
    RegisterPropertyHelper(@TAbstractWebModuleListFactory_R,nil,'Factory');
    RegisterPropertyHelper(@TAbstractWebModuleListOnModuleAdded_R,@TAbstractWebModuleListOnModuleAdded_W,'OnModuleAdded');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebPageInfo(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebPageInfo) do begin
    RegisterPropertyHelper(@TAbstractWebPageInfoPageHREF_R,nil,'PageHREF');
    RegisterPropertyHelper(@TAbstractWebPageInfoPageDescription_R,nil,'PageDescription');
    RegisterPropertyHelper(@TAbstractWebPageInfoPageTitle_R,nil,'PageTitle');
    RegisterPropertyHelper(@TAbstractWebPageInfoPageName_R,nil,'PageName');
    RegisterPropertyHelper(@TAbstractWebPageInfoIsPublished_R,nil,'IsPublished');
    RegisterPropertyHelper(@TAbstractWebPageInfoIsLoginRequired_R,nil,'IsLoginRequired');
    RegisterPropertyHelper(@TAbstractWebPageInfoPageFile_R,nil,'PageFile');
    RegisterPropertyHelper(@TAbstractWebPageInfoViewAccess_R,nil,'ViewAccess');
    RegisterPropertyHelper(@TAbstractWebPageInfoFactory_R,@TAbstractWebPageInfoFactory_W,'Factory');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebPageModuleFactory(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebPageModuleFactory) do
  begin
    RegisterConstructor(@TAbstractWebPageModuleFactory.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebModuleFactory(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebModuleFactory) do begin
    //RegisterVirtualAbstractMethod(@TAbstractWebModuleFactory, @!.GetModule, 'GetModule');
    //RegisterVirtualAbstractMethod(@TAbstractWebModuleFactory, @!.PreventDestruction, 'PreventDestruction');
    RegisterPropertyHelper(@TAbstractWebModuleFactoryModuleName_R,nil,'ModuleName');
    RegisterPropertyHelper(@TAbstractWebModuleFactoryIsAppModule_R,nil,'IsAppModule');
    RegisterPropertyHelper(@TAbstractWebModuleFactoryComponentClass_R,nil,'ComponentClass');
    RegisterPropertyHelper(@TAbstractWebModuleFactoryCreateMode_R,nil,'CreateMode');
    RegisterPropertyHelper(@TAbstractWebModuleFactoryCacheMode_R,nil,'CacheMode');
    RegisterPropertyHelper(@TAbstractWebModuleFactoryWebPageInfo_R,nil,'WebPageInfo');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebModule(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebModule) do begin
    RegisterConstructor(@TWebModule.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebDispatcher(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebDispatcher) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomWebDispatcher(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomWebDispatcher) do begin
  RegisterConstructor(@TCustomWebDispatcher.Create, 'Create');
   RegisterMethod(@TCustomWebDispatcher.Destroy, 'Free');
    RegisterMethod(@TCustomWebDispatcher.ActionByName, 'ActionByName');
    RegisterPropertyHelper(@TCustomWebDispatcherActions_R,@TCustomWebDispatcherActions_W,'Actions');
    RegisterPropertyHelper(@TCustomWebDispatcherAction_R,nil,'Action');
    RegisterPropertyHelper(@TCustomWebDispatcherRequest_R,nil,'Request');
    RegisterPropertyHelper(@TCustomWebDispatcherResponse_R,nil,'Response');
    RegisterPropertyHelper(@TCustomWebDispatcherOnException_R,@TCustomWebDispatcherOnException_W,'OnException');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebActionItems(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebActionItems) do
  begin
    RegisterConstructor(@TWebActionItems.Create, 'Create');
    RegisterMethod(@TWebActionItems.Add, 'Add');
    RegisterPropertyHelper(@TWebActionItemsWebDispatcher_R,nil,'WebDispatcher');
    RegisterPropertyHelper(@TWebActionItemsItems_R,@TWebActionItemsItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebActionItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebActionItem) do begin
  RegisterConstructor(@TWebActionItem.Create, 'Create');
    RegisterMethod(@TWebActionItem.AssignTo, 'AssignTo');
      RegisterMethod(@TWebActionItem.Destroy, 'Free');
    RegisterPropertyHelper(@TWebActionItemDefault_R,@TWebActionItemDefault_W,'Default');
    RegisterPropertyHelper(@TWebActionItemEnabled_R,@TWebActionItemEnabled_W,'Enabled');
    RegisterPropertyHelper(@TWebActionItemMethodType_R,@TWebActionItemMethodType_W,'MethodType');
    RegisterPropertyHelper(@TWebActionItemName_R,@TWebActionItemName_W,'Name');
    RegisterPropertyHelper(@TWebActionItemPathInfo_R,@TWebActionItemPathInfo_W,'PathInfo');
    RegisterPropertyHelper(@TWebActionItemProducer_R,@TWebActionItemProducer_W,'Producer');
    RegisterPropertyHelper(@TWebActionItemProducerContent_R,@TWebActionItemProducerContent_W,'ProducerContent');
    RegisterPropertyHelper(@TWebActionItemOnAction_R,@TWebActionItemOnAction_W,'OnAction');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomContentProducer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomContentProducer) do
  begin
    RegisterVirtualMethod(@TCustomContentProducer.Content, 'Content');
    RegisterVirtualMethod(@TCustomContentProducer.ContentFromStream, 'ContentFromStream');
    RegisterVirtualMethod(@TCustomContentProducer.ContentFromString, 'ContentFromString');
    RegisterPropertyHelper(@TCustomContentProducerDispatcher_R,nil,'Dispatcher');
    RegisterPropertyHelper(@TCustomContentProducerDispatcherComponent_R,nil,'DispatcherComponent');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebSession(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebSession) do begin
    //RegisterVirtualAbstractMethod(@TAbstractWebSession, @!.UpdateResponse, 'UpdateResponse');
    //RegisterVirtualAbstractMethod(@TAbstractWebSession, @!.Terminate, 'Terminate');
    RegisterPropertyHelper(@TAbstractWebSessionTimeoutMinutes_R,@TAbstractWebSessionTimeoutMinutes_W,'TimeoutMinutes');
    RegisterPropertyHelper(@TAbstractWebSessionValues_R,@TAbstractWebSessionValues_W,'Values');
    RegisterPropertyHelper(@TAbstractWebSessionSessionID_R,nil,'SessionID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebResponse(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebResponse) do
  begin
    RegisterConstructor(@TWebResponse.Create, 'Create');
    RegisterMethod(@TWebResponse.GetCustomHeader, 'GetCustomHeader');
      RegisterMethod(@TWebResponse.Destroy, 'Free');
    //RegisterVirtualAbstractMethod(@TWebResponse, @!.SendResponse, 'SendResponse');
    //RegisterVirtualAbstractMethod(@TWebResponse, @!.SendRedirect, 'SendRedirect');
    //RegisterVirtualAbstractMethod(@TWebResponse, @!.SendStream, 'SendStream');
    RegisterVirtualMethod(@TWebResponse.Sent, 'Sent');
    RegisterMethod(@TWebResponse.SetCookieField, 'SetCookieField');
    RegisterMethod(@TWebResponse.SetCustomHeader, 'SetCustomHeader');
    RegisterPropertyHelper(@TWebResponseCookies_R,nil,'Cookies');
    RegisterPropertyHelper(@TWebResponseHTTPRequest_R,nil,'HTTPRequest');
    RegisterPropertyHelper(@TWebResponseVersion_R,@TWebResponseVersion_W,'Version');
    RegisterPropertyHelper(@TWebResponseReasonString_R,@TWebResponseReasonString_W,'ReasonString');
    RegisterPropertyHelper(@TWebResponseServer_R,@TWebResponseServer_W,'Server');
    RegisterPropertyHelper(@TWebResponseWWWAuthenticate_R,@TWebResponseWWWAuthenticate_W,'WWWAuthenticate');
    RegisterPropertyHelper(@TWebResponseRealm_R,@TWebResponseRealm_W,'Realm');
    RegisterPropertyHelper(@TWebResponseAllow_R,@TWebResponseAllow_W,'Allow');
    RegisterPropertyHelper(@TWebResponseLocation_R,@TWebResponseLocation_W,'Location');
    RegisterPropertyHelper(@TWebResponseContentEncoding_R,@TWebResponseContentEncoding_W,'ContentEncoding');
    RegisterPropertyHelper(@TWebResponseContentType_R,@TWebResponseContentType_W,'ContentType');
    RegisterPropertyHelper(@TWebResponseContentVersion_R,@TWebResponseContentVersion_W,'ContentVersion');
    RegisterPropertyHelper(@TWebResponseDerivedFrom_R,@TWebResponseDerivedFrom_W,'DerivedFrom');
    RegisterPropertyHelper(@TWebResponseTitle_R,@TWebResponseTitle_W,'Title');
    RegisterPropertyHelper(@TWebResponseStatusCode_R,@TWebResponseStatusCode_W,'StatusCode');
    RegisterPropertyHelper(@TWebResponseContentLength_R,@TWebResponseContentLength_W,'ContentLength');
    RegisterPropertyHelper(@TWebResponseDate_R,@TWebResponseDate_W,'Date');
    RegisterPropertyHelper(@TWebResponseExpires_R,@TWebResponseExpires_W,'Expires');
    RegisterPropertyHelper(@TWebResponseLastModified_R,@TWebResponseLastModified_W,'LastModified');
    RegisterPropertyHelper(@TWebResponseContent_R,@TWebResponseContent_W,'Content');
    RegisterPropertyHelper(@TWebResponseContentStream_R,@TWebResponseContentStream_W,'ContentStream');
    RegisterPropertyHelper(@TWebResponseLogMessage_R,@TWebResponseLogMessage_W,'LogMessage');
    RegisterPropertyHelper(@TWebResponseCustomHeaders_R,@TWebResponseCustomHeaders_W,'CustomHeaders');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCookieCollection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCookieCollection) do
  begin
    RegisterConstructor(@TCookieCollection.Create, 'Create');
    RegisterMethod(@TCookieCollection.Add, 'Add');
    RegisterPropertyHelper(@TCookieCollectionWebResponse_R,nil,'WebResponse');
    RegisterPropertyHelper(@TCookieCollectionItems_R,@TCookieCollectionItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCookie(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCookie) do begin
   RegisterConstructor(@TCookie.Create, 'Create');
    RegisterMethod(@TCookie.AssignTo, 'AssignTo');
    RegisterPropertyHelper(@TCookieName_R,@TCookieName_W,'Name');
    RegisterPropertyHelper(@TCookieValue_R,@TCookieValue_W,'Value');
    RegisterPropertyHelper(@TCookieDomain_R,@TCookieDomain_W,'Domain');
    RegisterPropertyHelper(@TCookiePath_R,@TCookiePath_W,'Path');
    RegisterPropertyHelper(@TCookieExpires_R,@TCookieExpires_W,'Expires');
    RegisterPropertyHelper(@TCookieSecure_R,@TCookieSecure_W,'Secure');
    RegisterPropertyHelper(@TCookieHeaderValue_R,nil,'HeaderValue');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebRequestFile(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebRequestFile) do
  begin
    RegisterPropertyHelper(@TAbstractWebRequestFileFieldName_R,nil,'FieldName');
    RegisterPropertyHelper(@TAbstractWebRequestFileFileName_R,nil,'FileName');
    RegisterPropertyHelper(@TAbstractWebRequestFileStream_R,nil,'Stream');
    RegisterPropertyHelper(@TAbstractWebRequestFileContentType_R,nil,'ContentType');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebRequestFiles(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebRequestFiles) do
  begin
    RegisterPropertyHelper(@TAbstractWebRequestFilesItems_R,nil,'Items');
    RegisterPropertyHelper(@TAbstractWebRequestFilesCount_R,nil,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TContentParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TContentParser) do begin
    RegisterMethod(@TContentParser.CanParse, 'CanParse');
      RegisterMethod(@TContentParser.Destroy, 'Free');
       RegisterMethod(@TContentParser.GetContentFields, 'GetContentFields');
        RegisterMethod(@TContentParser.GetFiles, 'GetFiles');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractContentParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractContentParser) do
  begin
    RegisterVirtualConstructor(@TAbstractContentParser.Create, 'Create');
    RegisterVirtualMethod(@TAbstractContentParser.CanParse, 'CanParse');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebRequest(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebRequest) do begin
    RegisterConstructor(@TWebRequest.Create, 'Create');
      RegisterMethod(@TWebRequest.Destroy, 'Free');
    {RegisterVirtualAbstractMethod(@TWebRequest, @!.ReadClient, 'ReadClient');
    RegisterVirtualAbstractMethod(@TWebRequest, @!.ReadString, 'ReadString');
    RegisterVirtualAbstractMethod(@TWebRequest, @!.TranslateURI, 'TranslateURI');
    RegisterVirtualAbstractMethod(@TWebRequest, @!.WriteClient, 'WriteClient');
    RegisterVirtualAbstractMethod(@TWebRequest, @!.WriteString, 'WriteString');
    RegisterVirtualAbstractMethod(@TWebRequest, @!.WriteHeaders, 'WriteHeaders');}
    RegisterMethod(@TWebRequest.ExtractFields, 'ExtractFields');
    RegisterMethod(@TWebRequest.ExtractContentFields, 'ExtractContentFields');
    RegisterMethod(@TWebRequest.ExtractCookieFields, 'ExtractCookieFields');
    RegisterMethod(@TWebRequest.ExtractQueryFields, 'ExtractQueryFields');
    //RegisterVirtualAbstractMethod(@TWebRequest, @!.GetFieldByName, 'GetFieldByName');
    RegisterPropertyHelper(@TWebRequestMethodType_R,nil,'MethodType');
    RegisterPropertyHelper(@TWebRequestContentParser_R,nil,'ContentParser');
    RegisterPropertyHelper(@TWebRequestContentFields_R,nil,'ContentFields');
    RegisterPropertyHelper(@TWebRequestCookieFields_R,nil,'CookieFields');
    RegisterPropertyHelper(@TWebRequestQueryFields_R,nil,'QueryFields');
    RegisterPropertyHelper(@TWebRequestMethod_R,nil,'Method');
    RegisterPropertyHelper(@TWebRequestProtocolVersion_R,nil,'ProtocolVersion');
    RegisterPropertyHelper(@TWebRequestURL_R,nil,'URL');
    RegisterPropertyHelper(@TWebRequestQuery_R,nil,'Query');
    RegisterPropertyHelper(@TWebRequestPathInfo_R,nil,'PathInfo');
    RegisterPropertyHelper(@TWebRequestPathTranslated_R,nil,'PathTranslated');
    RegisterPropertyHelper(@TWebRequestAuthorization_R,nil,'Authorization');
    RegisterPropertyHelper(@TWebRequestCacheControl_R,nil,'CacheControl');
    RegisterPropertyHelper(@TWebRequestCookie_R,nil,'Cookie');
    RegisterPropertyHelper(@TWebRequestDate_R,nil,'Date');
    RegisterPropertyHelper(@TWebRequestAccept_R,nil,'Accept');
    RegisterPropertyHelper(@TWebRequestFrom_R,nil,'From');
    RegisterPropertyHelper(@TWebRequestHost_R,nil,'Host');
    RegisterPropertyHelper(@TWebRequestIfModifiedSince_R,nil,'IfModifiedSince');
    RegisterPropertyHelper(@TWebRequestReferer_R,nil,'Referer');
    RegisterPropertyHelper(@TWebRequestUserAgent_R,nil,'UserAgent');
    RegisterPropertyHelper(@TWebRequestContentEncoding_R,nil,'ContentEncoding');
    RegisterPropertyHelper(@TWebRequestContentType_R,nil,'ContentType');
    RegisterPropertyHelper(@TWebRequestContentLength_R,nil,'ContentLength');
    RegisterPropertyHelper(@TWebRequestContentVersion_R,nil,'ContentVersion');
    RegisterPropertyHelper(@TWebRequestContent_R,nil,'Content');
    RegisterPropertyHelper(@TWebRequestConnection_R,nil,'Connection');
    RegisterPropertyHelper(@TWebRequestDerivedFrom_R,nil,'DerivedFrom');
    RegisterPropertyHelper(@TWebRequestExpires_R,nil,'Expires');
    RegisterPropertyHelper(@TWebRequestTitle_R,nil,'Title');
    RegisterPropertyHelper(@TWebRequestRemoteAddr_R,nil,'RemoteAddr');
    RegisterPropertyHelper(@TWebRequestRemoteHost_R,nil,'RemoteHost');
    RegisterPropertyHelper(@TWebRequestScriptName_R,nil,'ScriptName');
    RegisterPropertyHelper(@TWebRequestServerPort_R,nil,'ServerPort');
    RegisterPropertyHelper(@TWebRequestInternalPathInfo_R,nil,'InternalPathInfo');
    RegisterPropertyHelper(@TWebRequestInternalScriptName_R,nil,'InternalScriptName');
    RegisterPropertyHelper(@TWebRequestFiles_R,nil,'Files');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_HTTPApp(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebResponse) do
  with CL.Add(TAbstractContentParser) do
  with CL.Add(TAbstractWebRequestFiles) do
  RIRegister_TWebRequest(CL);
  RIRegister_TAbstractContentParser(CL);
  RIRegister_TContentParser(CL);
  with CL.Add(TAbstractWebRequestFile) do
  RIRegister_TAbstractWebRequestFiles(CL);
  RIRegister_TAbstractWebRequestFile(CL);
  RIRegister_TCookie(CL);
  RIRegister_TCookieCollection(CL);
  RIRegister_TWebResponse(CL);
  RIRegister_TAbstractWebSession(CL);
  with CL.Add(TCustomWebDispatcher) do
  with CL.Add(TCustomContentProducer) do
  with CL.Add(TAbstractWebModuleList) do
  RIRegister_TCustomContentProducer(CL);
  RIRegister_TWebActionItem(CL);
  RIRegister_TWebActionItems(CL);
  RIRegister_TCustomWebDispatcher(CL);
  RIRegister_TWebDispatcher(CL);
  RIRegister_TWebModule(CL);
  with CL.Add(TAbstractWebPageInfo) do
  RIRegister_TAbstractWebModuleFactory(CL);
  RIRegister_TAbstractWebPageModuleFactory(CL);
  RIRegister_TAbstractWebPageInfo(CL);
  RIRegister_TAbstractWebModuleList(CL);
  RIRegister_TDefaultWebAppServices(CL);
  RIRegister_EWebBrokerException(CL);
end;

 
 
{ TPSImport_HTTPApp }
(*----------------------------------------------------------------------------*)
procedure TPSImport_HTTPApp.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_HTTPApp(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_HTTPApp.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_HTTPApp_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
