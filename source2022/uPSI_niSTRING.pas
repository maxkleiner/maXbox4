unit uPSI_niSTRING;
{
This file has been generated by UnitParser v0.7, written by M. Knight

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_niSTRING = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_niSTRING(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_niSTRING_Routines(S: TPSExec);
procedure RIRegister_niSTRING(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   niSTRING
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_niSTRING]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_niSTRING(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TCharset', 'set of char');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EniStringError');
 CL.AddDelphiFunction('Function DelimiterPosn( const sString : string; const sDelimiters : string) : integer;');
 CL.AddDelphiFunction('Function DelimiterPosn1( const sString : string; const sDelimiters : string; out cDelimiter : char) : integer;');
 CL.AddDelphiFunction('Function StrBefore( const sString : string; const sDelimiters : string) : string;');
 CL.AddDelphiFunction('Function StrBefore1( const sString : string; const sDelimiters : string; out cDelimiter : char) : string;');
 CL.AddDelphiFunction('Function StrAfter( const sString : string; const sDelimiters : string) : string;');
 CL.AddDelphiFunction('Function StrAfter1( const sString : string; const sDelimiters : string; out cDelimiter : char) : string;');
 CL.AddDelphiFunction('Function StrParse( var sString : string; const sDelimiters : string) : string;');
 CL.AddDelphiFunction('Function StrParse1( var sString : string; const sDelimiters : string; out cDelimiter : char) : string;');
 CL.AddDelphiFunction('Function StrFilter( const sString : string; xValidChars : TCharSet) : string');
 CL.AddDelphiFunction('Function StrHasPrefix( const sString : string; const sPrefix : string) : boolean');
 CL.AddDelphiFunction('Function StrLessPrefix( const sString : string; const sPrefix : string) : string');
 CL.AddDelphiFunction('Function StrHasSuffix( const sString : string; const sSuffix : string) : boolean');
 CL.AddDelphiFunction('Function StrLessSuffix( const sString : string; const sSuffix : string) : string');
 CL.AddDelphiFunction('Function IfStr( const bCondition : boolean; const sTrue : string; const sFalse : string) : string');
 CL.AddDelphiFunction('Function StrEmpty( const sString : string) : boolean');
 CL.AddDelphiFunction('Procedure AddStringTerm( var sString : string; const sTerm : string; const sSeparator : string)');
 CL.AddDelphiFunction('Function FormatCount( iCount : integer; const sSingular : string; const sPlural : string) : string');
 CL.AddDelphiFunction('Function StrPad( const sString : string; const sPad : string; const iLength : integer) : string');
 CL.AddConstantN('csEOLN','String').SetString( #13#10);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function StrParse1_P( var sString : string; const sDelimiters : string; out cDelimiter : char) : string;
Begin Result := niSTRING.StrParse(sString, sDelimiters, cDelimiter); END;

(*----------------------------------------------------------------------------*)
Function StrParse_P( var sString : string; const sDelimiters : string) : string;
Begin Result := niSTRING.StrParse(sString, sDelimiters); END;

(*----------------------------------------------------------------------------*)
Function StrAfter1_P( const sString : string; const sDelimiters : string; out cDelimiter : char) : string;
Begin Result := niSTRING.StrAfter(sString, sDelimiters, cDelimiter); END;

(*----------------------------------------------------------------------------*)
Function StrAfter_P( const sString : string; const sDelimiters : string) : string;
Begin Result := niSTRING.StrAfter(sString, sDelimiters); END;

(*----------------------------------------------------------------------------*)
Function StrBefore1_P( const sString : string; const sDelimiters : string; out cDelimiter : char) : string;
Begin Result := niSTRING.StrBefore(sString, sDelimiters, cDelimiter); END;

(*----------------------------------------------------------------------------*)
Function StrBefore_P( const sString : string; const sDelimiters : string) : string;
Begin Result := niSTRING.StrBefore(sString, sDelimiters); END;

(*----------------------------------------------------------------------------*)
Function DelimiterPosn1_P( const sString : string; const sDelimiters : string; out cDelimiter : char) : integer;
Begin Result := niSTRING.DelimiterPosn(sString, sDelimiters, cDelimiter); END;

(*----------------------------------------------------------------------------*)
Function DelimiterPosn_P( const sString : string; const sDelimiters : string) : integer;
Begin Result := niSTRING.DelimiterPosn(sString, sDelimiters); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_niSTRING_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@DelimiterPosn, 'DelimiterPosn', cdRegister);
 S.RegisterDelphiFunction(@DelimiterPosn1_P, 'DelimiterPosn1', cdRegister);
 S.RegisterDelphiFunction(@StrBefore, 'StrBefore', cdRegister);
 S.RegisterDelphiFunction(@StrBefore1_P, 'StrBefore1', cdRegister);
 S.RegisterDelphiFunction(@StrAfter, 'StrAfter', cdRegister);
 S.RegisterDelphiFunction(@StrAfter1_P, 'StrAfter1', cdRegister);
 S.RegisterDelphiFunction(@StrParse, 'StrParse', cdRegister);
 S.RegisterDelphiFunction(@StrParse1_P, 'StrParse1', cdRegister);
 S.RegisterDelphiFunction(@StrFilter, 'StrFilter', cdRegister);
 S.RegisterDelphiFunction(@StrHasPrefix, 'StrHasPrefix', cdRegister);
 S.RegisterDelphiFunction(@StrLessPrefix, 'StrLessPrefix', cdRegister);
 S.RegisterDelphiFunction(@StrHasSuffix, 'StrHasSuffix', cdRegister);
 S.RegisterDelphiFunction(@StrLessSuffix, 'StrLessSuffix', cdRegister);
 S.RegisterDelphiFunction(@IfStr, 'IfStr', cdRegister);
 S.RegisterDelphiFunction(@StrEmpty, 'StrEmpty', cdRegister);
 S.RegisterDelphiFunction(@AddStringTerm, 'AddStringTerm', cdRegister);
 S.RegisterDelphiFunction(@FormatCount, 'FormatCount', cdRegister);
 S.RegisterDelphiFunction(@StrPad, 'StrPad', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_niSTRING(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EniStringError) do
end;

 
 
{ TPSImport_niSTRING }
(*----------------------------------------------------------------------------*)
procedure TPSImport_niSTRING.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_niSTRING(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_niSTRING.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_niSTRING(ri);
  RIRegister_niSTRING_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
