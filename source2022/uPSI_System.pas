unit uPSI_System;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_System = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_System(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_System_Routines(S: TPSExec);

procedure Register;

implementation


uses
   System
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_System]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_System(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('RTLVersion','Extended').setExtended( 18.00);
 CL.AddConstantN('GPL','Boolean')BoolToStr( True);
 CL.AddConstantN('varEmpty','LongWord').SetUInt( $0000);
 CL.AddConstantN('varNull','LongWord').SetUInt( $0001);
 CL.AddConstantN('varSmallint','LongWord').SetUInt( $0002);
 CL.AddConstantN('varInteger','LongWord').SetUInt( $0003);
 CL.AddConstantN('varSingle','LongWord').SetUInt( $0004);
 CL.AddConstantN('varDouble','LongWord').SetUInt( $0005);
 CL.AddConstantN('varCurrency','LongWord').SetUInt( $0006);
 CL.AddConstantN('varDate','LongWord').SetUInt( $0007);
 CL.AddConstantN('varOleStr','LongWord').SetUInt( $0008);
 CL.AddConstantN('varDispatch','LongWord').SetUInt( $0009);
 CL.AddConstantN('varError','LongWord').SetUInt( $000A);
 CL.AddConstantN('varBoolean','LongWord').SetUInt( $000B);
 CL.AddConstantN('varVariant','LongWord').SetUInt( $000C);
 CL.AddConstantN('varUnknown','LongWord').SetUInt( $000D);
 CL.AddConstantN('varShortInt','LongWord').SetUInt( $0010);
 CL.AddConstantN('varByte','LongWord').SetUInt( $0011);
 CL.AddConstantN('varWord','LongWord').SetUInt( $0012);
 CL.AddConstantN('varLongWord','LongWord').SetUInt( $0013);
 CL.AddConstantN('varInt64','LongWord').SetUInt( $0014);
 CL.AddConstantN('varStrArg','LongWord').SetUInt( $0048);
 CL.AddConstantN('varString','LongWord').SetUInt( $0100);
 CL.AddConstantN('varAny','LongWord').SetUInt( $0101);
 CL.AddConstantN('varTypeMask','LongWord').SetUInt( $0FFF);
 CL.AddConstantN('varArray','LongWord').SetUInt( $2000);
 CL.AddConstantN('varByRef','LongWord').SetUInt( $4000);
 CL.AddConstantN('vtInteger','LongInt').SetInt( 0);
 CL.AddConstantN('vtBoolean','LongInt').SetInt( 1);
 CL.AddConstantN('vtChar','LongInt').SetInt( 2);
 CL.AddConstantN('vtExtended','LongInt').SetInt( 3);
 CL.AddConstantN('vtString','LongInt').SetInt( 4);
 CL.AddConstantN('vtPointer','LongInt').SetInt( 5);
 CL.AddConstantN('vtPChar','LongInt').SetInt( 6);
 CL.AddConstantN('vtObject','LongInt').SetInt( 7);
 CL.AddConstantN('vtClass','LongInt').SetInt( 8);
 CL.AddConstantN('vtWideChar','LongInt').SetInt( 9);
 CL.AddConstantN('vtPWideChar','LongInt').SetInt( 10);
 CL.AddConstantN('vtAnsiString','LongInt').SetInt( 11);
 CL.AddConstantN('vtCurrency','LongInt').SetInt( 12);
 CL.AddConstantN('vtVariant','LongInt').SetInt( 13);
 CL.AddConstantN('vtInterface','LongInt').SetInt( 14);
 CL.AddConstantN('vtWideString','LongInt').SetInt( 15);
 CL.AddConstantN('vtInt64','LongInt').SetInt( 16);
 CL.AddConstantN('vmtSelfPtr','LongInt').SetInt( - 76);
 CL.AddConstantN('vmtIntfTable','LongInt').SetInt( - 72);
 CL.AddConstantN('vmtAutoTable','LongInt').SetInt( - 68);
 CL.AddConstantN('vmtInitTable','LongInt').SetInt( - 64);
 CL.AddConstantN('vmtTypeInfo','LongInt').SetInt( - 60);
 CL.AddConstantN('vmtFieldTable','LongInt').SetInt( - 56);
 CL.AddConstantN('vmtMethodTable','LongInt').SetInt( - 52);
 CL.AddConstantN('vmtDynamicTable','LongInt').SetInt( - 48);
 CL.AddConstantN('vmtClassName','LongInt').SetInt( - 44);
 CL.AddConstantN('vmtInstanceSize','LongInt').SetInt( - 40);
 CL.AddConstantN('vmtParent','LongInt').SetInt( - 36);
 CL.AddDelphiFunction('Function GetHeapBlocks : THeapBlockArray');
 CL.AddDelphiFunction('Function FindObjects( AClass : TClass; FindDerived : Boolean) : TObjectArray');
 CL.AddDelphiFunction('Function AcquireExceptionObject : Pointer');
 CL.AddDelphiFunction('Procedure ReleaseExceptionObject');
 CL.AddDelphiFunction('Procedure GetUnwinder( var Dest : TUnwinder)');
 CL.AddDelphiFunction('Procedure SetUnwinder( const NewUnwinder : TUnwinder)');
 CL.AddDelphiFunction('Function IsUnwinderSet : Boolean');
 CL.AddDelphiFunction('Function SysRegisterIPLookup( StartAddr, EndAddr : LongInt; Context : Pointer; GOT : LongInt) : LongBool');
 CL.AddDelphiFunction('Procedure SysUnregisterIPLookup( StartAddr : LongInt)');
 CL.AddDelphiFunction('Function SysClosestDelphiHandler( Context : Pointer) : LongWord');
 CL.AddDelphiFunction('Procedure BlockOSExceptions');
 CL.AddDelphiFunction('Procedure UnblockOSExceptions');
 CL.AddDelphiFunction('Function AreOSExceptionsBlocked : Boolean');
 CL.AddDelphiFunction('Function RaiseList : Pointer');
 CL.AddDelphiFunction('Function SetRaiseList( NewPtr : Pointer) : Pointer');
 CL.AddDelphiFunction('Function ExceptObject : TObject');
 CL.AddDelphiFunction('Function ExceptAddr : Pointer');
 CL.AddDelphiFunction('Procedure _CVR_PROBE( mi : PCVModInfo; probeNum : Cardinal)');
 CL.AddDelphiFunction('Function _CVR_STMTPROBE( mi : PCVModInfo; probeNum : Cardinal; TrueFalse : Cardinal) : Boolean');
 CL.AddDelphiFunction('Procedure SetInOutRes( NewValue : Integer)');
 CL.AddConstantN('CPUi386','LongInt').SetInt( 2);
 CL.AddConstantN('CPUi486','LongInt').SetInt( 3);
 CL.AddConstantN('CPUPentium','LongInt').SetInt( 4);
 CL.AddDelphiFunction('Function FindResource( ModuleHandle : HMODULE; ResourceName, ResourceType : PChar) : TResourceHandle');
 CL.AddDelphiFunction('Function LoadResource( ModuleHandle : HMODULE; ResHandle : TResourceHandle) : HGLOBAL');
 CL.AddDelphiFunction('Function SizeofResource( ModuleHandle : HMODULE; ResHandle : TResourceHandle) : Integer');
 CL.AddDelphiFunction('Function LockResource( ResData : HGLOBAL) : Pointer');
 CL.AddDelphiFunction('Function UnlockResource( ResData : HGLOBAL) : LongBool');
 CL.AddDelphiFunction('Function FreeResource( ResData : HGLOBAL) : LongBool');
 CL.AddDelphiFunction('Procedure GetMemoryManager( var MemMgr : TMemoryManager);');
 CL.AddDelphiFunction('Procedure SetMemoryManager( const MemMgr : TMemoryManager);');
 CL.AddDelphiFunction('Procedure GetMemoryManager( var MemMgrEx : TMemoryManagerEx);');
 CL.AddDelphiFunction('Procedure SetMemoryManager( const MemMgrEx : TMemoryManagerEx);');
 CL.AddDelphiFunction('Function IsMemoryManagerSet : Boolean');
 CL.AddDelphiFunction('Function SysGetMem( Size : Integer) : Pointer');
 CL.AddDelphiFunction('Function SysFreeMem( P : Pointer) : Integer');
 CL.AddDelphiFunction('Function SysReallocMem( P : Pointer; Size : Integer) : Pointer');
 CL.AddDelphiFunction('Function SysAllocMem( Size : Cardinal) : Pointer');
 CL.AddDelphiFunction('Function SysRegisterExpectedMemoryLeak( P : Pointer) : Boolean');
 CL.AddDelphiFunction('Function SysUnregisterExpectedMemoryLeak( P : Pointer) : Boolean');
 CL.AddDelphiFunction('Function AllocMem( Size : Cardinal) : Pointer');
 CL.AddDelphiFunction('Function GetHeapStatus : THeapStatus');
 CL.AddDelphiFunction('Procedure GetMemoryManagerState( var AMemoryManagerState : TMemoryManagerState)');
 CL.AddDelphiFunction('Procedure GetMemoryMap( var AMemoryMap : TMemoryMap)');
 CL.AddDelphiFunction('Function RegisterExpectedMemoryLeak( P : Pointer) : boolean');
 CL.AddDelphiFunction('Function UnregisterExpectedMemoryLeak( P : Pointer) : boolean');
 CL.AddDelphiFunction('Function GetMinimumBlockAlignment : TMinimumBlockAlignment');
 CL.AddDelphiFunction('Procedure SetMinimumBlockAlignment( AMinimumBlockAlignment : TMinimumBlockAlignment)');
 CL.AddDelphiFunction('Function AttemptToUseSharedMemoryManager : Boolean');
 CL.AddDelphiFunction('Function ShareMemoryManager : Boolean');
 CL.AddConstantN('fmClosed','LongWord').SetUInt( $D7B0);
 CL.AddConstantN('fmInput','LongWord').SetUInt( $D7B1);
 CL.AddConstantN('fmOutput','LongWord').SetUInt( $D7B2);
 CL.AddConstantN('fmInOut','LongWord').SetUInt( $D7B3);
 CL.AddConstantN('tfCRLF','LongWord').SetUInt( $1);
 CL.AddDelphiFunction('Procedure SetLineBreakStyle( var T : Text; Style : TTextLineBreakStyle)');
 CL.AddDelphiFunction('Procedure Randomize');
 CL.AddDelphiFunction('Function Random( const ARange : Integer) : Integer;');
 CL.AddDelphiFunction('Function Random : Extended;');
 CL.AddDelphiFunction('Procedure Set8087CW( NewCW : Word)');
 CL.AddDelphiFunction('Function Get8087CW : Word');
 CL.AddDelphiFunction('Function WideCharToString( Source : PWideChar) : string');
 CL.AddDelphiFunction('Function WideCharLenToString( Source : PWideChar; SourceLen : Integer) : string');
 CL.AddDelphiFunction('Procedure WideCharToStrVar( Source : PWideChar; var Dest : string)');
 CL.AddDelphiFunction('Procedure WideCharLenToStrVar( Source : PWideChar; SourceLen : Integer; var Dest : string)');
 CL.AddDelphiFunction('Function StringToWideChar( const Source : string; Dest : PWideChar; DestSize : Integer) : PWideChar');
 CL.AddDelphiFunction('Function PUCS4Chars( const S : UCS4String) : PUCS4Char');
 CL.AddDelphiFunction('Function WideStringToUCS4String( const S : WideString) : UCS4String');
 CL.AddDelphiFunction('Function UCS4StringToWideString( const S : UCS4String) : WideString');
 CL.AddDelphiFunction('Function UnicodeToUtf8( Dest : PChar; Source : PWideChar; MaxBytes : Integer) : Integer;');
 CL.AddDelphiFunction('Function Utf8ToUnicode( Dest : PWideChar; Source : PChar; MaxChars : Integer) : Integer;');
 CL.AddDelphiFunction('Function UnicodeToUtf8( Dest : PChar; MaxDestBytes : Cardinal; Source : PWideChar; SourceChars : Cardinal) : Cardinal;');
 CL.AddDelphiFunction('Function Utf8ToUnicode( Dest : PWideChar; MaxDestChars : Cardinal; Source : PChar; SourceBytes : Cardinal) : Cardinal;');
 CL.AddDelphiFunction('Function UTF8Encode( const WS : WideString) : UTF8String');
 CL.AddDelphiFunction('Function UTF8Decode( const S : UTF8String) : WideString');
 CL.AddDelphiFunction('Function AnsiToUtf8( const S : string) : UTF8String');
 CL.AddDelphiFunction('Function Utf8ToAnsi( const S : UTF8String) : string');
 CL.AddDelphiFunction('Function OleStrToString( Source : PWideChar) : string');
 CL.AddDelphiFunction('Procedure OleStrToStrVar( Source : PWideChar; var Dest : string)');
 CL.AddDelphiFunction('Function StringToOleStr( const Source : string) : PWideChar');
 CL.AddDelphiFunction('Procedure GetVariantManager( var VarMgr : TVariantManager)');
 CL.AddDelphiFunction('Procedure SetVariantManager( const VarMgr : TVariantManager)');
 CL.AddDelphiFunction('Function IsVariantManagerSet : Boolean');
 CL.AddDelphiFunction('Procedure _IntfDispCall');
 CL.AddDelphiFunction('Procedure _IntfVarCall');
 CL.AddDelphiFunction('Function LoadResString( ResStringRec : PResStringRec) : string');
 CL.AddDelphiFunction('Function Int( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function Frac( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function Exp( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function Cos( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function Sin( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function Ln( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function ArcTan( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function Sqrt( const X : Extended) : Extended');
 CL.AddDelphiFunction('Function _CheckAutoResult( ResultCode : HResult) : HResult');
 CL.AddDelphiFunction('Procedure FPower10');
 CL.AddDelphiFunction('Procedure TextStart');
 CL.AddDelphiFunction('Function CompToDouble( Value : Comp) : Double');
 CL.AddDelphiFunction('Procedure DoubleToComp( Value : Double; var Result : Comp)');
 CL.AddDelphiFunction('Function CompToCurrency( Value : Comp) : Currency');
 CL.AddDelphiFunction('Procedure CurrencyToComp( Value : Currency; var Result : Comp)');
 CL.AddDelphiFunction('Function GetMemory( Size : Integer) : Pointer');
 CL.AddDelphiFunction('Function FreeMemory( P : Pointer) : Integer');
 CL.AddDelphiFunction('Function ReallocMemory( P : Pointer; Size : Integer) : Pointer');
 CL.AddDelphiFunction('Function Pos( const substr, str : AnsiString) : Integer;');
 CL.AddDelphiFunction('Function Pos( const substr, str : WideString) : Integer;');
 CL.AddDelphiFunction('Function StringOfChar( ch : AnsiChar; Count : Integer) : AnsiString;');
 CL.AddDelphiFunction('Function StringOfChar( ch : WideChar; Count : Integer) : WideString;');
  CL.AddTypeS('TRuntimeError', '( reNone, reOutOfMemory, reInvalidPtr, reDivByZ'
   +'ero, reRangeError, reIntOverflow, reInvalidOp, reZeroDivide, reOverflow, r'
   +'eUnderflow, reInvalidCast, reAccessViolation, rePrivInstruction, reControl'
   +'Break, reStackOverflow, reVarTypeCast, reVarInvalidOp, reVarDispatch, reVa'
   +'rArrayCreate, reVarNotArray, reVarArrayBounds, reAssertionFailed, reExtern'
   +'alException, reIntfCastError, reSafeCallError )');
 CL.AddDelphiFunction('Function ModuleCacheID : Cardinal');
 CL.AddDelphiFunction('Procedure InvalidateModuleCache');
 CL.AddDelphiFunction('Procedure SetMultiByteConversionCodePage( CodePage : Integer)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function StringOfChar_P( ch : WideChar; Count : Integer) : WideString;
Begin Result := System.StringOfChar(ch, Count); END;

(*----------------------------------------------------------------------------*)
Function StringOfChar_P( ch : AnsiChar; Count : Integer) : AnsiString;
Begin Result := System.StringOfChar(ch, Count); END;

(*----------------------------------------------------------------------------*)
Function Pos_P( const substr, str : WideString) : Integer;
Begin Result := System.Pos(substr, str); END;

(*----------------------------------------------------------------------------*)
Function Pos_P( const substr, str : AnsiString) : Integer;
Begin Result := System.Pos(substr, str); END;

(*----------------------------------------------------------------------------*)
Function Utf8ToUnicode_P( Dest : PWideChar; MaxDestChars : Cardinal; Source : PChar; SourceBytes : Cardinal) : Cardinal;
Begin Result := System.Utf8ToUnicode(Dest, MaxDestChars, Source, SourceBytes); END;

(*----------------------------------------------------------------------------*)
Function UnicodeToUtf8_P( Dest : PChar; MaxDestBytes : Cardinal; Source : PWideChar; SourceChars : Cardinal) : Cardinal;
Begin Result := System.UnicodeToUtf8(Dest, MaxDestBytes, Source, SourceChars); END;

(*----------------------------------------------------------------------------*)
Function Utf8ToUnicode_P( Dest : PWideChar; Source : PChar; MaxChars : Integer) : Integer;
Begin Result := System.Utf8ToUnicode(Dest, Source, MaxChars); END;

(*----------------------------------------------------------------------------*)
Function UnicodeToUtf8_P( Dest : PChar; Source : PWideChar; MaxBytes : Integer) : Integer;
Begin Result := System.UnicodeToUtf8(Dest, Source, MaxBytes); END;

(*----------------------------------------------------------------------------*)
Function Random_P : Extended;
Begin Result := System.Random; END;

(*----------------------------------------------------------------------------*)
Function Random_P( const ARange : Integer) : Integer;
Begin Result := System.Random(ARange); END;

(*----------------------------------------------------------------------------*)
Procedure SetMemoryManager_P( const MemMgrEx : TMemoryManagerEx);
Begin System.SetMemoryManager(MemMgrEx); END;

(*----------------------------------------------------------------------------*)
Procedure GetMemoryManager_P( var MemMgrEx : TMemoryManagerEx);
Begin System.GetMemoryManager(MemMgrEx); END;

(*----------------------------------------------------------------------------*)
Procedure SetMemoryManager_P( const MemMgr : TMemoryManager);
Begin System.SetMemoryManager(MemMgr); END;

(*----------------------------------------------------------------------------*)
Procedure GetMemoryManager_P( var MemMgr : TMemoryManager);
Begin System.GetMemoryManager(MemMgr); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_System_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@GetHeapBlocks, 'GetHeapBlocks', cdRegister);
 S.RegisterDelphiFunction(@FindObjects, 'FindObjects', cdRegister);
 S.RegisterDelphiFunction(@AcquireExceptionObject, 'AcquireExceptionObject', cdRegister);
 S.RegisterDelphiFunction(@ReleaseExceptionObject, 'ReleaseExceptionObject', cdRegister);
 S.RegisterDelphiFunction(@GetUnwinder, 'GetUnwinder', cdRegister);
 S.RegisterDelphiFunction(@SetUnwinder, 'SetUnwinder', cdRegister);
 S.RegisterDelphiFunction(@IsUnwinderSet, 'IsUnwinderSet', cdRegister);
 S.RegisterDelphiFunction(@SysRegisterIPLookup, 'SysRegisterIPLookup', cdRegister);
 S.RegisterDelphiFunction(@SysUnregisterIPLookup, 'SysUnregisterIPLookup', cdRegister);
 S.RegisterDelphiFunction(@SysClosestDelphiHandler, 'SysClosestDelphiHandler', cdRegister);
 S.RegisterDelphiFunction(@BlockOSExceptions, 'BlockOSExceptions', cdRegister);
 S.RegisterDelphiFunction(@UnblockOSExceptions, 'UnblockOSExceptions', cdRegister);
 S.RegisterDelphiFunction(@AreOSExceptionsBlocked, 'AreOSExceptionsBlocked', cdRegister);
 S.RegisterDelphiFunction(@RaiseList, 'RaiseList', cdRegister);
 S.RegisterDelphiFunction(@SetRaiseList, 'SetRaiseList', cdRegister);
 S.RegisterDelphiFunction(@ExceptObject, 'ExceptObject', cdRegister);
 S.RegisterDelphiFunction(@ExceptAddr, 'ExceptAddr', cdRegister);
 S.RegisterDelphiFunction(@_CVR_PROBE, '_CVR_PROBE', CdCdecl);
 S.RegisterDelphiFunction(@_CVR_STMTPROBE, '_CVR_STMTPROBE', CdCdecl);
 S.RegisterDelphiFunction(@SetInOutRes, 'SetInOutRes', cdRegister);
 S.RegisterDelphiFunction(@FindResource, 'FindResource', cdRegister);
 S.RegisterDelphiFunction(@LoadResource, 'LoadResource', cdRegister);
 S.RegisterDelphiFunction(@SizeofResource, 'SizeofResource', cdRegister);
 S.RegisterDelphiFunction(@LockResource, 'LockResource', cdRegister);
 S.RegisterDelphiFunction(@UnlockResource, 'UnlockResource', cdRegister);
 S.RegisterDelphiFunction(@FreeResource, 'FreeResource', cdRegister);
 S.RegisterDelphiFunction(@GetMemoryManager, 'GetMemoryManager', cdRegister);
 S.RegisterDelphiFunction(@SetMemoryManager, 'SetMemoryManager', cdRegister);
 S.RegisterDelphiFunction(@GetMemoryManager, 'GetMemoryManager', cdRegister);
 S.RegisterDelphiFunction(@SetMemoryManager, 'SetMemoryManager', cdRegister);
 S.RegisterDelphiFunction(@IsMemoryManagerSet, 'IsMemoryManagerSet', cdRegister);
 S.RegisterDelphiFunction(@SysGetMem, 'SysGetMem', cdRegister);
 S.RegisterDelphiFunction(@SysFreeMem, 'SysFreeMem', cdRegister);
 S.RegisterDelphiFunction(@SysReallocMem, 'SysReallocMem', cdRegister);
 S.RegisterDelphiFunction(@SysAllocMem, 'SysAllocMem', cdRegister);
 S.RegisterDelphiFunction(@SysRegisterExpectedMemoryLeak, 'SysRegisterExpectedMemoryLeak', cdRegister);
 S.RegisterDelphiFunction(@SysUnregisterExpectedMemoryLeak, 'SysUnregisterExpectedMemoryLeak', cdRegister);
 S.RegisterDelphiFunction(@AllocMem, 'AllocMem', cdRegister);
 S.RegisterDelphiFunction(@GetHeapStatus, 'GetHeapStatus', cdRegister);
 S.RegisterDelphiFunction(@GetMemoryManagerState, 'GetMemoryManagerState', cdRegister);
 S.RegisterDelphiFunction(@GetMemoryMap, 'GetMemoryMap', cdRegister);
 S.RegisterDelphiFunction(@RegisterExpectedMemoryLeak, 'RegisterExpectedMemoryLeak', cdRegister);
 S.RegisterDelphiFunction(@UnregisterExpectedMemoryLeak, 'UnregisterExpectedMemoryLeak', cdRegister);
 S.RegisterDelphiFunction(@GetMinimumBlockAlignment, 'GetMinimumBlockAlignment', cdRegister);
 S.RegisterDelphiFunction(@SetMinimumBlockAlignment, 'SetMinimumBlockAlignment', cdRegister);
 S.RegisterDelphiFunction(@AttemptToUseSharedMemoryManager, 'AttemptToUseSharedMemoryManager', cdRegister);
 S.RegisterDelphiFunction(@ShareMemoryManager, 'ShareMemoryManager', cdRegister);
 S.RegisterDelphiFunction(@SetLineBreakStyle, 'SetLineBreakStyle', cdRegister);
 S.RegisterDelphiFunction(@Randomize, 'Randomize', cdRegister);
 S.RegisterDelphiFunction(@Random, 'Random', cdRegister);
 S.RegisterDelphiFunction(@Random, 'Random', cdRegister);
 S.RegisterDelphiFunction(@Set8087CW, 'Set8087CW', cdRegister);
 S.RegisterDelphiFunction(@Get8087CW, 'Get8087CW', cdRegister);
 S.RegisterDelphiFunction(@WideCharToString, 'WideCharToString', cdRegister);
 S.RegisterDelphiFunction(@WideCharLenToString, 'WideCharLenToString', cdRegister);
 S.RegisterDelphiFunction(@WideCharToStrVar, 'WideCharToStrVar', cdRegister);
 S.RegisterDelphiFunction(@WideCharLenToStrVar, 'WideCharLenToStrVar', cdRegister);
 S.RegisterDelphiFunction(@StringToWideChar, 'StringToWideChar', cdRegister);
 S.RegisterDelphiFunction(@PUCS4Chars, 'PUCS4Chars', cdRegister);
 S.RegisterDelphiFunction(@WideStringToUCS4String, 'WideStringToUCS4String', cdRegister);
 S.RegisterDelphiFunction(@UCS4StringToWideString, 'UCS4StringToWideString', cdRegister);
 S.RegisterDelphiFunction(@UnicodeToUtf8, 'UnicodeToUtf8', cdRegister);
 S.RegisterDelphiFunction(@Utf8ToUnicode, 'Utf8ToUnicode', cdRegister);
 S.RegisterDelphiFunction(@UnicodeToUtf8, 'UnicodeToUtf8', cdRegister);
 S.RegisterDelphiFunction(@Utf8ToUnicode, 'Utf8ToUnicode', cdRegister);
 S.RegisterDelphiFunction(@UTF8Encode, 'UTF8Encode', cdRegister);
 S.RegisterDelphiFunction(@UTF8Decode, 'UTF8Decode', cdRegister);
 S.RegisterDelphiFunction(@AnsiToUtf8, 'AnsiToUtf8', cdRegister);
 S.RegisterDelphiFunction(@Utf8ToAnsi, 'Utf8ToAnsi', cdRegister);
 S.RegisterDelphiFunction(@OleStrToString, 'OleStrToString', cdRegister);
 S.RegisterDelphiFunction(@OleStrToStrVar, 'OleStrToStrVar', cdRegister);
 S.RegisterDelphiFunction(@StringToOleStr, 'StringToOleStr', cdRegister);
 S.RegisterDelphiFunction(@GetVariantManager, 'GetVariantManager', cdRegister);
 S.RegisterDelphiFunction(@SetVariantManager, 'SetVariantManager', cdRegister);
 S.RegisterDelphiFunction(@IsVariantManagerSet, 'IsVariantManagerSet', cdRegister);
 S.RegisterDelphiFunction(@_IntfDispCall, '_IntfDispCall', CdCdecl);
 S.RegisterDelphiFunction(@_IntfVarCall, '_IntfVarCall', CdCdecl);
 S.RegisterDelphiFunction(@LoadResString, 'LoadResString', cdRegister);
 S.RegisterDelphiFunction(@Int, 'Int', cdRegister);
 S.RegisterDelphiFunction(@Frac, 'Frac', cdRegister);
 S.RegisterDelphiFunction(@Exp, 'Exp', cdRegister);
 S.RegisterDelphiFunction(@Cos, 'Cos', cdRegister);
 S.RegisterDelphiFunction(@Sin, 'Sin', cdRegister);
 S.RegisterDelphiFunction(@Ln, 'Ln', cdRegister);
 S.RegisterDelphiFunction(@ArcTan, 'ArcTan', cdRegister);
 S.RegisterDelphiFunction(@Sqrt, 'Sqrt', cdRegister);
 S.RegisterDelphiFunction(@_CheckAutoResult, '_CheckAutoResult', cdRegister);
 S.RegisterDelphiFunction(@FPower10, 'FPower10', cdRegister);
 S.RegisterDelphiFunction(@TextStart, 'TextStart', cdRegister);
 S.RegisterDelphiFunction(@CompToDouble, 'CompToDouble', CdCdecl);
 S.RegisterDelphiFunction(@DoubleToComp, 'DoubleToComp', CdCdecl);
 S.RegisterDelphiFunction(@CompToCurrency, 'CompToCurrency', CdCdecl);
 S.RegisterDelphiFunction(@CurrencyToComp, 'CurrencyToComp', CdCdecl);
 S.RegisterDelphiFunction(@GetMemory, 'GetMemory', CdCdecl);
 S.RegisterDelphiFunction(@FreeMemory, 'FreeMemory', CdCdecl);
 S.RegisterDelphiFunction(@ReallocMemory, 'ReallocMemory', CdCdecl);
 S.RegisterDelphiFunction(@Pos, 'Pos', cdRegister);
 S.RegisterDelphiFunction(@Pos, 'Pos', cdRegister);
 S.RegisterDelphiFunction(@StringOfChar, 'StringOfChar', cdRegister);
 S.RegisterDelphiFunction(@StringOfChar, 'StringOfChar', cdRegister);
 S.RegisterDelphiFunction(@ModuleCacheID, 'ModuleCacheID', cdRegister);
 S.RegisterDelphiFunction(@InvalidateModuleCache, 'InvalidateModuleCache', cdRegister);
 S.RegisterDelphiFunction(@SetMultiByteConversionCodePage, 'SetMultiByteConversionCodePage', cdRegister);
end;

 
 
{ TPSImport_System }
(*----------------------------------------------------------------------------*)
procedure TPSImport_System.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_System(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_System.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_System(ri);
  RIRegister_System_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
