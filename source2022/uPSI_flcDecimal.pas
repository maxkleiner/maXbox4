unit uPSI_flcDecimal;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_flcDecimal = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_flcDecimal(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_flcDecimal_Routines(S: TPSExec);
procedure RIRegister_flcDecimal(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   flcStdTypes
  ,flcInteger
  ,flcDecimal
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_flcDecimal]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_flcDecimal(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDecimalError');
  CL.AddTypeS('TDecimalConvertErrorType', '( dceNoError, dceConvertError, dceOv'
   +'erflowError )');
  CL.AddTypeS('Decimal32', 'record Value32 : Word32; end');
  CL.AddTypeS('PDecimal32', '^Decimal32 // will not work');
  CL.AddTypeS('Decimal64', 'record Value64 : Word64Rec; end');
  CL.AddTypeS('PDecimal64', '^Decimal64 // will not work');
  CL.AddTypeS('Decimal128', 'record Value128 : Word128; end');
  CL.AddTypeS('PDecimal128', '^Decimal128 // will not work');
  CL.AddTypeS('HugeDecimal', 'record Precision : Integer; Digits : array of Byt'
   +'e; end');
  CL.AddTypeS('PHugeDecimal', '^HugeDecimal // will not work');
  CL.AddTypeS('SDecimal32', 'record Sign : Int8; Value : Decimal32; end');
  CL.AddTypeS('PSDecimal32', '^SDecimal32 // will not work');
  CL.AddTypeS('SDecimal64', 'record Sign : Int8; Value : Decimal64; end');
  CL.AddTypeS('PSDecimal64', '^SDecimal64 // will not work');
  CL.AddTypeS('SDecimal128', 'record Sign : Int8; Value : Decimal128; end');
  CL.AddTypeS('PSDecimal128', '^SDecimal128 // will not work');
  CL.AddTypeS('SHugeDecimal', 'record Sign : Int8; Value : HugeDecimal; end');
  CL.AddTypeS('PSHugeDecimal', '^SHugeDecimal // will not work');
 CL.AddConstantN('Decimal32Digits','LongInt').SetInt( 9);
 CL.AddConstantN('Decimal32Precision','LongInt').SetInt( 4);
 CL.AddConstantN('Decimal32Scale','LongInt').SetInt( 10000);
 CL.AddConstantN('Decimal32MaxInt','LongInt').SetInt( 99999);
 CL.AddConstantN('Decimal32MaxValue','LongInt').SetInt( 999999999);
 CL.AddConstantN('Decimal32RoundTerm','LongInt').SetInt( Decimal32Scale div 2);
 CL.AddConstantN('Decimal32MinFloatD','Double').setExtended( Decimal32MinFloat);
 CL.AddConstantN('Decimal32MaxFloatLimD','Double').setExtended( Decimal32MaxFloatLim);
 CL.AddDelphiFunction('Procedure Decimal32InitZero( var A : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal32InitOne( var A : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal32InitMax( var A : Decimal32)');
 CL.AddDelphiFunction('Function Decimal32IsZero( const A : Decimal32) : Boolean');
 CL.AddDelphiFunction('Function Decimal32IsOne( const A : Decimal32) : Boolean');
 CL.AddDelphiFunction('Function Decimal32IsMaximum( const A : Decimal32) : Boolean');
 CL.AddDelphiFunction('Function Decimal32IsOverflow( const A : Decimal32) : Boolean');
 CL.AddDelphiFunction('Function Word32IsDecimal32Range( const A : Word32) : Boolean');
 CL.AddDelphiFunction('Function Int16IsDecimal32Range( const A : SmallInt) : Boolean');
 CL.AddDelphiFunction('Function Int32IsDecimal32Range( const A : Int32) : Boolean');
 CL.AddDelphiFunction('Function FloatIsDecimal32Range( const A : Double) : Boolean');
 CL.AddDelphiFunction('Procedure Decimal32InitWord8( var A : Decimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal32InitWord16( var A : Decimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal32InitWord32( var A : Decimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal32InitInt32( var A : Decimal32; const B : Int32)');
 CL.AddDelphiFunction('Procedure Decimal32InitDecimal32( var A : Decimal32; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal32InitFloat( var A : Decimal32; const B : Double)');
 CL.AddDelphiFunction('Function Decimal32ToWord8( const A : Decimal32) : Byte');
 CL.AddDelphiFunction('Function Decimal32ToWord16( const A : Decimal32) : Word');
 CL.AddDelphiFunction('Function Decimal32ToWord32( const A : Decimal32) : Word32');
 CL.AddDelphiFunction('Function Decimal32ToInt32( const A : Decimal32) : Int32');
 CL.AddDelphiFunction('Function Decimal32ToFloat( const A : Decimal32) : Double');
 CL.AddDelphiFunction('Function Decimal32Trunc( const A : Decimal32) : Word32');
 CL.AddDelphiFunction('Function Decimal32Round( const A : Decimal32) : Word32');
 CL.AddDelphiFunction('Function Decimal32FracWord( const A : Decimal32) : Word');
 CL.AddDelphiFunction('Function Decimal32EqualsWord8( const A : Decimal32; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function Decimal32EqualsWord16( const A : Decimal32; const B : Word) : Boolean');
 CL.AddDelphiFunction('Function Decimal32EqualsWord32( const A : Decimal32; const B : Word32) : Boolean');
 CL.AddDelphiFunction('Function Decimal32EqualsInt32( const A : Decimal32; const B : Int32) : Boolean');
 CL.AddDelphiFunction('Function Decimal32EqualsDecimal32( const A : Decimal32; const B : Decimal32) : Boolean');
 CL.AddDelphiFunction('Function Decimal32EqualsFloat( const A : Decimal32; const B : Double) : Boolean');
 CL.AddDelphiFunction('Function Decimal32CompareWord8( const A : Decimal32; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function Decimal32CompareWord16( const A : Decimal32; const B : Word) : Integer');
 CL.AddDelphiFunction('Function Decimal32CompareWord32( const A : Decimal32; const B : Word32) : Integer');
 CL.AddDelphiFunction('Function Decimal32CompareInt32( const A : Decimal32; const B : Int32) : Integer');
 CL.AddDelphiFunction('Function Decimal32CompareDecimal32( const A : Decimal32; const B : Decimal32) : Integer');
 CL.AddDelphiFunction('Function Decimal32CompareFloat( const A : Decimal32; const B : Double) : Integer');
 CL.AddDelphiFunction('Procedure Decimal32AddWord8( var A : Decimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal32AddWord16( var A : Decimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal32AddWord32( var A : Decimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal32AddDecimal32( var A : Decimal32; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal32SubtractWord8( var A : Decimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal32SubtractWord16( var A : Decimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal32SubtractWord32( var A : Decimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal32SubtractDecimal32( var A : Decimal32; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal32MultiplyWord8( var A : Decimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal32MultiplyWord16( var A : Decimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal32MultiplyWord32( var A : Decimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal32MultiplyDecimal32( var A : Decimal32; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal32Sqr( var A : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal32DivideWord8( var A : Decimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal32DivideWord16( var A : Decimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal32DivideWord32( var A : Decimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal32DivideDecimal32( var A : Decimal32; const B : Decimal32)');
 CL.AddDelphiFunction('Function Decimal32ToStr( const A : Decimal32) : String');
 CL.AddDelphiFunction('Function Decimal32ToStrB( const A : Decimal32) : RawByteString');
 CL.AddDelphiFunction('Function Decimal32ToStrU( const A : Decimal32) : UnicodeString');
 CL.AddDelphiFunction('Function TryStrToDecimal32( const A : String; out B : Decimal32) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function TryStrToDecimal32B( const A : RawByteString; out B : Decimal32) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function StrToDecimal32( const A : String) : Decimal32');
 CL.AddDelphiFunction('Function StrToDecimal32B( const A : RawByteString) : Decimal32');
 CL.AddConstantN('Decimal64Digits','LongInt').SetInt( 19);
 CL.AddConstantN('Decimal64Precision','LongInt').SetInt( 9);
 CL.AddConstantN('Decimal64Scale','LongInt').SetInt( 1000000000);
 CL.AddConstantN('Decimal64MaxInt','Int64').SetInt64( 9999999999);
 CL.AddConstantN('Decimal64RoundTerm','LongInt').SetInt( Decimal64Scale div 2);
 CL.AddConstantN('Decimal64MinFloatD','Double').setExtended( Decimal64MinFloat);
 CL.AddConstantN('Decimal64MaxFloatLim','Double').setExtended( 999999999999999.9999999995);
 CL.AddConstantN('Decimal64MaxFloatLimD','Double').setExtended( 999999999999999.9999999995);
 CL.AddConstantN('Decimal64MaxFloatLimD','Double').setExtended( Decimal64MaxFloatLim);
 CL.AddDelphiFunction('Procedure Decimal64InitZero( var A : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal64InitOne( var A : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal64InitMax( var A : Decimal64)');
 CL.AddDelphiFunction('Function Decimal64IsZero( const A : Decimal64) : Boolean');
 CL.AddDelphiFunction('Function Decimal64IsOne( const A : Decimal64) : Boolean');
 CL.AddDelphiFunction('Function Decimal64IsMaximum( const A : Decimal64) : Boolean');
 CL.AddDelphiFunction('Function Decimal64IsOverflow( const A : Decimal64) : Boolean');
 CL.AddDelphiFunction('Function Word64IsDecimal64Range( const A : Word64Rec) : Boolean');
 CL.AddDelphiFunction('Function Int32IsDecimal64Range( const A : Int32) : Boolean');
 CL.AddDelphiFunction('Function Int64IsDecimal64Range( const A : Int64) : Boolean');
 CL.AddDelphiFunction('Function FloatIsDecimal64Range( const A : Double) : Boolean');
 CL.AddDelphiFunction('Procedure Decimal64InitWord8( var A : Decimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal64InitWord16( var A : Decimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal64InitWord32( var A : Decimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal64InitWord64( var A : Decimal64; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure Decimal64InitInt32( var A : Decimal64; const B : Int32)');
 CL.AddDelphiFunction('Procedure Decimal64InitInt64( var A : Decimal64; const B : Int64)');
 CL.AddDelphiFunction('Procedure Decimal64InitDecimal32( var A : Decimal64; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure Decimal64InitDecimal64( var A : Decimal64; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal64InitFloat( var A : Decimal64; const B : Double)');
 CL.AddDelphiFunction('Function Decimal64ToWord8( const A : Decimal64) : Byte');
 CL.AddDelphiFunction('Function Decimal64ToWord16( const A : Decimal64) : Word');
 CL.AddDelphiFunction('Function Decimal64ToWord32( const A : Decimal64) : Word32');
 CL.AddDelphiFunction('Function Decimal64ToWord64( const A : Decimal64) : Word64Rec');
 CL.AddDelphiFunction('Function Decimal64ToInt32( const A : Decimal64) : Int32');
 CL.AddDelphiFunction('Function Decimal64ToInt64( const A : Decimal64) : Int64');
 CL.AddDelphiFunction('Function Decimal64ToDecimal32( const A : Decimal64) : Decimal32');
 CL.AddDelphiFunction('Function Decimal64ToFloat( const A : Decimal64) : Double');
 CL.AddDelphiFunction('Function Decimal64Trunc( const A : Decimal64) : Int64');
 CL.AddDelphiFunction('Function Decimal64Round( const A : Decimal64) : Int64');
 CL.AddDelphiFunction('Function Decimal64FracWord( const A : Decimal64) : Word32');
 CL.AddDelphiFunction('Function Decimal64EqualsWord8( const A : Decimal64; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function Decimal64EqualsWord16( const A : Decimal64; const B : Word) : Boolean');
 CL.AddDelphiFunction('Function Decimal64EqualsWord32( const A : Decimal64; const B : Word32) : Boolean');
 CL.AddDelphiFunction('Function Decimal64EqualsInt32( const A : Decimal64; const B : Int32) : Boolean');
 CL.AddDelphiFunction('Function Decimal64EqualsInt64( const A : Decimal64; const B : Int64) : Boolean');
 CL.AddDelphiFunction('Function Decimal64EqualsDecimal64( const A : Decimal64; const B : Decimal64) : Boolean');
 CL.AddDelphiFunction('Function Decimal64EqualsFloat( const A : Decimal64; const B : Double) : Boolean');
 CL.AddDelphiFunction('Function Decimal64CompareWord8( const A : Decimal64; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function Decimal64CompareWord16( const A : Decimal64; const B : Word) : Integer');
 CL.AddDelphiFunction('Function Decimal64CompareWord32( const A : Decimal64; const B : Word32) : Integer');
 CL.AddDelphiFunction('Function Decimal64CompareInt32( const A : Decimal64; const B : Int32) : Integer');
 CL.AddDelphiFunction('Function Decimal64CompareInt64( const A : Decimal64; const B : Int64) : Integer');
 CL.AddDelphiFunction('Function Decimal64CompareDecimal64( const A : Decimal64; const B : Decimal64) : Integer');
 CL.AddDelphiFunction('Function Decimal64CompareFloat( const A : Decimal64; const B : Double) : Integer');
 CL.AddDelphiFunction('Procedure Decimal64AddWord8( var A : Decimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal64AddWord16( var A : Decimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal64AddWord32( var A : Decimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal64AddDecimal64( var A : Decimal64; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal64SubtractWord8( var A : Decimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal64SubtractWord16( var A : Decimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal64SubtractWord32( var A : Decimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal64SubtractDecimal64( var A : Decimal64; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal64MultiplyWord8( var A : Decimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal64MultiplyWord16( var A : Decimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal64MultiplyWord32( var A : Decimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal64MultiplyDecimal64( var A : Decimal64; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal64Sqr( var A : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal64DivideWord8( var A : Decimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal64DivideWord16( var A : Decimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal64DivideWord32( var A : Decimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal64DivideDecimal64( var A : Decimal64; const B : Decimal64)');
 CL.AddDelphiFunction('Function Decimal64ToStr( const A : Decimal64) : String');
 CL.AddDelphiFunction('Function Decimal64ToStrB( const A : Decimal64) : RawByteString');
 CL.AddDelphiFunction('Function Decimal64ToStrU( const A : Decimal64) : UnicodeString');
 CL.AddDelphiFunction('Function TryStrToDecimal64( const A : String; out B : Decimal64) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function TryStrToDecimal64B( const A : RawByteString; out B : Decimal64) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function StrToDecimal64( const A : String) : Decimal64');
 CL.AddDelphiFunction('Function StrToDecimal64B( const A : RawByteString) : Decimal64');
 CL.AddConstantN('Decimal128Digits','LongInt').SetInt( 38);
 CL.AddConstantN('Decimal128Precision','LongInt').SetInt( 19);
 CL.AddConstantN('Decimal128ScaleF','Double').setExtended( 10000000000000000000.0);
 CL.AddConstantN('Decimal128MinFloat','Extended').setExtended( - 0.00000000000000000005);
 CL.AddConstantN('Decimal128MinFloatD','Double').setExtended( Decimal128MinFloat);
 CL.AddConstantN('Decimal128MaxFloatLim','Extended').setExtended( 9999999999999999999.9999999999999999999);
 CL.AddConstantN('Decimal128MaxFloatLimD','Double').setExtended( Decimal128MaxFloatLim);
 CL.AddDelphiFunction('Procedure Decimal128InitZero( var A : Decimal128)');
 CL.AddDelphiFunction('Procedure Decimal128InitOne( var A : Decimal128)');
 CL.AddDelphiFunction('Procedure Decimal128InitMax( var A : Decimal128)');
 CL.AddDelphiFunction('Function Decimal128IsZero( const A : Decimal128) : Boolean');
 CL.AddDelphiFunction('Function Decimal128IsOne( const A : Decimal128) : Boolean');
 CL.AddDelphiFunction('Function Decimal128IsMaximum( const A : Decimal128) : Boolean');
 CL.AddDelphiFunction('Function Decimal128IsOverflow( const A : Decimal128) : Boolean');
 CL.AddDelphiFunction('Function Word64IsDecimal128Range( const A : Word64Rec) : Boolean');
 CL.AddDelphiFunction('Function Word128IsDecimal128Range( const A : Word128) : Boolean');
 CL.AddDelphiFunction('Function Int64IsDecimal128Range( const A : Int64) : Boolean');
 CL.AddDelphiFunction('Function Int128IsDecimal128Range( const A : Int128) : Boolean');
 CL.AddDelphiFunction('Function FloatIsDecimal128Range( const A : Double) : Boolean');
 CL.AddDelphiFunction('Procedure Decimal128InitWord8( var A : Decimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal128InitWord16( var A : Decimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal128InitWord32( var A : Decimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal128InitWord64( var A : Decimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure Decimal128InitInt32( var A : Decimal128; const B : Int32)');
 CL.AddDelphiFunction('Procedure Decimal128InitInt64( var A : Decimal128; const B : Int64)');
 CL.AddDelphiFunction('Procedure Decimal128InitDecimal64( var A : Decimal128; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure Decimal128InitDecimal128( var A : Decimal128; const B : Decimal128)');
 CL.AddDelphiFunction('Procedure Decimal128InitFloat( var A : Decimal128; const B : Double)');
 CL.AddDelphiFunction('Function Decimal128ToWord8( const A : Decimal128) : Byte');
 CL.AddDelphiFunction('Function Decimal128ToWord16( const A : Decimal128) : Word');
 CL.AddDelphiFunction('Function Decimal128ToWord32( const A : Decimal128) : Word32');
 CL.AddDelphiFunction('Function Decimal128ToWord64( const A : Decimal128) : Word64Rec');
 CL.AddDelphiFunction('Function Decimal128ToInt32( const A : Decimal128) : Int32');
 CL.AddDelphiFunction('Function Decimal128ToInt64( const A : Decimal128) : Int64');
 CL.AddDelphiFunction('Function Decimal128ToFloat( const A : Decimal128) : Double');
 CL.AddDelphiFunction('Function Decimal128Trunc( const A : Decimal128) : Word64Rec');
 CL.AddDelphiFunction('Function Decimal128Round( const A : Decimal128) : Word64Rec');
 CL.AddDelphiFunction('Function Decimal128FracWord( const A : Decimal128) : Word64Rec');
 CL.AddDelphiFunction('Function Decimal128EqualsWord8( const A : Decimal128; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function Decimal128EqualsWord16( const A : Decimal128; const B : Word) : Boolean');
 CL.AddDelphiFunction('Function Decimal128EqualsWord32( const A : Decimal128; const B : Word32) : Boolean');
 CL.AddDelphiFunction('Function Decimal128EqualsWord64( const A : Decimal128; const B : Word64Rec) : Boolean');
 CL.AddDelphiFunction('Function Decimal128EqualsInt32( const A : Decimal128; const B : Int32) : Boolean');
 CL.AddDelphiFunction('Function Decimal128EqualsInt64( const A : Decimal128; const B : Int64) : Boolean');
 CL.AddDelphiFunction('Function Decimal128EqualsDecimal128( const A : Decimal128; const B : Decimal128) : Boolean');
 CL.AddDelphiFunction('Function Decimal128EqualsFloat( const A : Decimal128; const B : Double) : Boolean');
 CL.AddDelphiFunction('Function Decimal128CompareWord8( const A : Decimal128; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function Decimal128CompareWord16( const A : Decimal128; const B : Word) : Integer');
 CL.AddDelphiFunction('Function Decimal128CompareWord32( const A : Decimal128; const B : Word32) : Integer');
 CL.AddDelphiFunction('Function Decimal128CompareWord64( const A : Decimal128; const B : Word64Rec) : Integer');
 CL.AddDelphiFunction('Function Decimal128CompareDecimal128( const A : Decimal128; const B : Decimal128) : Integer');
 CL.AddDelphiFunction('Function Decimal128CompareFloat( const A : Decimal128; const B : Double) : Integer');
 CL.AddDelphiFunction('Procedure Decimal128AddWord8( var A : Decimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal128AddWord16( var A : Decimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal128AddWord32( var A : Decimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal128AddWord64( var A : Decimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure Decimal128AddDecimal128( var A : Decimal128; const B : Decimal128)');
 CL.AddDelphiFunction('Procedure Decimal128SubtractWord8( var A : Decimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal128SubtractWord16( var A : Decimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal128SubtractWord32( var A : Decimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal128SubtractWord64( var A : Decimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure Decimal128SubtractDecimal128( var A : Decimal128; const B : Decimal128)');
 CL.AddDelphiFunction('Procedure Decimal128MultiplyWord8( var A : Decimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal128MultiplyWord16( var A : Decimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal128MultiplyWord32( var A : Decimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal128MultiplyWord64( var A : Decimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure Decimal128MultiplyDecimal128( var A : Decimal128; const B : Decimal128)');
 CL.AddDelphiFunction('Procedure Decimal128Sqr( var A : Decimal128)');
 CL.AddDelphiFunction('Procedure Decimal128DivideWord8( var A : Decimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure Decimal128DivideWord16( var A : Decimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure Decimal128DivideWord32( var A : Decimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure Decimal128DivideDecimal128( var A : Decimal128; const B : Decimal128)');
 CL.AddDelphiFunction('Function Decimal128ToStr( const A : Decimal128) : String');
 CL.AddDelphiFunction('Function Decimal128ToStrB( const A : Decimal128) : RawByteString');
 CL.AddDelphiFunction('Function Decimal128ToStrU( const A : Decimal128) : UnicodeString');
 CL.AddDelphiFunction('Function TryStrToDecimal128( const A : String; out B : Decimal128) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function TryStrToDecimal128B( const A : RawByteString; out B : Decimal128) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function StrToDecimal128( const A : String) : Decimal128');
 CL.AddDelphiFunction('Function StrToDecimal128B( const A : RawByteString) : Decimal128');
 CL.AddDelphiFunction('Procedure HugeDecimalInit( out A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalFinalise( var A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitZero( out A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitOne( out A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitWord8( out A : HugeDecimal; const B : Byte)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitWord32( out A : HugeDecimal; const B : Word32)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitWord64( out A : HugeDecimal; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitWord128( out A : HugeDecimal; const B : Word128)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitDecimal32( out A : HugeDecimal; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitDecimal64( out A : HugeDecimal; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitDecimal128( out A : HugeDecimal; const B : Decimal128)');
 CL.AddDelphiFunction('Procedure HugeDecimalInitHugeDecimal( out A : HugeDecimal; const B : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignZero( var A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignOne( var A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignWord8( var A : HugeDecimal; const B : Byte)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignWord32( var A : HugeDecimal; const B : Word32)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignWord64( var A : HugeDecimal; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignWord128( var A : HugeDecimal; const B : Word128)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignDecimal32( var A : HugeDecimal; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignDecimal64( var A : HugeDecimal; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignDecimal128( var A : HugeDecimal; const B : Decimal128)');
 CL.AddDelphiFunction('Procedure HugeDecimalAssignHugeDecimal( var A : HugeDecimal; const B : HugeDecimal)');
 CL.AddDelphiFunction('Function HugeDecimalIsZero( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalIsOne( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalIsOdd( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalIsEven( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalIsInteger( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalIsLessThanOne( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalIsOneOrGreater( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalIsWord8Range( const A : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalDigits( const A : HugeDecimal) : Integer');
 CL.AddDelphiFunction('Function HugeDecimalIntegerDigits( const A : HugeDecimal) : Integer');
 CL.AddDelphiFunction('Function HugeDecimalDecimalDigits( const A : HugeDecimal) : Integer');
 CL.AddDelphiFunction('Function HugeDecimalGetDigit( const A : HugeDecimal; const DigitIdx : Integer) : Byte');
 CL.AddDelphiFunction('Procedure HugeDecimalSetDigit( var A : HugeDecimal; const DigitIdx : Integer; const DigitValue : Byte)');
 CL.AddDelphiFunction('Function HugeDecimalToWord8( const A : HugeDecimal) : Byte');
 CL.AddDelphiFunction('Function HugeDecimalToWord32( const A : HugeDecimal) : Word32');
 CL.AddDelphiFunction('Function HugeDecimalToWord64( const A : HugeDecimal) : Word64Rec');
 CL.AddDelphiFunction('Function HugeDecimalToWord128( const A : HugeDecimal) : Word128');
 CL.AddDelphiFunction('Function HugeDecimalToDecimal32( const A : HugeDecimal) : Decimal32');
 CL.AddDelphiFunction('Function HugeDecimalToDecimal64( const A : HugeDecimal) : Decimal64');
 CL.AddDelphiFunction('Function HugeDecimalToDecimal128( const A : HugeDecimal) : Decimal128');
 CL.AddDelphiFunction('Procedure HugeDecimalMul10( var A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalDiv10( var A : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalInc( var A : HugeDecimal; const N : Byte)');
 CL.AddDelphiFunction('Procedure HugeDecimalDec( var A : HugeDecimal; const N : Byte)');
 CL.AddDelphiFunction('Procedure HugeDecimalTrunc( var A : HugeDecimal)');
 CL.AddDelphiFunction('Function HugeDecimalFracCompareHalf( var A : HugeDecimal) : Integer');
 CL.AddDelphiFunction('Procedure HugeDecimalRound( var A : HugeDecimal)');
 CL.AddDelphiFunction('Function HugeDecimalEqualsWord8( const A : HugeDecimal; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalEqualsHugeDecimal( const A, B : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function HugeDecimalCompareWord8( const A : HugeDecimal; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function HugeDecimalCompareHugeDecimal( const A, B : HugeDecimal) : Integer');
 CL.AddDelphiFunction('Procedure HugeDecimalAddHugeDecimal( var A : HugeDecimal; const B : HugeDecimal)');
 CL.AddDelphiFunction('Procedure HugeDecimalSubtractHugeDecimal( var A : HugeDecimal; const B : HugeDecimal)');
 CL.AddDelphiFunction('Function TryStrToHugeDecimal( const S : String; var R : HugeDecimal) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Procedure StrToHugeDecimal( const S : String; var R : HugeDecimal)');
 CL.AddDelphiFunction('Function HugeDecimalToStr( const A : HugeDecimal) : String');
 CL.AddConstantN('SDecimal32MinInt','LongInt').SetInt( - 99999);
 CL.AddConstantN('SDecimal32MaxInt','LongInt').SetInt( 99999);
 CL.AddConstantN('SDecimal32MinFloatLimD','Double').setExtended( SDecimal32MinFloatLim);
 CL.AddConstantN('SDecimal32MaxFloatLim','').SetString( Decimal32MaxFloatLim);
 CL.AddConstantN('SDecimal32MaxFloatLimD','Double').setExtended( SDecimal32MaxFloatLim);
 CL.AddDelphiFunction('Procedure SDecimal32InitZero( var A : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitOne( var A : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitMinusOne( var A : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitMin( var A : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitMax( var A : SDecimal32)');
 CL.AddDelphiFunction('Function SDecimal32IsZero( const A : SDecimal32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32IsOne( const A : SDecimal32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32IsMinusOne( const A : SDecimal32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32IsMinimum( const A : SDecimal32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32IsMaximum( const A : SDecimal32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32IsOverflow( const A : SDecimal32) : Boolean');
 CL.AddDelphiFunction('Function Word32IsSDecimal32Range( const A : Word32) : Boolean');
 CL.AddDelphiFunction('Function Int32IsSDecimal32Range( const A : Int32) : Boolean');
 CL.AddDelphiFunction('Function FloatIsSDecimal32Range( const A : Double) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32Sign( const A : SDecimal32) : Integer');
 CL.AddDelphiFunction('Procedure SDecimal32Negate( var A : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32AbsInPlace( var A : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitWord8( var A : SDecimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal32InitWord16( var A : SDecimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal32InitWord32( var A : SDecimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitInt32( var A : SDecimal32; const B : Int32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitSDecimal32( var A : SDecimal32; const B : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32InitFloat( var A : SDecimal32; const B : Double)');
 CL.AddDelphiFunction('Function SDecimal32ToWord8( const A : SDecimal32) : Byte');
 CL.AddDelphiFunction('Function SDecimal32ToWord16( const A : SDecimal32) : Word');
 CL.AddDelphiFunction('Function SDecimal32ToWord32( const A : SDecimal32) : Word32');
 CL.AddDelphiFunction('Function SDecimal32ToInt32( const A : SDecimal32) : Int32');
 CL.AddDelphiFunction('Function SDecimal32ToFloat( const A : SDecimal32) : Double');
 CL.AddDelphiFunction('Function SDecimal32Trunc( const A : SDecimal32) : Int32');
 CL.AddDelphiFunction('Function SDecimal32Round( const A : SDecimal32) : Int32');
 CL.AddDelphiFunction('Function SDecimal32FracWord( const A : SDecimal32) : Word');
 CL.AddDelphiFunction('Function SDecimal32EqualsWord8( const A : SDecimal32; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32EqualsWord16( const A : SDecimal32; const B : Word) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32EqualsWord32( const A : SDecimal32; const B : Word32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32EqualsInt32( const A : SDecimal32; const B : Int32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32EqualsSDecimal32( const A : SDecimal32; const B : SDecimal32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32EqualsFloat( const A : SDecimal32; const B : Double) : Boolean');
 CL.AddDelphiFunction('Function SDecimal32CompareWord8( const A : SDecimal32; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function SDecimal32CompareWord16( const A : SDecimal32; const B : Word) : Integer');
 CL.AddDelphiFunction('Function SDecimal32CompareWord32( const A : SDecimal32; const B : Word32) : Integer');
 CL.AddDelphiFunction('Function SDecimal32CompareInt32( const A : SDecimal32; const B : Int32) : Integer');
 CL.AddDelphiFunction('Function SDecimal32CompareSDecimal32( const A : SDecimal32; const B : SDecimal32) : Integer');
 CL.AddDelphiFunction('Function SDecimal32CompareFloat( const A : SDecimal32; const B : Double) : Integer');
 CL.AddDelphiFunction('Procedure SDecimal32AddWord8( var A : SDecimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal32AddWord16( var A : SDecimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal32AddWord32( var A : SDecimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal32AddSDecimal32( var A : SDecimal32; const B : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32SubtractWord8( var A : SDecimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal32SubtractWord16( var A : SDecimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal32SubtractWord32( var A : SDecimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal32SubtractSDecimal32( var A : SDecimal32; const B : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32MultiplyWord8( var A : SDecimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal32MultiplyWord16( var A : SDecimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal32MultiplyWord32( var A : SDecimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal32MultiplySDecimal32( var A : SDecimal32; const B : SDecimal32)');
 CL.AddDelphiFunction('Procedure SDecimal32DivideWord8( var A : SDecimal32; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal32DivideWord16( var A : SDecimal32; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal32DivideWord32( var A : SDecimal32; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal32DivideSDecimal32( var A : SDecimal32; const B : SDecimal32)');
 CL.AddDelphiFunction('Function SDecimal32ToStr( const A : SDecimal32) : String');
 CL.AddDelphiFunction('Function SDecimal32ToStrB( const A : SDecimal32) : RawByteString');
 CL.AddDelphiFunction('Function SDecimal32ToStrU( const A : SDecimal32) : UnicodeString');
 CL.AddDelphiFunction('Function TryStrToSDecimal32( const A : String; out B : SDecimal32) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function TryStrToSDecimal32B( const A : RawByteString; out B : SDecimal32) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function StrToSDecimal32( const A : String) : SDecimal32');
 CL.AddDelphiFunction('Function StrToSDecimal32B( const A : RawByteString) : SDecimal32');
 CL.AddConstantN('SDecimal64MinInt','Int64').SetInt64( - 9999999999);
 CL.AddConstantN('SDecimal64MaxInt','Int64').SetInt64( 9999999999);
 CL.AddConstantN('SDecimal64MinFloatLim','Double').setExtended( - 999999999999999.9999999995);
 CL.AddConstantN('SDecimal64MinFloatLimD','Double').setExtended( - 999999999999999.9999999995);
 CL.AddConstantN('SDecimal64MaxFloatLim','Double').setExtended( 999999999999999.9999999995);
 CL.AddConstantN('SDecimal64MaxFloatLimD','Double').setExtended( 999999999999999.9999999995);
 CL.AddConstantN('SDecimal64MinFloatLimD','Double').setExtended( SDecimal64MinFloatLim);
 CL.AddConstantN('SDecimal64MaxFloatLim','').SetString( Decimal64MaxFloatLim);
 CL.AddConstantN('SDecimal64MaxFloatLimD','Double').setExtended( SDecimal64MaxFloatLim);
 CL.AddDelphiFunction('Procedure SDecimal64InitZero( var A : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64InitOne( var A : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64InitMinusOne( var A : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64InitMin( var A : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64InitMax( var A : SDecimal64)');
 CL.AddDelphiFunction('Function SDecimal64IsZero( const A : SDecimal64) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64IsOne( const A : SDecimal64) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64IsMinusOne( const A : SDecimal64) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64IsMinimum( const A : SDecimal64) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64IsMaximum( const A : SDecimal64) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64IsOverflow( const A : SDecimal64) : Boolean');
 CL.AddDelphiFunction('Function Word64IsSDecimal64Range( const A : Word64Rec) : Boolean');
 CL.AddDelphiFunction('Function Int64IsSDecimal64Range( const A : Int64) : Boolean');
 CL.AddDelphiFunction('Function FloatIsSDecimal64Range( const A : Double) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64Sign( const A : SDecimal64) : Integer');
 CL.AddDelphiFunction('Procedure SDecimal64Negate( var A : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64AbsInPlace( var A : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64InitWord8( var A : SDecimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal64InitWord16( var A : SDecimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal64InitWord32( var A : SDecimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal64InitWord64( var A : SDecimal64; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure SDecimal64InitInt32( var A : SDecimal64; const B : Int32)');
 CL.AddDelphiFunction('Procedure SDecimal64InitInt64( var A : SDecimal64; const B : Int64)');
 CL.AddDelphiFunction('Procedure SDecimal64InitSDecimal64( var A : SDecimal64; const B : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64InitFloat( var A : SDecimal64; const B : Double)');
 CL.AddDelphiFunction('Function SDecimal64ToWord8( const A : SDecimal64) : Byte');
 CL.AddDelphiFunction('Function SDecimal64ToWord16( const A : SDecimal64) : Word');
 CL.AddDelphiFunction('Function SDecimal64ToWord32( const A : SDecimal64) : Word32');
 CL.AddDelphiFunction('Function SDecimal64ToWord64( const A : SDecimal64) : Word64Rec');
 CL.AddDelphiFunction('Function SDecimal64ToInt32( const A : SDecimal64) : Int32');
 CL.AddDelphiFunction('Function SDecimal64ToInt64( const A : SDecimal64) : Int64');
 CL.AddDelphiFunction('Function SDecimal64ToSDecimal32( const A : SDecimal64) : SDecimal32');
 CL.AddDelphiFunction('Function SDecimal64ToFloat( const A : SDecimal64) : Double');
 CL.AddDelphiFunction('Function SDecimal64Trunc( const A : SDecimal64) : Int64');
 CL.AddDelphiFunction('Function SDecimal64Round( const A : SDecimal64) : Int64');
 CL.AddDelphiFunction('Function SDecimal64FracWord( const A : SDecimal64) : Word32');
 CL.AddDelphiFunction('Function SDecimal64EqualsWord8( const A : SDecimal64; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64EqualsWord16( const A : SDecimal64; const B : Word) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64EqualsWord32( const A : SDecimal64; const B : Word32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64EqualsInt32( const A : SDecimal64; const B : Int32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64EqualsInt64( const A : SDecimal64; const B : Int64) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64EqualsSDecimal64( const A : SDecimal64; const B : SDecimal64) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64EqualsFloat( const A : SDecimal64; const B : Double) : Boolean');
 CL.AddDelphiFunction('Function SDecimal64CompareWord8( const A : SDecimal64; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function SDecimal64CompareWord16( const A : SDecimal64; const B : Word) : Integer');
 CL.AddDelphiFunction('Function SDecimal64CompareWord32( const A : SDecimal64; const B : Word32) : Integer');
 CL.AddDelphiFunction('Function SDecimal64CompareInt32( const A : SDecimal64; const B : Int32) : Integer');
 CL.AddDelphiFunction('Function SDecimal64CompareInt64( const A : SDecimal64; const B : Int64) : Integer');
 CL.AddDelphiFunction('Function SDecimal64CompareSDecimal64( const A : SDecimal64; const B : SDecimal64) : Integer');
 CL.AddDelphiFunction('Function SDecimal64CompareFloat( const A : SDecimal64; const B : Double) : Integer');
 CL.AddDelphiFunction('Procedure SDecimal64AddWord8( var A : SDecimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal64AddWord16( var A : SDecimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal64AddWord32( var A : SDecimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal64AddSDecimal64( var A : SDecimal64; const B : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64SubtractWord8( var A : SDecimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal64SubtractWord16( var A : SDecimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal64SubtractWord32( var A : SDecimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal64SubtractSDecimal64( var A : SDecimal64; const B : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64MultiplyWord8( var A : SDecimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal64MultiplyWord16( var A : SDecimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal64MultiplyWord32( var A : SDecimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal64MultiplySDecimal64( var A : SDecimal64; const B : SDecimal64)');
 CL.AddDelphiFunction('Procedure SDecimal64DivideWord8( var A : SDecimal64; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal64DivideWord16( var A : SDecimal64; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal64DivideWord32( var A : SDecimal64; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal64DivideSDecimal64( var A : SDecimal64; const B : SDecimal64)');
 CL.AddDelphiFunction('Function SDecimal64ToStr( const A : SDecimal64) : String');
 CL.AddDelphiFunction('Function SDecimal64ToStrB( const A : SDecimal64) : RawByteString');
 CL.AddDelphiFunction('Function SDecimal64ToStrU( const A : SDecimal64) : UnicodeString');
 CL.AddDelphiFunction('Function TryStrToSDecimal64( const A : String; out B : SDecimal64) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function TryStrToSDecimal64B( const A : RawByteString; out B : SDecimal64) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function StrToSDecimal64( const A : String) : SDecimal64');
 CL.AddDelphiFunction('Function StrToSDecimal64B( const A : RawByteString) : SDecimal64');
 CL.AddConstantN('SDecimal128MinFloatLimD','Double').setExtended( SDecimal128MinFloatLim);
 CL.AddConstantN('SDecimal128MaxFloatLim','').SetString( Decimal128MaxFloatLim);
 CL.AddConstantN('SDecimal128MaxFloatLimD','Double').setExtended( SDecimal128MaxFloatLim);
 CL.AddDelphiFunction('Procedure SDecimal128InitZero( var A : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128InitOne( var A : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128InitMax( var A : SDecimal128)');
 CL.AddDelphiFunction('Function SDecimal128IsZero( const A : SDecimal128) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128IsOne( const A : SDecimal128) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128IsMaximum( const A : SDecimal128) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128IsOverflow( const A : SDecimal128) : Boolean');
 CL.AddDelphiFunction('Function Word64IsSDecimal128Range( const A : Word64Rec) : Boolean');
 CL.AddDelphiFunction('Function Word128IsSDecimal128Range( const A : Word128) : Boolean');
 CL.AddDelphiFunction('Function Int128IsSDecimal128Range( const A : Int128) : Boolean');
 CL.AddDelphiFunction('Function FloatIsSDecimal128Range( const A : Double) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128Sign( const A : SDecimal128) : Integer');
 CL.AddDelphiFunction('Procedure SDecimal128Negate( var A : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128AbsInPlace( var A : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128InitWord8( var A : SDecimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal128InitWord16( var A : SDecimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal128InitWord32( var A : SDecimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal128InitWord64( var A : SDecimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure SDecimal128InitInt32( var A : SDecimal128; const B : Int32)');
 CL.AddDelphiFunction('Procedure SDecimal128InitInt64( var A : SDecimal128; const B : Int64)');
 CL.AddDelphiFunction('Procedure SDecimal128InitSDecimal128( var A : SDecimal128; const B : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128InitFloat( var A : SDecimal128; const B : Double)');
 CL.AddDelphiFunction('Function SDecimal128ToWord8( const A : SDecimal128) : Byte');
 CL.AddDelphiFunction('Function SDecimal128ToWord16( const A : SDecimal128) : Word');
 CL.AddDelphiFunction('Function SDecimal128ToWord32( const A : SDecimal128) : Word32');
 CL.AddDelphiFunction('Function SDecimal128ToWord64( const A : SDecimal128) : Word64Rec');
 CL.AddDelphiFunction('Function SDecimal128ToInt32( const A : SDecimal128) : Int32');
 CL.AddDelphiFunction('Function SDecimal128ToInt64( const A : SDecimal128) : Int64');
 CL.AddDelphiFunction('Function SDecimal128ToFloat( const A : SDecimal128) : Double');
 CL.AddDelphiFunction('Function SDecimal128Trunc( const A : SDecimal128) : Int128');
 CL.AddDelphiFunction('Function SDecimal128Round( const A : SDecimal128) : Int128');
 CL.AddDelphiFunction('Function SDecimal128FracWord( const A : SDecimal128) : Word64Rec');
 CL.AddDelphiFunction('Function SDecimal128EqualsWord8( const A : SDecimal128; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128EqualsWord16( const A : SDecimal128; const B : Word) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128EqualsWord32( const A : SDecimal128; const B : Word32) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128EqualsWord64( const A : SDecimal128; const B : Word64Rec) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128EqualsSDecimal128( const A : SDecimal128; const B : SDecimal128) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128EqualsFloat( const A : SDecimal128; const B : Double) : Boolean');
 CL.AddDelphiFunction('Function SDecimal128CompareWord8( const A : SDecimal128; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function SDecimal128CompareWord16( const A : SDecimal128; const B : Word) : Integer');
 CL.AddDelphiFunction('Function SDecimal128CompareWord32( const A : SDecimal128; const B : Word32) : Integer');
 CL.AddDelphiFunction('Function SDecimal128CompareWord64( const A : SDecimal128; const B : Word64Rec) : Integer');
 CL.AddDelphiFunction('Function SDecimal128CompareInt32( const A : SDecimal128; const B : Int32) : Integer');
 CL.AddDelphiFunction('Function SDecimal128CompareInt64( const A : SDecimal128; const B : Int64) : Integer');
 CL.AddDelphiFunction('Function SDecimal128CompareSDecimal128( const A : SDecimal128; const B : SDecimal128) : Integer');
 CL.AddDelphiFunction('Function SDecimal128CompareFloat( const A : SDecimal128; const B : Double) : Integer');
 CL.AddDelphiFunction('Procedure SDecimal128AddWord8( var A : SDecimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal128AddWord16( var A : SDecimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal128AddWord32( var A : SDecimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal128AddWord64( var A : SDecimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure SDecimal128AddSDecimal128( var A : SDecimal128; const B : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128SubtractWord8( var A : SDecimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal128SubtractWord16( var A : SDecimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal128SubtractWord32( var A : SDecimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal128SubtractWord64( var A : SDecimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure SDecimal128SubtractSDecimal128( var A : SDecimal128; const B : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128MultiplyWord8( var A : SDecimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal128MultiplyWord16( var A : SDecimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal128MultiplyWord32( var A : SDecimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal128MultiplyWord64( var A : SDecimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure SDecimal128MultiplySDecimal128( var A : SDecimal128; const B : SDecimal128)');
 CL.AddDelphiFunction('Procedure SDecimal128DivideWord8( var A : SDecimal128; const B : Byte)');
 CL.AddDelphiFunction('Procedure SDecimal128DivideWord16( var A : SDecimal128; const B : Word)');
 CL.AddDelphiFunction('Procedure SDecimal128DivideWord32( var A : SDecimal128; const B : Word32)');
 CL.AddDelphiFunction('Procedure SDecimal128DivideWord64( var A : SDecimal128; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure SDecimal128DivideSDecimal128( var A : SDecimal128; const B : SDecimal128)');
 CL.AddDelphiFunction('Function SDecimal128ToStr( const A : SDecimal128) : String');
 CL.AddDelphiFunction('Function SDecimal128ToStrB( const A : SDecimal128) : RawByteString');
 CL.AddDelphiFunction('Function SDecimal128ToStrU( const A : SDecimal128) : UnicodeString');
 CL.AddDelphiFunction('Function TryStrToSDecimal128( const A : String; out B : SDecimal128) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function TryStrToSDecimal128B( const A : RawByteString; out B : SDecimal128) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Function StrToSDecimal128( const A : String) : SDecimal128');
 CL.AddDelphiFunction('Function StrToSDecimal128B( const A : RawByteString) : SDecimal128');
 CL.AddDelphiFunction('Procedure SHugeDecimalInit( out A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalInitZero( out A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalInitOne( out A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalInitMinusOne( out A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignZero( var A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignOne( var A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignMinusOne( var A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignWord8( var A : SHugeDecimal; const B : Byte)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignWord32( var A : SHugeDecimal; const B : Word32)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignWord64( var A : SHugeDecimal; const B : Word64Rec)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignWord128( var A : SHugeDecimal; const B : Word128)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignInt8( var A : SHugeDecimal; const B : ShortInt)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignInt32( var A : SHugeDecimal; const B : Int32)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignInt64( var A : SHugeDecimal; const B : Int64)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignDecimal32( var A : SHugeDecimal; const B : Decimal32)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignDecimal64( var A : SHugeDecimal; const B : Decimal64)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignDecimal128( var A : SHugeDecimal; const B : Decimal128)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignHugeDecimal( var A : SHugeDecimal; const B : HugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAssignSHugeDecimal( var A : SHugeDecimal; const B : SHugeDecimal)');
 CL.AddDelphiFunction('Function SHugeDecimalIsZero( const A : SHugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function SHugeDecimalIsOne( const A : SHugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function SHugeDecimalIsMinusOne( const A : SHugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function SHugeDecimalSign( const A : SHugeDecimal) : Integer');
 CL.AddDelphiFunction('Procedure SHugeDecimalNegate( var A : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAbsInPlace( var A : SHugeDecimal)');
 CL.AddDelphiFunction('Function SHugeDecimalToWord8( const A : SHugeDecimal) : Byte');
 CL.AddDelphiFunction('Function SHugeDecimalToWord32( const A : SHugeDecimal) : Word32');
 CL.AddDelphiFunction('Function SHugeDecimalToWord64( const A : SHugeDecimal) : Word64Rec');
 CL.AddDelphiFunction('Function SHugeDecimalToWord128( const A : SHugeDecimal) : Word128');
 CL.AddDelphiFunction('Function SHugeDecimalToInt8( const A : SHugeDecimal) : ShortInt');
 CL.AddDelphiFunction('Function SHugeDecimalToInt32( const A : SHugeDecimal) : Int32');
 CL.AddDelphiFunction('Function SHugeDecimalToInt64( const A : SHugeDecimal) : Int64');
 CL.AddDelphiFunction('Function SHugeDecimalToDecimal32( const A : SHugeDecimal) : Decimal32');
 CL.AddDelphiFunction('Function SHugeDecimalToDecimal64( const A : SHugeDecimal) : Decimal64');
 CL.AddDelphiFunction('Function SHugeDecimalToDecimal128( const A : SHugeDecimal) : Decimal128');
 CL.AddDelphiFunction('Procedure SHugeDecimalTrunc( var A : SHugeDecimal)');
 CL.AddDelphiFunction('Function SHugeDecimalFracCompareHalf( var A : SHugeDecimal) : Integer');
 CL.AddDelphiFunction('Procedure SHugeDecimalRound( var A : SHugeDecimal)');
 CL.AddDelphiFunction('Function SHugeDecimalEqualsWord8( const A : SHugeDecimal; const B : Byte) : Boolean');
 CL.AddDelphiFunction('Function SHugeDecimalEqualsHugeDecimal( const A : SHugeDecimal; const B : HugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function SHugeDecimalEqualsSHugeDecimal( const A, B : SHugeDecimal) : Boolean');
 CL.AddDelphiFunction('Function SHugeDecimalCompareWord8( const A : SHugeDecimal; const B : Byte) : Integer');
 CL.AddDelphiFunction('Function SHugeDecimalCompareHugeDecimal( const A : SHugeDecimal; const B : HugeDecimal) : Integer');
 CL.AddDelphiFunction('Function SHugeDecimalCompareSHugeDecimal( const A, B : SHugeDecimal) : Integer');
 CL.AddDelphiFunction('Procedure SHugeDecimalAddHugeDecimal( var A : SHugeDecimal; const B : HugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalAddSHugeDecimal( var A : SHugeDecimal; const B : SHugeDecimal)');
 CL.AddDelphiFunction('Procedure SHugeDecimalSubtractSHugeDecimal( var A : SHugeDecimal; const B : SHugeDecimal)');
 CL.AddDelphiFunction('Function TryStrToSHugeDecimal( const S : String; var R : SHugeDecimal) : TDecimalConvertErrorType');
 CL.AddDelphiFunction('Procedure StrToSHugeDecimal( const S : String; var R : SHugeDecimal)');
 CL.AddDelphiFunction('Function SHugeDecimalToStr( const A : SHugeDecimal) : String');
 CL.AddDelphiFunction('Procedure Test');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_flcDecimal_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Decimal32InitZero, 'Decimal32InitZero', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitOne, 'Decimal32InitOne', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitMax, 'Decimal32InitMax', cdRegister);
 S.RegisterDelphiFunction(@Decimal32IsZero, 'Decimal32IsZero', cdRegister);
 S.RegisterDelphiFunction(@Decimal32IsOne, 'Decimal32IsOne', cdRegister);
 S.RegisterDelphiFunction(@Decimal32IsMaximum, 'Decimal32IsMaximum', cdRegister);
 S.RegisterDelphiFunction(@Decimal32IsOverflow, 'Decimal32IsOverflow', cdRegister);
 S.RegisterDelphiFunction(@Word32IsDecimal32Range, 'Word32IsDecimal32Range', cdRegister);
 S.RegisterDelphiFunction(@Int16IsDecimal32Range, 'Int16IsDecimal32Range', cdRegister);
 S.RegisterDelphiFunction(@Int32IsDecimal32Range, 'Int32IsDecimal32Range', cdRegister);
 S.RegisterDelphiFunction(@FloatIsDecimal32Range, 'FloatIsDecimal32Range', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitWord8, 'Decimal32InitWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitWord16, 'Decimal32InitWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitWord32, 'Decimal32InitWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitInt32, 'Decimal32InitInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitDecimal32, 'Decimal32InitDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32InitFloat, 'Decimal32InitFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToWord8, 'Decimal32ToWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToWord16, 'Decimal32ToWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToWord32, 'Decimal32ToWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToInt32, 'Decimal32ToInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToFloat, 'Decimal32ToFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal32Trunc, 'Decimal32Trunc', cdRegister);
 S.RegisterDelphiFunction(@Decimal32Round, 'Decimal32Round', cdRegister);
 S.RegisterDelphiFunction(@Decimal32FracWord, 'Decimal32FracWord', cdRegister);
 S.RegisterDelphiFunction(@Decimal32EqualsWord8, 'Decimal32EqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32EqualsWord16, 'Decimal32EqualsWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32EqualsWord32, 'Decimal32EqualsWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32EqualsInt32, 'Decimal32EqualsInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32EqualsDecimal32, 'Decimal32EqualsDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32EqualsFloat, 'Decimal32EqualsFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal32CompareWord8, 'Decimal32CompareWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32CompareWord16, 'Decimal32CompareWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32CompareWord32, 'Decimal32CompareWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32CompareInt32, 'Decimal32CompareInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32CompareDecimal32, 'Decimal32CompareDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32CompareFloat, 'Decimal32CompareFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal32AddWord8, 'Decimal32AddWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32AddWord16, 'Decimal32AddWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32AddWord32, 'Decimal32AddWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32AddDecimal32, 'Decimal32AddDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32SubtractWord8, 'Decimal32SubtractWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32SubtractWord16, 'Decimal32SubtractWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32SubtractWord32, 'Decimal32SubtractWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32SubtractDecimal32, 'Decimal32SubtractDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32MultiplyWord8, 'Decimal32MultiplyWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32MultiplyWord16, 'Decimal32MultiplyWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32MultiplyWord32, 'Decimal32MultiplyWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32MultiplyDecimal32, 'Decimal32MultiplyDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32Sqr, 'Decimal32Sqr', cdRegister);
 S.RegisterDelphiFunction(@Decimal32DivideWord8, 'Decimal32DivideWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal32DivideWord16, 'Decimal32DivideWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal32DivideWord32, 'Decimal32DivideWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32DivideDecimal32, 'Decimal32DivideDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToStr, 'Decimal32ToStr', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToStrB, 'Decimal32ToStrB', cdRegister);
 S.RegisterDelphiFunction(@Decimal32ToStrU, 'Decimal32ToStrU', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDecimal32, 'TryStrToDecimal32', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDecimal32B, 'TryStrToDecimal32B', cdRegister);
 S.RegisterDelphiFunction(@StrToDecimal32, 'StrToDecimal32', cdRegister);
 S.RegisterDelphiFunction(@StrToDecimal32B, 'StrToDecimal32B', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitZero, 'Decimal64InitZero', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitOne, 'Decimal64InitOne', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitMax, 'Decimal64InitMax', cdRegister);
 S.RegisterDelphiFunction(@Decimal64IsZero, 'Decimal64IsZero', cdRegister);
 S.RegisterDelphiFunction(@Decimal64IsOne, 'Decimal64IsOne', cdRegister);
 S.RegisterDelphiFunction(@Decimal64IsMaximum, 'Decimal64IsMaximum', cdRegister);
 S.RegisterDelphiFunction(@Decimal64IsOverflow, 'Decimal64IsOverflow', cdRegister);
 S.RegisterDelphiFunction(@Word64IsDecimal64Range, 'Word64IsDecimal64Range', cdRegister);
 S.RegisterDelphiFunction(@Int32IsDecimal64Range, 'Int32IsDecimal64Range', cdRegister);
 S.RegisterDelphiFunction(@Int64IsDecimal64Range, 'Int64IsDecimal64Range', cdRegister);
 S.RegisterDelphiFunction(@FloatIsDecimal64Range, 'FloatIsDecimal64Range', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitWord8, 'Decimal64InitWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitWord16, 'Decimal64InitWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitWord32, 'Decimal64InitWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitWord64, 'Decimal64InitWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitInt32, 'Decimal64InitInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitInt64, 'Decimal64InitInt64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitDecimal32, 'Decimal64InitDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitDecimal64, 'Decimal64InitDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64InitFloat, 'Decimal64InitFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToWord8, 'Decimal64ToWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToWord16, 'Decimal64ToWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToWord32, 'Decimal64ToWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToWord64, 'Decimal64ToWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToInt32, 'Decimal64ToInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToInt64, 'Decimal64ToInt64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToDecimal32, 'Decimal64ToDecimal32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToFloat, 'Decimal64ToFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal64Trunc, 'Decimal64Trunc', cdRegister);
 S.RegisterDelphiFunction(@Decimal64Round, 'Decimal64Round', cdRegister);
 S.RegisterDelphiFunction(@Decimal64FracWord, 'Decimal64FracWord', cdRegister);
 S.RegisterDelphiFunction(@Decimal64EqualsWord8, 'Decimal64EqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64EqualsWord16, 'Decimal64EqualsWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64EqualsWord32, 'Decimal64EqualsWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64EqualsInt32, 'Decimal64EqualsInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64EqualsInt64, 'Decimal64EqualsInt64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64EqualsDecimal64, 'Decimal64EqualsDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64EqualsFloat, 'Decimal64EqualsFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal64CompareWord8, 'Decimal64CompareWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64CompareWord16, 'Decimal64CompareWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64CompareWord32, 'Decimal64CompareWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64CompareInt32, 'Decimal64CompareInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64CompareInt64, 'Decimal64CompareInt64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64CompareDecimal64, 'Decimal64CompareDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64CompareFloat, 'Decimal64CompareFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal64AddWord8, 'Decimal64AddWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64AddWord16, 'Decimal64AddWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64AddWord32, 'Decimal64AddWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64AddDecimal64, 'Decimal64AddDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64SubtractWord8, 'Decimal64SubtractWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64SubtractWord16, 'Decimal64SubtractWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64SubtractWord32, 'Decimal64SubtractWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64SubtractDecimal64, 'Decimal64SubtractDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64MultiplyWord8, 'Decimal64MultiplyWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64MultiplyWord16, 'Decimal64MultiplyWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64MultiplyWord32, 'Decimal64MultiplyWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64MultiplyDecimal64, 'Decimal64MultiplyDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64Sqr, 'Decimal64Sqr', cdRegister);
 S.RegisterDelphiFunction(@Decimal64DivideWord8, 'Decimal64DivideWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal64DivideWord16, 'Decimal64DivideWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal64DivideWord32, 'Decimal64DivideWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal64DivideDecimal64, 'Decimal64DivideDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToStr, 'Decimal64ToStr', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToStrB, 'Decimal64ToStrB', cdRegister);
 S.RegisterDelphiFunction(@Decimal64ToStrU, 'Decimal64ToStrU', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDecimal64, 'TryStrToDecimal64', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDecimal64B, 'TryStrToDecimal64B', cdRegister);
 S.RegisterDelphiFunction(@StrToDecimal64, 'StrToDecimal64', cdRegister);
 S.RegisterDelphiFunction(@StrToDecimal64B, 'StrToDecimal64B', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitZero, 'Decimal128InitZero', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitOne, 'Decimal128InitOne', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitMax, 'Decimal128InitMax', cdRegister);
 S.RegisterDelphiFunction(@Decimal128IsZero, 'Decimal128IsZero', cdRegister);
 S.RegisterDelphiFunction(@Decimal128IsOne, 'Decimal128IsOne', cdRegister);
 S.RegisterDelphiFunction(@Decimal128IsMaximum, 'Decimal128IsMaximum', cdRegister);
 S.RegisterDelphiFunction(@Decimal128IsOverflow, 'Decimal128IsOverflow', cdRegister);
 S.RegisterDelphiFunction(@Word64IsDecimal128Range, 'Word64IsDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@Word128IsDecimal128Range, 'Word128IsDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@Int64IsDecimal128Range, 'Int64IsDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@Int128IsDecimal128Range, 'Int128IsDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@FloatIsDecimal128Range, 'FloatIsDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitWord8, 'Decimal128InitWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitWord16, 'Decimal128InitWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitWord32, 'Decimal128InitWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitWord64, 'Decimal128InitWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitInt32, 'Decimal128InitInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitInt64, 'Decimal128InitInt64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitDecimal64, 'Decimal128InitDecimal64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitDecimal128, 'Decimal128InitDecimal128', cdRegister);
 S.RegisterDelphiFunction(@Decimal128InitFloat, 'Decimal128InitFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToWord8, 'Decimal128ToWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToWord16, 'Decimal128ToWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToWord32, 'Decimal128ToWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToWord64, 'Decimal128ToWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToInt32, 'Decimal128ToInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToInt64, 'Decimal128ToInt64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToFloat, 'Decimal128ToFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal128Trunc, 'Decimal128Trunc', cdRegister);
 S.RegisterDelphiFunction(@Decimal128Round, 'Decimal128Round', cdRegister);
 S.RegisterDelphiFunction(@Decimal128FracWord, 'Decimal128FracWord', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsWord8, 'Decimal128EqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsWord16, 'Decimal128EqualsWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsWord32, 'Decimal128EqualsWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsWord64, 'Decimal128EqualsWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsInt32, 'Decimal128EqualsInt32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsInt64, 'Decimal128EqualsInt64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsDecimal128, 'Decimal128EqualsDecimal128', cdRegister);
 S.RegisterDelphiFunction(@Decimal128EqualsFloat, 'Decimal128EqualsFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal128CompareWord8, 'Decimal128CompareWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128CompareWord16, 'Decimal128CompareWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128CompareWord32, 'Decimal128CompareWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128CompareWord64, 'Decimal128CompareWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128CompareDecimal128, 'Decimal128CompareDecimal128', cdRegister);
 S.RegisterDelphiFunction(@Decimal128CompareFloat, 'Decimal128CompareFloat', cdRegister);
 S.RegisterDelphiFunction(@Decimal128AddWord8, 'Decimal128AddWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128AddWord16, 'Decimal128AddWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128AddWord32, 'Decimal128AddWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128AddWord64, 'Decimal128AddWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128AddDecimal128, 'Decimal128AddDecimal128', cdRegister);
 S.RegisterDelphiFunction(@Decimal128SubtractWord8, 'Decimal128SubtractWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128SubtractWord16, 'Decimal128SubtractWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128SubtractWord32, 'Decimal128SubtractWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128SubtractWord64, 'Decimal128SubtractWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128SubtractDecimal128, 'Decimal128SubtractDecimal128', cdRegister);
 S.RegisterDelphiFunction(@Decimal128MultiplyWord8, 'Decimal128MultiplyWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128MultiplyWord16, 'Decimal128MultiplyWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128MultiplyWord32, 'Decimal128MultiplyWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128MultiplyWord64, 'Decimal128MultiplyWord64', cdRegister);
 S.RegisterDelphiFunction(@Decimal128MultiplyDecimal128, 'Decimal128MultiplyDecimal128', cdRegister);
 S.RegisterDelphiFunction(@Decimal128Sqr, 'Decimal128Sqr', cdRegister);
 S.RegisterDelphiFunction(@Decimal128DivideWord8, 'Decimal128DivideWord8', cdRegister);
 S.RegisterDelphiFunction(@Decimal128DivideWord16, 'Decimal128DivideWord16', cdRegister);
 S.RegisterDelphiFunction(@Decimal128DivideWord32, 'Decimal128DivideWord32', cdRegister);
 S.RegisterDelphiFunction(@Decimal128DivideDecimal128, 'Decimal128DivideDecimal128', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToStr, 'Decimal128ToStr', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToStrB, 'Decimal128ToStrB', cdRegister);
 S.RegisterDelphiFunction(@Decimal128ToStrU, 'Decimal128ToStrU', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDecimal128, 'TryStrToDecimal128', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDecimal128B, 'TryStrToDecimal128B', cdRegister);
 S.RegisterDelphiFunction(@StrToDecimal128, 'StrToDecimal128', cdRegister);
 S.RegisterDelphiFunction(@StrToDecimal128B, 'StrToDecimal128B', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInit, 'HugeDecimalInit', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalFinalise, 'HugeDecimalFinalise', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitZero, 'HugeDecimalInitZero', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitOne, 'HugeDecimalInitOne', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitWord8, 'HugeDecimalInitWord8', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitWord32, 'HugeDecimalInitWord32', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitWord64, 'HugeDecimalInitWord64', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitWord128, 'HugeDecimalInitWord128', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitDecimal32, 'HugeDecimalInitDecimal32', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitDecimal64, 'HugeDecimalInitDecimal64', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitDecimal128, 'HugeDecimalInitDecimal128', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInitHugeDecimal, 'HugeDecimalInitHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignZero, 'HugeDecimalAssignZero', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignOne, 'HugeDecimalAssignOne', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignWord8, 'HugeDecimalAssignWord8', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignWord32, 'HugeDecimalAssignWord32', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignWord64, 'HugeDecimalAssignWord64', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignWord128, 'HugeDecimalAssignWord128', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignDecimal32, 'HugeDecimalAssignDecimal32', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignDecimal64, 'HugeDecimalAssignDecimal64', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignDecimal128, 'HugeDecimalAssignDecimal128', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAssignHugeDecimal, 'HugeDecimalAssignHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsZero, 'HugeDecimalIsZero', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsOne, 'HugeDecimalIsOne', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsOdd, 'HugeDecimalIsOdd', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsEven, 'HugeDecimalIsEven', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsInteger, 'HugeDecimalIsInteger', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsLessThanOne, 'HugeDecimalIsLessThanOne', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsOneOrGreater, 'HugeDecimalIsOneOrGreater', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIsWord8Range, 'HugeDecimalIsWord8Range', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalDigits, 'HugeDecimalDigits', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalIntegerDigits, 'HugeDecimalIntegerDigits', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalDecimalDigits, 'HugeDecimalDecimalDigits', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalGetDigit, 'HugeDecimalGetDigit', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalSetDigit, 'HugeDecimalSetDigit', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToWord8, 'HugeDecimalToWord8', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToWord32, 'HugeDecimalToWord32', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToWord64, 'HugeDecimalToWord64', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToWord128, 'HugeDecimalToWord128', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToDecimal32, 'HugeDecimalToDecimal32', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToDecimal64, 'HugeDecimalToDecimal64', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToDecimal128, 'HugeDecimalToDecimal128', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalMul10, 'HugeDecimalMul10', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalDiv10, 'HugeDecimalDiv10', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalInc, 'HugeDecimalInc', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalDec, 'HugeDecimalDec', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalTrunc, 'HugeDecimalTrunc', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalFracCompareHalf, 'HugeDecimalFracCompareHalf', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalRound, 'HugeDecimalRound', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalEqualsWord8, 'HugeDecimalEqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalEqualsHugeDecimal, 'HugeDecimalEqualsHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalCompareWord8, 'HugeDecimalCompareWord8', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalCompareHugeDecimal, 'HugeDecimalCompareHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalAddHugeDecimal, 'HugeDecimalAddHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalSubtractHugeDecimal, 'HugeDecimalSubtractHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@TryStrToHugeDecimal, 'TryStrToHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@StrToHugeDecimal, 'StrToHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@HugeDecimalToStr, 'HugeDecimalToStr', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitZero, 'SDecimal32InitZero', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitOne, 'SDecimal32InitOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitMinusOne, 'SDecimal32InitMinusOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitMin, 'SDecimal32InitMin', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitMax, 'SDecimal32InitMax', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32IsZero, 'SDecimal32IsZero', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32IsOne, 'SDecimal32IsOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32IsMinusOne, 'SDecimal32IsMinusOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32IsMinimum, 'SDecimal32IsMinimum', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32IsMaximum, 'SDecimal32IsMaximum', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32IsOverflow, 'SDecimal32IsOverflow', cdRegister);
 S.RegisterDelphiFunction(@Word32IsSDecimal32Range, 'Word32IsSDecimal32Range', cdRegister);
 S.RegisterDelphiFunction(@Int32IsSDecimal32Range, 'Int32IsSDecimal32Range', cdRegister);
 S.RegisterDelphiFunction(@FloatIsSDecimal32Range, 'FloatIsSDecimal32Range', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32Sign, 'SDecimal32Sign', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32Negate, 'SDecimal32Negate', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32AbsInPlace, 'SDecimal32AbsInPlace', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitWord8, 'SDecimal32InitWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitWord16, 'SDecimal32InitWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitWord32, 'SDecimal32InitWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitInt32, 'SDecimal32InitInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitSDecimal32, 'SDecimal32InitSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32InitFloat, 'SDecimal32InitFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToWord8, 'SDecimal32ToWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToWord16, 'SDecimal32ToWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToWord32, 'SDecimal32ToWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToInt32, 'SDecimal32ToInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToFloat, 'SDecimal32ToFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32Trunc, 'SDecimal32Trunc', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32Round, 'SDecimal32Round', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32FracWord, 'SDecimal32FracWord', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32EqualsWord8, 'SDecimal32EqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32EqualsWord16, 'SDecimal32EqualsWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32EqualsWord32, 'SDecimal32EqualsWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32EqualsInt32, 'SDecimal32EqualsInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32EqualsSDecimal32, 'SDecimal32EqualsSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32EqualsFloat, 'SDecimal32EqualsFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32CompareWord8, 'SDecimal32CompareWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32CompareWord16, 'SDecimal32CompareWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32CompareWord32, 'SDecimal32CompareWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32CompareInt32, 'SDecimal32CompareInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32CompareSDecimal32, 'SDecimal32CompareSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32CompareFloat, 'SDecimal32CompareFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32AddWord8, 'SDecimal32AddWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32AddWord16, 'SDecimal32AddWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32AddWord32, 'SDecimal32AddWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32AddSDecimal32, 'SDecimal32AddSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32SubtractWord8, 'SDecimal32SubtractWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32SubtractWord16, 'SDecimal32SubtractWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32SubtractWord32, 'SDecimal32SubtractWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32SubtractSDecimal32, 'SDecimal32SubtractSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32MultiplyWord8, 'SDecimal32MultiplyWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32MultiplyWord16, 'SDecimal32MultiplyWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32MultiplyWord32, 'SDecimal32MultiplyWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32MultiplySDecimal32, 'SDecimal32MultiplySDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32DivideWord8, 'SDecimal32DivideWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32DivideWord16, 'SDecimal32DivideWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32DivideWord32, 'SDecimal32DivideWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32DivideSDecimal32, 'SDecimal32DivideSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToStr, 'SDecimal32ToStr', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToStrB, 'SDecimal32ToStrB', cdRegister);
 S.RegisterDelphiFunction(@SDecimal32ToStrU, 'SDecimal32ToStrU', cdRegister);
 S.RegisterDelphiFunction(@TryStrToSDecimal32, 'TryStrToSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@TryStrToSDecimal32B, 'TryStrToSDecimal32B', cdRegister);
 S.RegisterDelphiFunction(@StrToSDecimal32, 'StrToSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@StrToSDecimal32B, 'StrToSDecimal32B', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitZero, 'SDecimal64InitZero', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitOne, 'SDecimal64InitOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitMinusOne, 'SDecimal64InitMinusOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitMin, 'SDecimal64InitMin', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitMax, 'SDecimal64InitMax', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64IsZero, 'SDecimal64IsZero', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64IsOne, 'SDecimal64IsOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64IsMinusOne, 'SDecimal64IsMinusOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64IsMinimum, 'SDecimal64IsMinimum', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64IsMaximum, 'SDecimal64IsMaximum', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64IsOverflow, 'SDecimal64IsOverflow', cdRegister);
 S.RegisterDelphiFunction(@Word64IsSDecimal64Range, 'Word64IsSDecimal64Range', cdRegister);
 S.RegisterDelphiFunction(@Int64IsSDecimal64Range, 'Int64IsSDecimal64Range', cdRegister);
 S.RegisterDelphiFunction(@FloatIsSDecimal64Range, 'FloatIsSDecimal64Range', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64Sign, 'SDecimal64Sign', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64Negate, 'SDecimal64Negate', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64AbsInPlace, 'SDecimal64AbsInPlace', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitWord8, 'SDecimal64InitWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitWord16, 'SDecimal64InitWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitWord32, 'SDecimal64InitWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitWord64, 'SDecimal64InitWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitInt32, 'SDecimal64InitInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitInt64, 'SDecimal64InitInt64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitSDecimal64, 'SDecimal64InitSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64InitFloat, 'SDecimal64InitFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToWord8, 'SDecimal64ToWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToWord16, 'SDecimal64ToWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToWord32, 'SDecimal64ToWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToWord64, 'SDecimal64ToWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToInt32, 'SDecimal64ToInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToInt64, 'SDecimal64ToInt64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToSDecimal32, 'SDecimal64ToSDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToFloat, 'SDecimal64ToFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64Trunc, 'SDecimal64Trunc', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64Round, 'SDecimal64Round', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64FracWord, 'SDecimal64FracWord', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64EqualsWord8, 'SDecimal64EqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64EqualsWord16, 'SDecimal64EqualsWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64EqualsWord32, 'SDecimal64EqualsWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64EqualsInt32, 'SDecimal64EqualsInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64EqualsInt64, 'SDecimal64EqualsInt64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64EqualsSDecimal64, 'SDecimal64EqualsSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64EqualsFloat, 'SDecimal64EqualsFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64CompareWord8, 'SDecimal64CompareWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64CompareWord16, 'SDecimal64CompareWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64CompareWord32, 'SDecimal64CompareWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64CompareInt32, 'SDecimal64CompareInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64CompareInt64, 'SDecimal64CompareInt64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64CompareSDecimal64, 'SDecimal64CompareSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64CompareFloat, 'SDecimal64CompareFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64AddWord8, 'SDecimal64AddWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64AddWord16, 'SDecimal64AddWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64AddWord32, 'SDecimal64AddWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64AddSDecimal64, 'SDecimal64AddSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64SubtractWord8, 'SDecimal64SubtractWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64SubtractWord16, 'SDecimal64SubtractWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64SubtractWord32, 'SDecimal64SubtractWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64SubtractSDecimal64, 'SDecimal64SubtractSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64MultiplyWord8, 'SDecimal64MultiplyWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64MultiplyWord16, 'SDecimal64MultiplyWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64MultiplyWord32, 'SDecimal64MultiplyWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64MultiplySDecimal64, 'SDecimal64MultiplySDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64DivideWord8, 'SDecimal64DivideWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64DivideWord16, 'SDecimal64DivideWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64DivideWord32, 'SDecimal64DivideWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64DivideSDecimal64, 'SDecimal64DivideSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToStr, 'SDecimal64ToStr', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToStrB, 'SDecimal64ToStrB', cdRegister);
 S.RegisterDelphiFunction(@SDecimal64ToStrU, 'SDecimal64ToStrU', cdRegister);
 S.RegisterDelphiFunction(@TryStrToSDecimal64, 'TryStrToSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@TryStrToSDecimal64B, 'TryStrToSDecimal64B', cdRegister);
 S.RegisterDelphiFunction(@StrToSDecimal64, 'StrToSDecimal64', cdRegister);
 S.RegisterDelphiFunction(@StrToSDecimal64B, 'StrToSDecimal64B', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitZero, 'SDecimal128InitZero', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitOne, 'SDecimal128InitOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitMax, 'SDecimal128InitMax', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128IsZero, 'SDecimal128IsZero', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128IsOne, 'SDecimal128IsOne', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128IsMaximum, 'SDecimal128IsMaximum', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128IsOverflow, 'SDecimal128IsOverflow', cdRegister);
 S.RegisterDelphiFunction(@Word64IsSDecimal128Range, 'Word64IsSDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@Word128IsSDecimal128Range, 'Word128IsSDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@Int128IsSDecimal128Range, 'Int128IsSDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@FloatIsSDecimal128Range, 'FloatIsSDecimal128Range', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128Sign, 'SDecimal128Sign', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128Negate, 'SDecimal128Negate', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128AbsInPlace, 'SDecimal128AbsInPlace', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitWord8, 'SDecimal128InitWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitWord16, 'SDecimal128InitWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitWord32, 'SDecimal128InitWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitWord64, 'SDecimal128InitWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitInt32, 'SDecimal128InitInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitInt64, 'SDecimal128InitInt64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitSDecimal128, 'SDecimal128InitSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128InitFloat, 'SDecimal128InitFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToWord8, 'SDecimal128ToWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToWord16, 'SDecimal128ToWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToWord32, 'SDecimal128ToWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToWord64, 'SDecimal128ToWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToInt32, 'SDecimal128ToInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToInt64, 'SDecimal128ToInt64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToFloat, 'SDecimal128ToFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128Trunc, 'SDecimal128Trunc', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128Round, 'SDecimal128Round', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128FracWord, 'SDecimal128FracWord', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128EqualsWord8, 'SDecimal128EqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128EqualsWord16, 'SDecimal128EqualsWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128EqualsWord32, 'SDecimal128EqualsWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128EqualsWord64, 'SDecimal128EqualsWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128EqualsSDecimal128, 'SDecimal128EqualsSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128EqualsFloat, 'SDecimal128EqualsFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareWord8, 'SDecimal128CompareWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareWord16, 'SDecimal128CompareWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareWord32, 'SDecimal128CompareWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareWord64, 'SDecimal128CompareWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareInt32, 'SDecimal128CompareInt32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareInt64, 'SDecimal128CompareInt64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareSDecimal128, 'SDecimal128CompareSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128CompareFloat, 'SDecimal128CompareFloat', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128AddWord8, 'SDecimal128AddWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128AddWord16, 'SDecimal128AddWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128AddWord32, 'SDecimal128AddWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128AddWord64, 'SDecimal128AddWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128AddSDecimal128, 'SDecimal128AddSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128SubtractWord8, 'SDecimal128SubtractWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128SubtractWord16, 'SDecimal128SubtractWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128SubtractWord32, 'SDecimal128SubtractWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128SubtractWord64, 'SDecimal128SubtractWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128SubtractSDecimal128, 'SDecimal128SubtractSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128MultiplyWord8, 'SDecimal128MultiplyWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128MultiplyWord16, 'SDecimal128MultiplyWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128MultiplyWord32, 'SDecimal128MultiplyWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128MultiplyWord64, 'SDecimal128MultiplyWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128MultiplySDecimal128, 'SDecimal128MultiplySDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128DivideWord8, 'SDecimal128DivideWord8', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128DivideWord16, 'SDecimal128DivideWord16', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128DivideWord32, 'SDecimal128DivideWord32', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128DivideWord64, 'SDecimal128DivideWord64', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128DivideSDecimal128, 'SDecimal128DivideSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToStr, 'SDecimal128ToStr', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToStrB, 'SDecimal128ToStrB', cdRegister);
 S.RegisterDelphiFunction(@SDecimal128ToStrU, 'SDecimal128ToStrU', cdRegister);
 S.RegisterDelphiFunction(@TryStrToSDecimal128, 'TryStrToSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@TryStrToSDecimal128B, 'TryStrToSDecimal128B', cdRegister);
 S.RegisterDelphiFunction(@StrToSDecimal128, 'StrToSDecimal128', cdRegister);
 S.RegisterDelphiFunction(@StrToSDecimal128B, 'StrToSDecimal128B', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalInit, 'SHugeDecimalInit', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalInitZero, 'SHugeDecimalInitZero', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalInitOne, 'SHugeDecimalInitOne', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalInitMinusOne, 'SHugeDecimalInitMinusOne', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignZero, 'SHugeDecimalAssignZero', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignOne, 'SHugeDecimalAssignOne', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignMinusOne, 'SHugeDecimalAssignMinusOne', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignWord8, 'SHugeDecimalAssignWord8', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignWord32, 'SHugeDecimalAssignWord32', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignWord64, 'SHugeDecimalAssignWord64', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignWord128, 'SHugeDecimalAssignWord128', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignInt8, 'SHugeDecimalAssignInt8', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignInt32, 'SHugeDecimalAssignInt32', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignInt64, 'SHugeDecimalAssignInt64', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignDecimal32, 'SHugeDecimalAssignDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignDecimal64, 'SHugeDecimalAssignDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignDecimal128, 'SHugeDecimalAssignDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignHugeDecimal, 'SHugeDecimalAssignHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAssignSHugeDecimal, 'SHugeDecimalAssignSHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalIsZero, 'SHugeDecimalIsZero', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalIsOne, 'SHugeDecimalIsOne', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalIsMinusOne, 'SHugeDecimalIsMinusOne', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalSign, 'SHugeDecimalSign', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalNegate, 'SHugeDecimalNegate', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAbsInPlace, 'SHugeDecimalAbsInPlace', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToWord8, 'SHugeDecimalToWord8', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToWord32, 'SHugeDecimalToWord32', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToWord64, 'SHugeDecimalToWord64', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToWord128, 'SHugeDecimalToWord128', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToInt8, 'SHugeDecimalToInt8', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToInt32, 'SHugeDecimalToInt32', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToInt64, 'SHugeDecimalToInt64', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToDecimal32, 'SHugeDecimalToDecimal32', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToDecimal64, 'SHugeDecimalToDecimal64', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToDecimal128, 'SHugeDecimalToDecimal128', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalTrunc, 'SHugeDecimalTrunc', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalFracCompareHalf, 'SHugeDecimalFracCompareHalf', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalRound, 'SHugeDecimalRound', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalEqualsWord8, 'SHugeDecimalEqualsWord8', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalEqualsHugeDecimal, 'SHugeDecimalEqualsHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalEqualsSHugeDecimal, 'SHugeDecimalEqualsSHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalCompareWord8, 'SHugeDecimalCompareWord8', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalCompareHugeDecimal, 'SHugeDecimalCompareHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalCompareSHugeDecimal, 'SHugeDecimalCompareSHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAddHugeDecimal, 'SHugeDecimalAddHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalAddSHugeDecimal, 'SHugeDecimalAddSHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalSubtractSHugeDecimal, 'SHugeDecimalSubtractSHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@TryStrToSHugeDecimal, 'TryStrToSHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@StrToSHugeDecimal, 'StrToSHugeDecimal', cdRegister);
 S.RegisterDelphiFunction(@SHugeDecimalToStr, 'SHugeDecimalToStr', cdRegister);
 S.RegisterDelphiFunction(@Test, 'Test', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcDecimal(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EDecimalError) do
end;

 
 
{ TPSImport_flcDecimal }
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcDecimal.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_flcDecimal(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcDecimal.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_flcDecimal(ri);
  RIRegister_flcDecimal_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
