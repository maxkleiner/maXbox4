unit uPSI_IdException;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdException = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_EIdSocketError(CL: TPSPascalCompiler);
procedure SIRegister_EIdProtocolReplyError(CL: TPSPascalCompiler);
procedure SIRegister_IdException(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_EIdSocketError(CL: TPSRuntimeClassImporter);
procedure RIRegister_EIdProtocolReplyError(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdException(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdException
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdException]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_EIdSocketError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'EIdException', 'EIdSocketError') do
  with CL.AddClassN(CL.FindClass('EIdException'),'EIdSocketError') do
  begin
    RegisterMethod('Constructor CreateError( const AErr : Integer; const AMsg : string)');
    RegisterProperty('LastError', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EIdProtocolReplyError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'EIdException', 'EIdProtocolReplyError') do
  with CL.AddClassN(CL.FindClass('EIdException'),'EIdProtocolReplyError') do
  begin
    RegisterMethod('Constructor CreateError( const AErrCode : Integer; const AReplyMessage : string)');
    RegisterProperty('ReplyErrorCode', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdException(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('Exception'),'EIdException');
  //CL.AddTypeS('TClassIdException', 'class of EIdException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdRangeException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSilentException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdConnClosedGracefully');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdAlreadyConnected');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdClosedSocket');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdResponseError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdReadTimeout');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdReadLnMaxLineLengthExceeded');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdInvalidServiceName');
  SIRegister_EIdProtocolReplyError(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInvalidSyslogMessage');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSSLProtocolReplyError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdConnectTimeout');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdConnectException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksRequestFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksRequestServerFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksRequestIdentFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksUnknownError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerRespondError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksAuthMethodError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksAuthError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerGeneralError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerPermissionError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerNetUnreachableError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerHostUnreachableError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerConnectionRefusedError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerTTLExpiredError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerCommandError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSocksServerAddressError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdConnectionStateError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdDnsResolverError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdInvalidSocket');
  SIRegister_EIdSocketError(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPFileNotFound');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPAccessViolation');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPAllocationExceeded');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPIllegalOperation');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPUnknownTransferID');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPFileAlreadyExists');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPNoSuchUser');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTFTPOptionNegotiationFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdIcmpException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdSetSizeExceeded');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure EIdSocketErrorLastError_R(Self: EIdSocketError; var T: Integer);
begin T := Self.LastError; end;

(*----------------------------------------------------------------------------*)
procedure EIdProtocolReplyErrorReplyErrorCode_R(Self: EIdProtocolReplyError; var T: Integer);
begin T := Self.ReplyErrorCode; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EIdSocketError(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EIdSocketError) do
  begin
    RegisterVirtualConstructor(@EIdSocketError.CreateError, 'CreateError');
    RegisterPropertyHelper(@EIdSocketErrorLastError_R,nil,'LastError');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EIdProtocolReplyError(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EIdProtocolReplyError) do
  begin
    RegisterVirtualConstructor(@EIdProtocolReplyError.CreateError, 'CreateError');
    RegisterPropertyHelper(@EIdProtocolReplyErrorReplyErrorCode_R,nil,'ReplyErrorCode');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EIdException) do
  with CL.Add(EIdRangeException) do
  with CL.Add(EIdSilentException) do
  with CL.Add(EIdConnClosedGracefully) do
  with CL.Add(EIdAlreadyConnected) do
  with CL.Add(EIdClosedSocket) do
  with CL.Add(EIdResponseError) do
  with CL.Add(EIdReadTimeout) do
  with CL.Add(EIdReadLnMaxLineLengthExceeded) do
  with CL.Add(EIdInvalidServiceName) do
  RIRegister_EIdProtocolReplyError(CL);
  with CL.Add(EInvalidSyslogMessage) do
  with CL.Add(EIdSSLProtocolReplyError) do
  with CL.Add(EIdConnectTimeout) do
  with CL.Add(EIdConnectException) do
  with CL.Add(EIdSocksError) do
  with CL.Add(EIdSocksRequestFailed) do
  with CL.Add(EIdSocksRequestServerFailed) do
  with CL.Add(EIdSocksRequestIdentFailed) do
  with CL.Add(EIdSocksUnknownError) do
  with CL.Add(EIdSocksServerRespondError) do
  with CL.Add(EIdSocksAuthMethodError) do
  with CL.Add(EIdSocksAuthError) do
  with CL.Add(EIdSocksServerGeneralError) do
  with CL.Add(EIdSocksServerPermissionError) do
  with CL.Add(EIdSocksServerNetUnreachableError) do
  with CL.Add(EIdSocksServerHostUnreachableError) do
  with CL.Add(EIdSocksServerConnectionRefusedError) do
  with CL.Add(EIdSocksServerTTLExpiredError) do
  with CL.Add(EIdSocksServerCommandError) do
  with CL.Add(EIdSocksServerAddressError) do
  with CL.Add(EIdConnectionStateError) do
  with CL.Add(EIdDnsResolverError) do
  with CL.Add(EIdInvalidSocket) do
  RIRegister_EIdSocketError(CL);
  with CL.Add(EIdTFTPException) do
  with CL.Add(EIdTFTPFileNotFound) do
  with CL.Add(EIdTFTPAccessViolation) do
  with CL.Add(EIdTFTPAllocationExceeded) do
  with CL.Add(EIdTFTPIllegalOperation) do
  with CL.Add(EIdTFTPUnknownTransferID) do
  with CL.Add(EIdTFTPFileAlreadyExists) do
  with CL.Add(EIdTFTPNoSuchUser) do
  with CL.Add(EIdTFTPOptionNegotiationFailed) do
  with CL.Add(EIdIcmpException) do
  with CL.Add(EIdSetSizeExceeded) do
end;

 
 
{ TPSImport_IdException }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdException.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdException(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdException.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdException(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
