unit uPSI_IdSMTP;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdSMTP = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdSMTP(CL: TPSPascalCompiler);
procedure SIRegister_IdSMTP(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdSMTP(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdSMTP(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdAssignedNumbers
  ,IdEMailAddress
  ,IdGlobal
  ,IdHeaderList
  ,IdMessage
  ,IdMessageClient
  ,IdSMTP
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdSMTP]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdSMTP(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdMessageClient', 'TIdSMTP') do
  with CL.AddClassN(CL.FindClass('TIdMessageClient'),'TIdSMTP') do
  begin
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function Authenticate : Boolean');
    RegisterMethod('Procedure Connect( const ATimeout : Integer)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Disconnect');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure QuickSend( const AHost, ASubject, ATo, AFrom, AText : String)');
    RegisterMethod('Procedure Send( AMsg : TIdMessage)');
    RegisterMethod('Procedure Expand( AUserName : String; AResults : TStrings)');
    RegisterMethod('Procedure SendMsg(AMsg: TIdMessage; const AHeadersOnly: Boolean = False)');
    RegisterMethod('Function Verify( AUserName : String) : String');
    RegisterProperty('AuthSchemesSupported', 'TStringList', iptr);
    RegisterProperty('AuthenticationType', 'TAuthenticationType', iptrw);
    RegisterProperty('MailAgent', 'string', iptrw);
    RegisterProperty('HeloName', 'string', iptrw);
    RegisterProperty('UseEhlo', 'Boolean', iptrw);
    RegisterProperty('Host', 'String', iptrw);
    RegisterProperty('UserName', 'String', iptrw);
    RegisterProperty('Password', 'String', iptrw);
    RegisterProperty('Port', 'Integer', iptrw);
    RegisterProperty('UserId', 'String', iptrw);
    RegisterProperty('Connected', 'Boolean', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdSMTP(CL: TPSPascalCompiler);
begin
 //CL.AddConstantN('IdDEF_UseEhlo',BoolToStr(TRUE)); //.BoolToStr( TRUE);
  CL.AddTypeS('TAuthenticationType', '( atNone, atLogin )');
  SIRegister_TIdSMTP(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdSMTPUseEhlo_W(Self: TIdSMTP; const T: Boolean);
begin Self.UseEhlo := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPUseEhlo_R(Self: TIdSMTP; var T: Boolean);
begin T := Self.UseEhlo; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPHeloName_W(Self: TIdSMTP; const T: string);
begin Self.HeloName := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPHeloName_R(Self: TIdSMTP; var T: string);
begin T := Self.HeloName; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPMailAgent_W(Self: TIdSMTP; const T: string);
begin Self.MailAgent := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPMailAgent_R(Self: TIdSMTP; var T: string);
begin T := Self.MailAgent; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPAuthenticationType_W(Self: TIdSMTP; const T: TAuthenticationType);
begin Self.AuthenticationType := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPAuthenticationType_R(Self: TIdSMTP; var T: TAuthenticationType);
begin T := Self.AuthenticationType; end;

(*----------------------------------------------------------------------------*)
procedure TIdSMTPAuthSchemesSupported_R(Self: TIdSMTP; var T: TStringList);
begin T := Self.AuthSchemesSupported; end;

procedure TIdSMTPConnected_R(Self: TIdSMTP; var T: Boolean);
begin T:= Self.Connected; end;

procedure TIdSMTPConnected_W(Self: TIdSMTP; const T: Boolean);
begin //Self.Connected:= T;
 end;

{function TIdSMTPConnected(Self: TIdSMTP): boolean; //test
begin result:= Self.Connected; end;}

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdSMTP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdSMTP) do begin
    RegisterMethod(@TIdSMTP.Assign, 'Assign');
    RegisterVirtualMethod(@TIdSMTP.Authenticate, 'Authenticate');
    RegisterMethod(@TIdSMTP.Connect, 'Connect');
    RegisterConstructor(@TIdSMTP.Create, 'Create');
    RegisterMethod(@TIdSMTP.Destroy, 'Free');
    RegisterMethod(@TIdSMTP.SendMsg, 'SendMsg');

    RegisterMethod(@TIdSMTP.Disconnect, 'Disconnect');
    //from upper class id messageclient
    RegisterMethod(@TIdSMTP.QuickSend, 'QuickSend');
    RegisterMethod(@TIdSMTP.Send, 'Send');
    RegisterVirtualMethod(@TIdSMTP.Expand, 'Expand');
    RegisterVirtualMethod(@TIdSMTP.Verify, 'Verify');
    RegisterPropertyHelper(@TIdSMTPAuthSchemesSupported_R,nil,'AuthSchemesSupported');
    RegisterPropertyHelper(@TIdSMTPAuthenticationType_R,@TIdSMTPAuthenticationType_W,'AuthenticationType');
    RegisterPropertyHelper(@TIdSMTPMailAgent_R,@TIdSMTPMailAgent_W,'MailAgent');
    RegisterPropertyHelper(@TIdSMTPHeloName_R,@TIdSMTPHeloName_W,'HeloName');
    RegisterPropertyHelper(@TIdSMTPUseEhlo_R,@TIdSMTPUseEhlo_W,'UseEhlo');
    RegisterPropertyHelper(@TIdSMTPConnected_R,@TIdSMTPConnected_W,'Connected');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdSMTP(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdSMTP(CL);
end;

 
 
{ TPSImport_IdSMTP }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdSMTP.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdSMTP(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdSMTP.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdSMTP(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
