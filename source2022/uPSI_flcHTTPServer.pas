unit uPSI_flcHTTPServer;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_flcHTTPServer = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TfclHTTPServer(CL: TPSPascalCompiler);
procedure SIRegister_TF5HTTPServer(CL: TPSPascalCompiler);
procedure SIRegister_THTTPServerClient(CL: TPSPascalCompiler);
procedure SIRegister_flcHTTPServer(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TfclHTTPServer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TF5HTTPServer(CL: TPSRuntimeClassImporter);
procedure RIRegister_THTTPServerClient(CL: TPSRuntimeClassImporter);
procedure RIRegister_flcHTTPServer(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   SyncObjs
  ,flcStdTypes
  ,flcStrings
  ,flcSocketLib
  ,flcTCPConnection
  ,flcTCPServer
  ,flcHTTPUtils
  ,flcHTTPServer
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_flcHTTPServer]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TfclHTTPServer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TF5HTTPServer', 'TfclHTTPServer') do
  with CL.AddClassN(CL.FindClass('TF5HTTPServer'),'TfclHTTPServer') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TF5HTTPServer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TF5HTTPServer') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TF5HTTPServer') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Finalise');
    RegisterProperty('OnLog', 'THTTPServerLogEvent', iptrw);
    RegisterProperty('OnStart', 'THTTPServerEvent', iptrw);
    RegisterProperty('OnStop', 'THTTPServerEvent', iptrw);
    RegisterProperty('OnActive', 'THTTPServerEvent', iptrw);
    RegisterProperty('OnInactive', 'THTTPServerEvent', iptrw);
    RegisterProperty('OnRequestHeader', 'THTTPServerClientEvent', iptrw);
    RegisterProperty('OnRequestContent', 'THTTPServerClientContentEvent', iptrw);
    RegisterProperty('OnRequestComplete', 'THTTPServerClientEvent', iptrw);
    RegisterProperty('OnPrepareResponse', 'THTTPServerClientEvent', iptrw);
    RegisterProperty('OnResponseComplete', 'THTTPServerClientEvent', iptrw);
    RegisterProperty('AddressFamily', 'THTTPServerAddressFamily', iptrw);
    RegisterProperty('BindAddress', 'String', iptrw);
    RegisterProperty('ServerPort', 'Integer', iptrw);
    RegisterProperty('MaxBacklog', 'Integer', iptrw);
    RegisterProperty('MaxClients', 'Integer', iptrw);
    RegisterProperty('ServerName', 'RawByteString', iptrw);
    RegisterProperty('HTTPSEnabled', 'Boolean', iptrw);
    RegisterProperty('HTTPSOptions', 'THTTPSServerOptions', iptrw);
    RegisterProperty('RequestContentMechanism', 'THTTPContentReaderMechanism', iptrw);
    RegisterProperty('Active', 'Boolean', iptrw);
    RegisterProperty('TCPServer', 'TF5TCPServer', iptr);
    RegisterProperty('ClientCount', 'Integer', iptr);
    RegisterProperty('UserObject', 'TObject', iptrw);
    RegisterProperty('UserTag', 'NativeInt', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THTTPServerClient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'THTTPServerClient') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'THTTPServerClient') do
  begin
    RegisterMethod('Constructor Create( const AHTTPServer : TF5HTTPServer; const ATCPClient : TTCPServerClient)');
    RegisterMethod('Procedure Finalise');
    RegisterProperty('State', 'THTTPServerClientState', iptr);
    RegisterProperty('StateStr', 'String', iptr);
    RegisterProperty('RemoteAddr', 'TSocketAddr', iptr);
    RegisterProperty('RemoteAddrStr', 'String', iptr);
    RegisterProperty('RequestRecord', 'THTTPRequest', iptr);
    RegisterProperty('RequestRecordPtr', 'PHTTPRequest', iptr);
    RegisterProperty('RequestMethod', 'RawByteString', iptr);
    RegisterProperty('RequestURI', 'RawByteString', iptr);
    RegisterProperty('RequestHost', 'RawByteString', iptr);
    RegisterProperty('RequestCookie', 'RawByteString', iptr);
    RegisterProperty('RequestHasContent', 'Boolean', iptr);
    RegisterProperty('RequestContentType', 'RawByteString', iptr);
    RegisterProperty('RequestContentStr', 'RawByteString', iptr);
    RegisterProperty('RequestContentStream', 'TStream', iptrw);
    RegisterProperty('RequestContentFileName', 'String', iptrw);
    RegisterProperty('RequestContentReceivedSize', 'Int64', iptr);
    RegisterProperty('ResponseRecord', 'THTTPResponse', iptrw);
    RegisterProperty('ResponseRecordPtr', 'PHTTPResponse', iptr);
    RegisterProperty('ResponseCode', 'Integer', iptrw);
    RegisterProperty('ResponseMsg', 'RawByteString', iptrw);
    RegisterProperty('ResponseContentType', 'RawByteString', iptrw);
    RegisterProperty('ResponseContentMechanism', 'THTTPContentWriterMechanism', iptrw);
    RegisterProperty('ResponseContentStr', 'RawByteString', iptrw);
    RegisterProperty('ResponseContentStream', 'TStream', iptrw);
    RegisterProperty('ResponseContentFileName', 'String', iptrw);
    RegisterProperty('ResponseReady', 'Boolean', iptrw);
    RegisterMethod('Procedure SetResponseOKHtmlStr( const AHtmlStr : RawByteString)');
    RegisterMethod('Procedure SetResponseOKFile( const AContentType : THTTPContentTypeEnum; const AFileName : String)');
    RegisterMethod('Procedure SetResponseNotFound');
    RegisterMethod('Procedure SetResponseRedirect( const ALocation : RawByteString)');
    RegisterMethod('Procedure Disconnect');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_flcHTTPServer(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('HTTPSERVER_DefaultPort','LongInt').SetInt( 80);
 CL.AddConstantN('HTTPSERVER_DefaultPortStr','String').SetString( '80');
 CL.AddConstantN('HTTPSERVER_DefaultMaxBacklog','LongInt').SetInt( 8);
 CL.AddConstantN('HTTPSERVER_DefaultMaxClients','LongInt').SetInt( - 1);
  CL.AddTypeS('THTTPServerLogType', '( sltDebug, sltInfo, sltError )');
  CL.AddTypeS('THTTPServerAddressFamily', '( safIP4, safIP6 )');
  CL.AddTypeS('THTTPSServerOption', '( ssoDontUseSSL3, ssoDontUseTLS10, ssoDont'
   +'UseTLS11, ssoDontUseTLS12 )');
  CL.AddTypeS('THTTPSServerOptions', 'set of THTTPSServerOption');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TF5HTTPServer');
  CL.AddTypeS('THTTPServerClientState', '( hscsInit, hscsAwaitingRequest, hscsR'
   +'eceivedRequestHeader, hscsReceivingContent, hscsRequestComplete, hscsPrepa'
   +'ringResponse, hscsAwaitingPreparedResponse, hscsSendingResponseHeader, hsc'
   +'sSendingContent, hscsResponseComplete, hscsResponseCompleteAndClosing, hsc'
   +'sResponseCompleteAndClosed, hscsRequestInterruptedAndClosed )');
  SIRegister_THTTPServerClient(CL);
  CL.AddTypeS('THTTPServerEvent', 'Procedure ( const AServer : TF5HTTPServer)');
  CL.AddTypeS('THTTPServerLogEvent', 'Procedure ( const AServer : TF5HTTPServer'
   +'; const ALogType : THTTPServerLogType; const AMsg : String; const ALogLeve'
   +'l : Integer)');
  CL.AddTypeS('THTTPServerClientEvent', 'Procedure ( const AServer : TF5HTTPSer'
   +'ver; const AClient : THTTPServerClient)');
  CL.AddTypeS('THTTPServerClientContentEvent', 'Procedure ( const AServer : TF5'
   +'HTTPServer; const AClient : THTTPServerClient; const Buf : string; const S'
   +'ize : Integer)');
  SIRegister_TF5HTTPServer(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EHTTPServer');
  SIRegister_TfclHTTPServer(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerUserTag_W(Self: TF5HTTPServer; const T: NativeInt);
begin Self.UserTag := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerUserTag_R(Self: TF5HTTPServer; var T: NativeInt);
begin T := Self.UserTag; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerUserObject_W(Self: TF5HTTPServer; const T: TObject);
begin Self.UserObject := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerUserObject_R(Self: TF5HTTPServer; var T: TObject);
begin T := Self.UserObject; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerClientCount_R(Self: TF5HTTPServer; var T: Integer);
begin T := Self.ClientCount; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerTCPServer_R(Self: TF5HTTPServer; var T: TF5TCPServer);
begin T := Self.TCPServer; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerActive_W(Self: TF5HTTPServer; const T: Boolean);
begin Self.Active := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerActive_R(Self: TF5HTTPServer; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerRequestContentMechanism_W(Self: TF5HTTPServer; const T: THTTPContentReaderMechanism);
begin Self.RequestContentMechanism := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerRequestContentMechanism_R(Self: TF5HTTPServer; var T: THTTPContentReaderMechanism);
begin T := Self.RequestContentMechanism; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerHTTPSOptions_W(Self: TF5HTTPServer; const T: THTTPSServerOptions);
begin Self.HTTPSOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerHTTPSOptions_R(Self: TF5HTTPServer; var T: THTTPSServerOptions);
begin T := Self.HTTPSOptions; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerHTTPSEnabled_W(Self: TF5HTTPServer; const T: Boolean);
begin Self.HTTPSEnabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerHTTPSEnabled_R(Self: TF5HTTPServer; var T: Boolean);
begin T := Self.HTTPSEnabled; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerServerName_W(Self: TF5HTTPServer; const T: RawByteString);
begin Self.ServerName := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerServerName_R(Self: TF5HTTPServer; var T: RawByteString);
begin T := Self.ServerName; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerMaxClients_W(Self: TF5HTTPServer; const T: Integer);
begin Self.MaxClients := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerMaxClients_R(Self: TF5HTTPServer; var T: Integer);
begin T := Self.MaxClients; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerMaxBacklog_W(Self: TF5HTTPServer; const T: Integer);
begin Self.MaxBacklog := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerMaxBacklog_R(Self: TF5HTTPServer; var T: Integer);
begin T := Self.MaxBacklog; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerServerPort_W(Self: TF5HTTPServer; const T: Integer);
begin Self.ServerPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerServerPort_R(Self: TF5HTTPServer; var T: Integer);
begin T := Self.ServerPort; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerBindAddress_W(Self: TF5HTTPServer; const T: String);
begin Self.BindAddress := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerBindAddress_R(Self: TF5HTTPServer; var T: String);
begin T := Self.BindAddress; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerAddressFamily_W(Self: TF5HTTPServer; const T: THTTPServerAddressFamily);
begin Self.AddressFamily := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerAddressFamily_R(Self: TF5HTTPServer; var T: THTTPServerAddressFamily);
begin T := Self.AddressFamily; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnResponseComplete_W(Self: TF5HTTPServer; const T: THTTPServerClientEvent);
begin Self.OnResponseComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnResponseComplete_R(Self: TF5HTTPServer; var T: THTTPServerClientEvent);
begin T := Self.OnResponseComplete; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnPrepareResponse_W(Self: TF5HTTPServer; const T: THTTPServerClientEvent);
begin Self.OnPrepareResponse := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnPrepareResponse_R(Self: TF5HTTPServer; var T: THTTPServerClientEvent);
begin T := Self.OnPrepareResponse; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnRequestComplete_W(Self: TF5HTTPServer; const T: THTTPServerClientEvent);
begin Self.OnRequestComplete := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnRequestComplete_R(Self: TF5HTTPServer; var T: THTTPServerClientEvent);
begin T := Self.OnRequestComplete; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnRequestContent_W(Self: TF5HTTPServer; const T: THTTPServerClientContentEvent);
begin Self.OnRequestContent := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnRequestContent_R(Self: TF5HTTPServer; var T: THTTPServerClientContentEvent);
begin T := Self.OnRequestContent; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnRequestHeader_W(Self: TF5HTTPServer; const T: THTTPServerClientEvent);
begin Self.OnRequestHeader := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnRequestHeader_R(Self: TF5HTTPServer; var T: THTTPServerClientEvent);
begin T := Self.OnRequestHeader; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnInactive_W(Self: TF5HTTPServer; const T: THTTPServerEvent);
begin Self.OnInactive := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnInactive_R(Self: TF5HTTPServer; var T: THTTPServerEvent);
begin T := Self.OnInactive; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnActive_W(Self: TF5HTTPServer; const T: THTTPServerEvent);
begin Self.OnActive := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnActive_R(Self: TF5HTTPServer; var T: THTTPServerEvent);
begin T := Self.OnActive; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnStop_W(Self: TF5HTTPServer; const T: THTTPServerEvent);
begin Self.OnStop := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnStop_R(Self: TF5HTTPServer; var T: THTTPServerEvent);
begin T := Self.OnStop; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnStart_W(Self: TF5HTTPServer; const T: THTTPServerEvent);
begin Self.OnStart := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnStart_R(Self: TF5HTTPServer; var T: THTTPServerEvent);
begin T := Self.OnStart; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnLog_W(Self: TF5HTTPServer; const T: THTTPServerLogEvent);
begin Self.OnLog := T; end;

(*----------------------------------------------------------------------------*)
procedure TF5HTTPServerOnLog_R(Self: TF5HTTPServer; var T: THTTPServerLogEvent);
begin T := Self.OnLog; end;

(*----------------------------------------------------------------------------*)
Procedure TF5HTTPServerLog3_P(Self: TF5HTTPServer;  const LogType : THTTPServerLogType; const Msg : String; const Args : array of const; const LogLevel : Integer);
Begin Self.Log(LogType, Msg, Args, LogLevel); END;

(*----------------------------------------------------------------------------*)
Procedure TF5HTTPServerLog2_P(Self: TF5HTTPServer;  const LogType : THTTPServerLogType; const Msg : String; const LogLevel : Integer);
Begin Self.Log(LogType, Msg, LogLevel); END;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseReady_W(Self: THTTPServerClient; const T: Boolean);
begin Self.ResponseReady := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseReady_R(Self: THTTPServerClient; var T: Boolean);
begin T := Self.ResponseReady; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentFileName_W(Self: THTTPServerClient; const T: String);
begin Self.ResponseContentFileName := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentFileName_R(Self: THTTPServerClient; var T: String);
begin T := Self.ResponseContentFileName; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentStream_W(Self: THTTPServerClient; const T: TStream);
begin Self.ResponseContentStream := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentStream_R(Self: THTTPServerClient; var T: TStream);
begin T := Self.ResponseContentStream; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentStr_W(Self: THTTPServerClient; const T: RawByteString);
begin Self.ResponseContentStr := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentStr_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.ResponseContentStr; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentMechanism_W(Self: THTTPServerClient; const T: THTTPContentWriterMechanism);
begin Self.ResponseContentMechanism := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentMechanism_R(Self: THTTPServerClient; var T: THTTPContentWriterMechanism);
begin T := Self.ResponseContentMechanism; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentType_W(Self: THTTPServerClient; const T: RawByteString);
begin Self.ResponseContentType := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseContentType_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.ResponseContentType; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseMsg_W(Self: THTTPServerClient; const T: RawByteString);
begin Self.ResponseMsg := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseMsg_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.ResponseMsg; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseCode_W(Self: THTTPServerClient; const T: Integer);
begin Self.ResponseCode := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseCode_R(Self: THTTPServerClient; var T: Integer);
begin T := Self.ResponseCode; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseRecordPtr_R(Self: THTTPServerClient; var T: PHTTPResponse);
begin T := Self.ResponseRecordPtr; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseRecord_W(Self: THTTPServerClient; const T: THTTPResponse);
begin Self.ResponseRecord := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientResponseRecord_R(Self: THTTPServerClient; var T: THTTPResponse);
begin T := Self.ResponseRecord; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestContentReceivedSize_R(Self: THTTPServerClient; var T: Int64);
begin T := Self.RequestContentReceivedSize; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestContentFileName_W(Self: THTTPServerClient; const T: String);
begin Self.RequestContentFileName := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestContentFileName_R(Self: THTTPServerClient; var T: String);
begin T := Self.RequestContentFileName; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestContentStream_W(Self: THTTPServerClient; const T: TStream);
begin Self.RequestContentStream := T; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestContentStream_R(Self: THTTPServerClient; var T: TStream);
begin T := Self.RequestContentStream; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestContentStr_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.RequestContentStr; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestContentType_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.RequestContentType; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestHasContent_R(Self: THTTPServerClient; var T: Boolean);
begin T := Self.RequestHasContent; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestCookie_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.RequestCookie; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestHost_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.RequestHost; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestURI_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.RequestURI; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestMethod_R(Self: THTTPServerClient; var T: RawByteString);
begin T := Self.RequestMethod; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestRecordPtr_R(Self: THTTPServerClient; var T: PHTTPRequest);
begin T := Self.RequestRecordPtr; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRequestRecord_R(Self: THTTPServerClient; var T: THTTPRequest);
begin T := Self.RequestRecord; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRemoteAddrStr_R(Self: THTTPServerClient; var T: String);
begin T := Self.RemoteAddrStr; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientRemoteAddr_R(Self: THTTPServerClient; var T: TSocketAddr);
begin T := Self.RemoteAddr; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientStateStr_R(Self: THTTPServerClient; var T: String);
begin T := Self.StateStr; end;

(*----------------------------------------------------------------------------*)
procedure THTTPServerClientState_R(Self: THTTPServerClient; var T: THTTPServerClientState);
begin T := Self.State; end;

(*----------------------------------------------------------------------------*)
Procedure THTTPServerClientLog1_P(Self: THTTPServerClient;  const LogType : THTTPServerLogType; const Msg : String; const Args : array of const; const LogLevel : Integer);
Begin Self.Log(LogType, Msg, Args, LogLevel); END;

(*----------------------------------------------------------------------------*)
Procedure THTTPServerClientLog0_P(Self: THTTPServerClient;  const LogType : THTTPServerLogType; const Msg : String; const LogLevel : Integer);
Begin Self.Log(LogType, Msg, LogLevel); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TfclHTTPServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TfclHTTPServer) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TF5HTTPServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TF5HTTPServer) do
  begin
    RegisterConstructor(@TF5HTTPServer.Create, 'Create');
    RegisterMethod(@TF5HTTPServer.Finalise, 'Finalise');
    RegisterPropertyHelper(@TF5HTTPServerOnLog_R,@TF5HTTPServerOnLog_W,'OnLog');
    RegisterPropertyHelper(@TF5HTTPServerOnStart_R,@TF5HTTPServerOnStart_W,'OnStart');
    RegisterPropertyHelper(@TF5HTTPServerOnStop_R,@TF5HTTPServerOnStop_W,'OnStop');
    RegisterPropertyHelper(@TF5HTTPServerOnActive_R,@TF5HTTPServerOnActive_W,'OnActive');
    RegisterPropertyHelper(@TF5HTTPServerOnInactive_R,@TF5HTTPServerOnInactive_W,'OnInactive');
    RegisterPropertyHelper(@TF5HTTPServerOnRequestHeader_R,@TF5HTTPServerOnRequestHeader_W,'OnRequestHeader');
    RegisterPropertyHelper(@TF5HTTPServerOnRequestContent_R,@TF5HTTPServerOnRequestContent_W,'OnRequestContent');
    RegisterPropertyHelper(@TF5HTTPServerOnRequestComplete_R,@TF5HTTPServerOnRequestComplete_W,'OnRequestComplete');
    RegisterPropertyHelper(@TF5HTTPServerOnPrepareResponse_R,@TF5HTTPServerOnPrepareResponse_W,'OnPrepareResponse');
    RegisterPropertyHelper(@TF5HTTPServerOnResponseComplete_R,@TF5HTTPServerOnResponseComplete_W,'OnResponseComplete');
    RegisterPropertyHelper(@TF5HTTPServerAddressFamily_R,@TF5HTTPServerAddressFamily_W,'AddressFamily');
    RegisterPropertyHelper(@TF5HTTPServerBindAddress_R,@TF5HTTPServerBindAddress_W,'BindAddress');
    RegisterPropertyHelper(@TF5HTTPServerServerPort_R,@TF5HTTPServerServerPort_W,'ServerPort');
    RegisterPropertyHelper(@TF5HTTPServerMaxBacklog_R,@TF5HTTPServerMaxBacklog_W,'MaxBacklog');
    RegisterPropertyHelper(@TF5HTTPServerMaxClients_R,@TF5HTTPServerMaxClients_W,'MaxClients');
    RegisterPropertyHelper(@TF5HTTPServerServerName_R,@TF5HTTPServerServerName_W,'ServerName');
    RegisterPropertyHelper(@TF5HTTPServerHTTPSEnabled_R,@TF5HTTPServerHTTPSEnabled_W,'HTTPSEnabled');
    RegisterPropertyHelper(@TF5HTTPServerHTTPSOptions_R,@TF5HTTPServerHTTPSOptions_W,'HTTPSOptions');
    RegisterPropertyHelper(@TF5HTTPServerRequestContentMechanism_R,@TF5HTTPServerRequestContentMechanism_W,'RequestContentMechanism');
    RegisterPropertyHelper(@TF5HTTPServerActive_R,@TF5HTTPServerActive_W,'Active');
    RegisterPropertyHelper(@TF5HTTPServerTCPServer_R,nil,'TCPServer');
    RegisterPropertyHelper(@TF5HTTPServerClientCount_R,nil,'ClientCount');
    RegisterPropertyHelper(@TF5HTTPServerUserObject_R,@TF5HTTPServerUserObject_W,'UserObject');
    RegisterPropertyHelper(@TF5HTTPServerUserTag_R,@TF5HTTPServerUserTag_W,'UserTag');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THTTPServerClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THTTPServerClient) do
  begin
    RegisterConstructor(@THTTPServerClient.Create, 'Create');
    RegisterMethod(@THTTPServerClient.Finalise, 'Finalise');
    RegisterPropertyHelper(@THTTPServerClientState_R,nil,'State');
    RegisterPropertyHelper(@THTTPServerClientStateStr_R,nil,'StateStr');
    RegisterPropertyHelper(@THTTPServerClientRemoteAddr_R,nil,'RemoteAddr');
    RegisterPropertyHelper(@THTTPServerClientRemoteAddrStr_R,nil,'RemoteAddrStr');
    RegisterPropertyHelper(@THTTPServerClientRequestRecord_R,nil,'RequestRecord');
    RegisterPropertyHelper(@THTTPServerClientRequestRecordPtr_R,nil,'RequestRecordPtr');
    RegisterPropertyHelper(@THTTPServerClientRequestMethod_R,nil,'RequestMethod');
    RegisterPropertyHelper(@THTTPServerClientRequestURI_R,nil,'RequestURI');
    RegisterPropertyHelper(@THTTPServerClientRequestHost_R,nil,'RequestHost');
    RegisterPropertyHelper(@THTTPServerClientRequestCookie_R,nil,'RequestCookie');
    RegisterPropertyHelper(@THTTPServerClientRequestHasContent_R,nil,'RequestHasContent');
    RegisterPropertyHelper(@THTTPServerClientRequestContentType_R,nil,'RequestContentType');
    RegisterPropertyHelper(@THTTPServerClientRequestContentStr_R,nil,'RequestContentStr');
    RegisterPropertyHelper(@THTTPServerClientRequestContentStream_R,@THTTPServerClientRequestContentStream_W,'RequestContentStream');
    RegisterPropertyHelper(@THTTPServerClientRequestContentFileName_R,@THTTPServerClientRequestContentFileName_W,'RequestContentFileName');
    RegisterPropertyHelper(@THTTPServerClientRequestContentReceivedSize_R,nil,'RequestContentReceivedSize');
    RegisterPropertyHelper(@THTTPServerClientResponseRecord_R,@THTTPServerClientResponseRecord_W,'ResponseRecord');
    RegisterPropertyHelper(@THTTPServerClientResponseRecordPtr_R,nil,'ResponseRecordPtr');
    RegisterPropertyHelper(@THTTPServerClientResponseCode_R,@THTTPServerClientResponseCode_W,'ResponseCode');
    RegisterPropertyHelper(@THTTPServerClientResponseMsg_R,@THTTPServerClientResponseMsg_W,'ResponseMsg');
    RegisterPropertyHelper(@THTTPServerClientResponseContentType_R,@THTTPServerClientResponseContentType_W,'ResponseContentType');
    RegisterPropertyHelper(@THTTPServerClientResponseContentMechanism_R,@THTTPServerClientResponseContentMechanism_W,'ResponseContentMechanism');
    RegisterPropertyHelper(@THTTPServerClientResponseContentStr_R,@THTTPServerClientResponseContentStr_W,'ResponseContentStr');
    RegisterPropertyHelper(@THTTPServerClientResponseContentStream_R,@THTTPServerClientResponseContentStream_W,'ResponseContentStream');
    RegisterPropertyHelper(@THTTPServerClientResponseContentFileName_R,@THTTPServerClientResponseContentFileName_W,'ResponseContentFileName');
    RegisterPropertyHelper(@THTTPServerClientResponseReady_R,@THTTPServerClientResponseReady_W,'ResponseReady');
    RegisterMethod(@THTTPServerClient.SetResponseOKHtmlStr, 'SetResponseOKHtmlStr');
    RegisterMethod(@THTTPServerClient.SetResponseOKFile, 'SetResponseOKFile');
    RegisterMethod(@THTTPServerClient.SetResponseNotFound, 'SetResponseNotFound');
    RegisterMethod(@THTTPServerClient.SetResponseRedirect, 'SetResponseRedirect');
    RegisterMethod(@THTTPServerClient.Disconnect, 'Disconnect');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcHTTPServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TF5HTTPServer) do
  RIRegister_THTTPServerClient(CL);
  RIRegister_TF5HTTPServer(CL);
  with CL.Add(EHTTPServer) do
  RIRegister_TfclHTTPServer(CL);
end;

 
 
{ TPSImport_flcHTTPServer }
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcHTTPServer.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_flcHTTPServer(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcHTTPServer.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_flcHTTPServer(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
