unit uPSI_IdTelnet;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdTelnet = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdTelnet(CL: TPSPascalCompiler);
procedure SIRegister_TIdTelnetReadThread(CL: TPSPascalCompiler);
procedure SIRegister_IdTelnet(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdTelnet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdTelnetReadThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdTelnet(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdException
  ,IdGlobal
  ,IdStack
  ,IdTCPClient
  ,IdThread
  ,IdTelnet
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdTelnet]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdTelnet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPClient', 'TIdTelnet') do
  with CL.AddClassN(CL.FindClass('TIdTCPClient'),'TIdTelnet') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Connect( const ATimeout : Integer)');
    RegisterMethod('Procedure Disconnect');
    RegisterMethod('Procedure SendCh( Ch : Char)');
    RegisterProperty('TelnetThread', 'TIdTelnetReadThread', iptr);
    RegisterProperty('Terminal', 'string', iptrw);
    RegisterProperty('ThreadedEvent', 'Boolean', iptrw);
    RegisterProperty('OnTelnetCommand', 'TIdTelnetCommandEvent', iptrw);
    RegisterProperty('OnDataAvailable', 'TIdTelnetDataAvailEvent', iptrw);
    RegisterProperty('OnConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDisconnect', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdTelnetReadThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdThread', 'TIdTelnetReadThread') do
  with CL.AddClassN(CL.FindClass('TIdThread'),'TIdTelnetReadThread') do
  begin
    RegisterMethod('Constructor Create( AClient : TIdTelnet)');
    RegisterProperty('Client', 'TIdTelnet', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdTelnet(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('TNC_EOR','Char').SetString( #239);
 CL.AddConstantN('TNC_SE','Char').SetString( #240);
 CL.AddConstantN('TNC_NOP','Char').SetString( #241);
 CL.AddConstantN('TNC_DATA_MARK','Char').SetString( #242);
 CL.AddConstantN('TNC_BREAK','Char').SetString( #243);
 CL.AddConstantN('TNC_IP','Char').SetString( #244);
 CL.AddConstantN('TNC_AO','Char').SetString( #245);
 CL.AddConstantN('TNC_AYT','Char').SetString( #246);
 CL.AddConstantN('TNC_EC','Char').SetString( #247);
 CL.AddConstantN('TNC_EL','Char').SetString( #248);
 CL.AddConstantN('TNC_GA','Char').SetString( #249);
 CL.AddConstantN('TNC_SB','Char').SetString( #250);
 CL.AddConstantN('TNC_WILL','Char').SetString( #251);
 CL.AddConstantN('TNC_WONT','Char').SetString( #252);
 CL.AddConstantN('TNC_DO','Char').SetString( #253);
 CL.AddConstantN('TNC_DONT','Char').SetString( #254);
 CL.AddConstantN('TNC_IAC','Char').SetString( #255);
 CL.AddConstantN('TNO_BINARY','Char').SetString( #0);
 CL.AddConstantN('TNO_ECHO','Char').SetString( #1);
 CL.AddConstantN('TNO_RECONNECT','Char').SetString( #2);
 CL.AddConstantN('TNO_SGA','Char').SetString( #3);
 CL.AddConstantN('TNO_AMSN','Char').SetString( #4);
 CL.AddConstantN('TNO_STATUS','Char').SetString( #5);
 CL.AddConstantN('TNO_TIMING_MARK','Char').SetString( #6);
 CL.AddConstantN('TNO_RCTE','Char').SetString( #7);
 CL.AddConstantN('TNO_OLW','Char').SetString( #8);
 CL.AddConstantN('TNO_OPS','Char').SetString( #9);
 CL.AddConstantN('TNO_OCRD','Char').SetString( #10);
 CL.AddConstantN('TNO_OHTS','Char').SetString( #11);
 CL.AddConstantN('TNO_OHTD','Char').SetString( #12);
 CL.AddConstantN('TNO_OFD','Char').SetString( #13);
 CL.AddConstantN('TNO_OVT','Char').SetString( #14);
 CL.AddConstantN('TNO_OVTD','Char').SetString( #15);
 CL.AddConstantN('TNO_OLD','Char').SetString( #16);
 CL.AddConstantN('TNO_EA','Char').SetString( #17);
 CL.AddConstantN('TNO_LOGOUT','Char').SetString( #18);
 CL.AddConstantN('TNO_BYTE_MACRO','Char').SetString( #19);
 CL.AddConstantN('TNO_DET','Char').SetString( #20);
 CL.AddConstantN('TNO_SUPDUP','Char').SetString( #21);
 CL.AddConstantN('TNO_SUPDUP_OUTPUT','Char').SetString( #22);
 CL.AddConstantN('TNO_SL','Char').SetString( #23);
 CL.AddConstantN('TNO_TERMTYPE','Char').SetString( #24);
 CL.AddConstantN('TNO_EOR','Char').SetString( #25);
 CL.AddConstantN('TNO_TACACS_ID','Char').SetString( #26);
 CL.AddConstantN('TNO_OM','Char').SetString( #27);
 CL.AddConstantN('TNO_TLN','Char').SetString( #28);
 CL.AddConstantN('TNO_3270REGIME','Char').SetString( #29);
 CL.AddConstantN('TNO_X3PAD','Char').SetString( #30);
 CL.AddConstantN('TNO_NAWS','Char').SetString( #31);
 CL.AddConstantN('TNO_TERM_SPEED','Char').SetString( #32);
 CL.AddConstantN('TNO_RFLOW','Char').SetString( #33);
 CL.AddConstantN('TNO_LINEMODE','Char').SetString( #34);
 CL.AddConstantN('TNO_XDISPLOC','Char').SetString( #35);
 CL.AddConstantN('TNO_AUTH','Char').SetString( #37);
 CL.AddConstantN('TNO_ENCRYPT','Char').SetString( #38);
 CL.AddConstantN('TNO_EOL','Char').SetString( #255);
 CL.AddConstantN('TNOS_TERM_IS','Char').SetString( #0);
 CL.AddConstantN('TNOS_TERMTYPE_SEND','Char').SetString( #1);
 CL.AddConstantN('TNOS_REPLY','Char').SetString( #2);
 CL.AddConstantN('TNOS_NAME','Char').SetString( #3);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIdTelnet');
  CL.AddTypeS('TIdTelnetState', '( tnsDATA, tnsIAC, tnsIAC_SB, tnsIAC_WILL, tns'
   +'IAC_DO, tnsIAC_WONT, tnsIAC_DONT, tnsIAC_SBIAC, tnsIAC_SBDATA, tnsSBDATA_I'
   +'AC )');
  CL.AddTypeS('TIdTelnetCommand', '( tncNoLocalEcho, tncLocalEcho, tncEcho )');
  CL.AddTypeS('TIdTelnetDataAvailEvent', 'Procedure ( Sender : TIdTelnet; const'
   +' Buffer : String)');
  CL.AddTypeS('TIdTelnetCommandEvent', 'Procedure ( Sender : TIdTelnet; Status '
   +': TIdTelnetCommand)');
  SIRegister_TIdTelnetReadThread(CL);
  SIRegister_TIdTelnet(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTelnetError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTelnetClientConnectError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTelnetServerOnDataAvailableIsNil');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnDisconnect_W(Self: TIdTelnet; const T: TNotifyEvent);
begin Self.OnDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnDisconnect_R(Self: TIdTelnet; var T: TNotifyEvent);
begin T := Self.OnDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnConnect_W(Self: TIdTelnet; const T: TNotifyEvent);
begin Self.OnConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnConnect_R(Self: TIdTelnet; var T: TNotifyEvent);
begin T := Self.OnConnect; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnDataAvailable_W(Self: TIdTelnet; const T: TIdTelnetDataAvailEvent);
begin Self.OnDataAvailable := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnDataAvailable_R(Self: TIdTelnet; var T: TIdTelnetDataAvailEvent);
begin T := Self.OnDataAvailable; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnTelnetCommand_W(Self: TIdTelnet; const T: TIdTelnetCommandEvent);
begin Self.OnTelnetCommand := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetOnTelnetCommand_R(Self: TIdTelnet; var T: TIdTelnetCommandEvent);
begin T := Self.OnTelnetCommand; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetThreadedEvent_W(Self: TIdTelnet; const T: Boolean);
begin Self.ThreadedEvent := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetThreadedEvent_R(Self: TIdTelnet; var T: Boolean);
begin T := Self.ThreadedEvent; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetTerminal_W(Self: TIdTelnet; const T: string);
begin Self.Terminal := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetTerminal_R(Self: TIdTelnet; var T: string);
begin T := Self.Terminal; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetTelnetThread_R(Self: TIdTelnet; var T: TIdTelnetReadThread);
begin T := Self.TelnetThread; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetReadThreadClient_R(Self: TIdTelnetReadThread; var T: TIdTelnet);
begin T := Self.Client; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdTelnet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTelnet) do
  begin
    RegisterConstructor(@TIdTelnet.Create, 'Create');
    RegisterMethod(@TIdTelnet.Connect, 'Connect');
    RegisterMethod(@TIdTelnet.Disconnect, 'Disconnect');
    RegisterMethod(@TIdTelnet.SendCh, 'SendCh');
    RegisterPropertyHelper(@TIdTelnetTelnetThread_R,nil,'TelnetThread');
    RegisterPropertyHelper(@TIdTelnetTerminal_R,@TIdTelnetTerminal_W,'Terminal');
    RegisterPropertyHelper(@TIdTelnetThreadedEvent_R,@TIdTelnetThreadedEvent_W,'ThreadedEvent');
    RegisterPropertyHelper(@TIdTelnetOnTelnetCommand_R,@TIdTelnetOnTelnetCommand_W,'OnTelnetCommand');
    RegisterPropertyHelper(@TIdTelnetOnDataAvailable_R,@TIdTelnetOnDataAvailable_W,'OnDataAvailable');
    RegisterPropertyHelper(@TIdTelnetOnConnect_R,@TIdTelnetOnConnect_W,'OnConnect');
    RegisterPropertyHelper(@TIdTelnetOnDisconnect_R,@TIdTelnetOnDisconnect_W,'OnDisconnect');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdTelnetReadThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTelnetReadThread) do
  begin
    RegisterConstructor(@TIdTelnetReadThread.Create, 'Create');
    RegisterPropertyHelper(@TIdTelnetReadThreadClient_R,nil,'Client');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdTelnet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTelnet) do
  RIRegister_TIdTelnetReadThread(CL);
  RIRegister_TIdTelnet(CL);
  with CL.Add(EIdTelnetError) do
  with CL.Add(EIdTelnetClientConnectError) do
  with CL.Add(EIdTelnetServerOnDataAvailableIsNil) do
end;

 
 
{ TPSImport_IdTelnet }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTelnet.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdTelnet(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTelnet.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdTelnet(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
