unit uPSI_SynHighlighterMulti;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SynHighlighterMulti = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TSynMultiSyn(CL: TPSPascalCompiler);
procedure SIRegister_TMarker(CL: TPSPascalCompiler);
procedure SIRegister_TSchemes(CL: TPSPascalCompiler);
procedure SIRegister_TScheme(CL: TPSPascalCompiler);
procedure SIRegister_SynHighlighterMulti(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TSynMultiSyn(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMarker(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSchemes(CL: TPSRuntimeClassImporter);
procedure RIRegister_TScheme(CL: TPSRuntimeClassImporter);
procedure RIRegister_SynHighlighterMulti(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   QSynEditTypes
  ,QSynEditHighlighter
  ,Windows
  ,SynEditTypes
  ,SynEditHighlighter
  ,SynHighlighterMulti
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SynHighlighterMulti]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSynMultiSyn(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSynCustomHighLighter', 'TSynMultiSyn') do
  with CL.AddClassN(CL.FindClass('TSynCustomHighLighter'),'TSynMultiSyn') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function GetEol : Boolean');
    RegisterMethod('Function GetRange : Pointer');
    RegisterMethod('Function GetToken : string');
    RegisterMethod('Function GetTokenAttribute : TSynHighlighterAttributes');
    RegisterMethod('Function GetTokenKind : integer');
    RegisterMethod('Function GetTokenPos : Integer');
    RegisterMethod('Procedure Next');
    RegisterMethod('Procedure SetLine( NewValue : string; LineNumber : Integer)');
    RegisterMethod('Procedure SetRange( Value : Pointer)');
    RegisterMethod('Procedure ResetRange');
    RegisterMethod('Function UpdateRangeProcs : boolean');
    RegisterProperty('CurrScheme', 'integer', iptrw);
    RegisterProperty('CurrLine', 'string', iptr);
    RegisterProperty('Schemes', 'TSchemes', iptrw);
    RegisterProperty('DefaultHighlighter', 'TSynCustomHighLighter', iptrw);
    RegisterProperty('DefaultLanguageName', 'String', iptrw);
    RegisterProperty('OnCustomRange', 'TCustomRangeEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMarker(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TMarker') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TMarker') do
  begin
    RegisterMethod('Constructor Create( aScheme, aStartPos, aMarkerLen : integer; aIsOpenMarker : boolean; const aMarkerText : string)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSchemes(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TSchemes') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TSchemes') do
  begin
    RegisterMethod('Constructor Create( aOwner : TSynMultiSyn)');
    RegisterProperty('Items', 'TScheme integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TScheme(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TScheme') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TScheme') do
  begin
    RegisterMethod('Constructor Create( Collection : TCollection)');
    RegisterProperty('CaseSensitive', 'Boolean', iptrw);
    RegisterProperty('StartExpr', 'string', iptrw);
    RegisterProperty('EndExpr', 'string', iptrw);
    RegisterProperty('Highlighter', 'TSynCustomHighlighter', iptrw);
    RegisterProperty('MarkerAttri', 'TSynHighlighterAttributes', iptrw);
    RegisterProperty('SchemeName', 'TComponentName', iptrw);
    RegisterProperty('OnCheckStartMarker', 'TOnCheckMarker', iptrw);
    RegisterProperty('OnCheckEndMarker', 'TOnCheckMarker', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SynHighlighterMulti(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TOnCheckMarker', 'Procedure ( Sender : TObject; var StartPos, Ma'
   +'rkerLen : Integer; var MarkerText : String; Line : Integer)');
  SIRegister_TScheme(CL);
  //CL.AddTypeS('TgmSchemeClass', 'class of TScheme');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSynMultiSyn');
  SIRegister_TSchemes(CL);
  SIRegister_TMarker(CL);
  CL.AddTypeS('TRangeOperation', '( roGet, roSet )');
  CL.AddTypeS('TRangeProc', 'Procedure ( Operation : TRangeOperation; var Range'
   +' : cardinal)');
  CL.AddTypeS('TCustomRangeEvent', 'Procedure ( Sender : TSynMultiSyn; Operatio'
   +'n : TRangeOperation; var Range : pointer)');
  SIRegister_TSynMultiSyn(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSynMultiSynOnCustomRange_W(Self: TSynMultiSyn; const T: TCustomRangeEvent);
begin Self.OnCustomRange := T; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynOnCustomRange_R(Self: TSynMultiSyn; var T: TCustomRangeEvent);
begin T := Self.OnCustomRange; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynDefaultLanguageName_W(Self: TSynMultiSyn; const T: String);
begin Self.DefaultLanguageName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynDefaultLanguageName_R(Self: TSynMultiSyn; var T: String);
begin T := Self.DefaultLanguageName; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynDefaultHighlighter_W(Self: TSynMultiSyn; const T: TSynCustomHighLighter);
begin Self.DefaultHighlighter := T; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynDefaultHighlighter_R(Self: TSynMultiSyn; var T: TSynCustomHighLighter);
begin T := Self.DefaultHighlighter; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynSchemes_W(Self: TSynMultiSyn; const T: TSchemes);
begin Self.Schemes := T; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynSchemes_R(Self: TSynMultiSyn; var T: TSchemes);
begin T := Self.Schemes; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynCurrLine_R(Self: TSynMultiSyn; var T: string);
begin T := Self.CurrLine; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynCurrScheme_W(Self: TSynMultiSyn; const T: integer);
begin Self.CurrScheme := T; end;

(*----------------------------------------------------------------------------*)
procedure TSynMultiSynCurrScheme_R(Self: TSynMultiSyn; var T: integer);
begin T := Self.CurrScheme; end;

(*----------------------------------------------------------------------------*)
procedure TSchemesItems_W(Self: TSchemes; const T: TScheme; const t1: integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemesItems_R(Self: TSchemes; var T: TScheme; const t1: integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeOnCheckEndMarker_W(Self: TScheme; const T: TOnCheckMarker);
begin Self.OnCheckEndMarker := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeOnCheckEndMarker_R(Self: TScheme; var T: TOnCheckMarker);
begin T := Self.OnCheckEndMarker; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeOnCheckStartMarker_W(Self: TScheme; const T: TOnCheckMarker);
begin Self.OnCheckStartMarker := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeOnCheckStartMarker_R(Self: TScheme; var T: TOnCheckMarker);
begin T := Self.OnCheckStartMarker; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeSchemeName_W(Self: TScheme; const T: TComponentName);
begin Self.SchemeName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeSchemeName_R(Self: TScheme; var T: TComponentName);
begin T := Self.SchemeName; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeMarkerAttri_W(Self: TScheme; const T: TSynHighlighterAttributes);
begin Self.MarkerAttri := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeMarkerAttri_R(Self: TScheme; var T: TSynHighlighterAttributes);
begin T := Self.MarkerAttri; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeHighlighter_W(Self: TScheme; const T: TSynCustomHighlighter);
begin Self.Highlighter := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeHighlighter_R(Self: TScheme; var T: TSynCustomHighlighter);
begin T := Self.Highlighter; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeEndExpr_W(Self: TScheme; const T: string);
begin Self.EndExpr := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeEndExpr_R(Self: TScheme; var T: string);
begin T := Self.EndExpr; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeStartExpr_W(Self: TScheme; const T: string);
begin Self.StartExpr := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeStartExpr_R(Self: TScheme; var T: string);
begin T := Self.StartExpr; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeCaseSensitive_W(Self: TScheme; const T: Boolean);
begin Self.CaseSensitive := T; end;

(*----------------------------------------------------------------------------*)
procedure TSchemeCaseSensitive_R(Self: TScheme; var T: Boolean);
begin T := Self.CaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSynMultiSyn(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSynMultiSyn) do
  begin
    RegisterConstructor(@TSynMultiSyn.Create, 'Create');
    RegisterMethod(@TSynMultiSyn.GetEol, 'GetEol');
    RegisterMethod(@TSynMultiSyn.GetRange, 'GetRange');
    RegisterMethod(@TSynMultiSyn.GetToken, 'GetToken');
    RegisterMethod(@TSynMultiSyn.GetTokenAttribute, 'GetTokenAttribute');
    RegisterMethod(@TSynMultiSyn.GetTokenKind, 'GetTokenKind');
    RegisterMethod(@TSynMultiSyn.GetTokenPos, 'GetTokenPos');
    RegisterMethod(@TSynMultiSyn.Next, 'Next');
    RegisterMethod(@TSynMultiSyn.SetLine, 'SetLine');
    RegisterMethod(@TSynMultiSyn.SetRange, 'SetRange');
    RegisterMethod(@TSynMultiSyn.ResetRange, 'ResetRange');
    RegisterMethod(@TSynMultiSyn.UpdateRangeProcs, 'UpdateRangeProcs');
    RegisterPropertyHelper(@TSynMultiSynCurrScheme_R,@TSynMultiSynCurrScheme_W,'CurrScheme');
    RegisterPropertyHelper(@TSynMultiSynCurrLine_R,nil,'CurrLine');
    RegisterPropertyHelper(@TSynMultiSynSchemes_R,@TSynMultiSynSchemes_W,'Schemes');
    RegisterPropertyHelper(@TSynMultiSynDefaultHighlighter_R,@TSynMultiSynDefaultHighlighter_W,'DefaultHighlighter');
    RegisterPropertyHelper(@TSynMultiSynDefaultLanguageName_R,@TSynMultiSynDefaultLanguageName_W,'DefaultLanguageName');
    RegisterPropertyHelper(@TSynMultiSynOnCustomRange_R,@TSynMultiSynOnCustomRange_W,'OnCustomRange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMarker(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMarker) do
  begin
    RegisterConstructor(@TMarker.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSchemes(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSchemes) do
  begin
    RegisterConstructor(@TSchemes.Create, 'Create');
    RegisterPropertyHelper(@TSchemesItems_R,@TSchemesItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TScheme(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TScheme) do
  begin
    RegisterConstructor(@TScheme.Create, 'Create');
    RegisterPropertyHelper(@TSchemeCaseSensitive_R,@TSchemeCaseSensitive_W,'CaseSensitive');
    RegisterPropertyHelper(@TSchemeStartExpr_R,@TSchemeStartExpr_W,'StartExpr');
    RegisterPropertyHelper(@TSchemeEndExpr_R,@TSchemeEndExpr_W,'EndExpr');
    RegisterPropertyHelper(@TSchemeHighlighter_R,@TSchemeHighlighter_W,'Highlighter');
    RegisterPropertyHelper(@TSchemeMarkerAttri_R,@TSchemeMarkerAttri_W,'MarkerAttri');
    RegisterPropertyHelper(@TSchemeSchemeName_R,@TSchemeSchemeName_W,'SchemeName');
    RegisterPropertyHelper(@TSchemeOnCheckStartMarker_R,@TSchemeOnCheckStartMarker_W,'OnCheckStartMarker');
    RegisterPropertyHelper(@TSchemeOnCheckEndMarker_R,@TSchemeOnCheckEndMarker_W,'OnCheckEndMarker');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SynHighlighterMulti(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TScheme(CL);
  with CL.Add(TSynMultiSyn) do
  RIRegister_TSchemes(CL);
  RIRegister_TMarker(CL);
  RIRegister_TSynMultiSyn(CL);
end;

 
 
{ TPSImport_SynHighlighterMulti }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SynHighlighterMulti.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SynHighlighterMulti(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SynHighlighterMulti.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SynHighlighterMulti(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
