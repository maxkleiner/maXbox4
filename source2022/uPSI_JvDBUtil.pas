unit uPSI_JvDBUtil;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvDBUtil = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_EJvScriptError(CL: TPSPascalCompiler);
procedure SIRegister_JvDBUtil(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_JvDBUtil_Routines(S: TPSExec);
procedure RIRegister_EJvScriptError(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvDBUtil(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Variants
  ,Bde
  ,Forms
  ,DB
  ,DBTables
  ,JvDBUtil
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvDBUtil]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_EJvScriptError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'EJvScriptError') do
  with CL.AddClassN(CL.FindClass('Exception'),'EJvScriptError') do
  begin
    RegisterProperty('ErrPos', 'Integer', iptrw);
    RegisterMethod('Constructor Create2( AMessage : string; AErrPos : Integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvDBUtil(CL: TPSPascalCompiler);
begin
  SIRegister_EJvScriptError(CL);
  CL.AddTypeS('TCommit', '( ctNone, ctStep, ctAll )');
  CL.AddTypeS('TOnProgress', 'Procedure ( UserData : Integer; var Cancel : Bool'
   +'ean; Line : Integer)');
 CL.AddDelphiFunction('Procedure ExecuteSQLScript( Base : TDataBase; const Script : string; const Commit : TCommit; OnProgress : TOnProgress; const UserData : Integer)');
 CL.AddDelphiFunction('Function GetQueryResult( const DatabaseName, SQL : string) : Variant');
 CL.AddDelphiFunction('Function GetStoredProcResult( const ADatabaseName, AStoredProcName : string; AParams : array of Variant; const AResultName : string) : Variant');
 //CL.AddDelphiFunction('Function StrFieldDesc( Field : FLDDesc) : string');
 CL.AddDelphiFunction('Function Var2Type( V : Variant; const VarType : Integer) : Variant');
 CL.AddDelphiFunction('Procedure CopyRecord( DataSet : TDataSet)');
 //CL.AddDelphiFunction('Procedure AddReference( Tbl : TTable; RefName : string; RefField : Word; MasterTable : string; MasterField : Word; ModOp, DelOp : RINTQual)');
 CL.AddDelphiFunction('Procedure AddMasterPassword( Table : TTable; pswd : string)');
 CL.AddDelphiFunction('Procedure PackTable( Table : TTable)');
 CL.AddDelphiFunction('Procedure PackEncryptedTable( Table : TTable; pswd : string)');
 CL.AddDelphiFunction('Function EncodeQuotes( const S : string) : string');
 CL.AddDelphiFunction('Function Cmp( const S1, S2 : string) : Boolean');
 CL.AddDelphiFunction('Function SubStr( const S : string; const Index : Integer; const Separator : string) : string');
 CL.AddDelphiFunction('Function SubStrEnd( const S : string; const Index : Integer; const Separator : string) : string');
 CL.AddDelphiFunction('Function ReplaceString( S : string; const OldPattern, NewPattern : string) : string');
 CL.AddDelphiFunction('Procedure GetXYByPos( const S : string; const Pos : Integer; var X, Y : Integer)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure EJvScriptErrorErrPos_W(Self: EJvScriptError; const T: Integer);
Begin Self.ErrPos := T; end;

(*----------------------------------------------------------------------------*)
procedure EJvScriptErrorErrPos_R(Self: EJvScriptError; var T: Integer);
Begin T := Self.ErrPos; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvDBUtil_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ExecuteSQLScript, 'ExecuteSQLScript', cdRegister);
 S.RegisterDelphiFunction(@GetQueryResult, 'GetQueryResult', cdRegister);
 S.RegisterDelphiFunction(@GetStoredProcResult, 'GetStoredProcResult', cdRegister);
 S.RegisterDelphiFunction(@StrFieldDesc, 'StrFieldDesc', cdRegister);
 S.RegisterDelphiFunction(@Var2Type, 'Var2Type', cdRegister);
 S.RegisterDelphiFunction(@CopyRecord, 'CopyRecord', cdRegister);
 S.RegisterDelphiFunction(@AddReference, 'AddReference', cdRegister);
 S.RegisterDelphiFunction(@AddMasterPassword, 'AddMasterPassword', cdRegister);
 S.RegisterDelphiFunction(@PackTable, 'PackTable', cdRegister);
 S.RegisterDelphiFunction(@PackEncryptedTable, 'PackEncryptedTable', cdRegister);
 S.RegisterDelphiFunction(@EncodeQuotes, 'EncodeQuotes', cdRegister);
 S.RegisterDelphiFunction(@Cmp, 'Cmp', cdRegister);
 S.RegisterDelphiFunction(@SubStr, 'SubStr', cdRegister);
 S.RegisterDelphiFunction(@SubStrEnd, 'SubStrEnd', cdRegister);
 S.RegisterDelphiFunction(@ReplaceString, 'ReplaceString', cdRegister);
 S.RegisterDelphiFunction(@GetXYByPos, 'GetXYByPos', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EJvScriptError(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EJvScriptError) do
  begin
    RegisterPropertyHelper(@EJvScriptErrorErrPos_R,@EJvScriptErrorErrPos_W,'ErrPos');
    RegisterConstructor(@EJvScriptError.Create2, 'Create2');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvDBUtil(CL: TPSRuntimeClassImporter);
begin
  RIRegister_EJvScriptError(CL);
end;

 
 
{ TPSImport_JvDBUtil }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvDBUtil.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvDBUtil(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvDBUtil.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvDBUtil(ri);
  RIRegister_JvDBUtil_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
