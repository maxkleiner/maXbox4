unit uPSI_WideStrings;
{
This file has been generated by UnitParser v0.7, written by M. Knight
need for DBExpress /SQLConnection   add widestringlist with clear
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_WideStrings = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TWideStrings(CL: TPSPascalCompiler);
procedure SIRegister_TWideStringList(CL: TPSPascalCompiler);
procedure SIRegister_TWideStringsEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_WideStrings(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TWideStrings(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWideStringList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWideStringsEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_WideStrings(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   WideStrings
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_WideStrings]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TWideStringList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWideStrings', 'TWideStringList') do
  with CL.AddClassN(CL.FindClass('TWideStrings'),'TWideStringList') do begin
    RegisterMethod('Function Find( const S : WideString; var Index : Integer) : Boolean');
    RegisterMethod('Procedure Sort');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure CustomSort( Compare : TWideStringListSortCompare)');
    RegisterProperty('Duplicates', 'TDuplicates', iptrw);
    RegisterProperty('Sorted', 'Boolean', iptrw);
    RegisterProperty('CaseSensitive', 'Boolean', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnChanging', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWideStrings(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TWideStrings') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TWideStrings') do begin
    RegisterMethod('Function Add( const S : WideString) : Integer');
    RegisterMethod('Function AddObject( const S : WideString; AObject : TObject) : Integer');
    RegisterMethod('Procedure Append( const S : WideString)');
    RegisterMethod('Procedure AddStrings( Strings : TStrings);');
    RegisterMethod('Procedure AddStrings1( Strings : TWideStrings);');
    RegisterMethod('Procedure BeginUpdate');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterMethod('Procedure EndUpdate');
    RegisterMethod('Function Equals( Strings : TWideStrings) : Boolean');
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)');
    RegisterMethod('Function GetEnumerator : TWideStringsEnumerator');
    RegisterMethod('Function GetText : PwideChar');
    RegisterMethod('Function IndexOf( const S : WideString) : Integer');
    RegisterMethod('Function IndexOfName( const Name : WideString) : Integer');
    RegisterMethod('Function IndexOfObject( AObject : TObject) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; const S : WideString)');
    RegisterMethod('Procedure InsertObject( Index : Integer; const S : WideString; AObject : TObject)');
    RegisterMethod('Procedure LoadFromFile( const FileName : WideString)');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream)');
    RegisterMethod('Procedure Move( CurIndex, NewIndex : Integer)');
    RegisterMethod('Procedure SaveToFile( const FileName : WideString)');
    RegisterMethod('Procedure SaveToStream( Stream : TStream)');
    RegisterMethod('Procedure SetText( Text : PwideChar)');
    RegisterProperty('Capacity', 'Integer', iptrw);
    RegisterProperty('CommaText', 'WideString', iptrw);
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Delimiter', 'WideChar', iptrw);
    RegisterProperty('DelimitedText', 'WideString', iptrw);
    RegisterProperty('LineBreak', 'WideString', iptrw);
    RegisterProperty('Names', 'WideString Integer', iptr);
    RegisterProperty('Objects', 'TObject Integer', iptrw);
    RegisterProperty('QuoteChar', 'WideChar', iptrw);
    RegisterProperty('Values', 'WideString WideString', iptrw);
    RegisterProperty('ValueFromIndex', 'WideString Integer', iptrw);
    RegisterProperty('NameValueSeparator', 'WideChar', iptrw);
    RegisterProperty('StrictDelimiter', 'Boolean', iptrw);
    RegisterProperty('Strings', 'WideString Integer', iptrw);
    SetDefaultPropery('Strings');
    RegisterProperty('Text', 'WideString', iptrw);
    RegisterProperty('StringsAdapter', 'IWideStringsAdapter', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWideStringsEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TWideStringsEnumerator') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TWideStringsEnumerator') do begin
    RegisterMethod('Constructor Create( AStrings : TWideStrings)');
    RegisterMethod('Function GetCurrent : WideString');
    RegisterMethod('Function MoveNext : Boolean');
    RegisterProperty('Current', 'WideString', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_WideStrings(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWideStrings');
  SIRegister_TWideStringsEnumerator(CL);
  SIRegister_TWideStrings(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWideStringList');
  //CL.AddTypeS('PWideStringItem', '^TWideStringItem // will not work');
  CL.AddTypeS('TWideStringItem', 'record FString : WideString; FObject: TObject; end');
  //CL.AddTypeS('PWideStringItemList', '^TWideStringItemList // will not work');
  SIRegister_TWideStringList(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChanging_W(Self: TWideStringList; const T: TNotifyEvent);
begin Self.OnChanging := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChanging_R(Self: TWideStringList; var T: TNotifyEvent);
begin T := Self.OnChanging; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChange_W(Self: TWideStringList; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListOnChange_R(Self: TWideStringList; var T: TNotifyEvent);
begin T := Self.OnChange; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListCaseSensitive_W(Self: TWideStringList; const T: Boolean);
begin Self.CaseSensitive := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListCaseSensitive_R(Self: TWideStringList; var T: Boolean);
begin T := Self.CaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListSorted_W(Self: TWideStringList; const T: Boolean);
begin Self.Sorted := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListSorted_R(Self: TWideStringList; var T: Boolean);
begin T := Self.Sorted; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListDuplicates_W(Self: TWideStringList; const T: TDuplicates);
begin Self.Duplicates := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringListDuplicates_R(Self: TWideStringList; var T: TDuplicates);
begin T := Self.Duplicates; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStringsAdapter_W(Self: TWideStrings; const T: IWideStringsAdapter);
begin Self.StringsAdapter := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStringsAdapter_R(Self: TWideStrings; var T: IWideStringsAdapter);
begin T := Self.StringsAdapter; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsText_W(Self: TWideStrings; const T: WideString);
begin Self.Text := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsText_R(Self: TWideStrings; var T: WideString);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStrings_W(Self: TWideStrings; const T: WideString; const t1: Integer);
begin Self.Strings[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStrings_R(Self: TWideStrings; var T: WideString; const t1: Integer);
begin T := Self.Strings[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStrictDelimiter_W(Self: TWideStrings; const T: Boolean);
begin Self.StrictDelimiter := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsStrictDelimiter_R(Self: TWideStrings; var T: Boolean);
begin T := Self.StrictDelimiter; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsNameValueSeparator_W(Self: TWideStrings; const T: WideChar);
begin Self.NameValueSeparator := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsNameValueSeparator_R(Self: TWideStrings; var T: WideChar);
begin T := Self.NameValueSeparator; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsValueFromIndex_W(Self: TWideStrings; const T: WideString; const t1: Integer);
begin Self.ValueFromIndex[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsValueFromIndex_R(Self: TWideStrings; var T: WideString; const t1: Integer);
begin T := Self.ValueFromIndex[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsValues_W(Self: TWideStrings; const T: WideString; const t1: WideString);
begin Self.Values[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsValues_R(Self: TWideStrings; var T: WideString; const t1: WideString);
begin T := Self.Values[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsQuoteChar_W(Self: TWideStrings; const T: WideChar);
begin Self.QuoteChar := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsQuoteChar_R(Self: TWideStrings; var T: WideChar);
begin T := Self.QuoteChar; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsObjects_W(Self: TWideStrings; const T: TObject; const t1: Integer);
begin Self.Objects[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsObjects_R(Self: TWideStrings; var T: TObject; const t1: Integer);
begin T := Self.Objects[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsNames_R(Self: TWideStrings; var T: WideString; const t1: Integer);
begin T := Self.Names[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsLineBreak_W(Self: TWideStrings; const T: WideString);
begin Self.LineBreak := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsLineBreak_R(Self: TWideStrings; var T: WideString);
begin T := Self.LineBreak; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsDelimitedText_W(Self: TWideStrings; const T: WideString);
begin Self.DelimitedText := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsDelimitedText_R(Self: TWideStrings; var T: WideString);
begin T := Self.DelimitedText; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsDelimiter_W(Self: TWideStrings; const T: WideChar);
begin Self.Delimiter := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsDelimiter_R(Self: TWideStrings; var T: WideChar);
begin T := Self.Delimiter; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCount_R(Self: TWideStrings; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCommaText_W(Self: TWideStrings; const T: WideString);
begin Self.CommaText := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCommaText_R(Self: TWideStrings; var T: WideString);
begin T := Self.CommaText; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCapacity_W(Self: TWideStrings; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TWideStringsCapacity_R(Self: TWideStrings; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
Procedure TWideStringsAddStrings1_P(Self: TWideStrings;  Strings : TWideStrings);
Begin Self.AddStrings(Strings); END;

(*----------------------------------------------------------------------------*)
Procedure TWideStringsAddStrings_P(Self: TWideStrings;  Strings : TStrings);
Begin Self.AddStrings(Strings); END;

(*----------------------------------------------------------------------------*)
Procedure TWideStringsError1_P(Self: TWideStrings;  Msg : PResStringRec; Data : Integer);
Begin //Self.Error(Msg, Data);
END;

(*----------------------------------------------------------------------------*)
Procedure TWideStringsError_P(Self: TWideStrings;  const Msg : WideString; Data : Integer);
Begin //Self.Error(Msg, Data);
 END;

(*----------------------------------------------------------------------------*)
procedure TWideStringsEnumeratorCurrent_R(Self: TWideStringsEnumerator; var T: WideString);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWideStringList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWideStringList) do begin
    RegisterVirtualMethod(@TWideStringList.Find, 'Find');
    RegisterVirtualMethod(@TWideStringList.Sort, 'Sort');
    RegisterVirtualMethod(@TWideStringList.Sort, 'Clear');
     RegisterVirtualMethod(@TWideStringList.CustomSort, 'CustomSort');
    RegisterPropertyHelper(@TWideStringListDuplicates_R,@TWideStringListDuplicates_W,'Duplicates');
    RegisterPropertyHelper(@TWideStringListSorted_R,@TWideStringListSorted_W,'Sorted');
    RegisterPropertyHelper(@TWideStringListCaseSensitive_R,@TWideStringListCaseSensitive_W,'CaseSensitive');
    RegisterPropertyHelper(@TWideStringListOnChange_R,@TWideStringListOnChange_W,'OnChange');
    RegisterPropertyHelper(@TWideStringListOnChanging_R,@TWideStringListOnChanging_W,'OnChanging');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWideStrings(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWideStrings) do begin
    RegisterVirtualMethod(@TWideStrings.Add, 'Add');
    RegisterVirtualMethod(@TWideStrings.AddObject, 'AddObject');
    RegisterMethod(@TWideStrings.Append, 'Append');
    RegisterVirtualMethod(@TWideStringsAddStrings_P, 'AddStrings');
    RegisterVirtualMethod(@TWideStringsAddStrings1_P, 'AddStrings1');
    RegisterMethod(@TWideStrings.BeginUpdate, 'BeginUpdate');
    RegisterVirtualAbstractMethod(TWideStrings, @TWideStrings.Clear, 'CLEAR');
    RegisterVirtualAbstractMethod(TWideStrings, @TWideStrings.Delete, 'DELETE');
    RegisterMethod(@TWideStrings.EndUpdate, 'EndUpdate');
    RegisterMethod(@TWideStrings.Equals, 'Equals');
    RegisterVirtualMethod(@TWideStrings.Exchange, 'Exchange');
    RegisterMethod(@TWideStrings.GetEnumerator, 'GetEnumerator');
    RegisterVirtualMethod(@TWideStrings.GetText, 'GetText');
    RegisterVirtualMethod(@TWideStrings.IndexOf, 'IndexOf');
    RegisterVirtualMethod(@TWideStrings.IndexOfName, 'IndexOfName');
    RegisterVirtualMethod(@TWideStrings.IndexOfObject, 'IndexOfObject');
    //RegisterVirtualAbstractMethod(@TWideStrings, @!.Insert, 'Insert');
    RegisterVirtualMethod(@TWideStrings.InsertObject, 'InsertObject');
    RegisterVirtualMethod(@TWideStrings.LoadFromFile, 'LoadFromFile');
    RegisterVirtualMethod(@TWideStrings.LoadFromStream, 'LoadFromStream');
    RegisterVirtualMethod(@TWideStrings.Move, 'Move');
    RegisterVirtualMethod(@TWideStrings.SaveToFile, 'SaveToFile');
    RegisterVirtualMethod(@TWideStrings.SaveToStream, 'SaveToStream');
    RegisterVirtualMethod(@TWideStrings.SetText, 'SetText');
    RegisterPropertyHelper(@TWideStringsCapacity_R,@TWideStringsCapacity_W,'Capacity');
    RegisterPropertyHelper(@TWideStringsCommaText_R,@TWideStringsCommaText_W,'CommaText');
    RegisterPropertyHelper(@TWideStringsCount_R,nil,'Count');
    RegisterPropertyHelper(@TWideStringsDelimiter_R,@TWideStringsDelimiter_W,'Delimiter');
    RegisterPropertyHelper(@TWideStringsDelimitedText_R,@TWideStringsDelimitedText_W,'DelimitedText');
    RegisterPropertyHelper(@TWideStringsLineBreak_R,@TWideStringsLineBreak_W,'LineBreak');
    RegisterPropertyHelper(@TWideStringsNames_R,nil,'Names');
    RegisterPropertyHelper(@TWideStringsObjects_R,@TWideStringsObjects_W,'Objects');
    RegisterPropertyHelper(@TWideStringsQuoteChar_R,@TWideStringsQuoteChar_W,'QuoteChar');
    RegisterPropertyHelper(@TWideStringsValues_R,@TWideStringsValues_W,'Values');
    RegisterPropertyHelper(@TWideStringsValueFromIndex_R,@TWideStringsValueFromIndex_W,'ValueFromIndex');
    RegisterPropertyHelper(@TWideStringsNameValueSeparator_R,@TWideStringsNameValueSeparator_W,'NameValueSeparator');
    RegisterPropertyHelper(@TWideStringsStrictDelimiter_R,@TWideStringsStrictDelimiter_W,'StrictDelimiter');
    RegisterPropertyHelper(@TWideStringsStrings_R,@TWideStringsStrings_W,'Strings');
    RegisterPropertyHelper(@TWideStringsText_R,@TWideStringsText_W,'Text');
    RegisterPropertyHelper(@TWideStringsStringsAdapter_R,@TWideStringsStringsAdapter_W,'StringsAdapter');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWideStringsEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWideStringsEnumerator) do
  begin
    RegisterConstructor(@TWideStringsEnumerator.Create, 'Create');
    RegisterMethod(@TWideStringsEnumerator.GetCurrent, 'GetCurrent');
    RegisterMethod(@TWideStringsEnumerator.MoveNext, 'MoveNext');
    RegisterPropertyHelper(@TWideStringsEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_WideStrings(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWideStrings) do
  RIRegister_TWideStringsEnumerator(CL);
  RIRegister_TWideStrings(CL);
  with CL.Add(TWideStringList) do
  RIRegister_TWideStringList(CL);
end;

 
 
{ TPSImport_WideStrings }
(*----------------------------------------------------------------------------*)
procedure TPSImport_WideStrings.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_WideStrings(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_WideStrings.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_WideStrings(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
