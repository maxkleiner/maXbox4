unit uPSI_JvDateUtil;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvDateUtil = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_JvDateUtil(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_JvDateUtil_Routines(S: TPSExec);

procedure Register;

implementation


uses
   RTLConsts
  ,JvDateUtil
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvDateUtil]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_JvDateUtil(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Function CurrentYear : Word');
 CL.AddDelphiFunction('Function IsLeapYear( AYear : Integer) : Boolean');
 CL.AddDelphiFunction('Function DaysPerMonth( AYear, AMonth : Integer) : Integer');
 CL.AddDelphiFunction('Function FirstDayOfPrevMonth : TDateTime');
 CL.AddDelphiFunction('Function LastDayOfPrevMonth : TDateTime');
 CL.AddDelphiFunction('Function FirstDayOfNextMonth : TDateTime');
 CL.AddDelphiFunction('Function ExtractDay( ADate : TDateTime) : Word');
 CL.AddDelphiFunction('Function ExtractMonth( ADate : TDateTime) : Word');
 CL.AddDelphiFunction('Function ExtractYear( ADate : TDateTime) : Word');
 CL.AddDelphiFunction('Function IncDate( ADate : TDateTime; Days, Months, Years : Integer) : TDateTime');
 CL.AddDelphiFunction('Function IncDay( ADate : TDateTime; Delta : Integer) : TDateTime');
 CL.AddDelphiFunction('Function IncMonth( ADate : TDateTime; Delta : Integer) : TDateTime');
 CL.AddDelphiFunction('Function IncYear( ADate : TDateTime; Delta : Integer) : TDateTime');
 CL.AddDelphiFunction('Function ValidDate( ADate : TDateTime) : Boolean');
 CL.AddDelphiFunction('Procedure DateDiff( Date1, Date2 : TDateTime; var Days, Months, Years : Word)');
 CL.AddDelphiFunction('Function MonthsBetween( Date1, Date2 : TDateTime) : Double');
 CL.AddDelphiFunction('Function DaysInPeriod( Date1, Date2 : TDateTime) : Longint');
 CL.AddDelphiFunction('Function DaysBetween( Date1, Date2 : TDateTime) : Longint');
 CL.AddDelphiFunction('Function IncTime( ATime : TDateTime; Hours, Minutes, Seconds, MSecs : Integer) : TDateTime');
 CL.AddDelphiFunction('Function IncHour( ATime : TDateTime; Delta : Integer) : TDateTime');
 CL.AddDelphiFunction('Function IncMinute( ATime : TDateTime; Delta : Integer) : TDateTime');
 CL.AddDelphiFunction('Function IncSecond( ATime : TDateTime; Delta : Integer) : TDateTime');
 CL.AddDelphiFunction('Function IncMSec( ATime : TDateTime; Delta : Integer) : TDateTime');
 CL.AddDelphiFunction('Function CutTime( ADate : TDateTime) : TDateTime');
  CL.AddTypeS('TDateOrder', '( doMDY, doDMY, doYMD )');
  CL.AddTypeS('TDayOfWeekName', '( Sun, Mon, Tue, Wed, Thu, Fri, Sat )');
  CL.AddTypeS('TDaysOfWeek', 'set of TDayOfWeekName');
 CL.AddDelphiFunction('Function GetDateOrder( const DateFormat : string) : TDateOrder');
 CL.AddDelphiFunction('Function MonthFromName( const S : string; MaxLen : Byte) : Byte');
 CL.AddDelphiFunction('Function StrToDateDef( const S : string; Default : TDateTime) : TDateTime');
 CL.AddDelphiFunction('Function StrToDateFmt( const DateFormat, S : string) : TDateTime');
 CL.AddDelphiFunction('Function StrToDateFmtDef( const DateFormat, S : string; Default : TDateTime) : TDateTime');
 CL.AddDelphiFunction('Function DefDateFormat( FourDigitYear : Boolean) : string');
 CL.AddDelphiFunction('Function DefDateMask( BlanksChar : Char; FourDigitYear : Boolean) : string');
 CL.AddDelphiFunction('Function FormatLongDate( Value : TDateTime) : string');
 CL.AddDelphiFunction('Function FormatLongDateTime( Value : TDateTime) : string');
 //CL.AddConstantN('DefaultDateOrder','').SetString( doDMY);
 CL.AddDelphiFunction('Function FourDigitYear : Boolean');
 CL.AddConstantN('CenturyOffset','Byte').SetUInt( 60);
 //CL.AddConstantN('NullDate','TDateTime').SetString('0');
 //CL.AddConstantN('NullDate','TDateTime').SetString('0');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_JvDateUtil_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CurrentYear, 'CurrentYear', cdRegister);
 S.RegisterDelphiFunction(@IsLeapYear, 'IsLeapYear', cdRegister);
 S.RegisterDelphiFunction(@DaysPerMonth, 'DaysPerMonth', cdRegister);
 S.RegisterDelphiFunction(@FirstDayOfPrevMonth, 'FirstDayOfPrevMonth', cdRegister);
 S.RegisterDelphiFunction(@LastDayOfPrevMonth, 'LastDayOfPrevMonth', cdRegister);
 S.RegisterDelphiFunction(@FirstDayOfNextMonth, 'FirstDayOfNextMonth', cdRegister);
 S.RegisterDelphiFunction(@ExtractDay, 'ExtractDay', cdRegister);
 S.RegisterDelphiFunction(@ExtractMonth, 'ExtractMonth', cdRegister);
 S.RegisterDelphiFunction(@ExtractYear, 'ExtractYear', cdRegister);
 S.RegisterDelphiFunction(@IncDate, 'IncDate', cdRegister);
 S.RegisterDelphiFunction(@IncDay, 'IncDay', cdRegister);
 S.RegisterDelphiFunction(@IncMonth, 'IncMonth', cdRegister);
 S.RegisterDelphiFunction(@IncYear, 'IncYear', cdRegister);
 S.RegisterDelphiFunction(@ValidDate, 'ValidDate', cdRegister);
 S.RegisterDelphiFunction(@DateDiff, 'DateDiff', cdRegister);
 S.RegisterDelphiFunction(@MonthsBetween, 'MonthsBetween', cdRegister);
 S.RegisterDelphiFunction(@DaysInPeriod, 'DaysInPeriod', cdRegister);
 S.RegisterDelphiFunction(@DaysBetween, 'DaysBetween', cdRegister);
 S.RegisterDelphiFunction(@IncTime, 'IncTime', cdRegister);
 S.RegisterDelphiFunction(@IncHour, 'IncHour', cdRegister);
 S.RegisterDelphiFunction(@IncMinute, 'IncMinute', cdRegister);
 S.RegisterDelphiFunction(@IncSecond, 'IncSecond', cdRegister);
 S.RegisterDelphiFunction(@IncMSec, 'IncMSec', cdRegister);
 S.RegisterDelphiFunction(@CutTime, 'CutTime', cdRegister);
 S.RegisterDelphiFunction(@GetDateOrder, 'GetDateOrder', cdRegister);
 S.RegisterDelphiFunction(@MonthFromName, 'MonthFromName', cdRegister);
 S.RegisterDelphiFunction(@StrToDateDef, 'StrToDateDef', cdRegister);
 S.RegisterDelphiFunction(@StrToDateFmt, 'StrToDateFmt', cdRegister);
 S.RegisterDelphiFunction(@StrToDateFmtDef, 'StrToDateFmtDef', cdRegister);
 S.RegisterDelphiFunction(@DefDateFormat, 'DefDateFormat', cdRegister);
 S.RegisterDelphiFunction(@DefDateMask, 'DefDateMask', cdRegister);
 S.RegisterDelphiFunction(@FormatLongDate, 'FormatLongDate', cdRegister);
 S.RegisterDelphiFunction(@FormatLongDateTime, 'FormatLongDateTime', cdRegister);
 S.RegisterDelphiFunction(@FourDigitYear, 'FourDigitYear', cdRegister);
end;

 
 
{ TPSImport_JvDateUtil }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvDateUtil.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvDateUtil(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvDateUtil.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_JvDateUtil(ri);
  RIRegister_JvDateUtil_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
