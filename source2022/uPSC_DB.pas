{ Compiletime DB support }
Unit uPSC_DB;
{
This file has been generated by UnitParser v0.4, written by M. Knight.
tests to add int64 or largeintfield is provided by max , TCustomConnection
          add TDataSource to V3.6.1
            SetDefaultPropery('ITEMS'); TParams 3.9.9.
            checkconstraint     fix providerflags of fields 4.2.8.10  -locs 1082 -TParams create 4.7.6

}
{$I PascalScript.inc}
Interface
uses
  uPSCompiler;

procedure SIRegisterTDATASET(CL: TPSPascalCompiler);
procedure SIRegister_TDataSource(CL: TPSPascalCompiler);
procedure SIRegister_TCheckConstraints(CL: TPSPascalCompiler);
procedure SIRegister_TCheckConstraint(CL: TPSPascalCompiler);

procedure SIRegisterTPARAMS(CL: TPSPascalCompiler);
procedure SIRegisterTPARAM(CL: TPSPascalCompiler);
procedure SIRegisterTGUIDFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTVARIANTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTREFERENCEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTDATASETFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTARRAYFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTADTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTOBJECTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTGRAPHICFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTMEMOFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBLOBFIELD(CL: TPSPascalCompiler);
{$IFDEF DELPHI6UP}
procedure SIRegisterTFMTBCDFIELD(CL: TPSPascalCompiler);
{$ENDIF}
procedure SIRegisterTBCDFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTVARBYTESFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBYTESFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBINARYFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTTIMEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTDATEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTDATETIMEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBOOLEANFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTCURRENCYFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTFLOATFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTAUTOINCFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTWORDFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTLARGEINTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTSMALLINTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTINTEGERFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTNUMERICFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTWIDESTRINGFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTSTRINGFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTLOOKUPLIST(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDS(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDLIST(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDDEFLIST(CL: TPSPascalCompiler);
procedure SIRegisterTFLATLIST(CL: TPSPascalCompiler);
procedure SIRegisterTINDEXDEFS(CL: TPSPascalCompiler);
procedure SIRegisterTINDEXDEF(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDDEFS(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDDEF(CL: TPSPascalCompiler);
procedure SIRegisterTDEFCOLLECTION(CL: TPSPascalCompiler);
procedure SIRegisterTNAMEDITEM(CL: TPSPascalCompiler);
procedure SIRegister_DB(Cl: TPSPascalCompiler);

implementation
Uses Sysutils;

Function RegClassS(cl : TPSPascalCompiler;Const InheritsFrom,Classname : String) : TPSCompileTimeClass;
begin
Result := cl.FindClass(Classname);
if Result = nil then
  Result := cl.AddClassN(cl.FindClass(InheritsFrom),Classname)
else
  Result.ClassInheritsFrom := cl.FindClass(InheritsFrom);
end;


(*----------------------------------------------------------------------------*)
procedure SIRegister_TDataSource(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TDataSource') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TDataSource') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Edit');
    RegisterMethod('Function IsLinkedTo( DataSet : TDataSet) : Boolean');
    RegisterProperty('State', 'TDataSetState', iptr);
    RegisterProperty('AutoEdit', 'Boolean', iptrw);
    RegisterProperty('DataSet', 'TDataSet', iptrw);
    RegisterProperty('Enabled', 'Boolean', iptrw);
    RegisterProperty('OnStateChange', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDataChange', 'TDataChangeEvent', iptrw);
    RegisterProperty('OnUpdateData', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCheckConstraints(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TCheckConstraints') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TCheckConstraints') do begin
    RegisterMethod('Constructor Create( Owner : TPersistent)');
    RegisterMethod('Function Add : TCheckConstraint');
    RegisterProperty('Items', 'TCheckConstraint Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCheckConstraint(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TCheckConstraint') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TCheckConstraint') do begin
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function GetDisplayName : string');
    RegisterProperty('CustomConstraint', 'string', iptrw);
    RegisterProperty('ErrorMessage', 'string', iptrw);
    RegisterProperty('FromDictionary', 'Boolean', iptrw);
    RegisterProperty('ImportedConstraint', 'string', iptrw);
  end;
end;



procedure SIRegister_TCustomConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TCustomConnection') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TCustomConnection') do begin
    //RegisterMethod('Constructor Create( AOwner : TComponent)');
    //RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure Open;');
    RegisterMethod('Procedure Close');
    RegisterProperty('Connected', 'Boolean', iptrw);
    RegisterProperty('DataSets', 'TDataSet Integer', iptr);
    RegisterProperty('DataSetCount', 'Integer', iptr);
    RegisterProperty('LoginPrompt', 'Boolean', iptrw);
    RegisterProperty('AfterConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('AfterDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('OnLogin', 'TLoginEvent', iptrw);
  end;
end;

procedure SIRegister_EUpdateError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'EDatabaseError', 'EUpdateError') do
  with CL.AddClassN(CL.FindClass('EDatabaseError'),'EUpdateError') do
  begin
    RegisterMethod('Constructor Create( NativeError, Context : string; ErrCode, PrevError : Integer; E : Exception)');
    RegisterProperty('Context', 'string', iptr);
    RegisterProperty('ErrorCode', 'Integer', iptr);
    RegisterProperty('PreviousError', 'Integer', iptr);
    RegisterProperty('OriginalException', 'Exception', iptr);
  end;
end;

procedure SIRegisterTDATASET(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TCOMPONENT','TDATASET') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
  RegisterMethod('Procedure Free');
   RegisterMethod('Function ACTIVEBUFFER : PCHAR');
  RegisterMethod('Procedure APPEND');
  RegisterMethod('Procedure APPENDRECORD( const VALUES : array of const)');
//  RegisterMethod('Function BOOKMARKVALID( BOOKMARK : TBOOKMARK) : BOOLEAN');
  RegisterMethod('Procedure CANCEL');
  RegisterMethod('Procedure CHECKBROWSEMODE');
  RegisterMethod('Procedure CLEARFIELDS');
  RegisterMethod('Procedure CLOSE');
  RegisterMethod('Function CONTROLSDISABLED : BOOLEAN');
//  RegisterMethod('Function COMPAREBOOKMARKS( BOOKMARK1, BOOKMARK2 : TBOOKMARK) : INTEGER');
  RegisterMethod('Function CREATEBLOBSTREAM( FIELD : TFIELD; MODE : TBLOBSTREAMMODE) : TSTREAM');
  RegisterMethod('Procedure CURSORPOSCHANGED');
  RegisterMethod('Procedure DELETE');
  RegisterMethod('Procedure DISABLECONTROLS');
  RegisterMethod('Procedure EDIT');
  RegisterMethod('Procedure ENABLECONTROLS');
{$IFDEF DELPHI2006UP}
  RegisterMethod('Function FIELDBYNAME( const FIELDNAME : WIDESTRING) : TFIELD');
  RegisterMethod('Function FINDFIELD( const FIELDNAME : WideString) : TFIELD');
{$ELSE}
  RegisterMethod('Function FIELDBYNAME( const FIELDNAME : STRING) : TFIELD');
  RegisterMethod('Function FINDFIELD( const FIELDNAME : STRING) : TFIELD');
{$ENDIF}
  RegisterMethod('Function FINDFIRST : BOOLEAN');
  RegisterMethod('Function FINDLAST : BOOLEAN');
  RegisterMethod('Function FINDNEXT : BOOLEAN');
  RegisterMethod('Function FINDPRIOR : BOOLEAN');
  RegisterMethod('Procedure FIRST');
//  RegisterMethod('Procedure FREEBOOKMARK( BOOKMARK : TBOOKMARK)');
//  RegisterMethod('Function GETBOOKMARK : TBOOKMARK');
  RegisterMethod('Function GETCURRENTRECORD( BUFFER : PCHAR) : BOOLEAN');
//  RegisterMethod('Procedure GETDETAILDATASETS( LIST : TLIST)');
//  RegisterMethod('Procedure GETFIELDLIST( LIST : TLIST; const FIELDNAMES : STRING)');
//  RegisterMethod('Procedure GETDETAILLINKFIELDS( MASTERFIELDS, DETAILFIELDS : TLIST)');
//  RegisterMethod('Function GETBLOBFIELDDATA( FIELDNO : INTEGER; var BUFFER : TBLOBBYTEDATA) : INTEGER');
  RegisterMethod('Procedure GETFIELDNAMES( LIST : TSTRINGS)');
//  RegisterMethod('Procedure GOTOBOOKMARK( BOOKMARK : TBOOKMARK)');
  RegisterMethod('Procedure INSERT');
  RegisterMethod('Procedure INSERTRECORD( const VALUES : array of const)');
  RegisterMethod('Function ISEMPTY : BOOLEAN');
  RegisterMethod('Function ISLINKEDTO( DATASOURCE : TDATASOURCE) : BOOLEAN');
  RegisterMethod('Function ISSEQUENCED : BOOLEAN');
  RegisterMethod('Procedure LAST');
  RegisterMethod('Function LOCATE( const KEYFIELDS : String; const KEYVALUES : VARIANT; OPTIONS : TLOCATEOPTIONS) : BOOLEAN');
  RegisterMethod('Function LOOKUP( const KEYFIELDS : String; const KEYVALUES : VARIANT; const RESULTFIELDS : String) : VARIANT');
  RegisterMethod('Function MOVEBY( DISTANCE : INTEGER) : INTEGER');
  RegisterMethod('Procedure NEXT');
  RegisterMethod('Procedure OPEN');
  RegisterMethod('Procedure POST');
  RegisterMethod('Procedure PRIOR');
  RegisterMethod('Procedure REFRESH');
//  RegisterMethod('Procedure RESYNC( MODE : TRESYNCMODE)');
  RegisterMethod('Procedure SETFIELDS( const VALUES : array of const)');
  RegisterMethod('Function TRANSLATE( SRC, DEST : PCHAR; TOOEM : BOOLEAN) : INTEGER');
  RegisterMethod('Procedure UPDATECURSORPOS');
  RegisterMethod('Procedure UPDATERECORD');
  RegisterMethod('Function UPDATESTATUS : TUPDATESTATUS');
  RegisterProperty('AGGFIELDS', 'TFIELDS', iptr);
  RegisterProperty('BOF', 'BOOLEAN', iptr);
//  RegisterProperty('BOOKMARK', 'TBOOKMARKSTR', iptrw);
  RegisterProperty('CANMODIFY', 'BOOLEAN', iptr);
  RegisterProperty('DATASETFIELD', 'TDATASETFIELD', iptrw);
  RegisterProperty('DATASOURCE', 'TDATASOURCE', iptr);
  RegisterProperty('DEFAULTFIELDS', 'BOOLEAN', iptr);
  RegisterProperty('DESIGNER', 'TDATASETDESIGNER', iptr);
  RegisterProperty('EOF', 'BOOLEAN', iptr);
  RegisterProperty('BLOCKREADSIZE', 'INTEGER', iptrw);
  RegisterProperty('FIELDCOUNT', 'INTEGER', iptr);
  RegisterProperty('FIELDDEFS', 'TFIELDDEFS', iptrw);
  RegisterProperty('FIELDDEFLIST', 'TFIELDDEFLIST', iptr);
  RegisterProperty('FIELDS', 'TFIELDS', iptr);
  RegisterProperty('FIELDLIST', 'TFIELDLIST', iptr);
  RegisterProperty('FIELDVALUES', 'VARIANT String', iptrw);
  RegisterProperty('FOUND', 'BOOLEAN', iptr);
{$IFDEF DELPHI6UP}
  RegisterProperty('ISUNIDIRECTIONAL', 'BOOLEAN', iptr);
{$ENDIF}
  RegisterProperty('MODIFIED', 'BOOLEAN', iptr);
  RegisterProperty('OBJECTVIEW', 'BOOLEAN', iptrw);
  RegisterProperty('RECORDCOUNT', 'INTEGER', iptr);
  RegisterProperty('RECNO', 'INTEGER', iptrw);
  RegisterProperty('RECORDSIZE', 'WORD', iptr);
  RegisterProperty('SPARSEARRAYS', 'BOOLEAN', iptrw);
  RegisterProperty('STATE', 'TDATASETSTATE', iptr);
  RegisterProperty('FILTER', 'String', iptrw);
  RegisterProperty('FILTERED', 'BOOLEAN', iptrw);
  RegisterProperty('FILTEROPTIONS', 'TFILTEROPTIONS', iptrw);
  RegisterProperty('ACTIVE', 'BOOLEAN', iptrw);
  RegisterProperty('AUTOCALCFIELDS', 'BOOLEAN', iptrw);
  RegisterProperty('BEFOREOPEN', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTEROPEN', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFORECLOSE', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTERCLOSE', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFOREINSERT', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTERINSERT', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFOREEDIT', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTEREDIT', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFOREPOST', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTERPOST', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFORECANCEL', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTERCANCEL', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFOREDELETE', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTERDELETE', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFORESCROLL', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTERSCROLL', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('BEFOREREFRESH', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('AFTERREFRESH', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('ONCALCFIELDS', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('ONDELETEERROR', 'TDATASETERROREVENT', iptrw);
  RegisterProperty('ONEDITERROR', 'TDATASETERROREVENT', iptrw);
  RegisterProperty('ONFILTERRECORD', 'TFILTERRECORDEVENT', iptrw);
  RegisterProperty('ONNEWRECORD', 'TDATASETNOTIFYEVENT', iptrw);
  RegisterProperty('ONPOSTERROR', 'TDATASETERROREVENT', iptrw);
  //RegisterProperty('SQL', 'TStrings', iptrw);
  RegisterProperty('Session', 'TSession', iptrw);
  SetDefaultPropery('FieldValues');

  end;
end;

procedure SIRegisterTPARAMS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TCOLLECTION','TPARAMS') do begin
  RegisterMethod('Procedure ASSIGNVALUES( VALUE : TPARAMS)');
  RegisterMethod('Constructor Create((Owner: TPersistent);');
  //RegisterMethod('constructor Create1(Owner: TPersistent);');
  RegisterMethod('Procedure ADDPARAM( VALUE : TPARAM)');
  RegisterMethod('Procedure REMOVEPARAM( VALUE : TPARAM)');
  RegisterMethod('Function CREATEPARAM( FLDTYPE : TFIELDTYPE; const PARAMNAME : String; PARAMTYPE : TPARAMTYPE) : TPARAM');
  RegisterMethod('Procedure GETPARAMLIST( LIST : TLIST; const PARAMNAMES : STRING)');
  RegisterMethod('Function ISEQUAL( VALUE : TPARAMS) : BOOLEAN');
  RegisterMethod('Function PARSESQL( SQL : String; DOCREATE : BOOLEAN) : String');
  RegisterMethod('Function PARAMBYNAME( const VALUE : String) : TPARAM');
  RegisterMethod('Function FINDPARAM( const VALUE : String) : TPARAM');
  RegisterProperty('ITEMS', 'TPARAM INTEGER', iptrw);
  RegisterProperty('PARAMVALUES', 'VARIANT String', iptrw);
  SetDefaultPropery('ITEMS');
  end;
end;

procedure SIRegisterTPARAM(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TCOLLECTIONITEM','TPARAM') do begin
  RegisterMethod('Procedure ASSIGNFIELD( FIELD : TFIELD)');
  RegisterMethod('Procedure ASSIGNFIELDVALUE( FIELD : TFIELD; const VALUE : VARIANT)');
  RegisterMethod('Procedure CLEAR');
  RegisterMethod('Assign(Source: TPersistent);');
  RegisterMethod('Constructor Create(Collection: TCollection);');
 //  RegisterMethod('Procedure GETDATA( BUFFER : POINTER)');
  RegisterMethod('Function GETDATASIZE : INTEGER');
  RegisterMethod('Procedure LOADFROMFILE( const FILENAME : String; BLOBTYPE : TBLOBTYPE)');
  RegisterMethod('Procedure LOADFROMSTREAM( STREAM : TSTREAM; BLOBTYPE : TBLOBTYPE)');
//  RegisterMethod('Procedure SETBLOBDATA( BUFFER : POINTER; SIZE : INTEGER)');
//  RegisterMethod('Procedure SETDATA( BUFFER : POINTER)');
{$IFDEF DELPHI6UP}
  RegisterProperty('ASBCD', 'CURRENCY', iptrw);
{$ENDIF}
{$IFDEF DELPHI6UP}
  RegisterProperty('ASFMTBCD', 'TBCD', iptrw);
{$ENDIF}
  RegisterProperty('ASBLOB', 'TBLOBDATA', iptrw);
  RegisterProperty('ASBOOLEAN', 'BOOLEAN', iptrw);
  RegisterProperty('ASCURRENCY', 'CURRENCY', iptrw);
  RegisterProperty('ASDATE', 'TDATETIME', iptrw);
  RegisterProperty('ASDATETIME', 'TDATETIME', iptrw);
  RegisterProperty('ASFLOAT', 'DOUBLE', iptrw);
  RegisterProperty('ASINTEGER', 'LONGINT', iptrw);
  RegisterProperty('ASSMALLINT', 'LONGINT', iptrw);
  RegisterProperty('ASMEMO', 'String', iptrw);
  RegisterProperty('ASSTRING', 'String', iptrw);
  RegisterProperty('ASTIME', 'TDATETIME', iptrw);
  RegisterProperty('ASWORD', 'LONGINT', iptrw);
  RegisterProperty('BOUND', 'BOOLEAN', iptrw);
  RegisterProperty('ISNULL', 'BOOLEAN', iptr);
  RegisterProperty('NATIVESTR', 'String', iptrw);
  RegisterProperty('TEXT', 'String', iptrw);
  RegisterProperty('DATATYPE', 'TFIELDTYPE', iptrw);
{$IFDEF DELPHI6UP}
  RegisterProperty('PRECISION', 'INTEGER', iptrw);
  RegisterProperty('NUMERICSCALE', 'INTEGER', iptrw);
  RegisterProperty('SIZE', 'INTEGER', iptrw);
{$ENDIF}
  RegisterProperty('NAME', 'String', iptrw);
  RegisterProperty('PARAMTYPE', 'TPARAMTYPE', iptrw);
  RegisterProperty('VALUE', 'VARIANT', iptrw);
  end;
end;

procedure SIRegisterTGUIDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TGUIDFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTVARIANTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TVARIANTFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTREFERENCEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TDATASETFIELD','TREFERENCEFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
  RegisterMethod('Assign(Source: TPersistent);');
  RegisterProperty('REFERENCETABLENAME', 'String', iptrw);
  end;
end;

procedure SIRegisterTDATASETFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TOBJECTFIELD','TDATASETFIELD') do begin
  RegisterMethod('Constructor Create( AOwner : TComponent)');
  RegisterProperty('NESTEDDATASET', 'TDATASET', iptr);
  RegisterMethod('Assign(Source: TPersistent);');
  RegisterProperty('INCLUDEOBJECTFIELD', 'BOOLEAN', iptrw);
  end;
end;

procedure SIRegisterTARRAYFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TOBJECTFIELD','TARRAYFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTADTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TOBJECTFIELD','TADTFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
  end;
end;

procedure SIRegisterTOBJECTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TOBJECTFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
  RegisterProperty('FIELDCOUNT', 'INTEGER', iptr);
  RegisterProperty('FIELDS', 'TFIELDS', iptr);
  RegisterProperty('FIELDVALUES', 'VARIANT INTEGER', iptrw);
  RegisterProperty('UNNAMED', 'BOOLEAN', iptr);
  RegisterProperty('OBJECTTYPE', 'String', iptrw);
  end;
end;

procedure SIRegisterTGRAPHICFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TBLOBFIELD','TGRAPHICFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTMEMOFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TBLOBFIELD','TMEMOFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTBLOBFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TBLOBFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterMethod('Procedure LOADFROMFILE( const FILENAME : String)');
  RegisterMethod('Procedure LOADFROMSTREAM( STREAM : TSTREAM)');
  RegisterMethod('Procedure SAVETOFILE( const FILENAME : String)');
  RegisterMethod('Procedure SAVETOSTREAM( STREAM : TSTREAM)');
  RegisterMethod('Assign(Source: TPersistent);');
  RegisterProperty('BLOBSIZE', 'INTEGER', iptr);
  RegisterProperty('MODIFIED', 'BOOLEAN', iptrw);
  RegisterProperty('VALUE', 'String', iptrw);
  RegisterProperty('TRANSLITERATE', 'BOOLEAN', iptrw);
  RegisterProperty('BLOBTYPE', 'TBLOBTYPE', iptrw);
{$IFDEF DELPHI6UP}
  RegisterProperty('GRAPHICHEADER', 'BOOLEAN', iptrw);
{$ENDIF}
  end;
end;

{$IFDEF DELPHI6UP}
procedure SIRegisterTFMTBCDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TNUMERICFIELD','TFMTBCDFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('VALUE', 'TBCD', iptrw);
  RegisterProperty('CURRENCY', 'BOOLEAN', iptrw);
  RegisterProperty('MAXVALUE', 'String', iptrw);
  RegisterProperty('MINVALUE', 'String', iptrw);
  RegisterProperty('PRECISION', 'INTEGER', iptrw);
  end;
end;
{$ENDIF}

procedure SIRegisterTBCDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TNUMERICFIELD','TBCDFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('VALUE', 'CURRENCY', iptrw);
  RegisterProperty('CURRENCY', 'BOOLEAN', iptrw);
  RegisterProperty('MAXVALUE', 'CURRENCY', iptrw);
  RegisterProperty('MINVALUE', 'CURRENCY', iptrw);
  RegisterProperty('PRECISION', 'INTEGER', iptrw);
  end;
end;

procedure SIRegisterTVARBYTESFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TBYTESFIELD','TVARBYTESFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTBYTESFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TBINARYFIELD','TBYTESFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTBINARYFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TBINARYFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTTIMEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TDATETIMEFIELD','TTIMEFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTDATEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TDATETIMEFIELD','TDATEFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTDATETIMEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TDATETIMEFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('VALUE', 'TDATETIME', iptrw);
  RegisterProperty('DISPLAYFORMAT', 'String', iptrw);
  end;
end;

procedure SIRegisterTBOOLEANFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TBOOLEANFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('VALUE', 'BOOLEAN', iptrw);
  RegisterProperty('DISPLAYVALUES', 'String', iptrw);
  end;
end;

procedure SIRegisterTCURRENCYFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFLOATFIELD','TCURRENCYFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTFLOATFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TNUMERICFIELD','TFLOATFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('VALUE', 'DOUBLE', iptrw);
  RegisterProperty('CURRENCY', 'BOOLEAN', iptrw);
  RegisterProperty('MAXVALUE', 'DOUBLE', iptrw);
  RegisterProperty('MINVALUE', 'DOUBLE', iptrw);
  RegisterProperty('PRECISION', 'INTEGER', iptrw);
  end;
end;

procedure SIRegisterTAUTOINCFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TINTEGERFIELD','TAUTOINCFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTWORDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TINTEGERFIELD','TWORDFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTLARGEINTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TNUMERICFIELD','TLARGEINTFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('ASLARGEINT', 'LARGEINT', iptrw);
  RegisterProperty('VALUE', 'LARGEINT', iptrw);
  RegisterProperty('MAXVALUE', 'LARGEINT', iptrw);
  RegisterProperty('MINVALUE', 'LARGEINT', iptrw);
  end;
end;

procedure SIRegisterTSMALLINTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TINTEGERFIELD','TSMALLINTFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   end;
end;

procedure SIRegisterTINTEGERFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TNUMERICFIELD','TINTEGERFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('VALUE', 'LONGINT', iptrw);
  RegisterProperty('MAXVALUE', 'LONGINT', iptrw);
  RegisterProperty('MINVALUE', 'LONGINT', iptrw);
  end;
end;

procedure SIRegisterTNUMERICFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TNUMERICFIELD') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('DISPLAYFORMAT', 'String', iptrw);
  RegisterProperty('EDITFORMAT', 'String', iptrw);
  end;
end;

procedure SIRegisterTWIDESTRINGFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TSTRINGFIELD','TWIDESTRINGFIELD') do begin
   RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterProperty('VALUE', 'WIDESTRING', iptrw);
  end;
end;

procedure SIRegisterTSTRINGFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFIELD','TSTRINGFIELD') do begin
  RegisterProperty('VALUE', 'String', iptrw);
  RegisterProperty('FIXEDCHAR', 'BOOLEAN', iptrw);
  RegisterProperty('TRANSLITERATE', 'BOOLEAN', iptrw);
    RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterPublishedProperties;
  RegisterProperty('Size', 'integer', iptrw);
 end;
end;

procedure SIRegisterTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TCOMPONENT','TFIELD') do begin
//RegisterMethod('Procedure ASSIGNVALUE( const VALUE : TVARREC)');
  RegisterMethod('Constructor Create( AOwner : TComponent)');
  RegisterMethod('Procedure Free');
  RegisterMethod('function GetParentComponent: TComponent;');
  RegisterMethod('function HasParent: Boolean;');
  RegisterMethod('procedure SetParentComponent(AParent: TComponent);');

  RegisterMethod('Procedure CLEAR');
  RegisterMethod('Procedure FOCUSCONTROL');
  RegisterMethod('Assign(Source: TPersistent);');

//  RegisterMethod('Function GETDATA( BUFFER : POINTER; NATIVEFORMAT : BOOLEAN) : BOOLEAN');
  RegisterMethod('Function ISVALIDCHAR( INPUTCHAR : CHAR) : BOOLEAN');
  RegisterMethod('Function ISBlob: BOOLEAN');

  RegisterMethod('Procedure REFRESHLOOKUPLIST');
//  RegisterMethod('Procedure SETDATA( BUFFER : POINTER; NATIVEFORMAT : BOOLEAN)');
  RegisterMethod('Procedure SETFIELDTYPE( VALUE : TFIELDTYPE)');
//  RegisterMethod('Procedure VALIDATE( BUFFER : POINTER)');
{$IFDEF DELPHI6UP}
  RegisterProperty('ASBCD', 'TBCD', iptrw);
{$ENDIF}
  RegisterProperty('ASBOOLEAN', 'BOOLEAN', iptrw);
  RegisterProperty('ASCURRENCY', 'CURRENCY', iptrw);
  RegisterProperty('ASDATETIME', 'TDATETIME', iptrw);
  RegisterProperty('ASFLOAT', 'DOUBLE', iptrw);
  RegisterProperty('ASINTEGER', 'LONGINT', iptrw);
  RegisterProperty('ASSTRING', 'String', iptrw);
  RegisterProperty('ASVARIANT', 'VARIANT', iptrw);
  RegisterProperty('ATTRIBUTESET', 'String', iptrw);
  RegisterProperty('CALCULATED', 'BOOLEAN', iptrw);
  RegisterProperty('CANMODIFY', 'BOOLEAN', iptr);
  RegisterProperty('CURVALUE', 'VARIANT', iptr);
  RegisterProperty('DATASET', 'TDATASET', iptrw);
  RegisterProperty('DATASIZE', 'INTEGER', iptr);
  RegisterProperty('DATATYPE', 'TFIELDTYPE', iptr);
  RegisterProperty('DISPLAYNAME', 'String', iptr);
  RegisterProperty('DISPLAYTEXT', 'String', iptr);
  RegisterProperty('EDITMASK', 'TEDITMASK', iptrw);
  RegisterProperty('EDITMASKPTR', 'TEDITMASK', iptr);
  RegisterProperty('EDITMASK', 'String', iptrw);
  RegisterProperty('EDITMASKPTR', 'String', iptr);
  RegisterProperty('FIELDNO', 'INTEGER', iptr);
  RegisterProperty('FULLNAME', 'String', iptr);
  RegisterProperty('ISINDEXFIELD', 'BOOLEAN', iptr);
  RegisterProperty('ISNULL', 'BOOLEAN', iptr);
  RegisterProperty('LOOKUP', 'BOOLEAN', iptrw);
  RegisterProperty('LOOKUPLIST', 'TLOOKUPLIST', iptr);
  RegisterProperty('NEWVALUE', 'VARIANT', iptrw);
  RegisterProperty('OFFSET', 'INTEGER', iptr);
  RegisterProperty('OLDVALUE', 'VARIANT', iptr);
  RegisterProperty('PARENTFIELD', 'TOBJECTFIELD', iptrw);
  RegisterProperty('SIZE', 'INTEGER', iptrw);
  RegisterProperty('TEXT', 'String', iptrw);
  RegisterProperty('VALIDCHARS', 'TFIELDCHARS', iptrw);
  RegisterProperty('VALUE', 'VARIANT', iptrw);
  RegisterProperty('ALIGNMENT', 'TALIGNMENT', iptrw);
  RegisterProperty('AUTOGENERATEVALUE', 'TAUTOREFRESHFLAG', iptrw);
  RegisterProperty('CUSTOMCONSTRAINT', 'String', iptrw);
  RegisterProperty('CONSTRAINTERRORMESSAGE', 'String', iptrw);
  RegisterProperty('DEFAULTEXPRESSION', 'String', iptrw);
  RegisterProperty('DISPLAYLABEL', 'String', iptrw);
  RegisterProperty('DISPLAYWIDTH', 'INTEGER', iptrw);
  RegisterProperty('FIELDKIND', 'TFIELDKIND', iptrw);
  RegisterProperty('FIELDNAME', 'String', iptrw);
  RegisterProperty('HASCONSTRAINTS', 'BOOLEAN', iptr);
  RegisterProperty('INDEX', 'INTEGER', iptrw);
  RegisterProperty('IMPORTEDCONSTRAINT', 'String', iptrw);
  RegisterProperty('LOOKUPDATASET', 'TDATASET', iptrw);
  RegisterProperty('LOOKUPKEYFIELDS', 'String', iptrw);
  RegisterProperty('LOOKUPRESULTFIELD', 'String', iptrw);
  RegisterProperty('KEYFIELDS', 'String', iptrw);
  RegisterProperty('LOOKUPCACHE', 'BOOLEAN', iptrw);
  RegisterProperty('ORIGIN', 'String', iptrw);
  RegisterProperty('PROVIDERFLAGS', 'TPROVIDERFLAGS', iptrw);
  RegisterProperty('READONLY', 'BOOLEAN', iptrw);
  RegisterProperty('REQUIRED', 'BOOLEAN', iptrw);
  RegisterProperty('VISIBLE', 'BOOLEAN', iptrw);
  RegisterProperty('ONCHANGE', 'TFIELDNOTIFYEVENT', iptrw);
  RegisterProperty('ONGETTEXT', 'TFIELDGETTEXTEVENT', iptrw);
  RegisterProperty('ONSETTEXT', 'TFIELDSETTEXTEVENT', iptrw);
  RegisterProperty('ONVALIDATE', 'TFIELDNOTIFYEVENT', iptrw);
  end;
end;

procedure SIRegisterTLOOKUPLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TOBJECT','TLOOKUPLIST') do
  begin
  RegisterMethod('Constructor CREATE');
  RegisterMethod('Procedure ADD( const AKEY, AVALUE : VARIANT)');
  RegisterMethod('Procedure CLEAR');
  RegisterMethod('Function VALUEOFKEY( const AKEY : VARIANT) : VARIANT');
  end;
end;

procedure SIRegisterTFIELDS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TOBJECT','TFIELDS') do begin
  RegisterMethod('Constructor CREATE( ADATASET : TDATASET)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Procedure ADD( FIELD : TFIELD)');
  RegisterMethod('Procedure CHECKFIELDNAME( const FIELDNAME : String)');
  RegisterMethod('Procedure CHECKFIELDNAMES( const FIELDNAMES : String)');
  RegisterMethod('Procedure CLEAR');
  RegisterMethod('Function FINDFIELD( const FIELDNAME : String) : TFIELD');
  RegisterMethod('Function FIELDBYNAME( const FIELDNAME : String) : TFIELD');
  RegisterMethod('Function FIELDBYNUMBER( FIELDNO : INTEGER) : TFIELD');
  RegisterMethod('Procedure GETFIELDNAMES( LIST : TSTRINGS)');
  RegisterMethod('Function INDEXOF( FIELD : TFIELD) : INTEGER');
  RegisterMethod('Procedure REMOVE( FIELD : TFIELD)');
  RegisterProperty('COUNT', 'INTEGER', iptr);
  RegisterProperty('DATASET', 'TDATASET', iptr);
  RegisterProperty('FIELDS', 'TFIELD INTEGER', iptrw);
  SetDefaultPropery('FIELDS');
  end;
end;

procedure SIRegisterTFIELDLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFLATLIST','TFIELDLIST') do begin
  RegisterMethod('Function FIELDBYNAME( const NAME : String) : TFIELD');
  RegisterMethod('Function FIND( const NAME : String) : TFIELD');
  RegisterProperty('FIELDS', 'TFIELD INTEGER', iptr);
  SetDefaultPropery('FIELDS');
  end;
end;

procedure SIRegisterTFIELDDEFLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TFLATLIST','TFIELDDEFLIST') do begin
  RegisterMethod('Function FIELDBYNAME( const NAME : String) : TFIELDDEF');
  RegisterMethod('Function FIND( const NAME : String) : TFIELDDEF');
  RegisterProperty('FIELDDEFS', 'TFIELDDEF INTEGER', iptr);
 //SetDefaultPropery('FIELDDEFS');
  end;
end;

procedure SIRegisterTFLATLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TSTRINGLIST','TFLATLIST') do begin
  RegisterMethod('Constructor CREATE( ADATASET : TDATASET)');
  RegisterMethod('Procedure UPDATE');
  RegisterProperty('DATASET', 'TDATASET', iptr);
  end;
end;

procedure SIRegisterTINDEXDEFS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TDEFCOLLECTION','TINDEXDEFS') do begin
  RegisterMethod('Constructor CREATE( ADATASET : TDATASET)');
  RegisterMethod('Function ADDINDEXDEF : TINDEXDEF');
  RegisterMethod('Function FIND( const NAME : String) : TINDEXDEF');
  RegisterMethod('Procedure UPDATE');
  RegisterMethod('Function FINDINDEXFORFIELDS( const FIELDS : String) : TINDEXDEF');
  RegisterMethod('Function GETINDEXFORFIELDS( const FIELDS : String; CASEINSENSITIVE : BOOLEAN) : TINDEXDEF');
  RegisterMethod('Procedure ADD( const NAME, FIELDS : String; OPTIONS : TINDEXOPTIONS)');
  RegisterProperty('ITEMS', 'TINDEXDEF INTEGER', iptrw);
  SetDefaultPropery('ITEMS');
  end;
end;

procedure SIRegisterTINDEXDEF(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TNAMEDITEM','TINDEXDEF') do begin
  RegisterMethod('Constructor CREATE( OWNER : TINDEXDEFS; const NAME, FIELDS : String; OPTIONS : TINDEXOPTIONS)');
  RegisterMethod('Assign(Source: TPersistent);');
  RegisterProperty('FIELDEXPRESSION', 'String', iptr);
  RegisterProperty('CASEINSFIELDS', 'String', iptrw);
  RegisterProperty('DESCFIELDS', 'String', iptrw);
  RegisterProperty('EXPRESSION', 'String', iptrw);
  RegisterProperty('FIELDS', 'String', iptrw);
  RegisterProperty('OPTIONS', 'TINDEXOPTIONS', iptrw);
  RegisterProperty('SOURCE', 'String', iptrw);
  RegisterProperty('GROUPINGLEVEL', 'INTEGER', iptrw);
  end;
end;

procedure SIRegisterTFIELDDEFS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TDEFCOLLECTION','TFIELDDEFS') do begin
  RegisterMethod('Constructor CREATE( AOWNER : TPERSISTENT)');
  RegisterMethod('Function ADDFIELDDEF : TFIELDDEF');
  RegisterMethod('Function FIND( const NAME : String) : TFIELDDEF');
  RegisterMethod('Procedure UPDATE');
  RegisterMethod('Procedure ADD( const NAME : String; DATATYPE : TFIELDTYPE; SIZE : INTEGER; REQUIRED : BOOLEAN)');
  RegisterProperty('HIDDENFIELDS', 'BOOLEAN', iptrw);
  RegisterProperty('ITEMS', 'TFIELDDEF INTEGER', iptrw);
  RegisterProperty('PARENTDEF', 'TFIELDDEF', iptr);
  SetDefaultPropery('ITEMS');
  end;
end;

procedure SIRegisterTFIELDDEF(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TNAMEDITEM','TFIELDDEF') do begin
  RegisterMethod('Constructor CREATE( OWNER : TFIELDDEFS; const NAME : STRING; DATATYPE : TFIELDTYPE; SIZE : INTEGER; REQUIRED : BOOLEAN; FIELDNO : INTEGER)');
  RegisterMethod('Assign(Source: TIdPersistent);');
  RegisterMethod('Function ADDCHILD : TFIELDDEF');
  RegisterMethod('Function CREATEFIELD( OWNER : TCOMPONENT; PARENTFIELD : TOBJECTFIELD; const FIELDNAME : String; CREATECHILDREN : BOOLEAN) : TFIELD');
  RegisterMethod('Function HASCHILDDEFS : BOOLEAN');
  RegisterProperty('FIELDCLASS', 'TFIELDCLASS', iptr);
  RegisterProperty('FIELDNO', 'INTEGER', iptrw);
  RegisterProperty('INTERNALCALCFIELD', 'BOOLEAN', iptrw);
  RegisterProperty('PARENTDEF', 'TFIELDDEF', iptr);
  RegisterProperty('REQUIRED', 'BOOLEAN', iptrw);
  RegisterProperty('ATTRIBUTES', 'TFIELDATTRIBUTES', iptrw);
  RegisterProperty('CHILDDEFS', 'TFIELDDEFS', iptrw);
  RegisterProperty('DATATYPE', 'TFIELDTYPE', iptrw);
  RegisterProperty('PRECISION', 'INTEGER', iptrw);
  RegisterProperty('SIZE', 'INTEGER', iptrw);
  end;
end;

procedure SIRegisterTDEFCOLLECTION(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TOWNEDCOLLECTION','TDEFCOLLECTION') do begin
//  RegisterMethod('Constructor CREATE( ADATASET : TDATASET; AOWNER : TPERSISTENT; ACLASS : TCOLLECTIONITEMCLASS)');
  RegisterMethod('Function FIND( const ANAME : String) : TNAMEDITEM');
  RegisterMethod('Procedure GETITEMNAMES( LIST : TSTRINGS)');
  RegisterMethod('Function INDEXOF( const ANAME : String) : INTEGER');
  RegisterProperty('DATASET', 'TDATASET', iptr);
  RegisterProperty('UPDATED', 'BOOLEAN', iptrw);
  end;
end;

procedure SIRegisterTNAMEDITEM(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,'TCOLLECTIONITEM','TNAMEDITEM') do begin
  RegisterProperty('NAME', 'String', iptrw);
  end;
end;

procedure SIRegister_DB(Cl: TPSPascalCompiler);
Begin
{cl.AddTypeS('TFieldType', '(ftUnknown, ftString, ftSmallint, ftInteger, ftWord, ftBoolean, ftFloat, ftCurrency, ftBCD, ftDate, ftTime, ftDateTime,'+
    'ftBytes, ftVarBytes, ftAutoInc, ftBlob, ftMemo, ftGraphic, ftFmtMemo, ftParadoxOle, ftDBaseOle, ftTypedBinary, ftCursor, ftFixedChar, ftWideString,'+
    'ftLargeint, ftADT, ftArray, ftReference, ftDataSet, ftOraBlob, ftOraClob, ftVariant, ftInterface, ftIDispatch, ftGuid, ftTimeStamp, ftFMTBcd)');}

  CL.AddTypeS('TFieldType', '( ftUnknown, ftString, ftSmallint, ftInteger, ftWo'
   +'rd, ftBoolean, ftFloat, ftCurrency, ftBCD, ftDate, ftTime, ftDateTime, ftB'
   +'ytes, ftVarBytes, ftAutoInc, ftBlob, ftMemo, ftGraphic, ftFmtMemo, ftParad'
   +'oxOle, ftDBaseOle, ftTypedBinary, ftCursor, ftFixedChar, ftWideString, ftL'
   +'argeint, ftADT, ftArray, ftReference, ftDataSet, ftOraBlob, ftOraClob, ftV'
   +'ariant, ftInterface, ftIDispatch, ftGuid, ftTimeStamp, ftFMTBcd, ftFixedWi'
   +'deChar, ftWideMemo, ftOraTimeStamp, ftOraInterval )');

 CL.AddTypeS('TDataSetState', '(dsInactive, dsBrowse, dsEdit, dsInsert, dsSetKey, dsCalcFields, dsFilter, dsNewValue, dsOldValue, dsCurValue, dsBlockRead, dsInternalCalc, dsOpening)');
 cl.addTypeS('TLocateOption','(loCaseInsensitive, loPartialKey)');
cl.addtypes('TLocateOptions','set of TLocateOption');
cl.addtypes('TUpdateStatus','(usUnmodified, usModified, usInserted, usDeleted)');
cl.addtypes('TUpdateStatusSet', 'set of TUpdateStatus');
  CL.AddTypeS('TUpdateKind', '( ukModify, ukInsert, ukDelete )');
  CL.AddTypeS('TUpdateAction', '( uaFail, uaAbort, uaSkip, uaRetry, uaApplied )');
  CL.AddTypeS('TUpdateRecordTypes', '( rtModified, rtInserted, rtDeleted, rtUnmodified )');
  CL.AddTypeS('TUpdateMode', '( upWhereAll, upWhereChanged, upWhereKeyOnly )');
 CL.AddTypeS('TPSCommandType','(ctUnknown, ctQuery, ctTable, ctStoredProc, ctSelect'
    +'ctInsert, ctUpdate, ctDelete, ctDDL)');  //3.7.1
 //cl.addTypeS('TPARAMTYPE', 'BYTE');
RegClassS(cl,'TComponent','TDATASET');
RegClassS(cl,'TComponent','TFIELD');
RegClassS(cl,'TComponent','TFIELDDEFS');
RegClassS(cl,'TComponent','TINDEXDEFS');
RegClassS(cl, 'TComponent', 'TObjectField');
RegClassS(cl, 'TComponent', 'TDataLink');
RegClassS(cl, 'TComponent', 'TDataSource');
RegClassS(cl, 'TComponent', 'TParam');

  CL.AddClassN(CL.FindClass('TOBJECT'),'TFields');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TField');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TObjectField');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TDataLink');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TDataSource');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TDataSet');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TFieldDefs');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TIndexDefs');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDatabaseError');

 CL.AddTypeS('TDataEvent', '( deFieldChange, deRecordChange, deDataSetChange, '
   +'deDataSetScroll, deLayoutChange, deUpdateRecord, deUpdateState, deCheckBro'
   +'wseMode, dePropertyChange, deFieldListChange, deFocusControl, deParentScro'
   +'ll, deConnectChange, deReconcileError, deDisabledStateChange )');
  CL.AddTypeS('TUpdateStatus', '( usUnmodified, usModified, usInserted, usDeleted )');
  CL.AddTypeS('TUpdateStatusSet', 'set of TUpdateStatus');
  CL.AddTypeS('TUpdateAction', '( uaFail, uaAbort, uaSkip, uaRetry, uaApplied )');
  //CL.AddTypeS('TUpdateRecordTypes', 'set of ( rtModified, rtInserted, rtDeleted'
  // +', rtUnmodified )');
  CL.AddTypeS('TUpdateMode', '( upWhereAll, upWhereChanged, upWhereKeyOnly )');
  //CL.AddTypeS('TUpdateKind', '( ukModify, ukInsert, ukDelete )');
  CL.AddTypeS('TUpdateErrorEvent', 'Procedure ( DataSet : TDataSet; E : EDataba'
   +'seError; UpdateKind : TUpdateKind; var UpdateAction : TUpdateAction)');
  CL.AddTypeS('TUpdateRecordEvent', 'Procedure ( DataSet : TDataSet; UpdateKind'
   +' : TUpdateKind; var UpdateAction : TUpdateAction)');
  CL.AddTypeS('TConnectChangeEvent', 'Procedure ( Sender : TObject; Connecting: Boolean)');
  CL.AddTypeS('TBufferList', 'array of PChar');
  CL.AddTypeS('TGetMode', '( gmCurrent, gmNext, gmPrior )');
  CL.AddTypeS('TGetResult', '( grOK, grBOF, grEOF, grError )');
  CL.AddTypeS('TResyncMode', '( rmExact, rmCenter )');
  CL.AddTypeS('TDataAction', '( daFail, daAbort, daRetry )');
  CL.AddTypeS('TBlobStreamMode', '( bmRead, bmWrite, bmReadWrite )');
  //CL.AddTypeS('TLocateOption', '( loCaseInsensitive, loPartialKey )');
  //CL.AddTypeS('TLocateOptions', 'set of TLocateOption');
  CL.AddTypeS('TDataOperation', 'Procedure');
  CL.AddTypeS('TDataSetNotifyEvent', 'Procedure ( DataSet : TDataSet)');
  CL.AddTypeS('TDataSetErrorEvent', 'Procedure ( DataSet : TDataSet; E : EDatabaseError; var Action : TDataAction)');
  CL.AddTypeS('TFilterOption', '( foCaseInsensitive, foNoPartialCompare )');
  CL.AddTypeS('TFilterOptions', 'set of TFilterOption');
  CL.AddTypeS('TFilterRecordEvent', 'Procedure ( DataSet : TDataSet; var Accept: Boolean)');

SIRegisterTNAMEDITEM(Cl);
Cl.addTypeS('TDEFUPDATEMETHOD', 'Procedure');
SIRegisterTDEFCOLLECTION(Cl);
cl.AddConstantN('FAHIDDENCOL2','LONGINT').Value.tu32 := 1;
//faReadOnly  = $00000001 platform;
cl.AddConstantN('FAREADONLY2','LONGINT').Value.tu32 := 2;
cl.AddConstantN('FAREQUIRED2','LONGINT').Value.tu32 := 4;
cl.AddConstantN('FALINK2','LONGINT').Value.tu32 := 8;
cl.AddConstantN('FAUNNAMED2','LONGINT').Value.tu32 := 16;
cl.AddConstantN('FAFIXED2','LONGINT').Value.tu32 := 32;

CL.AddTypeS('TFieldAttribute', '( faHiddenCol, faReadonly, faRequired, faLink, faUnNamed, faFixed )');
  CL.AddTypeS('TFieldAttributes', 'set of TFieldAttribute');

// TFieldAttribute = (faHiddenCol, faReadonly, faRequired, faLink, faUnNamed, faFixed);
 // TFieldAttributes = set of TFieldAttribute;

//cl.addTypeS('TFIELDATTRIBUTES', 'BYTE');
SIRegisterTFIELDDEF(Cl);
SIRegisterTFIELDDEFS(Cl);
cl.AddConstantN('CIXPRIMARY','LONGINT').Value.tu32 := 1;
cl.AddConstantN('CIXUNIQUE','LONGINT').Value.tu32 := 2;
cl.AddConstantN('CIXDESCENDING','LONGINT').Value.tu32 := 4;
cl.AddConstantN('CIXCASEINSENSITIVE','LONGINT').Value.tu32 := 8;
cl.AddConstantN('CIXEXPRESSION','LONGINT').Value.tu32 := 16;
cl.AddConstantN('CIXNONMAINTAINED','LONGINT').Value.tu32 := 32;
  CL.AddTypeS('TIndexOption', '(ixPrimary, ixUnique, ixDescending, ixCaseInsensitive, ixExpression, ixNonMaintained )');
  CL.AddTypeS('TIndexOptions', 'set of TIndexOption');
//cl.addTypeS('TINDEXOPTIONS', 'BYTE');
 //CL.AddConstantN('dsEditModes','LongInt').Value.ts32 := ord(dsEdit) or ord(dsInsert) or ord(dsSetKey);
 //CL.AddConstantN('dsWriteModes','LongInt').Value.ts32 := ord(dsEdit) or ord(dsInsert) or ord(dsSetKey) or ord(dsCalcFields) or ord(dsFilter) or ord(dsNewValue) or ord(dsInternalCalc);
 //CL.AddConstantN('ObjectFieldTypes','LongInt').Value.ts32 := ord(ftADT) or ord(ftArray) or ord(ftReference) or ord(ftDataSet);
 CL.AddConstantN('dsMaxStringSize','LongInt').SetInt( 8192);
  CL.AddTypeS('TDBScreenCursor', '( dcrDefault, dcrHourGlass, dcrSQLWait, dcrOther )');

CL.AddTypeS('TParamType', '( ptUnknown, ptInput, ptOutput, ptInputOutput, ptResult )');
  CL.AddTypeS('TParamTypes', 'set of TParamType');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TParams');
SIRegisterTINDEXDEF(Cl);
SIRegisterTINDEXDEFS(Cl);
SIRegisterTFLATLIST(Cl);
SIRegisterTFIELDDEFLIST(Cl);
SIRegisterTFIELDLIST(Cl);
cl.AddConstantN('FKDATA2','LONGINT').Value.tu32 := 1;
cl.AddConstantN('FKCALCULATED2','LONGINT').Value.tu32 := 2;
cl.AddConstantN('FKLOOKUP2','LONGINT').Value.tu32 := 4;
cl.AddConstantN('FKINTERNALCALC2','LONGINT').Value.tu32 := 8;
cl.AddConstantN('FKAGGREGATE2','LONGINT').Value.tu32 := 16;
 CL.AddTypeS('TFieldKind', '( fkData, fkCalculated, fkLookup, fkInternalCalc, fkAggregate )');
  CL.AddTypeS('TFieldKinds', 'set of TFieldKind');
//cl.addTypeS('TFIELDKINDS', 'BYTE');
SIRegisterTFIELDS(Cl);
cl.AddConstantN('PFINUPDATE2','LONGINT').Value.tu32 := 1;
cl.AddConstantN('PFINWHERE2','LONGINT').Value.tu32 := 2;
cl.AddConstantN('PFINKEY2','LONGINT').Value.tu32 := 4;
cl.AddConstantN('PFHIDDEN2','LONGINT').Value.tu32 :=8;
 CL.AddTypeS('TProviderFlag', '( pfInUpdate, pfInWhere, pfInKey, pfHidden )');
  CL.AddTypeS('TProviderFlags', 'set of TProviderFlag');
//cl.addTypeS('TPROVIDERFLAGS', 'BYTE');
cl.addTypeS('TFIELDNOTIFYEVENT', 'Procedure ( SENDER : TFIELD)');
cl.addTypeS('TFIELDGETTEXTEVENT', 'Procedure ( SENDER : TFIELD; var TEXT : STRING; DISPLAYTEXT : BOOLEAN)');
cl.addTypeS('TFIELDSETTEXTEVENT', 'Procedure ( SENDER : TFIELD; const TEXT : String)');
cl.addTypeS('TAUTOREFRESHFLAG', '( ARNONE, ARAUTOINC, ARDEFAULT )');
CL.AddConstantN('ftADT','LongInt').Value.ts32:= 1;
CL.AddConstantN('ftArray','LongInt').Value.ts32:= 2;
CL.AddConstantN('ftReference','LongInt').Value.ts32:= 4;
CL.AddConstantN('ftDataSet','LongInt').Value.ts32:= 8;
cl.addTypeS('ObjectFieldTypes', 'BYTE');
//Cl.addConstantN('ObjectFieldTypes','ftADT, ftArray, ftReference, ftDataSet');
// ObjectFieldTypes = [ftADT, ftArray, ftReference, ftDataSet];

CL.AddConstantN('dsEdit2','LongInt').Value.ts32:= 1;
CL.AddConstantN('dsInsert2','LongInt').Value.ts32:= 2;
CL.AddConstantN('dsSetKey2','LongInt').Value.ts32:= 4;

 //dsEditModes = [dsEdit, dsInsert, dsSetKey];
cl.addTypeS('dsEditModes', 'BYTE');


  SIRegister_TCheckConstraint(CL);
  SIRegister_TCheckConstraints(CL);

SIRegisterTLOOKUPLIST(Cl);
SIRegisterTFIELD(Cl);
SIRegisterTSTRINGFIELD(Cl);
SIRegisterTWIDESTRINGFIELD(Cl);
SIRegisterTNUMERICFIELD(Cl);
SIRegisterTINTEGERFIELD(Cl);
SIRegisterTSMALLINTFIELD(Cl);
cl.addTypeS('LARGEINT', 'INT64');
SIRegisterTLARGEINTFIELD(Cl);
SIRegisterTWORDFIELD(Cl);
SIRegisterTAUTOINCFIELD(Cl);
SIRegisterTFLOATFIELD(Cl);
SIRegisterTCURRENCYFIELD(Cl);
SIRegisterTBOOLEANFIELD(Cl);
SIRegisterTDATETIMEFIELD(Cl);
SIRegisterTDATEFIELD(Cl);
SIRegisterTTIMEFIELD(Cl);
SIRegisterTBINARYFIELD(Cl);
SIRegisterTBYTESFIELD(Cl);
SIRegisterTVARBYTESFIELD(Cl);
SIRegisterTBCDFIELD(Cl);
{$IFDEF DELPHI6UP}
SIRegisterTFMTBCDFIELD(Cl);
{$ENDIF}
cl.addTypeS('TBLOBTYPE', 'BYTE');
SIRegisterTBLOBFIELD(Cl);
SIRegisterTMEMOFIELD(Cl);
SIRegisterTGRAPHICFIELD(Cl);
SIRegisterTOBJECTFIELD(Cl);
SIRegisterTADTFIELD(Cl);
SIRegisterTARRAYFIELD(Cl);
SIRegisterTDATASETFIELD(Cl);
SIRegisterTREFERENCEFIELD(Cl);
SIRegisterTVARIANTFIELD(Cl);
SIRegisterTGUIDFIELD(Cl);
cl.addTypeS('TBLOBDATA', 'STRING');
cl.AddConstantN('PTUNKNOWN2','LONGINT').Value.tu32 := 1;
cl.AddConstantN('PTINPUT2','LONGINT').Value.tu32 := 2;
cl.AddConstantN('PTOUTPUT2','LONGINT').Value.tu32 := 4;
cl.AddConstantN('PTINPUTOUTPUT2','LONGINT').Value.tu32 := 8;
cl.AddConstantN('PTRESULT2','LONGINT').Value.tu32 := 16;
RegClassS(cl,'TObject','TPARAMS');
SIRegisterTPARAM(Cl);
SIRegisterTPARAMS(Cl);
  CL.AddTypeS('TBookmark', '___Pointer');
  CL.AddTypeS('TBookmarkStr', 'string');
 CL.AddDelphiFunction('Function ExtractFieldName( const Fields : string; var Pos : Integer) : string;');
 CL.AddDelphiFunction('Function ExtractFieldName( const Fields : WideString; var Pos : Integer) : WideString;');
 //CL.AddDelphiFunction('Procedure RegisterFields( const FieldClasses : array of TFieldClass)');
 CL.AddDelphiFunction('Procedure DatabaseError( const Message : WideString; Component : TComponent)');
 CL.AddDelphiFunction('Procedure DatabaseErrorFmt( const Message : WIdeString; const Args : array of const; Component : TComponent)');
 CL.AddDelphiFunction('Procedure DisposeMem( var Buffer, Size : Integer)');
 CL.AddDelphiFunction('Function BuffersEqual( Buf1, Buf2 : ___Pointer; Size : Integer) : Boolean');
 CL.AddDelphiFunction('Function GetFieldProperty( DataSet : TDataSet; Control : TComponent; const FieldName : WideString) : TField');
 CL.AddDelphiFunction('Function VarTypeToDataType( VarType : Integer) : TFieldType');

cl.addTypeS('TDATAACTION', '( DAFAIL, DAABORT, DARETRY )');
cl.addTypeS('TBLOBSTREAMMODE', '( BMREAD, BMWRITE, BMREADWRITE )');
cl.addTypeS('TDATAOPERATION', 'Procedure');
cl.addTypeS('TDATASETNOTIFYEVENT', 'Procedure ( DATASET : TDATASET)');
cl.addTypeS('TDATASETERROREVENT', 'Procedure ( DATASET : TDATASET; E : TObject; var ACTION : TDATAACTION)');
cl.addTypeS('TFILTERRECORDEVENT', 'Procedure ( DATASET : TDATASET; var ACCEPT : BOOLEAN)');
SIRegisterTDATASET(Cl);
SIRegister_TDataSource(CL);
SIRegisterTDATASET(Cl);
SIRegister_EUpdateError(CL);
SIRegister_TCustomConnection(Cl);

end;

{$IFDEF USEIMPORTER}
initialization
CIImporter.AddCallBack(@SIRegister_DB,PT_ClassImport);
{$ENDIF}
end.
