unit uPSI_IdHash;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
delete override and published, overload with 16,32,128
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdHash = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdHash128(CL: TPSPascalCompiler);
procedure SIRegister_TIdHash32(CL: TPSPascalCompiler);
procedure SIRegister_TIdHash16(CL: TPSPascalCompiler);
procedure SIRegister_IdHash(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdHash128(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdHash32(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdHash16(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdHash(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdHash;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdHash]);
end;



(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHash128(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdHash', 'TIdHash128') do
  with CL.AddClassN(CL.FindClass('TIdHash'),'TIdHash128') do begin
    RegisterMethod('Function AsHex(const AValue : T4x4LongWordRecord) : string');
    RegisterMethod('Function HashValue128(const ASrc: string): T4x4LongWordRecord;');
    RegisterMethod('Function HashValue128Stream(AStream: TStream): T4x4LongWordRecord;');
    RegisterMethod('Function HashValue(const ASrc: string): T4x4LongWordRecord;');
    RegisterMethod('Function HashValue1(AStream: TStream): T4x4LongWordRecord;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHash160(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdHash', 'TIdHash128') do
  with CL.AddClassN(CL.FindClass('TIdHash'),'TIdHash160') do begin
    RegisterMethod('Function AsHex(const AValue : T5x4LongWordRecord) : string');
    RegisterMethod('Function HashValue(const ASrc: string): T5x4LongWordRecord;');
    RegisterMethod('Function HashValue1(AStream: TStream): T5x4LongWordRecord;');
  end;
end;


(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHash32(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdHash', 'TIdHash32') do
  with CL.AddClassN(CL.FindClass('TIdHash'),'TIdHash32') do begin
    RegisterMethod('Function HashValue32( const ASrc : string) : LongWord;');
    RegisterMethod('Function HashValue32Stream( AStream : TStream) : LongWord;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHash16(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdHash', 'TIdHash16') do
  with CL.AddClassN(CL.FindClass('TIdHash'),'TIdHash16') do begin
    RegisterMethod('Function HashValue16( const ASrc : string) : Word;');
    RegisterMethod('Function HashValue16stream( AStream : TStream) : Word;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdHash(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIdHash');
  //CL.AddTypeS('T4x4LongWordRecord','array [0..3] of LongWord;');
  //CL.AddTypeS('T5x4LongWordRecord','array [0..4] of LongWord;');
  SIRegister_TIdHash16(CL);
  SIRegister_TIdHash32(CL);
  SIRegister_TIdHash128(CL);
  SIRegister_TIdHash160(CL);

  //CL.AddTypeS('T4x4LongWordRecord','array [0..3] of LongWord;');
  //CL.AddTypeS('T5x4LongWordRecord','array [0..4] of LongWord;');
  // CL.AddDelphiFunction('function IdSHA1Hash(apath: string): string;');

end;

(* === run-time registration functions === *)
Function TIdHash160HashValue160stream_P(Self: TIdHash160;  AStream : TStream) : T5x4LongWordRecord;
Begin Result:= Self.HashValue(AStream); END;

(*----------------------------------------------------------------------------*)
Function TIdHash160HashValue160_P(Self: TIdHash160;  const ASrc : string) : T5x4LongWordRecord;
Begin Result:= Self.HashValue(ASrc); END;

(*----------------------------------------------------------------------------*)
Function TIdHash128HashValue128stream_P(Self: TIdHash128;  AStream : TStream) : T4x4LongWordRecord;
Begin Result:= Self.HashValue(AStream); END;

(*----------------------------------------------------------------------------*)
Function TIdHash128HashValue128_P(Self: TIdHash128;  const ASrc : string) : T4x4LongWordRecord;
Begin Result:= Self.HashValue(ASrc); END;

(*----------------------------------------------------------------------------*)
Function TIdHash32HashValue32stream_P(Self: TIdHash32;  AStream : TStream) : LongWord;
Begin Result := Self.HashValue(AStream); END;

(*----------------------------------------------------------------------------*)
Function TIdHash32HashValue32_P(Self: TIdHash32;  const ASrc : string) : LongWord;
Begin Result := Self.HashValue(ASrc); END;

(*----------------------------------------------------------------------------*)
Function TIdHash16HashValue16stream_P(Self: TIdHash16;  AStream : TStream) : Word;
Begin Result := Self.HashValue(AStream); END;

(*----------------------------------------------------------------------------*)
Function TIdHash16HashValue16_P(Self: TIdHash16;  const ASrc : string) : Word;
Begin Result := Self.HashValue(ASrc); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdHash160(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHash160) do begin
    RegisterMethod(@TIdHash160.AsHex, 'AsHex');
    RegisterMethod(@TIdHash160HashValue160_P, 'HashValue');
    RegisterMethod(@TIdHash160HashValue160stream_P, 'HashValue1');
  end;
end;

procedure RIRegister_TIdHash128(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHash128) do begin
    RegisterMethod(@TIdHash128.AsHex, 'AsHex');
    RegisterMethod(@TIdHash128HashValue128_P, 'HashValue128');
    RegisterMethod(@TIdHash128HashValue128stream_P, 'HashValue128Stream');
    RegisterMethod(@TIdHash128HashValue128_P, 'HashValue');
    RegisterMethod(@TIdHash128HashValue128stream_P, 'HashValue1');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdHash32(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHash32) do begin
    RegisterMethod(@TIdHash32HashValue32_P, 'HashValue32');
    RegisterMethod(@TIdHash32HashValue32stream_P, 'HashValue32stream');
    //RegisterMethod(@TIdHash32HashValue32stream_P, 'HashValue32stream');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdHash16(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHash16) do
  begin
    RegisterMethod(@TIdHash16HashValue16_P, 'HashValue16');
    RegisterMethod(@TIdHash16HashValue16stream_P, 'HashValue16stream');
  end;
end;

//procedure RIRegister_JclGraphUtils_Routines(S: TPSExec);


(*----------------------------------------------------------------------------*)
procedure RIRegister_IdHash(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHash) do
  RIRegister_TIdHash16(CL);
  RIRegister_TIdHash32(CL);
  RIRegister_TIdHash128(CL);
  RIRegister_TIdHash160(CL);
end;

 
 
{ TPSImport_IdHash }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHash.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdHash(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHash.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdHash(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
