unit uPSI_IdTelnetServer;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdTelnetServer = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdTelnetServer(CL: TPSPascalCompiler);
procedure SIRegister_TIdTelnetPeerThread(CL: TPSPascalCompiler);
procedure SIRegister_TTelnetData(CL: TPSPascalCompiler);
procedure SIRegister_IdTelnetServer(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdTelnetServer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdTelnetPeerThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_TTelnetData(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdTelnetServer(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdAssignedNumbers
  ,IdTCPServer
  ,IdThreadMgr
  ,IdThreadMgrDefault
  ,IdTelnetServer
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdTelnetServer]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdTelnetServer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPServer', 'TIdTelnetServer') do
  with CL.AddClassN(CL.FindClass('TIdTCPServer'),'TIdTelnetServer') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function DoAuthenticate( AThread : TIdPeerThread; const AUsername, APassword : string) : boolean');
    RegisterMethod('Procedure DoNegotiate( AThread : TIdPeerThread)');
    RegisterMethod('Procedure DoConnect( AThread : TIdPeerThread)');
    RegisterProperty('LoginAttempts', 'Integer', iptrw);
    RegisterProperty('LoginMessage', 'String', iptrw);
    RegisterProperty('OnAuthentication', 'TAuthenticationEvent', iptrw);
    RegisterProperty('OnNegotiate', 'TIdTelnetNegotiateEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdTelnetPeerThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdPeerThread', 'TIdTelnetPeerThread') do
  with CL.AddClassN(CL.FindClass('TIdPeerThread'),'TIdTelnetPeerThread') do
  begin
    RegisterMethod('Constructor Create( ACreateSuspended : Boolean)');
    RegisterProperty('TelnetData', 'TTelnetData', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TTelnetData(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TTelnetData') do
  with CL.AddClassN(CL.FindClass('TObject'),'TTelnetData') do
  begin
    RegisterProperty('Username', 'String', iptrw);
    RegisterProperty('Password', 'String', iptrw);
    RegisterProperty('HUserToken', 'cardinal', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdTelnetServer(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('GLoginAttempts','LongInt').SetInt( 3);
  SIRegister_TTelnetData(CL);
  SIRegister_TIdTelnetPeerThread(CL);
  CL.AddTypeS('TIdTelnetNegotiateEvent', 'Procedure ( AThread : TIdPeerThread)');
  CL.AddTypeS('TAuthenticationEvent', 'Procedure ( AThread : TIdPeerThread; con'
   +'st AUsername, APassword : string; var AAuthenticated : Boolean)');
  SIRegister_TIdTelnetServer(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerOnNegotiate_W(Self: TIdTelnetServer; const T: TIdTelnetNegotiateEvent);
begin Self.OnNegotiate := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerOnNegotiate_R(Self: TIdTelnetServer; var T: TIdTelnetNegotiateEvent);
begin T := Self.OnNegotiate; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerOnAuthentication_W(Self: TIdTelnetServer; const T: TAuthenticationEvent);
begin Self.OnAuthentication := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerOnAuthentication_R(Self: TIdTelnetServer; var T: TAuthenticationEvent);
begin T := Self.OnAuthentication; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerLoginMessage_W(Self: TIdTelnetServer; const T: String);
begin Self.LoginMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerLoginMessage_R(Self: TIdTelnetServer; var T: String);
begin T := Self.LoginMessage; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerLoginAttempts_W(Self: TIdTelnetServer; const T: Integer);
begin Self.LoginAttempts := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetServerLoginAttempts_R(Self: TIdTelnetServer; var T: Integer);
begin T := Self.LoginAttempts; end;

(*----------------------------------------------------------------------------*)
procedure TIdTelnetPeerThreadTelnetData_R(Self: TIdTelnetPeerThread; var T: TTelnetData);
begin T := Self.TelnetData; end;

(*----------------------------------------------------------------------------*)
procedure TTelnetDataHUserToken_W(Self: TTelnetData; const T: cardinal);
Begin Self.HUserToken := T; end;

(*----------------------------------------------------------------------------*)
procedure TTelnetDataHUserToken_R(Self: TTelnetData; var T: cardinal);
Begin T := Self.HUserToken; end;

(*----------------------------------------------------------------------------*)
procedure TTelnetDataPassword_W(Self: TTelnetData; const T: String);
Begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
procedure TTelnetDataPassword_R(Self: TTelnetData; var T: String);
Begin T := Self.Password; end;

(*----------------------------------------------------------------------------*)
procedure TTelnetDataUsername_W(Self: TTelnetData; const T: String);
Begin Self.Username := T; end;

(*----------------------------------------------------------------------------*)
procedure TTelnetDataUsername_R(Self: TTelnetData; var T: String);
Begin T := Self.Username; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdTelnetServer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTelnetServer) do
  begin
    RegisterConstructor(@TIdTelnetServer.Create, 'Create');
    RegisterVirtualMethod(@TIdTelnetServer.DoAuthenticate, 'DoAuthenticate');
    RegisterVirtualMethod(@TIdTelnetServer.DoNegotiate, 'DoNegotiate');
    RegisterMethod(@TIdTelnetServer.DoConnect, 'DoConnect');
    RegisterPropertyHelper(@TIdTelnetServerLoginAttempts_R,@TIdTelnetServerLoginAttempts_W,'LoginAttempts');
    RegisterPropertyHelper(@TIdTelnetServerLoginMessage_R,@TIdTelnetServerLoginMessage_W,'LoginMessage');
    RegisterPropertyHelper(@TIdTelnetServerOnAuthentication_R,@TIdTelnetServerOnAuthentication_W,'OnAuthentication');
    RegisterPropertyHelper(@TIdTelnetServerOnNegotiate_R,@TIdTelnetServerOnNegotiate_W,'OnNegotiate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdTelnetPeerThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTelnetPeerThread) do
  begin
    RegisterConstructor(@TIdTelnetPeerThread.Create, 'Create');
    RegisterPropertyHelper(@TIdTelnetPeerThreadTelnetData_R,nil,'TelnetData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTelnetData(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTelnetData) do
  begin
    RegisterPropertyHelper(@TTelnetDataUsername_R,@TTelnetDataUsername_W,'Username');
    RegisterPropertyHelper(@TTelnetDataPassword_R,@TTelnetDataPassword_W,'Password');
    RegisterPropertyHelper(@TTelnetDataHUserToken_R,@TTelnetDataHUserToken_W,'HUserToken');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdTelnetServer(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TTelnetData(CL);
  RIRegister_TIdTelnetPeerThread(CL);
  RIRegister_TIdTelnetServer(CL);
end;

 
 
{ TPSImport_IdTelnetServer }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTelnetServer.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdTelnetServer(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTelnetServer.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdTelnetServer(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
