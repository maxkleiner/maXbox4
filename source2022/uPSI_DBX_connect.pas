unit uPSI_DB;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_DB = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TCustomConnection(CL: TPSPascalCompiler);
procedure SIRegister_EUpdateError(CL: TPSPascalCompiler);
procedure SIRegister_DB(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TCustomConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_EUpdateError(CL: TPSRuntimeClassImporter);
procedure RIRegister_DB(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Variants
  ,MaskUtils
  ,SqlTimSt
  ,FMTBcd
  ,DBCommonTypes
  ,WideStrings
  ,DB
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_DB]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TCustomConnection') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TCustomConnection') do
  begin
    RegisterMethod('Procedure Open;');
    RegisterMethod('Procedure Close');
    RegisterProperty('Connected', 'Boolean', iptrw);
    RegisterProperty('DataSets', 'TDataSet Integer', iptr);
    RegisterProperty('DataSetCount', 'Integer', iptr);
    RegisterProperty('LoginPrompt', 'Boolean', iptrw);
    RegisterProperty('AfterConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('AfterDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('OnLogin', 'TLoginEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EUpdateError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'EDatabaseError', 'EUpdateError') do
  with CL.AddClassN(CL.FindClass('EDatabaseError'),'EUpdateError') do
  begin
    RegisterMethod('Constructor Create( NativeError, Context : string; ErrCode, PrevError : Integer; E : Exception)');
    RegisterProperty('Context', 'string', iptr);
    RegisterProperty('ErrorCode', 'Integer', iptr);
    RegisterProperty('PreviousError', 'Integer', iptr);
    RegisterProperty('OriginalException', 'Exception', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_DB(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'TFields');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TField');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TObjectField');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TDataLink');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TDataSource');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TDataSet');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TFieldDefs');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIndexDefs');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDatabaseError');
  SIRegister_EUpdateError(CL);
  CL.AddTypeS('TFieldType', '( ftUnknown, ftString, ftSmallint, ftInteger, ftWo'
   +'rd, ftBoolean, ftFloat, ftCurrency, ftBCD, ftDate, ftTime, ftDateTime, ftB'
   +'ytes, ftVarBytes, ftAutoInc, ftBlob, ftMemo, ftGraphic, ftFmtMemo, ftParad'
   +'oxOle, ftDBaseOle, ftTypedBinary, ftCursor, ftFixedChar, ftWideString, ftL'
   +'argeint, ftADT, ftArray, ftReference, ftDataSet, ftOraBlob, ftOraClob, ftV'
   +'ariant, ftInterface, ftIDispatch, ftGuid, ftTimeStamp, ftFMTBcd, ftFixedWi'
   +'deChar, ftWideMemo, ftOraTimeStamp, ftOraInterval )');
  CL.AddTypeS('TDataSetState', '( dsInactive, dsBrowse, dsEdit, dsInsert, dsSet'
   +'Key, dsCalcFields, dsFilter, dsNewValue, dsOldValue, dsCurValue, dsBlockRe'
   +'ad, dsInternalCalc, dsOpening )');
  CL.AddTypeS('TDataEvent', '( deFieldChange, deRecordChange, deDataSetChange, '
   +'deDataSetScroll, deLayoutChange, deUpdateRecord, deUpdateState, deCheckBro'
   +'wseMode, dePropertyChange, deFieldListChange, deFocusControl, deParentScro'
   +'ll, deConnectChange, deReconcileError, deDisabledStateChange )');
  CL.AddTypeS('TUpdateStatus', '( usUnmodified, usModified, usInserted, usDelet'
   +'ed )');
  CL.AddTypeS('TUpdateStatusSet', 'set of TUpdateStatus');
  CL.AddTypeS('TUpdateAction', '( uaFail, uaAbort, uaSkip, uaRetry, uaApplied )');
  CL.AddTypeS('TUpdateRecordTypes', 'set of ( rtModified, rtInserted, rtDeleted'
   +', rtUnmodified )');
  CL.AddTypeS('TUpdateMode', '( upWhereAll, upWhereChanged, upWhereKeyOnly )');
  CL.AddTypeS('TUpdateKind', '( ukModify, ukInsert, ukDelete )');
  CL.AddTypeS('TUpdateErrorEvent', 'Procedure ( DataSet : TDataSet; E : EDataba'
   +'seError; UpdateKind : TUpdateKind; var UpdateAction : TUpdateAction)');
  CL.AddTypeS('TUpdateRecordEvent', 'Procedure ( DataSet : TDataSet; UpdateKind'
   +' : TUpdateKind; var UpdateAction : TUpdateAction)');
  CL.AddTypeS('TConnectChangeEvent', 'Procedure ( Sender : TObject; Connecting '
   +': Boolean)');
  SIRegister_TCustomConnection(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TCustomConnectionOnLogin_W(Self: TCustomConnection; const T: TLoginEvent);
begin Self.OnLogin := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionOnLogin_R(Self: TCustomConnection; var T: TLoginEvent);
begin T := Self.OnLogin; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeDisconnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.BeforeDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeDisconnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.BeforeDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterDisconnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.AfterDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterDisconnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.AfterDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeConnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.BeforeConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeConnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.BeforeConnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterConnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.AfterConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterConnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.AfterConnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionLoginPrompt_W(Self: TCustomConnection; const T: Boolean);
begin Self.LoginPrompt := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionLoginPrompt_R(Self: TCustomConnection; var T: Boolean);
begin T := Self.LoginPrompt; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionDataSetCount_R(Self: TCustomConnection; var T: Integer);
begin T := Self.DataSetCount; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionDataSets_R(Self: TCustomConnection; var T: TDataSet; const t1: Integer);
begin T := Self.DataSets[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionConnected_W(Self: TCustomConnection; const T: Boolean);
begin Self.Connected := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionConnected_R(Self: TCustomConnection; var T: Boolean);
begin T := Self.Connected; end;

(*----------------------------------------------------------------------------*)
Procedure TCustomConnectionOpen_P(Self: TCustomConnection);
Begin Self.Open; END;

(*----------------------------------------------------------------------------*)
procedure EUpdateErrorOriginalException_R(Self: EUpdateError; var T: Exception);
begin T := Self.OriginalException; end;

(*----------------------------------------------------------------------------*)
procedure EUpdateErrorPreviousError_R(Self: EUpdateError; var T: Integer);
begin T := Self.PreviousError; end;

(*----------------------------------------------------------------------------*)
procedure EUpdateErrorErrorCode_R(Self: EUpdateError; var T: Integer);
begin T := Self.ErrorCode; end;

(*----------------------------------------------------------------------------*)
procedure EUpdateErrorContext_R(Self: EUpdateError; var T: string);
begin T := Self.Context; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomConnection) do
  begin
    RegisterMethod(@TCustomConnectionOpen_P, 'Open');
    RegisterMethod(@TCustomConnection.Close, 'Close');
    RegisterPropertyHelper(@TCustomConnectionConnected_R,@TCustomConnectionConnected_W,'Connected');
    RegisterPropertyHelper(@TCustomConnectionDataSets_R,nil,'DataSets');
    RegisterPropertyHelper(@TCustomConnectionDataSetCount_R,nil,'DataSetCount');
    RegisterPropertyHelper(@TCustomConnectionLoginPrompt_R,@TCustomConnectionLoginPrompt_W,'LoginPrompt');
    RegisterPropertyHelper(@TCustomConnectionAfterConnect_R,@TCustomConnectionAfterConnect_W,'AfterConnect');
    RegisterPropertyHelper(@TCustomConnectionBeforeConnect_R,@TCustomConnectionBeforeConnect_W,'BeforeConnect');
    RegisterPropertyHelper(@TCustomConnectionAfterDisconnect_R,@TCustomConnectionAfterDisconnect_W,'AfterDisconnect');
    RegisterPropertyHelper(@TCustomConnectionBeforeDisconnect_R,@TCustomConnectionBeforeDisconnect_W,'BeforeDisconnect');
    RegisterPropertyHelper(@TCustomConnectionOnLogin_R,@TCustomConnectionOnLogin_W,'OnLogin');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EUpdateError(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EUpdateError) do
  begin
    RegisterConstructor(@EUpdateError.Create, 'Create');
    RegisterPropertyHelper(@EUpdateErrorContext_R,nil,'Context');
    RegisterPropertyHelper(@EUpdateErrorErrorCode_R,nil,'ErrorCode');
    RegisterPropertyHelper(@EUpdateErrorPreviousError_R,nil,'PreviousError');
    RegisterPropertyHelper(@EUpdateErrorOriginalException_R,nil,'OriginalException');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFields) do
  with CL.Add(TField) do
  with CL.Add(TObjectField) do
  with CL.Add(TDataLink) do
  with CL.Add(TDataSource) do
  with CL.Add(TDataSet) do
  with CL.Add(TFieldDefs) do
  with CL.Add(TIndexDefs) do
  with CL.Add(EDatabaseError) do
  RIRegister_EUpdateError(CL);
  RIRegister_TCustomConnection(CL);
end;

 
 
{ TPSImport_DB }
(*----------------------------------------------------------------------------*)
procedure TPSImport_DB.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_DB(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_DB.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_DB(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
