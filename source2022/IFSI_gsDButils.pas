unit IFSI_gsDButils;
{
This file has been generated by UnitParser v0.6, written by M. Knight
and updated by NP. v/d Spek.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok''s conv unility

}
{$I PascalScript.inc}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_gsDButils = class(TPSPlugin)
  protected
    procedure CompOnUses(CompExec: TPSScript); override;
    procedure ExecOnUses(CompExec: TPSScript); override;
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure CompileImport2(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
    procedure ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
(*
{ compile-time registration functions }
procedure SIRegister_TQueryUniDirectionalGS(CL: TPSPascalCompiler);
procedure SIRegister_gsDButils(CL: TPSPascalCompiler);
 
{ run-time registration functions }
procedure RIRegister_TQueryUniDirectionalGS(CL: TPSRuntimeClassImporter);
procedure RIRegister_gsDButils_Routines(S: TPSExec);
*)


implementation


uses
   db
  ,dbtables
  ,bde
  ,gsDButils
  ;
 
 
{ compile-time importer function }
(*----------------------------------------------------------------------------
 Sometimes the CL.AddClassN() fails to correctly register a class, 
 for unknown (at least to me) reasons
 So, you may use the below RegClassS() replacing the CL.AddClassN()
 of the various SIRegister_XXXX calls 
 ----------------------------------------------------------------------------*)
function RegClassS(CL: TPSPascalCompiler; const InheritsFrom, Classname: string): TPSCompileTimeClass;
begin
  Result := CL.FindClass(Classname);
  if Result = nil then
    Result := CL.AddClassN(CL.FindClass(InheritsFrom), Classname)
  else Result.ClassInheritsFrom := CL.FindClass(InheritsFrom);
end;
  
  
(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TQueryUniDirectionalGS(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TQuery', 'TQueryUniDirectionalGS') do
  with CL.AddClassN(CL.FindClass('TQuery'),'TQueryUniDirectionalGS') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_gsDButils(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Procedure OpenQueryUnidirectional( AQry : TQuery; var AClosedBecauseEmpty : boolean)');
 CL.AddDelphiFunction('Function CloneOpenDataBase( AOwner : TComponent; AMasterDB : TDatabase) : TDataBase');
 CL.AddDelphiFunction('Procedure CloneFieldListToDataSet( ADataSetFrom, ADataSetTo : TDataSet)');
  SIRegister_TQueryUniDirectionalGS(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TQueryUniDirectionalGS(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TQueryUniDirectionalGS) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_gsDButils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@OpenQueryUnidirectional, 'OpenQueryUnidirectional', cdRegister);
 S.RegisterDelphiFunction(@CloneOpenDataBase, 'CloneOpenDataBase', cdRegister);
 S.RegisterDelphiFunction(@CloneFieldListToDataSet, 'CloneFieldListToDataSet', cdRegister);
  RIRegister_TQueryUniDirectionalGS(CL);
end;

 
 
{ TPSImport_gsDButils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_gsDButils.CompOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_gsDButils.ExecOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_gsDButils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_gsDButils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_gsDButils.CompileImport2(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_gsDButils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_gsDButils(ri);
  RIRegister_gsDButils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_gsDButils.ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  { nothing } 
end;
 
 
end.
