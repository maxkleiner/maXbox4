program MemoryMaxMain3;
{ 
  Project  : maXbox Memory Game
  Unit Name: maXGame 185_memorymax2.txt
  Purpose  : Find all the 2 same Picture  
  Date  : 03/02/2011  -  22:54:56 , #locs=631
  History  : translate and integrate from delphi to mX3
           : include linking stringGrid and drawGrid 
           : 2.4.2015 set for tablet with one click reset
           : 1.4.2020 get jpegs from internet
  ToDo     : timer with statistic of 4 players and stop scrolling
           : get picture from an preload imagelist not each time load from file 
 }          
// *********************************
// array is 5 * 8 = 40  (0..4)*(0..7)
// pictures are 37 files

const TotalPictures = 37;
      CROW = 4;
      CCOL = 7;
      MAXFOUND = 20;
      MAXMEM = 40;
      DECK = 'deck2.bmp';
      EMPTYCARD = 'empty.bmp';
      FILE_NAME = 'memory4.ini';     
      RESPATH ='pictures2\';         //path to memory --> examples
      SELDIRHELP = 1000;
      
type  TMap = array[0..CROW] of integer;     
      TDisplay = array[0..CROW] of integer;     
      TShowCard = array[0..CROW] of integer;     
var  
    Bmp: TBitmap;
    jpeg:TJPegImage;
    Imagelist1: TImagelist;
    Map: array[0..CCOL] of TMap;
    Display: array[0..CCOL] of TDisplay;
    ShowCard: array[0..CCOL] of TShowCard;
    FirstShot, AllCards, Play: Boolean;
    mForm: TForm;
    shotsLbl: TLabel;
    DrawGrid1: TDrawGrid;  
    StGames, StShots, StSeconds, StScore,
    Seconds, Shots, Score, Founds, FSValue,
    Col1, Row1, Col2, Row2, Turn: integer;
    MIni: TIniFile;
    Imagefile, DeckColor, Wow, Name1, Name2: String;
    TopName, TopScore, TopSeconds, TopShots: Array[1..5] of String;
    S_clickstate: byte;

{procedure Exit1Click(Sender: TObject);
begin
  Close;
end;}

{************* Loadnew ***********}
procedure TForm1loadnew(Fname:string);
{Load image from filename  "Fname"  into Image2 and bitmap B1}
var
  jpeg: TJPegImage;
  image2: TImage;
  s:string;
begin
  s:=uppercase(extractfileext(fname));
  if s='.JPG' then begin
    jpeg:=TJPegImage.create;
    jpeg.loadfromfile(fname);
    image2.picture.bitmap.assign(jpeg);
    jpeg.free;
    bmp.assign(jpeg)
  end
  else Image2.picture.LoadFromFile(Fname);
  image2.update;
  //PicLbl.Caption:=extractfilename(FName);
  DrawGrid1.Canvas.Draw(10, 20, jpeg);
  //Cleargrid3;
end;

procedure loadjpegimagelist;
var i,j: integer;
begin

 for i:= 1 to 40 do begin
    if  i < 10 then 
               Imagefile:= ('pic0'+ IntToStr(i)+'.jpg') else
               Imagefile:= ('pic'+ IntToStr(i)+'.jpg') ;
        
       //if Pos('0', Imagefile) > 0 then Delete(Imagefile,Pos('0', Imagefile),1); 
       //writeln(imagefile)
       jpeg.loadfromFile(ExePath+RESPATH+Imagefile)
       //writeln(itoa(i)+' '+itoa(jpeg.CompressionQuality ))
    end;   
end;  


var
  BMP_MAGIC_WORD : integer; // ord('M') shl 8 or ord('B');

function GetBitmapDimensions(const FileName: string; out Width,
  Height: integer): boolean;
var
  f: TFileStream;
  //header: TBitmapFileHeader;
  info: TBitmapInfoHeader;
begin
  
  BMP_MAGIC_WORD:=  ord('M') shl 8 or ord('B');
  result := false;
  f := TFileStream.Create(FileName, fmOpenRead);
  try
    //if f.Read(header, sizeof(header)) <> sizeof(header) then Exit;
    //if header.bfType <> BMP_MAGIC_WORD then Exit;
    //if f.Read(info, sizeof(info)) <> sizeof(info) then Exit;
    Width := info.biWidth;
    //Height := abs(info.biHeight);
    result := true;
  finally
    f.Free;
  end;
end;     

procedure TForm1Load1Click(Sender: TObject);
var
openDialog : TOpenDialog;
dir :string;
MyPicture :TPicture;
currentimage :Tbitmap;
zImage1: TPicture;
image : integer;
clTrans : TColor;
begin
  Image := 0 ;
  //lets user select a dir
 SelectDirectory(Dir, [sdAllowCreate, sdPerformCreate, sdPrompt],SELDIRHELP);
  myPicture :=Tpicture.Create;
  currentimage := TBitmap.Create;
//keeps adding images as long as the file path exsist.
//thus comic pages should be renumbed to 0-XX
  while FileExists(Dir+'\'+inttostr(image)+'.jpg') do begin
   try
    MyPicture.LoadFromFile(Dir+'\'+inttostr(image)+'.jpg');   //load image to jpg holder
    currentimage.Width := mypicture.Width;       //set width same as jpg
    currentimage.Height:= mypicture.Height;      //set height same as jpg
    currentimage.Canvas.Draw(0, 0, myPicture.Graphic);     //draw jpg on bmp
    clTrans:=currentimage.TransparentColor;           //unknown if needed?
    //Imagelist1.Width := currentimage.Width;
    //imagelist1.Height := currentimage.Height;
    Imagelist1.Addmasked(Currentimage,clTrans);     //add to imagelist
   finally
    image := image +1;                          //add one so it adds next page
   end;
 end;
 ImageList1.GetBitmap(0,zImage1.Bitmap);
 mypicture.Free;
 currentimage.Free;
end;

procedure TForm2LoadImages(const Dir: string);
var
  i: Integer;
  CurFileName: string;
  JpgIn: TJPEGImage;
  BmpOut: TBitmap;
  Image1: TImage;
begin
  i := 1;
  while True do begin
    CurFileName := Format('%s%d.jpg', 
                          [IncludeTrailingPathDelimiter(Dir), i]);
    if not FileExists(CurFileName) then
      Break;
    JpgIn := TJPEGImage.Create;
    try
      JpgIn.LoadFromFile(CurFileName);

      // If you haven't initialized your ImageList width and height, it
      // defaults to 16 x 16; we can set it here, if all the images are
      // the same dimensions.
      //if (ImageList1.Count = 0) then
        //ImageList1.SetSize(JpgIn.Width, JpgIn.Height);

      BmpOut := TBitmap.Create;
      try
        BmpOut.Assign(JpgIn);
        ImageList1.Add(BmpOut, nil);
      finally
        BmpOut.Free;
      end;
    finally
      JpgIn.Free;
    end;
    Inc(i);
  end;
  if ImageList1.Count > 0 then begin
    BmpOut := TBitmap.Create;
    try
      ImageList1.GetBitmap(0, BmpOut);
      Image1.Picture.Assign(BmpOut);
    finally
      BmpOut.Free;
    end;
  end;
end;

procedure Save_bitmap_as_jpeg_file_mc(bitmap: TBitmap; FileName: string);
var
  jp: TJpegImage;  //Requires the "jpeg" unit added to "uses" clause.
  ext : string;
begin
  ext := ExtractFileExt(FileName) ;
  if SameText(ext, '.jpg') or SameText(ext, '.jpeg') then begin
     // code from help "TGraphic.SaveToFile - Create, Assign, SaveToFile example"
    jp := TJpegImage.Create; // default quality = 90 out of 100
    try
      jp.Assign(Bitmap);
      jp.CompressionQuality := 100; // the maximum supported value
      jp.SaveToFile(FileName);
    finally
      jp.Free;
    end;
  end;
end;

procedure Bmp2Jpeg(const BmpFileName, JpgFileName: string);
var
  Bmp: TBitmap;
  Jpg: TJPEGImage;
begin
  Bmp := TBitmap.Create;
  Jpg := TJPEGImage.Create;
  try
    Bmp.LoadFromFile(BmpFileName);
    Jpg.Assign(Bmp);
    Jpg.SaveToFile(JpgFileName);
  finally
    Jpg.Free;
    Bmp.Free;
  end;
end;

procedure Jpeg2Bmp(const BmpFileName, JpgFileName: string);
var
  Bmp: TBitmap;
  Jpg: TJPEGImage;
begin
  Bmp := TBitmap.Create;
  Jpg := TJPEGImage.Create;
  try
    Jpg.LoadFromFile(JpgFileName);
    Bmp.Assign(Jpg);
    Bmp.SaveToFile(BmpFileName);
  finally
    Jpg.Free;
    Bmp.Free;
  end;
end;

procedure ShowImageFromStream(AImage: TImage; AData: TStream);
var JPEGImage: TJPEGImage;
begin
  AData.Position := 0;
  JPEGImage := TJPEGImage.Create;
  try
    JPEGImage.LoadFromStream(AData);
    AImage.Picture.Assign(JPEGImage);
  finally
    JPEGImage.Free;
  end;
end;

   //From Simple HTML page scraping with Delphi 
  function Download_HTM(const sURL, sLocalFileName:string): boolean; 
    begin 
      Result:=True; 
      with TDownLoadURL.Create(nil) do 
      try 
        URL:=sURL; 
        Filename:=sLocalFileName; 
        try 
          ExecuteTarget(nil); 
        except 
          Result:=False 
        end; 
      finally 
        Free; 
      end; 
    end;    
    
    
 Const                   //ADPNEWHOTURL='http://acme/picture_';   
    ADPNTURL= 'https://picsum.photos/seed/';
    // UrlPictureLookupInfo = 'https://picsum.photos/seed/%d/%d/%d';
    
 procedure TForm1Button1ClickACMEDownload(Sender: TObject); 
   var 
      sPathToF : String; 
      iIndex : Integer; 
      sPictureFileName, sPathToPictures : String; 
    begin 
      sPathToPictures:= ExtractFilePath(Application.ExeName)+ RESPATH; 
      
      if not DirectoryExists(sPathToPictures) then 
        CreateDir(sPathToPictures); 
      
      SetCurrentDir(sPathToPictures); 
      
      For iIndex := 1 to 50 do begin 
        //sPictureFileName:= 'picture_' + Format('%.2d', [iIndex]) + '.jpg'; 
        sPictureFileName:= 'pic' + Format('%.2d', [iIndex]) + '.jpg'; 
     
        writeln( 'Source = ' + ADPNTURL + IntToStr(iIndex) + 
                          ' Target = ' + sPictureFileName); 
        if Not Download_HTM(ADPNTURL+ IntToStr(iIndex)+'/105/105',
                                                sPictureFileName) then begin 
          ShowMessage('Error in HTML file download ' + IntToStr(iIndex)); 
          Exit; 
        end; 
        Application.ProcessMessages; 
      end; 
    end; 
    
 
procedure ShowAllCards1Click(Sender: TObject);
var i,j : integer;
begin
  for i:= 0 to CCOL do
   for j:= 0 to CROW do
    ShowCard[i][j]:= 1;
  AllCards:= True;
  Play:= True;
  DrawGrid1.Repaint;
end;

procedure New1Click(Sender: TObject);
var i,j,k,num,maxc,r: Integer;
    CanProceed: Boolean;
    a: array [1..MAXFOUND] of Integer;
    c,d: array [1..MAXMEM] of Integer;
begin
  Seconds:= 0;
  Shots:= 0;
  Founds:= 0;
  Score:= 0;
  {TimeLabel.Caption:= 'Seconds: 0';
   ScoreLabel.Caption:= 'Score: 0';}
  ShotsLbl.Caption:= 'Total Trial Hits: 0';
  FirstShot:= True;
  AllCards:= False;
  Play:= True;
  for i:= 0 to CCOL do
  for j:= 0 to CROW do begin
    Display[i][j]:= 1;
    ShowCard[i][j]:= 0;
  end;
  DrawGrid1.Repaint;
  //creation of array of cards:
  //step 1 - random selection of 25 cards from the total
  for j:= 1 to MAXFOUND do begin
    repeat
      num:= Random(TotalPictures)+1;
      CanProceed:= True;
      for i:= 1 to j do
        if a[i]= num then begin
          CanProceed:= False;
          Break; //exit the loop
        end;
    until CanProceed;
   a[j]:= num;
  end;
  //step 2 - creation of a 40 cards array
  for i:= 1 to MAXFOUND do begin
    c[i]:= a[i];
    c[i+MAXFOUND]:= a[i];
  end;
  // step 3 - random sort of the array
  maxc:= MAXMEM;
  for i:= 1 to MAXMEM do begin
    r:= random(maxc)+1;
    d[i]:= c[r];
    for k:= r to (maxc-1)  // moving back c[] elements
      do c[k]:= c[k+1];
    Dec(maxc);
  end;
  // step 4 - creation of a two-dimension array (Map)
  // d[k] has each number from two same number pair
  k:= 1;
  for i:= 0 to CCOL do
    for j:= 0 to CROW do begin
      Map[i][j]:= d[k];
      write(inttostr(d[k])+' ')
      Inc(k);
    end;
end;


procedure DrawGrid1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var Col, Row: Integer;
begin
  DrawGrid1.MouseToCell(X, Y, Col, Row);
  // if left button is pressed on an active card
  if (Button = mbLeft) and (Display[Col][Row] = 1) and Play then begin
    ShowCard[Col][Row]:= 1;
    // second shot
    if (not FirstShot) and ((Col<>Col1) or (Row<>Row1))then begin
      Play:= False;
      Row2:= Row;
      Col2:= Col;
      FirstShot:= True;
      // same cards
      if Map[Col][Row] = FSValue then begin
        Inc(Founds);
        // end of game
        if Founds = MAXFOUND then begin
          Inc(Shots);
          ShotsLbl.Caption:= 'Total hits: '+IntToStr(Shots);
          PlaySound(ExePath+RESPATH+'bonus.wav',0,1);
          ShowMessage('End of mgame!'+#13+'Score: '+IntToStr(Shots));
          // statistics
          Inc(StGames);
          Play:= true;
          StScore:= StScore+Score;
          StShots:= StShots+Shots;
          Display[Col1][Row1]:= 0;
          Display[Col2][Row2]:= 0;
        end;
        Dec(Turn);
       PlaySound(ExePath+RESPATH+'tick.wav',0,1);
      end;
    end
    // first shot
    else begin
    // fsvalue to check a hit
      FSValue:= Map[Col][Row];
      Col1:= Col;
      Row1:= Row;
      FirstShot:= False;
    end;
  end
  // if right button is pressed after 2nd shot
  else if (Button=mbRight) and FirstShot and (not Play) and not AllCards then begin
    Inc(Shots);
    Play:= true;
    ShotsLbl.Caption:= 'Total hits: '+IntToStr(Shots);
    //test of all cards
    ShowCard[Col1][Row1]:= 0;
    ShowCard[Col2][Row2]:= 0;
    // when hit then dont show the two cards
    if Map[Col1][Row1] = Map[Col2][Row2] then begin
      Display[Col1][Row1]:= 0;
      Display[Col2][Row2]:= 0;
    end;
  end;
  DrawGrid1.Repaint;
end;

function removeLeadingZeros(const Value: string): string;
var
  i: Integer;
begin
  for i := 1 to Length(Value) do
    if Value[i]<>'0' then begin
      Result := Copy(Value, i, MaxInt);
      exit;
    end;
  Result := '';
end;

function RemoveLeadingZeros2(const aValue: String): String;
begin
  Result:= IntToStr(StrToIntDef(aValue,0));
end;


procedure DrawGrid1DrawCell(Sender: TObject; Col, Row: Integer;
  Rect: TRect; State: TGridDrawState);
begin
  // drawing the correct card...
  if Display[Col][Row] = 1 then begin
    if ShowCard[Col][Row] = 1 then begin
        //Imagefile:= ('pic'+ IntToStr(Map[Col][Row])+'.jpg');
        if length(IntToStr(Map[Col][Row])) = 1 then 
               Imagefile:= ('pic0'+ IntToStr(Map[Col][Row])+'.jpg') else
               Imagefile:= ('pic'+ IntToStr(Map[Col][Row])+'.jpg') ;
        
       //if Pos('0', Imagefile) > 0 then Delete(Imagefile,Pos('0', Imagefile),1); 
       //writeln(imagefile)
       jpeg.loadfromFile(ExePath+RESPATH+Imagefile)
      
    //jpeg.loadfromfile('C:\maXbox\maxbox3\maxbox3\maXbox3\pictures2\pic16.jpg');
    end else
     jpeg.loadfromFile(ExePath+RESPATH+'pic50.jpg')  //DECK  pic42
  end  //...or no card.
  else 
    jpeg.loadfromFile(ExePath+RESPATH+'pic49.jpg');      //EMPTYCARD
  DrawGrid1.Canvas.Draw(Rect.Left, Rect.Top, jpeg);
  {Drawgrid1.MouseToCell(X, Y, Column, Row);
  StringGrid1.Cells[Column, Row] := 'Col ' + IntToStr(Column) +
    ',Row ' + IntToStr(Row);  }
end;

procedure FormClick(Sender: TObject);
begin
  inc(S_clickstate)
  if S_clickstate = 2 then begin
    S_clickstate:= 0;
    //    DrawGrid1MouseUp
    if FirstShot and (not Play) and not AllCards then begin
       Inc(Shots);
       Play:= true;
       ShotsLbl.Caption:= 'Total hits: '+IntToStr(Shots);
       //test of all cards
       ShowCard[Col1][Row1]:= 0;
       ShowCard[Col2][Row2]:= 0;
       // when hit then dont show the two cards
      if Map[Col1][Row1] = Map[Col2][Row2] then begin
        Display[Col1][Row1]:= 0;
        Display[Col2][Row2]:= 0;
     end;
  end;
  DrawGrid1.Repaint;
  end
end;  


procedure FormClose(Sender: TObject; var Action: TCloseAction);
var i: integer;
begin
  Bmp.Free;
  jpeg.Free;
  DrawGrid1.Free;
  with MIni do begin
    WriteString('Stat', 'StGames', IntToStr(StGames));
    WriteString('Stat', 'StShots', IntToStr(StShots));
    WriteString('Stat', 'StSeconds', IntToStr(StSeconds));
    WriteString('Stat', 'StScore', IntToStr(StScore));
    WriteString('Deck','Current', DeckColor);
    for i:= 1 to 5 do begin
      WriteString('Best players','TopName'+IntToStr(i),TopName[i]);
      WriteString('Best players','TopScore'+IntToStr(i),TopScore[i]);
      WriteString('Best players','TopSeconds'+IntToStr(i),TopSeconds[i]);
      WriteString('Best players','TopShots'+IntToStr(i),TopShots[i]);
    end;
    WriteString('Best max players','Wow',Wow);
    Free;
  end;
end;


procedure FormCreate(Sender: TObject);
var i: integer;
    file_path: string;
begin
  // INI file
  //GetMem(WinDir, 144);
  //GetWindowsDirectory(WinDir, 144);
  //StrCat(WinDir, '\Memory.ini');
  if not FileExists(FILE_NAME) then begin
    AssignFileWrite(memo2.text, FILE_NAME);
  end;
  S_clickstate:= 0;
  file_path:= extractFilePath(application.ExeName) +FILE_NAME;
  MIni:= TIniFile.Create(file_path);
  with MIni do begin
    // statistics vars
    StGames:= StrToInt(ReadString('Stat','StGames','0'));
    StScore:= StrToInt(ReadString('Stat','StScore','0'));
    StShots:= StrToInt(ReadString('Stat','StShots','0'));
    StSeconds:= StrToInt(ReadString('Stat','StSeconds','0'));
    DeckColor:= ReadString('Deck','Current','Blue');
    for i:= 1 to 5 do begin
      TopName[i]:= ReadString('Best players','TopName'+IntToStr(i),'Noname');
      TopScore[i]:= ReadString('Best players','TopScore'+IntToStr(i),'0');
      TopSeconds[i]:= ReadString('Best players','TopSeconds'+IntToStr(i),'0');
      TopShots[i]:= ReadString('Best players','TopShots'+IntToStr(i),'0');
    end;
    Wow:= ReadString('Best players','Wow','I like Super Memory!');
  end;
  //FreeMem(WinDir, 144);
  //startup initializations
  Randomize;
  Bmp:= TBitmap.Create;
  jpeg:=TJPegImage.create;
  mForm:= TForm.create(self);
  shotsLbl:= TLabel.create(mForm);
  with mForm do begin
    FormStyle:= fsStayOnTop;
    Position:= poScreenCenter;
    color:= clred;
    Caption:= 'MemoryMax in maXbox4: open left, close right mouse click';
    Width:= 900;
    Height:= 650;
    BorderStyle:= bsDialog;
    onClose:= @FormClose;
    Show
  end;
  with shotsLbl do begin
    parent:= mForm;
    setbounds(30,600,180,20);
    font.size:= 12;
    font.color:= clyellow;
    caption:= 'hits:';
  end;  
  drawGrid1:= TDrawGrid.Create(self);
  drawGrid1.parent:= mForm;
  with drawGrid1 do begin
    defaultcolwidth:= 104;
    defaultrowheight:= 104;
    height:= 560;
    width:= 900;       //1094
    colcount:= CCOL+1;  //buggg solved!!!
    rowcount:= CROW+8;
    top:= 20;
    borderStyle:= bsNone;
    GridLineWidth:= 8;
    scrollbars:= false;
    ondrawcell:= @DrawGrid1DrawCell;
    onMouseUp:= @DrawGrid1MouseUp;
    onclick:= @FormClick;
  end;
  New1Click(Self);
end;

begin //@main
 
 // if isInternet then TForm1Button1ClickACMEDownload(self);
 //loadjpegimagelist;
  FormCreate(self)
  //ShowAllCards1Click(self)
  //loadjpegimagelist;
End.
----------------------------------------------------

new testbox in 4.1:

    GetWindowsDirectory(WinDir, 144);
    newtemplate.txt  --> ask if file exists !
 
  function traingifSetup()
{
  createScene("SC01");
  createConsist("CST1", "I_FS_VT_ALn460-448a.gif");
  placeStaticStretch("up_bl.gif", 15, Top, 1);
  createTrack("TRK1", 15, 3);
  createTrain("TRN1", "CST1", Left, 20, 10);

  createScene("SC03");
  createConsist("CST3", "I_FS_VT_TEE442-60-448r.gif");
  placeStaticStretch("up_bl.gif", 15, Top, 1);
  placeStaticRepeat("FS_Cat3F.gif", 1, Bottom, 4);
  createTrack("TRK3", 15, 3);
  createTrain("TRN3", "CST3", Left, 40, 10);

  createScene("SC04");
  createConsist("CST4", "I_FS_VT_TEE442-448b+ETR220.gif");
  placeStaticStretch("up_bl.gif", 15, Top, 1);
  placeStaticRepeat("FS_Cat2N.gif", 1, Bottom, 4);
  createTrack("TRK4", 15, 3);
  createTrain("TRN4", "CST4", Right, 50, 10);

  createScene("SC06");
  createConsist("CST6", "I_FS_VT_TEE442-448+2xALn990.gif");
  placeStaticStretch("up_bl.gif", 15, Top, 1);
  createTrack("TRK6", 15, 3);
  createTrain("TRN6", "CST6", Left, 20, 10);
}




