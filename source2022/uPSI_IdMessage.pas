unit uPSI_IdMessage;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdMessage = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdMessage(CL: TPSPascalCompiler);
procedure SIRegister_TIdMessageParts(CL: TPSPascalCompiler);
procedure SIRegister_TIdText(CL: TPSPascalCompiler);
procedure SIRegister_TIdAttachment(CL: TPSPascalCompiler);
procedure SIRegister_TIdMessagePart(CL: TPSPascalCompiler);
procedure SIRegister_TIdMIMEBoundary(CL: TPSPascalCompiler);
procedure SIRegister_IdMessage(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdMessage(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdMessageParts(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdText(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdAttachment(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdMessagePart(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdMIMEBoundary(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdMessage(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdBaseComponent
  ,IdException
  ,IdEMailAddress
  ,IdHeaderList
  ,IdCoderHeader
  ,IdMessage
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdMessage]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdMessage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdBaseComponent', 'TIdMessage') do
  with CL.AddClassN(CL.FindClass('TIdBaseComponent'),'TIdMessage') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Procedure AddHeader( const AValue : string)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure ClearBody');
    RegisterMethod('Procedure ClearHeader');
    RegisterMethod('Function GenerateHeader : TIdHeaderList');
    RegisterMethod('Function GetUseNowForDate : Boolean');
    RegisterMethod('Procedure LoadFromFile( const AFileName : string; const AHeadersOnly : Boolean)');
    RegisterMethod('Procedure LoadFromStream( AStream : TStream; const AHeadersOnly : Boolean)');
    RegisterMethod('Procedure ProcessHeaders');
    RegisterMethod('Procedure SaveToFile( const AFileName : string; const AHeadersOnly : Boolean)');
    RegisterMethod('Procedure SaveToStream( AStream : TStream; const AHeadersOnly : Boolean)');
    RegisterProperty('Flags', 'TIdMessageFlagsSet', iptrw);
    RegisterProperty('IsEncoded', 'Boolean', iptrw);
    RegisterProperty('MsgId', 'string', iptrw);
    RegisterProperty('Headers', 'TIdHeaderList', iptrw);
    RegisterProperty('MessageParts', 'TIdMessageParts', iptr);
    RegisterProperty('MIMEBoundary', 'TIdMIMEBoundary', iptrw);
    RegisterProperty('UID', 'String', iptrw);
    RegisterProperty('AttachmentEncoding', 'string', iptrw);
    RegisterProperty('Body', 'TStrings', iptrw);
    RegisterProperty('BccList', 'TIdEmailAddressList', iptrw);
    RegisterProperty('CharSet', 'string', iptrw);
    RegisterProperty('CCList', 'TIdEmailAddressList', iptrw);
    RegisterProperty('ContentType', 'string', iptrw);
    RegisterProperty('ContentTransferEncoding', 'string', iptrw);
    RegisterProperty('ContentDisposition', 'string', iptrw);
    RegisterProperty('Date', 'TDateTime', iptrw);
    RegisterProperty('DeleteTempFiles', 'Boolean', iptrw);
    RegisterProperty('Encoding', 'TIdMessageEncoding', iptrw);
    RegisterProperty('ExtraHeaders', 'TIdHeaderList', iptrw);
    RegisterProperty('From', 'TIdEmailAddressItem', iptrw);
    RegisterProperty('NewsGroups', 'TStrings', iptrw);
    RegisterProperty('NoEncode', 'Boolean', iptrw);
    RegisterProperty('NoDecode', 'Boolean', iptrw);
    RegisterProperty('Organization', 'string', iptrw);
    RegisterProperty('Priority', 'TIdMessagePriority', iptrw);
    RegisterProperty('ReceiptRecipient', 'TIdEmailAddressItem', iptrw);
    RegisterProperty('Recipients', 'TIdEmailAddressList', iptrw);
    RegisterProperty('References', 'string', iptrw);
    RegisterProperty('ReplyTo', 'TIdEmailAddressList', iptrw);
    RegisterProperty('Subject', 'string', iptrw);
    RegisterProperty('Sender', 'TIdEmailAddressItem', iptrw);
    RegisterProperty('UseNowForDate', 'Boolean', iptrw);
    RegisterProperty('OnInitializeISO', 'TIdInitializeIsoEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdMessageParts(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOwnedCollection', 'TIdMessageParts') do
  with CL.AddClassN(CL.FindClass('TOwnedCollection'),'TIdMessageParts') do
  begin
    RegisterMethod('Function Add : TIdMessagePart');
    RegisterMethod('Procedure CountParts');
    RegisterMethod('Constructor Create( AOwner : TPersistent)');
    RegisterProperty('AttachmentCount', 'integer', iptr);
    RegisterProperty('AttachmentEncoding', 'string', iptrw);
    RegisterProperty('Items', 'TIdMessagePart Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterProperty('MessageEncoderInfo', 'TObject', iptr);
    RegisterProperty('RelatedPartCount', 'integer', iptr);
    RegisterProperty('TextPartCount', 'integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdText(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdMessagePart', 'TIdText') do
  with CL.AddClassN(CL.FindClass('TIdMessagePart'),'TIdText') do begin
    RegisterMethod('Constructor Create( Collection : TIdMessageParts; ABody : TStrings)');
     RegisterMethod('Assign(Source: TPersistent);');
    RegisterProperty('Body', 'TStrings', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdAttachment(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdMessagePart', 'TIdAttachment') do
  with CL.AddClassN(CL.FindClass('TIdMessagePart'),'TIdAttachment') do begin
    RegisterMethod('Constructor Create( Collection : TIdMessageParts; const AFileName : TFileName)');
    RegisterMethod('Assign(Source: TPersistent);');
    RegisterMethod('Procedure Encode( ADest : TStream)');
    RegisterMethod('Function SaveToFile( const AFileName : TFileName) : Boolean');
    RegisterProperty('ContentDisposition', 'string', iptrw);
    RegisterProperty('DeleteTempFile', 'Boolean', iptrw);
    RegisterProperty('FileName', 'TFileName', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdMessagePart(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TIdMessagePart') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TIdMessagePart') do begin
    RegisterMethod('Constructor Create(Collection: TCollection)');
    RegisterMethod('Assign(Source: TPersistent);');
    RegisterProperty('Boundary', 'String', iptrw);
    RegisterProperty('BoundaryBegin', 'Boolean', iptrw);
    RegisterProperty('BoundaryEnd', 'Boolean', iptrw);
    RegisterProperty('IsEncoded', 'Boolean', iptr);
    RegisterProperty('OnGetMessagePartStream', 'TOnGetMessagePartStream', iptrw);
    RegisterProperty('StoredPathName', 'TFileName', iptrw);
    RegisterProperty('Headers', 'TIdHeaderList', iptrw);
    RegisterProperty('ContentID', 'string', iptrw);
    RegisterProperty('ContentTransfer', 'string', iptrw);
    RegisterProperty('ContentType', 'string', iptrw);
    RegisterProperty('ExtraHeaders', 'TIdHeaderList', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdMIMEBoundary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TIdMIMEBoundary') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TIdMIMEBoundary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function FindBoundary( AContentType : string) : string');
    RegisterMethod('Procedure Push( ABoundary : string)');
    RegisterMethod('Procedure Pop');
    RegisterMethod('Procedure Clear');
    RegisterProperty('Boundary', 'string', iptr);
    RegisterProperty('NewBoundary', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdMessage(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TIdMessagePriority', '( mpHighest, mpHigh, mpNormal, mpLow, mpLo'
   +'west )');
 //CL.AddConstantN('ID_MSG_NODECODE','Boolean')BoolToStr( False);
 //CL.AddConstantN('ID_MSG_USENOWFORDATE','Boolean')BoolToStr( False);
 //CL.AddConstantN('ID_MSG_PRIORITY','').SetString( mpNormal);
  CL.AddTypeS('TOnGetMessagePartStream', 'Procedure ( AStream : TStream)');
  SIRegister_TIdMIMEBoundary(CL);
  CL.AddTypeS('TIdMessageFlags', '( mfAnswered, mfFlagged, mfDeleted, mfDraft, '
   +'mfSeen, mfRecent )');
  CL.AddTypeS('TIdMessageFlagsSet', 'set of TIdMessageFlags');
  SIRegister_TIdMessagePart(CL);
  //CL.AddTypeS('TIdMessagePartClass', 'class of TIdMessagePart');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIdMessageParts');
  SIRegister_TIdAttachment(CL);
  SIRegister_TIdText(CL);
  SIRegister_TIdMessageParts(CL);
  CL.AddTypeS('TIdMessageEncoding', '( meMIME, meUU )');
  //CL.AddTypeS('TIdInitializeIsoEvent', 'Procedure ( var VTransferHeader : TTran'
  // +'sfer; var VHeaderEncoding : Char; var VCharSet : string)');

  SIRegister_TIdMessage(CL);

  CL.AddTypeS('TIdMessageEvent', 'Procedure ( ASender : TComponent; var AMsg : '
   +'TIdMessage)');
  CL.AddTypeS('TIdStringMessageEvent', 'Procedure ( ASender : TComponent; const'
   +' AString : String; var AMsg : TIdMessage)');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdMessageException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdCanNotCreateMessagePart');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdTextInvalidCount');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdMessageCannotLoad');
 CL.AddConstantN('RSIdMessageCannotLoad','String').SetString( 'Cannot load message from file %s');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdMessageOnInitializeISO_W(Self: TIdMessage; const T: TIdInitializeIsoEvent);
begin Self.OnInitializeISO := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageOnInitializeISO_R(Self: TIdMessage; var T: TIdInitializeIsoEvent);
begin T := Self.OnInitializeISO; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageUseNowForDate_W(Self: TIdMessage; const T: Boolean);
begin Self.UseNowForDate := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageUseNowForDate_R(Self: TIdMessage; var T: Boolean);
begin T := Self.UseNowForDate; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageSender_W(Self: TIdMessage; const T: TIdEmailAddressItem);
begin Self.Sender := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageSender_R(Self: TIdMessage; var T: TIdEmailAddressItem);
begin T := Self.Sender; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageSubject_W(Self: TIdMessage; const T: string);
begin Self.Subject := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageSubject_R(Self: TIdMessage; var T: string);
begin T := Self.Subject; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageReplyTo_W(Self: TIdMessage; const T: TIdEmailAddressList);
begin Self.ReplyTo := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageReplyTo_R(Self: TIdMessage; var T: TIdEmailAddressList);
begin T := Self.ReplyTo; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageReferences_W(Self: TIdMessage; const T: string);
begin Self.References := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageReferences_R(Self: TIdMessage; var T: string);
begin T := Self.References; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageRecipients_W(Self: TIdMessage; const T: TIdEmailAddressList);
begin Self.Recipients := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageRecipients_R(Self: TIdMessage; var T: TIdEmailAddressList);
begin T := Self.Recipients; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageReceiptRecipient_W(Self: TIdMessage; const T: TIdEmailAddressItem);
begin Self.ReceiptRecipient := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageReceiptRecipient_R(Self: TIdMessage; var T: TIdEmailAddressItem);
begin T := Self.ReceiptRecipient; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePriority_W(Self: TIdMessage; const T: TIdMessagePriority);
begin Self.Priority := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePriority_R(Self: TIdMessage; var T: TIdMessagePriority);
begin T := Self.Priority; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageOrganization_W(Self: TIdMessage; const T: string);
begin Self.Organization := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageOrganization_R(Self: TIdMessage; var T: string);
begin T := Self.Organization; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageNoDecode_W(Self: TIdMessage; const T: Boolean);
begin Self.NoDecode := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageNoDecode_R(Self: TIdMessage; var T: Boolean);
begin T := Self.NoDecode; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageNoEncode_W(Self: TIdMessage; const T: Boolean);
begin Self.NoEncode := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageNoEncode_R(Self: TIdMessage; var T: Boolean);
begin T := Self.NoEncode; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageNewsGroups_W(Self: TIdMessage; const T: TStrings);
begin Self.NewsGroups := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageNewsGroups_R(Self: TIdMessage; var T: TStrings);
begin T := Self.NewsGroups; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageFrom_W(Self: TIdMessage; const T: TIdEmailAddressItem);
begin Self.From := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageFrom_R(Self: TIdMessage; var T: TIdEmailAddressItem);
begin T := Self.From; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageExtraHeaders_W(Self: TIdMessage; const T: TIdHeaderList);
begin Self.ExtraHeaders := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageExtraHeaders_R(Self: TIdMessage; var T: TIdHeaderList);
begin T := Self.ExtraHeaders; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageEncoding_W(Self: TIdMessage; const T: TIdMessageEncoding);
begin Self.Encoding := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageEncoding_R(Self: TIdMessage; var T: TIdMessageEncoding);
begin T := Self.Encoding; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageDeleteTempFiles_W(Self: TIdMessage; const T: Boolean);
begin Self.DeleteTempFiles := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageDeleteTempFiles_R(Self: TIdMessage; var T: Boolean);
begin T := Self.DeleteTempFiles; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageDate_W(Self: TIdMessage; const T: TDateTime);
begin Self.Date := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageDate_R(Self: TIdMessage; var T: TDateTime);
begin T := Self.Date; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageContentDisposition_W(Self: TIdMessage; const T: string);
begin Self.ContentDisposition := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageContentDisposition_R(Self: TIdMessage; var T: string);
begin T := Self.ContentDisposition; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageContentTransferEncoding_W(Self: TIdMessage; const T: string);
begin Self.ContentTransferEncoding := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageContentTransferEncoding_R(Self: TIdMessage; var T: string);
begin T := Self.ContentTransferEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageContentType_W(Self: TIdMessage; const T: string);
begin Self.ContentType := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageContentType_R(Self: TIdMessage; var T: string);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageCCList_W(Self: TIdMessage; const T: TIdEmailAddressList);
begin Self.CCList := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageCCList_R(Self: TIdMessage; var T: TIdEmailAddressList);
begin T := Self.CCList; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageCharSet_W(Self: TIdMessage; const T: string);
begin Self.CharSet := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageCharSet_R(Self: TIdMessage; var T: string);
begin T := Self.CharSet; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageBccList_W(Self: TIdMessage; const T: TIdEmailAddressList);
begin Self.BccList := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageBccList_R(Self: TIdMessage; var T: TIdEmailAddressList);
begin T := Self.BccList; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageBody_W(Self: TIdMessage; const T: TStrings);
begin Self.Body := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageBody_R(Self: TIdMessage; var T: TStrings);
begin T := Self.Body; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageAttachmentEncoding_W(Self: TIdMessage; const T: string);
begin Self.AttachmentEncoding := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageAttachmentEncoding_R(Self: TIdMessage; var T: string);
begin T := Self.AttachmentEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageUID_W(Self: TIdMessage; const T: String);
begin Self.UID := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageUID_R(Self: TIdMessage; var T: String);
begin T := Self.UID; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageMIMEBoundary_W(Self: TIdMessage; const T: TIdMIMEBoundary);
begin Self.MIMEBoundary := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageMIMEBoundary_R(Self: TIdMessage; var T: TIdMIMEBoundary);
begin T := Self.MIMEBoundary; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageMessageParts_R(Self: TIdMessage; var T: TIdMessageParts);
begin T := Self.MessageParts; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageHeaders_W(Self: TIdMessage; const T: TIdHeaderList);
begin Self.Headers := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageHeaders_R(Self: TIdMessage; var T: TIdHeaderList);
begin T := Self.Headers; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageMsgId_W(Self: TIdMessage; const T: string);
begin Self.MsgId := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageMsgId_R(Self: TIdMessage; var T: string);
begin T := Self.MsgId; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageIsEncoded_W(Self: TIdMessage; const T: Boolean);
begin Self.IsEncoded := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageIsEncoded_R(Self: TIdMessage; var T: Boolean);
begin T := Self.IsEncoded; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageFlags_W(Self: TIdMessage; const T: TIdMessageFlagsSet);
begin Self.Flags := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessageFlags_R(Self: TIdMessage; var T: TIdMessageFlagsSet);
begin T := Self.Flags; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsTextPartCount_R(Self: TIdMessageParts; var T: integer);
begin T := Self.TextPartCount; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsRelatedPartCount_R(Self: TIdMessageParts; var T: integer);
begin T := Self.RelatedPartCount; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsMessageEncoderInfo_R(Self: TIdMessageParts; var T: TObject);
begin T := Self.MessageEncoderInfo; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsItems_W(Self: TIdMessageParts; const T: TIdMessagePart; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsItems_R(Self: TIdMessageParts; var T: TIdMessagePart; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsAttachmentEncoding_W(Self: TIdMessageParts; const T: string);
begin Self.AttachmentEncoding := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsAttachmentEncoding_R(Self: TIdMessageParts; var T: string);
begin T := Self.AttachmentEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartsAttachmentCount_R(Self: TIdMessageParts; var T: integer);
begin T := Self.AttachmentCount; end;

(*----------------------------------------------------------------------------*)
procedure TIdTextBody_W(Self: TIdText; const T: TStrings);
begin Self.Body := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTextBody_R(Self: TIdText; var T: TStrings);
begin T := Self.Body; end;

(*----------------------------------------------------------------------------*)
procedure TIdAttachmentFileName_W(Self: TIdAttachment; const T: TFileName);
begin Self.FileName := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdAttachmentFileName_R(Self: TIdAttachment; var T: TFileName);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure TIdAttachmentDeleteTempFile_W(Self: TIdAttachment; const T: Boolean);
begin Self.DeleteTempFile := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdAttachmentDeleteTempFile_R(Self: TIdAttachment; var T: Boolean);
begin T := Self.DeleteTempFile; end;

(*----------------------------------------------------------------------------*)
procedure TIdAttachmentContentDisposition_W(Self: TIdAttachment; const T: string);
begin Self.ContentDisposition := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdAttachmentContentDisposition_R(Self: TIdAttachment; var T: string);
begin T := Self.ContentDisposition; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartExtraHeaders_W(Self: TIdMessagePart; const T: TIdHeaderList);
begin Self.ExtraHeaders := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartExtraHeaders_R(Self: TIdMessagePart; var T: TIdHeaderList);
begin T := Self.ExtraHeaders; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartContentType_W(Self: TIdMessagePart; const T: string);
begin Self.ContentType := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartContentType_R(Self: TIdMessagePart; var T: string);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartContentTransfer_W(Self: TIdMessagePart; const T: string);
begin Self.ContentTransfer := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartContentTransfer_R(Self: TIdMessagePart; var T: string);
begin T := Self.ContentTransfer; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartContentID_W(Self: TIdMessagePart; const T: string);
begin Self.ContentID := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartContentID_R(Self: TIdMessagePart; var T: string);
begin T := Self.ContentID; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartHeaders_W(Self: TIdMessagePart; const T: TIdHeaderList);
begin Self.Headers := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartHeaders_R(Self: TIdMessagePart; var T: TIdHeaderList);
begin T := Self.Headers; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartStoredPathName_W(Self: TIdMessagePart; const T: TFileName);
begin Self.StoredPathName := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartStoredPathName_R(Self: TIdMessagePart; var T: TFileName);
begin T := Self.StoredPathName; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartOnGetMessagePartStream_W(Self: TIdMessagePart; const T: TOnGetMessagePartStream);
begin Self.OnGetMessagePartStream := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartOnGetMessagePartStream_R(Self: TIdMessagePart; var T: TOnGetMessagePartStream);
begin T := Self.OnGetMessagePartStream; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartIsEncoded_R(Self: TIdMessagePart; var T: Boolean);
begin T := Self.IsEncoded; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartBoundaryEnd_W(Self: TIdMessagePart; const T: Boolean);
begin Self.BoundaryEnd := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartBoundaryEnd_R(Self: TIdMessagePart; var T: Boolean);
begin T := Self.BoundaryEnd; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartBoundaryBegin_W(Self: TIdMessagePart; const T: Boolean);
begin Self.BoundaryBegin := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartBoundaryBegin_R(Self: TIdMessagePart; var T: Boolean);
begin T := Self.BoundaryBegin; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartBoundary_W(Self: TIdMessagePart; const T: String);
begin Self.Boundary := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMessagePartBoundary_R(Self: TIdMessagePart; var T: String);
begin T := Self.Boundary; end;

(*----------------------------------------------------------------------------*)
procedure TIdMIMEBoundaryNewBoundary_W(Self: TIdMIMEBoundary; const T: Boolean);
begin Self.NewBoundary := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdMIMEBoundaryNewBoundary_R(Self: TIdMIMEBoundary; var T: Boolean);
begin T := Self.NewBoundary; end;

(*----------------------------------------------------------------------------*)
procedure TIdMIMEBoundaryBoundary_R(Self: TIdMIMEBoundary; var T: string);
begin T := Self.Boundary; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdMessage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdMessage) do begin
    RegisterConstructor(@TIdMessage.Create, 'Create');
    RegisterMethod(@TIdMessage.Destroy, 'Free');
    RegisterMethod(@TIdMessage.AddHeader, 'AddHeader');
    RegisterVirtualMethod(@TIdMessage.Clear, 'Clear');
    RegisterMethod(@TIdMessage.ClearBody, 'ClearBody');
    RegisterMethod(@TIdMessage.ClearHeader, 'ClearHeader');
    RegisterMethod(@TIdMessage.GenerateHeader, 'GenerateHeader');
    RegisterMethod(@TIdMessage.GetUseNowForDate, 'GetUseNowForDate');
    RegisterMethod(@TIdMessage.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TIdMessage.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TIdMessage.ProcessHeaders, 'ProcessHeaders');
    RegisterMethod(@TIdMessage.SaveToFile, 'SaveToFile');
    RegisterMethod(@TIdMessage.SaveToStream, 'SaveToStream');
    RegisterPropertyHelper(@TIdMessageFlags_R,@TIdMessageFlags_W,'Flags');
    RegisterPropertyHelper(@TIdMessageIsEncoded_R,@TIdMessageIsEncoded_W,'IsEncoded');
    RegisterPropertyHelper(@TIdMessageMsgId_R,@TIdMessageMsgId_W,'MsgId');
    RegisterPropertyHelper(@TIdMessageHeaders_R,@TIdMessageHeaders_W,'Headers');
    RegisterPropertyHelper(@TIdMessageMessageParts_R,nil,'MessageParts');
    RegisterPropertyHelper(@TIdMessageMIMEBoundary_R,@TIdMessageMIMEBoundary_W,'MIMEBoundary');
    RegisterPropertyHelper(@TIdMessageUID_R,@TIdMessageUID_W,'UID');
    RegisterPropertyHelper(@TIdMessageAttachmentEncoding_R,@TIdMessageAttachmentEncoding_W,'AttachmentEncoding');
    RegisterPropertyHelper(@TIdMessageBody_R,@TIdMessageBody_W,'Body');
    RegisterPropertyHelper(@TIdMessageBccList_R,@TIdMessageBccList_W,'BccList');
    RegisterPropertyHelper(@TIdMessageCharSet_R,@TIdMessageCharSet_W,'CharSet');
    RegisterPropertyHelper(@TIdMessageCCList_R,@TIdMessageCCList_W,'CCList');
    RegisterPropertyHelper(@TIdMessageContentType_R,@TIdMessageContentType_W,'ContentType');
    RegisterPropertyHelper(@TIdMessageContentTransferEncoding_R,@TIdMessageContentTransferEncoding_W,'ContentTransferEncoding');
    RegisterPropertyHelper(@TIdMessageContentDisposition_R,@TIdMessageContentDisposition_W,'ContentDisposition');
    RegisterPropertyHelper(@TIdMessageDate_R,@TIdMessageDate_W,'Date');
    RegisterPropertyHelper(@TIdMessageDeleteTempFiles_R,@TIdMessageDeleteTempFiles_W,'DeleteTempFiles');
    RegisterPropertyHelper(@TIdMessageEncoding_R,@TIdMessageEncoding_W,'Encoding');
    RegisterPropertyHelper(@TIdMessageExtraHeaders_R,@TIdMessageExtraHeaders_W,'ExtraHeaders');
    RegisterPropertyHelper(@TIdMessageFrom_R,@TIdMessageFrom_W,'From');
    RegisterPropertyHelper(@TIdMessageNewsGroups_R,@TIdMessageNewsGroups_W,'NewsGroups');
    RegisterPropertyHelper(@TIdMessageNoEncode_R,@TIdMessageNoEncode_W,'NoEncode');
    RegisterPropertyHelper(@TIdMessageNoDecode_R,@TIdMessageNoDecode_W,'NoDecode');
    RegisterPropertyHelper(@TIdMessageOrganization_R,@TIdMessageOrganization_W,'Organization');
    RegisterPropertyHelper(@TIdMessagePriority_R,@TIdMessagePriority_W,'Priority');
    RegisterPropertyHelper(@TIdMessageReceiptRecipient_R,@TIdMessageReceiptRecipient_W,'ReceiptRecipient');
    RegisterPropertyHelper(@TIdMessageRecipients_R,@TIdMessageRecipients_W,'Recipients');
    RegisterPropertyHelper(@TIdMessageReferences_R,@TIdMessageReferences_W,'References');
    RegisterPropertyHelper(@TIdMessageReplyTo_R,@TIdMessageReplyTo_W,'ReplyTo');
    RegisterPropertyHelper(@TIdMessageSubject_R,@TIdMessageSubject_W,'Subject');
    RegisterPropertyHelper(@TIdMessageSender_R,@TIdMessageSender_W,'Sender');
    RegisterPropertyHelper(@TIdMessageUseNowForDate_R,@TIdMessageUseNowForDate_W,'UseNowForDate');
    RegisterPropertyHelper(@TIdMessageOnInitializeISO_R,@TIdMessageOnInitializeISO_W,'OnInitializeISO');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdMessageParts(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdMessageParts) do begin
    RegisterMethod(@TIdMessageParts.Add, 'Add');
    RegisterMethod(@TIdMessageParts.CountParts, 'CountParts');
    RegisterConstructor(@TIdMessageParts.Create, 'Create');
    RegisterPropertyHelper(@TIdMessagePartsAttachmentCount_R,nil,'AttachmentCount');
    RegisterPropertyHelper(@TIdMessagePartsAttachmentEncoding_R,@TIdMessagePartsAttachmentEncoding_W,'AttachmentEncoding');
    RegisterPropertyHelper(@TIdMessagePartsItems_R,@TIdMessagePartsItems_W,'Items');
    RegisterPropertyHelper(@TIdMessagePartsMessageEncoderInfo_R,nil,'MessageEncoderInfo');
    RegisterPropertyHelper(@TIdMessagePartsRelatedPartCount_R,nil,'RelatedPartCount');
    RegisterPropertyHelper(@TIdMessagePartsTextPartCount_R,nil,'TextPartCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdText(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdText) do begin
    RegisterConstructor(@TIdText.Create, 'Create');
     RegisterMethod(@TIdText.Assign, 'Assign');
    RegisterPropertyHelper(@TIdTextBody_R,@TIdTextBody_W,'Body');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdAttachment(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdAttachment) do begin
    RegisterConstructor(@TIdAttachment.Create, 'Create');
     RegisterMethod(@TIdAttachment.Assign, 'Assign');

    RegisterMethod(@TIdAttachment.Encode, 'Encode');
    RegisterMethod(@TIdAttachment.SaveToFile, 'SaveToFile');
    RegisterPropertyHelper(@TIdAttachmentContentDisposition_R,@TIdAttachmentContentDisposition_W,'ContentDisposition');
    RegisterPropertyHelper(@TIdAttachmentDeleteTempFile_R,@TIdAttachmentDeleteTempFile_W,'DeleteTempFile');
    RegisterPropertyHelper(@TIdAttachmentFileName_R,@TIdAttachmentFileName_W,'FileName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdMessagePart(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdMessagePart) do  begin
    RegisterConstructor(@TIdMessagePart.Create, 'Create');
    RegisterMethod(@TIdMessagePart.Assign, 'Assign');
       RegisterPropertyHelper(@TIdMessagePartBoundary_R,@TIdMessagePartBoundary_W,'Boundary');
    RegisterPropertyHelper(@TIdMessagePartBoundaryBegin_R,@TIdMessagePartBoundaryBegin_W,'BoundaryBegin');
    RegisterPropertyHelper(@TIdMessagePartBoundaryEnd_R,@TIdMessagePartBoundaryEnd_W,'BoundaryEnd');
    RegisterPropertyHelper(@TIdMessagePartIsEncoded_R,nil,'IsEncoded');
    RegisterPropertyHelper(@TIdMessagePartOnGetMessagePartStream_R,@TIdMessagePartOnGetMessagePartStream_W,'OnGetMessagePartStream');
    RegisterPropertyHelper(@TIdMessagePartStoredPathName_R,@TIdMessagePartStoredPathName_W,'StoredPathName');
    RegisterPropertyHelper(@TIdMessagePartHeaders_R,@TIdMessagePartHeaders_W,'Headers');
    RegisterPropertyHelper(@TIdMessagePartContentID_R,@TIdMessagePartContentID_W,'ContentID');
    RegisterPropertyHelper(@TIdMessagePartContentTransfer_R,@TIdMessagePartContentTransfer_W,'ContentTransfer');
    RegisterPropertyHelper(@TIdMessagePartContentType_R,@TIdMessagePartContentType_W,'ContentType');
    RegisterPropertyHelper(@TIdMessagePartExtraHeaders_R,@TIdMessagePartExtraHeaders_W,'ExtraHeaders');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdMIMEBoundary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdMIMEBoundary) do
  begin
    RegisterConstructor(@TIdMIMEBoundary.Create, 'Create');
    RegisterMethod(@TIdMIMEBoundary.FindBoundary, 'FindBoundary');
    RegisterMethod(@TIdMIMEBoundary.Push, 'Push');
    RegisterMethod(@TIdMIMEBoundary.Pop, 'Pop');
    RegisterMethod(@TIdMIMEBoundary.Clear, 'Clear');
    RegisterPropertyHelper(@TIdMIMEBoundaryBoundary_R,nil,'Boundary');
    RegisterPropertyHelper(@TIdMIMEBoundaryNewBoundary_R,@TIdMIMEBoundaryNewBoundary_W,'NewBoundary');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdMessage(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdMIMEBoundary(CL);
  RIRegister_TIdMessagePart(CL);
  with CL.Add(TIdMessageParts) do
  RIRegister_TIdAttachment(CL);
  RIRegister_TIdText(CL);
  RIRegister_TIdMessageParts(CL);
  RIRegister_TIdMessage(CL);
  with CL.Add(EIdMessageException) do
  with CL.Add(EIdCanNotCreateMessagePart) do
  with CL.Add(EIdTextInvalidCount) do
  with CL.Add(EIdMessageCannotLoad) do
end;

 
 
{ TPSImport_IdMessage }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdMessage.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdMessage(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdMessage.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdMessage(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
