unit uPSI_JvgLogics;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JvgLogics = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJvgCommentAreas(CL: TPSPascalCompiler);
procedure SIRegister_TJvgCommentArea(CL: TPSPascalCompiler);
procedure SIRegister_TJvgLogicVariants(CL: TPSPascalCompiler);
procedure SIRegister_TJvgLogicVariant(CL: TPSPascalCompiler);
procedure SIRegister_TJvgLogics(CL: TPSPascalCompiler);
procedure SIRegister_TJvgLogicElement(CL: TPSPascalCompiler);
procedure SIRegister_TJvgLogicProducer(CL: TPSPascalCompiler);
procedure SIRegister_JvgLogics(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvgCommentAreas(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvgCommentArea(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvgLogicVariants(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvgLogicVariant(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvgLogics(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvgLogicElement(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvgLogicProducer(CL: TPSRuntimeClassImporter);
procedure RIRegister_JvgLogics(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
  // JclUnitVersioning
  Graphics
  //,JvComponentBase
  //,JvResources
  ,JvgLogics
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JvgLogics]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvgCommentAreas(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOwnedCollection', 'TJvgCommentAreas') do
  with CL.AddClassN(CL.FindClass('TOwnedCollection'),'TJvgCommentAreas') do
  begin
    RegisterMethod('Function Add : TJvgCommentArea');
    RegisterMethod('Function Insert( Index : Integer) : TJvgCommentArea');
    RegisterProperty('Items', 'TJvgCommentArea Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvgCommentArea(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TJvgCommentArea') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TJvgCommentArea') do
  begin
    RegisterProperty('Left', 'Integer', iptrw);
    RegisterProperty('Top', 'Integer', iptrw);
    RegisterProperty('Width', 'Integer', iptrw);
    RegisterProperty('Height', 'Integer', iptrw);
    RegisterProperty('Text', 'string', iptrw);
    RegisterProperty('Color', 'TColor', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvgLogicVariants(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOwnedCollection', 'TJvgLogicVariants') do
  with CL.AddClassN(CL.FindClass('TOwnedCollection'),'TJvgLogicVariants') do
  begin
    RegisterMethod('Function Add : TJvgLogicVariant');
    RegisterMethod('Function Insert( Index : Integer) : TJvgLogicVariant');
    RegisterProperty('Items', 'TJvgLogicVariant Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvgLogicVariant(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TJvgLogicVariant') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TJvgLogicVariant') do
  begin
    RegisterProperty('Value', 'string', iptrw);
    RegisterProperty('TrueResult', 'string', iptrw);
    RegisterProperty('FalseResult', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvgLogics(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOwnedCollection', 'TJvgLogics') do
  with CL.AddClassN(CL.FindClass('TOwnedCollection'),'TJvgLogics') do begin
    RegisterMethod('Constructor Create( AOwner : TPersistent; ItemClass : TCollectionItemClass)');
    RegisterMethod('Procedure Loaded');
    RegisterMethod('Procedure Analyze');
    RegisterMethod('Procedure AnalyzeStep');
    RegisterMethod('Procedure StartAnalyze');
    RegisterMethod('Function Add : TJvgLogicElement');
    RegisterMethod('Function Insert( Index : Integer) : TJvgLogicElement');
    RegisterProperty('Items', 'TJvgLogicElement Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterProperty('Result', 'string', iptrw);
    RegisterProperty('TraceItem', 'TJvgLogicElement', iptrw);
    RegisterProperty('Dictionary', 'TStrings', iptrw);
    RegisterProperty('IgnoreSpaces', 'Boolean', iptrw);
    RegisterProperty('OnTraceMessage', 'TOnTraceMessage', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvgLogicElement(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TJvgLogicElement') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TJvgLogicElement') do
  begin
    RegisterMethod('Constructor Create( Collection : TCollection)');
    RegisterMethod('Procedure Loaded');
    RegisterProperty('NextElement', 'TJvgLogicElement', iptrw);
    RegisterProperty('NextFalseElement', 'TJvgLogicElement', iptrw);
    RegisterProperty('IsTrue', 'Boolean', iptrw);
    RegisterProperty('NextElementID', 'Integer', iptrw);
    RegisterProperty('NextFalseElementID', 'Integer', iptrw);
    RegisterProperty('Left', 'Integer', iptrw);
    RegisterProperty('Top', 'Integer', iptrw);
    RegisterProperty('Caption', 'string', iptrw);
    RegisterProperty('IsFirst', 'Boolean', iptrw);
    RegisterProperty('Expression', 'string', iptrw);
    RegisterProperty('Rule', 'TLogicRule', iptrw);
    RegisterProperty('Value', 'string', iptrw);
    RegisterProperty('TrueResult', 'string', iptrw);
    RegisterProperty('FalseResult', 'string', iptrw);
    RegisterProperty('LogicVariants', 'TJvgLogicVariants', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvgLogicProducer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvComponent', 'TJvgLogicProducer') do
  with CL.AddClassN(CL.FindClass('TJvComponent'),'TJvgLogicProducer') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Loaded');
    RegisterProperty('Logics', 'TJvgLogics', iptrw);
    RegisterProperty('CommentAreas', 'TJvgCommentAreas', iptrw);
    RegisterProperty('Dictionary', 'TStrings', iptrw);
    RegisterProperty('IgnoreSpaces', 'Boolean', iptrw);
    RegisterProperty('OnTraceMessage', 'TOnTraceMessage', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JvgLogics(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TLogicRule', '( lrEqual, lrBeginWith, lrEndWith, lrContains, lrC'
   +'ontainsIn, ltNotEmpty )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvgLogics');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvgLogicElement');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvgCommentAreas');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvgLogicVariants');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvgLogicVariant');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvgLogicProducer');
  SIRegister_TJvgLogicProducer(CL);
  SIRegister_TJvgLogicElement(CL);
  SIRegister_TJvgLogics(CL);
  SIRegister_TJvgLogicVariant(CL);
  SIRegister_TJvgLogicVariants(CL);
  SIRegister_TJvgCommentArea(CL);
  SIRegister_TJvgCommentAreas(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreasItems_W(Self: TJvgCommentAreas; const T: TJvgCommentArea; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreasItems_R(Self: TJvgCommentAreas; var T: TJvgCommentArea; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaColor_W(Self: TJvgCommentArea; const T: TColor);
begin Self.Color := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaColor_R(Self: TJvgCommentArea; var T: TColor);
begin T := Self.Color; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaText_W(Self: TJvgCommentArea; const T: string);
begin Self.Text := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaText_R(Self: TJvgCommentArea; var T: string);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaHeight_W(Self: TJvgCommentArea; const T: Integer);
begin Self.Height := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaHeight_R(Self: TJvgCommentArea; var T: Integer);
begin T := Self.Height; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaWidth_W(Self: TJvgCommentArea; const T: Integer);
begin Self.Width := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaWidth_R(Self: TJvgCommentArea; var T: Integer);
begin T := Self.Width; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaTop_W(Self: TJvgCommentArea; const T: Integer);
begin Self.Top := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaTop_R(Self: TJvgCommentArea; var T: Integer);
begin T := Self.Top; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaLeft_W(Self: TJvgCommentArea; const T: Integer);
begin Self.Left := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgCommentAreaLeft_R(Self: TJvgCommentArea; var T: Integer);
begin T := Self.Left; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantsItems_W(Self: TJvgLogicVariants; const T: TJvgLogicVariant; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantsItems_R(Self: TJvgLogicVariants; var T: TJvgLogicVariant; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantFalseResult_W(Self: TJvgLogicVariant; const T: string);
begin Self.FalseResult := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantFalseResult_R(Self: TJvgLogicVariant; var T: string);
begin T := Self.FalseResult; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantTrueResult_W(Self: TJvgLogicVariant; const T: string);
begin Self.TrueResult := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantTrueResult_R(Self: TJvgLogicVariant; var T: string);
begin T := Self.TrueResult; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantValue_W(Self: TJvgLogicVariant; const T: string);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicVariantValue_R(Self: TJvgLogicVariant; var T: string);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsOnTraceMessage_W(Self: TJvgLogics; const T: TOnTraceMessage);
begin Self.OnTraceMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsOnTraceMessage_R(Self: TJvgLogics; var T: TOnTraceMessage);
begin T := Self.OnTraceMessage; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsIgnoreSpaces_W(Self: TJvgLogics; const T: Boolean);
begin Self.IgnoreSpaces := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsIgnoreSpaces_R(Self: TJvgLogics; var T: Boolean);
begin T := Self.IgnoreSpaces; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsDictionary_W(Self: TJvgLogics; const T: TStrings);
begin Self.Dictionary := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsDictionary_R(Self: TJvgLogics; var T: TStrings);
begin T := Self.Dictionary; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsTraceItem_W(Self: TJvgLogics; const T: TJvgLogicElement);
begin Self.TraceItem := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsTraceItem_R(Self: TJvgLogics; var T: TJvgLogicElement);
begin T := Self.TraceItem; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsResult_W(Self: TJvgLogics; const T: string);
begin Self.Result := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsResult_R(Self: TJvgLogics; var T: string);
begin T := Self.Result; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsItems_W(Self: TJvgLogics; const T: TJvgLogicElement; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicsItems_R(Self: TJvgLogics; var T: TJvgLogicElement; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementLogicVariants_W(Self: TJvgLogicElement; const T: TJvgLogicVariants);
begin Self.LogicVariants := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementLogicVariants_R(Self: TJvgLogicElement; var T: TJvgLogicVariants);
begin T := Self.LogicVariants; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementFalseResult_W(Self: TJvgLogicElement; const T: string);
begin Self.FalseResult := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementFalseResult_R(Self: TJvgLogicElement; var T: string);
begin T := Self.FalseResult; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementTrueResult_W(Self: TJvgLogicElement; const T: string);
begin Self.TrueResult := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementTrueResult_R(Self: TJvgLogicElement; var T: string);
begin T := Self.TrueResult; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementValue_W(Self: TJvgLogicElement; const T: string);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementValue_R(Self: TJvgLogicElement; var T: string);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementRule_W(Self: TJvgLogicElement; const T: TLogicRule);
begin Self.Rule := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementRule_R(Self: TJvgLogicElement; var T: TLogicRule);
begin T := Self.Rule; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementExpression_W(Self: TJvgLogicElement; const T: string);
begin Self.Expression := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementExpression_R(Self: TJvgLogicElement; var T: string);
begin T := Self.Expression; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementIsFirst_W(Self: TJvgLogicElement; const T: Boolean);
begin Self.IsFirst := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementIsFirst_R(Self: TJvgLogicElement; var T: Boolean);
begin T := Self.IsFirst; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementCaption_W(Self: TJvgLogicElement; const T: string);
begin Self.Caption := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementCaption_R(Self: TJvgLogicElement; var T: string);
begin T := Self.Caption; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementTop_W(Self: TJvgLogicElement; const T: Integer);
begin Self.Top := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementTop_R(Self: TJvgLogicElement; var T: Integer);
begin T := Self.Top; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementLeft_W(Self: TJvgLogicElement; const T: Integer);
begin Self.Left := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementLeft_R(Self: TJvgLogicElement; var T: Integer);
begin T := Self.Left; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextFalseElementID_W(Self: TJvgLogicElement; const T: Integer);
begin Self.NextFalseElementID := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextFalseElementID_R(Self: TJvgLogicElement; var T: Integer);
begin T := Self.NextFalseElementID; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextElementID_W(Self: TJvgLogicElement; const T: Integer);
begin Self.NextElementID := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextElementID_R(Self: TJvgLogicElement; var T: Integer);
begin T := Self.NextElementID; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementIsTrue_W(Self: TJvgLogicElement; const T: Boolean);
begin Self.IsTrue := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementIsTrue_R(Self: TJvgLogicElement; var T: Boolean);
begin T := Self.IsTrue; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextFalseElement_W(Self: TJvgLogicElement; const T: TJvgLogicElement);
begin Self.NextFalseElement := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextFalseElement_R(Self: TJvgLogicElement; var T: TJvgLogicElement);
begin T := Self.NextFalseElement; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextElement_W(Self: TJvgLogicElement; const T: TJvgLogicElement);
begin Self.NextElement := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicElementNextElement_R(Self: TJvgLogicElement; var T: TJvgLogicElement);
begin T := Self.NextElement; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerOnTraceMessage_W(Self: TJvgLogicProducer; const T: TOnTraceMessage);
begin Self.OnTraceMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerOnTraceMessage_R(Self: TJvgLogicProducer; var T: TOnTraceMessage);
begin T := Self.OnTraceMessage; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerIgnoreSpaces_W(Self: TJvgLogicProducer; const T: Boolean);
begin Self.IgnoreSpaces := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerIgnoreSpaces_R(Self: TJvgLogicProducer; var T: Boolean);
begin T := Self.IgnoreSpaces; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerDictionary_W(Self: TJvgLogicProducer; const T: TStrings);
begin Self.Dictionary := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerDictionary_R(Self: TJvgLogicProducer; var T: TStrings);
begin T := Self.Dictionary; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerCommentAreas_W(Self: TJvgLogicProducer; const T: TJvgCommentAreas);
begin Self.CommentAreas := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerCommentAreas_R(Self: TJvgLogicProducer; var T: TJvgCommentAreas);
begin T := Self.CommentAreas; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerLogics_W(Self: TJvgLogicProducer; const T: TJvgLogics);
begin Self.Logics := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvgLogicProducerLogics_R(Self: TJvgLogicProducer; var T: TJvgLogics);
begin T := Self.Logics; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvgCommentAreas(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgCommentAreas) do
  begin
    RegisterMethod(@TJvgCommentAreas.Add, 'Add');
    RegisterMethod(@TJvgCommentAreas.Insert, 'Insert');
    RegisterPropertyHelper(@TJvgCommentAreasItems_R,@TJvgCommentAreasItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvgCommentArea(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgCommentArea) do
  begin
    RegisterPropertyHelper(@TJvgCommentAreaLeft_R,@TJvgCommentAreaLeft_W,'Left');
    RegisterPropertyHelper(@TJvgCommentAreaTop_R,@TJvgCommentAreaTop_W,'Top');
    RegisterPropertyHelper(@TJvgCommentAreaWidth_R,@TJvgCommentAreaWidth_W,'Width');
    RegisterPropertyHelper(@TJvgCommentAreaHeight_R,@TJvgCommentAreaHeight_W,'Height');
    RegisterPropertyHelper(@TJvgCommentAreaText_R,@TJvgCommentAreaText_W,'Text');
    RegisterPropertyHelper(@TJvgCommentAreaColor_R,@TJvgCommentAreaColor_W,'Color');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvgLogicVariants(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgLogicVariants) do
  begin
    RegisterMethod(@TJvgLogicVariants.Add, 'Add');
    RegisterMethod(@TJvgLogicVariants.Insert, 'Insert');
    RegisterPropertyHelper(@TJvgLogicVariantsItems_R,@TJvgLogicVariantsItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvgLogicVariant(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgLogicVariant) do
  begin
    RegisterPropertyHelper(@TJvgLogicVariantValue_R,@TJvgLogicVariantValue_W,'Value');
    RegisterPropertyHelper(@TJvgLogicVariantTrueResult_R,@TJvgLogicVariantTrueResult_W,'TrueResult');
    RegisterPropertyHelper(@TJvgLogicVariantFalseResult_R,@TJvgLogicVariantFalseResult_W,'FalseResult');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvgLogics(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgLogics) do
  begin
    RegisterConstructor(@TJvgLogics.Create, 'Create');
    RegisterMethod(@TJvgLogics.Loaded, 'Loaded');
    RegisterMethod(@TJvgLogics.Analyze, 'Analyze');
    RegisterMethod(@TJvgLogics.AnalyzeStep, 'AnalyzeStep');
    RegisterMethod(@TJvgLogics.StartAnalyze, 'StartAnalyze');
    RegisterMethod(@TJvgLogics.Add, 'Add');
    RegisterMethod(@TJvgLogics.Insert, 'Insert');
    RegisterPropertyHelper(@TJvgLogicsItems_R,@TJvgLogicsItems_W,'Items');
    RegisterPropertyHelper(@TJvgLogicsResult_R,@TJvgLogicsResult_W,'Result');
    RegisterPropertyHelper(@TJvgLogicsTraceItem_R,@TJvgLogicsTraceItem_W,'TraceItem');
    RegisterPropertyHelper(@TJvgLogicsDictionary_R,@TJvgLogicsDictionary_W,'Dictionary');
    RegisterPropertyHelper(@TJvgLogicsIgnoreSpaces_R,@TJvgLogicsIgnoreSpaces_W,'IgnoreSpaces');
    RegisterPropertyHelper(@TJvgLogicsOnTraceMessage_R,@TJvgLogicsOnTraceMessage_W,'OnTraceMessage');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvgLogicElement(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgLogicElement) do
  begin
    RegisterConstructor(@TJvgLogicElement.Create, 'Create');
    RegisterMethod(@TJvgLogicElement.Loaded, 'Loaded');
    RegisterPropertyHelper(@TJvgLogicElementNextElement_R,@TJvgLogicElementNextElement_W,'NextElement');
    RegisterPropertyHelper(@TJvgLogicElementNextFalseElement_R,@TJvgLogicElementNextFalseElement_W,'NextFalseElement');
    RegisterPropertyHelper(@TJvgLogicElementIsTrue_R,@TJvgLogicElementIsTrue_W,'IsTrue');
    RegisterPropertyHelper(@TJvgLogicElementNextElementID_R,@TJvgLogicElementNextElementID_W,'NextElementID');
    RegisterPropertyHelper(@TJvgLogicElementNextFalseElementID_R,@TJvgLogicElementNextFalseElementID_W,'NextFalseElementID');
    RegisterPropertyHelper(@TJvgLogicElementLeft_R,@TJvgLogicElementLeft_W,'Left');
    RegisterPropertyHelper(@TJvgLogicElementTop_R,@TJvgLogicElementTop_W,'Top');
    RegisterPropertyHelper(@TJvgLogicElementCaption_R,@TJvgLogicElementCaption_W,'Caption');
    RegisterPropertyHelper(@TJvgLogicElementIsFirst_R,@TJvgLogicElementIsFirst_W,'IsFirst');
    RegisterPropertyHelper(@TJvgLogicElementExpression_R,@TJvgLogicElementExpression_W,'Expression');
    RegisterPropertyHelper(@TJvgLogicElementRule_R,@TJvgLogicElementRule_W,'Rule');
    RegisterPropertyHelper(@TJvgLogicElementValue_R,@TJvgLogicElementValue_W,'Value');
    RegisterPropertyHelper(@TJvgLogicElementTrueResult_R,@TJvgLogicElementTrueResult_W,'TrueResult');
    RegisterPropertyHelper(@TJvgLogicElementFalseResult_R,@TJvgLogicElementFalseResult_W,'FalseResult');
    RegisterPropertyHelper(@TJvgLogicElementLogicVariants_R,@TJvgLogicElementLogicVariants_W,'LogicVariants');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvgLogicProducer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgLogicProducer) do
  begin
    RegisterConstructor(@TJvgLogicProducer.Create, 'Create');
    RegisterMethod(@TJvgLogicProducer.Loaded, 'Loaded');
    RegisterPropertyHelper(@TJvgLogicProducerLogics_R,@TJvgLogicProducerLogics_W,'Logics');
    RegisterPropertyHelper(@TJvgLogicProducerCommentAreas_R,@TJvgLogicProducerCommentAreas_W,'CommentAreas');
    RegisterPropertyHelper(@TJvgLogicProducerDictionary_R,@TJvgLogicProducerDictionary_W,'Dictionary');
    RegisterPropertyHelper(@TJvgLogicProducerIgnoreSpaces_R,@TJvgLogicProducerIgnoreSpaces_W,'IgnoreSpaces');
    RegisterPropertyHelper(@TJvgLogicProducerOnTraceMessage_R,@TJvgLogicProducerOnTraceMessage_W,'OnTraceMessage');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JvgLogics(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvgLogics) do
  with CL.Add(TJvgLogicElement) do
  with CL.Add(TJvgCommentAreas) do
  with CL.Add(TJvgLogicVariants) do
  with CL.Add(TJvgLogicVariant) do
  with CL.Add(TJvgLogicProducer) do
  RIRegister_TJvgLogicProducer(CL);
  RIRegister_TJvgLogicElement(CL);
  RIRegister_TJvgLogics(CL);
  RIRegister_TJvgLogicVariant(CL);
  RIRegister_TJvgLogicVariants(CL);
  RIRegister_TJvgCommentArea(CL);
  RIRegister_TJvgCommentAreas(CL);
end;

 
 
{ TPSImport_JvgLogics }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvgLogics.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JvgLogics(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JvgLogics.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JvgLogics(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
