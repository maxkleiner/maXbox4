unit uPSI_flcDataStructs;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_flcDataStructs = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TDoublyLinkedList(CL: TPSPascalCompiler);
procedure SIRegister_TDoublyLinkedObject(CL: TPSPascalCompiler);
procedure SIRegister_TDoublyLinkedString(CL: TPSPascalCompiler);
procedure SIRegister_TDoublyLinkedExtended(CL: TPSPascalCompiler);
procedure SIRegister_TDoublyLinkedInteger(CL: TPSPascalCompiler);
procedure SIRegister_TDoublyLinkedItem(CL: TPSPascalCompiler);
procedure SIRegister_TSparseObjectArray(CL: TPSPascalCompiler);
procedure SIRegister_TSparseExtendedArray(CL: TPSPascalCompiler);
procedure SIRegister_TSparseInt64Array(CL: TPSPascalCompiler);
procedure SIRegister_TSparseAnsiStringArray(CL: TPSPascalCompiler);
procedure SIRegister_ASparseArray(CL: TPSPascalCompiler);
procedure SIRegister_TObjectDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralObjectDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TObjectDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralObjectDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TObjectDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralObjectDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TObjectDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralObjectDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TInterfaceDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInterfaceDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TInterfaceDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInterfaceDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TInterfaceDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInterfaceDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TPointerDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralPointerDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TPointerDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralPointerDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TPointerDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralPointerDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TPointerDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralPointerDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TUnicodeStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralUnicodeStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TUnicodeStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralUnicodeStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TUnicodeStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralUnicodeStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TRawByteStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralRawByteStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TRawByteStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralRawByteStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TRawByteStringDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralRawByteStringDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TRawByteStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralRawByteStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TAnsiStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralAnsiStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TAnsiStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralAnsiStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TAnsiStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralAnsiStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TExtendedDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralExtendedDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TExtendedDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralExtendedDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TExtendedDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralExtendedDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TExtendedDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralExtendedDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TDoubleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralDoubleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TDoubleDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralDoubleDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TDoubleDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralDoubleDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TDoubleDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralDoubleDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TSingleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralSingleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TSingleDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralSingleDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TSingleDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralSingleDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TSingleDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralSingleDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TInt64Dictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInt64Dictionary(CL: TPSPascalCompiler);
procedure SIRegister_TInt64DictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInt64DictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TInt64DictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInt64DictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TInt64DictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInt64DictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TLongWordDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongWordDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TLongWordDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongWordDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TLongWordDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongWordDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TLongWordDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongWordDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TLongIntDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongIntDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TLongIntDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongIntDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_TLongIntDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongIntDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_TLongIntDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongIntDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_AObjectDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AObjectDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_AObjectDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_AObjectDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_AInterfaceDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AInterfaceDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_AInterfaceDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_APointerDictionary(CL: TPSPascalCompiler);
procedure SIRegister_APointerDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_APointerDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_APointerDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_AStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_AStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_AUnicodeStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AUnicodeStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_AUnicodeStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_ARawByteStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ARawByteStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_ARawByteStringDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_ARawByteStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_AAnsiStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AAnsiStringDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_AAnsiStringDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_AExtendedDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AExtendedDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_AExtendedDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_AExtendedDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_ADoubleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ADoubleDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_ADoubleDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_ADoubleDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_ASingleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ASingleDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_ASingleDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_ASingleDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_AInt64Dictionary(CL: TPSPascalCompiler);
procedure SIRegister_AInt64DictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_AInt64DictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_AInt64DictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_ALongWordDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ALongWordDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_ALongWordDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_ALongWordDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_ALongIntDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ALongIntDictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_ALongIntDictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_ALongIntDictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_ADictionary(CL: TPSPascalCompiler);
procedure SIRegister_ADictionaryU(CL: TPSPascalCompiler);
procedure SIRegister_ADictionaryB(CL: TPSPascalCompiler);
procedure SIRegister_ADictionaryA(CL: TPSPascalCompiler);
procedure SIRegister_ADictionaryBase(CL: TPSPascalCompiler);
procedure SIRegister_THashedUnicodeStringArray(CL: TPSPascalCompiler);
procedure SIRegister_THashedRawByteStringArray(CL: TPSPascalCompiler);
procedure SIRegister_THashedAnsiStringArray(CL: TPSPascalCompiler);
procedure SIRegister_TBitArray(CL: TPSPascalCompiler);
procedure SIRegister_TObjectArray(CL: TPSPascalCompiler);
procedure SIRegister_TInterfaceArray(CL: TPSPascalCompiler);
procedure SIRegister_TPointerArray(CL: TPSPascalCompiler);
procedure SIRegister_TStringArray(CL: TPSPascalCompiler);
procedure SIRegister_TUnicodeStringArray(CL: TPSPascalCompiler);
procedure SIRegister_TRawByteStringArray(CL: TPSPascalCompiler);
procedure SIRegister_TAnsiStringArray(CL: TPSPascalCompiler);
procedure SIRegister_TExtendedArray(CL: TPSPascalCompiler);
procedure SIRegister_TDoubleArray(CL: TPSPascalCompiler);
procedure SIRegister_TSingleArray(CL: TPSPascalCompiler);
procedure SIRegister_TLongWordArray(CL: TPSPascalCompiler);
procedure SIRegister_TWord64Array(CL: TPSPascalCompiler);
procedure SIRegister_TWord32Array(CL: TPSPascalCompiler);
procedure SIRegister_TLongIntArray(CL: TPSPascalCompiler);
procedure SIRegister_TInt64Array(CL: TPSPascalCompiler);
procedure SIRegister_TInt32Array(CL: TPSPascalCompiler);
procedure SIRegister_ABitArray(CL: TPSPascalCompiler);
procedure SIRegister_AObjectArray(CL: TPSPascalCompiler);
procedure SIRegister_AInterfaceArray(CL: TPSPascalCompiler);
procedure SIRegister_APointerArray(CL: TPSPascalCompiler);
procedure SIRegister_AStringArray(CL: TPSPascalCompiler);
procedure SIRegister_AUnicodeStringArray(CL: TPSPascalCompiler);
procedure SIRegister_ARawByteStringArray(CL: TPSPascalCompiler);
procedure SIRegister_AAnsiStringArray(CL: TPSPascalCompiler);
procedure SIRegister_AExtendedArray(CL: TPSPascalCompiler);
procedure SIRegister_ADoubleArray(CL: TPSPascalCompiler);
procedure SIRegister_ASingleArray(CL: TPSPascalCompiler);
procedure SIRegister_ALongWordArray(CL: TPSPascalCompiler);
procedure SIRegister_AWord64Array(CL: TPSPascalCompiler);
procedure SIRegister_AWord32Array(CL: TPSPascalCompiler);
procedure SIRegister_ALongIntArray(CL: TPSPascalCompiler);
procedure SIRegister_AInt64Array(CL: TPSPascalCompiler);
procedure SIRegister_AInt32Array(CL: TPSPascalCompiler);
procedure SIRegister_AArray(CL: TPSPascalCompiler);
procedure SIRegister_ATypeClass(CL: TPSPascalCompiler);
procedure SIRegister_flcDataStructs(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TDoublyLinkedList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoublyLinkedObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoublyLinkedString(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoublyLinkedExtended(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoublyLinkedInteger(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoublyLinkedItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSparseObjectArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSparseExtendedArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSparseInt64Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSparseAnsiStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_ASparseArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralObjectDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralObjectDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralObjectDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralObjectDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInterfaceDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInterfaceDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInterfaceDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInterfaceDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInterfaceDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInterfaceDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPointerDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralPointerDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPointerDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralPointerDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPointerDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralPointerDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPointerDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralPointerDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUnicodeStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralUnicodeStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUnicodeStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralUnicodeStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUnicodeStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralUnicodeStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRawByteStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralRawByteStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRawByteStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralRawByteStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRawByteStringDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralRawByteStringDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRawByteStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralRawByteStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAnsiStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralAnsiStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAnsiStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralAnsiStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAnsiStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralAnsiStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TExtendedDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralExtendedDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TExtendedDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralExtendedDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TExtendedDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralExtendedDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TExtendedDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralExtendedDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoubleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralDoubleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoubleDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralDoubleDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoubleDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralDoubleDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoubleDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralDoubleDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSingleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralSingleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSingleDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralSingleDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSingleDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralSingleDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSingleDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralSingleDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInt64Dictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInt64Dictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInt64DictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInt64DictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInt64DictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInt64DictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInt64DictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInt64DictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongWordDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongWordDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongWordDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongWordDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongWordDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongWordDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongWordDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongWordDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongIntDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongIntDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongIntDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongIntDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongIntDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongIntDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongIntDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongIntDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_AObjectDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AObjectDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_AObjectDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_AObjectDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInterfaceDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInterfaceDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInterfaceDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_APointerDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_APointerDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_APointerDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_APointerDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_AStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_AStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_AUnicodeStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AUnicodeStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_AUnicodeStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_ARawByteStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ARawByteStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_ARawByteStringDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_ARawByteStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_AAnsiStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AAnsiStringDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_AAnsiStringDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_AExtendedDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AExtendedDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_AExtendedDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_AExtendedDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADoubleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADoubleDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADoubleDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADoubleDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_ASingleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ASingleDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_ASingleDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_ASingleDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInt64Dictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInt64DictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInt64DictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInt64DictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongWordDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongWordDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongWordDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongWordDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongIntDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongIntDictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongIntDictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongIntDictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADictionaryU(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADictionaryB(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADictionaryA(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADictionaryBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_THashedUnicodeStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_THashedRawByteStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_THashedAnsiStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBitArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInterfaceArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPointerArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUnicodeStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRawByteStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAnsiStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TExtendedArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoubleArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSingleArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongWordArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWord64Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWord32Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongIntArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInt64Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInt32Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_ABitArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AObjectArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInterfaceArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_APointerArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AUnicodeStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_ARawByteStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AAnsiStringArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AExtendedArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADoubleArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_ASingleArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongWordArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AWord64Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_AWord32Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongIntArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInt64Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInt32Array(CL: TPSRuntimeClassImporter);
procedure RIRegister_AArray(CL: TPSRuntimeClassImporter);
procedure RIRegister_flcDataStructs_Routines(S: TPSExec);
procedure RIRegister_ATypeClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_flcDataStructs(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   flcStdTypes
  ,flcUtils
  ,flcDataStructs
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_flcDataStructs]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoublyLinkedList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TDoublyLinkedList') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TDoublyLinkedList') do
  begin
    RegisterProperty('First', 'TDoublyLinkedItem', iptr);
    RegisterProperty('Last', 'TDoublyLinkedItem', iptr);
    RegisterMethod('Function IsEmpty : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterMethod('Procedure Remove( const Item : TDoublyLinkedItem)');
    RegisterMethod('Function RemoveFirst : TDoublyLinkedItem');
    RegisterMethod('Function RemoveLast : TDoublyLinkedItem');
    RegisterMethod('Procedure Delete( const Item : TDoublyLinkedItem)');
    RegisterMethod('Procedure DeleteFirst');
    RegisterMethod('Procedure DeleteLast');
    RegisterMethod('Procedure DeleteList');
    RegisterMethod('Procedure Append( const Item : TDoublyLinkedItem)');
    RegisterMethod('Procedure InsertFront( const Item : TDoublyLinkedItem)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoublyLinkedObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDoublyLinkedItem', 'TDoublyLinkedObject') do
  with CL.AddClassN(CL.FindClass('TDoublyLinkedItem'),'TDoublyLinkedObject') do
  begin
    RegisterProperty('Value', 'TObject', iptrw);
    RegisterMethod('Constructor Create( const V : TObject)');
    RegisterMethod('Procedure InsertAfter110( const V : TObject);');
    RegisterMethod('Procedure InsertBefore111( const V : TObject);');
    RegisterMethod('Procedure InsertFirst( const V : TObject)');
    RegisterMethod('Procedure Append( const V : TObject)');
    RegisterMethod('Function FindNext( const Find : TObject) : TDoublyLinkedObject');
    RegisterMethod('Function FindPrev( const Find : TObject) : TDoublyLinkedObject');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoublyLinkedString(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDoublyLinkedItem', 'TDoublyLinkedString') do
  with CL.AddClassN(CL.FindClass('TDoublyLinkedItem'),'TDoublyLinkedString') do
  begin
    RegisterProperty('Value', 'AnsiString', iptrw);
    RegisterMethod('Constructor Create( const V : AnsiString)');
    RegisterMethod('Procedure InsertAfter108( const V : AnsiString);');
    RegisterMethod('Procedure InsertBefore109( const V : AnsiString);');
    RegisterMethod('Procedure InsertFirst( const V : AnsiString)');
    RegisterMethod('Procedure Append( const V : AnsiString)');
    RegisterMethod('Function FindNext( const Find : AnsiString) : TDoublyLinkedString');
    RegisterMethod('Function FindPrev( const Find : AnsiString) : TDoublyLinkedString');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoublyLinkedExtended(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDoublyLinkedItem', 'TDoublyLinkedExtended') do
  with CL.AddClassN(CL.FindClass('TDoublyLinkedItem'),'TDoublyLinkedExtended') do
  begin
    RegisterProperty('Value', 'Extended', iptrw);
    RegisterMethod('Constructor Create( const V : Extended)');
    RegisterMethod('Procedure InsertAfter106( const V : Extended);');
    RegisterMethod('Procedure InsertBefore107( const V : Extended);');
    RegisterMethod('Procedure InsertFirst( const V : Extended)');
    RegisterMethod('Procedure Append( const V : Extended)');
    RegisterMethod('Function FindNext( const Find : Extended) : TDoublyLinkedExtended');
    RegisterMethod('Function FindPrev( const Find : Extended) : TDoublyLinkedExtended');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoublyLinkedInteger(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDoublyLinkedItem', 'TDoublyLinkedInteger') do
  with CL.AddClassN(CL.FindClass('TDoublyLinkedItem'),'TDoublyLinkedInteger') do
  begin
    RegisterProperty('Value', 'Integer', iptrw);
    RegisterMethod('Constructor Create( const V : Integer)');
    RegisterMethod('Procedure InsertAfter104( const V : Integer);');
    RegisterMethod('Procedure InsertBefore105( const V : Integer);');
    RegisterMethod('Procedure InsertFirst( const V : Integer)');
    RegisterMethod('Procedure Append( const V : Integer)');
    RegisterMethod('Function FindNext( const Find : Integer) : TDoublyLinkedInteger');
    RegisterMethod('Function FindPrev( const Find : Integer) : TDoublyLinkedInteger');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoublyLinkedItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TDoublyLinkedItem') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TDoublyLinkedItem') do
  begin
    RegisterProperty('Next', 'TDoublyLinkedItem', iptrw);
    RegisterProperty('Prev', 'TDoublyLinkedItem', iptrw);
    RegisterMethod('Function HasNext : Boolean');
    RegisterMethod('Function HasPrev : Boolean');
    RegisterMethod('Function Last : TDoublyLinkedItem');
    RegisterMethod('Function First : TDoublyLinkedItem');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Procedure Remove');
    RegisterMethod('Function RemoveNext : TDoublyLinkedItem');
    RegisterMethod('Procedure DeleteNext');
    RegisterMethod('Function RemovePrev : TDoublyLinkedItem');
    RegisterMethod('Procedure DeletePrev');
    RegisterMethod('Procedure InsertAfter( const Item : TDoublyLinkedItem)');
    RegisterMethod('Procedure InsertBefore( const Item : TDoublyLinkedItem)');
    RegisterMethod('Procedure Delete');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSparseObjectArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASparseArray', 'TSparseObjectArray') do
  with CL.AddClassN(CL.FindClass('ASparseArray'),'TSparseObjectArray') do
  begin
    RegisterMethod('Constructor Create( const AIsItemOwner : Boolean)');
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
    RegisterProperty('Item', 'TObject Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Function LocateItem( const Idx : Integer; var Value : TObject) : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterMethod('Function ReleaseItem( const Idx : Integer) : TObject');
    RegisterMethod('Function FindFirst( var Idx : Integer; var Value : TObject) : Boolean');
    RegisterMethod('Function FindNext( var Idx : Integer; var Value : TObject) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSparseExtendedArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASparseArray', 'TSparseExtendedArray') do
  with CL.AddClassN(CL.FindClass('ASparseArray'),'TSparseExtendedArray') do
  begin
    RegisterProperty('Item', 'Extended Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Function LocateItem( const Idx : Integer; var Value : Extended) : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterMethod('Function FindFirst( var Idx : Integer; var Value : Extended) : Boolean');
    RegisterMethod('Function FindNext( var Idx : Integer; var Value : Extended) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSparseInt64Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASparseArray', 'TSparseInt64Array') do
  with CL.AddClassN(CL.FindClass('ASparseArray'),'TSparseInt64Array') do
  begin
    RegisterProperty('Item', 'Int64 Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Function LocateItem( const Idx : Integer; var Value : Int64) : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterMethod('Function FindFirst( var Idx : Integer; var Value : Int64) : Boolean');
    RegisterMethod('Function FindNext( var Idx : Integer; var Value : Int64) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSparseAnsiStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASparseArray', 'TSparseAnsiStringArray') do
  with CL.AddClassN(CL.FindClass('ASparseArray'),'TSparseAnsiStringArray') do
  begin
    RegisterProperty('Item', 'AnsiString Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Function LocateItem( const Idx : Integer; var Value : AnsiString) : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterMethod('Function FindFirst( var Idx : Integer; var Value : AnsiString) : Boolean');
    RegisterMethod('Function FindNext( var Idx : Integer; var Value : AnsiString) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ASparseArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AType', 'ASparseArray') do
  with CL.AddClassN(CL.FindClass('AType'),'ASparseArray') do
  begin
    RegisterProperty('Count', 'Integer', iptr);
    RegisterMethod('Procedure Delete( const Idx : Integer)');
    RegisterMethod('Function HasItem( const Idx : Integer) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralObjectDictionary', 'TObjectDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralObjectDictionary'),'TObjectDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : T' +
      'DictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralObjectDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AObjectDictionary', 'TGeneralObjectDictionary') do
  with CL.AddClassN(CL.FindClass('AObjectDictionary'),'TGeneralObjectDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : T' +
      'DictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TObjectArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : TObject)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralObjectDictionaryU', 'TObjectDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralObjectDictionaryU'),'TObjectDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAct' +
      'ion : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralObjectDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AObjectDictionaryU', 'TGeneralObjectDictionaryU') do
  with CL.AddClassN(CL.FindClass('AObjectDictionaryU'),'TGeneralObjectDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAct' +
      'ion : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TObjectArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : TObject)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralObjectDictionaryB', 'TObjectDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralObjectDictionaryB'),'TObjectDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAct' +
      'ion : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralObjectDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AObjectDictionaryB', 'TGeneralObjectDictionaryB') do
  with CL.AddClassN(CL.FindClass('AObjectDictionaryB'),'TGeneralObjectDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAct' +
      'ion : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TObjectArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : TObject)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralObjectDictionaryA', 'TObjectDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralObjectDictionaryA'),'TObjectDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction' +
      ' : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralObjectDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AObjectDictionaryA', 'TGeneralObjectDictionaryA') do
  with CL.AddClassN(CL.FindClass('AObjectDictionaryA'),'TGeneralObjectDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TObjectArray; const AIsItemOwner : Boolean; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction' +
      ' : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TObjectArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : TObject)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfaceDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInterfaceDictionary', 'TInterfaceDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralInterfaceDictionary'),'TInterfaceDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TInterfaceArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInterfaceDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInterfaceDictionary', 'TGeneralInterfaceDictionary') do
  with CL.AddClassN(CL.FindClass('AInterfaceDictionary'),'TGeneralInterfaceDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TInterfaceArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TInterfaceArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : IInterface)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfaceDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInterfaceDictionaryU', 'TInterfaceDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralInterfaceDictionaryU'),'TInterfaceDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TInterfaceArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicates' +
      'Action)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInterfaceDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInterfaceDictionaryU', 'TGeneralInterfaceDictionaryU') do
  with CL.AddClassN(CL.FindClass('AInterfaceDictionaryU'),'TGeneralInterfaceDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TInterfaceArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicates' +
      'Action)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TInterfaceArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : IInterface)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfaceDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInterfaceDictionaryA', 'TInterfaceDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralInterfaceDictionaryA'),'TInterfaceDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TInterfaceArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInterfaceDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInterfaceDictionaryA', 'TGeneralInterfaceDictionaryA') do
  with CL.AddClassN(CL.FindClass('AInterfaceDictionaryA'),'TGeneralInterfaceDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TInterfaceArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TInterfaceArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : IInterface)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPointerDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralPointerDictionary', 'TPointerDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralPointerDictionary'),'TPointerDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralPointerDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'APointerDictionary', 'TGeneralPointerDictionary') do
  with CL.AddClassN(CL.FindClass('APointerDictionary'),'TGeneralPointerDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TPointerArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Pointer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPointerDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralPointerDictionaryU', 'TPointerDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralPointerDictionaryU'),'TPointerDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralPointerDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'APointerDictionaryU', 'TGeneralPointerDictionaryU') do
  with CL.AddClassN(CL.FindClass('APointerDictionaryU'),'TGeneralPointerDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TPointerArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Pointer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPointerDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralPointerDictionaryB', 'TPointerDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralPointerDictionaryB'),'TPointerDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralPointerDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'APointerDictionaryB', 'TGeneralPointerDictionaryB') do
  with CL.AddClassN(CL.FindClass('APointerDictionaryB'),'TGeneralPointerDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TPointerArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Pointer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPointerDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralPointerDictionaryA', 'TPointerDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralPointerDictionaryA'),'TPointerDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActio' +
      'n)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralPointerDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'APointerDictionaryA', 'TGeneralPointerDictionaryA') do
  with CL.AddClassN(CL.FindClass('APointerDictionaryA'),'TGeneralPointerDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TPointerArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActio' +
      'n)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TPointerArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Pointer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralStringDictionary', 'TStringDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralStringDictionary'),'TStringDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AStringDictionary', 'TGeneralStringDictionary') do
  with CL.AddClassN(CL.FindClass('AStringDictionary'),'TGeneralStringDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralStringDictionaryU', 'TStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralStringDictionaryU'),'TStringDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AStringDictionaryU', 'TGeneralStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('AStringDictionaryU'),'TGeneralStringDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralStringDictionaryA', 'TStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralStringDictionaryA'),'TStringDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AStringDictionaryA', 'TGeneralStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('AStringDictionaryA'),'TGeneralStringDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUnicodeStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralUnicodeStringDictionary', 'TUnicodeStringDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralUnicodeStringDictionary'),'TUnicodeStringDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TUnicodeStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralUnicodeStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AUnicodeStringDictionary', 'TGeneralUnicodeStringDictionary') do
  with CL.AddClassN(CL.FindClass('AUnicodeStringDictionary'),'TGeneralUnicodeStringDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TUnicodeStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TUnicodeStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : UnicodeString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUnicodeStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralUnicodeStringDictionaryU', 'TUnicodeStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralUnicodeStringDictionaryU'),'TUnicodeStringDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TUnicodeStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplic' +
      'atesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralUnicodeStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AUnicodeStringDictionaryU', 'TGeneralUnicodeStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('AUnicodeStringDictionaryU'),'TGeneralUnicodeStringDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TUnicodeStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplic' +
      'atesAction)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TUnicodeStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : UnicodeString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUnicodeStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralUnicodeStringDictionaryA', 'TUnicodeStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralUnicodeStringDictionaryA'),'TUnicodeStringDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TUnicodeStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicate' +
      'sAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralUnicodeStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AUnicodeStringDictionaryA', 'TGeneralUnicodeStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('AUnicodeStringDictionaryA'),'TGeneralUnicodeStringDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TUnicodeStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicate' +
      'sAction)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TUnicodeStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : UnicodeString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRawByteStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralRawByteStringDictionary', 'TRawByteStringDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralRawByteStringDictionary'),'TRawByteStringDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralRawByteStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ARawByteStringDictionary', 'TGeneralRawByteStringDictionary') do
  with CL.AddClassN(CL.FindClass('ARawByteStringDictionary'),'TGeneralRawByteStringDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TRawByteStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : RawByteString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRawByteStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralRawByteStringDictionaryU', 'TRawByteStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralRawByteStringDictionaryU'),'TRawByteStringDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplic' +
      'atesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralRawByteStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ARawByteStringDictionaryU', 'TGeneralRawByteStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('ARawByteStringDictionaryU'),'TGeneralRawByteStringDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplic' +
      'atesAction)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TRawByteStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : RawByteString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRawByteStringDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralRawByteStringDictionaryB', 'TRawByteStringDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralRawByteStringDictionaryB'),'TRawByteStringDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplic' +
      'atesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralRawByteStringDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ARawByteStringDictionaryB', 'TGeneralRawByteStringDictionaryB') do
  with CL.AddClassN(CL.FindClass('ARawByteStringDictionaryB'),'TGeneralRawByteStringDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplic' +
      'atesAction)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TRawByteStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : RawByteString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRawByteStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralRawByteStringDictionaryA', 'TRawByteStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralRawByteStringDictionaryA'),'TRawByteStringDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicate' +
      'sAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralRawByteStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ARawByteStringDictionaryA', 'TGeneralRawByteStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('ARawByteStringDictionaryA'),'TGeneralRawByteStringDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TRawByteStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicate' +
      'sAction)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TRawByteStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : RawByteString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAnsiStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralAnsiStringDictionary', 'TAnsiStringDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralAnsiStringDictionary'),'TAnsiStringDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TAnsiStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralAnsiStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AAnsiStringDictionary', 'TGeneralAnsiStringDictionary') do
  with CL.AddClassN(CL.FindClass('AAnsiStringDictionary'),'TGeneralAnsiStringDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TAnsiStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TAnsiStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : AnsiString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAnsiStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralAnsiStringDictionaryU', 'TAnsiStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralAnsiStringDictionaryU'),'TAnsiStringDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TAnsiStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicate' +
      'sAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralAnsiStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AAnsiStringDictionaryU', 'TGeneralAnsiStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('AAnsiStringDictionaryU'),'TGeneralAnsiStringDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TAnsiStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicate' +
      'sAction)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TAnsiStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : AnsiString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAnsiStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralAnsiStringDictionaryA', 'TAnsiStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralAnsiStringDictionaryA'),'TAnsiStringDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TAnsiStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralAnsiStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AAnsiStringDictionaryA', 'TGeneralAnsiStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('AAnsiStringDictionaryA'),'TGeneralAnsiStringDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TAnsiStringArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TAnsiStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : AnsiString)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TExtendedDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralExtendedDictionary', 'TExtendedDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralExtendedDictionary'),'TExtendedDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralExtendedDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AExtendedDictionary', 'TGeneralExtendedDictionary') do
  with CL.AddClassN(CL.FindClass('AExtendedDictionary'),'TGeneralExtendedDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TExtendedArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Extended)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TExtendedDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralExtendedDictionaryU', 'TExtendedDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralExtendedDictionaryU'),'TExtendedDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralExtendedDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AExtendedDictionaryU', 'TGeneralExtendedDictionaryU') do
  with CL.AddClassN(CL.FindClass('AExtendedDictionaryU'),'TGeneralExtendedDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TExtendedArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Extended)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TExtendedDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralExtendedDictionaryB', 'TExtendedDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralExtendedDictionaryB'),'TExtendedDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralExtendedDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AExtendedDictionaryB', 'TGeneralExtendedDictionaryB') do
  with CL.AddClassN(CL.FindClass('AExtendedDictionaryB'),'TGeneralExtendedDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TExtendedArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Extended)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TExtendedDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralExtendedDictionaryA', 'TExtendedDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralExtendedDictionaryA'),'TExtendedDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralExtendedDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AExtendedDictionaryA', 'TGeneralExtendedDictionaryA') do
  with CL.AddClassN(CL.FindClass('AExtendedDictionaryA'),'TGeneralExtendedDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TExtendedArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TExtendedArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Extended)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoubleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralDoubleDictionary', 'TDoubleDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralDoubleDictionary'),'TDoubleDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralDoubleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADoubleDictionary', 'TGeneralDoubleDictionary') do
  with CL.AddClassN(CL.FindClass('ADoubleDictionary'),'TGeneralDoubleDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TDoubleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Double)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoubleDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralDoubleDictionaryU', 'TDoubleDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralDoubleDictionaryU'),'TDoubleDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralDoubleDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADoubleDictionaryU', 'TGeneralDoubleDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADoubleDictionaryU'),'TGeneralDoubleDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TDoubleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Double)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoubleDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralDoubleDictionaryB', 'TDoubleDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralDoubleDictionaryB'),'TDoubleDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralDoubleDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADoubleDictionaryB', 'TGeneralDoubleDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADoubleDictionaryB'),'TGeneralDoubleDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TDoubleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Double)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoubleDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralDoubleDictionaryA', 'TDoubleDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralDoubleDictionaryA'),'TDoubleDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralDoubleDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADoubleDictionaryA', 'TGeneralDoubleDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADoubleDictionaryA'),'TGeneralDoubleDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TDoubleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TDoubleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Double)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSingleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralSingleDictionary', 'TSingleDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralSingleDictionary'),'TSingleDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralSingleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASingleDictionary', 'TGeneralSingleDictionary') do
  with CL.AddClassN(CL.FindClass('ASingleDictionary'),'TGeneralSingleDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TSingleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Single)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSingleDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralSingleDictionaryU', 'TSingleDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralSingleDictionaryU'),'TSingleDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralSingleDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASingleDictionaryU', 'TGeneralSingleDictionaryU') do
  with CL.AddClassN(CL.FindClass('ASingleDictionaryU'),'TGeneralSingleDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TSingleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Single)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSingleDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralSingleDictionaryB', 'TSingleDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralSingleDictionaryB'),'TSingleDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralSingleDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASingleDictionaryB', 'TGeneralSingleDictionaryB') do
  with CL.AddClassN(CL.FindClass('ASingleDictionaryB'),'TGeneralSingleDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAct' +
      'ion)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TSingleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Single)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSingleDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralSingleDictionaryA', 'TSingleDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralSingleDictionaryA'),'TSingleDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralSingleDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASingleDictionaryA', 'TGeneralSingleDictionaryA') do
  with CL.AddClassN(CL.FindClass('ASingleDictionaryA'),'TGeneralSingleDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TSingleArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction' +
      ')');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TSingleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Single)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInt64Dictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInt64Dictionary', 'TInt64Dictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralInt64Dictionary'),'TInt64Dictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInt64Dictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInt64Dictionary', 'TGeneralInt64Dictionary') do
  with CL.AddClassN(CL.FindClass('AInt64Dictionary'),'TGeneralInt64Dictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TInt64Array', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Int64)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInt64DictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInt64DictionaryU', 'TInt64DictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralInt64DictionaryU'),'TInt64DictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInt64DictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInt64DictionaryU', 'TGeneralInt64DictionaryU') do
  with CL.AddClassN(CL.FindClass('AInt64DictionaryU'),'TGeneralInt64DictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TInt64Array', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Int64)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInt64DictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInt64DictionaryB', 'TInt64DictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralInt64DictionaryB'),'TInt64DictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInt64DictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInt64DictionaryB', 'TGeneralInt64DictionaryB') do
  with CL.AddClassN(CL.FindClass('AInt64DictionaryB'),'TGeneralInt64DictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TInt64Array', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Int64)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInt64DictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInt64DictionaryA', 'TInt64DictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralInt64DictionaryA'),'TInt64DictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInt64DictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInt64DictionaryA', 'TGeneralInt64DictionaryA') do
  with CL.AddClassN(CL.FindClass('AInt64DictionaryA'),'TGeneralInt64DictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TInt64Array; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TInt64Array', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Int64)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongWordDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongWordDictionary', 'TLongWordDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralLongWordDictionary'),'TLongWordDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongWordDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongWordDictionary', 'TGeneralLongWordDictionary') do
  with CL.AddClassN(CL.FindClass('ALongWordDictionary'),'TGeneralLongWordDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TLongWordArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongWord)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongWordDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongWordDictionaryU', 'TLongWordDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralLongWordDictionaryU'),'TLongWordDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongWordDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongWordDictionaryU', 'TGeneralLongWordDictionaryU') do
  with CL.AddClassN(CL.FindClass('ALongWordDictionaryU'),'TGeneralLongWordDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TLongWordArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongWord)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongWordDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongWordDictionaryB', 'TLongWordDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralLongWordDictionaryB'),'TLongWordDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongWordDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongWordDictionaryB', 'TGeneralLongWordDictionaryB') do
  with CL.AddClassN(CL.FindClass('ALongWordDictionaryB'),'TGeneralLongWordDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesA' +
      'ction)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TLongWordArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongWord)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongWordDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongWordDictionaryA', 'TLongWordDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralLongWordDictionaryA'),'TLongWordDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongWordDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongWordDictionaryA', 'TGeneralLongWordDictionaryA') do
  with CL.AddClassN(CL.FindClass('ALongWordDictionaryA'),'TGeneralLongWordDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TLongWordArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActi' +
      'on)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TLongWordArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongWord)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongIntDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongIntDictionary', 'TLongIntDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralLongIntDictionary'),'TLongIntDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongIntDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongIntDictionary', 'TGeneralLongIntDictionary') do
  with CL.AddClassN(CL.FindClass('ALongIntDictionary'),'TGeneralLongIntDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'TStringArray', iptr);
    RegisterProperty('Values', 'TLongIntArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongInt)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongIntDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongIntDictionaryU', 'TLongIntDictionaryU') do
  with CL.AddClassN(CL.FindClass('TGeneralLongIntDictionaryU'),'TLongIntDictionaryU') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongIntDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongIntDictionaryU', 'TGeneralLongIntDictionaryU') do
  with CL.AddClassN(CL.FindClass('ALongIntDictionaryU'),'TGeneralLongIntDictionaryU') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TUnicodeStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
    RegisterProperty('Keys', 'TUnicodeStringArray', iptr);
    RegisterProperty('Values', 'TLongIntArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongInt)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongIntDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongIntDictionaryB', 'TLongIntDictionaryB') do
  with CL.AddClassN(CL.FindClass('TGeneralLongIntDictionaryB'),'TLongIntDictionaryB') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongIntDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongIntDictionaryB', 'TGeneralLongIntDictionaryB') do
  with CL.AddClassN(CL.FindClass('ALongIntDictionaryB'),'TGeneralLongIntDictionaryB') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TRawByteStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesAc' +
      'tion)');
    RegisterProperty('Keys', 'TRawByteStringArray', iptr);
    RegisterProperty('Values', 'TLongIntArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongInt)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongIntDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongIntDictionaryA', 'TLongIntDictionaryA') do
  with CL.AddClassN(CL.FindClass('TGeneralLongIntDictionaryA'),'TLongIntDictionaryA') do
  begin
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActio' +
      'n)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongIntDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongIntDictionaryA', 'TGeneralLongIntDictionaryA') do
  with CL.AddClassN(CL.FindClass('ALongIntDictionaryA'),'TGeneralLongIntDictionaryA') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const AKeys : TAnsiStringArray; const AValues : TLongIntArray; const AKeysCaseSensitive : Boolean; const AAddOnSet : Boolean; const ADuplicatesAction : TDictionaryDuplicatesActio' +
      'n)');
    RegisterProperty('Keys', 'TAnsiStringArray', iptr);
    RegisterProperty('Values', 'TLongIntArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongInt)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AObjectDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AObjectDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AObjectDictionary') do
  begin
    RegisterProperty('Item', 'TObject String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : TObject)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : TObject');
    RegisterMethod('Function LocateItem( const Key : String; var Value : TObject) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : TObject) : Integer');
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
    RegisterMethod('Function ReleaseItem( const Key : String) : TObject');
    RegisterMethod('Procedure ReleaseItems');
    RegisterMethod('Procedure FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AObjectDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'AObjectDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'AObjectDictionaryU') do
  begin
    RegisterProperty('Item', 'TObject UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : TObject)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : TObject');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : TObject) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : TObject) : Integer');
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
    RegisterMethod('Function ReleaseItem( const Key : UnicodeString) : TObject');
    RegisterMethod('Procedure ReleaseItems');
    RegisterMethod('Procedure FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AObjectDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'AObjectDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'AObjectDictionaryB') do
  begin
    RegisterProperty('Item', 'TObject RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : TObject)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : TObject');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : TObject) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : TObject) : Integer');
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
    RegisterMethod('Function ReleaseItem( const Key : RawByteString) : TObject');
    RegisterMethod('Procedure ReleaseItems');
    RegisterMethod('Procedure FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AObjectDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'AObjectDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'AObjectDictionaryA') do
  begin
    RegisterProperty('Item', 'TObject AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : TObject)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : TObject');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : TObject) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : TObject) : Integer');
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
    RegisterMethod('Function ReleaseItem( const Key : AnsiString) : TObject');
    RegisterMethod('Procedure ReleaseItems');
    RegisterMethod('Procedure FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInterfaceDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AInterfaceDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AInterfaceDictionary') do
  begin
    RegisterProperty('Item', 'IInterface String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : IInterface)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : IInterface');
    RegisterMethod('Function LocateItem( const Key : String; var Value : IInterface) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : IInterface) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInterfaceDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'AInterfaceDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'AInterfaceDictionaryU') do
  begin
    RegisterProperty('Item', 'IInterface UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : IInterface)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : IInterface');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : IInterface) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : IInterface) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInterfaceDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'AInterfaceDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'AInterfaceDictionaryA') do
  begin
    RegisterProperty('Item', 'IInterface AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : IInterface)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : IInterface');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : IInterface) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : IInterface) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_APointerDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'APointerDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'APointerDictionary') do
  begin
    RegisterProperty('Item', 'Pointer String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Pointer)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Pointer');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Pointer) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Pointer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_APointerDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'APointerDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'APointerDictionaryU') do
  begin
    RegisterProperty('Item', 'Pointer UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : Pointer)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Pointer');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : Pointer) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : Pointer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_APointerDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'APointerDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'APointerDictionaryB') do
  begin
    RegisterProperty('Item', 'Pointer RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : Pointer)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Pointer');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : Pointer) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : Pointer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_APointerDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'APointerDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'APointerDictionaryA') do
  begin
    RegisterProperty('Item', 'Pointer AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : Pointer)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Pointer');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : Pointer) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : Pointer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AStringDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AStringDictionary') do
  begin
    RegisterProperty('Item', 'String String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : String)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : String');
    RegisterMethod('Function LocateItem( const Key : String; var Value : String) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : String) : Integer');
    RegisterMethod('Function GetItemLength( const Key : String) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'AStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'AStringDictionaryU') do
  begin
    RegisterProperty('Item', 'String UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : String)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : String');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : String) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : String) : Integer');
    RegisterMethod('Function GetItemLength( const Key : UnicodeString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'AStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'AStringDictionaryA') do
  begin
    RegisterProperty('Item', 'String AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : String)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : String');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : String) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : String) : Integer');
    RegisterMethod('Function GetItemLength( const Key : AnsiString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AUnicodeStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AUnicodeStringDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AUnicodeStringDictionary') do
  begin
    RegisterProperty('Item', 'UnicodeString String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : UnicodeString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : UnicodeString');
    RegisterMethod('Function LocateItem( const Key : String; var Value : UnicodeString) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : UnicodeString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : String) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AUnicodeStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'AUnicodeStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'AUnicodeStringDictionaryU') do
  begin
    RegisterProperty('Item', 'UnicodeString UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : UnicodeString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : UnicodeString');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : UnicodeString) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : UnicodeString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : UnicodeString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AUnicodeStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'AUnicodeStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'AUnicodeStringDictionaryA') do
  begin
    RegisterProperty('Item', 'UnicodeString AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : UnicodeString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : UnicodeString');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : UnicodeString) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : UnicodeString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : AnsiString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ARawByteStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ARawByteStringDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ARawByteStringDictionary') do
  begin
    RegisterProperty('Item', 'RawByteString String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : RawByteString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : RawByteString');
    RegisterMethod('Function LocateItem( const Key : String; var Value : RawByteString) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : RawByteString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : String) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ARawByteStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'ARawByteStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'ARawByteStringDictionaryU') do
  begin
    RegisterProperty('Item', 'RawByteString UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : RawByteString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : RawByteString');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : RawByteString) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : RawByteString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : UnicodeString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ARawByteStringDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'ARawByteStringDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'ARawByteStringDictionaryB') do
  begin
    RegisterProperty('Item', 'RawByteString RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : RawByteString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : RawByteString');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : RawByteString) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : RawByteString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : RawByteString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ARawByteStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'ARawByteStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'ARawByteStringDictionaryA') do
  begin
    RegisterProperty('Item', 'RawByteString AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : RawByteString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : RawByteString');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : RawByteString) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : RawByteString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : AnsiString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AAnsiStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AAnsiStringDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AAnsiStringDictionary') do
  begin
    RegisterProperty('Item', 'AnsiString String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : AnsiString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : AnsiString');
    RegisterMethod('Function LocateItem( const Key : String; var Value : AnsiString) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : AnsiString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : String) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AAnsiStringDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'AAnsiStringDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'AAnsiStringDictionaryU') do
  begin
    RegisterProperty('Item', 'AnsiString UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : AnsiString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : AnsiString');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : AnsiString) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : AnsiString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : UnicodeString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AAnsiStringDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'AAnsiStringDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'AAnsiStringDictionaryA') do
  begin
    RegisterProperty('Item', 'AnsiString AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : AnsiString)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : AnsiString');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : AnsiString) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : AnsiString) : Integer');
    RegisterMethod('Function GetItemLength( const Key : AnsiString) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AExtendedDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AExtendedDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AExtendedDictionary') do
  begin
    RegisterProperty('Item', 'Extended String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Extended)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Extended');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Extended) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Extended) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AExtendedDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'AExtendedDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'AExtendedDictionaryU') do
  begin
    RegisterProperty('Item', 'Extended UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : Extended)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Extended');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : Extended) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : Extended) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AExtendedDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'AExtendedDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'AExtendedDictionaryB') do
  begin
    RegisterProperty('Item', 'Extended RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : Extended)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Extended');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : Extended) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : Extended) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AExtendedDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'AExtendedDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'AExtendedDictionaryA') do
  begin
    RegisterProperty('Item', 'Extended AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : Extended)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Extended');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : Extended) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : Extended) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADoubleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ADoubleDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ADoubleDictionary') do
  begin
    RegisterProperty('Item', 'Double String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Double)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Double');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Double) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Double) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADoubleDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'ADoubleDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'ADoubleDictionaryU') do
  begin
    RegisterProperty('Item', 'Double UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : Double)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Double');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : Double) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : Double) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADoubleDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'ADoubleDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'ADoubleDictionaryB') do
  begin
    RegisterProperty('Item', 'Double RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : Double)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Double');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : Double) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : Double) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADoubleDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'ADoubleDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'ADoubleDictionaryA') do
  begin
    RegisterProperty('Item', 'Double AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : Double)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Double');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : Double) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : Double) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ASingleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ASingleDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ASingleDictionary') do
  begin
    RegisterProperty('Item', 'Single String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Single)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Single');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Single) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Single) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ASingleDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'ASingleDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'ASingleDictionaryU') do
  begin
    RegisterProperty('Item', 'Single UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : Single)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Single');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : Single) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : Single) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ASingleDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'ASingleDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'ASingleDictionaryB') do
  begin
    RegisterProperty('Item', 'Single RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : Single)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Single');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : Single) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : Single) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ASingleDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'ASingleDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'ASingleDictionaryA') do
  begin
    RegisterProperty('Item', 'Single AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : Single)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Single');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : Single) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : Single) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInt64Dictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AInt64Dictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AInt64Dictionary') do
  begin
    RegisterProperty('Item', 'Int64 String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Int64)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Int64');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Int64) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Int64) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInt64DictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'AInt64DictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'AInt64DictionaryU') do
  begin
    RegisterProperty('Item', 'Int64 UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : Int64)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Int64');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : Int64) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : Int64) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInt64DictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'AInt64DictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'AInt64DictionaryB') do
  begin
    RegisterProperty('Item', 'Int64 RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : Int64)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Int64');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : Int64) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : Int64) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInt64DictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'AInt64DictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'AInt64DictionaryA') do
  begin
    RegisterProperty('Item', 'Int64 AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : Int64)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Int64');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : Int64) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : Int64) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongWordDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ALongWordDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ALongWordDictionary') do
  begin
    RegisterProperty('Item', 'LongWord String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : LongWord)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongWord');
    RegisterMethod('Function LocateItem( const Key : String; var Value : LongWord) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : LongWord) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongWordDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'ALongWordDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'ALongWordDictionaryU') do
  begin
    RegisterProperty('Item', 'LongWord UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : LongWord)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongWord');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : LongWord) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : LongWord) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongWordDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'ALongWordDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'ALongWordDictionaryB') do
  begin
    RegisterProperty('Item', 'LongWord RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : LongWord)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongWord');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : LongWord) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : LongWord) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongWordDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'ALongWordDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'ALongWordDictionaryA') do
  begin
    RegisterProperty('Item', 'LongWord AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : LongWord)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongWord');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : LongWord) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : LongWord) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongIntDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ALongIntDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ALongIntDictionary') do
  begin
    RegisterProperty('Item', 'LongInt String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : LongInt)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongInt');
    RegisterMethod('Function LocateItem( const Key : String; var Value : LongInt) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : LongInt) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongIntDictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryU', 'ALongIntDictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryU'),'ALongIntDictionaryU') do
  begin
    RegisterProperty('Item', 'LongInt UnicodeString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : UnicodeString; const Value : LongInt)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongInt');
    RegisterMethod('Function LocateItem( const Key : UnicodeString; var Value : LongInt) : Integer');
    RegisterMethod('Function LocateNext( const Key : UnicodeString; const Idx : Integer; var Value : LongInt) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongIntDictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryB', 'ALongIntDictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryB'),'ALongIntDictionaryB') do
  begin
    RegisterProperty('Item', 'LongInt RawByteString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : RawByteString; const Value : LongInt)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongInt');
    RegisterMethod('Function LocateItem( const Key : RawByteString; var Value : LongInt) : Integer');
    RegisterMethod('Function LocateNext( const Key : RawByteString; const Idx : Integer; var Value : LongInt) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongIntDictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryA', 'ALongIntDictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryA'),'ALongIntDictionaryA') do
  begin
    RegisterProperty('Item', 'LongInt AnsiString', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : AnsiString; const Value : LongInt)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongInt');
    RegisterMethod('Function LocateItem( const Key : AnsiString; var Value : LongInt) : Integer');
    RegisterMethod('Function LocateNext( const Key : AnsiString; const Idx : Integer; var Value : LongInt) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryBase', 'ADictionary') do
  with CL.AddClassN(CL.FindClass('ADictionaryBase'),'ADictionary') do
  begin
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key, NewKey : String)');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterProperty('KeysCaseSensitive', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADictionaryU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryBase', 'ADictionaryU') do
  with CL.AddClassN(CL.FindClass('ADictionaryBase'),'ADictionaryU') do
  begin
    RegisterMethod('Procedure Delete( const Key : UnicodeString)');
    RegisterMethod('Function HasKey( const Key : UnicodeString) : Boolean');
    RegisterMethod('Procedure Rename( const Key, NewKey : UnicodeString)');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : UnicodeString');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterProperty('KeysCaseSensitive', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADictionaryB(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryBase', 'ADictionaryB') do
  with CL.AddClassN(CL.FindClass('ADictionaryBase'),'ADictionaryB') do
  begin
    RegisterMethod('Procedure Delete( const Key : RawByteString)');
    RegisterMethod('Function HasKey( const Key : RawByteString) : Boolean');
    RegisterMethod('Procedure Rename( const Key, NewKey : RawByteString)');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : RawByteString');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterProperty('KeysCaseSensitive', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADictionaryA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionaryBase', 'ADictionaryA') do
  with CL.AddClassN(CL.FindClass('ADictionaryBase'),'ADictionaryA') do
  begin
    RegisterMethod('Procedure Delete( const Key : AnsiString)');
    RegisterMethod('Function HasKey( const Key : AnsiString) : Boolean');
    RegisterMethod('Procedure Rename( const Key, NewKey : AnsiString)');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : AnsiString');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterProperty('KeysCaseSensitive', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADictionaryBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AType', 'ADictionaryBase') do
  with CL.AddClassN(CL.FindClass('AType'),'ADictionaryBase') do
  begin
    RegisterProperty('AddOnSet', 'Boolean', iptrw);
    RegisterProperty('DuplicatesAction', 'TDictionaryDuplicatesAction', iptrw);
    RegisterMethod('Function Count : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THashedUnicodeStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUnicodeStringArray', 'THashedUnicodeStringArray') do
  with CL.AddClassN(CL.FindClass('TUnicodeStringArray'),'THashedUnicodeStringArray') do
  begin
    RegisterMethod('Constructor Create( const ACaseSensitive : Boolean)');
    RegisterMethod('Function PosNext( const Find : UnicodeString; const PrevPos : Integer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THashedRawByteStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRawByteStringArray', 'THashedRawByteStringArray') do
  with CL.AddClassN(CL.FindClass('TRawByteStringArray'),'THashedRawByteStringArray') do
  begin
    RegisterMethod('Constructor Create( const ACaseSensitive : Boolean)');
    RegisterMethod('Function PosNext( const Find : RawByteString; const PrevPos : Integer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THashedAnsiStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAnsiStringArray', 'THashedAnsiStringArray') do
  with CL.AddClassN(CL.FindClass('TAnsiStringArray'),'THashedAnsiStringArray') do
  begin
    RegisterMethod('Constructor Create( const ACaseSensitive : Boolean)');
    RegisterMethod('Function PosNext( const Find : AnsiString; const PrevPos : Integer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBitArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ABitArray', 'TBitArray') do
  with CL.AddClassN(CL.FindClass('ABitArray'),'TBitArray') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AObjectArray', 'TObjectArray') do
  with CL.AddClassN(CL.FindClass('AObjectArray'),'TObjectArray') do
  begin
    RegisterMethod('Constructor Create103( const V : ObjectArray; const AIsItemOwner : Boolean);');
    RegisterProperty('Data', 'ObjectArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfaceArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInterfaceArray', 'TInterfaceArray') do
  with CL.AddClassN(CL.FindClass('AInterfaceArray'),'TInterfaceArray') do
  begin
    RegisterMethod('Constructor Create99( const V : InterfaceArray);');
    RegisterMethod('Procedure Assign101( const V : InterfaceArray);');
    RegisterMethod('Procedure Assign102( const V : array of IInterface);');
    RegisterProperty('Data', 'InterfaceArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPointerArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'APointerArray', 'TPointerArray') do
  with CL.AddClassN(CL.FindClass('APointerArray'),'TPointerArray') do
  begin
    RegisterMethod('Constructor Create95( const V : PointerArray);');
    RegisterMethod('Procedure Assign97( const V : PointerArray);');
    RegisterMethod('Procedure Assign98( const V : array of Pointer);');
    RegisterProperty('Data', 'PointerArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AStringArray', 'TStringArray') do
  with CL.AddClassN(CL.FindClass('AStringArray'),'TStringArray') do
  begin
    RegisterMethod('Constructor Create91( const V : StringArray);');
    RegisterMethod('Procedure Assign93( const V : StringArray);');
    RegisterMethod('Procedure Assign94( const V : array of String);');
    RegisterProperty('Data', 'StringArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUnicodeStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AUnicodeStringArray', 'TUnicodeStringArray') do
  with CL.AddClassN(CL.FindClass('AUnicodeStringArray'),'TUnicodeStringArray') do
  begin
    RegisterMethod('Constructor Create87( const V : UnicodeStringArray);');
    RegisterMethod('Procedure Assign89( const V : UnicodeStringArray);');
    RegisterMethod('Procedure Assign90( const V : array of UnicodeString);');
    RegisterProperty('Data', 'UnicodeStringArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRawByteStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ARawByteStringArray', 'TRawByteStringArray') do
  with CL.AddClassN(CL.FindClass('ARawByteStringArray'),'TRawByteStringArray') do
  begin
    RegisterMethod('Constructor Create83( const V : RawByteStringArray);');
    RegisterMethod('Procedure Assign85( const V : RawByteStringArray);');
    RegisterMethod('Procedure Assign86( const V : array of RawByteString);');
    RegisterProperty('Data', 'RawByteStringArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAnsiStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AAnsiStringArray', 'TAnsiStringArray') do
  with CL.AddClassN(CL.FindClass('AAnsiStringArray'),'TAnsiStringArray') do
  begin
    RegisterMethod('Constructor Create79( const V : AnsiStringArray);');
    RegisterMethod('Procedure Assign81( const V : AnsiStringArray);');
    RegisterMethod('Procedure Assign82( const V : array of AnsiString);');
    RegisterProperty('Data', 'AnsiStringArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TExtendedArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AExtendedArray', 'TExtendedArray') do
  with CL.AddClassN(CL.FindClass('AExtendedArray'),'TExtendedArray') do
  begin
    RegisterMethod('Constructor Create75( const V : ExtendedArray);');
    RegisterMethod('Procedure Assign77( const V : ExtendedArray);');
    RegisterMethod('Procedure Assign78( const V : array of Extended);');
    RegisterProperty('Data', 'ExtendedArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoubleArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADoubleArray', 'TDoubleArray') do
  with CL.AddClassN(CL.FindClass('ADoubleArray'),'TDoubleArray') do
  begin
    RegisterMethod('Constructor Create71( const V : DoubleArray);');
    RegisterMethod('Procedure Assign73( const V : DoubleArray);');
    RegisterMethod('Procedure Assign74( const V : array of Double);');
    RegisterProperty('Data', 'DoubleArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSingleArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASingleArray', 'TSingleArray') do
  with CL.AddClassN(CL.FindClass('ASingleArray'),'TSingleArray') do
  begin
    RegisterMethod('Constructor Create67( const V : SingleArray);');
    RegisterMethod('Procedure Assign69( const V : SingleArray);');
    RegisterMethod('Procedure Assign70( const V : array of Single);');
    RegisterProperty('Data', 'SingleArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongWordArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongWordArray', 'TLongWordArray') do
  with CL.AddClassN(CL.FindClass('ALongWordArray'),'TLongWordArray') do
  begin
    RegisterMethod('Constructor Create63( const V : LongWordArray);');
    RegisterMethod('Procedure Assign65( const V : LongWordArray);');
    RegisterMethod('Procedure Assign66( const V : array of LongWord);');
    RegisterProperty('Data', 'LongWordArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWord64Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AWord64Array', 'TWord64Array') do
  with CL.AddClassN(CL.FindClass('AWord64Array'),'TWord64Array') do
  begin
    RegisterMethod('Constructor Create59( const V : Word64Array);');
    RegisterMethod('Procedure Assign61( const V : Word64Array);');
    RegisterMethod('Procedure Assign62( const V : array of Word64);');
    RegisterProperty('Data', 'Word64Array', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWord32Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AWord32Array', 'TWord32Array') do
  with CL.AddClassN(CL.FindClass('AWord32Array'),'TWord32Array') do
  begin
    RegisterMethod('Constructor Create55( const V : Word32Array);');
    RegisterMethod('Procedure Assign57( const V : Word32Array);');
    RegisterMethod('Procedure Assign58( const V : array of Word32);');
    RegisterProperty('Data', 'Word32Array', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongIntArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongIntArray', 'TLongIntArray') do
  with CL.AddClassN(CL.FindClass('ALongIntArray'),'TLongIntArray') do
  begin
    RegisterMethod('Constructor Create51( const V : LongIntArray);');
    RegisterMethod('Procedure Assign53( const V : LongIntArray);');
    RegisterMethod('Procedure Assign54( const V : array of LongInt);');
    RegisterProperty('Data', 'LongIntArray', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInt64Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInt64Array', 'TInt64Array') do
  with CL.AddClassN(CL.FindClass('AInt64Array'),'TInt64Array') do
  begin
    RegisterMethod('Constructor Create47( const V : Int64Array);');
    RegisterMethod('Procedure Assign49( const V : Int64Array);');
    RegisterMethod('Procedure Assign50( const V : array of Int64);');
    RegisterProperty('Data', 'Int64Array', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInt32Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInt32Array', 'TInt32Array') do
  with CL.AddClassN(CL.FindClass('AInt32Array'),'TInt32Array') do
  begin
    RegisterMethod('Constructor Create43( const V : Int32Array);');
    RegisterMethod('Procedure Assign45( const V : Int32Array);');
    RegisterMethod('Procedure Assign46( const V : array of Int32);');
    RegisterProperty('Data', 'Int32Array', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ABitArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'ABitArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'ABitArray') do
  begin
    RegisterProperty('Bit', 'Boolean Integer', iptrw);
    SetDefaultPropery('Bit');
    RegisterProperty('RangeL', 'Word32 Integer', iptrw);
    RegisterMethod('Function IsRange( const LoIdx, HiIdx : Integer; const Value : Boolean) : Boolean');
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Boolean)');
    RegisterMethod('Function AppendItem( const Value : Boolean) : Integer');
    RegisterMethod('Procedure Invert');
    RegisterMethod('Function Find( const Value : Boolean; const Start : Integer) : Integer');
    RegisterMethod('Function FindRange( const Value : Boolean; const Start : Integer; const ACount : Integer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AObjectArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AObjectArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'AObjectArray') do
  begin
    RegisterProperty('Item', 'TObject Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'ObjectArray Integer Integer', iptrw);
    RegisterMethod('Function AppendItem( const Value : TObject) : Integer');
    RegisterMethod('Function AppendArray33( const V : ObjectArray) : Integer;');
    RegisterMethod('Function PosNext34( const Find : TObject; const PrevPos : Integer) : Integer;');
    RegisterMethod('Function PosNext35( var AItem : TObject; const AClassType : TClass; const PrevPos : Integer) : Integer;');
    RegisterMethod('Function PosNext36( var AItem : TObject; const AClassName : String; const PrevPos : Integer) : Integer;');
    RegisterMethod('Function Find37( const AClassType : TClass; const ACount : Integer) : TObject;');
    RegisterMethod('Function Find38( const AClassName : String; const ACount : Integer) : TObject;');
    RegisterMethod('Function FindAll39( const AClassType : TClass) : ObjectArray;');
    RegisterMethod('Function FindAll40( const AClassName : String) : ObjectArray;');
    RegisterMethod('Function CountItems41( const AClassType : TClass) : Integer;');
    RegisterMethod('Function CountItems42( const AClassName : String) : Integer;');
    RegisterMethod('Function DeleteValue( const Value : TObject) : Boolean');
    RegisterMethod('Function DeleteAll( const Value : TObject) : Integer');
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
    RegisterMethod('Procedure ReleaseItems');
    RegisterMethod('Procedure FreeItems');
    RegisterMethod('Function ReleaseItem( const Idx : Integer) : TObject');
    RegisterMethod('Function ReleaseValue( const Value : TObject) : Boolean');
    RegisterMethod('Function RemoveItem( const Idx : Integer) : TObject');
    RegisterMethod('Function RemoveValue( const Value : TObject) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInterfaceArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AInterfaceArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'AInterfaceArray') do
  begin
    RegisterProperty('Item', 'IInterface Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'InterfaceArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : IInterface)');
    RegisterMethod('Function AppendItem( const Value : IInterface) : Integer');
    RegisterMethod('Function AppendArray31( const V : InterfaceArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : IInterface; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_APointerArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'APointerArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'APointerArray') do
  begin
    RegisterProperty('Item', 'Pointer Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'PointerArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Pointer)');
    RegisterMethod('Function AppendItem( const Value : Pointer) : Integer');
    RegisterMethod('Function AppendArray29( const V : PointerArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : Pointer; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AStringArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'AStringArray') do
  begin
    RegisterProperty('Item', 'String Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'StringArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : String)');
    RegisterMethod('Function AppendItem( const Value : String) : Integer');
    RegisterMethod('Function AppendArray27( const V : StringArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : String; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AUnicodeStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AUnicodeStringArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'AUnicodeStringArray') do
  begin
    RegisterProperty('Item', 'UnicodeString Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'UnicodeStringArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : UnicodeString)');
    RegisterMethod('Function AppendItem( const Value : UnicodeString) : Integer');
    RegisterMethod('Function AppendArray25( const V : UnicodeStringArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : UnicodeString; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ARawByteStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'ARawByteStringArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'ARawByteStringArray') do
  begin
    RegisterProperty('Item', 'RawByteString Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'RawByteStringArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : RawByteString)');
    RegisterMethod('Function AppendItem( const Value : RawByteString) : Integer');
    RegisterMethod('Function AppendArray23( const V : RawByteStringArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : RawByteString; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AAnsiStringArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AAnsiStringArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'AAnsiStringArray') do
  begin
    RegisterProperty('Item', 'AnsiString Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'AnsiStringArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : AnsiString)');
    RegisterMethod('Function AppendItem( const Value : AnsiString) : Integer');
    RegisterMethod('Function AppendArray21( const V : AnsiStringArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : AnsiString; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AExtendedArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AExtendedArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'AExtendedArray') do
  begin
    RegisterProperty('Item', 'Extended Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'ExtendedArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Extended)');
    RegisterMethod('Function AppendItem( const Value : Extended) : Integer');
    RegisterMethod('Function AppendArray19( const V : ExtendedArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : Extended; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADoubleArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'ADoubleArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'ADoubleArray') do
  begin
    RegisterProperty('Item', 'Double Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'DoubleArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Double)');
    RegisterMethod('Function AppendItem( const Value : Double) : Integer');
    RegisterMethod('Function AppendArray17( const V : DoubleArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : Double; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ASingleArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'ASingleArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'ASingleArray') do
  begin
    RegisterProperty('Item', 'Single Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'SingleArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Single)');
    RegisterMethod('Function AppendItem( const Value : Single) : Integer');
    RegisterMethod('Function AppendArray15( const V : SingleArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : Single; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongWordArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'ALongWordArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'ALongWordArray') do
  begin
    RegisterProperty('Item', 'LongWord Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'LongWordArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : LongWord)');
    RegisterMethod('Function AppendItem( const Value : LongWord) : Integer');
    RegisterMethod('Function AppendArray13( const V : LongWordArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : LongWord; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AWord64Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AWord64Array') do
  with CL.AddClassN(CL.FindClass('AArray'),'AWord64Array') do
  begin
    RegisterProperty('Item', 'Word64 Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'Word64Array Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Word64)');
    RegisterMethod('Function AppendItem( const Value : Word64) : Integer');
    RegisterMethod('Function AppendArray11( const V : Word64Array) : Integer;');
    RegisterMethod('Function PosNext( const Find : Word64; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AWord32Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AWord32Array') do
  with CL.AddClassN(CL.FindClass('AArray'),'AWord32Array') do
  begin
    RegisterProperty('Item', 'Word32 Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'Word32Array Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Word32)');
    RegisterMethod('Function AppendItem( const Value : Word32) : Integer');
    RegisterMethod('Function AppendArray9( const V : Word32Array) : Integer;');
    RegisterMethod('Function PosNext( const Find : Word32; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongIntArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'ALongIntArray') do
  with CL.AddClassN(CL.FindClass('AArray'),'ALongIntArray') do
  begin
    RegisterProperty('Item', 'LongInt Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'LongIntArray Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : LongInt)');
    RegisterMethod('Function AppendItem( const Value : LongInt) : Integer');
    RegisterMethod('Function AppendArray7( const V : LongIntArray) : Integer;');
    RegisterMethod('Function PosNext( const Find : LongInt; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInt64Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AInt64Array') do
  with CL.AddClassN(CL.FindClass('AArray'),'AInt64Array') do
  begin
    RegisterProperty('Item', 'Int64 Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'Int64Array Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Int64)');
    RegisterMethod('Function AppendItem( const Value : Int64) : Integer');
    RegisterMethod('Function AppendArray5( const V : Int64Array) : Integer;');
    RegisterMethod('Function PosNext( const Find : Int64; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInt32Array(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AArray', 'AInt32Array') do
  with CL.AddClassN(CL.FindClass('AArray'),'AInt32Array') do
  begin
    RegisterProperty('Item', 'Int32 Integer', iptrw);
    SetDefaultPropery('Item');
    RegisterProperty('Range', 'Int32Array Integer Integer', iptrw);
    RegisterMethod('Procedure Fill( const Idx, ACount : Integer; const Value : Int32)');
    RegisterMethod('Function AppendItem( const Value : Int32) : Integer');
    RegisterMethod('Function AppendArray3( const V : Int32Array) : Integer;');
    RegisterMethod('Function PosNext( const Find : Int32; const PrevPos : Integer; const IsSortedAscending : Boolean) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AArray(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AType', 'AArray') do
  with CL.AddClassN(CL.FindClass('AType'),'AArray') do
  begin
    RegisterProperty('Count', 'Integer', iptrw);
    RegisterProperty('ItemAsString', 'String Integer', iptrw);
    RegisterMethod('Function CompareItems( const Idx1, Idx2 : Integer) : TCompareResult');
    RegisterMethod('Procedure ExchangeItems( const Idx1, Idx2 : Integer)');
    RegisterMethod('Procedure Sort');
    RegisterMethod('Procedure ReverseOrder');
    RegisterMethod('Procedure RemoveDuplicates( const IsSortedAscending : Boolean)');
    RegisterMethod('Function DuplicateRange( const LoIdx, HiIdx : Integer) : AArray');
    RegisterMethod('Procedure Delete( const Idx : Integer; const ACount : Integer)');
    RegisterMethod('Procedure Insert( const Idx : Integer; const ACount : Integer)');
    RegisterMethod('Function AppendArray1( const V : AArray) : Integer;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ATypeClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'ATypeClass') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'ATypeClass') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function CreateInstance : AType');
    RegisterMethod('Function Duplicate : TObject');
    RegisterMethod('Procedure Assign( const Source : TObject);');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function IsEmpty : Boolean');
    RegisterMethod('Function IsEqual( const V : TObject) : Boolean');
    RegisterMethod('Function Compare( const V : TObject) : TCompareResult');
    RegisterMethod('Function HashValue : Word32');
    RegisterProperty('AsString', 'String', iptrw);
    RegisterProperty('AsUTF8String', 'RawByteString', iptrw);
    RegisterProperty('AsUnicodeString', 'UnicodeString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_flcDataStructs(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EType');
  SIRegister_ATypeClass(CL);
  //CL.AddTypeS('TypeClass', 'class of AType');
  CL.AddTypeS('ATypeArray', 'array of AType');
  CL.AddTypeS('TypeClassArray', 'array of TypeClass');
 CL.AddDelphiFunction('Function TypeDuplicate( const V : TObject) : TObject');
 CL.AddDelphiFunction('Procedure TypeAssign( const A, B : TObject)');
 CL.AddDelphiFunction('Procedure TypeClear( const V : TObject)');
 CL.AddDelphiFunction('Function TypeIsEqual( const A, B : TObject) : Boolean');
 CL.AddDelphiFunction('Function TypeCompare( const A, B : TObject) : TCompareResult');
 CL.AddDelphiFunction('Function TypeHashValue( const A : TObject) : Word32');
 CL.AddDelphiFunction('Function TypeGetAsString( const V : TObject) : String');
 CL.AddDelphiFunction('Procedure TypeSetAsString( const V : TObject; const S : String)');
 CL.AddDelphiFunction('Function TypeGetAsUTF8String( const V : TObject) : RawByteString');
 CL.AddDelphiFunction('Procedure TypeSetAsUTF8String( const V : TObject; const S : RawByteString)');
 CL.AddDelphiFunction('Function TypeGetAsUnicodeString( const V : TObject) : UnicodeString');
 CL.AddDelphiFunction('Procedure TypeSetAsUnicodeString( const V : TObject; const S : UnicodeString)');
  SIRegister_AArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EArray');
  //CL.AddTypeS('ArrayClass', 'class of AArray');
  SIRegister_AInt32Array(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInt32Array');
  SIRegister_AInt64Array(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInt64Array');
  SIRegister_ALongIntArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongIntArray');
  CL.AddTypeS('AIntegerArray', 'AInt32Array');
  CL.AddTypeS('EIntegerArray', 'EInt32Array');
  SIRegister_AWord32Array(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EWord32Array');
  SIRegister_AWord64Array(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EWord64Array');
  SIRegister_ALongWordArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongWordArray');
  CL.AddTypeS('ACardinalArray', 'AWord32Array');
  CL.AddTypeS('ECardinalArray', 'EWord32Array');
  SIRegister_ASingleArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESingleArray');
  SIRegister_ADoubleArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDoubleArray');
  SIRegister_AExtendedArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EExtendedArray');
  SIRegister_AAnsiStringArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EAnsiStringArray');
  SIRegister_ARawByteStringArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ERawByteStringArray');
  CL.AddTypeS('AUTF8StringArray', 'ARawByteStringArray');
  CL.AddTypeS('EUTF8StringArray', 'ERawByteStringArray');
  SIRegister_AUnicodeStringArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUnicodeStringArray');
  SIRegister_AStringArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStringArray');
  SIRegister_APointerArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPointerArray');
  SIRegister_AInterfaceArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInterfaceArray');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EObjectArray');
  SIRegister_AObjectArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EBitArray');
  SIRegister_ABitArray(CL);
  SIRegister_TInt32Array(CL);
  SIRegister_TInt64Array(CL);
  SIRegister_TLongIntArray(CL);
  CL.AddTypeS('TIntegerArray', 'TInt32Array');
  CL.AddTypeS('TNativeIntArray', 'TInt32Array');
  CL.AddTypeS('TNativeIntArray', 'TInt64Array');
  CL.AddTypeS('TIntArray', 'TInt64Array');
  SIRegister_TWord32Array(CL);
  SIRegister_TWord64Array(CL);
  SIRegister_TLongWordArray(CL);
  CL.AddTypeS('TCardinalArray', 'TWord32Array');
  CL.AddTypeS('TUInt32Array', 'Word32Array');
  CL.AddTypeS('TUInt64Array', 'Word64Array');
  CL.AddTypeS('TNativeUIntArray', 'TUInt32Array');
  CL.AddTypeS('TNativeUIntArray', 'TUInt64Array');
  CL.AddTypeS('TNativeWordArray', 'TNativeUIntArray');
  CL.AddTypeS('TUIntArray', 'TUInt64Array');
  SIRegister_TSingleArray(CL);
  SIRegister_TDoubleArray(CL);
  SIRegister_TExtendedArray(CL);
  SIRegister_TAnsiStringArray(CL);
  SIRegister_TRawByteStringArray(CL);
  CL.AddTypeS('TUTF8StringArray', 'TRawByteStringArray');
  SIRegister_TUnicodeStringArray(CL);
  SIRegister_TStringArray(CL);
  SIRegister_TPointerArray(CL);
  SIRegister_TInterfaceArray(CL);
  SIRegister_TObjectArray(CL);
  SIRegister_TBitArray(CL);
  SIRegister_THashedAnsiStringArray(CL);
  SIRegister_THashedRawByteStringArray(CL);
  SIRegister_THashedUnicodeStringArray(CL);
  CL.AddTypeS('TDictionaryDuplicatesAction', '( ddError, ddAccept, ddIgnore )');
  SIRegister_ADictionaryBase(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDictionary');
  SIRegister_ADictionaryA(CL);
  SIRegister_ADictionaryB(CL);
  SIRegister_ADictionaryU(CL);
  SIRegister_ADictionary(CL);
  SIRegister_ALongIntDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongIntDictionaryA');
  SIRegister_ALongIntDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongIntDictionaryB');
  SIRegister_ALongIntDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongIntDictionaryU');
  SIRegister_ALongIntDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongIntDictionary');
  CL.AddTypeS('AIntegerDictionaryA', 'ALongIntDictionaryA');
  CL.AddTypeS('AIntegerDictionaryB', 'ALongIntDictionaryB');
  CL.AddTypeS('AIntegerDictionaryU', 'ALongIntDictionaryU');
  CL.AddTypeS('AIntegerDictionary', 'ALongIntDictionary');
  SIRegister_ALongWordDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongWordDictionaryA');
  SIRegister_ALongWordDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongWordDictionaryB');
  SIRegister_ALongWordDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongWordDictionaryU');
  SIRegister_ALongWordDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongWordDictionary');
  CL.AddTypeS('ACardinalDictionaryA', 'ALongWordDictionaryA');
  CL.AddTypeS('ACardinalDictionaryB', 'ALongWordDictionaryB');
  CL.AddTypeS('ACardinalDictionaryU', 'ALongWordDictionaryU');
  CL.AddTypeS('ACardinalDictionary', 'ALongWordDictionary');
  SIRegister_AInt64DictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInt64DictionaryA');
  SIRegister_AInt64DictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInt64DictionaryB');
  SIRegister_AInt64DictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInt64DictionaryU');
  SIRegister_AInt64Dictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInt64Dictionary');
  SIRegister_ASingleDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESingleDictionaryA');
  SIRegister_ASingleDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESingleDictionaryB');
  SIRegister_ASingleDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESingleDictionaryU');
  SIRegister_ASingleDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESingleDictionary');
  SIRegister_ADoubleDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDoubleDictionaryA');
  SIRegister_ADoubleDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDoubleDictionaryB');
  SIRegister_ADoubleDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDoubleDictionaryU');
  SIRegister_ADoubleDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDoubleDictionary');
  SIRegister_AExtendedDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EExtendedDictionaryA');
  SIRegister_AExtendedDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EExtendedDictionaryB');
  SIRegister_AExtendedDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EExtendedDictionaryU');
  SIRegister_AExtendedDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EExtendedDictionary');
  SIRegister_AAnsiStringDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EAnsiStringDictionaryA');
  SIRegister_AAnsiStringDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EAnsiStringDictionaryU');
  SIRegister_AAnsiStringDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EAnsiStringDictionary');
  SIRegister_ARawByteStringDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ERawByteStringDictionaryA');
  SIRegister_ARawByteStringDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ERawByteStringDictionaryB');
  SIRegister_ARawByteStringDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ERawByteStringDictionaryU');
  SIRegister_ARawByteStringDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ERawByteStringDictionary');
  SIRegister_AUnicodeStringDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUnicodeStringDictionaryA');
  SIRegister_AUnicodeStringDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUnicodeStringDictionaryU');
  SIRegister_AUnicodeStringDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUnicodeStringDictionary');
  SIRegister_AStringDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStringDictionaryA');
  SIRegister_AStringDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStringDictionaryU');
  SIRegister_AStringDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStringDictionary');
  SIRegister_APointerDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPointerDictionaryA');
  SIRegister_APointerDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPointerDictionaryB');
  SIRegister_APointerDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPointerDictionaryU');
  SIRegister_APointerDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPointerDictionary');
  SIRegister_AInterfaceDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInterfaceDictionaryA');
  SIRegister_AInterfaceDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInterfaceDictionaryU');
  SIRegister_AInterfaceDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInterfaceDictionary');
  SIRegister_AObjectDictionaryA(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EObjectDictionaryA');
  SIRegister_AObjectDictionaryB(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EObjectDictionaryB');
  SIRegister_AObjectDictionaryU(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EObjectDictionaryU');
  SIRegister_AObjectDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EObjectDictionary');
  SIRegister_TGeneralLongIntDictionaryA(CL);
  SIRegister_TLongIntDictionaryA(CL);
  SIRegister_TGeneralLongIntDictionaryB(CL);
  SIRegister_TLongIntDictionaryB(CL);
  SIRegister_TGeneralLongIntDictionaryU(CL);
  SIRegister_TLongIntDictionaryU(CL);
  SIRegister_TGeneralLongIntDictionary(CL);
  SIRegister_TLongIntDictionary(CL);
  CL.AddTypeS('TGeneralIntegerDictionaryA', 'TGeneralLongIntDictionaryA');
  CL.AddTypeS('TGeneralIntegerDictionary', 'TGeneralLongIntDictionary');
  CL.AddTypeS('TIntegerDictionaryA', 'TLongIntDictionaryA');
  CL.AddTypeS('TIntegerDictionary', 'TLongIntDictionary');
  SIRegister_TGeneralLongWordDictionaryA(CL);
  SIRegister_TLongWordDictionaryA(CL);
  SIRegister_TGeneralLongWordDictionaryB(CL);
  SIRegister_TLongWordDictionaryB(CL);
  SIRegister_TGeneralLongWordDictionaryU(CL);
  SIRegister_TLongWordDictionaryU(CL);
  SIRegister_TGeneralLongWordDictionary(CL);
  SIRegister_TLongWordDictionary(CL);
  CL.AddTypeS('TGeneralCardinalDictionaryA', 'TGeneralLongWordDictionaryA');
  CL.AddTypeS('TGeneralCardinalDictionaryU', 'TGeneralLongWordDictionaryU');
  CL.AddTypeS('TGeneralCardinalDictionary', 'TGeneralLongWordDictionary');
  CL.AddTypeS('TCardinalDictionaryA', 'TLongWordDictionaryA');
  CL.AddTypeS('TCardinalDictionaryU', 'TLongWordDictionaryU');
  CL.AddTypeS('TCardinalDictionary', 'TLongWordDictionary');
  SIRegister_TGeneralInt64DictionaryA(CL);
  SIRegister_TInt64DictionaryA(CL);
  SIRegister_TGeneralInt64DictionaryB(CL);
  SIRegister_TInt64DictionaryB(CL);
  SIRegister_TGeneralInt64DictionaryU(CL);
  SIRegister_TInt64DictionaryU(CL);
  SIRegister_TGeneralInt64Dictionary(CL);
  SIRegister_TInt64Dictionary(CL);
  SIRegister_TGeneralSingleDictionaryA(CL);
  SIRegister_TSingleDictionaryA(CL);
  SIRegister_TGeneralSingleDictionaryB(CL);
  SIRegister_TSingleDictionaryB(CL);
  SIRegister_TGeneralSingleDictionaryU(CL);
  SIRegister_TSingleDictionaryU(CL);
  SIRegister_TGeneralSingleDictionary(CL);
  SIRegister_TSingleDictionary(CL);
  SIRegister_TGeneralDoubleDictionaryA(CL);
  SIRegister_TDoubleDictionaryA(CL);
  SIRegister_TGeneralDoubleDictionaryB(CL);
  SIRegister_TDoubleDictionaryB(CL);
  SIRegister_TGeneralDoubleDictionaryU(CL);
  SIRegister_TDoubleDictionaryU(CL);
  SIRegister_TGeneralDoubleDictionary(CL);
  SIRegister_TDoubleDictionary(CL);
  SIRegister_TGeneralExtendedDictionaryA(CL);
  SIRegister_TExtendedDictionaryA(CL);
  SIRegister_TGeneralExtendedDictionaryB(CL);
  SIRegister_TExtendedDictionaryB(CL);
  SIRegister_TGeneralExtendedDictionaryU(CL);
  SIRegister_TExtendedDictionaryU(CL);
  SIRegister_TGeneralExtendedDictionary(CL);
  SIRegister_TExtendedDictionary(CL);
  SIRegister_TGeneralAnsiStringDictionaryA(CL);
  SIRegister_TAnsiStringDictionaryA(CL);
  SIRegister_TGeneralAnsiStringDictionaryU(CL);
  SIRegister_TAnsiStringDictionaryU(CL);
  SIRegister_TGeneralAnsiStringDictionary(CL);
  SIRegister_TAnsiStringDictionary(CL);
  SIRegister_TGeneralRawByteStringDictionaryA(CL);
  SIRegister_TRawByteStringDictionaryA(CL);
  SIRegister_TGeneralRawByteStringDictionaryB(CL);
  SIRegister_TRawByteStringDictionaryB(CL);
  SIRegister_TGeneralRawByteStringDictionaryU(CL);
  SIRegister_TRawByteStringDictionaryU(CL);
  SIRegister_TGeneralRawByteStringDictionary(CL);
  SIRegister_TRawByteStringDictionary(CL);
  SIRegister_TGeneralUnicodeStringDictionaryA(CL);
  SIRegister_TUnicodeStringDictionaryA(CL);
  SIRegister_TGeneralUnicodeStringDictionaryU(CL);
  SIRegister_TUnicodeStringDictionaryU(CL);
  SIRegister_TGeneralUnicodeStringDictionary(CL);
  SIRegister_TUnicodeStringDictionary(CL);
  SIRegister_TGeneralStringDictionaryA(CL);
  SIRegister_TStringDictionaryA(CL);
  SIRegister_TGeneralStringDictionaryU(CL);
  SIRegister_TStringDictionaryU(CL);
  SIRegister_TGeneralStringDictionary(CL);
  SIRegister_TStringDictionary(CL);
  SIRegister_TGeneralPointerDictionaryA(CL);
  SIRegister_TPointerDictionaryA(CL);
  SIRegister_TGeneralPointerDictionaryB(CL);
  SIRegister_TPointerDictionaryB(CL);
  SIRegister_TGeneralPointerDictionaryU(CL);
  SIRegister_TPointerDictionaryU(CL);
  SIRegister_TGeneralPointerDictionary(CL);
  SIRegister_TPointerDictionary(CL);
  SIRegister_TGeneralInterfaceDictionaryA(CL);
  SIRegister_TInterfaceDictionaryA(CL);
  SIRegister_TGeneralInterfaceDictionaryU(CL);
  SIRegister_TInterfaceDictionaryU(CL);
  SIRegister_TGeneralInterfaceDictionary(CL);
  SIRegister_TInterfaceDictionary(CL);
  SIRegister_TGeneralObjectDictionaryA(CL);
  SIRegister_TObjectDictionaryA(CL);
  SIRegister_TGeneralObjectDictionaryB(CL);
  SIRegister_TObjectDictionaryB(CL);
  SIRegister_TGeneralObjectDictionaryU(CL);
  SIRegister_TObjectDictionaryU(CL);
  SIRegister_TGeneralObjectDictionary(CL);
  SIRegister_TObjectDictionary(CL);
 CL.AddConstantN('DictionaryAverageHashChainSize','LongInt').SetInt( 4);
 CL.AddDelphiFunction('Function DictionaryRehashSize( const Count : Integer) : Integer');
  SIRegister_ASparseArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESparseArray');
  CL.AddTypeS('TSparseAnsiStringRecord', 'record Idx : Integer; Value : AnsiStr'
   +'ing; end');
  CL.AddTypeS('PSparseAnsiStringRecord', '^TSparseAnsiStringRecord // will not '
   +'work');
  CL.AddTypeS('TSparseAnsiStringRecordArray', 'array of TSparseAnsiStringRecord');
  CL.AddTypeS('TSparseAnsiStringArrayHashList', 'array of TSparseAnsiStringReco'
   +'rdArray');
  SIRegister_TSparseAnsiStringArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESparseAnsiStringArray');
  CL.AddTypeS('TSparseInt64Record', 'record Idx : Integer; Value : Int64; end');
  CL.AddTypeS('PSparseInt64Record', '^TSparseInt64Record // will not work');
  CL.AddTypeS('TSparseInt64RecordArray', 'array of TSparseInt64Record');
  CL.AddTypeS('TSparseInt64ArrayHashList', 'array of TSparseInt64RecordArray');
  SIRegister_TSparseInt64Array(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESparseInt64Array');
  CL.AddTypeS('TSparseExtendedRecord', 'record Idx : Integer; Value : Extended;'
   +' end');
  CL.AddTypeS('PSparseExtendedRecord', '^TSparseExtendedRecord // will not work');
  CL.AddTypeS('TSparseExtendedRecordArray', 'array of TSparseExtendedRecord');
  CL.AddTypeS('TSparseExtendedArrayHashList', 'array of TSparseExtendedRecordAr'
   +'ray');
  SIRegister_TSparseExtendedArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESparseExtendedArray');
  CL.AddTypeS('TSparseObjectRecord', 'record Idx : Integer; Value : TObject; en'
   +'d');
  CL.AddTypeS('PSparseObjectRecord', '^TSparseObjectRecord // will not work');
  CL.AddTypeS('TSparseObjectRecordArray', 'array of TSparseObjectRecord');
  CL.AddTypeS('TSparseObjectArrayHashList', 'array of TSparseObjectRecordArray');
  SIRegister_TSparseObjectArray(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESparseObjectArray');
  SIRegister_TDoublyLinkedItem(CL);
  SIRegister_TDoublyLinkedInteger(CL);
  SIRegister_TDoublyLinkedExtended(CL);
  SIRegister_TDoublyLinkedString(CL);
  SIRegister_TDoublyLinkedObject(CL);
 CL.AddDelphiFunction('Function AsDoublyLinkedIntegerList( const V : array of Integer) : TDoublyLinkedInteger');
 CL.AddDelphiFunction('Function AsDoublyLinkedExtendedList( const V : array of Extended) : TDoublyLinkedExtended');
 CL.AddDelphiFunction('Function AsDoublyLinkedStringList( const V : array of AnsiString) : TDoublyLinkedString');
  SIRegister_TDoublyLinkedList(CL);
 CL.AddDelphiFunction('Procedure Test');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedListCount_R(Self: TDoublyLinkedList; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedListLast_R(Self: TDoublyLinkedList; var T: TDoublyLinkedItem);
begin T := Self.Last; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedListFirst_R(Self: TDoublyLinkedList; var T: TDoublyLinkedItem);
begin T := Self.First; end;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedObjectInsertBefore111_P(Self: TDoublyLinkedObject;  const V : TObject);
Begin Self.InsertBefore(V); END;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedObjectInsertAfter110_P(Self: TDoublyLinkedObject;  const V : TObject);
Begin Self.InsertAfter(V); END;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedObjectValue_W(Self: TDoublyLinkedObject; const T: TObject);
Begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedObjectValue_R(Self: TDoublyLinkedObject; var T: TObject);
Begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedStringInsertBefore109_P(Self: TDoublyLinkedString;  const V : AnsiString);
Begin Self.InsertBefore(V); END;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedStringInsertAfter108_P(Self: TDoublyLinkedString;  const V : AnsiString);
Begin Self.InsertAfter(V); END;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedStringValue_W(Self: TDoublyLinkedString; const T: AnsiString);
Begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedStringValue_R(Self: TDoublyLinkedString; var T: AnsiString);
Begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedExtendedInsertBefore107_P(Self: TDoublyLinkedExtended;  const V : Extended);
Begin Self.InsertBefore(V); END;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedExtendedInsertAfter106_P(Self: TDoublyLinkedExtended;  const V : Extended);
Begin Self.InsertAfter(V); END;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedExtendedValue_W(Self: TDoublyLinkedExtended; const T: Extended);
Begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedExtendedValue_R(Self: TDoublyLinkedExtended; var T: Extended);
Begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedIntegerInsertBefore105_P(Self: TDoublyLinkedInteger;  const V : Integer);
Begin Self.InsertBefore(V); END;

(*----------------------------------------------------------------------------*)
Procedure TDoublyLinkedIntegerInsertAfter104_P(Self: TDoublyLinkedInteger;  const V : Integer);
Begin Self.InsertAfter(V); END;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedIntegerValue_W(Self: TDoublyLinkedInteger; const T: Integer);
Begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedIntegerValue_R(Self: TDoublyLinkedInteger; var T: Integer);
Begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedItemPrev_W(Self: TDoublyLinkedItem; const T: TDoublyLinkedItem);
begin Self.Prev := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedItemPrev_R(Self: TDoublyLinkedItem; var T: TDoublyLinkedItem);
begin T := Self.Prev; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedItemNext_W(Self: TDoublyLinkedItem; const T: TDoublyLinkedItem);
begin Self.Next := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoublyLinkedItemNext_R(Self: TDoublyLinkedItem; var T: TDoublyLinkedItem);
begin T := Self.Next; end;

(*----------------------------------------------------------------------------*)
procedure TSparseObjectArrayCount_R(Self: TSparseObjectArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TSparseObjectArrayItem_W(Self: TSparseObjectArray; const T: TObject; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSparseObjectArrayItem_R(Self: TSparseObjectArray; var T: TObject; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSparseObjectArrayIsItemOwner_W(Self: TSparseObjectArray; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure TSparseObjectArrayIsItemOwner_R(Self: TSparseObjectArray; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
procedure TSparseExtendedArrayCount_R(Self: TSparseExtendedArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TSparseExtendedArrayItem_W(Self: TSparseExtendedArray; const T: Extended; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSparseExtendedArrayItem_R(Self: TSparseExtendedArray; var T: Extended; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSparseInt64ArrayCount_R(Self: TSparseInt64Array; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TSparseInt64ArrayItem_W(Self: TSparseInt64Array; const T: Int64; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSparseInt64ArrayItem_R(Self: TSparseInt64Array; var T: Int64; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSparseAnsiStringArrayCount_R(Self: TSparseAnsiStringArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TSparseAnsiStringArrayItem_W(Self: TSparseAnsiStringArray; const T: AnsiString; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSparseAnsiStringArrayItem_R(Self: TSparseAnsiStringArray; var T: AnsiString; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ASparseArrayCount_R(Self: ASparseArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryHashTableSize_R(Self: TGeneralObjectDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryValues_R(Self: TGeneralObjectDictionary; var T: TObjectArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryKeys_R(Self: TGeneralObjectDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryUHashTableSize_R(Self: TGeneralObjectDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryUValues_R(Self: TGeneralObjectDictionaryU; var T: TObjectArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryUKeys_R(Self: TGeneralObjectDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryBHashTableSize_R(Self: TGeneralObjectDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryBValues_R(Self: TGeneralObjectDictionaryB; var T: TObjectArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryBKeys_R(Self: TGeneralObjectDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryAHashTableSize_R(Self: TGeneralObjectDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryAValues_R(Self: TGeneralObjectDictionaryA; var T: TObjectArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryAKeys_R(Self: TGeneralObjectDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryHashTableSize_R(Self: TGeneralInterfaceDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryValues_R(Self: TGeneralInterfaceDictionary; var T: TInterfaceArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryKeys_R(Self: TGeneralInterfaceDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryUHashTableSize_R(Self: TGeneralInterfaceDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryUValues_R(Self: TGeneralInterfaceDictionaryU; var T: TInterfaceArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryUKeys_R(Self: TGeneralInterfaceDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryAHashTableSize_R(Self: TGeneralInterfaceDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryAValues_R(Self: TGeneralInterfaceDictionaryA; var T: TInterfaceArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryAKeys_R(Self: TGeneralInterfaceDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryHashTableSize_R(Self: TGeneralPointerDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryValues_R(Self: TGeneralPointerDictionary; var T: TPointerArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryKeys_R(Self: TGeneralPointerDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryUHashTableSize_R(Self: TGeneralPointerDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryUValues_R(Self: TGeneralPointerDictionaryU; var T: TPointerArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryUKeys_R(Self: TGeneralPointerDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryBHashTableSize_R(Self: TGeneralPointerDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryBValues_R(Self: TGeneralPointerDictionaryB; var T: TPointerArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryBKeys_R(Self: TGeneralPointerDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryAHashTableSize_R(Self: TGeneralPointerDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryAValues_R(Self: TGeneralPointerDictionaryA; var T: TPointerArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryAKeys_R(Self: TGeneralPointerDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryHashTableSize_R(Self: TGeneralStringDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryValues_R(Self: TGeneralStringDictionary; var T: TStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryKeys_R(Self: TGeneralStringDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryUHashTableSize_R(Self: TGeneralStringDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryUValues_R(Self: TGeneralStringDictionaryU; var T: TStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryUKeys_R(Self: TGeneralStringDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryAHashTableSize_R(Self: TGeneralStringDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryAValues_R(Self: TGeneralStringDictionaryA; var T: TStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryAKeys_R(Self: TGeneralStringDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryHashTableSize_R(Self: TGeneralUnicodeStringDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryValues_R(Self: TGeneralUnicodeStringDictionary; var T: TUnicodeStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryKeys_R(Self: TGeneralUnicodeStringDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryUHashTableSize_R(Self: TGeneralUnicodeStringDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryUValues_R(Self: TGeneralUnicodeStringDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryUKeys_R(Self: TGeneralUnicodeStringDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryAHashTableSize_R(Self: TGeneralUnicodeStringDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryAValues_R(Self: TGeneralUnicodeStringDictionaryA; var T: TUnicodeStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralUnicodeStringDictionaryAKeys_R(Self: TGeneralUnicodeStringDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryHashTableSize_R(Self: TGeneralRawByteStringDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryValues_R(Self: TGeneralRawByteStringDictionary; var T: TRawByteStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryKeys_R(Self: TGeneralRawByteStringDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryUHashTableSize_R(Self: TGeneralRawByteStringDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryUValues_R(Self: TGeneralRawByteStringDictionaryU; var T: TRawByteStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryUKeys_R(Self: TGeneralRawByteStringDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryBHashTableSize_R(Self: TGeneralRawByteStringDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryBValues_R(Self: TGeneralRawByteStringDictionaryB; var T: TRawByteStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryBKeys_R(Self: TGeneralRawByteStringDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryAHashTableSize_R(Self: TGeneralRawByteStringDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryAValues_R(Self: TGeneralRawByteStringDictionaryA; var T: TRawByteStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralRawByteStringDictionaryAKeys_R(Self: TGeneralRawByteStringDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryHashTableSize_R(Self: TGeneralAnsiStringDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryValues_R(Self: TGeneralAnsiStringDictionary; var T: TAnsiStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryKeys_R(Self: TGeneralAnsiStringDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryUHashTableSize_R(Self: TGeneralAnsiStringDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryUValues_R(Self: TGeneralAnsiStringDictionaryU; var T: TAnsiStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryUKeys_R(Self: TGeneralAnsiStringDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryAHashTableSize_R(Self: TGeneralAnsiStringDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryAValues_R(Self: TGeneralAnsiStringDictionaryA; var T: TAnsiStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralAnsiStringDictionaryAKeys_R(Self: TGeneralAnsiStringDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryHashTableSize_R(Self: TGeneralExtendedDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryValues_R(Self: TGeneralExtendedDictionary; var T: TExtendedArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryKeys_R(Self: TGeneralExtendedDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryUHashTableSize_R(Self: TGeneralExtendedDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryUValues_R(Self: TGeneralExtendedDictionaryU; var T: TExtendedArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryUKeys_R(Self: TGeneralExtendedDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryBHashTableSize_R(Self: TGeneralExtendedDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryBValues_R(Self: TGeneralExtendedDictionaryB; var T: TExtendedArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryBKeys_R(Self: TGeneralExtendedDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryAHashTableSize_R(Self: TGeneralExtendedDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryAValues_R(Self: TGeneralExtendedDictionaryA; var T: TExtendedArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryAKeys_R(Self: TGeneralExtendedDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryHashTableSize_R(Self: TGeneralDoubleDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryValues_R(Self: TGeneralDoubleDictionary; var T: TDoubleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryKeys_R(Self: TGeneralDoubleDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryUHashTableSize_R(Self: TGeneralDoubleDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryUValues_R(Self: TGeneralDoubleDictionaryU; var T: TDoubleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryUKeys_R(Self: TGeneralDoubleDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryBHashTableSize_R(Self: TGeneralDoubleDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryBValues_R(Self: TGeneralDoubleDictionaryB; var T: TDoubleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryBKeys_R(Self: TGeneralDoubleDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryAHashTableSize_R(Self: TGeneralDoubleDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryAValues_R(Self: TGeneralDoubleDictionaryA; var T: TDoubleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryAKeys_R(Self: TGeneralDoubleDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryHashTableSize_R(Self: TGeneralSingleDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryValues_R(Self: TGeneralSingleDictionary; var T: TSingleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryKeys_R(Self: TGeneralSingleDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryUHashTableSize_R(Self: TGeneralSingleDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryUValues_R(Self: TGeneralSingleDictionaryU; var T: TSingleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryUKeys_R(Self: TGeneralSingleDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryBHashTableSize_R(Self: TGeneralSingleDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryBValues_R(Self: TGeneralSingleDictionaryB; var T: TSingleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryBKeys_R(Self: TGeneralSingleDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryAHashTableSize_R(Self: TGeneralSingleDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryAValues_R(Self: TGeneralSingleDictionaryA; var T: TSingleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryAKeys_R(Self: TGeneralSingleDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryHashTableSize_R(Self: TGeneralInt64Dictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryValues_R(Self: TGeneralInt64Dictionary; var T: TInt64Array);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryKeys_R(Self: TGeneralInt64Dictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryUHashTableSize_R(Self: TGeneralInt64DictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryUValues_R(Self: TGeneralInt64DictionaryU; var T: TInt64Array);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryUKeys_R(Self: TGeneralInt64DictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryBHashTableSize_R(Self: TGeneralInt64DictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryBValues_R(Self: TGeneralInt64DictionaryB; var T: TInt64Array);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryBKeys_R(Self: TGeneralInt64DictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryAHashTableSize_R(Self: TGeneralInt64DictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryAValues_R(Self: TGeneralInt64DictionaryA; var T: TInt64Array);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryAKeys_R(Self: TGeneralInt64DictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryHashTableSize_R(Self: TGeneralLongWordDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryValues_R(Self: TGeneralLongWordDictionary; var T: TLongWordArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryKeys_R(Self: TGeneralLongWordDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryUHashTableSize_R(Self: TGeneralLongWordDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryUValues_R(Self: TGeneralLongWordDictionaryU; var T: TLongWordArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryUKeys_R(Self: TGeneralLongWordDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryBHashTableSize_R(Self: TGeneralLongWordDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryBValues_R(Self: TGeneralLongWordDictionaryB; var T: TLongWordArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryBKeys_R(Self: TGeneralLongWordDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryAHashTableSize_R(Self: TGeneralLongWordDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryAValues_R(Self: TGeneralLongWordDictionaryA; var T: TLongWordArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryAKeys_R(Self: TGeneralLongWordDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryHashTableSize_R(Self: TGeneralLongIntDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryValues_R(Self: TGeneralLongIntDictionary; var T: TLongIntArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryKeys_R(Self: TGeneralLongIntDictionary; var T: TStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryUHashTableSize_R(Self: TGeneralLongIntDictionaryU; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryUValues_R(Self: TGeneralLongIntDictionaryU; var T: TLongIntArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryUKeys_R(Self: TGeneralLongIntDictionaryU; var T: TUnicodeStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryBHashTableSize_R(Self: TGeneralLongIntDictionaryB; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryBValues_R(Self: TGeneralLongIntDictionaryB; var T: TLongIntArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryBKeys_R(Self: TGeneralLongIntDictionaryB; var T: TRawByteStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryAHashTableSize_R(Self: TGeneralLongIntDictionaryA; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryAValues_R(Self: TGeneralLongIntDictionaryA; var T: TLongIntArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryAKeys_R(Self: TGeneralLongIntDictionaryA; var T: TAnsiStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryIsItemOwner_W(Self: AObjectDictionary; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryIsItemOwner_R(Self: AObjectDictionary; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryItem_W(Self: AObjectDictionary; const T: TObject; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryItem_R(Self: AObjectDictionary; var T: TObject; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryUIsItemOwner_W(Self: AObjectDictionaryU; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryUIsItemOwner_R(Self: AObjectDictionaryU; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryUItem_W(Self: AObjectDictionaryU; const T: TObject; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryUItem_R(Self: AObjectDictionaryU; var T: TObject; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryBIsItemOwner_W(Self: AObjectDictionaryB; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryBIsItemOwner_R(Self: AObjectDictionaryB; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryBItem_W(Self: AObjectDictionaryB; const T: TObject; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryBItem_R(Self: AObjectDictionaryB; var T: TObject; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryAIsItemOwner_W(Self: AObjectDictionaryA; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryAIsItemOwner_R(Self: AObjectDictionaryA; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryAItem_W(Self: AObjectDictionaryA; const T: TObject; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryAItem_R(Self: AObjectDictionaryA; var T: TObject; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryItem_W(Self: AInterfaceDictionary; const T: IInterface; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryItem_R(Self: AInterfaceDictionary; var T: IInterface; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryUItem_W(Self: AInterfaceDictionaryU; const T: IInterface; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryUItem_R(Self: AInterfaceDictionaryU; var T: IInterface; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryAItem_W(Self: AInterfaceDictionaryA; const T: IInterface; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryAItem_R(Self: AInterfaceDictionaryA; var T: IInterface; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryItem_W(Self: APointerDictionary; const T: Pointer; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryItem_R(Self: APointerDictionary; var T: Pointer; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryUItem_W(Self: APointerDictionaryU; const T: Pointer; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryUItem_R(Self: APointerDictionaryU; var T: Pointer; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryBItem_W(Self: APointerDictionaryB; const T: Pointer; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryBItem_R(Self: APointerDictionaryB; var T: Pointer; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryAItem_W(Self: APointerDictionaryA; const T: Pointer; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryAItem_R(Self: APointerDictionaryA; var T: Pointer; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryItem_W(Self: AStringDictionary; const T: String; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryItem_R(Self: AStringDictionary; var T: String; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryUItem_W(Self: AStringDictionaryU; const T: String; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryUItem_R(Self: AStringDictionaryU; var T: String; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryAItem_W(Self: AStringDictionaryA; const T: String; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryAItem_R(Self: AStringDictionaryA; var T: String; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringDictionaryItem_W(Self: AUnicodeStringDictionary; const T: UnicodeString; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringDictionaryItem_R(Self: AUnicodeStringDictionary; var T: UnicodeString; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringDictionaryUItem_W(Self: AUnicodeStringDictionaryU; const T: UnicodeString; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringDictionaryUItem_R(Self: AUnicodeStringDictionaryU; var T: UnicodeString; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringDictionaryAItem_W(Self: AUnicodeStringDictionaryA; const T: UnicodeString; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringDictionaryAItem_R(Self: AUnicodeStringDictionaryA; var T: UnicodeString; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryItem_W(Self: ARawByteStringDictionary; const T: RawByteString; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryItem_R(Self: ARawByteStringDictionary; var T: RawByteString; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryUItem_W(Self: ARawByteStringDictionaryU; const T: RawByteString; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryUItem_R(Self: ARawByteStringDictionaryU; var T: RawByteString; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryBItem_W(Self: ARawByteStringDictionaryB; const T: RawByteString; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryBItem_R(Self: ARawByteStringDictionaryB; var T: RawByteString; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryAItem_W(Self: ARawByteStringDictionaryA; const T: RawByteString; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringDictionaryAItem_R(Self: ARawByteStringDictionaryA; var T: RawByteString; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringDictionaryItem_W(Self: AAnsiStringDictionary; const T: AnsiString; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringDictionaryItem_R(Self: AAnsiStringDictionary; var T: AnsiString; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringDictionaryUItem_W(Self: AAnsiStringDictionaryU; const T: AnsiString; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringDictionaryUItem_R(Self: AAnsiStringDictionaryU; var T: AnsiString; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringDictionaryAItem_W(Self: AAnsiStringDictionaryA; const T: AnsiString; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringDictionaryAItem_R(Self: AAnsiStringDictionaryA; var T: AnsiString; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryItem_W(Self: AExtendedDictionary; const T: Extended; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryItem_R(Self: AExtendedDictionary; var T: Extended; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryUItem_W(Self: AExtendedDictionaryU; const T: Extended; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryUItem_R(Self: AExtendedDictionaryU; var T: Extended; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryBItem_W(Self: AExtendedDictionaryB; const T: Extended; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryBItem_R(Self: AExtendedDictionaryB; var T: Extended; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryAItem_W(Self: AExtendedDictionaryA; const T: Extended; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryAItem_R(Self: AExtendedDictionaryA; var T: Extended; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryItem_W(Self: ADoubleDictionary; const T: Double; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryItem_R(Self: ADoubleDictionary; var T: Double; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryUItem_W(Self: ADoubleDictionaryU; const T: Double; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryUItem_R(Self: ADoubleDictionaryU; var T: Double; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryBItem_W(Self: ADoubleDictionaryB; const T: Double; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryBItem_R(Self: ADoubleDictionaryB; var T: Double; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryAItem_W(Self: ADoubleDictionaryA; const T: Double; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryAItem_R(Self: ADoubleDictionaryA; var T: Double; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryItem_W(Self: ASingleDictionary; const T: Single; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryItem_R(Self: ASingleDictionary; var T: Single; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryUItem_W(Self: ASingleDictionaryU; const T: Single; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryUItem_R(Self: ASingleDictionaryU; var T: Single; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryBItem_W(Self: ASingleDictionaryB; const T: Single; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryBItem_R(Self: ASingleDictionaryB; var T: Single; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryAItem_W(Self: ASingleDictionaryA; const T: Single; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryAItem_R(Self: ASingleDictionaryA; var T: Single; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryItem_W(Self: AInt64Dictionary; const T: Int64; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryItem_R(Self: AInt64Dictionary; var T: Int64; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryUItem_W(Self: AInt64DictionaryU; const T: Int64; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryUItem_R(Self: AInt64DictionaryU; var T: Int64; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryBItem_W(Self: AInt64DictionaryB; const T: Int64; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryBItem_R(Self: AInt64DictionaryB; var T: Int64; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryAItem_W(Self: AInt64DictionaryA; const T: Int64; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryAItem_R(Self: AInt64DictionaryA; var T: Int64; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryItem_W(Self: ALongWordDictionary; const T: LongWord; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryItem_R(Self: ALongWordDictionary; var T: LongWord; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryUItem_W(Self: ALongWordDictionaryU; const T: LongWord; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryUItem_R(Self: ALongWordDictionaryU; var T: LongWord; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryBItem_W(Self: ALongWordDictionaryB; const T: LongWord; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryBItem_R(Self: ALongWordDictionaryB; var T: LongWord; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryAItem_W(Self: ALongWordDictionaryA; const T: LongWord; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryAItem_R(Self: ALongWordDictionaryA; var T: LongWord; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryItem_W(Self: ALongIntDictionary; const T: LongInt; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryItem_R(Self: ALongIntDictionary; var T: LongInt; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryUItem_W(Self: ALongIntDictionaryU; const T: LongInt; const t1: UnicodeString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryUItem_R(Self: ALongIntDictionaryU; var T: LongInt; const t1: UnicodeString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryBItem_W(Self: ALongIntDictionaryB; const T: LongInt; const t1: RawByteString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryBItem_R(Self: ALongIntDictionaryB; var T: LongInt; const t1: RawByteString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryAItem_W(Self: ALongIntDictionaryA; const T: LongInt; const t1: AnsiString);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryAItem_R(Self: ALongIntDictionaryA; var T: LongInt; const t1: AnsiString);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryKeysCaseSensitive_R(Self: ADictionary; var T: Boolean);
begin T := Self.KeysCaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryUKeysCaseSensitive_R(Self: ADictionaryU; var T: Boolean);
begin T := Self.KeysCaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryBKeysCaseSensitive_R(Self: ADictionaryB; var T: Boolean);
begin T := Self.KeysCaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryAKeysCaseSensitive_R(Self: ADictionaryA; var T: Boolean);
begin T := Self.KeysCaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryBaseDuplicatesAction_W(Self: ADictionaryBase; const T: TDictionaryDuplicatesAction);
begin Self.DuplicatesAction := T; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryBaseDuplicatesAction_R(Self: ADictionaryBase; var T: TDictionaryDuplicatesAction);
begin T := Self.DuplicatesAction; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryBaseAddOnSet_W(Self: ADictionaryBase; const T: Boolean);
begin Self.AddOnSet := T; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryBaseAddOnSet_R(Self: ADictionaryBase; var T: Boolean);
begin T := Self.AddOnSet; end;

(*----------------------------------------------------------------------------*)
procedure TObjectArrayIsItemOwner_W(Self: TObjectArray; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectArrayIsItemOwner_R(Self: TObjectArray; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
procedure TObjectArrayCount_W(Self: TObjectArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectArrayCount_R(Self: TObjectArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TObjectArrayData_W(Self: TObjectArray; const T: ObjectArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectArrayData_R(Self: TObjectArray; var T: ObjectArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Function TObjectArrayCreate103_P(Self: TClass; CreateNewInstance: Boolean;  const V : ObjectArray; const AIsItemOwner : Boolean):TObject;
Begin Result := TObjectArray.Create(V, AIsItemOwner); END;

(*----------------------------------------------------------------------------*)
procedure TInterfaceArrayCount_W(Self: TInterfaceArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceArrayCount_R(Self: TInterfaceArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceArrayData_W(Self: TInterfaceArray; const T: InterfaceArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TInterfaceArrayData_R(Self: TInterfaceArray; var T: InterfaceArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TInterfaceArrayAssign102_P(Self: TInterfaceArray;  const V : array of IInterface);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TInterfaceArrayAssign101_P(Self: TInterfaceArray;  const V : InterfaceArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TInterfaceArrayAssign100_P(Self: TInterfaceArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TInterfaceArrayCreate99_P(Self: TClass; CreateNewInstance: Boolean;  const V : InterfaceArray):TObject;
Begin Result := TInterfaceArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TPointerArrayCount_W(Self: TPointerArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TPointerArrayCount_R(Self: TPointerArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TPointerArrayData_W(Self: TPointerArray; const T: PointerArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TPointerArrayData_R(Self: TPointerArray; var T: PointerArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TPointerArrayAssign98_P(Self: TPointerArray;  const V : array of Pointer);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TPointerArrayAssign97_P(Self: TPointerArray;  const V : PointerArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TPointerArrayAssign96_P(Self: TPointerArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TPointerArrayCreate95_P(Self: TClass; CreateNewInstance: Boolean;  const V : PointerArray):TObject;
Begin Result := TPointerArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TStringArrayCount_W(Self: TStringArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringArrayCount_R(Self: TStringArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TStringArrayData_W(Self: TStringArray; const T: StringArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TStringArrayData_R(Self: TStringArray; var T: StringArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TStringArrayAssign94_P(Self: TStringArray;  const V : array of String);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TStringArrayAssign93_P(Self: TStringArray;  const V : StringArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TStringArrayAssign92_P(Self: TStringArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TStringArrayCreate91_P(Self: TClass; CreateNewInstance: Boolean;  const V : StringArray):TObject;
Begin Result := TStringArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TUnicodeStringArrayCount_W(Self: TUnicodeStringArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TUnicodeStringArrayCount_R(Self: TUnicodeStringArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TUnicodeStringArrayData_W(Self: TUnicodeStringArray; const T: UnicodeStringArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TUnicodeStringArrayData_R(Self: TUnicodeStringArray; var T: UnicodeStringArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TUnicodeStringArrayAssign90_P(Self: TUnicodeStringArray;  const V : array of UnicodeString);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TUnicodeStringArrayAssign89_P(Self: TUnicodeStringArray;  const V : UnicodeStringArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TUnicodeStringArrayAssign88_P(Self: TUnicodeStringArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TUnicodeStringArrayCreate87_P(Self: TClass; CreateNewInstance: Boolean;  const V : UnicodeStringArray):TObject;
Begin Result := TUnicodeStringArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TRawByteStringArrayCount_W(Self: TRawByteStringArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TRawByteStringArrayCount_R(Self: TRawByteStringArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TRawByteStringArrayData_W(Self: TRawByteStringArray; const T: RawByteStringArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TRawByteStringArrayData_R(Self: TRawByteStringArray; var T: RawByteStringArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TRawByteStringArrayAssign86_P(Self: TRawByteStringArray;  const V : array of RawByteString);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TRawByteStringArrayAssign85_P(Self: TRawByteStringArray;  const V : RawByteStringArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TRawByteStringArrayAssign84_P(Self: TRawByteStringArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TRawByteStringArrayCreate83_P(Self: TClass; CreateNewInstance: Boolean;  const V : RawByteStringArray):TObject;
Begin Result := TRawByteStringArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TAnsiStringArrayCount_W(Self: TAnsiStringArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TAnsiStringArrayCount_R(Self: TAnsiStringArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TAnsiStringArrayData_W(Self: TAnsiStringArray; const T: AnsiStringArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TAnsiStringArrayData_R(Self: TAnsiStringArray; var T: AnsiStringArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TAnsiStringArrayAssign82_P(Self: TAnsiStringArray;  const V : array of AnsiString);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TAnsiStringArrayAssign81_P(Self: TAnsiStringArray;  const V : AnsiStringArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TAnsiStringArrayAssign80_P(Self: TAnsiStringArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TAnsiStringArrayCreate79_P(Self: TClass; CreateNewInstance: Boolean;  const V : AnsiStringArray):TObject;
Begin Result := TAnsiStringArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TExtendedArrayCount_W(Self: TExtendedArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TExtendedArrayCount_R(Self: TExtendedArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TExtendedArrayData_W(Self: TExtendedArray; const T: ExtendedArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TExtendedArrayData_R(Self: TExtendedArray; var T: ExtendedArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TExtendedArrayAssign78_P(Self: TExtendedArray;  const V : array of Extended);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TExtendedArrayAssign77_P(Self: TExtendedArray;  const V : ExtendedArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TExtendedArrayAssign76_P(Self: TExtendedArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TExtendedArrayCreate75_P(Self: TClass; CreateNewInstance: Boolean;  const V : ExtendedArray):TObject;
Begin Result := TExtendedArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TDoubleArrayCount_W(Self: TDoubleArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoubleArrayCount_R(Self: TDoubleArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TDoubleArrayData_W(Self: TDoubleArray; const T: DoubleArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TDoubleArrayData_R(Self: TDoubleArray; var T: DoubleArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TDoubleArrayAssign74_P(Self: TDoubleArray;  const V : array of Double);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TDoubleArrayAssign73_P(Self: TDoubleArray;  const V : DoubleArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TDoubleArrayAssign72_P(Self: TDoubleArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TDoubleArrayCreate71_P(Self: TClass; CreateNewInstance: Boolean;  const V : DoubleArray):TObject;
Begin Result := TDoubleArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TSingleArrayCount_W(Self: TSingleArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TSingleArrayCount_R(Self: TSingleArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TSingleArrayData_W(Self: TSingleArray; const T: SingleArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TSingleArrayData_R(Self: TSingleArray; var T: SingleArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TSingleArrayAssign70_P(Self: TSingleArray;  const V : array of Single);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TSingleArrayAssign69_P(Self: TSingleArray;  const V : SingleArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TSingleArrayAssign68_P(Self: TSingleArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TSingleArrayCreate67_P(Self: TClass; CreateNewInstance: Boolean;  const V : SingleArray):TObject;
Begin Result := TSingleArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TLongWordArrayCount_W(Self: TLongWordArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TLongWordArrayCount_R(Self: TLongWordArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TLongWordArrayData_W(Self: TLongWordArray; const T: LongWordArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TLongWordArrayData_R(Self: TLongWordArray; var T: LongWordArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TLongWordArrayAssign66_P(Self: TLongWordArray;  const V : array of LongWord);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TLongWordArrayAssign65_P(Self: TLongWordArray;  const V : LongWordArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TLongWordArrayAssign64_P(Self: TLongWordArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TLongWordArrayCreate63_P(Self: TClass; CreateNewInstance: Boolean;  const V : LongWordArray):TObject;
Begin Result := TLongWordArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TWord64ArrayCount_W(Self: TWord64Array; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TWord64ArrayCount_R(Self: TWord64Array; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TWord64ArrayData_W(Self: TWord64Array; const T: Word64Array);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TWord64ArrayData_R(Self: TWord64Array; var T: Word64Array);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TWord64ArrayAssign62_P(Self: TWord64Array;  const V : array of Word64);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TWord64ArrayAssign61_P(Self: TWord64Array;  const V : Word64Array);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TWord64ArrayAssign60_P(Self: TWord64Array;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TWord64ArrayCreate59_P(Self: TClass; CreateNewInstance: Boolean;  const V : Word64Array):TObject;
Begin Result := TWord64Array.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TWord32ArrayCount_W(Self: TWord32Array; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TWord32ArrayCount_R(Self: TWord32Array; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TWord32ArrayData_W(Self: TWord32Array; const T: Word32Array);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TWord32ArrayData_R(Self: TWord32Array; var T: Word32Array);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TWord32ArrayAssign58_P(Self: TWord32Array;  const V : array of Word32);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TWord32ArrayAssign57_P(Self: TWord32Array;  const V : Word32Array);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TWord32ArrayAssign56_P(Self: TWord32Array;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TWord32ArrayCreate55_P(Self: TClass; CreateNewInstance: Boolean;  const V : Word32Array):TObject;
Begin Result := TWord32Array.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TLongIntArrayCount_W(Self: TLongIntArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TLongIntArrayCount_R(Self: TLongIntArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TLongIntArrayData_W(Self: TLongIntArray; const T: LongIntArray);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TLongIntArrayData_R(Self: TLongIntArray; var T: LongIntArray);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TLongIntArrayAssign54_P(Self: TLongIntArray;  const V : array of LongInt);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TLongIntArrayAssign53_P(Self: TLongIntArray;  const V : LongIntArray);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TLongIntArrayAssign52_P(Self: TLongIntArray;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TLongIntArrayCreate51_P(Self: TClass; CreateNewInstance: Boolean;  const V : LongIntArray):TObject;
Begin Result := TLongIntArray.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TInt64ArrayCount_W(Self: TInt64Array; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TInt64ArrayCount_R(Self: TInt64Array; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TInt64ArrayData_W(Self: TInt64Array; const T: Int64Array);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TInt64ArrayData_R(Self: TInt64Array; var T: Int64Array);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TInt64ArrayAssign50_P(Self: TInt64Array;  const V : array of Int64);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TInt64ArrayAssign49_P(Self: TInt64Array;  const V : Int64Array);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TInt64ArrayAssign48_P(Self: TInt64Array;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TInt64ArrayCreate47_P(Self: TClass; CreateNewInstance: Boolean;  const V : Int64Array):TObject;
Begin Result := TInt64Array.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure TInt32ArrayCount_W(Self: TInt32Array; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TInt32ArrayCount_R(Self: TInt32Array; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TInt32ArrayData_W(Self: TInt32Array; const T: Int32Array);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TInt32ArrayData_R(Self: TInt32Array; var T: Int32Array);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
Procedure TInt32ArrayAssign46_P(Self: TInt32Array;  const V : array of Int32);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TInt32ArrayAssign45_P(Self: TInt32Array;  const V : Int32Array);
Begin Self.Assign(V); END;

(*----------------------------------------------------------------------------*)
Procedure TInt32ArrayAssign44_P(Self: TInt32Array;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
Function TInt32ArrayCreate43_P(Self: TClass; CreateNewInstance: Boolean;  const V : Int32Array):TObject;
Begin Result := TInt32Array.Create(V); END;

(*----------------------------------------------------------------------------*)
procedure ABitArrayRangeL_W(Self: ABitArray; const T: Word32; const t1: Integer);
begin Self.RangeL[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ABitArrayRangeL_R(Self: ABitArray; var T: Word32; const t1: Integer);
begin T := Self.RangeL[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ABitArrayBit_W(Self: ABitArray; const T: Boolean; const t1: Integer);
begin Self.Bit[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ABitArrayBit_R(Self: ABitArray; var T: Boolean; const t1: Integer);
begin T := Self.Bit[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AObjectArrayIsItemOwner_W(Self: AObjectArray; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectArrayIsItemOwner_R(Self: AObjectArray; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
Function AObjectArrayCountItems42_P(Self: AObjectArray;  const AClassName : String) : Integer;
Begin Result := Self.CountItems(AClassName); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayCountItems41_P(Self: AObjectArray;  const AClassType : TClass) : Integer;
Begin Result := Self.CountItems(AClassType); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayFindAll40_P(Self: AObjectArray;  const AClassName : String) : ObjectArray;
Begin Result := Self.FindAll(AClassName); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayFindAll39_P(Self: AObjectArray;  const AClassType : TClass) : ObjectArray;
Begin Result := Self.FindAll(AClassType); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayFind38_P(Self: AObjectArray;  const AClassName : String; const ACount : Integer) : TObject;
Begin Result := Self.Find(AClassName, ACount); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayFind37_P(Self: AObjectArray;  const AClassType : TClass; const ACount : Integer) : TObject;
Begin Result := Self.Find(AClassType, ACount); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayPosNext36_P(Self: AObjectArray;  var AItem : TObject; const AClassName : String; const PrevPos : Integer) : Integer;
Begin Result := Self.PosNext(AItem, AClassName, PrevPos); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayPosNext35_P(Self: AObjectArray;  var AItem : TObject; const AClassType : TClass; const PrevPos : Integer) : Integer;
Begin Result := Self.PosNext(AItem, AClassType, PrevPos); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayPosNext34_P(Self: AObjectArray;  const Find : TObject; const PrevPos : Integer) : Integer;
Begin Result := Self.PosNext(Find, PrevPos); END;

(*----------------------------------------------------------------------------*)
Function AObjectArrayAppendArray33_P(Self: AObjectArray;  const V : ObjectArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AObjectArrayRange_W(Self: AObjectArray; const T: ObjectArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectArrayRange_R(Self: AObjectArray; var T: ObjectArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AObjectArrayItem_W(Self: AObjectArray; const T: TObject; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectArrayItem_R(Self: AObjectArray; var T: TObject; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AObjectArrayAppendArray32_P(Self: AObjectArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AInterfaceArrayAppendArray31_P(Self: AInterfaceArray;  const V : InterfaceArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AInterfaceArrayRange_W(Self: AInterfaceArray; const T: InterfaceArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceArrayRange_R(Self: AInterfaceArray; var T: InterfaceArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceArrayItem_W(Self: AInterfaceArray; const T: IInterface; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceArrayItem_R(Self: AInterfaceArray; var T: IInterface; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AInterfaceArrayAppendArray30_P(Self: AInterfaceArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function APointerArrayAppendArray29_P(Self: APointerArray;  const V : PointerArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure APointerArrayRange_W(Self: APointerArray; const T: PointerArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure APointerArrayRange_R(Self: APointerArray; var T: PointerArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure APointerArrayItem_W(Self: APointerArray; const T: Pointer; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure APointerArrayItem_R(Self: APointerArray; var T: Pointer; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function APointerArrayAppendArray28_P(Self: APointerArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AStringArrayAppendArray27_P(Self: AStringArray;  const V : StringArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AStringArrayRange_W(Self: AStringArray; const T: StringArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AStringArrayRange_R(Self: AStringArray; var T: StringArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AStringArrayItem_W(Self: AStringArray; const T: String; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AStringArrayItem_R(Self: AStringArray; var T: String; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AStringArrayAppendArray26_P(Self: AStringArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AUnicodeStringArrayAppendArray25_P(Self: AUnicodeStringArray;  const V : UnicodeStringArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringArrayRange_W(Self: AUnicodeStringArray; const T: UnicodeStringArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringArrayRange_R(Self: AUnicodeStringArray; var T: UnicodeStringArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringArrayItem_W(Self: AUnicodeStringArray; const T: UnicodeString; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AUnicodeStringArrayItem_R(Self: AUnicodeStringArray; var T: UnicodeString; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AUnicodeStringArrayAppendArray24_P(Self: AUnicodeStringArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function ARawByteStringArrayAppendArray23_P(Self: ARawByteStringArray;  const V : RawByteStringArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringArrayRange_W(Self: ARawByteStringArray; const T: RawByteStringArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringArrayRange_R(Self: ARawByteStringArray; var T: RawByteStringArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringArrayItem_W(Self: ARawByteStringArray; const T: RawByteString; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ARawByteStringArrayItem_R(Self: ARawByteStringArray; var T: RawByteString; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function ARawByteStringArrayAppendArray22_P(Self: ARawByteStringArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AAnsiStringArrayAppendArray21_P(Self: AAnsiStringArray;  const V : AnsiStringArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringArrayRange_W(Self: AAnsiStringArray; const T: AnsiStringArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringArrayRange_R(Self: AAnsiStringArray; var T: AnsiStringArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringArrayItem_W(Self: AAnsiStringArray; const T: AnsiString; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AAnsiStringArrayItem_R(Self: AAnsiStringArray; var T: AnsiString; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AAnsiStringArrayAppendArray20_P(Self: AAnsiStringArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AExtendedArrayAppendArray19_P(Self: AExtendedArray;  const V : ExtendedArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AExtendedArrayRange_W(Self: AExtendedArray; const T: ExtendedArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedArrayRange_R(Self: AExtendedArray; var T: ExtendedArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedArrayItem_W(Self: AExtendedArray; const T: Extended; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedArrayItem_R(Self: AExtendedArray; var T: Extended; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AExtendedArrayAppendArray18_P(Self: AExtendedArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function ADoubleArrayAppendArray17_P(Self: ADoubleArray;  const V : DoubleArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure ADoubleArrayRange_W(Self: ADoubleArray; const T: DoubleArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleArrayRange_R(Self: ADoubleArray; var T: DoubleArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleArrayItem_W(Self: ADoubleArray; const T: Double; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleArrayItem_R(Self: ADoubleArray; var T: Double; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function ADoubleArrayAppendArray16_P(Self: ADoubleArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function ASingleArrayAppendArray15_P(Self: ASingleArray;  const V : SingleArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure ASingleArrayRange_W(Self: ASingleArray; const T: SingleArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure ASingleArrayRange_R(Self: ASingleArray; var T: SingleArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure ASingleArrayItem_W(Self: ASingleArray; const T: Single; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ASingleArrayItem_R(Self: ASingleArray; var T: Single; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function ASingleArrayAppendArray14_P(Self: ASingleArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function ALongWordArrayAppendArray13_P(Self: ALongWordArray;  const V : LongWordArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure ALongWordArrayRange_W(Self: ALongWordArray; const T: LongWordArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordArrayRange_R(Self: ALongWordArray; var T: LongWordArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordArrayItem_W(Self: ALongWordArray; const T: LongWord; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordArrayItem_R(Self: ALongWordArray; var T: LongWord; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function ALongWordArrayAppendArray12_P(Self: ALongWordArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AWord64ArrayAppendArray11_P(Self: AWord64Array;  const V : Word64Array) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AWord64ArrayRange_W(Self: AWord64Array; const T: Word64Array; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AWord64ArrayRange_R(Self: AWord64Array; var T: Word64Array; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AWord64ArrayItem_W(Self: AWord64Array; const T: Word64; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AWord64ArrayItem_R(Self: AWord64Array; var T: Word64; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AWord64ArrayAppendArray10_P(Self: AWord64Array;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AWord32ArrayAppendArray9_P(Self: AWord32Array;  const V : Word32Array) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AWord32ArrayRange_W(Self: AWord32Array; const T: Word32Array; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AWord32ArrayRange_R(Self: AWord32Array; var T: Word32Array; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AWord32ArrayItem_W(Self: AWord32Array; const T: Word32; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AWord32ArrayItem_R(Self: AWord32Array; var T: Word32; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AWord32ArrayAppendArray8_P(Self: AWord32Array;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function ALongIntArrayAppendArray7_P(Self: ALongIntArray;  const V : LongIntArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure ALongIntArrayRange_W(Self: ALongIntArray; const T: LongIntArray; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntArrayRange_R(Self: ALongIntArray; var T: LongIntArray; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntArrayItem_W(Self: ALongIntArray; const T: LongInt; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntArrayItem_R(Self: ALongIntArray; var T: LongInt; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function ALongIntArrayAppendArray6_P(Self: ALongIntArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AInt64ArrayAppendArray5_P(Self: AInt64Array;  const V : Int64Array) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AInt64ArrayRange_W(Self: AInt64Array; const T: Int64Array; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt64ArrayRange_R(Self: AInt64Array; var T: Int64Array; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AInt64ArrayItem_W(Self: AInt64Array; const T: Int64; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt64ArrayItem_R(Self: AInt64Array; var T: Int64; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AInt64ArrayAppendArray4_P(Self: AInt64Array;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AInt32ArrayAppendArray3_P(Self: AInt32Array;  const V : Int32Array) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AInt32ArrayRange_W(Self: AInt32Array; const T: Int32Array; const t1: Integer; const t2: Integer);
begin Self.Range[t1, t2] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt32ArrayRange_R(Self: AInt32Array; var T: Int32Array; const t1: Integer; const t2: Integer);
begin T := Self.Range[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure AInt32ArrayItem_W(Self: AInt32Array; const T: Int32; const t1: Integer);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt32ArrayItem_R(Self: AInt32Array; var T: Int32; const t1: Integer);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Function AInt32ArrayAppendArray2_P(Self: AInt32Array;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
Function AArrayAppendArray1_P(Self: AArray;  const V : AArray) : Integer;
Begin Result := Self.AppendArray(V); END;

(*----------------------------------------------------------------------------*)
procedure AArrayItemAsString_W(Self: AArray; const T: String; const t1: Integer);
begin Self.ItemAsString[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AArrayItemAsString_R(Self: AArray; var T: String; const t1: Integer);
begin T := Self.ItemAsString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AArrayCount_W(Self: AArray; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure AArrayCount_R(Self: AArray; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure ATypeClassAsUnicodeString_W(Self: ATypeClass; const T: UnicodeString);
begin Self.AsUnicodeString := T; end;

(*----------------------------------------------------------------------------*)
procedure ATypeClassAsUnicodeString_R(Self: ATypeClass; var T: UnicodeString);
begin T := Self.AsUnicodeString; end;

(*----------------------------------------------------------------------------*)
procedure ATypeClassAsUTF8String_W(Self: ATypeClass; const T: RawByteString);
begin Self.AsUTF8String := T; end;

(*----------------------------------------------------------------------------*)
procedure ATypeClassAsUTF8String_R(Self: ATypeClass; var T: RawByteString);
begin T := Self.AsUTF8String; end;

(*----------------------------------------------------------------------------*)
procedure ATypeClassAsString_W(Self: ATypeClass; const T: String);
begin Self.AsString := T; end;

(*----------------------------------------------------------------------------*)
procedure ATypeClassAsString_R(Self: ATypeClass; var T: String);
begin T := Self.AsString; end;

(*----------------------------------------------------------------------------*)
Procedure ATypeClassAssign_P(Self: ATypeClass;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoublyLinkedList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoublyLinkedList) do
  begin
    RegisterPropertyHelper(@TDoublyLinkedListFirst_R,nil,'First');
    RegisterPropertyHelper(@TDoublyLinkedListLast_R,nil,'Last');
    RegisterMethod(@TDoublyLinkedList.IsEmpty, 'IsEmpty');
    RegisterPropertyHelper(@TDoublyLinkedListCount_R,nil,'Count');
    RegisterMethod(@TDoublyLinkedList.Remove, 'Remove');
    RegisterMethod(@TDoublyLinkedList.RemoveFirst, 'RemoveFirst');
    RegisterMethod(@TDoublyLinkedList.RemoveLast, 'RemoveLast');
    RegisterMethod(@TDoublyLinkedList.Delete, 'Delete');
    RegisterMethod(@TDoublyLinkedList.DeleteFirst, 'DeleteFirst');
    RegisterMethod(@TDoublyLinkedList.DeleteLast, 'DeleteLast');
    RegisterMethod(@TDoublyLinkedList.DeleteList, 'DeleteList');
    RegisterMethod(@TDoublyLinkedList.Append, 'Append');
    RegisterMethod(@TDoublyLinkedList.InsertFront, 'InsertFront');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoublyLinkedObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoublyLinkedObject) do
  begin
    RegisterPropertyHelper(@TDoublyLinkedObjectValue_R,@TDoublyLinkedObjectValue_W,'Value');
    RegisterConstructor(@TDoublyLinkedObject.Create, 'Create');
    RegisterMethod(@TDoublyLinkedObjectInsertAfter110_P, 'InsertAfter110');
    RegisterMethod(@TDoublyLinkedObjectInsertBefore111_P, 'InsertBefore111');
    RegisterMethod(@TDoublyLinkedObject.InsertFirst, 'InsertFirst');
    RegisterMethod(@TDoublyLinkedObject.Append, 'Append');
    RegisterMethod(@TDoublyLinkedObject.FindNext, 'FindNext');
    RegisterMethod(@TDoublyLinkedObject.FindPrev, 'FindPrev');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoublyLinkedString(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoublyLinkedString) do
  begin
    RegisterPropertyHelper(@TDoublyLinkedStringValue_R,@TDoublyLinkedStringValue_W,'Value');
    RegisterConstructor(@TDoublyLinkedString.Create, 'Create');
    RegisterMethod(@TDoublyLinkedStringInsertAfter108_P, 'InsertAfter108');
    RegisterMethod(@TDoublyLinkedStringInsertBefore109_P, 'InsertBefore109');
    RegisterMethod(@TDoublyLinkedString.InsertFirst, 'InsertFirst');
    RegisterMethod(@TDoublyLinkedString.Append, 'Append');
    RegisterMethod(@TDoublyLinkedString.FindNext, 'FindNext');
    RegisterMethod(@TDoublyLinkedString.FindPrev, 'FindPrev');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoublyLinkedExtended(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoublyLinkedExtended) do
  begin
    RegisterPropertyHelper(@TDoublyLinkedExtendedValue_R,@TDoublyLinkedExtendedValue_W,'Value');
    RegisterConstructor(@TDoublyLinkedExtended.Create, 'Create');
    RegisterMethod(@TDoublyLinkedExtendedInsertAfter106_P, 'InsertAfter106');
    RegisterMethod(@TDoublyLinkedExtendedInsertBefore107_P, 'InsertBefore107');
    RegisterMethod(@TDoublyLinkedExtended.InsertFirst, 'InsertFirst');
    RegisterMethod(@TDoublyLinkedExtended.Append, 'Append');
    RegisterMethod(@TDoublyLinkedExtended.FindNext, 'FindNext');
    RegisterMethod(@TDoublyLinkedExtended.FindPrev, 'FindPrev');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoublyLinkedInteger(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoublyLinkedInteger) do
  begin
    RegisterPropertyHelper(@TDoublyLinkedIntegerValue_R,@TDoublyLinkedIntegerValue_W,'Value');
    RegisterConstructor(@TDoublyLinkedInteger.Create, 'Create');
    RegisterMethod(@TDoublyLinkedIntegerInsertAfter104_P, 'InsertAfter104');
    RegisterMethod(@TDoublyLinkedIntegerInsertBefore105_P, 'InsertBefore105');
    RegisterMethod(@TDoublyLinkedInteger.InsertFirst, 'InsertFirst');
    RegisterMethod(@TDoublyLinkedInteger.Append, 'Append');
    RegisterMethod(@TDoublyLinkedInteger.FindNext, 'FindNext');
    RegisterMethod(@TDoublyLinkedInteger.FindPrev, 'FindPrev');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoublyLinkedItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoublyLinkedItem) do
  begin
    RegisterPropertyHelper(@TDoublyLinkedItemNext_R,@TDoublyLinkedItemNext_W,'Next');
    RegisterPropertyHelper(@TDoublyLinkedItemPrev_R,@TDoublyLinkedItemPrev_W,'Prev');
    RegisterMethod(@TDoublyLinkedItem.HasNext, 'HasNext');
    RegisterMethod(@TDoublyLinkedItem.HasPrev, 'HasPrev');
    RegisterMethod(@TDoublyLinkedItem.Last, 'Last');
    RegisterMethod(@TDoublyLinkedItem.First, 'First');
    RegisterMethod(@TDoublyLinkedItem.Count, 'Count');
    RegisterMethod(@TDoublyLinkedItem.Remove, 'Remove');
    RegisterMethod(@TDoublyLinkedItem.RemoveNext, 'RemoveNext');
    RegisterMethod(@TDoublyLinkedItem.DeleteNext, 'DeleteNext');
    RegisterMethod(@TDoublyLinkedItem.RemovePrev, 'RemovePrev');
    RegisterMethod(@TDoublyLinkedItem.DeletePrev, 'DeletePrev');
    RegisterMethod(@TDoublyLinkedItem.InsertAfter, 'InsertAfter');
    RegisterMethod(@TDoublyLinkedItem.InsertBefore, 'InsertBefore');
    RegisterMethod(@TDoublyLinkedItem.Delete, 'Delete');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSparseObjectArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSparseObjectArray) do
  begin
    RegisterConstructor(@TSparseObjectArray.Create, 'Create');
    RegisterPropertyHelper(@TSparseObjectArrayIsItemOwner_R,@TSparseObjectArrayIsItemOwner_W,'IsItemOwner');
    RegisterPropertyHelper(@TSparseObjectArrayItem_R,@TSparseObjectArrayItem_W,'Item');
    RegisterMethod(@TSparseObjectArray.LocateItem, 'LocateItem');
    RegisterPropertyHelper(@TSparseObjectArrayCount_R,nil,'Count');
    RegisterMethod(@TSparseObjectArray.ReleaseItem, 'ReleaseItem');
    RegisterMethod(@TSparseObjectArray.FindFirst, 'FindFirst');
    RegisterMethod(@TSparseObjectArray.FindNext, 'FindNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSparseExtendedArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSparseExtendedArray) do
  begin
    RegisterPropertyHelper(@TSparseExtendedArrayItem_R,@TSparseExtendedArrayItem_W,'Item');
    RegisterMethod(@TSparseExtendedArray.LocateItem, 'LocateItem');
    RegisterPropertyHelper(@TSparseExtendedArrayCount_R,nil,'Count');
    RegisterMethod(@TSparseExtendedArray.FindFirst, 'FindFirst');
    RegisterMethod(@TSparseExtendedArray.FindNext, 'FindNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSparseInt64Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSparseInt64Array) do
  begin
    RegisterPropertyHelper(@TSparseInt64ArrayItem_R,@TSparseInt64ArrayItem_W,'Item');
    RegisterMethod(@TSparseInt64Array.LocateItem, 'LocateItem');
    RegisterPropertyHelper(@TSparseInt64ArrayCount_R,nil,'Count');
    RegisterMethod(@TSparseInt64Array.FindFirst, 'FindFirst');
    RegisterMethod(@TSparseInt64Array.FindNext, 'FindNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSparseAnsiStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSparseAnsiStringArray) do
  begin
    RegisterPropertyHelper(@TSparseAnsiStringArrayItem_R,@TSparseAnsiStringArrayItem_W,'Item');
    RegisterMethod(@TSparseAnsiStringArray.LocateItem, 'LocateItem');
    RegisterPropertyHelper(@TSparseAnsiStringArrayCount_R,nil,'Count');
    RegisterMethod(@TSparseAnsiStringArray.FindFirst, 'FindFirst');
    RegisterMethod(@TSparseAnsiStringArray.FindNext, 'FindNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ASparseArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ASparseArray) do
  begin
    RegisterPropertyHelper(@ASparseArrayCount_R,nil,'Count');
    RegisterVirtualAbstractMethod(@ASparseArray, @!.Delete, 'Delete');
    RegisterVirtualAbstractMethod(@ASparseArray, @!.HasItem, 'HasItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectDictionary) do
  begin
    RegisterConstructor(@TObjectDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralObjectDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralObjectDictionary) do
  begin
    RegisterConstructor(@TGeneralObjectDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralObjectDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralObjectDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralObjectDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralObjectDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralObjectDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectDictionaryU) do
  begin
    RegisterConstructor(@TObjectDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralObjectDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralObjectDictionaryU) do
  begin
    RegisterConstructor(@TGeneralObjectDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralObjectDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralObjectDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralObjectDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralObjectDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralObjectDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectDictionaryB) do
  begin
    RegisterConstructor(@TObjectDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralObjectDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralObjectDictionaryB) do
  begin
    RegisterConstructor(@TGeneralObjectDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralObjectDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralObjectDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralObjectDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralObjectDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralObjectDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectDictionaryA) do
  begin
    RegisterConstructor(@TObjectDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralObjectDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralObjectDictionaryA) do
  begin
    RegisterConstructor(@TGeneralObjectDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralObjectDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralObjectDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralObjectDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralObjectDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralObjectDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfaceDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfaceDictionary) do
  begin
    RegisterConstructor(@TInterfaceDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInterfaceDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInterfaceDictionary) do
  begin
    RegisterConstructor(@TGeneralInterfaceDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralInterfaceDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInterfaceDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfaceDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfaceDictionaryU) do
  begin
    RegisterConstructor(@TInterfaceDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInterfaceDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInterfaceDictionaryU) do
  begin
    RegisterConstructor(@TGeneralInterfaceDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralInterfaceDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInterfaceDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfaceDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfaceDictionaryA) do
  begin
    RegisterConstructor(@TInterfaceDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInterfaceDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInterfaceDictionaryA) do
  begin
    RegisterConstructor(@TGeneralInterfaceDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralInterfaceDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInterfaceDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPointerDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPointerDictionary) do
  begin
    RegisterConstructor(@TPointerDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralPointerDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralPointerDictionary) do
  begin
    RegisterConstructor(@TGeneralPointerDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralPointerDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralPointerDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralPointerDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralPointerDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralPointerDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPointerDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPointerDictionaryU) do
  begin
    RegisterConstructor(@TPointerDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralPointerDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralPointerDictionaryU) do
  begin
    RegisterConstructor(@TGeneralPointerDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralPointerDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralPointerDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralPointerDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralPointerDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralPointerDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPointerDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPointerDictionaryB) do
  begin
    RegisterConstructor(@TPointerDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralPointerDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralPointerDictionaryB) do
  begin
    RegisterConstructor(@TGeneralPointerDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralPointerDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralPointerDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralPointerDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralPointerDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralPointerDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPointerDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPointerDictionaryA) do
  begin
    RegisterConstructor(@TPointerDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralPointerDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralPointerDictionaryA) do
  begin
    RegisterConstructor(@TGeneralPointerDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralPointerDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralPointerDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralPointerDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralPointerDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralPointerDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringDictionary) do
  begin
    RegisterConstructor(@TStringDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralStringDictionary) do
  begin
    RegisterConstructor(@TGeneralStringDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralStringDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralStringDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralStringDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralStringDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralStringDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringDictionaryU) do
  begin
    RegisterConstructor(@TStringDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralStringDictionaryU) do
  begin
    RegisterConstructor(@TGeneralStringDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralStringDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralStringDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralStringDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralStringDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralStringDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringDictionaryA) do
  begin
    RegisterConstructor(@TStringDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralStringDictionaryA) do
  begin
    RegisterConstructor(@TGeneralStringDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralStringDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralStringDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralStringDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralStringDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralStringDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUnicodeStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUnicodeStringDictionary) do
  begin
    RegisterConstructor(@TUnicodeStringDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralUnicodeStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralUnicodeStringDictionary) do
  begin
    RegisterConstructor(@TGeneralUnicodeStringDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralUnicodeStringDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralUnicodeStringDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUnicodeStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUnicodeStringDictionaryU) do
  begin
    RegisterConstructor(@TUnicodeStringDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralUnicodeStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralUnicodeStringDictionaryU) do
  begin
    RegisterConstructor(@TGeneralUnicodeStringDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralUnicodeStringDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralUnicodeStringDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUnicodeStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUnicodeStringDictionaryA) do
  begin
    RegisterConstructor(@TUnicodeStringDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralUnicodeStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralUnicodeStringDictionaryA) do
  begin
    RegisterConstructor(@TGeneralUnicodeStringDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralUnicodeStringDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralUnicodeStringDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralUnicodeStringDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRawByteStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRawByteStringDictionary) do
  begin
    RegisterConstructor(@TRawByteStringDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralRawByteStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralRawByteStringDictionary) do
  begin
    RegisterConstructor(@TGeneralRawByteStringDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralRawByteStringDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralRawByteStringDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRawByteStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRawByteStringDictionaryU) do
  begin
    RegisterConstructor(@TRawByteStringDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralRawByteStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralRawByteStringDictionaryU) do
  begin
    RegisterConstructor(@TGeneralRawByteStringDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralRawByteStringDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralRawByteStringDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRawByteStringDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRawByteStringDictionaryB) do
  begin
    RegisterConstructor(@TRawByteStringDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralRawByteStringDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralRawByteStringDictionaryB) do
  begin
    RegisterConstructor(@TGeneralRawByteStringDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralRawByteStringDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralRawByteStringDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRawByteStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRawByteStringDictionaryA) do
  begin
    RegisterConstructor(@TRawByteStringDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralRawByteStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralRawByteStringDictionaryA) do
  begin
    RegisterConstructor(@TGeneralRawByteStringDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralRawByteStringDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralRawByteStringDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralRawByteStringDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAnsiStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAnsiStringDictionary) do
  begin
    RegisterConstructor(@TAnsiStringDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralAnsiStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralAnsiStringDictionary) do
  begin
    RegisterConstructor(@TGeneralAnsiStringDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralAnsiStringDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralAnsiStringDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAnsiStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAnsiStringDictionaryU) do
  begin
    RegisterConstructor(@TAnsiStringDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralAnsiStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralAnsiStringDictionaryU) do
  begin
    RegisterConstructor(@TGeneralAnsiStringDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralAnsiStringDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralAnsiStringDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAnsiStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAnsiStringDictionaryA) do
  begin
    RegisterConstructor(@TAnsiStringDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralAnsiStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralAnsiStringDictionaryA) do
  begin
    RegisterConstructor(@TGeneralAnsiStringDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralAnsiStringDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralAnsiStringDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralAnsiStringDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TExtendedDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TExtendedDictionary) do
  begin
    RegisterConstructor(@TExtendedDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralExtendedDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralExtendedDictionary) do
  begin
    RegisterConstructor(@TGeneralExtendedDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralExtendedDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralExtendedDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TExtendedDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TExtendedDictionaryU) do
  begin
    RegisterConstructor(@TExtendedDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralExtendedDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralExtendedDictionaryU) do
  begin
    RegisterConstructor(@TGeneralExtendedDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralExtendedDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralExtendedDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TExtendedDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TExtendedDictionaryB) do
  begin
    RegisterConstructor(@TExtendedDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralExtendedDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralExtendedDictionaryB) do
  begin
    RegisterConstructor(@TGeneralExtendedDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralExtendedDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralExtendedDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TExtendedDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TExtendedDictionaryA) do
  begin
    RegisterConstructor(@TExtendedDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralExtendedDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralExtendedDictionaryA) do
  begin
    RegisterConstructor(@TGeneralExtendedDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralExtendedDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralExtendedDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoubleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoubleDictionary) do
  begin
    RegisterConstructor(@TDoubleDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralDoubleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralDoubleDictionary) do
  begin
    RegisterConstructor(@TGeneralDoubleDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralDoubleDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralDoubleDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoubleDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoubleDictionaryU) do
  begin
    RegisterConstructor(@TDoubleDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralDoubleDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralDoubleDictionaryU) do
  begin
    RegisterConstructor(@TGeneralDoubleDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralDoubleDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralDoubleDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoubleDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoubleDictionaryB) do
  begin
    RegisterConstructor(@TDoubleDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralDoubleDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralDoubleDictionaryB) do
  begin
    RegisterConstructor(@TGeneralDoubleDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralDoubleDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralDoubleDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoubleDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoubleDictionaryA) do
  begin
    RegisterConstructor(@TDoubleDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralDoubleDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralDoubleDictionaryA) do
  begin
    RegisterConstructor(@TGeneralDoubleDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralDoubleDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralDoubleDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSingleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSingleDictionary) do
  begin
    RegisterConstructor(@TSingleDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralSingleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralSingleDictionary) do
  begin
    RegisterConstructor(@TGeneralSingleDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralSingleDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralSingleDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralSingleDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralSingleDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralSingleDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSingleDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSingleDictionaryU) do
  begin
    RegisterConstructor(@TSingleDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralSingleDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralSingleDictionaryU) do
  begin
    RegisterConstructor(@TGeneralSingleDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralSingleDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralSingleDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralSingleDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralSingleDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralSingleDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSingleDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSingleDictionaryB) do
  begin
    RegisterConstructor(@TSingleDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralSingleDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralSingleDictionaryB) do
  begin
    RegisterConstructor(@TGeneralSingleDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralSingleDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralSingleDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralSingleDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralSingleDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralSingleDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSingleDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSingleDictionaryA) do
  begin
    RegisterConstructor(@TSingleDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralSingleDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralSingleDictionaryA) do
  begin
    RegisterConstructor(@TGeneralSingleDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralSingleDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralSingleDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralSingleDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralSingleDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralSingleDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInt64Dictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInt64Dictionary) do
  begin
    RegisterConstructor(@TInt64Dictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInt64Dictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInt64Dictionary) do
  begin
    RegisterConstructor(@TGeneralInt64Dictionary.Create, 'Create');
    RegisterConstructor(@TGeneralInt64Dictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInt64DictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInt64DictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInt64DictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInt64Dictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInt64DictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInt64DictionaryU) do
  begin
    RegisterConstructor(@TInt64DictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInt64DictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInt64DictionaryU) do
  begin
    RegisterConstructor(@TGeneralInt64DictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralInt64DictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInt64DictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInt64DictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInt64DictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInt64DictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInt64DictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInt64DictionaryB) do
  begin
    RegisterConstructor(@TInt64DictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInt64DictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInt64DictionaryB) do
  begin
    RegisterConstructor(@TGeneralInt64DictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralInt64DictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInt64DictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInt64DictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInt64DictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInt64DictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInt64DictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInt64DictionaryA) do
  begin
    RegisterConstructor(@TInt64DictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInt64DictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInt64DictionaryA) do
  begin
    RegisterConstructor(@TGeneralInt64DictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralInt64DictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInt64DictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInt64DictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInt64DictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInt64DictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongWordDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongWordDictionary) do
  begin
    RegisterConstructor(@TLongWordDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongWordDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongWordDictionary) do
  begin
    RegisterConstructor(@TGeneralLongWordDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralLongWordDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongWordDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongWordDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongWordDictionaryU) do
  begin
    RegisterConstructor(@TLongWordDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongWordDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongWordDictionaryU) do
  begin
    RegisterConstructor(@TGeneralLongWordDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralLongWordDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongWordDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongWordDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongWordDictionaryB) do
  begin
    RegisterConstructor(@TLongWordDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongWordDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongWordDictionaryB) do
  begin
    RegisterConstructor(@TGeneralLongWordDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralLongWordDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongWordDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongWordDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongWordDictionaryA) do
  begin
    RegisterConstructor(@TLongWordDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongWordDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongWordDictionaryA) do
  begin
    RegisterConstructor(@TGeneralLongWordDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralLongWordDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongWordDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongIntDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongIntDictionary) do
  begin
    RegisterConstructor(@TLongIntDictionary.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongIntDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongIntDictionary) do
  begin
    RegisterConstructor(@TGeneralLongIntDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralLongIntDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongIntDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongIntDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongIntDictionaryU) do
  begin
    RegisterConstructor(@TLongIntDictionaryU.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongIntDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongIntDictionaryU) do
  begin
    RegisterConstructor(@TGeneralLongIntDictionaryU.Create, 'Create');
    RegisterConstructor(@TGeneralLongIntDictionaryU.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryUKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryUValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryUHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongIntDictionaryU.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongIntDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongIntDictionaryB) do
  begin
    RegisterConstructor(@TLongIntDictionaryB.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongIntDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongIntDictionaryB) do
  begin
    RegisterConstructor(@TGeneralLongIntDictionaryB.Create, 'Create');
    RegisterConstructor(@TGeneralLongIntDictionaryB.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryBKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryBValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryBHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongIntDictionaryB.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongIntDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongIntDictionaryA) do
  begin
    RegisterConstructor(@TLongIntDictionaryA.CreateEx, 'CreateEx');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongIntDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongIntDictionaryA) do
  begin
    RegisterConstructor(@TGeneralLongIntDictionaryA.Create, 'Create');
    RegisterConstructor(@TGeneralLongIntDictionaryA.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryAKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryAValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryAHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongIntDictionaryA.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AObjectDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AObjectDictionary) do
  begin
    RegisterPropertyHelper(@AObjectDictionaryItem_R,@AObjectDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.LocateNext, 'LocateNext');
    RegisterPropertyHelper(@AObjectDictionaryIsItemOwner_R,@AObjectDictionaryIsItemOwner_W,'IsItemOwner');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.ReleaseItem, 'ReleaseItem');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.ReleaseItems, 'ReleaseItems');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.FreeItems, 'FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AObjectDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AObjectDictionaryU) do
  begin
    RegisterPropertyHelper(@AObjectDictionaryUItem_R,@AObjectDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@AObjectDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AObjectDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AObjectDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AObjectDictionaryU, @!.LocateNext, 'LocateNext');
    RegisterPropertyHelper(@AObjectDictionaryUIsItemOwner_R,@AObjectDictionaryUIsItemOwner_W,'IsItemOwner');
    RegisterVirtualAbstractMethod(@AObjectDictionaryU, @!.ReleaseItem, 'ReleaseItem');
    RegisterVirtualAbstractMethod(@AObjectDictionaryU, @!.ReleaseItems, 'ReleaseItems');
    RegisterVirtualAbstractMethod(@AObjectDictionaryU, @!.FreeItems, 'FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AObjectDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AObjectDictionaryB) do
  begin
    RegisterPropertyHelper(@AObjectDictionaryBItem_R,@AObjectDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@AObjectDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AObjectDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AObjectDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AObjectDictionaryB, @!.LocateNext, 'LocateNext');
    RegisterPropertyHelper(@AObjectDictionaryBIsItemOwner_R,@AObjectDictionaryBIsItemOwner_W,'IsItemOwner');
    RegisterVirtualAbstractMethod(@AObjectDictionaryB, @!.ReleaseItem, 'ReleaseItem');
    RegisterVirtualAbstractMethod(@AObjectDictionaryB, @!.ReleaseItems, 'ReleaseItems');
    RegisterVirtualAbstractMethod(@AObjectDictionaryB, @!.FreeItems, 'FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AObjectDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AObjectDictionaryA) do
  begin
    RegisterPropertyHelper(@AObjectDictionaryAItem_R,@AObjectDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@AObjectDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AObjectDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AObjectDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AObjectDictionaryA, @!.LocateNext, 'LocateNext');
    RegisterPropertyHelper(@AObjectDictionaryAIsItemOwner_R,@AObjectDictionaryAIsItemOwner_W,'IsItemOwner');
    RegisterVirtualAbstractMethod(@AObjectDictionaryA, @!.ReleaseItem, 'ReleaseItem');
    RegisterVirtualAbstractMethod(@AObjectDictionaryA, @!.ReleaseItems, 'ReleaseItems');
    RegisterVirtualAbstractMethod(@AObjectDictionaryA, @!.FreeItems, 'FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInterfaceDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInterfaceDictionary) do
  begin
    RegisterPropertyHelper(@AInterfaceDictionaryItem_R,@AInterfaceDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInterfaceDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInterfaceDictionaryU) do
  begin
    RegisterPropertyHelper(@AInterfaceDictionaryUItem_R,@AInterfaceDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInterfaceDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInterfaceDictionaryA) do
  begin
    RegisterPropertyHelper(@AInterfaceDictionaryAItem_R,@AInterfaceDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInterfaceDictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_APointerDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(APointerDictionary) do
  begin
    RegisterPropertyHelper(@APointerDictionaryItem_R,@APointerDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_APointerDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(APointerDictionaryU) do
  begin
    RegisterPropertyHelper(@APointerDictionaryUItem_R,@APointerDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@APointerDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@APointerDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@APointerDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@APointerDictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_APointerDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(APointerDictionaryB) do
  begin
    RegisterPropertyHelper(@APointerDictionaryBItem_R,@APointerDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@APointerDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@APointerDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@APointerDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@APointerDictionaryB, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_APointerDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(APointerDictionaryA) do
  begin
    RegisterPropertyHelper(@APointerDictionaryAItem_R,@APointerDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@APointerDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@APointerDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@APointerDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@APointerDictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AStringDictionary) do
  begin
    RegisterPropertyHelper(@AStringDictionaryItem_R,@AStringDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AStringDictionary.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AStringDictionary.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AStringDictionaryU) do
  begin
    RegisterPropertyHelper(@AStringDictionaryUItem_R,@AStringDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@AStringDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AStringDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AStringDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AStringDictionaryU, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AStringDictionaryU.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AStringDictionaryU.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AStringDictionaryA) do
  begin
    RegisterPropertyHelper(@AStringDictionaryAItem_R,@AStringDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@AStringDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AStringDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AStringDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AStringDictionaryA, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AStringDictionaryA.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AStringDictionaryA.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AUnicodeStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AUnicodeStringDictionary) do
  begin
    RegisterPropertyHelper(@AUnicodeStringDictionaryItem_R,@AUnicodeStringDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionary, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AUnicodeStringDictionary.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AUnicodeStringDictionary.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AUnicodeStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AUnicodeStringDictionaryU) do
  begin
    RegisterPropertyHelper(@AUnicodeStringDictionaryUItem_R,@AUnicodeStringDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryU, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AUnicodeStringDictionaryU.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AUnicodeStringDictionaryU.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AUnicodeStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AUnicodeStringDictionaryA) do
  begin
    RegisterPropertyHelper(@AUnicodeStringDictionaryAItem_R,@AUnicodeStringDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AUnicodeStringDictionaryA, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AUnicodeStringDictionaryA.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AUnicodeStringDictionaryA.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ARawByteStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ARawByteStringDictionary) do
  begin
    RegisterPropertyHelper(@ARawByteStringDictionaryItem_R,@ARawByteStringDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionary, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@ARawByteStringDictionary.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@ARawByteStringDictionary.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ARawByteStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ARawByteStringDictionaryU) do
  begin
    RegisterPropertyHelper(@ARawByteStringDictionaryUItem_R,@ARawByteStringDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryU, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@ARawByteStringDictionaryU.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@ARawByteStringDictionaryU.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ARawByteStringDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ARawByteStringDictionaryB) do
  begin
    RegisterPropertyHelper(@ARawByteStringDictionaryBItem_R,@ARawByteStringDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryB, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@ARawByteStringDictionaryB.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@ARawByteStringDictionaryB.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ARawByteStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ARawByteStringDictionaryA) do
  begin
    RegisterPropertyHelper(@ARawByteStringDictionaryAItem_R,@ARawByteStringDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ARawByteStringDictionaryA, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@ARawByteStringDictionaryA.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@ARawByteStringDictionaryA.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AAnsiStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AAnsiStringDictionary) do
  begin
    RegisterPropertyHelper(@AAnsiStringDictionaryItem_R,@AAnsiStringDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionary, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AAnsiStringDictionary.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AAnsiStringDictionary.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AAnsiStringDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AAnsiStringDictionaryU) do
  begin
    RegisterPropertyHelper(@AAnsiStringDictionaryUItem_R,@AAnsiStringDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryU, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AAnsiStringDictionaryU.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AAnsiStringDictionaryU.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AAnsiStringDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AAnsiStringDictionaryA) do
  begin
    RegisterPropertyHelper(@AAnsiStringDictionaryAItem_R,@AAnsiStringDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AAnsiStringDictionaryA, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AAnsiStringDictionaryA.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AAnsiStringDictionaryA.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AExtendedDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AExtendedDictionary) do
  begin
    RegisterPropertyHelper(@AExtendedDictionaryItem_R,@AExtendedDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AExtendedDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AExtendedDictionaryU) do
  begin
    RegisterPropertyHelper(@AExtendedDictionaryUItem_R,@AExtendedDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AExtendedDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AExtendedDictionaryB) do
  begin
    RegisterPropertyHelper(@AExtendedDictionaryBItem_R,@AExtendedDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryB, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AExtendedDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AExtendedDictionaryA) do
  begin
    RegisterPropertyHelper(@AExtendedDictionaryAItem_R,@AExtendedDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AExtendedDictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADoubleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADoubleDictionary) do
  begin
    RegisterPropertyHelper(@ADoubleDictionaryItem_R,@ADoubleDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADoubleDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADoubleDictionaryU) do
  begin
    RegisterPropertyHelper(@ADoubleDictionaryUItem_R,@ADoubleDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADoubleDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADoubleDictionaryB) do
  begin
    RegisterPropertyHelper(@ADoubleDictionaryBItem_R,@ADoubleDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryB, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADoubleDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADoubleDictionaryA) do
  begin
    RegisterPropertyHelper(@ADoubleDictionaryAItem_R,@ADoubleDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ADoubleDictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ASingleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ASingleDictionary) do
  begin
    RegisterPropertyHelper(@ASingleDictionaryItem_R,@ASingleDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ASingleDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ASingleDictionaryU) do
  begin
    RegisterPropertyHelper(@ASingleDictionaryUItem_R,@ASingleDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@ASingleDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ASingleDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ASingleDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ASingleDictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ASingleDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ASingleDictionaryB) do
  begin
    RegisterPropertyHelper(@ASingleDictionaryBItem_R,@ASingleDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@ASingleDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ASingleDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ASingleDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ASingleDictionaryB, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ASingleDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ASingleDictionaryA) do
  begin
    RegisterPropertyHelper(@ASingleDictionaryAItem_R,@ASingleDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@ASingleDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ASingleDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ASingleDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ASingleDictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInt64Dictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInt64Dictionary) do
  begin
    RegisterPropertyHelper(@AInt64DictionaryItem_R,@AInt64DictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInt64DictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInt64DictionaryU) do
  begin
    RegisterPropertyHelper(@AInt64DictionaryUItem_R,@AInt64DictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInt64DictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInt64DictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInt64DictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInt64DictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInt64DictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInt64DictionaryB) do
  begin
    RegisterPropertyHelper(@AInt64DictionaryBItem_R,@AInt64DictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInt64DictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInt64DictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInt64DictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInt64DictionaryB, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInt64DictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInt64DictionaryA) do
  begin
    RegisterPropertyHelper(@AInt64DictionaryAItem_R,@AInt64DictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInt64DictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInt64DictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInt64DictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInt64DictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongWordDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongWordDictionary) do
  begin
    RegisterPropertyHelper(@ALongWordDictionaryItem_R,@ALongWordDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongWordDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongWordDictionaryU) do
  begin
    RegisterPropertyHelper(@ALongWordDictionaryUItem_R,@ALongWordDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongWordDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongWordDictionaryB) do
  begin
    RegisterPropertyHelper(@ALongWordDictionaryBItem_R,@ALongWordDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryB, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongWordDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongWordDictionaryA) do
  begin
    RegisterPropertyHelper(@ALongWordDictionaryAItem_R,@ALongWordDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongWordDictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongIntDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongIntDictionary) do
  begin
    RegisterPropertyHelper(@ALongIntDictionaryItem_R,@ALongIntDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongIntDictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongIntDictionaryU) do
  begin
    RegisterPropertyHelper(@ALongIntDictionaryUItem_R,@ALongIntDictionaryUItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryU, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryU, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryU, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryU, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongIntDictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongIntDictionaryB) do
  begin
    RegisterPropertyHelper(@ALongIntDictionaryBItem_R,@ALongIntDictionaryBItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryB, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryB, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryB, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryB, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongIntDictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongIntDictionaryA) do
  begin
    RegisterPropertyHelper(@ALongIntDictionaryAItem_R,@ALongIntDictionaryAItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryA, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryA, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryA, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongIntDictionaryA, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADictionary) do
  begin
    RegisterVirtualAbstractMethod(@ADictionary, @!.Delete, 'Delete');
    RegisterVirtualAbstractMethod(@ADictionary, @!.HasKey, 'HasKey');
    RegisterVirtualAbstractMethod(@ADictionary, @!.Rename, 'Rename');
    RegisterVirtualAbstractMethod(@ADictionary, @!.GetKeyByIndex, 'GetKeyByIndex');
    RegisterVirtualAbstractMethod(@ADictionary, @!.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterPropertyHelper(@ADictionaryKeysCaseSensitive_R,nil,'KeysCaseSensitive');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADictionaryU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADictionaryU) do
  begin
    RegisterVirtualAbstractMethod(@ADictionaryU, @!.Delete, 'Delete');
    RegisterVirtualAbstractMethod(@ADictionaryU, @!.HasKey, 'HasKey');
    RegisterVirtualAbstractMethod(@ADictionaryU, @!.Rename, 'Rename');
    RegisterVirtualAbstractMethod(@ADictionaryU, @!.GetKeyByIndex, 'GetKeyByIndex');
    RegisterVirtualAbstractMethod(@ADictionaryU, @!.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterPropertyHelper(@ADictionaryUKeysCaseSensitive_R,nil,'KeysCaseSensitive');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADictionaryB(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADictionaryB) do
  begin
    RegisterVirtualAbstractMethod(@ADictionaryB, @!.Delete, 'Delete');
    RegisterVirtualAbstractMethod(@ADictionaryB, @!.HasKey, 'HasKey');
    RegisterVirtualAbstractMethod(@ADictionaryB, @!.Rename, 'Rename');
    RegisterVirtualAbstractMethod(@ADictionaryB, @!.GetKeyByIndex, 'GetKeyByIndex');
    RegisterVirtualAbstractMethod(@ADictionaryB, @!.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterPropertyHelper(@ADictionaryBKeysCaseSensitive_R,nil,'KeysCaseSensitive');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADictionaryA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADictionaryA) do
  begin
    RegisterVirtualAbstractMethod(@ADictionaryA, @!.Delete, 'Delete');
    RegisterVirtualAbstractMethod(@ADictionaryA, @!.HasKey, 'HasKey');
    RegisterVirtualAbstractMethod(@ADictionaryA, @!.Rename, 'Rename');
    RegisterVirtualAbstractMethod(@ADictionaryA, @!.GetKeyByIndex, 'GetKeyByIndex');
    RegisterVirtualAbstractMethod(@ADictionaryA, @!.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterPropertyHelper(@ADictionaryAKeysCaseSensitive_R,nil,'KeysCaseSensitive');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADictionaryBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADictionaryBase) do
  begin
    RegisterPropertyHelper(@ADictionaryBaseAddOnSet_R,@ADictionaryBaseAddOnSet_W,'AddOnSet');
    RegisterPropertyHelper(@ADictionaryBaseDuplicatesAction_R,@ADictionaryBaseDuplicatesAction_W,'DuplicatesAction');
    RegisterVirtualAbstractMethod(@ADictionaryBase, @!.Count, 'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THashedUnicodeStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THashedUnicodeStringArray) do
  begin
    RegisterConstructor(@THashedUnicodeStringArray.Create, 'Create');
    RegisterMethod(@THashedUnicodeStringArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THashedRawByteStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THashedRawByteStringArray) do
  begin
    RegisterConstructor(@THashedRawByteStringArray.Create, 'Create');
    RegisterMethod(@THashedRawByteStringArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THashedAnsiStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THashedAnsiStringArray) do
  begin
    RegisterConstructor(@THashedAnsiStringArray.Create, 'Create');
    RegisterMethod(@THashedAnsiStringArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBitArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBitArray) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectArray) do
  begin
    RegisterConstructor(@TObjectArrayCreate103_P, 'Create103');
    RegisterPropertyHelper(@TObjectArrayData_R,@TObjectArrayData_W,'Data');
    RegisterPropertyHelper(@TObjectArrayCount_R,@TObjectArrayCount_W,'Count');
    RegisterPropertyHelper(@TObjectArrayIsItemOwner_R,@TObjectArrayIsItemOwner_W,'IsItemOwner');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfaceArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfaceArray) do
  begin
    RegisterConstructor(@TInterfaceArrayCreate99_P, 'Create99');
    RegisterMethod(@TInterfaceArrayAssign101_P, 'Assign101');
    RegisterMethod(@TInterfaceArrayAssign102_P, 'Assign102');
    RegisterPropertyHelper(@TInterfaceArrayData_R,@TInterfaceArrayData_W,'Data');
    RegisterPropertyHelper(@TInterfaceArrayCount_R,@TInterfaceArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPointerArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPointerArray) do
  begin
    RegisterConstructor(@TPointerArrayCreate95_P, 'Create95');
    RegisterMethod(@TPointerArrayAssign97_P, 'Assign97');
    RegisterMethod(@TPointerArrayAssign98_P, 'Assign98');
    RegisterPropertyHelper(@TPointerArrayData_R,@TPointerArrayData_W,'Data');
    RegisterPropertyHelper(@TPointerArrayCount_R,@TPointerArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringArray) do
  begin
    RegisterConstructor(@TStringArrayCreate91_P, 'Create91');
    RegisterMethod(@TStringArrayAssign93_P, 'Assign93');
    RegisterMethod(@TStringArrayAssign94_P, 'Assign94');
    RegisterPropertyHelper(@TStringArrayData_R,@TStringArrayData_W,'Data');
    RegisterPropertyHelper(@TStringArrayCount_R,@TStringArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUnicodeStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUnicodeStringArray) do
  begin
    RegisterConstructor(@TUnicodeStringArrayCreate87_P, 'Create87');
    RegisterMethod(@TUnicodeStringArrayAssign89_P, 'Assign89');
    RegisterMethod(@TUnicodeStringArrayAssign90_P, 'Assign90');
    RegisterPropertyHelper(@TUnicodeStringArrayData_R,@TUnicodeStringArrayData_W,'Data');
    RegisterPropertyHelper(@TUnicodeStringArrayCount_R,@TUnicodeStringArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRawByteStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRawByteStringArray) do
  begin
    RegisterConstructor(@TRawByteStringArrayCreate83_P, 'Create83');
    RegisterMethod(@TRawByteStringArrayAssign85_P, 'Assign85');
    RegisterMethod(@TRawByteStringArrayAssign86_P, 'Assign86');
    RegisterPropertyHelper(@TRawByteStringArrayData_R,@TRawByteStringArrayData_W,'Data');
    RegisterPropertyHelper(@TRawByteStringArrayCount_R,@TRawByteStringArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAnsiStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAnsiStringArray) do
  begin
    RegisterConstructor(@TAnsiStringArrayCreate79_P, 'Create79');
    RegisterMethod(@TAnsiStringArrayAssign81_P, 'Assign81');
    RegisterMethod(@TAnsiStringArrayAssign82_P, 'Assign82');
    RegisterPropertyHelper(@TAnsiStringArrayData_R,@TAnsiStringArrayData_W,'Data');
    RegisterPropertyHelper(@TAnsiStringArrayCount_R,@TAnsiStringArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TExtendedArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TExtendedArray) do
  begin
    RegisterConstructor(@TExtendedArrayCreate75_P, 'Create75');
    RegisterMethod(@TExtendedArrayAssign77_P, 'Assign77');
    RegisterMethod(@TExtendedArrayAssign78_P, 'Assign78');
    RegisterPropertyHelper(@TExtendedArrayData_R,@TExtendedArrayData_W,'Data');
    RegisterPropertyHelper(@TExtendedArrayCount_R,@TExtendedArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoubleArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoubleArray) do
  begin
    RegisterConstructor(@TDoubleArrayCreate71_P, 'Create71');
    RegisterMethod(@TDoubleArrayAssign73_P, 'Assign73');
    RegisterMethod(@TDoubleArrayAssign74_P, 'Assign74');
    RegisterPropertyHelper(@TDoubleArrayData_R,@TDoubleArrayData_W,'Data');
    RegisterPropertyHelper(@TDoubleArrayCount_R,@TDoubleArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSingleArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSingleArray) do
  begin
    RegisterConstructor(@TSingleArrayCreate67_P, 'Create67');
    RegisterMethod(@TSingleArrayAssign69_P, 'Assign69');
    RegisterMethod(@TSingleArrayAssign70_P, 'Assign70');
    RegisterPropertyHelper(@TSingleArrayData_R,@TSingleArrayData_W,'Data');
    RegisterPropertyHelper(@TSingleArrayCount_R,@TSingleArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongWordArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongWordArray) do
  begin
    RegisterConstructor(@TLongWordArrayCreate63_P, 'Create63');
    RegisterMethod(@TLongWordArrayAssign65_P, 'Assign65');
    RegisterMethod(@TLongWordArrayAssign66_P, 'Assign66');
    RegisterPropertyHelper(@TLongWordArrayData_R,@TLongWordArrayData_W,'Data');
    RegisterPropertyHelper(@TLongWordArrayCount_R,@TLongWordArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWord64Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWord64Array) do
  begin
    RegisterConstructor(@TWord64ArrayCreate59_P, 'Create59');
    RegisterMethod(@TWord64ArrayAssign61_P, 'Assign61');
    RegisterMethod(@TWord64ArrayAssign62_P, 'Assign62');
    RegisterPropertyHelper(@TWord64ArrayData_R,@TWord64ArrayData_W,'Data');
    RegisterPropertyHelper(@TWord64ArrayCount_R,@TWord64ArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWord32Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWord32Array) do
  begin
    RegisterConstructor(@TWord32ArrayCreate55_P, 'Create55');
    RegisterMethod(@TWord32ArrayAssign57_P, 'Assign57');
    RegisterMethod(@TWord32ArrayAssign58_P, 'Assign58');
    RegisterPropertyHelper(@TWord32ArrayData_R,@TWord32ArrayData_W,'Data');
    RegisterPropertyHelper(@TWord32ArrayCount_R,@TWord32ArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongIntArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongIntArray) do
  begin
    RegisterConstructor(@TLongIntArrayCreate51_P, 'Create51');
    RegisterMethod(@TLongIntArrayAssign53_P, 'Assign53');
    RegisterMethod(@TLongIntArrayAssign54_P, 'Assign54');
    RegisterPropertyHelper(@TLongIntArrayData_R,@TLongIntArrayData_W,'Data');
    RegisterPropertyHelper(@TLongIntArrayCount_R,@TLongIntArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInt64Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInt64Array) do
  begin
    RegisterConstructor(@TInt64ArrayCreate47_P, 'Create47');
    RegisterMethod(@TInt64ArrayAssign49_P, 'Assign49');
    RegisterMethod(@TInt64ArrayAssign50_P, 'Assign50');
    RegisterPropertyHelper(@TInt64ArrayData_R,@TInt64ArrayData_W,'Data');
    RegisterPropertyHelper(@TInt64ArrayCount_R,@TInt64ArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInt32Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInt32Array) do
  begin
    RegisterConstructor(@TInt32ArrayCreate43_P, 'Create43');
    RegisterMethod(@TInt32ArrayAssign45_P, 'Assign45');
    RegisterMethod(@TInt32ArrayAssign46_P, 'Assign46');
    RegisterPropertyHelper(@TInt32ArrayData_R,@TInt32ArrayData_W,'Data');
    RegisterPropertyHelper(@TInt32ArrayCount_R,@TInt32ArrayCount_W,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ABitArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ABitArray) do
  begin
    RegisterPropertyHelper(@ABitArrayBit_R,@ABitArrayBit_W,'Bit');
    RegisterPropertyHelper(@ABitArrayRangeL_R,@ABitArrayRangeL_W,'RangeL');
    RegisterVirtualMethod(@ABitArray.IsRange, 'IsRange');
    RegisterVirtualMethod(@ABitArray.Fill, 'Fill');
    RegisterVirtualMethod(@ABitArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@ABitArray.Invert, 'Invert');
    RegisterVirtualMethod(@ABitArray.Find, 'Find');
    RegisterVirtualMethod(@ABitArray.FindRange, 'FindRange');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AObjectArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AObjectArray) do
  begin
    RegisterPropertyHelper(@AObjectArrayItem_R,@AObjectArrayItem_W,'Item');
    RegisterPropertyHelper(@AObjectArrayRange_R,@AObjectArrayRange_W,'Range');
    RegisterVirtualMethod(@AObjectArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AObjectArrayAppendArray33_P, 'AppendArray33');
    RegisterMethod(@AObjectArrayPosNext34_P, 'PosNext34');
    RegisterMethod(@AObjectArrayPosNext35_P, 'PosNext35');
    RegisterMethod(@AObjectArrayPosNext36_P, 'PosNext36');
    RegisterMethod(@AObjectArrayFind37_P, 'Find37');
    RegisterMethod(@AObjectArrayFind38_P, 'Find38');
    RegisterMethod(@AObjectArrayFindAll39_P, 'FindAll39');
    RegisterMethod(@AObjectArrayFindAll40_P, 'FindAll40');
    RegisterMethod(@AObjectArrayCountItems41_P, 'CountItems41');
    RegisterMethod(@AObjectArrayCountItems42_P, 'CountItems42');
    RegisterMethod(@AObjectArray.DeleteValue, 'DeleteValue');
    RegisterMethod(@AObjectArray.DeleteAll, 'DeleteAll');
    RegisterPropertyHelper(@AObjectArrayIsItemOwner_R,@AObjectArrayIsItemOwner_W,'IsItemOwner');
    RegisterVirtualAbstractMethod(@AObjectArray, @!.ReleaseItems, 'ReleaseItems');
    RegisterVirtualAbstractMethod(@AObjectArray, @!.FreeItems, 'FreeItems');
    RegisterVirtualAbstractMethod(@AObjectArray, @!.ReleaseItem, 'ReleaseItem');
    RegisterMethod(@AObjectArray.ReleaseValue, 'ReleaseValue');
    RegisterMethod(@AObjectArray.RemoveItem, 'RemoveItem');
    RegisterMethod(@AObjectArray.RemoveValue, 'RemoveValue');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInterfaceArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInterfaceArray) do
  begin
    RegisterPropertyHelper(@AInterfaceArrayItem_R,@AInterfaceArrayItem_W,'Item');
    RegisterPropertyHelper(@AInterfaceArrayRange_R,@AInterfaceArrayRange_W,'Range');
    RegisterVirtualMethod(@AInterfaceArray.Fill, 'Fill');
    RegisterVirtualMethod(@AInterfaceArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AInterfaceArrayAppendArray31_P, 'AppendArray31');
    RegisterMethod(@AInterfaceArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_APointerArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(APointerArray) do
  begin
    RegisterPropertyHelper(@APointerArrayItem_R,@APointerArrayItem_W,'Item');
    RegisterPropertyHelper(@APointerArrayRange_R,@APointerArrayRange_W,'Range');
    RegisterVirtualMethod(@APointerArray.Fill, 'Fill');
    RegisterVirtualMethod(@APointerArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@APointerArrayAppendArray29_P, 'AppendArray29');
    RegisterMethod(@APointerArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AStringArray) do
  begin
    RegisterPropertyHelper(@AStringArrayItem_R,@AStringArrayItem_W,'Item');
    RegisterPropertyHelper(@AStringArrayRange_R,@AStringArrayRange_W,'Range');
    RegisterVirtualMethod(@AStringArray.Fill, 'Fill');
    RegisterVirtualMethod(@AStringArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AStringArrayAppendArray27_P, 'AppendArray27');
    RegisterMethod(@AStringArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AUnicodeStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AUnicodeStringArray) do
  begin
    RegisterPropertyHelper(@AUnicodeStringArrayItem_R,@AUnicodeStringArrayItem_W,'Item');
    RegisterPropertyHelper(@AUnicodeStringArrayRange_R,@AUnicodeStringArrayRange_W,'Range');
    RegisterVirtualMethod(@AUnicodeStringArray.Fill, 'Fill');
    RegisterVirtualMethod(@AUnicodeStringArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AUnicodeStringArrayAppendArray25_P, 'AppendArray25');
    RegisterMethod(@AUnicodeStringArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ARawByteStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ARawByteStringArray) do
  begin
    RegisterPropertyHelper(@ARawByteStringArrayItem_R,@ARawByteStringArrayItem_W,'Item');
    RegisterPropertyHelper(@ARawByteStringArrayRange_R,@ARawByteStringArrayRange_W,'Range');
    RegisterVirtualMethod(@ARawByteStringArray.Fill, 'Fill');
    RegisterVirtualMethod(@ARawByteStringArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@ARawByteStringArrayAppendArray23_P, 'AppendArray23');
    RegisterMethod(@ARawByteStringArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AAnsiStringArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AAnsiStringArray) do
  begin
    RegisterPropertyHelper(@AAnsiStringArrayItem_R,@AAnsiStringArrayItem_W,'Item');
    RegisterPropertyHelper(@AAnsiStringArrayRange_R,@AAnsiStringArrayRange_W,'Range');
    RegisterVirtualMethod(@AAnsiStringArray.Fill, 'Fill');
    RegisterVirtualMethod(@AAnsiStringArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AAnsiStringArrayAppendArray21_P, 'AppendArray21');
    RegisterMethod(@AAnsiStringArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AExtendedArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AExtendedArray) do
  begin
    RegisterPropertyHelper(@AExtendedArrayItem_R,@AExtendedArrayItem_W,'Item');
    RegisterPropertyHelper(@AExtendedArrayRange_R,@AExtendedArrayRange_W,'Range');
    RegisterVirtualMethod(@AExtendedArray.Fill, 'Fill');
    RegisterVirtualMethod(@AExtendedArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AExtendedArrayAppendArray19_P, 'AppendArray19');
    RegisterMethod(@AExtendedArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADoubleArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADoubleArray) do
  begin
    RegisterPropertyHelper(@ADoubleArrayItem_R,@ADoubleArrayItem_W,'Item');
    RegisterPropertyHelper(@ADoubleArrayRange_R,@ADoubleArrayRange_W,'Range');
    RegisterVirtualMethod(@ADoubleArray.Fill, 'Fill');
    RegisterVirtualMethod(@ADoubleArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@ADoubleArrayAppendArray17_P, 'AppendArray17');
    RegisterMethod(@ADoubleArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ASingleArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ASingleArray) do
  begin
    RegisterPropertyHelper(@ASingleArrayItem_R,@ASingleArrayItem_W,'Item');
    RegisterPropertyHelper(@ASingleArrayRange_R,@ASingleArrayRange_W,'Range');
    RegisterVirtualMethod(@ASingleArray.Fill, 'Fill');
    RegisterVirtualMethod(@ASingleArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@ASingleArrayAppendArray15_P, 'AppendArray15');
    RegisterMethod(@ASingleArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongWordArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongWordArray) do
  begin
    RegisterPropertyHelper(@ALongWordArrayItem_R,@ALongWordArrayItem_W,'Item');
    RegisterPropertyHelper(@ALongWordArrayRange_R,@ALongWordArrayRange_W,'Range');
    RegisterVirtualMethod(@ALongWordArray.Fill, 'Fill');
    RegisterVirtualMethod(@ALongWordArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@ALongWordArrayAppendArray13_P, 'AppendArray13');
    RegisterMethod(@ALongWordArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AWord64Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AWord64Array) do
  begin
    RegisterPropertyHelper(@AWord64ArrayItem_R,@AWord64ArrayItem_W,'Item');
    RegisterPropertyHelper(@AWord64ArrayRange_R,@AWord64ArrayRange_W,'Range');
    RegisterVirtualMethod(@AWord64Array.Fill, 'Fill');
    RegisterVirtualMethod(@AWord64Array.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AWord64ArrayAppendArray11_P, 'AppendArray11');
    RegisterMethod(@AWord64Array.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AWord32Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AWord32Array) do
  begin
    RegisterPropertyHelper(@AWord32ArrayItem_R,@AWord32ArrayItem_W,'Item');
    RegisterPropertyHelper(@AWord32ArrayRange_R,@AWord32ArrayRange_W,'Range');
    RegisterVirtualMethod(@AWord32Array.Fill, 'Fill');
    RegisterVirtualMethod(@AWord32Array.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AWord32ArrayAppendArray9_P, 'AppendArray9');
    RegisterMethod(@AWord32Array.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongIntArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongIntArray) do
  begin
    RegisterPropertyHelper(@ALongIntArrayItem_R,@ALongIntArrayItem_W,'Item');
    RegisterPropertyHelper(@ALongIntArrayRange_R,@ALongIntArrayRange_W,'Range');
    RegisterVirtualMethod(@ALongIntArray.Fill, 'Fill');
    RegisterVirtualMethod(@ALongIntArray.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@ALongIntArrayAppendArray7_P, 'AppendArray7');
    RegisterMethod(@ALongIntArray.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInt64Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInt64Array) do
  begin
    RegisterPropertyHelper(@AInt64ArrayItem_R,@AInt64ArrayItem_W,'Item');
    RegisterPropertyHelper(@AInt64ArrayRange_R,@AInt64ArrayRange_W,'Range');
    RegisterVirtualMethod(@AInt64Array.Fill, 'Fill');
    RegisterVirtualMethod(@AInt64Array.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AInt64ArrayAppendArray5_P, 'AppendArray5');
    RegisterMethod(@AInt64Array.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInt32Array(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInt32Array) do
  begin
    RegisterPropertyHelper(@AInt32ArrayItem_R,@AInt32ArrayItem_W,'Item');
    RegisterPropertyHelper(@AInt32ArrayRange_R,@AInt32ArrayRange_W,'Range');
    RegisterVirtualMethod(@AInt32Array.Fill, 'Fill');
    RegisterVirtualMethod(@AInt32Array.AppendItem, 'AppendItem');
    RegisterVirtualMethod(@AInt32ArrayAppendArray3_P, 'AppendArray3');
    RegisterMethod(@AInt32Array.PosNext, 'PosNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AArray(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AArray) do
  begin
    RegisterPropertyHelper(@AArrayCount_R,@AArrayCount_W,'Count');
    RegisterPropertyHelper(@AArrayItemAsString_R,@AArrayItemAsString_W,'ItemAsString');
    RegisterVirtualAbstractMethod(@AArray, @!.CompareItems, 'CompareItems');
    RegisterVirtualAbstractMethod(@AArray, @!.ExchangeItems, 'ExchangeItems');
    RegisterVirtualMethod(@AArray.Sort, 'Sort');
    RegisterVirtualMethod(@AArray.ReverseOrder, 'ReverseOrder');
    RegisterVirtualMethod(@AArray.RemoveDuplicates, 'RemoveDuplicates');
    RegisterVirtualAbstractMethod(@AArray, @!.DuplicateRange, 'DuplicateRange');
    RegisterVirtualAbstractMethod(@AArray, @!.Delete, 'Delete');
    RegisterVirtualAbstractMethod(@AArray, @!.Insert, 'Insert');
    RegisterVirtualAbstractMethod(@AArray, @!.AppendArray1, 'AppendArray1');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcDataStructs_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@TypeDuplicate, 'TypeDuplicate', cdRegister);
 S.RegisterDelphiFunction(@TypeAssign, 'TypeAssign', cdRegister);
 S.RegisterDelphiFunction(@TypeClear, 'TypeClear', cdRegister);
 S.RegisterDelphiFunction(@TypeIsEqual, 'TypeIsEqual', cdRegister);
 S.RegisterDelphiFunction(@TypeCompare, 'TypeCompare', cdRegister);
 S.RegisterDelphiFunction(@TypeHashValue, 'TypeHashValue', cdRegister);
 S.RegisterDelphiFunction(@TypeGetAsString, 'TypeGetAsString', cdRegister);
 S.RegisterDelphiFunction(@TypeSetAsString, 'TypeSetAsString', cdRegister);
 S.RegisterDelphiFunction(@TypeGetAsUTF8String, 'TypeGetAsUTF8String', cdRegister);
 S.RegisterDelphiFunction(@TypeSetAsUTF8String, 'TypeSetAsUTF8String', cdRegister);
 S.RegisterDelphiFunction(@TypeGetAsUnicodeString, 'TypeGetAsUnicodeString', cdRegister);
 S.RegisterDelphiFunction(@TypeSetAsUnicodeString, 'TypeSetAsUnicodeString', cdRegister);
  RIRegister_AArray(CL);
  with CL.Add(EArray) do
  RIRegister_AInt32Array(CL);
  with CL.Add(EInt32Array) do
  RIRegister_AInt64Array(CL);
  with CL.Add(EInt64Array) do
  RIRegister_ALongIntArray(CL);
  with CL.Add(ELongIntArray) do
  RIRegister_AWord32Array(CL);
  with CL.Add(EWord32Array) do
  RIRegister_AWord64Array(CL);
  with CL.Add(EWord64Array) do
  RIRegister_ALongWordArray(CL);
  with CL.Add(ELongWordArray) do
  RIRegister_ASingleArray(CL);
  with CL.Add(ESingleArray) do
  RIRegister_ADoubleArray(CL);
  with CL.Add(EDoubleArray) do
  RIRegister_AExtendedArray(CL);
  with CL.Add(EExtendedArray) do
  RIRegister_AAnsiStringArray(CL);
  with CL.Add(EAnsiStringArray) do
  RIRegister_ARawByteStringArray(CL);
  with CL.Add(ERawByteStringArray) do
  RIRegister_AUnicodeStringArray(CL);
  with CL.Add(EUnicodeStringArray) do
  RIRegister_AStringArray(CL);
  with CL.Add(EStringArray) do
  RIRegister_APointerArray(CL);
  with CL.Add(EPointerArray) do
  RIRegister_AInterfaceArray(CL);
  with CL.Add(EInterfaceArray) do
  with CL.Add(EObjectArray) do
  RIRegister_AObjectArray(CL);
  with CL.Add(EBitArray) do
  RIRegister_ABitArray(CL);
  RIRegister_TInt32Array(CL);
  RIRegister_TInt64Array(CL);
  RIRegister_TLongIntArray(CL);
  RIRegister_TWord32Array(CL);
  RIRegister_TWord64Array(CL);
  RIRegister_TLongWordArray(CL);
  RIRegister_TSingleArray(CL);
  RIRegister_TDoubleArray(CL);
  RIRegister_TExtendedArray(CL);
  RIRegister_TAnsiStringArray(CL);
  RIRegister_TRawByteStringArray(CL);
  RIRegister_TUnicodeStringArray(CL);
  RIRegister_TStringArray(CL);
  RIRegister_TPointerArray(CL);
  RIRegister_TInterfaceArray(CL);
  RIRegister_TObjectArray(CL);
  RIRegister_TBitArray(CL);
  RIRegister_THashedAnsiStringArray(CL);
  RIRegister_THashedRawByteStringArray(CL);
  RIRegister_THashedUnicodeStringArray(CL);
  RIRegister_ADictionaryBase(CL);
  with CL.Add(EDictionary) do
  RIRegister_ADictionaryA(CL);
  RIRegister_ADictionaryB(CL);
  RIRegister_ADictionaryU(CL);
  RIRegister_ADictionary(CL);
  RIRegister_ALongIntDictionaryA(CL);
  with CL.Add(ELongIntDictionaryA) do
  RIRegister_ALongIntDictionaryB(CL);
  with CL.Add(ELongIntDictionaryB) do
  RIRegister_ALongIntDictionaryU(CL);
  with CL.Add(ELongIntDictionaryU) do
  RIRegister_ALongIntDictionary(CL);
  with CL.Add(ELongIntDictionary) do
  RIRegister_ALongWordDictionaryA(CL);
  with CL.Add(ELongWordDictionaryA) do
  RIRegister_ALongWordDictionaryB(CL);
  with CL.Add(ELongWordDictionaryB) do
  RIRegister_ALongWordDictionaryU(CL);
  with CL.Add(ELongWordDictionaryU) do
  RIRegister_ALongWordDictionary(CL);
  with CL.Add(ELongWordDictionary) do
  RIRegister_AInt64DictionaryA(CL);
  with CL.Add(EInt64DictionaryA) do
  RIRegister_AInt64DictionaryB(CL);
  with CL.Add(EInt64DictionaryB) do
  RIRegister_AInt64DictionaryU(CL);
  with CL.Add(EInt64DictionaryU) do
  RIRegister_AInt64Dictionary(CL);
  with CL.Add(EInt64Dictionary) do
  RIRegister_ASingleDictionaryA(CL);
  with CL.Add(ESingleDictionaryA) do
  RIRegister_ASingleDictionaryB(CL);
  with CL.Add(ESingleDictionaryB) do
  RIRegister_ASingleDictionaryU(CL);
  with CL.Add(ESingleDictionaryU) do
  RIRegister_ASingleDictionary(CL);
  with CL.Add(ESingleDictionary) do
  RIRegister_ADoubleDictionaryA(CL);
  with CL.Add(EDoubleDictionaryA) do
  RIRegister_ADoubleDictionaryB(CL);
  with CL.Add(EDoubleDictionaryB) do
  RIRegister_ADoubleDictionaryU(CL);
  with CL.Add(EDoubleDictionaryU) do
  RIRegister_ADoubleDictionary(CL);
  with CL.Add(EDoubleDictionary) do
  RIRegister_AExtendedDictionaryA(CL);
  with CL.Add(EExtendedDictionaryA) do
  RIRegister_AExtendedDictionaryB(CL);
  with CL.Add(EExtendedDictionaryB) do
  RIRegister_AExtendedDictionaryU(CL);
  with CL.Add(EExtendedDictionaryU) do
  RIRegister_AExtendedDictionary(CL);
  with CL.Add(EExtendedDictionary) do
  RIRegister_AAnsiStringDictionaryA(CL);
  with CL.Add(EAnsiStringDictionaryA) do
  RIRegister_AAnsiStringDictionaryU(CL);
  with CL.Add(EAnsiStringDictionaryU) do
  RIRegister_AAnsiStringDictionary(CL);
  with CL.Add(EAnsiStringDictionary) do
  RIRegister_ARawByteStringDictionaryA(CL);
  with CL.Add(ERawByteStringDictionaryA) do
  RIRegister_ARawByteStringDictionaryB(CL);
  with CL.Add(ERawByteStringDictionaryB) do
  RIRegister_ARawByteStringDictionaryU(CL);
  with CL.Add(ERawByteStringDictionaryU) do
  RIRegister_ARawByteStringDictionary(CL);
  with CL.Add(ERawByteStringDictionary) do
  RIRegister_AUnicodeStringDictionaryA(CL);
  with CL.Add(EUnicodeStringDictionaryA) do
  RIRegister_AUnicodeStringDictionaryU(CL);
  with CL.Add(EUnicodeStringDictionaryU) do
  RIRegister_AUnicodeStringDictionary(CL);
  with CL.Add(EUnicodeStringDictionary) do
  RIRegister_AStringDictionaryA(CL);
  with CL.Add(EStringDictionaryA) do
  RIRegister_AStringDictionaryU(CL);
  with CL.Add(EStringDictionaryU) do
  RIRegister_AStringDictionary(CL);
  with CL.Add(EStringDictionary) do
  RIRegister_APointerDictionaryA(CL);
  with CL.Add(EPointerDictionaryA) do
  RIRegister_APointerDictionaryB(CL);
  with CL.Add(EPointerDictionaryB) do
  RIRegister_APointerDictionaryU(CL);
  with CL.Add(EPointerDictionaryU) do
  RIRegister_APointerDictionary(CL);
  with CL.Add(EPointerDictionary) do
  RIRegister_AInterfaceDictionaryA(CL);
  with CL.Add(EInterfaceDictionaryA) do
  RIRegister_AInterfaceDictionaryU(CL);
  with CL.Add(EInterfaceDictionaryU) do
  RIRegister_AInterfaceDictionary(CL);
  with CL.Add(EInterfaceDictionary) do
  RIRegister_AObjectDictionaryA(CL);
  with CL.Add(EObjectDictionaryA) do
  RIRegister_AObjectDictionaryB(CL);
  with CL.Add(EObjectDictionaryB) do
  RIRegister_AObjectDictionaryU(CL);
  with CL.Add(EObjectDictionaryU) do
  RIRegister_AObjectDictionary(CL);
  with CL.Add(EObjectDictionary) do
  RIRegister_TGeneralLongIntDictionaryA(CL);
  RIRegister_TLongIntDictionaryA(CL);
  RIRegister_TGeneralLongIntDictionaryB(CL);
  RIRegister_TLongIntDictionaryB(CL);
  RIRegister_TGeneralLongIntDictionaryU(CL);
  RIRegister_TLongIntDictionaryU(CL);
  RIRegister_TGeneralLongIntDictionary(CL);
  RIRegister_TLongIntDictionary(CL);
  RIRegister_TGeneralLongWordDictionaryA(CL);
  RIRegister_TLongWordDictionaryA(CL);
  RIRegister_TGeneralLongWordDictionaryB(CL);
  RIRegister_TLongWordDictionaryB(CL);
  RIRegister_TGeneralLongWordDictionaryU(CL);
  RIRegister_TLongWordDictionaryU(CL);
  RIRegister_TGeneralLongWordDictionary(CL);
  RIRegister_TLongWordDictionary(CL);
  RIRegister_TGeneralInt64DictionaryA(CL);
  RIRegister_TInt64DictionaryA(CL);
  RIRegister_TGeneralInt64DictionaryB(CL);
  RIRegister_TInt64DictionaryB(CL);
  RIRegister_TGeneralInt64DictionaryU(CL);
  RIRegister_TInt64DictionaryU(CL);
  RIRegister_TGeneralInt64Dictionary(CL);
  RIRegister_TInt64Dictionary(CL);
  RIRegister_TGeneralSingleDictionaryA(CL);
  RIRegister_TSingleDictionaryA(CL);
  RIRegister_TGeneralSingleDictionaryB(CL);
  RIRegister_TSingleDictionaryB(CL);
  RIRegister_TGeneralSingleDictionaryU(CL);
  RIRegister_TSingleDictionaryU(CL);
  RIRegister_TGeneralSingleDictionary(CL);
  RIRegister_TSingleDictionary(CL);
  RIRegister_TGeneralDoubleDictionaryA(CL);
  RIRegister_TDoubleDictionaryA(CL);
  RIRegister_TGeneralDoubleDictionaryB(CL);
  RIRegister_TDoubleDictionaryB(CL);
  RIRegister_TGeneralDoubleDictionaryU(CL);
  RIRegister_TDoubleDictionaryU(CL);
  RIRegister_TGeneralDoubleDictionary(CL);
  RIRegister_TDoubleDictionary(CL);
  RIRegister_TGeneralExtendedDictionaryA(CL);
  RIRegister_TExtendedDictionaryA(CL);
  RIRegister_TGeneralExtendedDictionaryB(CL);
  RIRegister_TExtendedDictionaryB(CL);
  RIRegister_TGeneralExtendedDictionaryU(CL);
  RIRegister_TExtendedDictionaryU(CL);
  RIRegister_TGeneralExtendedDictionary(CL);
  RIRegister_TExtendedDictionary(CL);
  RIRegister_TGeneralAnsiStringDictionaryA(CL);
  RIRegister_TAnsiStringDictionaryA(CL);
  RIRegister_TGeneralAnsiStringDictionaryU(CL);
  RIRegister_TAnsiStringDictionaryU(CL);
  RIRegister_TGeneralAnsiStringDictionary(CL);
  RIRegister_TAnsiStringDictionary(CL);
  RIRegister_TGeneralRawByteStringDictionaryA(CL);
  RIRegister_TRawByteStringDictionaryA(CL);
  RIRegister_TGeneralRawByteStringDictionaryB(CL);
  RIRegister_TRawByteStringDictionaryB(CL);
  RIRegister_TGeneralRawByteStringDictionaryU(CL);
  RIRegister_TRawByteStringDictionaryU(CL);
  RIRegister_TGeneralRawByteStringDictionary(CL);
  RIRegister_TRawByteStringDictionary(CL);
  RIRegister_TGeneralUnicodeStringDictionaryA(CL);
  RIRegister_TUnicodeStringDictionaryA(CL);
  RIRegister_TGeneralUnicodeStringDictionaryU(CL);
  RIRegister_TUnicodeStringDictionaryU(CL);
  RIRegister_TGeneralUnicodeStringDictionary(CL);
  RIRegister_TUnicodeStringDictionary(CL);
  RIRegister_TGeneralStringDictionaryA(CL);
  RIRegister_TStringDictionaryA(CL);
  RIRegister_TGeneralStringDictionaryU(CL);
  RIRegister_TStringDictionaryU(CL);
  RIRegister_TGeneralStringDictionary(CL);
  RIRegister_TStringDictionary(CL);
  RIRegister_TGeneralPointerDictionaryA(CL);
  RIRegister_TPointerDictionaryA(CL);
  RIRegister_TGeneralPointerDictionaryB(CL);
  RIRegister_TPointerDictionaryB(CL);
  RIRegister_TGeneralPointerDictionaryU(CL);
  RIRegister_TPointerDictionaryU(CL);
  RIRegister_TGeneralPointerDictionary(CL);
  RIRegister_TPointerDictionary(CL);
  RIRegister_TGeneralInterfaceDictionaryA(CL);
  RIRegister_TInterfaceDictionaryA(CL);
  RIRegister_TGeneralInterfaceDictionaryU(CL);
  RIRegister_TInterfaceDictionaryU(CL);
  RIRegister_TGeneralInterfaceDictionary(CL);
  RIRegister_TInterfaceDictionary(CL);
  RIRegister_TGeneralObjectDictionaryA(CL);
  RIRegister_TObjectDictionaryA(CL);
  RIRegister_TGeneralObjectDictionaryB(CL);
  RIRegister_TObjectDictionaryB(CL);
  RIRegister_TGeneralObjectDictionaryU(CL);
  RIRegister_TObjectDictionaryU(CL);
  RIRegister_TGeneralObjectDictionary(CL);
  RIRegister_TObjectDictionary(CL);
 S.RegisterDelphiFunction(@DictionaryRehashSize, 'DictionaryRehashSize', cdRegister);
  RIRegister_ASparseArray(CL);
  with CL.Add(ESparseArray) do
  RIRegister_TSparseAnsiStringArray(CL);
  with CL.Add(ESparseAnsiStringArray) do
  RIRegister_TSparseInt64Array(CL);
  with CL.Add(ESparseInt64Array) do
  RIRegister_TSparseExtendedArray(CL);
  with CL.Add(ESparseExtendedArray) do
  RIRegister_TSparseObjectArray(CL);
  with CL.Add(ESparseObjectArray) do
  RIRegister_TDoublyLinkedItem(CL);
  RIRegister_TDoublyLinkedInteger(CL);
  RIRegister_TDoublyLinkedExtended(CL);
  RIRegister_TDoublyLinkedString(CL);
  RIRegister_TDoublyLinkedObject(CL);
 S.RegisterDelphiFunction(@AsDoublyLinkedIntegerList, 'AsDoublyLinkedIntegerList', cdRegister);
 S.RegisterDelphiFunction(@AsDoublyLinkedExtendedList, 'AsDoublyLinkedExtendedList', cdRegister);
 S.RegisterDelphiFunction(@AsDoublyLinkedStringList, 'AsDoublyLinkedStringList', cdRegister);
  RIRegister_TDoublyLinkedList(CL);
 S.RegisterDelphiFunction(@Test, 'Test', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ATypeClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ATypeClass) do
  begin
    RegisterConstructor(@ATypeClass.Create, 'Create');
    RegisterVirtualMethod(@ATypeClass.CreateInstance, 'CreateInstance');
    RegisterVirtualMethod(@ATypeClass.Duplicate, 'Duplicate');
    RegisterVirtualMethod(@ATypeClassAssign_P, 'Assign');
    RegisterVirtualMethod(@ATypeClass.Clear, 'Clear');
    RegisterVirtualMethod(@ATypeClass.IsEmpty, 'IsEmpty');
    RegisterVirtualMethod(@ATypeClass.IsEqual, 'IsEqual');
    RegisterVirtualMethod(@ATypeClass.Compare, 'Compare');
    RegisterVirtualMethod(@ATypeClass.HashValue, 'HashValue');
    RegisterPropertyHelper(@ATypeClassAsString_R,@ATypeClassAsString_W,'AsString');
    RegisterPropertyHelper(@ATypeClassAsUTF8String_R,@ATypeClassAsUTF8String_W,'AsUTF8String');
    RegisterPropertyHelper(@ATypeClassAsUnicodeString_R,@ATypeClassAsUnicodeString_W,'AsUnicodeString');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcDataStructs(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EType) do
  RIRegister_ATypeClass(CL);
end;

 
 
{ TPSImport_flcDataStructs }
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcDataStructs.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_flcDataStructs(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcDataStructs.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_flcDataStructs(ri);
  RIRegister_flcDataStructs_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
