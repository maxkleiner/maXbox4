unit uPSI_DBGrids;
{
This file has been generated by UnitParser v0.7
  including published and constructor, more for grids with open protected, more free methods
   canvas to read/write     add align      fix canvas    add rowheights
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_DBGrids = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TDBGrid(CL: TPSPascalCompiler);
procedure SIRegister_TCustomDBGrid(CL: TPSPascalCompiler);
procedure SIRegister_TBookmarkList(CL: TPSPascalCompiler);
procedure SIRegister_TGridDataLink(CL: TPSPascalCompiler);
procedure SIRegister_TDBGridColumns(CL: TPSPascalCompiler);
procedure SIRegister_TColumn(CL: TPSPascalCompiler);
procedure SIRegister_TColumnTitle(CL: TPSPascalCompiler);
procedure SIRegister_DBGrids(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TDBGrid(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomDBGrid(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBookmarkList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGridDataLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDBGridColumns(CL: TPSRuntimeClassImporter);
procedure RIRegister_TColumn(CL: TPSRuntimeClassImporter);
procedure RIRegister_TColumnTitle(CL: TPSRuntimeClassImporter);
procedure RIRegister_DBGrids(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Variants
  ,Windows
  ,Messages
  ,Controls
  ,Forms
  ,StdCtrls
  ,Graphics
  ,Grids
  ,DBCtrls
  ,Db
  ,Menus
  ,ImgList
  ,DBGrids
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_DBGrids]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBGrid(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomDBGrid', 'TDBGrid') do
  with CL.AddClassN(CL.FindClass('TCustomDBGrid'),'TDBGrid') do begin
    RegisterPublishedProperties;
    RegisterProperty('SelectedRows','TBookmarkList',iptr);
      RegisterProperty('BorderStyle', 'TBorderStyle', iptrw);
    RegisterProperty('BORDERWIDTH', 'Integer', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('HIDESELECTION', 'Boolean', iptrw);
    RegisterProperty('Taborder', 'byte', iptrw);
      RegisterProperty('Canvas', 'TCanvas', iptr);
         RegisterProperty('FixedColor', 'TColor', iptrw);
          RegisterProperty('RowHeigths', 'Integer Integer', iptrw);

   // TDBGridColumns
     RegisterProperty('ALIGNMENT', 'TAlignment', iptrw);
       RegisterProperty('Align', 'TAlign', iptRW);
    RegisterProperty('ClientHeight', 'Longint', iptRW);
    RegisterProperty('ClientWidth', 'Longint', iptRW);
    RegisterProperty('ClientOrigin', 'TPoint', iptrw);
    RegisterProperty('ClientRect', 'TRect', iptrw);
    RegisterProperty('Anchors', 'TAnchors', iptRW);
    RegisterProperty('BidiMode', 'TBiDiMode', iptrw);
    RegisterProperty('ParentBidiMode', 'boolean', iptrw);

    RegisterProperty('BoundsRect', 'TRect', iptrw);
    RegisterProperty('Ctl3D', 'boolean', iptrw);
    RegisterProperty('ImeMode', 'TImeMode', iptrw);
    RegisterProperty('ImeName', 'TImeName', iptrw);
    RegisterProperty('RowHeights', 'Integer Integer', iptrw);
    //RegisterProperty('DefaultRowHeight', 'Integer', iptrw);

    // property Ctl3D;
    //   property ImeMode;
    //property ImeName;

    //RegisterProperty('Color', 'TColor', iptr);
    //RegisterProperty('ClientWidth', 'Integer', iptrw);
    RegisterProperty('Constraints', 'TSizeConstraints', iptrw);
    RegisterProperty('AUTOSIZE', 'Boolean', iptrw);
    RegisterProperty('CAPTION', 'String', iptrw);
    RegisterProperty('COLOR', 'TColor', iptrw);
    RegisterProperty('DRAGCURSOR', 'Longint', iptrw);
    RegisterProperty('DRAGMODE', 'TDragMode', iptrw);
    RegisterProperty('FOCUSCONTROL', 'TWinControl', iptrw);
    RegisterProperty('FONT', 'TFont', iptrw);
    RegisterProperty('LAYOUT', 'TTextLayout', iptrw);
    RegisterProperty('PARENTCOLOR', 'Boolean', iptrw);
    RegisterProperty('PARENTFONT', 'Boolean', iptrw);
    RegisterProperty('PARENTSHOWHINT', 'Boolean', iptrw);
    RegisterProperty('SHOWACCELCHAR', 'Boolean', iptrw);
    RegisterProperty('TRANSPARENT', 'Boolean', iptrw);
    RegisterProperty('WORDWRAP', 'Boolean', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDRAGDROP', 'TDragDropEvent', iptrw);
    RegisterProperty('ONDRAGOVER', 'TDragOverEvent', iptrw);
    RegisterProperty('ONENDDRAG', 'TEndDragEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('ONSTARTDRAG', 'TStartDragEvent', iptrw);



  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomDBGrid(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomGrid', 'TCustomDBGrid') do
  with CL.AddClassN(CL.FindClass('TCustomGrid'),'TCustomDBGrid') do begin
    //RegisterPublishedProperties;
    RegisterMethod('Constructor Create( AOwner : TComponent)');
   RegisterMethod('Procedure Free');
    RegisterMethod('Procedure DefaultDrawDataCell( const Rect : TRect; Field : TField; State : TGridDrawState)');
    RegisterMethod('Procedure DefaultDrawColumnCell( const Rect : TRect; DataCol : Integer; Column : TColumn; State : TGridDrawState)');
    RegisterMethod('Function ExecuteAction( Action : TBasicAction) : Boolean');
    RegisterMethod('Function UpdateAction( Action : TBasicAction) : Boolean');
    RegisterMethod('Function ValidFieldIndex( FieldIndex : Integer) : Boolean');
    RegisterMethod('procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer)');
    RegisterMethod('Procedure REFRESH');
    RegisterMethod('Procedure Repaint;');
    RegisterMethod('Procedure Hide');
    RegisterMethod('Procedure Invalidate');
    RegisterMethod('Procedure Update');
    RegisterMethod('Procedure Show');
    RegisterProperty('RowHeights', 'Integer Integer', iptrw);


       RegisterPublishedProperties;

    RegisterProperty('Columns', 'TDBGridColumns', iptrw);
   // RegisterProperty('SelectedRows','TBookmarkList',iptr);
    RegisterProperty('FieldCount', 'Integer', iptr);
    RegisterProperty('Fields', 'TField Integer', iptr);
    RegisterProperty('SelectedField', 'TField', iptrw);
    RegisterProperty('SelectedIndex', 'Integer', iptrw);
    RegisterProperty('DataSource', 'TDataSource', iptrw);
    RegisterProperty('Parent', 'TWinControl', iptRW);
    RegisterProperty('Options', 'TDBGridOptions', iptRW);
    RegisterProperty('Canvas', 'TCanvas', iptr);
    RegisterProperty('Showing', 'boolean', iptr);

    RegisterProperty('EditorMode', 'boolean', iptRW);
     RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONENTER', 'TNotifyEvent', iptrw);
    RegisterProperty('ONEXIT', 'TNotifyEvent', iptrw);
    //add direct
    RegisterMethod('function  CanEditAcceptKey(Key: Char): Boolean;');
    RegisterMethod('function  CanEditModify: Boolean;');
    RegisterMethod('function  CanEditShow: Boolean;');
    RegisterMethod('procedure ColumnMoved(FromIndex, ToIndex: Longint);');
    RegisterMethod('procedure ColWidthsChanged;');
    RegisterMethod('function  CreateEditor: TInplaceEdit;');
    RegisterMethod('procedure CreateWnd;');
    RegisterMethod('procedure DrawCell(ACol, ARow: Longint; ARect: TRect; AState: TGridDrawState);');
    RegisterMethod('function  GetEditMask(ACol, ARow: Longint): string;');
    RegisterMethod('function  GetEditStyle(ACol, ARow: Longint): TEditStyle;');
    RegisterMethod('function  GetEditText(ACol, ARow: Longint): string; ');
    RegisterMethod('procedure KeyDown(var Key: Word; Shift: TShiftState); ');
    RegisterMethod('procedure KeyPress(var Key: Char); ');
    RegisterMethod('procedure Loaded; ');
    RegisterMethod('procedure MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer); ');
    RegisterMethod('procedure MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Integer); ');
    RegisterMethod('function DoMouseWheelDown(Shift: TShiftState; MousePos: TPoint): Boolean; ');
    RegisterMethod('function DoMouseWheelUp(Shift: TShiftState; MousePos: TPoint): Boolean; ');
    RegisterMethod('procedure Notification(AComponent: TComponent; Operation: TOperation); ');
    RegisterMethod('procedure SetEditText(ACol, ARow: Longint; const Value: string); ');
    RegisterMethod('procedure TimedScroll(Direction: TGridScrollDirection); ');

    RegisterProperty('FUpdateFields', 'Boolean', iptrw);
    RegisterProperty('FAcquireFocus', 'Boolean', iptrw);
    RegisterMethod('Function RawToDataColumn( ACol : Integer) : Integer');
    RegisterMethod('Function DataToRawColumn( ACol : Integer) : Integer');
    RegisterMethod('Function AcquireLayoutLock : Boolean');
    RegisterMethod('Procedure BeginLayout');
    RegisterMethod('Procedure BeginUpdate');
    RegisterMethod('Procedure CancelLayout');
    RegisterMethod('Procedure CellClick( Column : TColumn)');
    RegisterMethod('Function CalcTitleRect( Col : TColumn; ARow : Integer; var MasterCol : TColumn) : TRect');
    RegisterMethod('Function ColumnAtDepth( Col : TColumn; ADepth : Integer) : TColumn');
    RegisterMethod('Procedure ColEnter');
    RegisterMethod('Procedure ColExit');
    RegisterMethod('Function CreateColumns : TDBGridColumns');
    RegisterMethod('Function CreateDataLink : TGridDataLink');
    RegisterMethod('Procedure DeferLayout');
    RegisterMethod('Procedure DefineFieldMap');
    RegisterMethod('Procedure DrawDataCell( const Rect : TRect; Field : TField; State : TGridDrawState)');
    RegisterMethod('Procedure DrawColumnCell( const Rect : TRect; DataCol : Integer; Column : TColumn; State : TGridDrawState)');
    RegisterMethod('Procedure EditButtonClick');
    RegisterMethod('Procedure EndLayout');
    RegisterMethod('Procedure EndUpdate');
    RegisterMethod('Function GetColField( DataCol : Integer) : TField');
    RegisterMethod('Function GetFieldValue( ACol : Integer) : string');
    RegisterMethod('Function HighlightCell( DataCol, DataRow : Integer; const Value : string; AState : TGridDrawState) : Boolean');
    RegisterMethod('Procedure InvalidateTitles');
    RegisterMethod('Procedure LayoutChanged');
    RegisterMethod('Procedure LinkActive( Value : Boolean)');
    RegisterMethod('Procedure Scroll( Distance : Integer)');
    RegisterMethod('Procedure SetColumnAttributes');
    RegisterMethod('Function StoreColumns : Boolean');
    RegisterMethod('Procedure TitleClick( Column : TColumn)');
    RegisterMethod('Procedure UpdateScrollBar');
    RegisterMethod('Function UseRightToLeftAlignmentForField( const AField : TField; Alignment : TAlignment) : Boolean');
    RegisterProperty('Columns', 'TDBGridColumns', iptrw);
    RegisterProperty('DefaultDrawing', 'Boolean', iptrw);
    RegisterProperty('DataLink', 'TGridDataLink', iptr);
    RegisterProperty('IndicatorOffset', 'Byte', iptr);
    RegisterProperty('LayoutLock', 'Byte', iptr);
    RegisterProperty('Options', 'TDBGridOptions', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('SelectedRows', 'TBookmarkList', iptr);
    RegisterProperty('TitleFont', 'TFont', iptrw);
    RegisterProperty('Color', 'TColor', iptrw);
    RegisterProperty('FixedColor', 'TColor', iptrw);
    RegisterProperty('Brush', 'TBrush', iptrw);
    RegisterProperty('UpdateLock', 'Byte', iptr);
    RegisterProperty('OnColEnter', 'TNotifyEvent', iptrw);
    RegisterProperty('OnColExit', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDrawDataCell', 'TDrawDataCellEvent', iptrw);
    RegisterProperty('OnDrawColumnCell', 'TDrawColumnCellEvent', iptrw);
    RegisterProperty('OnEditButtonClick', 'TNotifyEvent', iptrw);
    RegisterProperty('OnColumnMoved', 'TMovedEvent', iptrw);
    RegisterProperty('OnCellClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('OnTitleClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('ONKEYDOWN', 'TKeyEvent', iptrw);
    RegisterProperty('ONKEYPRESS', 'TKeyPressEvent', iptrw);
    RegisterProperty('ONMOUSEDOWN', 'TMouseEvent', iptrw);
    RegisterProperty('ONMOUSEMOVE', 'TMouseMoveEvent', iptrw);
    RegisterProperty('ONMOUSEUP', 'TMouseEvent', iptrw);
    RegisterProperty('Visible', 'Boolean', iptrw);
    RegisterProperty('Font', 'TFont', iptrw);
    RegisterProperty('ENABLED', 'BOOLEAN', iptrw);
    RegisterProperty('Showhint', 'boolean', iptrw);
    RegisterProperty('BORDERSTYLE', 'TBorderStyle', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBookmarkList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TBookmarkList') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TBookmarkList') do begin
    RegisterMethod('Constructor Create( AGrid : TCustomDBGrid)');
   RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete');
    RegisterMethod('Function Find( const Item : TBookmarkStr; var Index : Integer) : Boolean');
    RegisterMethod('Function IndexOf( const Item : TBookmarkStr) : Integer');
    RegisterMethod('Function Refresh : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('CurrentRowSelected', 'Boolean', iptrw);
    RegisterProperty('Items', 'TBookmarkStr Integer', iptr);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGridDataLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDataLink', 'TGridDataLink') do
  with CL.AddClassN(CL.FindClass('TDataLink'),'TGridDataLink') do begin
    RegisterMethod('Constructor Create( AGrid : TCustomDBGrid)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Function AddMapping( const FieldName : string) : Boolean');
    RegisterMethod('Procedure ClearMapping');
    RegisterMethod('Procedure Modified');
    RegisterMethod('Procedure Reset');
    RegisterProperty('DefaultFields', 'Boolean', iptr);
    RegisterProperty('FieldCount', 'Integer', iptr);
    RegisterProperty('Fields', 'TField Integer', iptr);
    RegisterProperty('SparseMap', 'Boolean', iptrw);
    RegisterProperty('Grid', 'TCustomDBGrid', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBGridColumns(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TDBGridColumns') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TDBGridColumns') do begin
    RegisterMethod('Constructor Create( Grid : TCustomDBGrid; ColumnClass : TColumnClass)');
    RegisterMethod('Function Add : TColumn');
    RegisterMethod('Procedure LoadFromFile( const Filename : string)');
    RegisterMethod('Procedure LoadFromStream( S : TStream)');
    RegisterMethod('Procedure RestoreDefaults');
    RegisterMethod('Procedure RebuildColumns');
    RegisterMethod('Procedure SaveToFile( const Filename : string)');
    RegisterMethod('Procedure SaveToStream( S : TStream)');
    RegisterProperty('State', 'TDBGridColumnsState', iptrw);
    RegisterProperty('Grid', 'TCustomDBGrid', iptr);
    RegisterProperty('Items', 'TColumn Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TColumn(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TColumn') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TColumn') do begin
    RegisterMethod('Constructor Create( Collection : TCollection)');
   RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function DefaultAlignment : TAlignment');
    RegisterMethod('Function DefaultColor : TColor');
    RegisterMethod('Function DefaultFont : TFont');
    RegisterMethod('Function DefaultImeMode : TImeMode');
    RegisterMethod('Function DefaultImeName : TImeName');
    RegisterMethod('Function DefaultReadOnly : Boolean');
    RegisterMethod('Function DefaultWidth : Integer');
    RegisterMethod('Function Depth : Integer');
    RegisterMethod('Procedure RestoreDefaults');
    RegisterProperty('Grid', 'TCustomDBGrid', iptr);
    RegisterProperty('AssignedValues', 'TColumnValues', iptr);
    RegisterProperty('Expandable', 'Boolean', iptr);
    RegisterProperty('Field', 'TField', iptrw);
    RegisterProperty('ParentColumn', 'TColumn', iptr);
    RegisterProperty('Showing', 'Boolean', iptr);
    RegisterProperty('Alignment', 'TAlignment', iptrw);
    RegisterProperty('ButtonStyle', 'TColumnButtonStyle', iptrw);
    RegisterProperty('Color', 'TColor', iptrw);
    RegisterProperty('DropDownRows', 'Cardinal', iptrw);
    RegisterProperty('Expanded', 'Boolean', iptrw);
    RegisterProperty('FieldName', 'WideString', iptrw);
    RegisterProperty('Font', 'TFont', iptrw);
    RegisterProperty('ImeMode', 'TImeMode', iptrw);
    RegisterProperty('ImeName', 'TImeName', iptrw);
    RegisterProperty('PickList', 'TStrings', iptrw);
    RegisterProperty('PopupMenu', 'TPopupMenu', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('Title', 'TColumnTitle', iptrw);
    RegisterProperty('Width', 'Integer', iptrw);
    RegisterProperty('Visible', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TColumnTitle(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TColumnTitle') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TColumnTitle') do begin
    RegisterMethod('Constructor Create( Column : TColumn)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function DefaultAlignment : TAlignment');
    RegisterMethod('Function DefaultColor : TColor');
    RegisterMethod('Function DefaultFont : TFont');
    RegisterMethod('Function DefaultCaption : string');
    RegisterMethod('Procedure RestoreDefaults');
    RegisterProperty('Column', 'TColumn', iptr);
    RegisterProperty('Alignment', 'TAlignment', iptrw);
    RegisterProperty('Caption', 'string', iptrw);
    RegisterProperty('Color', 'TColor', iptrw);
    RegisterProperty('Font', 'TFont', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_DBGrids(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TColumnValue', '( cvColor, cvWidth, cvFont, cvAlignment, cvReadO'
   +'nly, cvTitleColor, cvTitleCaption, cvTitleAlignment, cvTitleFont, cvImeMode, cvImeName )');
  CL.AddTypeS('TBookmarkStr','string');

  CL.AddTypeS('TColumnValues', 'set of TColumnValue');
 CL.AddConstantN('cm_DeferLayout','LongInt').SetInt( WM_USER + 100);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TColumn');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TDBGridColumns');
   CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomDBGrid');
  SIRegister_TColumnTitle(CL);
  CL.AddTypeS('TColumnButtonStyle', '( cbsAuto, cbsEllipsis, cbsNone )');
  SIRegister_TColumn(CL);
  //CL.AddTypeS('TColumnClass', 'class of TColumn');
  CL.AddTypeS('TDBGridColumnsState', '( csDefault, csCustomized )');
  SIRegister_TDBGridColumns(CL);
  SIRegister_TGridDataLink(CL);
  SIRegister_TBookmarkList(CL);
  CL.AddTypeS('TDBGridOption', '( dgEditing, dgAlwaysShowEditor, dgTitles, dgIn'
   +'dicator, dgColumnResize, dgColLines, dgRowLines, dgTabs, dgRowSelect, dgAl'
   +'waysShowSelection, dgConfirmDelete, dgCancelOnExit, dgMultiSelect )');
  CL.AddTypeS('TDBGridOptions', 'set of TDBGridOption');
  CL.AddTypeS('TDrawDataCellEvent', 'Procedure ( Sender : TObject; const Rect :'
   +' TRect; Field : TField; State : TGridDrawState)');
  CL.AddTypeS('TDrawColumnCellEvent', 'Procedure ( Sender : TObject; const Rect'
   +' : TRect; DataCol : Integer; Column : TColumn; State : TGridDrawState)');
  CL.AddTypeS('TDBGridClickEvent', 'Procedure ( Column : TColumn)');
  SIRegister_TCustomDBGrid(CL);
  SIRegister_TDBGrid(CL);
 CL.AddConstantN('IndicatorWidth','LongInt').SetInt( 11);
end;

(* === run-time registration functions === *)


procedure TControlParentR(Self: TControl; var T: TWinControl); begin T := Self.Parent; end;
procedure TControlParentW(Self: TControl; T: TWinControl); begin Self.Parent:= T; end;


(*----------------------------------------------------------------------------*)
procedure TCustomDBGridDataSource_W(Self: TCustomDBGrid; const T: TDataSource);
begin Self.DataSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridDataSource_R(Self: TCustomDBGrid; var T: TDataSource);
begin T := Self.DataSource; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridColumns_W(Self: TCustomDBGrid; const T: TDBGridColumns);
begin Self.Columns:= T;
 end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridColumns_R(Self: TCustomDBGrid; var T: TDBGridColumns);
begin T:= Self.Columns;
 end;

 (*--------------------------template--------------------------------------------*)
procedure TCustomDBGridOptions_W(Self: TCustomDBGrid; const T: TDBGridOptions);
begin Self.Options:= T;
 end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOptions_R(Self: TCustomDBGrid; var T: TDBGridOptions);
begin T:= Self.Options;
 end;


(*----------------------------------------------------------------------------*)
procedure TCustomDBGridSelectedIndex_W(Self: TCustomDBGrid; const T: Integer);
begin Self.SelectedIndex := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridSelectedIndex_R(Self: TCustomDBGrid; var T: Integer);
begin T := Self.SelectedIndex; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridSelectedField_W(Self: TCustomDBGrid; const T: TField);
begin Self.SelectedField := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridSelectedField_R(Self: TCustomDBGrid; var T: TField);
begin T := Self.SelectedField; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridFields_R(Self: TCustomDBGrid; var T: TField; const t1: Integer);
begin T := Self.Fields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridFieldCount_R(Self: TCustomDBGrid; var T: Integer);
begin T := Self.FieldCount; end;

procedure TCustomDBSelectedRows_R(Self: TDBGrid; var T: TBookmarkList);
begin T:= Self.selectedRows;
 end;

procedure TCustomDBGridCanvas_W(Self: TDBGrid; const T: TCanvas);
begin
    //Self.Canvas:= T;
end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridCanvas_R(Self: TDBGrid; var T: TCanvas);
begin T := Self.Canvas; end;

procedure TBitmapCanvas_R(Self: TDBGrid; var T: TCanvas); begin T:= Self.Canvas; end;

procedure TBitmapCanvas_W(Self: TDBGrid; T: TCanvas);
begin
//TGraphic(Self).Canvas:= T;
end;



//add direct

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnTitleClick_W(Self: TCustomDBGrid; const T: TDBGridClickEvent);
begin Self.OnTitleClick := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnTitleClick_R(Self: TCustomDBGrid; var T: TDBGridClickEvent);
begin T := Self.OnTitleClick; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnCellClick_W(Self: TCustomDBGrid; const T: TDBGridClickEvent);
begin Self.OnCellClick := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnCellClick_R(Self: TCustomDBGrid; var T: TDBGridClickEvent);
begin T := Self.OnCellClick; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnColumnMoved_W(Self: TCustomDBGrid; const T: TMovedEvent);
begin Self.OnColumnMoved := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnColumnMoved_R(Self: TCustomDBGrid; var T: TMovedEvent);
begin T := Self.OnColumnMoved; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnEditButtonClick_W(Self: TCustomDBGrid; const T: TNotifyEvent);
begin Self.OnEditButtonClick := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnEditButtonClick_R(Self: TCustomDBGrid; var T: TNotifyEvent);
begin T := Self.OnEditButtonClick; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnDrawColumnCell_W(Self: TCustomDBGrid; const T: TDrawColumnCellEvent);
begin Self.OnDrawColumnCell := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnDrawColumnCell_R(Self: TCustomDBGrid; var T: TDrawColumnCellEvent);
begin T := Self.OnDrawColumnCell; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnDrawDataCell_W(Self: TCustomDBGrid; const T: TDrawDataCellEvent);
begin Self.OnDrawDataCell := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnDrawDataCell_R(Self: TCustomDBGrid; var T: TDrawDataCellEvent);
begin T := Self.OnDrawDataCell; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnColExit_W(Self: TCustomDBGrid; const T: TNotifyEvent);
begin Self.OnColExit := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnColExit_R(Self: TCustomDBGrid; var T: TNotifyEvent);
begin T := Self.OnColExit; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnColEnter_W(Self: TCustomDBGrid; const T: TNotifyEvent);
begin Self.OnColEnter := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOnColEnter_R(Self: TCustomDBGrid; var T: TNotifyEvent);
begin T := Self.OnColEnter; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridUpdateLock_R(Self: TCustomDBGrid; var T: Byte);
begin T := Self.UpdateLock; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridTitleFont_W(Self: TCustomDBGrid; const T: TFont);
begin Self.TitleFont := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridTitleFont_R(Self: TCustomDBGrid; var T: TFont);
begin T := Self.TitleFont; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridColor_W(Self: TDBGrid; const T: TColor);
begin Self.Color:= T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridColor_R(Self: TDBGrid; var T: TColor);
begin T := Self.Color; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridBrush_W(Self: TDBGrid; const T: TBrush);
begin //Self.Brush:= T;
 end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridBrush_R(Self: TCustomDBGrid; var T: TBrush);
begin T:= Self.Brush; end;


procedure TCustomDBGridVisible_W(Self: TCustomDBGrid; const T: boolean);
begin Self.visible:= T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridVisible_R(Self: TCustomDBGrid; var T: boolean);
begin T := Self.visible; end;

procedure TCustomDBGridEnabled_W(Self: TCustomDBGrid; const T: boolean);
begin Self.enabled:= T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridEnabled_R(Self: TCustomDBGrid; var T: boolean);
begin T := Self.enabled; end;

procedure TCustomDBGridshowhint_W(Self: TCustomDBGrid; const T: boolean);
begin Self.showhint:= T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridshowhint_R(Self: TCustomDBGrid; var T: boolean);
begin T := Self.showhint; end;


procedure TCustomDBGridBorderStyle_W(Self: TDBGrid; const T: tborderstyle);
begin Self.borderstyle:= T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridborderstyle_R(Self: TDBGrid; var T: tborderstyle);
begin T := Self.borderstyle; end;

procedure TCustomDBGridFont_W(Self: TDBGrid; const T: TFont);
begin Self.font:= T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridfont_R(Self: TDBGrid; var T: tfont);
begin T := Self.font; end;



(*----------------------------------------------------------------------------*)
procedure TCustomDBGridSelectedRows_R(Self: TCustomDBGrid; var T: TBookmarkList);
begin T := Self.SelectedRows; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridReadOnly_W(Self: TCustomDBGrid; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridReadOnly_R(Self: TCustomDBGrid; var T: Boolean);
begin T := Self.ReadOnly; end;

procedure TCustomDBGridShowing_R(Self: TCustomDBGrid; var T: Boolean);
begin T := Self.Showing; end;


(*----------------------------------------------------------------------------*)
{procedure TCustomDBGridOptions_W(Self: TCustomDBGrid; const T: TDBGridOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridOptions_R(Self: TCustomDBGrid; var T: TDBGridOptions);
begin T := Self.Options; end;}

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridLayoutLock_R(Self: TCustomDBGrid; var T: Byte);
begin T := Self.LayoutLock; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridIndicatorOffset_R(Self: TCustomDBGrid; var T: Byte);
begin T := Self.IndicatorOffset; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridDataLink_R(Self: TCustomDBGrid; var T: TGridDataLink);
begin T := Self.DataLink; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridDefaultDrawing_W(Self: TCustomDBGrid; const T: Boolean);
begin Self.DefaultDrawing := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridDefaultDrawing_R(Self: TCustomDBGrid; var T: Boolean);
begin T := Self.DefaultDrawing; end;

(*----------------------------------------------------------------------------*)
{procedure TCustomDBGridColumns_W(Self: TCustomDBGrid; const T: TDBGridColumns);
begin Self.Columns := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridColumns_R(Self: TCustomDBGrid; var T: TDBGridColumns);
begin T := Self.Columns; end;}

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridFAcquireFocus_W(Self: TCustomDBGrid; const T: Boolean);
Begin Self.FAcquireFocus := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridFAcquireFocus_R(Self: TCustomDBGrid; var T: Boolean);
Begin T := Self.FAcquireFocus; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridFUpdateFields_W(Self: TCustomDBGrid; const T: Boolean);
Begin Self.FUpdateFields := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomDBGridFUpdateFields_R(Self: TCustomDBGrid; var T: Boolean);
Begin T := Self.FUpdateFields; end;



(*----------------------------------------------------------------------------*)
procedure TBookmarkListItems_R(Self: TBookmarkList; var T: TBookmarkStr; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TBookmarkListCurrentRowSelected_W(Self: TBookmarkList; const T: Boolean);
begin Self.CurrentRowSelected := T; end;

(*----------------------------------------------------------------------------*)
procedure TBookmarkListCurrentRowSelected_R(Self: TBookmarkList; var T: Boolean);
begin T := Self.CurrentRowSelected; end;

(*----------------------------------------------------------------------------*)
procedure TBookmarkListCount_R(Self: TBookmarkList; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TGridDataLinkGrid_R(Self: TGridDataLink; var T: TCustomDBGrid);
begin T := Self.Grid; end;

(*----------------------------------------------------------------------------*)
procedure TGridDataLinkSparseMap_W(Self: TGridDataLink; const T: Boolean);
begin Self.SparseMap := T; end;

(*----------------------------------------------------------------------------*)
procedure TGridDataLinkSparseMap_R(Self: TGridDataLink; var T: Boolean);
begin T := Self.SparseMap; end;

(*----------------------------------------------------------------------------*)
procedure TGridDataLinkFields_R(Self: TGridDataLink; var T: TField; const t1: Integer);
begin T := Self.Fields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TGridDataLinkFieldCount_R(Self: TGridDataLink; var T: Integer);
begin T := Self.FieldCount; end;

(*----------------------------------------------------------------------------*)
procedure TGridDataLinkDefaultFields_R(Self: TGridDataLink; var T: Boolean);
begin T := Self.DefaultFields; end;

(*----------------------------------------------------------------------------*)
procedure TDBGridColumnsItems_W(Self: TDBGridColumns; const T: TColumn; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBGridColumnsItems_R(Self: TDBGridColumns; var T: TColumn; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TDBGridColumnsGrid_R(Self: TDBGridColumns; var T: TCustomDBGrid);
begin T := Self.Grid; end;

(*----------------------------------------------------------------------------*)
procedure TDBGridColumnsState_W(Self: TDBGridColumns; const T: TDBGridColumnsState);
begin Self.State := T; end;

(*----------------------------------------------------------------------------*)
procedure TDBGridColumnsState_R(Self: TDBGridColumns; var T: TDBGridColumnsState);
begin T := Self.State; end;

(*----------------------------------------------------------------------------*)
procedure TColumnVisible_W(Self: TColumn; const T: Boolean);
begin Self.Visible := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnVisible_R(Self: TColumn; var T: Boolean);
begin T := Self.Visible; end;

(*----------------------------------------------------------------------------*)
procedure TColumnWidth_W(Self: TColumn; const T: Integer);
begin Self.Width := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnWidth_R(Self: TColumn; var T: Integer);
begin T := Self.Width; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitle_W(Self: TColumn; const T: TColumnTitle);
begin Self.Title := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitle_R(Self: TColumn; var T: TColumnTitle);
begin T := Self.Title; end;

(*----------------------------------------------------------------------------*)
procedure TColumnReadOnly_W(Self: TColumn; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnReadOnly_R(Self: TColumn; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TColumnPopupMenu_W(Self: TColumn; const T: TPopupMenu);
begin Self.PopupMenu := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnPopupMenu_R(Self: TColumn; var T: TPopupMenu);
begin T := Self.PopupMenu; end;

(*----------------------------------------------------------------------------*)
procedure TColumnPickList_W(Self: TColumn; const T: TStrings);
begin Self.PickList := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnPickList_R(Self: TColumn; var T: TStrings);
begin T := Self.PickList; end;

(*----------------------------------------------------------------------------*)
procedure TColumnImeName_W(Self: TColumn; const T: TImeName);
begin Self.ImeName := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnImeName_R(Self: TColumn; var T: TImeName);
begin T := Self.ImeName; end;

(*----------------------------------------------------------------------------*)
procedure TColumnImeMode_W(Self: TColumn; const T: TImeMode);
begin Self.ImeMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnImeMode_R(Self: TColumn; var T: TImeMode);
begin T := Self.ImeMode; end;

(*----------------------------------------------------------------------------*)
procedure TColumnFont_W(Self: TColumn; const T: TFont);
begin Self.Font := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnFont_R(Self: TColumn; var T: TFont);
begin T := Self.Font; end;

(*----------------------------------------------------------------------------*)
procedure TColumnFieldName_W(Self: TColumn; const T: WideString);
begin Self.FieldName := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnFieldName_R(Self: TColumn; var T: WideString);
begin T := Self.FieldName; end;

(*----------------------------------------------------------------------------*)
procedure TColumnExpanded_W(Self: TColumn; const T: Boolean);
begin Self.Expanded := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnExpanded_R(Self: TColumn; var T: Boolean);
begin T := Self.Expanded; end;

(*----------------------------------------------------------------------------*)
procedure TColumnDropDownRows_W(Self: TColumn; const T: Cardinal);
begin Self.DropDownRows := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnDropDownRows_R(Self: TColumn; var T: Cardinal);
begin T := Self.DropDownRows; end;

(*----------------------------------------------------------------------------*)
procedure TColumnColor_W(Self: TColumn; const T: TColor);
begin Self.Color := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnColor_R(Self: TColumn; var T: TColor);
begin T := Self.Color; end;

(*----------------------------------------------------------------------------*)
procedure TColumnButtonStyle_W(Self: TColumn; const T: TColumnButtonStyle);
begin Self.ButtonStyle := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnButtonStyle_R(Self: TColumn; var T: TColumnButtonStyle);
begin T := Self.ButtonStyle; end;

(*----------------------------------------------------------------------------*)
procedure TColumnAlignment_W(Self: TColumn; const T: TAlignment);
begin Self.Alignment := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnAlignment_R(Self: TColumn; var T: TAlignment);
begin T := Self.Alignment; end;

(*----------------------------------------------------------------------------*)
procedure TColumnShowing_R(Self: TColumn; var T: Boolean);
begin T := Self.Showing; end;

(*----------------------------------------------------------------------------*)
procedure TColumnParentColumn_R(Self: TColumn; var T: TColumn);
begin T := Self.ParentColumn; end;

(*----------------------------------------------------------------------------*)
procedure TColumnField_W(Self: TColumn; const T: TField);
begin Self.Field := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnField_R(Self: TColumn; var T: TField);
begin T := Self.Field; end;

(*----------------------------------------------------------------------------*)
procedure TColumnExpandable_R(Self: TColumn; var T: Boolean);
begin T := Self.Expandable; end;

(*----------------------------------------------------------------------------*)
procedure TColumnAssignedValues_R(Self: TColumn; var T: TColumnValues);
begin T := Self.AssignedValues; end;

(*----------------------------------------------------------------------------*)
procedure TColumnGrid_R(Self: TColumn; var T: TCustomDBGrid);
begin T := Self.Grid; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleFont_W(Self: TColumnTitle; const T: TFont);
begin Self.Font := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleFont_R(Self: TColumnTitle; var T: TFont);
begin T := Self.Font; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleColor_W(Self: TColumnTitle; const T: TColor);
begin Self.Color := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleColor_R(Self: TColumnTitle; var T: TColor);
begin T := Self.Color; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleCaption_W(Self: TColumnTitle; const T: string);
begin Self.Caption := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleCaption_R(Self: TColumnTitle; var T: string);
begin T := Self.Caption; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleAlignment_W(Self: TColumnTitle; const T: TAlignment);
begin Self.Alignment := T; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleAlignment_R(Self: TColumnTitle; var T: TAlignment);
begin T := Self.Alignment; end;

(*----------------------------------------------------------------------------*)
procedure TColumnTitleColumn_R(Self: TColumnTitle; var T: TColumn);
begin T := Self.Column; end;

{procedure TITEMONCLICK_W(Self: TCustomDBGrid; const T: TNOTIFYEVENT);
begin Self.ONCLICK := T; end;
procedure TITEMONCLICK_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONCLICK; end; }

procedure TITEMONDBLCLICK_W(Self: TDBGrid; const T: TNOTIFYEVENT);
begin Self.ONDBLCLICK := T; end;
procedure TITEMONDBLCLICK_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONDBLCLICK; end;
procedure TITEMONENTER_W(Self: TDBGrid; const T: TNOTIFYEVENT);
begin Self.ONENTER:= T; end;
procedure TITEMONENTER_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONENTER; end;
procedure TITEMONEXIT_W(Self: TDBGrid; const T: TNOTIFYEVENT);
begin Self.ONEXIT:= T; end;
procedure TITEMONEXIT_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONEXIT; end;



type
  TADBGrid = class(TDBGrid);

procedure TCustomGridRows_W(Self: TCustomDBGrid; const T: integer; const t1: Integer);
//var TCustomDBGrid = class(  ;
begin
   TADBGrid(Self).RowHeights[t1] := T;
end;

procedure TCustomGridRows_R(Self: TCustomDBGrid; var T: integer; const t1: Integer);
begin T := TADBGrid(Self).RowHeights[t1];
end;


(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBGrid(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBGrid) do begin
     RegisterPropertyHelper(@TCustomDBSelectedRows_R,nil,'SelectedRows');
     RegisterPropertyHelper(@TCustomDBGridCanvas_R,@TCustomDBGridCanvas_W,'Canvas');
      RegisterPropertyHelper(@TCustomGridRows_R,@TCustomGridRows_W,'RowHeights');

  end;
end;



(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomDBGrid(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomDBGrid) do begin
    RegisterConstructor(@TCustomDBGrid.Create, 'Create');
   RegisterMethod(@TCustomDBGrid.Destroy, 'Free');
    RegisterMethod(@TCustomDBGrid.DefaultDrawDataCell, 'DefaultDrawDataCell');
    RegisterMethod(@TCustomDBGrid.DefaultDrawColumnCell, 'DefaultDrawColumnCell');
    RegisterMethod(@TCustomDBGrid.ExecuteAction, 'ExecuteAction');
    RegisterMethod(@TCustomDBGrid.UpdateAction, 'UpdateAction');
    RegisterMethod(@TCustomDBGrid.ValidFieldIndex, 'ValidFieldIndex');
    RegisterMethod(@TCustomDBGrid.SetBounds, 'SetBounds');

    RegisterMethod(@TCustomDBGrid.Hide, 'Hide');
    RegisterMethod(@TCustomDBGrid.Invalidate, 'Invalidate');
    RegisterMethod(@TCustomDBGrid.Refresh, 'Refresh');
    RegisterMethod(@TCustomDBGrid.Repaint, 'Repaint');
   RegisterMethod(@TCustomDBGrid.Show, 'Show');
    RegisterMethod(@TCustomDBGrid.Update, 'Update');


    RegisterMethod(@TCustomDBGrid.CanEditAcceptKey,'CanEditAcceptKey');
    RegisterMethod(@TCustomDBGrid.CanEditModify,'CanEditModify');
    RegisterMethod(@TCustomDBGrid.CanEditShow,'CanEditShow');
    RegisterMethod(@TCustomDBGrid.ColumnMoved,'ColumnMoved');
    RegisterMethod(@TCustomDBGrid.ColWidthsChanged,'ColWidthsChanged');
    RegisterMethod(@TCustomDBGrid.CreateEditor,'CreateEditor');
    RegisterMethod(@TCustomDBGrid.CreateWnd,'CreateWnd');
    RegisterMethod(@TCustomDBGrid.DrawCell,'DrawCell');
    RegisterMethod(@TCustomDBGrid.GetEditMask,'GetEditMask');
    RegisterMethod(@TCustomDBGrid.GetEditStyle,'GetEditStyle');
    RegisterMethod(@TCustomDBGrid.GetEditText,'GetEditText');
    RegisterMethod(@TCustomDBGrid.KeyDown,'KeyDown');
    RegisterMethod(@TCustomDBGrid.KeyPress,'KeyPress');
    RegisterMethod(@TCustomDBGrid.Loaded,'Loaded');
    RegisterMethod(@TCustomDBGrid.MouseDown,'MouseDown');
    RegisterMethod(@TCustomDBGrid.MouseUp,'MouseUp');
    RegisterMethod(@TCustomDBGrid.DoMouseWheelDown,'DoMouseWheelDown');
    RegisterMethod(@TCustomDBGrid.DoMouseWheelUp,'DoMouseWheelUp');
    RegisterMethod(@TCustomDBGrid.Notification,'Notification');
    RegisterMethod(@TCustomDBGrid.SetEditText,'SetEditText');
    RegisterMethod(@TCustomDBGrid.TimedScroll,'TimedScroll');

    RegisterPropertyHelper(@TCustomDBGridFieldCount_R,nil,'FieldCount');
    RegisterPropertyHelper(@TCustomDBGridFields_R,nil,'Fields');
    RegisterPropertyHelper(@TCustomDBGridSelectedField_R,@TCustomDBGridSelectedField_W,'SelectedField');
    RegisterPropertyHelper(@TCustomDBGridSelectedIndex_R,@TCustomDBGridSelectedIndex_W,'SelectedIndex');
    RegisterPropertyHelper(@TCustomDBGridDataSource_R,@TCustomDBGridDataSource_W,'DataSource');
    RegisterPropertyHelper(@TCustomDBGridColumns_R,@TCustomDBGridColumns_W,'Columns');
    RegisterPropertyHelper(@TCustomDBGridOptions_R,@TCustomDBGridOptions_W,'Options');

    RegisterPropertyHelper(@TCustomGridRows_R,@TCustomGridRows_W,'RowHeights');


    RegisterPropertyHelper(@TControlParentR, @TControlParentW, 'PARENT');
    RegisterPropertyHelper(@TBitmapCanvas_R,@TBitmapCanvas_W,'Canvas');
		//RegisterEventPropertyHelper(@TITEMONCLICK_R,@TITEMONCLICK_W,'ONCLICK');
 		RegisterEventPropertyHelper(@TITEMONDBLCLICK_R,@TITEMONDBLCLICK_W,'ONDBLCLICK');
 		RegisterEventPropertyHelper(@TITEMONENTER_R,@TITEMONENTER_W,'ONENTER');
 		RegisterEventPropertyHelper(@TITEMONEXIT_R,@TITEMONEXIT_W,'ONEXIT');

    RegisterPropertyHelper(@TCustomDBGridFUpdateFields_R,@TCustomDBGridFUpdateFields_W,'FUpdateFields');
    RegisterPropertyHelper(@TCustomDBGridFAcquireFocus_R,@TCustomDBGridFAcquireFocus_W,'FAcquireFocus');
    RegisterMethod(@TCustomDBGrid.RawToDataColumn, 'RawToDataColumn');
    RegisterMethod(@TCustomDBGrid.DataToRawColumn, 'DataToRawColumn');
    RegisterMethod(@TCustomDBGrid.AcquireLayoutLock, 'AcquireLayoutLock');
    RegisterMethod(@TCustomDBGrid.BeginLayout, 'BeginLayout');
    RegisterMethod(@TCustomDBGrid.BeginUpdate, 'BeginUpdate');
    RegisterMethod(@TCustomDBGrid.CancelLayout, 'CancelLayout');
    RegisterVirtualMethod(@TCustomDBGrid.CellClick, 'CellClick');
    RegisterMethod(@TCustomDBGrid.CalcTitleRect, 'CalcTitleRect');
    RegisterMethod(@TCustomDBGrid.ColumnAtDepth, 'ColumnAtDepth');
    RegisterVirtualMethod(@TCustomDBGrid.ColEnter, 'ColEnter');
    RegisterVirtualMethod(@TCustomDBGrid.ColExit, 'ColExit');
    RegisterVirtualMethod(@TCustomDBGrid.CreateColumns, 'CreateColumns');
    RegisterVirtualMethod(@TCustomDBGrid.CreateDataLink, 'CreateDataLink');
    RegisterMethod(@TCustomDBGrid.DeferLayout, 'DeferLayout');
    RegisterVirtualMethod(@TCustomDBGrid.DefineFieldMap, 'DefineFieldMap');
    RegisterVirtualMethod(@TCustomDBGrid.DrawDataCell, 'DrawDataCell');
    RegisterVirtualMethod(@TCustomDBGrid.DrawColumnCell, 'DrawColumnCell');
    RegisterVirtualMethod(@TCustomDBGrid.EditButtonClick, 'EditButtonClick');
    RegisterMethod(@TCustomDBGrid.EndLayout, 'EndLayout');
    RegisterMethod(@TCustomDBGrid.EndUpdate, 'EndUpdate');
    RegisterMethod(@TCustomDBGrid.GetColField, 'GetColField');
    RegisterMethod(@TCustomDBGrid.GetFieldValue, 'GetFieldValue');
    RegisterVirtualMethod(@TCustomDBGrid.HighlightCell, 'HighlightCell');
    RegisterMethod(@TCustomDBGrid.InvalidateTitles, 'InvalidateTitles');
    RegisterVirtualMethod(@TCustomDBGrid.LayoutChanged, 'LayoutChanged');
    RegisterVirtualMethod(@TCustomDBGrid.LinkActive, 'LinkActive');
    RegisterVirtualMethod(@TCustomDBGrid.Scroll, 'Scroll');
    RegisterVirtualMethod(@TCustomDBGrid.SetColumnAttributes, 'SetColumnAttributes');
    RegisterMethod(@TCustomDBGrid.StoreColumns, 'StoreColumns');
    RegisterVirtualMethod(@TCustomDBGrid.TitleClick, 'TitleClick');
    RegisterVirtualMethod(@TCustomDBGrid.UpdateScrollBar, 'UpdateScrollBar');
    RegisterMethod(@TCustomDBGrid.UseRightToLeftAlignmentForField, 'UseRightToLeftAlignmentForField');
    //RegisterPropertyHelper(@TCustomDBGridColumns_R,@TCustomDBGridColumns_W,'Columns');
    RegisterPropertyHelper(@TCustomDBGridDefaultDrawing_R,@TCustomDBGridDefaultDrawing_W,'DefaultDrawing');
    RegisterPropertyHelper(@TCustomDBGridDataLink_R,nil,'DataLink');
    RegisterPropertyHelper(@TCustomDBGridIndicatorOffset_R,nil,'IndicatorOffset');
    RegisterPropertyHelper(@TCustomDBGridLayoutLock_R,nil,'LayoutLock');
    //RegisterPropertyHelper(@TCustomDBGridOptions_R,@TCustomDBGridOptions_W,'Options');
    RegisterPropertyHelper(@TCustomDBGridReadOnly_R,@TCustomDBGridReadOnly_W,'ReadOnly');
    RegisterPropertyHelper(@TCustomDBGridSelectedRows_R,nil,'SelectedRows');
    RegisterPropertyHelper(@TCustomDBGridTitleFont_R,@TCustomDBGridTitleFont_W,'TitleFont');
    RegisterPropertyHelper(@TCustomDBGridColor_R,@TCustomDBGridColor_W,'Color');
    RegisterPropertyHelper(@TCustomDBGridBrush_R,@TCustomDBGridBrush_W,'Brush');

    RegisterPropertyHelper(@TCustomDBGridUpdateLock_R,nil,'UpdateLock');
    RegisterPropertyHelper(@TCustomDBGridOnColEnter_R,@TCustomDBGridOnColEnter_W,'OnColEnter');
    RegisterPropertyHelper(@TCustomDBGridOnColExit_R,@TCustomDBGridOnColExit_W,'OnColExit');
    RegisterPropertyHelper(@TCustomDBGridOnDrawDataCell_R,@TCustomDBGridOnDrawDataCell_W,'OnDrawDataCell');
    RegisterPropertyHelper(@TCustomDBGridOnDrawColumnCell_R,@TCustomDBGridOnDrawColumnCell_W,'OnDrawColumnCell');
    RegisterPropertyHelper(@TCustomDBGridOnEditButtonClick_R,@TCustomDBGridOnEditButtonClick_W,'OnEditButtonClick');
    RegisterPropertyHelper(@TCustomDBGridOnColumnMoved_R,@TCustomDBGridOnColumnMoved_W,'OnColumnMoved');
    RegisterPropertyHelper(@TCustomDBGridOnCellClick_R,@TCustomDBGridOnCellClick_W,'OnCellClick');
    RegisterPropertyHelper(@TCustomDBGridOnTitleClick_R,@TCustomDBGridOnTitleClick_W,'OnTitleClick');
    RegisterPropertyHelper(@TCustomDBGridShowing_R,NIL, 'Showing');

    RegisterPropertyHelper(@TCustomDBGridvisible_R,@TCustomDBGridvisible_W,'visible');
    RegisterPropertyHelper(@TCustomDBGridfont_R,@TCustomDBGridfont_W,'font');
    RegisterPropertyHelper(@TCustomDBGridenabled_R,@TCustomDBGridenabled_W,'enabled');
    RegisterPropertyHelper(@TCustomDBGridshowhint_R,@TCustomDBGridshowhint_W,'showhint');
    RegisterPropertyHelper(@TCustomDBGridborderstyle_R,@TCustomDBGridborderstyle_W,'borderstyle');


    //RegisterConstructor(@TCustomDBGrid.Create, 'Create');
    RegisterMethod(@TCustomDBGrid.DefaultDrawDataCell, 'DefaultDrawDataCell');
    RegisterMethod(@TCustomDBGrid.DefaultDrawColumnCell, 'DefaultDrawColumnCell');
    RegisterMethod(@TCustomDBGrid.ValidFieldIndex, 'ValidFieldIndex');



  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBookmarkList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBookmarkList) do begin
    RegisterConstructor(@TBookmarkList.Create, 'Create');
   RegisterMethod(@TBookmarkList.Destroy, 'Free');
    RegisterMethod(@TBookmarkList.Clear, 'Clear');
    RegisterMethod(@TBookmarkList.Delete, 'Delete');
    RegisterMethod(@TBookmarkList.Find, 'Find');
    RegisterMethod(@TBookmarkList.IndexOf, 'IndexOf');
    RegisterMethod(@TBookmarkList.Refresh, 'Refresh');
    RegisterPropertyHelper(@TBookmarkListCount_R,nil,'Count');
    RegisterPropertyHelper(@TBookmarkListCurrentRowSelected_R,@TBookmarkListCurrentRowSelected_W,'CurrentRowSelected');
    RegisterPropertyHelper(@TBookmarkListItems_R,nil,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGridDataLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGridDataLink) do begin
    RegisterConstructor(@TGridDataLink.Create, 'Create');
    RegisterMethod(@TGridDataLink.Destroy, 'Free');
    RegisterMethod(@TGridDataLink.AddMapping, 'AddMapping');
    RegisterMethod(@TGridDataLink.ClearMapping, 'ClearMapping');
    RegisterMethod(@TGridDataLink.Modified, 'Modified');
    RegisterMethod(@TGridDataLink.Reset, 'Reset');
    RegisterPropertyHelper(@TGridDataLinkDefaultFields_R,nil,'DefaultFields');
    RegisterPropertyHelper(@TGridDataLinkFieldCount_R,nil,'FieldCount');
    RegisterPropertyHelper(@TGridDataLinkFields_R,nil,'Fields');
    RegisterPropertyHelper(@TGridDataLinkSparseMap_R,@TGridDataLinkSparseMap_W,'SparseMap');
    RegisterPropertyHelper(@TGridDataLinkGrid_R,nil,'Grid');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBGridColumns(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBGridColumns) do begin
    RegisterConstructor(@TDBGridColumns.Create, 'Create');
    RegisterMethod(@TDBGridColumns.Add, 'Add');
    RegisterMethod(@TDBGridColumns.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TDBGridColumns.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TDBGridColumns.RestoreDefaults, 'RestoreDefaults');
    RegisterMethod(@TDBGridColumns.RebuildColumns, 'RebuildColumns');
    RegisterMethod(@TDBGridColumns.SaveToFile, 'SaveToFile');
    RegisterMethod(@TDBGridColumns.SaveToStream, 'SaveToStream');
    RegisterPropertyHelper(@TDBGridColumnsState_R,@TDBGridColumnsState_W,'State');
    RegisterPropertyHelper(@TDBGridColumnsGrid_R,nil,'Grid');
    RegisterPropertyHelper(@TDBGridColumnsItems_R,@TDBGridColumnsItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TColumn(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TColumn) do begin
    RegisterConstructor(@TColumn.Create, 'Create');
    RegisterMethod(@TColumn.Destroy, 'Free');
    RegisterMethod(@TColumn.Assign, 'Assign');
    RegisterMethod(@TColumn.DefaultAlignment, 'DefaultAlignment');
    RegisterMethod(@TColumn.DefaultColor, 'DefaultColor');
    RegisterMethod(@TColumn.DefaultFont, 'DefaultFont');
    RegisterMethod(@TColumn.DefaultImeMode, 'DefaultImeMode');
    RegisterMethod(@TColumn.DefaultImeName, 'DefaultImeName');
    RegisterMethod(@TColumn.DefaultReadOnly, 'DefaultReadOnly');
    RegisterMethod(@TColumn.DefaultWidth, 'DefaultWidth');
    RegisterMethod(@TColumn.Depth, 'Depth');
    RegisterVirtualMethod(@TColumn.RestoreDefaults, 'RestoreDefaults');
    RegisterPropertyHelper(@TColumnGrid_R,nil,'Grid');
    RegisterPropertyHelper(@TColumnAssignedValues_R,nil,'AssignedValues');
    RegisterPropertyHelper(@TColumnExpandable_R,nil,'Expandable');
    RegisterPropertyHelper(@TColumnField_R,@TColumnField_W,'Field');
    RegisterPropertyHelper(@TColumnParentColumn_R,nil,'ParentColumn');
    RegisterPropertyHelper(@TColumnShowing_R,nil,'Showing');
    RegisterPropertyHelper(@TColumnAlignment_R,@TColumnAlignment_W,'Alignment');
    RegisterPropertyHelper(@TColumnButtonStyle_R,@TColumnButtonStyle_W,'ButtonStyle');
    RegisterPropertyHelper(@TColumnColor_R,@TColumnColor_W,'Color');
    RegisterPropertyHelper(@TColumnDropDownRows_R,@TColumnDropDownRows_W,'DropDownRows');
    RegisterPropertyHelper(@TColumnExpanded_R,@TColumnExpanded_W,'Expanded');
    RegisterPropertyHelper(@TColumnFieldName_R,@TColumnFieldName_W,'FieldName');
    RegisterPropertyHelper(@TColumnFont_R,@TColumnFont_W,'Font');
    RegisterPropertyHelper(@TColumnImeMode_R,@TColumnImeMode_W,'ImeMode');
    RegisterPropertyHelper(@TColumnImeName_R,@TColumnImeName_W,'ImeName');
    RegisterPropertyHelper(@TColumnPickList_R,@TColumnPickList_W,'PickList');
    RegisterPropertyHelper(@TColumnPopupMenu_R,@TColumnPopupMenu_W,'PopupMenu');
    RegisterPropertyHelper(@TColumnReadOnly_R,@TColumnReadOnly_W,'ReadOnly');
    RegisterPropertyHelper(@TColumnTitle_R,@TColumnTitle_W,'Title');
    RegisterPropertyHelper(@TColumnWidth_R,@TColumnWidth_W,'Width');
    RegisterPropertyHelper(@TColumnVisible_R,@TColumnVisible_W,'Visible');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TColumnTitle(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TColumnTitle) do begin
    RegisterConstructor(@TColumnTitle.Create, 'Create');
    RegisterMethod(@TColumnTitle.Destroy, 'Free');
    RegisterMethod(@TColumnTitle.Assign, 'Assign');
    RegisterMethod(@TColumnTitle.DefaultAlignment, 'DefaultAlignment');
    RegisterMethod(@TColumnTitle.DefaultColor, 'DefaultColor');
    RegisterMethod(@TColumnTitle.DefaultFont, 'DefaultFont');
    RegisterMethod(@TColumnTitle.DefaultCaption, 'DefaultCaption');
    RegisterVirtualMethod(@TColumnTitle.RestoreDefaults, 'RestoreDefaults');
    RegisterPropertyHelper(@TColumnTitleColumn_R,nil,'Column');
    RegisterPropertyHelper(@TColumnTitleAlignment_R,@TColumnTitleAlignment_W,'Alignment');
    RegisterPropertyHelper(@TColumnTitleCaption_R,@TColumnTitleCaption_W,'Caption');
    RegisterPropertyHelper(@TColumnTitleColor_R,@TColumnTitleColor_W,'Color');
    RegisterPropertyHelper(@TColumnTitleFont_R,@TColumnTitleFont_W,'Font');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DBGrids(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TColumn) do
  with CL.Add(TCustomDBGrid) do
  RIRegister_TColumnTitle(CL);
  RIRegister_TColumn(CL);
  RIRegister_TDBGridColumns(CL);
  RIRegister_TGridDataLink(CL);
  RIRegister_TBookmarkList(CL);
  RIRegister_TCustomDBGrid(CL);
  RIRegister_TDBGrid(CL);
end;

 
 
{ TPSImport_DBGrids }
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBGrids.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_DBGrids(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBGrids.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_DBGrids(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
