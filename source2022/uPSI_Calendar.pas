unit uPSI_Calendar;
{
This file has been generated by UnitParser v0.7, written by M. Knight
RegisterProperty('Parent', 'TWinControl', iptRW); is absolute important, max

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Calendar = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TCalendar(CL: TPSPascalCompiler);
procedure SIRegister_Calendar(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TCalendar(CL: TPSRuntimeClassImporter);
procedure RIRegister_Calendar(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Controls
  ,Messages
  ,Windows
  ,Forms
  ,Graphics
  ,StdCtrls
  ,Grids
  ,Calendar
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Calendar]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TCalendar(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomGrid', 'TCalendar') do
  with CL.AddClassN(CL.FindClass('TCustomGrid'),'TCalendar') do begin
    RegisterPublishedProperties;
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterProperty('CalendarDate', 'TDateTime', iptrw);
    RegisterProperty('CellText', 'string Integer Integer', iptr);
    RegisterMethod('Procedure NextMonth');
    RegisterMethod('Procedure NextYear');
    RegisterMethod('Procedure PrevMonth');
    RegisterMethod('Procedure PrevYear');
    RegisterMethod('Procedure UpdateCalendar');
    RegisterProperty('Day', 'Integer', iptrw);
    RegisterProperty('Month', 'Integer', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('StartOfWeek', 'TDayOfWeek', iptrw);
    RegisterProperty('UseCurrentDate', 'Boolean', iptrw);
    RegisterProperty('Year', 'Integer', iptrw);
    RegisterProperty('OnChange', 'TNotifyEvent', iptrw);
    RegisterProperty('Enabled', 'Boolean', iptrw);
    RegisterProperty('Parent', 'TWinControl', iptRW);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONENTER', 'TNotifyEvent', iptrw);
    RegisterProperty('ONEXIT', 'TNotifyEvent', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Calendar(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TDayOfWeek', 'Integer');
  SIRegister_TCalendar(CL);
end;

(* === run-time registration functions === *)

procedure TControlParentR(Self: TControl; var T: TWinControl); begin T := Self.Parent; end;
procedure TControlParentW(Self: TControl; T: TWinControl); begin Self.Parent:= T; end;


procedure TITEMONCLICK_W(Self: TCalendar; const T: TNOTIFYEVENT);
begin Self.ONCLICK := T; end;
procedure TITEMONCLICK_R(Self: TCalendar; var T: TNOTIFYEVENT);
begin T := Self.ONCLICK; end;

procedure TITEMONDBLCLICK_W(Self: TCalendar; const T: TNOTIFYEVENT);
begin Self.ONDBLCLICK := T; end;
procedure TITEMONDBLCLICK_R(Self: TCalendar; var T: TNOTIFYEVENT);
begin T := Self.ONDBLCLICK; end;
procedure TITEMONENTER_W(Self: TCalendar; const T: TNOTIFYEVENT);
begin Self.ONENTER:= T; end;
procedure TITEMONENTER_R(Self: TCalendar; var T: TNOTIFYEVENT);
begin T := Self.ONENTER; end;
procedure TITEMONEXIT_W(Self: TCalendar; const T: TNOTIFYEVENT);
begin Self.ONEXIT:= T; end;
procedure TITEMONEXIT_R(Self: TCalendar; var T: TNOTIFYEVENT);
begin T := Self.ONEXIT; end;


(*----------------------------------------------------------------------------*)
procedure TCalendarOnChange_W(Self: TCalendar; const T: TNotifyEvent);
begin Self.OnChange := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarOnChange_R(Self: TCalendar; var T: TNotifyEvent);
begin T := Self.OnChange; end;

procedure TCalendarEnabled_W(Self: TCalendar; const T: Boolean);
begin Self.Enabled:= T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarEnabled_R(Self: TCalendar; var T: Boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarYear_W(Self: TCalendar; const T: Integer);
begin Self.Year := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarYear_R(Self: TCalendar; var T: Integer);
begin T := Self.Year; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarUseCurrentDate_W(Self: TCalendar; const T: Boolean);
begin Self.UseCurrentDate := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarUseCurrentDate_R(Self: TCalendar; var T: Boolean);
begin T := Self.UseCurrentDate; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarStartOfWeek_W(Self: TCalendar; const T: TDayOfWeek);
begin Self.StartOfWeek := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarStartOfWeek_R(Self: TCalendar; var T: TDayOfWeek);
begin T := Self.StartOfWeek; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarReadOnly_W(Self: TCalendar; const T: Boolean);
begin Self.ReadOnly := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarReadOnly_R(Self: TCalendar; var T: Boolean);
begin T := Self.ReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarMonth_W(Self: TCalendar; const T: Integer);
begin Self.Month := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarMonth_R(Self: TCalendar; var T: Integer);
begin T := Self.Month; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarDay_W(Self: TCalendar; const T: Integer);
begin Self.Day := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarDay_R(Self: TCalendar; var T: Integer);
begin T := Self.Day; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarCellText_R(Self: TCalendar; var T: string; const t1: Integer; const t2: Integer);
begin T := Self.CellText[t1, t2]; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarCalendarDate_W(Self: TCalendar; const T: TDateTime);
begin Self.CalendarDate := T; end;

(*----------------------------------------------------------------------------*)
procedure TCalendarCalendarDate_R(Self: TCalendar; var T: TDateTime);
begin T := Self.CalendarDate; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCalendar(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCalendar) do begin
    RegisterConstructor(@TCalendar.Create, 'Create');
    RegisterPropertyHelper(@TCalendarCalendarDate_R,@TCalendarCalendarDate_W,'CalendarDate');
    RegisterPropertyHelper(@TCalendarCellText_R,nil,'CellText');
    RegisterMethod(@TCalendar.NextMonth, 'NextMonth');
    RegisterMethod(@TCalendar.NextYear, 'NextYear');
    RegisterMethod(@TCalendar.PrevMonth, 'PrevMonth');
    RegisterMethod(@TCalendar.PrevYear, 'PrevYear');
    RegisterMethod(@TCalendar.UpdateCalendar, 'UpdateCalendar');
    RegisterPropertyHelper(@TCalendarDay_R,@TCalendarDay_W,'Day');
    RegisterPropertyHelper(@TCalendarMonth_R,@TCalendarMonth_W,'Month');
    RegisterPropertyHelper(@TCalendarReadOnly_R,@TCalendarReadOnly_W,'ReadOnly');
    RegisterPropertyHelper(@TCalendarStartOfWeek_R,@TCalendarStartOfWeek_W,'StartOfWeek');
    RegisterPropertyHelper(@TCalendarUseCurrentDate_R,@TCalendarUseCurrentDate_W,'UseCurrentDate');
    RegisterPropertyHelper(@TCalendarYear_R,@TCalendarYear_W,'Year');
    RegisterPropertyHelper(@TCalendarEnabled_R,@TCalendarEnabled_W,'Enabled');
    RegisterPropertyHelper(@TCalendarOnChange_R,@TCalendarOnChange_W,'OnChange');
    RegisterPropertyHelper(@TControlParentR, @TControlParentW, 'PARENT');
 		RegisterEventPropertyHelper(@TITEMONCLICK_R,@TITEMONCLICK_W,'ONCLICK');
 		RegisterEventPropertyHelper(@TITEMONDBLCLICK_R,@TITEMONDBLCLICK_W,'ONDBLCLICK');
 		RegisterEventPropertyHelper(@TITEMONENTER_R,@TITEMONENTER_W,'ONENTER');
 		RegisterEventPropertyHelper(@TITEMONEXIT_R,@TITEMONEXIT_W,'ONEXIT');
    

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Calendar(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TCalendar(CL);
end;

 
 
{ TPSImport_Calendar }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Calendar.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Calendar(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Calendar.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Calendar(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
