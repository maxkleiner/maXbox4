unit uPSI_cInternetUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_cInternetUtils = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TEMailField(CL: TPSPascalCompiler);
procedure SIRegister_TDateField(CL: TPSPascalCompiler);
procedure SIRegister_TInvalidField(CL: TPSPascalCompiler);
procedure SIRegister_THeaderField(CL: TPSPascalCompiler);
procedure SIRegister_THeader(CL: TPSPascalCompiler);
procedure SIRegister_AHeaderField(CL: TPSPascalCompiler);
procedure SIRegister_cInternetUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TEMailField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDateField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInvalidField(CL: TPSRuntimeClassImporter);
procedure RIRegister_THeaderField(CL: TPSRuntimeClassImporter);
procedure RIRegister_THeader(CL: TPSRuntimeClassImporter);
procedure RIRegister_AHeaderField(CL: TPSRuntimeClassImporter);
procedure RIRegister_cInternetUtils_Routines(S: TPSExec);

procedure Register;

implementation


uses
   cUtils
  ,cStrings
  ,cReaders
  ,cStreams
  ,cInternetUtils
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_cInternetUtils]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TEMailField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'THeaderField', 'TEMailField') do
  with CL.AddClassN(CL.FindClass('THeaderField'),'TEMailField') do
  begin
    RegisterProperty('Address', 'String', iptr);
    RegisterProperty('Name', 'String', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDateField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AHeaderField', 'TDateField') do
  with CL.AddClassN(CL.FindClass('AHeaderField'),'TDateField') do
  begin
    RegisterMethod('Constructor CreateNow');
    RegisterMethod('Constructor Create( const LocalTime : TDateTime);');
    RegisterProperty('GMTDateTime', 'TDateTime', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInvalidField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AHeaderField', 'TInvalidField') do
  with CL.AddClassN(CL.FindClass('AHeaderField'),'TInvalidField') do
  begin
    RegisterMethod('Constructor Create( const RawLine : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THeaderField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AHeaderField', 'THeaderField') do
  with CL.AddClassN(CL.FindClass('AHeaderField'),'THeaderField') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THeader(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'THeader') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'THeader') do
  begin
    RegisterMethod('Constructor Create( const Header : String);');
    RegisterMethod('Constructor Create2( const HeaderReader : AReaderEx; const Tolerant : Boolean; const MaxHeaderSize : Integer);');
    RegisterMethod('Function Duplicate : THeader');
    RegisterMethod('Procedure ReadFromStream( const HeaderReader : AReaderEx; const Tolerant : Boolean; const MaxHeaderSize : Integer)');
    RegisterMethod('Procedure Prepare');
    RegisterProperty('AsString', 'String', iptrw);
    RegisterProperty('FieldCount', 'Integer', iptr);
    RegisterProperty('FieldByIndex', 'AHeaderField Integer', iptrw);
    RegisterMethod('Function GetFieldIndex( const Name : String) : Integer');
    RegisterMethod('Function HasField( const Name : String) : Boolean');
    RegisterProperty('Field', 'AHeaderField String', iptrw);
    SetDefaultPropery('Field');
    RegisterProperty('FieldBody', 'String String', iptrw);
    RegisterMethod('Function GetFieldNames : StringArray');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure DeleteFieldByIndex( const Idx : Integer)');
    RegisterMethod('Function DeleteField( const Name : String) : Boolean');
    RegisterMethod('Procedure AddField6( const Field : AHeaderField);');
    RegisterMethod('Procedure AddField7( const Name, Body : String);');
    RegisterMethod('Procedure AddField8( const FieldLine : String);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AHeaderField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'AHeaderField') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'AHeaderField') do
  begin
    RegisterMethod('Constructor Create( const Body : String);');
    RegisterMethod('Constructor Create2( const Name, Body : String);');
    RegisterMethod('Function Duplicate : AHeaderField');
    RegisterMethod('Procedure Prepare');
    RegisterProperty('Name', 'String', iptrw);
    RegisterProperty('Body', 'String', iptrw);
    RegisterProperty('BodyAsInteger', 'Int64', iptrw);
    RegisterProperty('BodyAsFloat', 'Extended', iptrw);
    RegisterProperty('AsString', 'String', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_cInternetUtils(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('ctHTML','String').SetString( 'text/html');
 CL.AddConstantN('ctText','String').SetString( 'text/plain');
 CL.AddConstantN('ctXML','String').SetString( 'text/xml');
 CL.AddConstantN('ctJPG','String').SetString( 'image/jpeg');
 CL.AddConstantN('ctGIF','String').SetString( 'image/gif');
 CL.AddConstantN('ctBMP','String').SetString( 'image/bmp');
 CL.AddConstantN('ctPNG','String').SetString( 'image/png');
 CL.AddConstantN('ctTIFF','String').SetString( 'image/tiff');
 CL.AddConstantN('ctMPG','String').SetString( 'video/mpeg');
 CL.AddConstantN('ctAVI','String').SetString( 'video/avi');
 CL.AddConstantN('ctQT','String').SetString( 'video/quicktime');
 CL.AddConstantN('ctBinary','String').SetString( 'application/binary');
 CL.AddConstantN('ctPDF','String').SetString( 'application/pdf');
 CL.AddConstantN('ctPostscript','String').SetString( 'application/postscript');
 CL.AddConstantN('ctBasicAudio','String').SetString( 'audio/basic');
 CL.AddConstantN('ctMP3','String').SetString( 'audio/mpeg');
 CL.AddConstantN('ctRA','String').SetString( 'audio/x-realaudio');
 CL.AddConstantN('ctURLEncoded','String').SetString( 'application/x-www-form-urlencoded');
 CL.AddConstantN('ctZIP','String').SetString( 'application/zip');
 CL.AddConstantN('ctJavaScript','String').SetString( 'application/javascript');
 CL.AddConstantN('ctPascal','String').SetString( 'text/x-source-pascal');
 CL.AddConstantN('ctCPP','String').SetString( 'text/x-source-cpp');
 CL.AddConstantN('ctINI','String').SetString( 'text/x-windows-ini');
 CL.AddConstantN('ctBAT','String').SetString( 'text/x-windows-bat');
 CL.AddDelphiFunction('Function MIMEContentTypeFromExtention( const Extention : String) : String');
 CL.AddConstantN('protoHTTP','String').SetString( 'http');
 CL.AddConstantN('protoNNTP','String').SetString( 'news');
 CL.AddConstantN('protoFTP','String').SetString( 'ftp');
 CL.AddConstantN('protoGopher','String').SetString( 'gopher');
 CL.AddConstantN('protoEMail','String').SetString( 'mailto');
 CL.AddConstantN('protoHTTPS','String').SetString( 'https');
 CL.AddConstantN('protoIRC','String').SetString( 'irc');
 CL.AddConstantN('protoFile','String').SetString( 'file');
 CL.AddConstantN('protoTelnet','String').SetString( 'telnet');
 CL.AddDelphiFunction('Procedure DecodeURL( const URL : String; var Protocol, Host, Path : String)');
 CL.AddDelphiFunction('Function EncodeURL( const Protocol, Host, Path : String) : String');
 CL.AddDelphiFunction('Procedure DecodeHost( const Address : String; var Host, Port : String; const DefaultPort : String)');
 CL.AddDelphiFunction('Function EncodeDotLineTerminated( const S : AnsiString) : AnsiString');
 CL.AddDelphiFunction('Function EncodeEmptyLineTerminated( const S : AnsiString) : AnsiString');
 CL.AddDelphiFunction('Function DecodeDotLineTerminated( const S : AnsiString) : AnsiString');
 CL.AddDelphiFunction('Function DecodeEmptyLineTerminated( const S : AnsiString) : AnsiString');
 CL.AddDelphiFunction('Procedure StreamDotLineTerminated0( const Source, Destination : AStream; const ProgressCallback : TCopyProgressProcedure);');
 CL.AddDelphiFunction('Procedure StreamDotLineTerminated1( const Source : String; const Destination : AStream; const ProgressCallback : TCopyProgressProcedure);');
 CL.AddDelphiFunction('Function htmlCharRef( const CharVal : LongWord; const UseHex : Boolean) : String');
 CL.AddDelphiFunction('Function htmlSafeAsciiText( const S : String) : String');
 CL.AddDelphiFunction('Procedure htmlSafeWideText( var S : WideString)');
 CL.AddDelphiFunction('Function htmlSafeQuotedText( const S : String) : String');
 CL.AddDelphiFunction('Function EncodeHeaderField( const Name, Body : String) : String');
 CL.AddDelphiFunction('Function DecodeHeaderField( const S : String; var Name, Body : String) : Boolean');
 CL.AddDelphiFunction('Procedure DecodeEMailAddress( const S : String; var User, Domain : String)');
 CL.AddDelphiFunction('Procedure DecodeEMailField( const S : String; var EMailAddress, Name : String)');
 CL.AddDelphiFunction('Function DateFieldBody : String');
 CL.AddDelphiFunction('Function DateField : String');
 CL.AddDelphiFunction('Function MessageIDFieldBody( const ID : String; const Host : String) : String');
  SIRegister_AHeaderField(CL);
  //CL.AddTypeS('AHeaderFieldClass', 'class of AHeaderField');
  CL.AddTypeS('AHeaderFieldArray', 'array of AHeaderField');
  SIRegister_THeader(CL);
  //CL.AddTypeS('THeaderClass', 'class of THeader');
  CL.AddTypeS('THeaderArray', 'array of THeader');
  SIRegister_THeaderField(CL);
  SIRegister_TInvalidField(CL);
  SIRegister_TDateField(CL);
  SIRegister_TEMailField(CL);
 CL.AddDelphiFunction('Procedure SelfTest');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TEMailFieldName_R(Self: TEMailField; var T: String);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TEMailFieldAddress_R(Self: TEMailField; var T: String);
begin T := Self.Address; end;

(*----------------------------------------------------------------------------*)
procedure TDateFieldGMTDateTime_W(Self: TDateField; const T: TDateTime);
begin Self.GMTDateTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TDateFieldGMTDateTime_R(Self: TDateField; var T: TDateTime);
begin T := Self.GMTDateTime; end;

(*----------------------------------------------------------------------------*)
Function TDateFieldCreate_P(Self: TClass; CreateNewInstance: Boolean;  const LocalTime : TDateTime):TObject;
Begin Result := TDateField.Create(LocalTime); END;

(*----------------------------------------------------------------------------*)
Procedure THeaderAddField8_P(Self: THeader;  const FieldLine : String);
Begin Self.AddField(FieldLine); END;

(*----------------------------------------------------------------------------*)
Procedure THeaderAddField7_P(Self: THeader;  const Name, Body : String);
Begin Self.AddField(Name, Body); END;

(*----------------------------------------------------------------------------*)
Procedure THeaderAddField6_P(Self: THeader;  const Field : AHeaderField);
Begin Self.AddField(Field); END;

(*----------------------------------------------------------------------------*)
procedure THeaderFieldBody_W(Self: THeader; const T: String; const t1: String);
begin Self.FieldBody[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure THeaderFieldBody_R(Self: THeader; var T: String; const t1: String);
begin T := Self.FieldBody[t1]; end;

(*----------------------------------------------------------------------------*)
procedure THeaderField_W(Self: THeader; const T: AHeaderField; const t1: String);
begin Self.Field[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure THeaderField_R(Self: THeader; var T: AHeaderField; const t1: String);
begin T := Self.Field[t1]; end;

(*----------------------------------------------------------------------------*)
procedure THeaderFieldByIndex_W(Self: THeader; const T: AHeaderField; const t1: Integer);
begin Self.FieldByIndex[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure THeaderFieldByIndex_R(Self: THeader; var T: AHeaderField; const t1: Integer);
begin T := Self.FieldByIndex[t1]; end;

(*----------------------------------------------------------------------------*)
procedure THeaderFieldCount_R(Self: THeader; var T: Integer);
begin T := Self.FieldCount; end;

(*----------------------------------------------------------------------------*)
procedure THeaderAsString_W(Self: THeader; const T: String);
begin Self.AsString := T; end;

(*----------------------------------------------------------------------------*)
procedure THeaderAsString_R(Self: THeader; var T: String);
begin T := Self.AsString; end;

(*----------------------------------------------------------------------------*)
Function THeaderCreate2_P(Self: TClass; CreateNewInstance: Boolean;  const HeaderReader : AReaderEx; const Tolerant : Boolean; const MaxHeaderSize : Integer):TObject;
Begin Result := THeader.Create(HeaderReader, Tolerant, MaxHeaderSize); END;

(*----------------------------------------------------------------------------*)
Function THeaderCreate_P(Self: TClass; CreateNewInstance: Boolean;  const Header : String):TObject;
Begin Result := THeader.Create(Header); END;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldAsString_W(Self: AHeaderField; const T: String);
begin Self.AsString := T; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldAsString_R(Self: AHeaderField; var T: String);
begin T := Self.AsString; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldBodyAsFloat_W(Self: AHeaderField; const T: Extended);
begin Self.BodyAsFloat := T; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldBodyAsFloat_R(Self: AHeaderField; var T: Extended);
begin T := Self.BodyAsFloat; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldBodyAsInteger_W(Self: AHeaderField; const T: Int64);
begin Self.BodyAsInteger := T; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldBodyAsInteger_R(Self: AHeaderField; var T: Int64);
begin T := Self.BodyAsInteger; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldBody_W(Self: AHeaderField; const T: String);
begin Self.Body := T; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldBody_R(Self: AHeaderField; var T: String);
begin T := Self.Body; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldName_W(Self: AHeaderField; const T: String);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure AHeaderFieldName_R(Self: AHeaderField; var T: String);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
Function AHeaderFieldCreate2_P(Self: TClass; CreateNewInstance: Boolean;  const Name, Body : String):TObject;
Begin Result := AHeaderField.Create(Name, Body); END;

(*----------------------------------------------------------------------------*)
Function AHeaderFieldCreate_P(Self: TClass; CreateNewInstance: Boolean;  const Body : String):TObject;
Begin Result := AHeaderField.Create(Body); END;

(*----------------------------------------------------------------------------*)
Procedure StreamDotLineTerminated1_P( const Source : String; const Destination : AStream; const ProgressCallback : TCopyProgressProcedure);
Begin cInternetUtils.StreamDotLineTerminated(Source, Destination, ProgressCallback); END;

(*----------------------------------------------------------------------------*)
Procedure StreamDotLineTerminated0_P( const Source, Destination : AStream; const ProgressCallback : TCopyProgressProcedure);
Begin cInternetUtils.StreamDotLineTerminated(Source, Destination, ProgressCallback); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEMailField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEMailField) do
  begin
    RegisterPropertyHelper(@TEMailFieldAddress_R,nil,'Address');
    RegisterPropertyHelper(@TEMailFieldName_R,nil,'Name');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDateField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDateField) do
  begin
    RegisterConstructor(@TDateField.CreateNow, 'CreateNow');
    RegisterConstructor(@TDateFieldCreate_P, 'Create');
    RegisterPropertyHelper(@TDateFieldGMTDateTime_R,@TDateFieldGMTDateTime_W,'GMTDateTime');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInvalidField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInvalidField) do
  begin
    RegisterConstructor(@TInvalidField.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THeaderField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THeaderField) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THeader(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THeader) do
  begin
    RegisterConstructor(@THeaderCreate_P, 'Create');
    RegisterConstructor(@THeaderCreate2_P, 'Create2');
    RegisterVirtualMethod(@THeader.Duplicate, 'Duplicate');
    RegisterVirtualMethod(@THeader.ReadFromStream, 'ReadFromStream');
    RegisterVirtualMethod(@THeader.Prepare, 'Prepare');
    RegisterPropertyHelper(@THeaderAsString_R,@THeaderAsString_W,'AsString');
    RegisterPropertyHelper(@THeaderFieldCount_R,nil,'FieldCount');
    RegisterPropertyHelper(@THeaderFieldByIndex_R,@THeaderFieldByIndex_W,'FieldByIndex');
    RegisterMethod(@THeader.GetFieldIndex, 'GetFieldIndex');
    RegisterMethod(@THeader.HasField, 'HasField');
    RegisterPropertyHelper(@THeaderField_R,@THeaderField_W,'Field');
    RegisterPropertyHelper(@THeaderFieldBody_R,@THeaderFieldBody_W,'FieldBody');
    RegisterVirtualMethod(@THeader.GetFieldNames, 'GetFieldNames');
    RegisterVirtualMethod(@THeader.Clear, 'Clear');
    RegisterMethod(@THeader.DeleteFieldByIndex, 'DeleteFieldByIndex');
    RegisterMethod(@THeader.DeleteField, 'DeleteField');
    RegisterMethod(@THeaderAddField6_P, 'AddField6');
    RegisterVirtualMethod(@THeaderAddField7_P, 'AddField7');
    RegisterVirtualMethod(@THeaderAddField8_P, 'AddField8');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AHeaderField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AHeaderField) do
  begin
    RegisterConstructor(@AHeaderFieldCreate_P, 'Create');
    RegisterConstructor(@AHeaderFieldCreate2_P, 'Create2');
    RegisterVirtualMethod(@AHeaderField.Duplicate, 'Duplicate');
    RegisterVirtualMethod(@AHeaderField.Prepare, 'Prepare');
    RegisterPropertyHelper(@AHeaderFieldName_R,@AHeaderFieldName_W,'Name');
    RegisterPropertyHelper(@AHeaderFieldBody_R,@AHeaderFieldBody_W,'Body');
    RegisterPropertyHelper(@AHeaderFieldBodyAsInteger_R,@AHeaderFieldBodyAsInteger_W,'BodyAsInteger');
    RegisterPropertyHelper(@AHeaderFieldBodyAsFloat_R,@AHeaderFieldBodyAsFloat_W,'BodyAsFloat');
    RegisterPropertyHelper(@AHeaderFieldAsString_R,@AHeaderFieldAsString_W,'AsString');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cInternetUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@MIMEContentTypeFromExtention, 'MIMEContentTypeFromExtention', cdRegister);
 S.RegisterDelphiFunction(@DecodeURL, 'DecodeURL', cdRegister);
 S.RegisterDelphiFunction(@EncodeURL, 'EncodeURL', cdRegister);
 S.RegisterDelphiFunction(@DecodeHost, 'DecodeHost', cdRegister);
 S.RegisterDelphiFunction(@EncodeDotLineTerminated, 'EncodeDotLineTerminated', cdRegister);
 S.RegisterDelphiFunction(@EncodeEmptyLineTerminated, 'EncodeEmptyLineTerminated', cdRegister);
 S.RegisterDelphiFunction(@DecodeDotLineTerminated, 'DecodeDotLineTerminated', cdRegister);
 S.RegisterDelphiFunction(@DecodeEmptyLineTerminated, 'DecodeEmptyLineTerminated', cdRegister);
 S.RegisterDelphiFunction(@StreamDotLineTerminated0, 'StreamDotLineTerminated0', cdRegister);
 S.RegisterDelphiFunction(@StreamDotLineTerminated1, 'StreamDotLineTerminated1', cdRegister);
 S.RegisterDelphiFunction(@htmlCharRef, 'htmlCharRef', cdRegister);
 S.RegisterDelphiFunction(@htmlSafeAsciiText, 'htmlSafeAsciiText', cdRegister);
 S.RegisterDelphiFunction(@htmlSafeWideText, 'htmlSafeWideText', cdRegister);
 S.RegisterDelphiFunction(@htmlSafeQuotedText, 'htmlSafeQuotedText', cdRegister);
 S.RegisterDelphiFunction(@EncodeHeaderField, 'EncodeHeaderField', cdRegister);
 S.RegisterDelphiFunction(@DecodeHeaderField, 'DecodeHeaderField', cdRegister);
 S.RegisterDelphiFunction(@DecodeEMailAddress, 'DecodeEMailAddress', cdRegister);
 S.RegisterDelphiFunction(@DecodeEMailField, 'DecodeEMailField', cdRegister);
 S.RegisterDelphiFunction(@DateFieldBody, 'DateFieldBody', cdRegister);
 S.RegisterDelphiFunction(@DateField, 'DateField', cdRegister);
 S.RegisterDelphiFunction(@MessageIDFieldBody, 'MessageIDFieldBody', cdRegister);
  RIRegister_AHeaderField(CL);
  RIRegister_THeader(CL);
  RIRegister_THeaderField(CL);
  RIRegister_TInvalidField(CL);
  RIRegister_TDateField(CL);
  RIRegister_TEMailField(CL);
 S.RegisterDelphiFunction(@SelfTest, 'SelfTest', cdRegister);
end;

 
 
{ TPSImport_cInternetUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_cInternetUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_cInternetUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_cInternetUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_cInternetUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
