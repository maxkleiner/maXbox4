unit uPSI_cDictionaries;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_cDictionaries = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TInterfaceDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInterfaceDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TObjectDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralObjectDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TPointerDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralPointerDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TExtendedDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralExtendedDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TDoubleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralDoubleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TSingleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralSingleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TInt64Dictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralInt64Dictionary(CL: TPSPascalCompiler);
procedure SIRegister_TLongWordDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongWordDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TLongIntDictionary(CL: TPSPascalCompiler);
procedure SIRegister_TGeneralLongIntDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AInterfaceDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AObjectDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AStringDictionary(CL: TPSPascalCompiler);
procedure SIRegister_APointerDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AExtendedDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ADoubleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ASingleDictionary(CL: TPSPascalCompiler);
procedure SIRegister_AInt64Dictionary(CL: TPSPascalCompiler);
procedure SIRegister_ALongWordDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ALongIntDictionary(CL: TPSPascalCompiler);
procedure SIRegister_ADictionary(CL: TPSPascalCompiler);
procedure SIRegister_cDictionaries(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cDictionaries_Routines(S: TPSExec);
procedure RIRegister_TInterfaceDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInterfaceDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TObjectDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralObjectDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPointerDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralPointerDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TExtendedDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralExtendedDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TDoubleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralDoubleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSingleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralSingleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TInt64Dictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralInt64Dictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongWordDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongWordDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TLongIntDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGeneralLongIntDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInterfaceDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AObjectDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AStringDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_APointerDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AExtendedDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADoubleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ASingleDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_AInt64Dictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongWordDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ALongIntDictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_ADictionary(CL: TPSRuntimeClassImporter);
procedure RIRegister_cDictionaries(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   cUtils
  ,cTypes
  ,cArrays
  ,cDictionaries
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_cDictionaries]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TInterfaceDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInterfaceDictionary', 'TInterfaceDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralInterfaceDictionary'),'TInterfaceDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TInterfaceArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : IInterface) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInterfaceDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInterfaceDictionary', 'TGeneralInterfaceDictionary') do
  with CL.AddClassN(CL.FindClass('AInterfaceDictionary'),'TGeneralInterfaceDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : AInterfaceArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'AInterfaceArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : IInterface)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : IInterface');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : IInterface)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : IInterface) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : IInterface) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralObjectDictionary', 'TObjectDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralObjectDictionary'),'TObjectDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TObjectArray; const IsItemOwner : Boolean; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictio' +
      'naryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : TObject) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralObjectDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AObjectDictionary', 'TGeneralObjectDictionary') do
  with CL.AddClassN(CL.FindClass('AObjectDictionary'),'TGeneralObjectDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : AObjectArray; const IsItemOwner : Boolean; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictio' +
      'naryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'AObjectArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : TObject)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : TObject');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : TObject)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : TObject) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : TObject) : Integer');
    RegisterMethod('Function ReleaseItem( const Key : String) : TObject');
    RegisterMethod('Procedure ReleaseItems');
    RegisterMethod('Procedure FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralStringDictionary', 'TStringDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralStringDictionary'),'TStringDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TStringArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : String) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AStringDictionary', 'TGeneralStringDictionary') do
  with CL.AddClassN(CL.FindClass('AStringDictionary'),'TGeneralStringDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : AStringArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'AStringArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : String)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : String)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : String) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : String) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPointerDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralPointerDictionary', 'TPointerDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralPointerDictionary'),'TPointerDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TPointerArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Pointer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralPointerDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'APointerDictionary', 'TGeneralPointerDictionary') do
  with CL.AddClassN(CL.FindClass('APointerDictionary'),'TGeneralPointerDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : APointerArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'APointerArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : Pointer)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Pointer');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Pointer)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Pointer) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Pointer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TExtendedDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralExtendedDictionary', 'TExtendedDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralExtendedDictionary'),'TExtendedDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TExtendedArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Extended) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralExtendedDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AExtendedDictionary', 'TGeneralExtendedDictionary') do
  with CL.AddClassN(CL.FindClass('AExtendedDictionary'),'TGeneralExtendedDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : AExtendedArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'AExtendedArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : Extended)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Extended');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Extended)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Extended) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Extended) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TDoubleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralDoubleDictionary', 'TDoubleDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralDoubleDictionary'),'TDoubleDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TDoubleArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Double) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralDoubleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADoubleDictionary', 'TGeneralDoubleDictionary') do
  with CL.AddClassN(CL.FindClass('ADoubleDictionary'),'TGeneralDoubleDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : ADoubleArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'ADoubleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : Double)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Double');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Double)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Double) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Double) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSingleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralSingleDictionary', 'TSingleDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralSingleDictionary'),'TSingleDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TSingleArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Single) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralSingleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ASingleDictionary', 'TGeneralSingleDictionary') do
  with CL.AddClassN(CL.FindClass('ASingleDictionary'),'TGeneralSingleDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : ASingleArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'ASingleArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : Single)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Single');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Single)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Single) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Single) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TInt64Dictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralInt64Dictionary', 'TInt64Dictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralInt64Dictionary'),'TInt64Dictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TInt64Array; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Int64) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralInt64Dictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AInt64Dictionary', 'TGeneralInt64Dictionary') do
  with CL.AddClassN(CL.FindClass('AInt64Dictionary'),'TGeneralInt64Dictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : AInt64Array; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'AInt64Array', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : Int64)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Int64');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : Int64)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Int64) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Int64) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongWordDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongWordDictionary', 'TLongWordDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralLongWordDictionary'),'TLongWordDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TLongWordArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : LongWord) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongWordDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongWordDictionary', 'TGeneralLongWordDictionary') do
  with CL.AddClassN(CL.FindClass('ALongWordDictionary'),'TGeneralLongWordDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : ALongWordArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'ALongWordArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key : String; const NewKey : String)');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterMethod('Procedure Add( const Key : String; const Value : LongWord)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongWord');
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongWord)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : LongWord) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : LongWord) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TLongIntDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGeneralLongIntDictionary', 'TLongIntDictionary') do
  with CL.AddClassN(CL.FindClass('TGeneralLongIntDictionary'),'TLongIntDictionary') do
  begin
    RegisterMethod('Constructor CreateEx( const Keys : TStringArray; const Values : TLongIntArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterMethod('Function LocateItem( const Key : String; var Value : LongInt) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGeneralLongIntDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ALongIntDictionary', 'TGeneralLongIntDictionary') do
  with CL.AddClassN(CL.FindClass('ALongIntDictionary'),'TGeneralLongIntDictionary') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Constructor CreateEx( const Keys : AStringArray; const Values : ALongIntArray; const KeysCaseSensitive : Boolean; const AddOnSet : Boolean; const DuplicatesAction : TDictionaryDuplicatesAction)');
    RegisterProperty('Keys', 'AStringArray', iptr);
    RegisterProperty('Values', 'ALongIntArray', iptr);
    RegisterProperty('HashTableSize', 'Integer', iptr);
    RegisterMethod('Procedure SetItemByIndex( const Idx : Integer; const Value : LongInt)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInterfaceDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AInterfaceDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AInterfaceDictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'IInterface String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : IInterface)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : IInterface');
    RegisterMethod('Function LocateItem( const Key : String; var Value : IInterface) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : IInterface) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AObjectDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AObjectDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AObjectDictionary') do
  begin
    RegisterMethod('Function GetAsString : String');
    RegisterMethod('Procedure Add( const Key : String; const Value : TObject)');
    RegisterProperty('Item', 'TObject String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : TObject');
    RegisterMethod('Function LocateItem( const Key : String; var Value : TObject) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : TObject) : Integer');
    RegisterProperty('IsItemOwner', 'Boolean', iptrw);
    RegisterMethod('Function ReleaseItem( const Key : String) : TObject');
    RegisterMethod('Procedure ReleaseItems');
    RegisterMethod('Procedure FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AStringDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AStringDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AStringDictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'String String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : String)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : String');
    RegisterMethod('Function LocateItem( const Key : String; var Value : String) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : String) : Integer');
    RegisterMethod('Function GetItemLength( const Key : String) : Integer');
    RegisterMethod('Function GetTotalLength : Int64');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_APointerDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'APointerDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'APointerDictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'Pointer String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Pointer)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Pointer');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Pointer) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Pointer) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AExtendedDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AExtendedDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AExtendedDictionary') do
  begin
    RegisterProperty('Item', 'Extended String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Extended)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Extended');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Extended) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Extended) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADoubleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ADoubleDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ADoubleDictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'Double String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Double)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Double');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Double) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Double) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ASingleDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ASingleDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ASingleDictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'Single String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Single)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Single');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Single) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Single) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AInt64Dictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'AInt64Dictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'AInt64Dictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'Int64 String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : Int64)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : Int64');
    RegisterMethod('Function LocateItem( const Key : String; var Value : Int64) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : Int64) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongWordDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ALongWordDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ALongWordDictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'LongWord String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : LongWord)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongWord');
    RegisterMethod('Function LocateItem( const Key : String; var Value : LongWord) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : LongWord) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ALongIntDictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'ADictionary', 'ALongIntDictionary') do
  with CL.AddClassN(CL.FindClass('ADictionary'),'ALongIntDictionary') do
  begin
    RegisterMethod('Procedure Assign( const Source : TObject)');
    RegisterProperty('Item', 'LongInt String', iptrw);
    SetDefaultPropery('Item');
    RegisterMethod('Procedure Add( const Key : String; const Value : LongInt)');
    RegisterMethod('Function GetItemByIndex( const Idx : Integer) : LongInt');
    RegisterMethod('Function LocateItem( const Key : String; var Value : LongInt) : Integer');
    RegisterMethod('Function LocateNext( const Key : String; const Idx : Integer; var Value : LongInt) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ADictionary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'AType', 'ADictionary') do
  with CL.AddClassN(CL.FindClass('AType'),'ADictionary') do
  begin
    RegisterMethod('Procedure Delete( const Key : String)');
    RegisterMethod('Function HasKey( const Key : String) : Boolean');
    RegisterMethod('Procedure Rename( const Key, NewKey : String)');
    RegisterMethod('Function Count : Integer');
    RegisterMethod('Function GetKeyByIndex( const Idx : Integer) : String');
    RegisterMethod('Procedure DeleteItemByIndex( const Idx : Integer)');
    RegisterProperty('AddOnSet', 'Boolean', iptrw);
    RegisterProperty('DuplicatesAction', 'TDictionaryDuplicatesAction', iptrw);
    RegisterProperty('KeysCaseSensitive', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_cDictionaries(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('UnitName','String').SetString( 'cDictionaries');
 CL.AddConstantN('UnitVersion','String').SetString( '3.11');
 CL.AddConstantN('UnitDesc','String').SetString( 'Data structures: Dictionaries');
 CL.AddConstantN('UnitCopyright','String').SetString( 'Copyright (c) 1999-2003 David J Butler');
  CL.AddTypeS('TDictionaryDuplicatesAction', '( ddError, ddAccept, ddIgnore )');
  SIRegister_ADictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDictionary');
  SIRegister_ALongIntDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongIntDictionary');
  CL.AddTypeS('AIntegerDictionary', 'ALongIntDictionary');
  SIRegister_ALongWordDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ELongWordDictionary');
  CL.AddTypeS('ACardinalDictionary', 'ALongWordDictionary');
  SIRegister_AInt64Dictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInt64Dictionary');
  SIRegister_ASingleDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'ESingleDictionary');
  SIRegister_ADoubleDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EDoubleDictionary');
  SIRegister_AExtendedDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EExtendedDictionary');
  SIRegister_APointerDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPointerDictionary');
  SIRegister_AStringDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStringDictionary');
  SIRegister_AObjectDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EObjectDictionary');
  SIRegister_AInterfaceDictionary(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EInterfaceDictionary');
  SIRegister_TGeneralLongIntDictionary(CL);
  SIRegister_TLongIntDictionary(CL);
  CL.AddTypeS('TGeneralIntegerDictionary', 'TGeneralLongIntDictionary');
  CL.AddTypeS('TIntegerDictionary', 'TLongIntDictionary');
  SIRegister_TGeneralLongWordDictionary(CL);
  SIRegister_TLongWordDictionary(CL);
  CL.AddTypeS('TGeneralCardinalDictionary', 'TGeneralLongWordDictionary');
  CL.AddTypeS('TCardinalDictionary', 'TLongWordDictionary');
  SIRegister_TGeneralInt64Dictionary(CL);
  SIRegister_TInt64Dictionary(CL);
  SIRegister_TGeneralSingleDictionary(CL);
  SIRegister_TSingleDictionary(CL);
  SIRegister_TGeneralDoubleDictionary(CL);
  SIRegister_TDoubleDictionary(CL);
  SIRegister_TGeneralExtendedDictionary(CL);
  SIRegister_TExtendedDictionary(CL);
  SIRegister_TGeneralPointerDictionary(CL);
  SIRegister_TPointerDictionary(CL);
  SIRegister_TGeneralStringDictionary(CL);
  SIRegister_TStringDictionary(CL);
  SIRegister_TGeneralObjectDictionary(CL);
  SIRegister_TObjectDictionary(CL);
  SIRegister_TGeneralInterfaceDictionary(CL);
  SIRegister_TInterfaceDictionary(CL);
 CL.AddConstantN('AverageHashChainSize','LongInt').SetInt( 4);
 CL.AddDelphiFunction('Function DictionaryRehashSize( const Count : Integer) : Integer');
 CL.AddDelphiFunction('Procedure SelfTest');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryHashTableSize_R(Self: TGeneralInterfaceDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryValues_R(Self: TGeneralInterfaceDictionary; var T: AInterfaceArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInterfaceDictionaryKeys_R(Self: TGeneralInterfaceDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryHashTableSize_R(Self: TGeneralObjectDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryValues_R(Self: TGeneralObjectDictionary; var T: AObjectArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralObjectDictionaryKeys_R(Self: TGeneralObjectDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryHashTableSize_R(Self: TGeneralStringDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryValues_R(Self: TGeneralStringDictionary; var T: AStringArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralStringDictionaryKeys_R(Self: TGeneralStringDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryHashTableSize_R(Self: TGeneralPointerDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryValues_R(Self: TGeneralPointerDictionary; var T: APointerArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralPointerDictionaryKeys_R(Self: TGeneralPointerDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryHashTableSize_R(Self: TGeneralExtendedDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryValues_R(Self: TGeneralExtendedDictionary; var T: AExtendedArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralExtendedDictionaryKeys_R(Self: TGeneralExtendedDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryHashTableSize_R(Self: TGeneralDoubleDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryValues_R(Self: TGeneralDoubleDictionary; var T: ADoubleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralDoubleDictionaryKeys_R(Self: TGeneralDoubleDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryHashTableSize_R(Self: TGeneralSingleDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryValues_R(Self: TGeneralSingleDictionary; var T: ASingleArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralSingleDictionaryKeys_R(Self: TGeneralSingleDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryHashTableSize_R(Self: TGeneralInt64Dictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryValues_R(Self: TGeneralInt64Dictionary; var T: AInt64Array);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralInt64DictionaryKeys_R(Self: TGeneralInt64Dictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryHashTableSize_R(Self: TGeneralLongWordDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryValues_R(Self: TGeneralLongWordDictionary; var T: ALongWordArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongWordDictionaryKeys_R(Self: TGeneralLongWordDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryHashTableSize_R(Self: TGeneralLongIntDictionary; var T: Integer);
begin T := Self.HashTableSize; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryValues_R(Self: TGeneralLongIntDictionary; var T: ALongIntArray);
begin T := Self.Values; end;

(*----------------------------------------------------------------------------*)
procedure TGeneralLongIntDictionaryKeys_R(Self: TGeneralLongIntDictionary; var T: AStringArray);
begin T := Self.Keys; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryItem_W(Self: AInterfaceDictionary; const T: IInterface; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInterfaceDictionaryItem_R(Self: AInterfaceDictionary; var T: IInterface; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryIsItemOwner_W(Self: AObjectDictionary; const T: Boolean);
begin Self.IsItemOwner := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryIsItemOwner_R(Self: AObjectDictionary; var T: Boolean);
begin T := Self.IsItemOwner; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryItem_W(Self: AObjectDictionary; const T: TObject; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AObjectDictionaryItem_R(Self: AObjectDictionary; var T: TObject; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
Procedure AObjectDictionaryAssign0_P(Self: AObjectDictionary;  const Source : TObject);
Begin Self.Assign(Source); END;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryItem_W(Self: AStringDictionary; const T: String; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AStringDictionaryItem_R(Self: AStringDictionary; var T: String; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryItem_W(Self: APointerDictionary; const T: Pointer; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure APointerDictionaryItem_R(Self: APointerDictionary; var T: Pointer; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryItem_W(Self: AExtendedDictionary; const T: Extended; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AExtendedDictionaryItem_R(Self: AExtendedDictionary; var T: Extended; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryItem_W(Self: ADoubleDictionary; const T: Double; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ADoubleDictionaryItem_R(Self: ADoubleDictionary; var T: Double; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryItem_W(Self: ASingleDictionary; const T: Single; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ASingleDictionaryItem_R(Self: ASingleDictionary; var T: Single; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryItem_W(Self: AInt64Dictionary; const T: Int64; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure AInt64DictionaryItem_R(Self: AInt64Dictionary; var T: Int64; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryItem_W(Self: ALongWordDictionary; const T: LongWord; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongWordDictionaryItem_R(Self: ALongWordDictionary; var T: LongWord; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryItem_W(Self: ALongIntDictionary; const T: LongInt; const t1: String);
begin Self.Item[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure ALongIntDictionaryItem_R(Self: ALongIntDictionary; var T: LongInt; const t1: String);
begin T := Self.Item[t1]; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryKeysCaseSensitive_R(Self: ADictionary; var T: Boolean);
begin T := Self.KeysCaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryDuplicatesAction_W(Self: ADictionary; const T: TDictionaryDuplicatesAction);
begin Self.DuplicatesAction := T; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryDuplicatesAction_R(Self: ADictionary; var T: TDictionaryDuplicatesAction);
begin T := Self.DuplicatesAction; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryAddOnSet_W(Self: ADictionary; const T: Boolean);
begin Self.AddOnSet := T; end;

(*----------------------------------------------------------------------------*)
procedure ADictionaryAddOnSet_R(Self: ADictionary; var T: Boolean);
begin T := Self.AddOnSet; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cDictionaries_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@DictionaryRehashSize, 'DictionaryRehashSize', cdRegister);
 S.RegisterDelphiFunction(@SelfTest, 'SelfTest', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInterfaceDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInterfaceDictionary) do
  begin
    RegisterConstructor(@TInterfaceDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TInterfaceDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInterfaceDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInterfaceDictionary) do
  begin
    RegisterConstructor(@TGeneralInterfaceDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralInterfaceDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInterfaceDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInterfaceDictionary.Clear, 'Clear');
    RegisterMethod(@TGeneralInterfaceDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralInterfaceDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralInterfaceDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralInterfaceDictionary.Count, 'Count');
    RegisterMethod(@TGeneralInterfaceDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralInterfaceDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralInterfaceDictionary.Add, 'Add');
    RegisterMethod(@TGeneralInterfaceDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralInterfaceDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralInterfaceDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralInterfaceDictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectDictionary) do
  begin
    RegisterConstructor(@TObjectDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TObjectDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralObjectDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralObjectDictionary) do
  begin
    RegisterConstructor(@TGeneralObjectDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralObjectDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralObjectDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralObjectDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralObjectDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralObjectDictionary.Clear, 'Clear');
    RegisterMethod(@TGeneralObjectDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralObjectDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralObjectDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralObjectDictionary.Count, 'Count');
    RegisterMethod(@TGeneralObjectDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralObjectDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralObjectDictionary.Add, 'Add');
    RegisterMethod(@TGeneralObjectDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralObjectDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralObjectDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralObjectDictionary.LocateNext, 'LocateNext');
    RegisterMethod(@TGeneralObjectDictionary.ReleaseItem, 'ReleaseItem');
    RegisterMethod(@TGeneralObjectDictionary.ReleaseItems, 'ReleaseItems');
    RegisterMethod(@TGeneralObjectDictionary.FreeItems, 'FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStringDictionary) do
  begin
    RegisterConstructor(@TStringDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TStringDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralStringDictionary) do
  begin
    RegisterConstructor(@TGeneralStringDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralStringDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralStringDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralStringDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralStringDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralStringDictionary.Clear, 'Clear');
    RegisterMethod(@TGeneralStringDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralStringDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralStringDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralStringDictionary.Count, 'Count');
    RegisterMethod(@TGeneralStringDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralStringDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralStringDictionary.Add, 'Add');
    RegisterMethod(@TGeneralStringDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralStringDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralStringDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralStringDictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPointerDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPointerDictionary) do
  begin
    RegisterConstructor(@TPointerDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TPointerDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralPointerDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralPointerDictionary) do
  begin
    RegisterConstructor(@TGeneralPointerDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralPointerDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralPointerDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralPointerDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralPointerDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralPointerDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralPointerDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralPointerDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralPointerDictionary.Count, 'Count');
    RegisterMethod(@TGeneralPointerDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralPointerDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralPointerDictionary.Add, 'Add');
    RegisterMethod(@TGeneralPointerDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralPointerDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralPointerDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralPointerDictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TExtendedDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TExtendedDictionary) do
  begin
    RegisterConstructor(@TExtendedDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TExtendedDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralExtendedDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralExtendedDictionary) do
  begin
    RegisterConstructor(@TGeneralExtendedDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralExtendedDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralExtendedDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralExtendedDictionary.Clear, 'Clear');
    RegisterMethod(@TGeneralExtendedDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralExtendedDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralExtendedDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralExtendedDictionary.Count, 'Count');
    RegisterMethod(@TGeneralExtendedDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralExtendedDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralExtendedDictionary.Add, 'Add');
    RegisterMethod(@TGeneralExtendedDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralExtendedDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralExtendedDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralExtendedDictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDoubleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDoubleDictionary) do
  begin
    RegisterConstructor(@TDoubleDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TDoubleDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralDoubleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralDoubleDictionary) do
  begin
    RegisterConstructor(@TGeneralDoubleDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralDoubleDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralDoubleDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralDoubleDictionary.Clear, 'Clear');
    RegisterMethod(@TGeneralDoubleDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralDoubleDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralDoubleDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralDoubleDictionary.Count, 'Count');
    RegisterMethod(@TGeneralDoubleDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralDoubleDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralDoubleDictionary.Add, 'Add');
    RegisterMethod(@TGeneralDoubleDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralDoubleDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralDoubleDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralDoubleDictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSingleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSingleDictionary) do
  begin
    RegisterConstructor(@TSingleDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TSingleDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralSingleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralSingleDictionary) do
  begin
    RegisterConstructor(@TGeneralSingleDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralSingleDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralSingleDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralSingleDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralSingleDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralSingleDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralSingleDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralSingleDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralSingleDictionary.Count, 'Count');
    RegisterMethod(@TGeneralSingleDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralSingleDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralSingleDictionary.Add, 'Add');
    RegisterMethod(@TGeneralSingleDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralSingleDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralSingleDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralSingleDictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TInt64Dictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TInt64Dictionary) do
  begin
    RegisterConstructor(@TInt64Dictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TInt64Dictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralInt64Dictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralInt64Dictionary) do
  begin
    RegisterConstructor(@TGeneralInt64Dictionary.Create, 'Create');
    RegisterConstructor(@TGeneralInt64Dictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralInt64DictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralInt64DictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralInt64DictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralInt64Dictionary.Clear, 'Clear');
    RegisterMethod(@TGeneralInt64Dictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralInt64Dictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralInt64Dictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralInt64Dictionary.Count, 'Count');
    RegisterMethod(@TGeneralInt64Dictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralInt64Dictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralInt64Dictionary.Add, 'Add');
    RegisterMethod(@TGeneralInt64Dictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralInt64Dictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralInt64Dictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralInt64Dictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongWordDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongWordDictionary) do
  begin
    RegisterConstructor(@TLongWordDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TLongWordDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongWordDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongWordDictionary) do
  begin
    RegisterConstructor(@TGeneralLongWordDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralLongWordDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongWordDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongWordDictionary.Clear, 'Clear');
    RegisterMethod(@TGeneralLongWordDictionary.Delete, 'Delete');
    RegisterMethod(@TGeneralLongWordDictionary.HasKey, 'HasKey');
    RegisterMethod(@TGeneralLongWordDictionary.Rename, 'Rename');
    RegisterMethod(@TGeneralLongWordDictionary.GetKeyByIndex, 'GetKeyByIndex');
    RegisterMethod(@TGeneralLongWordDictionary.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterMethod(@TGeneralLongWordDictionary.Add, 'Add');
    RegisterMethod(@TGeneralLongWordDictionary.GetItemByIndex, 'GetItemByIndex');
    RegisterMethod(@TGeneralLongWordDictionary.SetItemByIndex, 'SetItemByIndex');
    RegisterMethod(@TGeneralLongWordDictionary.LocateItem, 'LocateItem');
    RegisterMethod(@TGeneralLongWordDictionary.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TLongIntDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TLongIntDictionary) do
  begin
    RegisterConstructor(@TLongIntDictionary.CreateEx, 'CreateEx');
    RegisterMethod(@TLongIntDictionary.LocateItem, 'LocateItem');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGeneralLongIntDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGeneralLongIntDictionary) do
  begin
    RegisterConstructor(@TGeneralLongIntDictionary.Create, 'Create');
    RegisterConstructor(@TGeneralLongIntDictionary.CreateEx, 'CreateEx');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryKeys_R,nil,'Keys');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryValues_R,nil,'Values');
    RegisterPropertyHelper(@TGeneralLongIntDictionaryHashTableSize_R,nil,'HashTableSize');
    RegisterMethod(@TGeneralLongIntDictionary.SetItemByIndex, 'SetItemByIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInterfaceDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInterfaceDictionary) do
  begin
    RegisterMethod(@AInterfaceDictionary.Assign, 'Assign');
    RegisterPropertyHelper(@AInterfaceDictionaryItem_R,@AInterfaceDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInterfaceDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AObjectDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AObjectDictionary) do
  begin
    RegisterMethod(@AObjectDictionary.GetAsString, 'GetAsString');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.Add, 'Add');
    RegisterPropertyHelper(@AObjectDictionaryItem_R,@AObjectDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.LocateNext, 'LocateNext');
    RegisterPropertyHelper(@AObjectDictionaryIsItemOwner_R,@AObjectDictionaryIsItemOwner_W,'IsItemOwner');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.ReleaseItem, 'ReleaseItem');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.ReleaseItems, 'ReleaseItems');
    RegisterVirtualAbstractMethod(@AObjectDictionary, @!.FreeItems, 'FreeItems');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AStringDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AStringDictionary) do
  begin
    RegisterMethod(@AStringDictionary.Assign, 'Assign');
    RegisterPropertyHelper(@AStringDictionaryItem_R,@AStringDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AStringDictionary, @!.LocateNext, 'LocateNext');
    RegisterVirtualMethod(@AStringDictionary.GetItemLength, 'GetItemLength');
    RegisterVirtualMethod(@AStringDictionary.GetTotalLength, 'GetTotalLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_APointerDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(APointerDictionary) do
  begin
    RegisterMethod(@APointerDictionary.Assign, 'Assign');
    RegisterPropertyHelper(@APointerDictionaryItem_R,@APointerDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@APointerDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AExtendedDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AExtendedDictionary) do
  begin
    RegisterPropertyHelper(@AExtendedDictionaryItem_R,@AExtendedDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AExtendedDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADoubleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADoubleDictionary) do
  begin
    RegisterMethod(@ADoubleDictionary.Assign, 'Assign');
    RegisterPropertyHelper(@ADoubleDictionaryItem_R,@ADoubleDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ADoubleDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ASingleDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ASingleDictionary) do
  begin
    RegisterMethod(@ASingleDictionary.Assign, 'Assign');
    RegisterPropertyHelper(@ASingleDictionaryItem_R,@ASingleDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ASingleDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AInt64Dictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(AInt64Dictionary) do
  begin
    RegisterMethod(@AInt64Dictionary.Assign, 'Assign');
    RegisterPropertyHelper(@AInt64DictionaryItem_R,@AInt64DictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@AInt64Dictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongWordDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongWordDictionary) do
  begin
    RegisterMethod(@ALongWordDictionary.Assign, 'Assign');
    RegisterPropertyHelper(@ALongWordDictionaryItem_R,@ALongWordDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongWordDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ALongIntDictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ALongIntDictionary) do
  begin
    RegisterMethod(@ALongIntDictionary.Assign, 'Assign');
    RegisterPropertyHelper(@ALongIntDictionaryItem_R,@ALongIntDictionaryItem_W,'Item');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.Add, 'Add');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.GetItemByIndex, 'GetItemByIndex');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.LocateItem, 'LocateItem');
    RegisterVirtualAbstractMethod(@ALongIntDictionary, @!.LocateNext, 'LocateNext');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ADictionary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ADictionary) do
  begin
    RegisterVirtualAbstractMethod(@ADictionary, @!.Delete, 'Delete');
    RegisterVirtualAbstractMethod(@ADictionary, @!.HasKey, 'HasKey');
    RegisterVirtualAbstractMethod(@ADictionary, @!.Rename, 'Rename');
    RegisterVirtualAbstractMethod(@ADictionary, @!.Count, 'Count');
    RegisterVirtualAbstractMethod(@ADictionary, @!.GetKeyByIndex, 'GetKeyByIndex');
    RegisterVirtualAbstractMethod(@ADictionary, @!.DeleteItemByIndex, 'DeleteItemByIndex');
    RegisterPropertyHelper(@ADictionaryAddOnSet_R,@ADictionaryAddOnSet_W,'AddOnSet');
    RegisterPropertyHelper(@ADictionaryDuplicatesAction_R,@ADictionaryDuplicatesAction_W,'DuplicatesAction');
    RegisterPropertyHelper(@ADictionaryKeysCaseSensitive_R,nil,'KeysCaseSensitive');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cDictionaries(CL: TPSRuntimeClassImporter);
begin
  RIRegister_ADictionary(CL);
  with CL.Add(EDictionary) do
  RIRegister_ALongIntDictionary(CL);
  with CL.Add(ELongIntDictionary) do
  RIRegister_ALongWordDictionary(CL);
  with CL.Add(ELongWordDictionary) do
  RIRegister_AInt64Dictionary(CL);
  with CL.Add(EInt64Dictionary) do
  RIRegister_ASingleDictionary(CL);
  with CL.Add(ESingleDictionary) do
  RIRegister_ADoubleDictionary(CL);
  with CL.Add(EDoubleDictionary) do
  RIRegister_AExtendedDictionary(CL);
  with CL.Add(EExtendedDictionary) do
  RIRegister_APointerDictionary(CL);
  with CL.Add(EPointerDictionary) do
  RIRegister_AStringDictionary(CL);
  with CL.Add(EStringDictionary) do
  RIRegister_AObjectDictionary(CL);
  with CL.Add(EObjectDictionary) do
  RIRegister_AInterfaceDictionary(CL);
  with CL.Add(EInterfaceDictionary) do
  RIRegister_TGeneralLongIntDictionary(CL);
  RIRegister_TLongIntDictionary(CL);
  RIRegister_TGeneralLongWordDictionary(CL);
  RIRegister_TLongWordDictionary(CL);
  RIRegister_TGeneralInt64Dictionary(CL);
  RIRegister_TInt64Dictionary(CL);
  RIRegister_TGeneralSingleDictionary(CL);
  RIRegister_TSingleDictionary(CL);
  RIRegister_TGeneralDoubleDictionary(CL);
  RIRegister_TDoubleDictionary(CL);
  RIRegister_TGeneralExtendedDictionary(CL);
  RIRegister_TExtendedDictionary(CL);
  RIRegister_TGeneralPointerDictionary(CL);
  RIRegister_TPointerDictionary(CL);
  RIRegister_TGeneralStringDictionary(CL);
  RIRegister_TStringDictionary(CL);
  RIRegister_TGeneralObjectDictionary(CL);
  RIRegister_TObjectDictionary(CL);
  RIRegister_TGeneralInterfaceDictionary(CL);
  RIRegister_TInterfaceDictionary(CL);
end;

 
 
{ TPSImport_cDictionaries }
(*----------------------------------------------------------------------------*)
procedure TPSImport_cDictionaries.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_cDictionaries(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_cDictionaries.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_cDictionaries(ri);
  RIRegister_cDictionaries_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
