unit uPSI_IdPOP3;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdPOP3 = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdPOP3(CL: TPSPascalCompiler);
procedure SIRegister_IdPOP3(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdPOP3(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdPOP3(CL: TPSRuntimeClassImporter);
//PlugIns
procedure GetMailHeaders;

procedure Register;

implementation


uses
   IdAssignedNumbers
  ,IdGlobal
  ,IdMessage
  ,IdMessageClient
  ,IdPOP3
  ,fMain
  ,IFSI_WinForm1puzzle
  ;

const MAILINIFILE = 'maildef.ini';
      EMAILLIST= 'maillist.txt';

var vhost, vuser, vpass, vbody: string;
    vport, vlast: byte;
    mailist: TStringList;

procedure MailFileRead;
var deflist: TStringlist;
     filepath, fN: string;
begin
deflist:= TStringlist.create;
filepath:= ExePath;
  try
    fN:= filepath+ MAILINIFILE;
    if fileexists(fN) then begin
      deflist.LoadFromFile(fN);
      vhost:= deflist.Values['HOST'];
      vuser:= deflist.Values['USER'];
      vpass:= deflist.Values['PASS'];
      vbody:= deflist.Values['BODY'];
      vport:= strtoint(deflist.values['PORT']);
      vlast:= strToInt(deflist.Values['LAST']);
      maxForm1.memo2.lines.Add('get your email settings from '+MAILINIFILE)
    end else begin
      // init values case of no file
      deflist.add('//*** Definitions for maXmail ***');
      deflist.add('[MAXMAIL]'); //ini file compatible mX3
      deflist.values['HOST']:= 'getmail.softwareschule.ch';
      deflist.values['USER']:= 'mailusername';
      deflist.values['PASS']:= 'password';
      deflist.values['PORT']:= '110';
      deflist.Values['BODY']:= 'Y';
      deflist.Values['LAST']:= '5';
      deflist.SaveToFile(fN);
      maxForm1.memo2.lines.Add('put your email settings in '+MAILINIFILE)
    end;
  finally
    deflist.Free
  end;
end;

procedure GetMailHeaders;
var
  i, z: Integer;
  IdPOP3: TIdPOP3;
  IdMessage1: TIdMessage;
begin
  MailFileRead;
  mailist:= TStringList.create;
  IdPOP3:= TIdPOP3.create(NIL);
  IdMessage1:= TIdMessage.create(NIL);
  IdPOP3.Host:= vhost;
  IdPOP3.Port:= vport;
  IdPOP3.Username:= vuser;
  IdPOP3.Password:= vpass;
  try
    IdPOP3.Connect(3000);
    if IdPOP3.connected then begin
      maxForm1.memo2.lines.add('mailXbox Size: '+inttostr(IdPOP3.RetrieveMailBoxSize));
      z:= IdPOP3.CheckMessages;
      maxForm1.memo2.lines.add('Number of Mails: '+inttostr(z));
    end;
    //last new messages
    for i:= z-vlast to z do begin
      IdMessage1.clear;
      try
        IdPOP3.RetrieveHeader(i, IdMessage1);
        with mailist do begin
          add('-----------------------------------------------------------');
          add('From: '+IdMessage1.From.Text);
          add('To: '+IdMessage1.Recipients.EMailAddresses);
          add('Subject: '+IdMessage1.Subject);
          add('Date: '+DateToStr(IdMessage1.Date));
          add('Size of: '+ IntToStr(IdPOP3.RetrieveMsgSize(i)));
          //add('Text: '+ IdMessage1.Body.Text);
          if vBody = 'Y' then begin
            IdPOP3.retrieveRaw(i, idMessage1.body);
            add(idMessage1.body.text)
          end;
        end;
      except
        //silent exception cause of invalid spam subject!
      end;
    end; //for
    mailist.SaveToFile(EMAILLIST)
  finally
    mailist.Free;
    IdPOP3.Disconnect;
    IdMessage1.Free;
    IdPOP3.Free;
  end;
  SearchAndOpenDoc(EMAILLIST)
end;


procedure Register;
begin
  //RegisterComponents('Pascal Script', [TPSImport_IdPOP3]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdPOP3(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdMessageClient', 'TIdPOP3') do
  with CL.AddClassN(CL.FindClass('TIdMessageClient'),'TIdPOP3') do begin
    RegisterMethod('Function CheckMessages : longint');
    RegisterMethod('Procedure Connect( const ATimeout : Integer)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Function Delete( const MsgNum : Integer) : Boolean');
    RegisterMethod('Procedure Disconnect');
    RegisterMethod('Procedure KeepAlive');
    RegisterMethod('Function Reset : Boolean');
    RegisterMethod('Function Retrieve( const MsgNum : Integer; AMsg : TIdMessage) : Boolean');
    RegisterMethod('Function RetrieveHeader( const MsgNum : Integer; AMsg : TIdMessage) : Boolean');
    RegisterMethod('Function RetrieveMsgSize( const MsgNum : Integer) : Integer');
    RegisterMethod('Function RetrieveMailBoxSize : integer');
    RegisterMethod('Function RetrieveRaw( const MsgNum : Integer; const Dest : TStrings) : boolean');
    RegisterMethod('Function UIDL( const ADest : TStrings; const AMsgNum : Integer) : Boolean');
    RegisterProperty('APOP', 'Boolean', iptrw);
    RegisterProperty('Host', 'String', iptrw);
    RegisterProperty('UserName', 'String', iptrw);
    RegisterProperty('Password', 'String', iptrw);
    RegisterProperty('Port', 'Integer', iptrw);
    RegisterProperty('Connected', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdPOP3(CL: TPSPascalCompiler);
begin
 //CL.AddConstantN('DEF_APOP','Boolean')BoolToStr( False);
  SIRegister_TIdPOP3(CL);
 CL.AddConstantN('wsOk','LongInt').SetInt( 1);
 CL.AddConstantN('wsErr','LongInt').SetInt( 2);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdPOP3APOP_W(Self: TIdPOP3; const T: Boolean);
begin Self.APOP := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdPOP3APOP_R(Self: TIdPOP3; var T: Boolean);
begin T := Self.APOP; end;

procedure TIdPOP3Connected_R(Self: TIdPOP3; var T: Boolean);
begin T:= Self.Connected; end;

procedure TIdPOP3Connected_W(Self: TIdPOP3; const T: Boolean);
begin //Self.Connected:= T;
 end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdPOP3(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdPOP3) do
  begin
    RegisterMethod(@TIdPOP3.CheckMessages, 'CheckMessages');
    RegisterMethod(@TIdPOP3.Connect, 'Connect');
    RegisterConstructor(@TIdPOP3.Create, 'Create');
    RegisterMethod(@TIdPop3.Destroy, 'Free');
    RegisterMethod(@TIdPOP3.Delete, 'Delete');
    RegisterMethod(@TIdPOP3.Disconnect, 'Disconnect');
    RegisterMethod(@TIdPOP3.KeepAlive, 'KeepAlive');
    RegisterMethod(@TIdPOP3.Reset, 'Reset');
    RegisterMethod(@TIdPOP3.Retrieve, 'Retrieve');
    RegisterMethod(@TIdPOP3.RetrieveHeader, 'RetrieveHeader');
    RegisterMethod(@TIdPOP3.RetrieveMsgSize, 'RetrieveMsgSize');
    RegisterMethod(@TIdPOP3.RetrieveMailBoxSize, 'RetrieveMailBoxSize');
    RegisterMethod(@TIdPOP3.RetrieveRaw, 'RetrieveRaw');
    RegisterMethod(@TIdPOP3.UIDL, 'UIDL');
    RegisterPropertyHelper(@TIdPOP3APOP_R,@TIdPOP3APOP_W,'APOP');
    RegisterPropertyHelper(@TIdPOP3Connected_R,@TIdPOP3Connected_W,'Connected');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdPOP3(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdPOP3(CL);
end;

 
{ TPSImport_IdPOP3 }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdPOP3.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdPOP3(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdPOP3.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdPOP3(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
