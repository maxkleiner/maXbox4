unit uPSI_DSUtil;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_DSUtil = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMediaBuffer(CL: TPSPascalCompiler);
procedure SIRegister_IDxDiagContainer(CL: TPSPascalCompiler);
procedure SIRegister_IDxDiagProvider(CL: TPSPascalCompiler);
procedure SIRegister_TBaseFilter(CL: TPSPascalCompiler);
procedure SIRegister_TPersistentMemory(CL: TPSPascalCompiler);
procedure SIRegister_TEnumMediaType(CL: TPSPascalCompiler);
procedure SIRegister_TMediaType(CL: TPSPascalCompiler);
procedure SIRegister_TPinList(CL: TPSPascalCompiler);
procedure SIRegister_TFilterList(CL: TPSPascalCompiler);
procedure SIRegister_TSysDevEnum(CL: TPSPascalCompiler);
procedure SIRegister_EDSPackException(CL: TPSPascalCompiler);
procedure SIRegister_EDirectShowException(CL: TPSPascalCompiler);
procedure SIRegister_IDivXFilterInterface(CL: TPSPascalCompiler);
procedure SIRegister_DSUtil(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TMediaBuffer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBaseFilter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPersistentMemory(CL: TPSRuntimeClassImporter);
procedure RIRegister_TEnumMediaType(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMediaType(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPinList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFilterList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSysDevEnum(CL: TPSRuntimeClassImporter);
procedure RIRegister_EDSPackException(CL: TPSRuntimeClassImporter);
procedure RIRegister_EDirectShowException(CL: TPSRuntimeClassImporter);
procedure RIRegister_DSUtil_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Variants
  ,Windows
  ,Controls
  ,ActiveX
  ,MMSystem
  //,DirectShow9
  //,WMF9
  //,DirectDraw
  ,DSUtil
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_DSUtil]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMediaBuffer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TMediaBuffer') do
  with CL.AddClassN(CL.FindClass('TObject'),'TMediaBuffer') do
  begin
    RegisterMethod('Constructor Create( MaxLen : DWORD)');
    RegisterMethod('Function CreateBuffer( MaxLen : DWORD; const IID : TGUID; out Obj) : HRESULT');
    RegisterMethod('Function QueryInterface( const IID : TGUID; out Obj) : HResult');
    RegisterMethod('Function _AddRef : Integer');
    RegisterMethod('Function _Release : Integer');
    RegisterMethod('Function SetLength( cbLength : DWORD) : HResult');
    RegisterMethod('Function GetMaxLength( out pcbMaxLength : DWORD) : HResult');
    RegisterMethod('Function GetBufferAndLength( out ppBuffer : PByte; out pcbLength : DWORD) : HResult');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IDxDiagContainer(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUnknown', 'IDxDiagContainer') do
  with CL.AddInterface(CL.FindInterface('IUnknown'),IDxDiagContainer, 'IDxDiagContainer') do
  begin
    RegisterMethod('Function GetNumberOfChildContainers( out pdwCount : dword) : HResult', CdStdCall);
    RegisterMethod('Function EnumChildContainerNames( dwIndex : dword; pwszContainer : PWideChar; cchContainer : DWord) : HResult', CdStdCall);
    RegisterMethod('Function GetChildContainer( pwszContainer : PWideChar; out ppInstance : IDxDiagContainer) : Hresult', CdStdCall);
    RegisterMethod('Function GetNumberOfProps( out pdwCount : dword) : HResult', CdStdCall);
    RegisterMethod('Function EnumPropNames( dwIndex : dword; pwszPropName : PWideChar; cchPropName : dword) : HResult', CdStdCall);
    RegisterMethod('Function GetProp( pwszPropName : PWideChar; out pvarProp : OleVariant) : HResult', CdStdCall);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IDxDiagProvider(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUnknown', 'IDxDiagProvider') do
  with CL.AddInterface(CL.FindInterface('IUnknown'),IDxDiagProvider, 'IDxDiagProvider') do
  begin
    RegisterMethod('Function Initialize( pParams : PDXDIAG_INIT_PARAMS) : HResult', CdStdCall);
    RegisterMethod('Function GetRootContainer( out ppInstance : IDxDiagContainer) : HResult', CdStdCall);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBaseFilter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistentMemory', 'TBaseFilter') do
  with CL.AddClassN(CL.FindClass('TPersistentMemory'),'TBaseFilter') do
  begin
    RegisterProperty('Moniker', 'IMoniker', iptrw);
    RegisterMethod('Function PropertyBag( Name : WideString) : OleVariant');
    RegisterMethod('Function CreateFilter : IBaseFilter');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPersistentMemory(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TPersistentMemory') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TPersistentMemory') do
  begin
    RegisterProperty('DataLength', 'Cardinal', iptrw);
    RegisterProperty('Data', 'Pointer', iptr);
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TEnumMediaType(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TEnumMediaType') do
  with CL.AddClassN(CL.FindClass('TObject'),'TEnumMediaType') do
  begin
    RegisterMethod('Constructor Create;');
    RegisterMethod('Constructor Create1( Pin : IPin);');
    RegisterMethod('Constructor Create2( EnumMT : IEnumMediaTypes);');
    RegisterMethod('Constructor Create3( FileName : TFileName);');
    RegisterMethod('Procedure Assign( Pin : IPin);');
    RegisterMethod('Procedure Assign1( EnumMT : IEnumMediaTypes);');
    RegisterMethod('Procedure Assign2( FileName : TFileName);');
    RegisterMethod('Function Add( Item : TMediaType) : Integer');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterProperty('Items', 'TMediaType Integer', iptrw);
    RegisterProperty('MediaDescription', 'string Integer', iptr);
    RegisterProperty('Count', 'integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMediaType(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TMediaType') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TMediaType') do
  begin
    RegisterProperty('AMMediaType', 'PAMMediaType', iptrw);
    RegisterMethod('Constructor Create4;');
    RegisterMethod('Constructor Create5( majortype : TGUID);');
    RegisterMethod('Constructor Create6( mediatype : PAMMediaType);');
    RegisterMethod('Constructor Create7( MTClass : TMediaType);');
    RegisterMethod('Procedure Read( mediatype : PAMMediaType)');
    RegisterMethod('Function Equal( MTClass : TMediaType) : boolean;');
    RegisterMethod('Function NotEqual( MTClass : TMediaType) : boolean;');
    RegisterMethod('Function IsValid : boolean');
    RegisterMethod('Function IsFixedSize : boolean');
    RegisterMethod('Function IsTemporalCompressed : boolean');
    RegisterMethod('Function GetSampleSize : ULONG');
    RegisterMethod('Procedure SetSampleSize( SZ : ULONG)');
    RegisterMethod('Procedure SetVariableSize');
    RegisterMethod('Procedure SetTemporalCompression( bCompressed : boolean)');
    RegisterMethod('Function Format : pointer');
    RegisterMethod('Function FormatLength : ULONG');
    RegisterMethod('Function SetFormat( pFormat : pointer; length : ULONG) : boolean');
    RegisterMethod('Procedure ResetFormatBuffer');
    RegisterMethod('Function AllocFormatBuffer( length : ULONG) : pointer');
    RegisterMethod('Function ReallocFormatBuffer( length : ULONG) : pointer');
    RegisterMethod('Procedure InitMediaType');
    RegisterMethod('Function MatchesPartial( ppartial : TMediaType) : boolean');
    RegisterMethod('Function IsPartiallySpecified : boolean');
    RegisterProperty('MajorType', 'TGUID', iptrw);
    RegisterProperty('SubType', 'TGUID', iptrw);
    RegisterProperty('FormatType', 'TGUID', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPinList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInterfaceList', 'TPinList') do
  with CL.AddClassN(CL.FindClass('TInterfaceList'),'TPinList') do
  begin
    RegisterMethod('Constructor Create3( BaseFilter : IBaseFilter);');
    RegisterMethod('Procedure Update');
    RegisterMethod('Procedure Assign( BaseFilter : IBaseFilter)');
    RegisterMethod('Function First : IPin');
    RegisterMethod('Function IndexOf( Item : IPin) : Integer');
    RegisterMethod('Function Add( Item : IPin) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; Item : IPin)');
    RegisterMethod('Function Last : IPin');
    RegisterMethod('Function Remove( Item : IPin) : Integer');
    RegisterProperty('Items', 'IPin Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterProperty('PinInfo', 'TPinInfo Integer', iptr);
    RegisterProperty('Connected', 'boolean Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFilterList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInterfaceList', 'TFilterList') do
  with CL.AddClassN(CL.FindClass('TInterfaceList'),'TFilterList') do
  begin
    RegisterMethod('Constructor Create2( FilterGraph : IFilterGraph);');
    RegisterMethod('Procedure Update');
    RegisterMethod('Procedure Assign( FilterGraph : IFilterGraph)');
    RegisterMethod('Function First : IBaseFilter');
    RegisterMethod('Function IndexOf( Item : IBaseFilter) : Integer');
    RegisterMethod('Function Add( Item : IBaseFilter) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; Item : IBaseFilter)');
    RegisterMethod('Function Last : IBaseFilter');
    RegisterMethod('Function Remove( Item : IBaseFilter) : Integer');
    RegisterProperty('Items', 'IBaseFilter Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterProperty('FilterInfo', 'TFilterInfo Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSysDevEnum(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TSysDevEnum') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TSysDevEnum') do
  begin
    RegisterMethod('Procedure SelectGUIDCategory( GUID : TGUID)');
    RegisterMethod('Procedure SelectIndexCategory( index : integer)');
    RegisterProperty('CountCategories', 'integer', iptr);
    RegisterProperty('CountFilters', 'integer', iptr);
    RegisterProperty('Categories', 'TFilCatNode integer', iptr);
    RegisterProperty('Filters', 'TFilCatNode integer', iptr);
    RegisterMethod('Function FilterIndexOfFriendlyName( const FriendlyName : string) : Integer');
    RegisterMethod('Function GetBaseFilter( index : integer) : IBaseFilter;');
    RegisterMethod('Function GetBaseFilter1( GUID : TGUID) : IBaseFilter;');
    RegisterMethod('Function GetMoniker( index : integer) : IMoniker');
    RegisterMethod('Constructor Create;');
    RegisterMethod('Constructor Create1( guid : TGUID);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EDSPackException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'EDSPackException') do
  with CL.AddClassN(CL.FindClass('Exception'),'EDSPackException') do
  begin
    RegisterProperty('ErrorCode', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EDirectShowException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'EDirectShowException') do
  with CL.AddClassN(CL.FindClass('Exception'),'EDirectShowException') do
  begin
    RegisterProperty('ErrorCode', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IDivXFilterInterface(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUnknown', 'IDivXFilterInterface') do
  with CL.AddInterface(CL.FindInterface('IUnknown'),IDivXFilterInterface, 'IDivXFilterInterface') do
  begin
    RegisterMethod('Function get_PPLevel( out PPLevel : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function put_PPLevel( PPLevel : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function put_DefaultPPLevel : HRESULT', CdStdCall);
    RegisterMethod('Function put_MaxDelayAllowed( maxdelayallowed : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function put_Brightness( brightness : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function put_Contrast( contrast : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function put_Saturation( saturation : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function get_MaxDelayAllowed( out maxdelayallowed : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function get_Brightness( out brightness : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function get_Contrast( out contrast : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function get_Saturation( out saturation : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function put_AspectRatio( x, y : integer) : HRESULT', CdStdCall);
    RegisterMethod('Function get_AspectRatio( out x, y : integer) : HRESULT', CdStdCall);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_DSUtil(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('IID_IPropertyBag','TGUID').SetString( '{55272A00-42CB-11CE-8135-00AA004BB851}');
 CL.AddConstantN('IID_ISpecifyPropertyPages','TGUID').SetString( '{B196B28B-BAB4-101A-B69C-00AA00341D07}');
 CL.AddConstantN('IID_IPersistStream','TGUID').SetString( '{00000109-0000-0000-C000-000000000046}');
 CL.AddConstantN('IID_IMoniker','TGUID').SetString( '{0000000F-0000-0000-C000-000000000046}');
 CL.AddConstantN('MEDIASUBTYPE_MP42','TGUID').SetString( '{3234504D-0000-0010-8000-00AA00389B71}');
 CL.AddConstantN('MEDIASUBTYPE_DIVX','TGUID').SetString( '{58564944-0000-0010-8000-00AA00389B71}');
 CL.AddConstantN('MEDIASUBTYPE_VOXWARE','TGUID').SetString( '{00000075-0000-0010-8000-00AA00389B71}');
 CL.AddConstantN('MiliSecPerDay','Cardinal').SetString( 86400000);
 CL.AddConstantN('MAX_TIME','Int64').SetInt64( $7FFFFFFFFFFFFFFF);
 CL.AddConstantN('CLSID_DIVX','TGUID').SetString( '{78766964-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DivX_U','TGUID').SetString( '{58564944-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DivX_','TGUID').SetString( '{31787664-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DivX__U','TGUID').SetString( '{31585644-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_dx50','TGUID').SetString( '{30357864-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DX50_','TGUID').SetString( '{30355844-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_div6','TGUID').SetString( '{36766964-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DIV6_','TGUID').SetString( '{36564944-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_div5','TGUID').SetString( '{35766964-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DIV5_','TGUID').SetString( '{35564944-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_div4','TGUID').SetString( '{34766964-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DIV4_','TGUID').SetString( '{34564944-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_div3','TGUID').SetString( '{33766964-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DIV3_','TGUID').SetString( '{33564944-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('CLSID_DIVXCodec','TGUID').SetString( '{78766964-0000-0010-8000-00aa00389b71}');
 CL.AddConstantN('IID_IIDivXFilterInterface','TGUID').SetString( '{D132EE97-3E38-4030-8B17-59163B30A1F5}');
 CL.AddConstantN('CLSID_DivXPropertiesPage','TGUID').SetString( '{310e42a0-f913-11d4-887c-006008dc5c26}');
  CL.AddTypeS('PPointer', '^Pointer // will not work');
  SIRegister_IDivXFilterInterface(CL);
  CL.AddTypeS('TVORBISFORMAT', 'record nChannels : WORD; nSamplesPerSec : Longw'
   +'ord; nMinBitsPerSec : Longword; nAvgBitsPerSec : Longword; nMaxBitsPerSec '
   +': Longword; fQuality : Double; end');
 CL.AddConstantN('CLSID_OggSplitter','TGUID').SetString( '{f07e245f-5a1f-4d1e-8bff-dc31d84a55ab}');
 CL.AddConstantN('CLSID_OggSplitPropPage','TGUID').SetString( '{078C3DAA-9E58-4d42-9E1C-7C8EE79539C5}');
 CL.AddConstantN('CLSID_OggMux','TGUID').SetString( '{8cae96b7-85b1-4605-b23c-17ff5262b296}');
 CL.AddConstantN('CLSID_OggMuxPropPage','TGUID').SetString( '{AB97AFC3-D08E-4e2d-98E0-AEE6D4634BA4}');
 CL.AddConstantN('CLSID_VorbisEnc','TGUID').SetString( '{889EF574-0656-4B52-9091-072E52BB1B80}');
 CL.AddConstantN('CLSID_VorbisEncPropPage','TGUID').SetString( '{c5379125-fd36-4277-a7cd-fab469ef3a2f}');
 CL.AddConstantN('CLSID_VorbisDec','TGUID').SetString( '{02391f44-2767-4e6a-a484-9b47b506f3a4}');
 CL.AddConstantN('CLSID_OggDSAboutPage','TGUID').SetString( '{77983549-ffda-4a88-b48f-b924e8d1f01c}');
 CL.AddConstantN('MEDIASUBTYPE_Ogg','TGUID').SetString( '{D2855FA9-61A7-4db0-B979-71F297C17A04}');
 CL.AddConstantN('MEDIASUBTYPE_Vorbis','TGUID').SetString( '{cddca2d5-6d75-4f98-840e-737bedd5c63b}');
 CL.AddConstantN('FORMAT_VorbisFormat','TGUID').SetString( '{6bddfa7e-9f22-46a9-ab5e-884eff294d9f}');
  CL.AddTypeS('TWMPofiles8', '( wmp_V80_255VideoPDA, wmp_V80_150VideoPDA, wmp_V'
   +'80_28856VideoMBR, wmp_V80_100768VideoMBR, wmp_V80_288100VideoMBR, wmp_V80_'
   +'288Video, wmp_V80_56Video, wmp_V80_100Video, wmp_V80_256Video, wmp_V80_384'
   +'Video, wmp_V80_768Video, wmp_V80_700NTSCVideo, wmp_V80_1400NTSCVideo, wmp_'
   +'V80_384PALVideo, wmp_V80_700PALVideo, wmp_V80_288MonoAudio, wmp_V80_288Ste'
   +'reoAudio, wmp_V80_32StereoAudio, wmp_V80_48StereoAudio, wmp_V80_64StereoAu'
   +'dio, wmp_V80_96StereoAudio, wmp_V80_128StereoAudio, wmp_V80_288VideoOnly, '
   +'wmp_V80_56VideoOnly, wmp_V80_FAIRVBRVideo, wmp_V80_HIGHVBRVideo, wmp_V80_B'
   +'ESTVBRVideo )');
 CL.AddDelphiFunction('Function ProfileFromGUID( const GUID : TGUID) : TWMPofiles8');
 CL.AddDelphiFunction('Procedure FreeAndNil( var Obj)');
 CL.AddDelphiFunction('Function AddGraphToRot( Graph : IFilterGraph; out ID : integer) : HRESULT');
 CL.AddDelphiFunction('Function RemoveGraphFromRot( ID : integer) : HRESULT');
 CL.AddDelphiFunction('Function IntToTimeCode( x : longint) : TDVDTimeCode');
 CL.AddDelphiFunction('Function GetEventCodeDef( code : longint) : string');
 CL.AddDelphiFunction('Procedure DeleteMediaType( pmt : PAMMediaType)');
 CL.AddDelphiFunction('Function CreateMediaType( pSrc : PAMMediaType) : PAMMediaType');
 CL.AddDelphiFunction('Procedure CopyMediaType( pmtTarget : PAMMediaType; pmtSource : PAMMediaType)');
 CL.AddDelphiFunction('Procedure FreeMediaType( mt : PAMMediaType)');
 CL.AddDelphiFunction('Function CreateAudioMediaType( pwfx : PWaveFormatEx; pmt : PAMMediaType; bSetFormat : boolean) : HRESULT');
 CL.AddDelphiFunction('Function FOURCCMap( Fourcc : Cardinal) : TGUID');
 CL.AddDelphiFunction('Function GetFOURCC( Fourcc : Cardinal) : string');
 CL.AddDelphiFunction('Function FCC( str : String) : Cardinal');
 CL.AddDelphiFunction('Function MAKEFOURCC( ch0, ch1, ch2, ch3 : char) : Cardinal');
 CL.AddDelphiFunction('Function GetErrorString( hr : HRESULT) : string');
 CL.AddDelphiFunction('Function GetMediaTypeDescription( MediaType : PAMMediaType) : string');
 CL.AddDelphiFunction('Function GetBitmapSize( Header : PBitmapInfoHeader) : DWORD');
 CL.AddDelphiFunction('Function GetBitmapSubtype( bmiHeader : PBitmapInfoHeader) : TGUID');
 CL.AddDelphiFunction('Function GetTrueColorType( bmiHeader : PBitmapInfoHeader) : TGUID');
 CL.AddDelphiFunction('Function GetDXSDKMediaPath : String');
 CL.AddDelphiFunction('Function CopyScreenToBitmap( Rect : TRect; pData : PByte; pHeader : PBitmapInfo) : HBitmap');
  CL.AddTypeS('TPropertyPage', '( ppDefault, ppVFWCapDisplay, ppVFWCapFormat, p'
   +'pVFWCapSource, ppVFWCompConfig, ppVFWCompAbout )');
 CL.AddDelphiFunction('Function ShowFilterPropertyPage( parent : THandle; Filter : IBaseFilter; PropertyPage : TPropertyPage) : HRESULT');
 CL.AddDelphiFunction('Function HaveFilterPropertyPage( Filter : IBaseFilter; PropertyPage : TPropertyPage) : boolean');
 CL.AddDelphiFunction('Function ShowPinPropertyPage( parent : THandle; Pin : IPin) : HRESULT');
 CL.AddDelphiFunction('Function RefTimeToMiliSec( RefTime : Int64) : Cardinal');
 CL.AddDelphiFunction('Function MiliSecToRefTime( Milisec : int64) : Int64');
 CL.AddDelphiFunction('Function GetBitmapFormatSize( const Header : TBitmapInfoHeader) : Integer');
 CL.AddDelphiFunction('Function GetSourceRectFromMediaType( const MediaType : TAMMediaType) : TRect');
 CL.AddDelphiFunction('Function StretchRect( R, IR : TRect) : TRect');
 CL.AddDelphiFunction('Function CheckDSError( HR : HRESULT) : HRESULT');
 CL.AddDelphiFunction('Function FindRenderer( pGB : IGraphBuilder; const mediatype : PGUID; out ppFilter : IBaseFilter) : HRESULT');
 CL.AddDelphiFunction('Function FindAudioRenderer( pGB : IGraphBuilder; out ppFilter : IBaseFilter) : HRESULT');
 CL.AddDelphiFunction('Function FindVideoRenderer( pGB : IGraphBuilder; out ppFilter : IBaseFilter) : HRESULT');
 CL.AddDelphiFunction('Function CountFilterPins( pFilter : IBaseFilter; out pulInPins : Cardinal; out pulOutPins : Cardinal) : HRESULT');
 CL.AddDelphiFunction('Function CountTotalFilterPins( pFilter : IBaseFilter; out pulPins : Cardinal) : HRESULT');
 CL.AddDelphiFunction('Function GetPin( pFilter : IBaseFilter; dirrequired : TPinDirection; iNum : integer; out ppPin : IPin) : HRESULT');
 CL.AddDelphiFunction('Function GetInPin( pFilter : IBaseFilter; nPin : integer) : IPin');
 CL.AddDelphiFunction('Function GetOutPin( pFilter : IBaseFilter; nPin : integer) : IPin');
 CL.AddDelphiFunction('Function FindOtherSplitterPin( pPinIn : IPin; guid : TGUID; nStream : integer; out ppSplitPin : IPin) : HRESULT');
 CL.AddDelphiFunction('Function SeekNextFrame( pSeeking : IMediaSeeking; FPS : Double; Frame : LongInt) : HRESULT');
 CL.AddDelphiFunction('Procedure ShowFilenameByCLSID( clsid : TGUID; out szFilename : WideString)');
 CL.AddDelphiFunction('Function GetFileDurationString( pMS : IMediaSeeking; out szDuration : WideString) : HRESULT');
 CL.AddDelphiFunction('Function CanFrameStep( pGB : IGraphBuilder) : Boolean');
 CL.AddDelphiFunction('Procedure UtilFreeMediaType( pmt : PAMMediaType)');
 CL.AddDelphiFunction('Procedure UtilDeleteMediaType( pmt : PAMMediaType)');
 CL.AddDelphiFunction('Function SaveGraphFile( pGraph : IGraphBuilder; wszPath : WideString) : HRESULT');
 CL.AddDelphiFunction('Function LoadGraphFile( pGraph : IGraphBuilder; const wszName : WideString) : HRESULT');
 CL.AddDelphiFunction('Function GetDXVersion( var pdwDirectXVersion : DWORD; out strDirectXVersion : String) : HResult');
  SIRegister_EDirectShowException(CL);
  SIRegister_EDSPackException(CL);
  CL.AddTypeS('PFilCatNode', '^TFilCatNode // will not work');
  CL.AddTypeS('TFilCatNode', 'record FriendlyName : Shortstring; CLSID : TGUID;'
   +' end');
  SIRegister_TSysDevEnum(CL);
  SIRegister_TFilterList(CL);
  SIRegister_TPinList(CL);
  SIRegister_TMediaType(CL);
  SIRegister_TEnumMediaType(CL);
  SIRegister_TPersistentMemory(CL);
  SIRegister_TBaseFilter(CL);
 CL.AddConstantN('DXDIAG_DX9_SDK_VERSION','LongInt').SetInt( 111);
 CL.AddConstantN('DXDIAG_E_INSUFFICIENT_BUFFER','LongWord').SetUInt( HResult ( $8007007A ));
 CL.AddConstantN('CLSID_DxDiagProvider','TGUID').SetString( '{A65B8071-3BFE-4213-9A5B-491DA4461CA7}');
 CL.AddConstantN('IID_IDxDiagProvider','TGUID').SetString( '{9C6B4CB0-23F8-49CC-A3ED-45A55000A6D2}');
 CL.AddConstantN('IID_IDxDiagContainer','TGUID').SetString( '{7D0F462F-4064-4862-BC7F-933E5058C10F}');
  CL.AddTypeS('PDXDIAG_INIT_PARAMS', '^TDxDiagInitParams // will not work');
  CL.AddTypeS('_DXDIAG_INIT_PARAMS', 'record dwSize : DWORD; dwDxDiagHeaderVers'
   +'ion : DWORD; bAllowWHQLChecks : Boolean; pReserved : Pointer; end');
  CL.AddTypeS('DXDIAG_INIT_PARAMS', '_DXDIAG_INIT_PARAMS');
  CL.AddTypeS('TDxDiagInitParams', '_DXDIAG_INIT_PARAMS');
  CL.AddInterface(CL.FindInterface('IUNKNOWN'),IDxDiagProvider, 'IDxDiagProvider');
  CL.AddInterface(CL.FindInterface('IUNKNOWN'),IDxDiagContainer, 'IDxDiagContainer');
  SIRegister_IDxDiagProvider(CL);
  SIRegister_IDxDiagContainer(CL);
  SIRegister_TMediaBuffer(CL);
 CL.AddConstantN('RESOLUTION','LongInt').SetInt( DWORD ( 1 ));
 CL.AddConstantN('ADVISE_CACHE','LongInt').SetInt( integer ( 4 ));
 CL.AddConstantN('MILLISECONDS','LongInt').SetInt( LONGLONG ( 1000 ));
 CL.AddConstantN('NANOSECONDS','LongInt').SetInt( LONGLONG ( 1000000000 ));
 CL.AddConstantN('TimeZero','LongInt').SetInt( LONGLONG ( 0 ));
  CL.AddTypeS('DWORDLONG', 'LONGLONG');
  CL.AddTypeS('ULONGLONG', 'DWORDLONG');
 CL.AddDelphiFunction('Function UInt32x32To64( a, b : DWORD) : ULONGLONG');
 CL.AddDelphiFunction('Function Int64x32Div32( a : LONGLONG; b, c, d : LongInt) : LONGLONG');
 CL.AddDelphiFunction('Function Int32x32To64( a, b : integer) : Int64');
 CL.AddDelphiFunction('Function MILLISECONDS_TO_100NS_UNITS( Ms : LONGLONG) : LONGLONG');
 CL.AddDelphiFunction('Function llMulDiv( a, b, c, d : LONGLONG) : LONGLONG');
 CL.AddDelphiFunction('Function AmGetLastErrorToHResult : HRESULT');
 CL.AddDelphiFunction('Function IsEqualObject( pFirst, pSecond : IUnknown) : Boolean');
 CL.AddConstantN('IID_IDirectDrawKernel','TGUID').SetString( '{8D56C120-6A08-11D0-9B06-00A0C903A3B8}');
 CL.AddConstantN('IID_IDirectDrawSurfaceKernel','TGUID').SetString( '{60755DA0-6A40-11D0-9B06-00A0C903A3B8}');
 CL.AddDelphiFunction('Function GetGUIDString( GUID : TGUID) : String');
 CL.AddDelphiFunction('Function GetBasicAudioVolume( Value : integer) : integer');
 CL.AddDelphiFunction('Function SetBasicAudioVolume( Value : integer) : integer');
 CL.AddDelphiFunction('Function GetBasicAudioPan( Value : integer) : integer');
 CL.AddDelphiFunction('Function SetBasicAudioPan( Value : integer) : integer');
 CL.AddDelphiFunction('Function GUIDToString( const GUID : TGUID) : string');
 CL.AddDelphiFunction('Function StringToGUID( const S : string) : TGUID');
 CL.AddDelphiFunction('Function EnsureRange( const AValue, AMin, AMax : Integer) : Integer');
 CL.AddDelphiFunction('Procedure Set8087CW( NewCW : Word)');
 CL.AddDelphiFunction('Function Get8087CW : Word');
 CL.AddDelphiFunction('Function MPEGHeaderBitsGetSectionLength( Header : PMPEGHeaderBits) : Word');
 CL.AddDelphiFunction('Function MPEGHeaderBitsGetReserved( Header : PMPEGHeaderBits) : WORD');
 CL.AddDelphiFunction('Function MPEGHeaderBitsGetPrivateIndicator( Header : PMPEGHeaderBits) : WORD');
 CL.AddDelphiFunction('Function MPEGHeaderBitsGetSectionSyntaxIndicator( Header : PMPEGHeaderBits) : WORD');
 CL.AddDelphiFunction('Procedure MPEGHeaderBitsSetSectionLength( Header : PMPEGHeaderBits; AValue : WORD)');
 CL.AddDelphiFunction('Procedure MPEGHeaderBitsSetReserved( Header : PMPEGHeaderBits; AValue : WORD)');
 CL.AddDelphiFunction('Procedure MPEGHeaderBitsSetPrivateIndicator( Header : PMPEGHeaderBits; AValue : WORD)');
 CL.AddDelphiFunction('Procedure MPEGHeaderBitsSetSectionSyntaxIndicator( Header : PMPEGHeaderBits; AValue : WORD)');
 CL.AddDelphiFunction('Function PIDBitsGetReserved( PIDBits : PPIDBits) : WORD');
 CL.AddDelphiFunction('Function PIDBitsGetProgramId( PIDBits : PPIDBits) : WORD');
 CL.AddDelphiFunction('Procedure PIDBitsSetReserved( PIDBits : PPIDBits; AValue : WORD)');
 CL.AddDelphiFunction('Procedure PIDBitsSetProgramId( PIDBits : PPIDBits; AValue : WORD)');
 CL.AddDelphiFunction('Function MPEGHeaderVersionBitsGetCurrentNextIndicator( MPEGHeaderVersionBits : PMPEGHeaderVersionBits) : Byte');
 CL.AddDelphiFunction('Function MPEGHeaderVersionBitsGetVersionNumber( MPEGHeaderVersionBits : PMPEGHeaderVersionBits) : Byte');
 CL.AddDelphiFunction('Function MPEGHeaderVersionBitsGetReserved( MPEGHeaderVersionBits : PMPEGHeaderVersionBits) : Byte');
 CL.AddDelphiFunction('Procedure MPEGHeaderVersionBitsSetCurrentNextIndicator( MPEGHeaderVersionBits : PMPEGHeaderVersionBits; AValue : Byte)');
 CL.AddDelphiFunction('Procedure MPEGHeaderVersionBitsSetVersionNumber( MPEGHeaderVersionBits : PMPEGHeaderVersionBits; AValue : Byte)');
 CL.AddDelphiFunction('Procedure MPEGHeaderVersionBitsSetReserved( MPEGHeaderVersionBits : PMPEGHeaderVersionBits; AValue : Byte)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TBaseFilterMoniker_W(Self: TBaseFilter; const T: IMoniker);
begin Self.Moniker := T; end;

(*----------------------------------------------------------------------------*)
procedure TBaseFilterMoniker_R(Self: TBaseFilter; var T: IMoniker);
begin T := Self.Moniker; end;

(*----------------------------------------------------------------------------*)
procedure TPersistentMemoryData_R(Self: TPersistentMemory; var T: Pointer);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
procedure TPersistentMemoryDataLength_W(Self: TPersistentMemory; const T: Cardinal);
begin Self.DataLength := T; end;

(*----------------------------------------------------------------------------*)
procedure TPersistentMemoryDataLength_R(Self: TPersistentMemory; var T: Cardinal);
begin T := Self.DataLength; end;

(*----------------------------------------------------------------------------*)
procedure TEnumMediaTypeCount_R(Self: TEnumMediaType; var T: integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TEnumMediaTypeMediaDescription_R(Self: TEnumMediaType; var T: string; const t1: Integer);
begin T := Self.MediaDescription[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TEnumMediaTypeItems_W(Self: TEnumMediaType; const T: TMediaType; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TEnumMediaTypeItems_R(Self: TEnumMediaType; var T: TMediaType; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
Procedure TEnumMediaTypeAssign2_P(Self: TEnumMediaType;  FileName : TFileName);
Begin Self.Assign(FileName); END;

(*----------------------------------------------------------------------------*)
Procedure TEnumMediaTypeAssign1_P(Self: TEnumMediaType;  EnumMT : IEnumMediaTypes);
Begin Self.Assign(EnumMT); END;

(*----------------------------------------------------------------------------*)
Procedure TEnumMediaTypeAssign_P(Self: TEnumMediaType;  Pin : IPin);
Begin Self.Assign(Pin); END;

(*----------------------------------------------------------------------------*)
Function TEnumMediaTypeCreate3_P(Self: TClass; CreateNewInstance: Boolean;  FileName : TFileName):TObject;
Begin Result := TEnumMediaType.Create(FileName); END;

(*----------------------------------------------------------------------------*)
Function TEnumMediaTypeCreate2_P(Self: TClass; CreateNewInstance: Boolean;  EnumMT : IEnumMediaTypes):TObject;
Begin Result := TEnumMediaType.Create(EnumMT); END;

(*----------------------------------------------------------------------------*)
Function TEnumMediaTypeCreate1_P(Self: TClass; CreateNewInstance: Boolean;  Pin : IPin):TObject;
Begin Result := TEnumMediaType.Create(Pin); END;

(*----------------------------------------------------------------------------*)
Function TEnumMediaTypeCreate_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TEnumMediaType.Create; END;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeFormatType_W(Self: TMediaType; const T: TGUID);
begin Self.FormatType := T; end;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeFormatType_R(Self: TMediaType; var T: TGUID);
begin T := Self.FormatType; end;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeSubType_W(Self: TMediaType; const T: TGUID);
begin Self.SubType := T; end;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeSubType_R(Self: TMediaType; var T: TGUID);
begin T := Self.SubType; end;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeMajorType_W(Self: TMediaType; const T: TGUID);
begin Self.MajorType := T; end;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeMajorType_R(Self: TMediaType; var T: TGUID);
begin T := Self.MajorType; end;

(*----------------------------------------------------------------------------*)
Function TMediaTypeNotEqual_P(Self: TMediaType;  MTClass : TMediaType) : boolean;
Begin Result := Self.NotEqual(MTClass); END;

(*----------------------------------------------------------------------------*)
Function TMediaTypeEqual_P(Self: TMediaType;  MTClass : TMediaType) : boolean;
Begin Result := Self.Equal(MTClass); END;

(*----------------------------------------------------------------------------*)
Function TMediaTypeCreate7_P(Self: TClass; CreateNewInstance: Boolean;  MTClass : TMediaType):TObject;
Begin Result := TMediaType.Create(MTClass); END;

(*----------------------------------------------------------------------------*)
Function TMediaTypeCreate6_P(Self: TClass; CreateNewInstance: Boolean;  mediatype : PAMMediaType):TObject;
Begin Result := TMediaType.Create(mediatype); END;

(*----------------------------------------------------------------------------*)
Function TMediaTypeCreate5_P(Self: TClass; CreateNewInstance: Boolean;  majortype : TGUID):TObject;
Begin Result := TMediaType.Create(majortype); END;

(*----------------------------------------------------------------------------*)
Function TMediaTypeCreate4_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TMediaType.Create; END;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeAMMediaType_W(Self: TMediaType; const T: PAMMediaType);
Begin Self.AMMediaType := T; end;

(*----------------------------------------------------------------------------*)
procedure TMediaTypeAMMediaType_R(Self: TMediaType; var T: PAMMediaType);
Begin T := Self.AMMediaType; end;

(*----------------------------------------------------------------------------*)
procedure TPinListConnected_R(Self: TPinList; var T: boolean; const t1: Integer);
begin T := Self.Connected[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TPinListPinInfo_R(Self: TPinList; var T: TPinInfo; const t1: Integer);
begin T := Self.PinInfo[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TPinListItems_W(Self: TPinList; const T: IPin; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TPinListItems_R(Self: TPinList; var T: IPin; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
Function TPinListCreate3_P(Self: TClass; CreateNewInstance: Boolean;  BaseFilter : IBaseFilter):TObject;
Begin Result := TPinList.Create(BaseFilter); END;

(*----------------------------------------------------------------------------*)
procedure TFilterListFilterInfo_R(Self: TFilterList; var T: TFilterInfo; const t1: Integer);
begin T := Self.FilterInfo[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TFilterListItems_W(Self: TFilterList; const T: IBaseFilter; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TFilterListItems_R(Self: TFilterList; var T: IBaseFilter; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
Function TFilterListCreate2_P(Self: TClass; CreateNewInstance: Boolean;  FilterGraph : IFilterGraph):TObject;
Begin Result := TFilterList.Create(FilterGraph); END;

(*----------------------------------------------------------------------------*)
Function TSysDevEnumCreate1_P(Self: TClass; CreateNewInstance: Boolean;  guid : TGUID):TObject;
Begin Result := TSysDevEnum.Create(guid); END;

(*----------------------------------------------------------------------------*)
Function TSysDevEnumCreate_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TSysDevEnum.Create; END;

(*----------------------------------------------------------------------------*)
Function TSysDevEnumGetBaseFilter1_P(Self: TSysDevEnum;  GUID : TGUID) : IBaseFilter;
Begin Result := Self.GetBaseFilter(GUID); END;

(*----------------------------------------------------------------------------*)
Function TSysDevEnumGetBaseFilter_P(Self: TSysDevEnum;  index : integer) : IBaseFilter;
Begin Result := Self.GetBaseFilter(index); END;

(*----------------------------------------------------------------------------*)
procedure TSysDevEnumFilters_R(Self: TSysDevEnum; var T: TFilCatNode; const t1: integer);
begin T := Self.Filters[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSysDevEnumCategories_R(Self: TSysDevEnum; var T: TFilCatNode; const t1: integer);
begin T := Self.Categories[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSysDevEnumCountFilters_R(Self: TSysDevEnum; var T: integer);
begin T := Self.CountFilters; end;

(*----------------------------------------------------------------------------*)
procedure TSysDevEnumCountCategories_R(Self: TSysDevEnum; var T: integer);
begin T := Self.CountCategories; end;

(*----------------------------------------------------------------------------*)
procedure EDSPackExceptionErrorCode_W(Self: EDSPackException; const T: Integer);
Begin Self.ErrorCode := T; end;

(*----------------------------------------------------------------------------*)
procedure EDSPackExceptionErrorCode_R(Self: EDSPackException; var T: Integer);
Begin T := Self.ErrorCode; end;

(*----------------------------------------------------------------------------*)
procedure EDirectShowExceptionErrorCode_W(Self: EDirectShowException; const T: Integer);
Begin Self.ErrorCode := T; end;

(*----------------------------------------------------------------------------*)
procedure EDirectShowExceptionErrorCode_R(Self: EDirectShowException; var T: Integer);
Begin T := Self.ErrorCode; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMediaBuffer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMediaBuffer) do
  begin
    RegisterConstructor(@TMediaBuffer.Create, 'Create');
    RegisterMethod(@TMediaBuffer.CreateBuffer, 'CreateBuffer');
    RegisterMethod(@TMediaBuffer.QueryInterface, 'QueryInterface');
    RegisterMethod(@TMediaBuffer._AddRef, '_AddRef');
    RegisterMethod(@TMediaBuffer._Release, '_Release');
    RegisterMethod(@TMediaBuffer.SetLength, 'SetLength');
    RegisterMethod(@TMediaBuffer.GetMaxLength, 'GetMaxLength');
    RegisterMethod(@TMediaBuffer.GetBufferAndLength, 'GetBufferAndLength');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBaseFilter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBaseFilter) do
  begin
    RegisterPropertyHelper(@TBaseFilterMoniker_R,@TBaseFilterMoniker_W,'Moniker');
    RegisterMethod(@TBaseFilter.PropertyBag, 'PropertyBag');
    RegisterMethod(@TBaseFilter.CreateFilter, 'CreateFilter');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPersistentMemory(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPersistentMemory) do begin
    RegisterPropertyHelper(@TPersistentMemoryDataLength_R,@TPersistentMemoryDataLength_W,'DataLength');
    RegisterPropertyHelper(@TPersistentMemoryData_R,nil,'Data');
    RegisterConstructor(@TPersistentMemory.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEnumMediaType(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEnumMediaType) do
  begin
    RegisterConstructor(@TEnumMediaTypeCreate_P, 'Create');
    RegisterConstructor(@TEnumMediaTypeCreate1_P, 'Create1');
    RegisterConstructor(@TEnumMediaTypeCreate2_P, 'Create2');
    RegisterConstructor(@TEnumMediaTypeCreate3_P, 'Create3');
    RegisterMethod(@TEnumMediaTypeAssign_P, 'Assign');
    RegisterMethod(@TEnumMediaTypeAssign1_P, 'Assign1');
    RegisterMethod(@TEnumMediaTypeAssign2_P, 'Assign2');
    RegisterMethod(@TEnumMediaType.Add, 'Add');
    RegisterMethod(@TEnumMediaType.Clear, 'Clear');
    RegisterMethod(@TEnumMediaType.Delete, 'Delete');
    RegisterPropertyHelper(@TEnumMediaTypeItems_R,@TEnumMediaTypeItems_W,'Items');
    RegisterPropertyHelper(@TEnumMediaTypeMediaDescription_R,nil,'MediaDescription');
    RegisterPropertyHelper(@TEnumMediaTypeCount_R,nil,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMediaType(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMediaType) do
  begin
    RegisterPropertyHelper(@TMediaTypeAMMediaType_R,@TMediaTypeAMMediaType_W,'AMMediaType');
    RegisterConstructor(@TMediaTypeCreate4_P, 'Create4');
    RegisterConstructor(@TMediaTypeCreate5_P, 'Create5');
    RegisterConstructor(@TMediaTypeCreate6_P, 'Create6');
    RegisterConstructor(@TMediaTypeCreate7_P, 'Create7');
    RegisterMethod(@TMediaType.Read, 'Read');
    RegisterMethod(@TMediaTypeEqual_P, 'Equal');
    RegisterMethod(@TMediaTypeNotEqual_P, 'NotEqual');
    RegisterMethod(@TMediaType.IsValid, 'IsValid');
    RegisterMethod(@TMediaType.IsFixedSize, 'IsFixedSize');
    RegisterMethod(@TMediaType.IsTemporalCompressed, 'IsTemporalCompressed');
    RegisterMethod(@TMediaType.GetSampleSize, 'GetSampleSize');
    RegisterMethod(@TMediaType.SetSampleSize, 'SetSampleSize');
    RegisterMethod(@TMediaType.SetVariableSize, 'SetVariableSize');
    RegisterMethod(@TMediaType.SetTemporalCompression, 'SetTemporalCompression');
    RegisterMethod(@TMediaType.Format, 'Format');
    RegisterMethod(@TMediaType.FormatLength, 'FormatLength');
    RegisterMethod(@TMediaType.SetFormat, 'SetFormat');
    RegisterMethod(@TMediaType.ResetFormatBuffer, 'ResetFormatBuffer');
    RegisterMethod(@TMediaType.AllocFormatBuffer, 'AllocFormatBuffer');
    RegisterMethod(@TMediaType.ReallocFormatBuffer, 'ReallocFormatBuffer');
    RegisterMethod(@TMediaType.InitMediaType, 'InitMediaType');
    RegisterMethod(@TMediaType.MatchesPartial, 'MatchesPartial');
    RegisterMethod(@TMediaType.IsPartiallySpecified, 'IsPartiallySpecified');
    RegisterPropertyHelper(@TMediaTypeMajorType_R,@TMediaTypeMajorType_W,'MajorType');
    RegisterPropertyHelper(@TMediaTypeSubType_R,@TMediaTypeSubType_W,'SubType');
    RegisterPropertyHelper(@TMediaTypeFormatType_R,@TMediaTypeFormatType_W,'FormatType');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPinList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPinList) do
  begin
    RegisterConstructor(@TPinListCreate3_P, 'Create3');
    RegisterMethod(@TPinList.Update, 'Update');
    RegisterMethod(@TPinList.Assign, 'Assign');
    RegisterMethod(@TPinList.First, 'First');
    RegisterMethod(@TPinList.IndexOf, 'IndexOf');
    RegisterMethod(@TPinList.Add, 'Add');
    RegisterMethod(@TPinList.Insert, 'Insert');
    RegisterMethod(@TPinList.Last, 'Last');
    RegisterMethod(@TPinList.Remove, 'Remove');
    RegisterPropertyHelper(@TPinListItems_R,@TPinListItems_W,'Items');
    RegisterPropertyHelper(@TPinListPinInfo_R,nil,'PinInfo');
    RegisterPropertyHelper(@TPinListConnected_R,nil,'Connected');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFilterList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFilterList) do
  begin
    RegisterConstructor(@TFilterListCreate2_P, 'Create2');
    RegisterMethod(@TFilterList.Update, 'Update');
    RegisterMethod(@TFilterList.Assign, 'Assign');
    RegisterMethod(@TFilterList.First, 'First');
    RegisterMethod(@TFilterList.IndexOf, 'IndexOf');
    RegisterMethod(@TFilterList.Add, 'Add');
    RegisterMethod(@TFilterList.Insert, 'Insert');
    RegisterMethod(@TFilterList.Last, 'Last');
    RegisterMethod(@TFilterList.Remove, 'Remove');
    RegisterPropertyHelper(@TFilterListItems_R,@TFilterListItems_W,'Items');
    RegisterPropertyHelper(@TFilterListFilterInfo_R,nil,'FilterInfo');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSysDevEnum(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSysDevEnum) do
  begin
    RegisterMethod(@TSysDevEnum.SelectGUIDCategory, 'SelectGUIDCategory');
    RegisterMethod(@TSysDevEnum.SelectIndexCategory, 'SelectIndexCategory');
    RegisterPropertyHelper(@TSysDevEnumCountCategories_R,nil,'CountCategories');
    RegisterPropertyHelper(@TSysDevEnumCountFilters_R,nil,'CountFilters');
    RegisterPropertyHelper(@TSysDevEnumCategories_R,nil,'Categories');
    RegisterPropertyHelper(@TSysDevEnumFilters_R,nil,'Filters');
    RegisterMethod(@TSysDevEnum.FilterIndexOfFriendlyName, 'FilterIndexOfFriendlyName');
    RegisterMethod(@TSysDevEnumGetBaseFilter_P, 'GetBaseFilter');
    RegisterMethod(@TSysDevEnumGetBaseFilter1_P, 'GetBaseFilter1');
    RegisterMethod(@TSysDevEnum.GetMoniker, 'GetMoniker');
    RegisterConstructor(@TSysDevEnumCreate_P, 'Create');
    RegisterConstructor(@TSysDevEnumCreate1_P, 'Create1');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EDSPackException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EDSPackException) do
  begin
    RegisterPropertyHelper(@EDSPackExceptionErrorCode_R,@EDSPackExceptionErrorCode_W,'ErrorCode');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EDirectShowException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EDirectShowException) do
  begin
    RegisterPropertyHelper(@EDirectShowExceptionErrorCode_R,@EDirectShowExceptionErrorCode_W,'ErrorCode');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DSUtil_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ProfileFromGUID, 'ProfileFromGUID', cdRegister);
 S.RegisterDelphiFunction(@FreeAndNil, 'FreeAndNil', cdRegister);
 S.RegisterDelphiFunction(@AddGraphToRot, 'AddGraphToRot', cdRegister);
 S.RegisterDelphiFunction(@RemoveGraphFromRot, 'RemoveGraphFromRot', cdRegister);
 S.RegisterDelphiFunction(@IntToTimeCode, 'IntToTimeCode', cdRegister);
 S.RegisterDelphiFunction(@GetEventCodeDef, 'GetEventCodeDef', cdRegister);
 S.RegisterDelphiFunction(@DeleteMediaType, 'DeleteMediaType', cdRegister);
 S.RegisterDelphiFunction(@CreateMediaType, 'CreateMediaType', cdRegister);
 S.RegisterDelphiFunction(@CopyMediaType, 'CopyMediaType', cdRegister);
 S.RegisterDelphiFunction(@FreeMediaType, 'FreeMediaType', cdRegister);
 S.RegisterDelphiFunction(@CreateAudioMediaType, 'CreateAudioMediaType', cdRegister);
 S.RegisterDelphiFunction(@FOURCCMap, 'FOURCCMap', cdRegister);
 S.RegisterDelphiFunction(@GetFOURCC, 'GetFOURCC', cdRegister);
 S.RegisterDelphiFunction(@FCC, 'FCC', cdRegister);
 S.RegisterDelphiFunction(@MAKEFOURCC, 'MAKEFOURCC', cdRegister);
 S.RegisterDelphiFunction(@GetErrorString, 'GetErrorString', cdRegister);
 S.RegisterDelphiFunction(@GetMediaTypeDescription, 'GetMediaTypeDescription', cdRegister);
 S.RegisterDelphiFunction(@GetBitmapSize, 'GetBitmapSize', cdRegister);
 S.RegisterDelphiFunction(@GetBitmapSubtype, 'GetBitmapSubtype', CdStdCall);
 S.RegisterDelphiFunction(@GetTrueColorType, 'GetTrueColorType', CdStdCall);
 S.RegisterDelphiFunction(@GetDXSDKMediaPath, 'GetDXSDKMediaPath', cdRegister);
 S.RegisterDelphiFunction(@CopyScreenToBitmap, 'CopyScreenToBitmap', cdRegister);
 S.RegisterDelphiFunction(@ShowFilterPropertyPage, 'ShowFilterPropertyPage', cdRegister);
 S.RegisterDelphiFunction(@HaveFilterPropertyPage, 'HaveFilterPropertyPage', cdRegister);
 S.RegisterDelphiFunction(@ShowPinPropertyPage, 'ShowPinPropertyPage', cdRegister);
 S.RegisterDelphiFunction(@RefTimeToMiliSec, 'RefTimeToMiliSec', cdRegister);
 S.RegisterDelphiFunction(@MiliSecToRefTime, 'MiliSecToRefTime', cdRegister);
 S.RegisterDelphiFunction(@GetBitmapFormatSize, 'GetBitmapFormatSize', cdRegister);
 S.RegisterDelphiFunction(@GetSourceRectFromMediaType, 'GetSourceRectFromMediaType', cdRegister);
 S.RegisterDelphiFunction(@StretchRect, 'StretchRect', cdRegister);
 S.RegisterDelphiFunction(@CheckDSError, 'CheckDSError', cdRegister);
 S.RegisterDelphiFunction(@FindRenderer, 'FindRenderer', cdRegister);
 S.RegisterDelphiFunction(@FindAudioRenderer, 'FindAudioRenderer', cdRegister);
 S.RegisterDelphiFunction(@FindVideoRenderer, 'FindVideoRenderer', cdRegister);
 S.RegisterDelphiFunction(@CountFilterPins, 'CountFilterPins', cdRegister);
 S.RegisterDelphiFunction(@CountTotalFilterPins, 'CountTotalFilterPins', cdRegister);
 S.RegisterDelphiFunction(@GetPin, 'GetPin', cdRegister);
 S.RegisterDelphiFunction(@GetInPin, 'GetInPin', cdRegister);
 S.RegisterDelphiFunction(@GetOutPin, 'GetOutPin', cdRegister);
 S.RegisterDelphiFunction(@FindOtherSplitterPin, 'FindOtherSplitterPin', cdRegister);
 S.RegisterDelphiFunction(@SeekNextFrame, 'SeekNextFrame', cdRegister);
 S.RegisterDelphiFunction(@ShowFilenameByCLSID, 'ShowFilenameByCLSID', cdRegister);
 S.RegisterDelphiFunction(@GetFileDurationString, 'GetFileDurationString', cdRegister);
 S.RegisterDelphiFunction(@CanFrameStep, 'CanFrameStep', cdRegister);
 S.RegisterDelphiFunction(@UtilFreeMediaType, 'UtilFreeMediaType', cdRegister);
 S.RegisterDelphiFunction(@UtilDeleteMediaType, 'UtilDeleteMediaType', cdRegister);
 S.RegisterDelphiFunction(@SaveGraphFile, 'SaveGraphFile', cdRegister);
 S.RegisterDelphiFunction(@LoadGraphFile, 'LoadGraphFile', cdRegister);
 S.RegisterDelphiFunction(@GetDXVersion, 'GetDXVersion', cdRegister);
  RIRegister_EDirectShowException(CL);
  RIRegister_EDSPackException(CL);
  RIRegister_TSysDevEnum(CL);
  RIRegister_TFilterList(CL);
  RIRegister_TPinList(CL);
  RIRegister_TMediaType(CL);
  RIRegister_TEnumMediaType(CL);
  RIRegister_TPersistentMemory(CL);
  RIRegister_TBaseFilter(CL);
  RIRegister_TMediaBuffer(CL);
 S.RegisterDelphiFunction(@UInt32x32To64, 'UInt32x32To64', cdRegister);
 S.RegisterDelphiFunction(@Int64x32Div32, 'Int64x32Div32', cdRegister);
 S.RegisterDelphiFunction(@Int32x32To64, 'Int32x32To64', cdRegister);
 S.RegisterDelphiFunction(@MILLISECONDS_TO_100NS_UNITS, 'MILLISECONDS_TO_100NS_UNITS', cdRegister);
 S.RegisterDelphiFunction(@llMulDiv, 'llMulDiv', cdRegister);
 S.RegisterDelphiFunction(@AmGetLastErrorToHResult, 'AmGetLastErrorToHResult', cdRegister);
 S.RegisterDelphiFunction(@IsEqualObject, 'IsEqualObject', cdRegister);
 S.RegisterDelphiFunction(@GetGUIDString, 'GetGUIDString', cdRegister);
 S.RegisterDelphiFunction(@GetBasicAudioVolume, 'GetBasicAudioVolume', cdRegister);
 S.RegisterDelphiFunction(@SetBasicAudioVolume, 'SetBasicAudioVolume', cdRegister);
 S.RegisterDelphiFunction(@GetBasicAudioPan, 'GetBasicAudioPan', cdRegister);
 S.RegisterDelphiFunction(@SetBasicAudioPan, 'SetBasicAudioPan', cdRegister);
 S.RegisterDelphiFunction(@GUIDToString, 'GUIDToString', cdRegister);
 S.RegisterDelphiFunction(@StringToGUID, 'StringToGUID', cdRegister);
 S.RegisterDelphiFunction(@EnsureRange, 'EnsureRange', cdRegister);
 S.RegisterDelphiFunction(@Set8087CW, 'Set8087CW', cdRegister);
 S.RegisterDelphiFunction(@Get8087CW, 'Get8087CW', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsGetSectionLength, 'MPEGHeaderBitsGetSectionLength', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsGetReserved, 'MPEGHeaderBitsGetReserved', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsGetPrivateIndicator, 'MPEGHeaderBitsGetPrivateIndicator', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsGetSectionSyntaxIndicator, 'MPEGHeaderBitsGetSectionSyntaxIndicator', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsSetSectionLength, 'MPEGHeaderBitsSetSectionLength', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsSetReserved, 'MPEGHeaderBitsSetReserved', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsSetPrivateIndicator, 'MPEGHeaderBitsSetPrivateIndicator', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderBitsSetSectionSyntaxIndicator, 'MPEGHeaderBitsSetSectionSyntaxIndicator', cdRegister);
 S.RegisterDelphiFunction(@PIDBitsGetReserved, 'PIDBitsGetReserved', cdRegister);
 S.RegisterDelphiFunction(@PIDBitsGetProgramId, 'PIDBitsGetProgramId', cdRegister);
 S.RegisterDelphiFunction(@PIDBitsSetReserved, 'PIDBitsSetReserved', cdRegister);
 S.RegisterDelphiFunction(@PIDBitsSetProgramId, 'PIDBitsSetProgramId', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderVersionBitsGetCurrentNextIndicator, 'MPEGHeaderVersionBitsGetCurrentNextIndicator', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderVersionBitsGetVersionNumber, 'MPEGHeaderVersionBitsGetVersionNumber', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderVersionBitsGetReserved, 'MPEGHeaderVersionBitsGetReserved', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderVersionBitsSetCurrentNextIndicator, 'MPEGHeaderVersionBitsSetCurrentNextIndicator', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderVersionBitsSetVersionNumber, 'MPEGHeaderVersionBitsSetVersionNumber', cdRegister);
 S.RegisterDelphiFunction(@MPEGHeaderVersionBitsSetReserved, 'MPEGHeaderVersionBitsSetReserved', cdRegister);
end;

 
 
{ TPSImport_DSUtil }
(*----------------------------------------------------------------------------*)
procedure TPSImport_DSUtil.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_DSUtil(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_DSUtil.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_DSUtil_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
