unit uPSI_DBXSqlScanner;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_DBXSqlScanner = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TDBXSqlScanner(CL: TPSPascalCompiler);
procedure SIRegister_DBXSqlScanner(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TDBXSqlScanner(CL: TPSRuntimeClassImporter);
procedure RIRegister_DBXSqlScanner(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   DBXPlatformUtil
  ,DBXSqlScanner
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_DBXSqlScanner]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TDBXSqlScanner(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TDBXSqlScanner') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TDBXSqlScanner') do
  begin
    RegisterMethod('Constructor Create( const QuoteChar : WideString; const QuotePrefix : WideString; const QuoteSuffix : WideString)');
    RegisterMethod('Procedure RegisterId( const Id : WideString; const Token : Integer)');
    RegisterMethod('Procedure Init( const Query : WideString);');
    RegisterMethod('Procedure Init1( const Query : WideString; const StartIndex : Integer);');
    RegisterMethod('Function LookAtNextToken : Integer');
    RegisterMethod('Function NextToken : Integer');
    RegisterMethod('Function IsKeyword( const Keyword : WideString) : Boolean');
    RegisterProperty('Id', 'WideString', iptr);
    RegisterProperty('Quoted', 'Boolean', iptr);
    RegisterProperty('Symbol', 'WideChar', iptr);
    RegisterProperty('SqlQuery', 'WideString', iptr);
    RegisterProperty('NextIndex', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_DBXSqlScanner(CL: TPSPascalCompiler);
begin
  SIRegister_TDBXSqlScanner(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TDBXSqlScannerNextIndex_R(Self: TDBXSqlScanner; var T: Integer);
begin T := Self.NextIndex; end;

(*----------------------------------------------------------------------------*)
procedure TDBXSqlScannerSqlQuery_R(Self: TDBXSqlScanner; var T: WideString);
begin T := Self.SqlQuery; end;

(*----------------------------------------------------------------------------*)
procedure TDBXSqlScannerSymbol_R(Self: TDBXSqlScanner; var T: WideChar);
begin T := Self.Symbol; end;

(*----------------------------------------------------------------------------*)
procedure TDBXSqlScannerQuoted_R(Self: TDBXSqlScanner; var T: Boolean);
begin T := Self.Quoted; end;

(*----------------------------------------------------------------------------*)
procedure TDBXSqlScannerId_R(Self: TDBXSqlScanner; var T: WideString);
begin T := Self.Id; end;

(*----------------------------------------------------------------------------*)
Procedure TDBXSqlScannerInit1_P(Self: TDBXSqlScanner;  const Query : WideString; const StartIndex : Integer);
Begin Self.Init(Query, StartIndex); END;

(*----------------------------------------------------------------------------*)
Procedure TDBXSqlScannerInit_P(Self: TDBXSqlScanner;  const Query : WideString);
Begin Self.Init(Query); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TDBXSqlScanner(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TDBXSqlScanner) do
  begin
    RegisterConstructor(@TDBXSqlScanner.Create, 'Create');
    RegisterMethod(@TDBXSqlScanner.RegisterId, 'RegisterId');
    RegisterMethod(@TDBXSqlScannerInit_P, 'Init');
    RegisterMethod(@TDBXSqlScannerInit1_P, 'Init1');
    RegisterMethod(@TDBXSqlScanner.LookAtNextToken, 'LookAtNextToken');
    RegisterMethod(@TDBXSqlScanner.NextToken, 'NextToken');
    RegisterMethod(@TDBXSqlScanner.IsKeyword, 'IsKeyword');
    RegisterPropertyHelper(@TDBXSqlScannerId_R,nil,'Id');
    RegisterPropertyHelper(@TDBXSqlScannerQuoted_R,nil,'Quoted');
    RegisterPropertyHelper(@TDBXSqlScannerSymbol_R,nil,'Symbol');
    RegisterPropertyHelper(@TDBXSqlScannerSqlQuery_R,nil,'SqlQuery');
    RegisterPropertyHelper(@TDBXSqlScannerNextIndex_R,nil,'NextIndex');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_DBXSqlScanner(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TDBXSqlScanner(CL);
end;

 
 
{ TPSImport_DBXSqlScanner }
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBXSqlScanner.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_DBXSqlScanner(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_DBXSqlScanner.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_DBXSqlScanner(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
