unit uPSI_IdGlobal;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdGlobal = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdBaseStream(CL: TPSPascalCompiler);
procedure SIRegister_TIdExtList(CL: TPSPascalCompiler);
procedure SIRegister_TIdCriticalSection(CL: TPSPascalCompiler);
procedure SIRegister_TIdLocalEvent(CL: TPSPascalCompiler);
procedure SIRegister_TCriticalSection(CL: TPSPascalCompiler);
procedure SIRegister_TEvent(CL: TPSPascalCompiler);
procedure SIRegister_TFileCreateStream(CL: TPSPascalCompiler);
procedure SIRegister_TReadFileNonExclusiveStream(CL: TPSPascalCompiler);
procedure SIRegister_TReadFileExclusiveStream(CL: TPSPascalCompiler);
procedure SIRegister_TAppendFileStream(CL: TPSPascalCompiler);
procedure SIRegister_IdGlobal(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_IdGlobal_Routines(S: TPSExec);
procedure RIRegister_TIdBaseStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdExtList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdCriticalSection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdLocalEvent(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCriticalSection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TEvent(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFileCreateStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TReadFileNonExclusiveStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TReadFileExclusiveStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAppendFileStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdGlobal(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,SyncObjs
  ,IdException
  ,IdSys
  ,IdObjs
  ,IdGlobal
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdGlobal]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdBaseStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdStream', 'TIdBaseStream') do
  with CL.AddClassN(CL.FindClass('TIdStream'),'TIdBaseStream') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdExtList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdList', 'TIdExtList') do
  with CL.AddClassN(CL.FindClass('TIdList'),'TIdExtList') do
  begin
    RegisterMethod('Procedure Assign( AList : TList)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdCriticalSection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCriticalSection', 'TIdCriticalSection') do
  with CL.AddClassN(CL.FindClass('TCriticalSection'),'TIdCriticalSection') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdLocalEvent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEvent', 'TIdLocalEvent') do
  with CL.AddClassN(CL.FindClass('TEvent'),'TIdLocalEvent') do
  begin
    RegisterMethod('Constructor Create( const AInitialState : Boolean; const AManualReset : Boolean)');
    RegisterMethod('Function WaitForEver : TWaitResult;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCriticalSection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TCriticalSection') do
  with CL.AddClassN(CL.FindClass('TObject'),'TCriticalSection') do
  begin
    RegisterMethod('Procedure Acquire');
    RegisterMethod('Procedure Release');
    RegisterMethod('Function TryEnter : Boolean');
    RegisterMethod('Procedure Enter');
    RegisterMethod('Procedure Leave');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TEvent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TEvent') do
  with CL.AddClassN(CL.FindClass('TObject'),'TEvent') do
  begin
    RegisterMethod('Constructor Create( EventAttributes : IntPtr; ManualReset, InitialState : Boolean; const Name : string);');
    RegisterMethod('Constructor Create;');
    RegisterMethod('Procedure SetEvent');
    RegisterMethod('Procedure ResetEvent');
    RegisterMethod('Function WaitFor( Timeout : LongWord) : TWaitResult');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFileCreateStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdFileStream', 'TFileCreateStream') do
  with CL.AddClassN(CL.FindClass('TIdFileStream'),'TFileCreateStream') do
  begin
    RegisterMethod('Constructor Create( const AFile : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TReadFileNonExclusiveStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdFileStream', 'TReadFileNonExclusiveStream') do
  with CL.AddClassN(CL.FindClass('TIdFileStream'),'TReadFileNonExclusiveStream') do
  begin
    RegisterMethod('Constructor Create( const AFile : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TReadFileExclusiveStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdFileStream', 'TReadFileExclusiveStream') do
  with CL.AddClassN(CL.FindClass('TIdFileStream'),'TReadFileExclusiveStream') do
  begin
    RegisterMethod('Constructor Create( const AFile : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAppendFileStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdFileStream', 'TAppendFileStream') do
  with CL.AddClassN(CL.FindClass('TIdFileStream'),'TAppendFileStream') do
  begin
    RegisterMethod('Constructor Create( const AFile : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdGlobal(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('INFINITE','LongWord').SetUInt( Cardinal ( $FFFFFFFF ));
 CL.AddConstantN('IdTimeoutDefault','LongInt').SetInt( - 1);
 CL.AddConstantN('IdTimeoutInfinite','LongInt').SetInt( - 2);
 CL.AddConstantN('IdFetchDelimDefault','String').SetString( ' ');
 CL.AddConstantN('IdFetchDeleteDefault','Boolean')BoolToStr( True);
 CL.AddConstantN('IdFetchCaseSensitiveDefault','Boolean')BoolToStr( True);
  CL.AddTypeS('TIdEncoding', '( enDefault, enANSI, enUTF8 )');
  SIRegister_TAppendFileStream(CL);
  SIRegister_TReadFileExclusiveStream(CL);
  SIRegister_TReadFileNonExclusiveStream(CL);
  SIRegister_TFileCreateStream(CL);
  CL.AddTypeS('TWaitResult', '( wrSignaled, wrTimeout, wrAbandoned, wrError )');
  SIRegister_TEvent(CL);
  SIRegister_TCriticalSection(CL);
  SIRegister_TIdLocalEvent(CL);
  SIRegister_TIdCriticalSection(CL);
  CL.AddTypeS('Short', 'Smallint');
  CL.AddTypeS('PCardinal', '^Cardinal // will not work');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdCorruptServicesFile');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdEndOfStream');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdInvalidIPv6Address');
  CL.AddTypeS('TIdBytes', 'TBytes');
  CL.AddTypeS('TIdPort', 'Integer');
  CL.AddTypeS('TIdMaxLineAction', '( maException, maSplit )');
  CL.AddTypeS('TIdOSType', '( otUnknown, otLinux, otWindows, otDotNet )');
  CL.AddTypeS('TIdIPVersion', '( Id_IPv4, Id_IPv6 )');
  CL.AddTypeS('TIdPID', 'LongWord');
  CL.AddTypeS('TIdThreadPriority', 'TThreadPriority');
  CL.AddTypeS('TIdPID', 'LongWord');
  CL.AddTypeS('TIdThreadPriority', 'TThreadPriority');
  CL.AddTypeS('THandle', 'LongWord');
  CL.AddTypeS('THandle', 'Integer');
  CL.AddTypeS('THandle', 'Integer');
  CL.AddTypeS('TIdReuseSocket', '( rsOSDependent, rsTrue, rsFalse )');
  SIRegister_TIdExtList(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIdExtList');
  SIRegister_TIdBaseStream(CL);
 CL.AddConstantN('GOSType','').SetString( otLinux);
 CL.AddConstantN('GPathDelim','String').SetString( '/');
 CL.AddConstantN('INFINITE','LongWord').SetUInt( LongWord ( $FFFFFFFF ));
 CL.AddConstantN('tpIdle','LongInt').SetInt( 19);
 CL.AddConstantN('tpLowest','LongInt').SetInt( 12);
 CL.AddConstantN('tpLower','LongInt').SetInt( 6);
 CL.AddConstantN('tpNormal','LongInt').SetInt( 0);
 CL.AddConstantN('tpHigher','LongInt').SetInt( - 7);
 CL.AddConstantN('tpHighest','LongInt').SetInt( - 13);
 CL.AddConstantN('tpTimeCritical','LongInt').SetInt( - 20);
 CL.AddConstantN('GOSType','').SetString( otWindows);
 CL.AddConstantN('GPathDelim','String').SetString( '\');
 CL.AddConstantN('GOSType','').SetString( otDotNet);
 CL.AddConstantN('GPathDelim','String').SetString( '\');
 CL.AddConstantN('ID_DEFAULT_IP_VERSION','').SetString( Id_IPv6);
 CL.AddConstantN('ID_DEFAULT_IP_VERSION','').SetString( Id_IPv4);
 CL.AddConstantN('sLineBreak','').SetString( EOL);
 CL.AddConstantN('POWER_1','LongWord').SetUInt( $000000FF);
 CL.AddConstantN('POWER_2','LongWord').SetUInt( $0000FFFF);
 CL.AddConstantN('POWER_3','LongWord').SetUInt( $00FFFFFF);
 CL.AddConstantN('POWER_4','LongWord').SetUInt( $FFFFFFFF);
 CL.AddDelphiFunction('Function ToBytes1( const AValue : string; const AEncoding : TIdEncoding) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes2( const AValue : Char) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes3( const AValue : Integer) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes4( const AValue : Short) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes5( const AValue : Word) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes6( const AValue : Byte) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes7( const AValue : Cardinal) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes8( const AValue : Int64) : TIdBytes;');
 CL.AddDelphiFunction('Function ToBytes9( const AValue : TIdBytes; const ASize : Integer) : TIdBytes;');
 CL.AddDelphiFunction('Function BytesToCardinal( const AValue : TIdBytes; const AIndex : Integer) : Cardinal');
 CL.AddDelphiFunction('Function BytesToWord( const AValue : TIdBytes; const AIndex : Integer) : Word');
 CL.AddDelphiFunction('Function ToHex1( const AValue : TIdBytes) : AnsiString;');
 CL.AddDelphiFunction('Function ToHex2( const AValue : array of LongWord) : AnsiString;');
 CL.AddDelphiFunction('Function BytesToChar( const AValue : TIdBytes; const AIndex : Integer) : Char');
 CL.AddDelphiFunction('Function BytesToShort( const AValue : TIdBytes; const AIndex : Integer) : Short');
 CL.AddDelphiFunction('Function BytesToInteger( const AValue : TIdBytes; const AIndex : Integer) : Integer');
 CL.AddDelphiFunction('Function BytesToInt64( const AValue : TIdBytes; const AIndex : Integer) : Int64');
 CL.AddDelphiFunction('Function BytesToIPv6( const AValue : TIdBytes; const AIndex : Integer) : TIdIPv6Address');
 CL.AddDelphiFunction('Function BytesToString1( ABytes : TIdBytes; AStartIndex : Integer; AMaxCount : Integer) : string;');
 CL.AddDelphiFunction('Procedure AppendBytes( var VBytes : TIdBytes; AAdd : TIdBytes)');
 CL.AddDelphiFunction('Procedure AppendByte( var VBytes : TIdBytes; AByte : byte)');
 CL.AddDelphiFunction('Procedure AppendString( var VBytes : TIdBytes; const AStr : String; ALength : Integer)');
 CL.AddDelphiFunction('Function ReadLnFromStream( AStream : TIdStream; AMaxLineLength : Integer; AExceptionIfEOF : Boolean) : string');
 CL.AddDelphiFunction('Function ReadStringFromStream( AStream : TIdStream; ASize : Integer) : string');
 CL.AddDelphiFunction('Procedure WriteStringToStream( AStream : TIdStream; const AStr : string)');
 CL.AddDelphiFunction('Function ReadCharFromStream( AStream : TIdStream; var AChar : Char) : Integer');
 CL.AddDelphiFunction('Function ReadTIdBytesFromStream( const AStream : TIdStream; var ABytes : TIdBytes; const Count : Integer) : Integer');
 CL.AddDelphiFunction('Procedure WriteTIdBytesToStream( const AStream : TIdStream; const ABytes : TIdBytes)');
 CL.AddDelphiFunction('Function ByteToHex( const AByte : Byte) : string');
 CL.AddDelphiFunction('Function ByteToOctal( const AByte : Byte) : string');
 CL.AddDelphiFunction('Procedure CopyTIdBytes( const ASource : TIdBytes; const ASourceIndex : Integer; var VDest : TIdBytes; const ADestIndex : Integer; const ALength : Integer)');
 CL.AddDelphiFunction('Procedure CopyTIdByteArray( const ASource : array of Byte; const ASourceIndex : Integer; var VDest : array of Byte; const ADestIndex : Integer; const ALength : Integer)');
 CL.AddDelphiFunction('Procedure CopyTIdWord( const ASource : Word; var VDest : TIdBytes; const ADestIndex : Integer)');
 CL.AddDelphiFunction('Procedure CopyTIdLongWord( const ASource : LongWord; var VDest : TIdBytes; const ADestIndex : Integer)');
 CL.AddDelphiFunction('Procedure CopyTIdCardinal( const ASource : Cardinal; var VDest : TIdBytes; const ADestIndex : Integer)');
 CL.AddDelphiFunction('Procedure CopyTIdInt64( const ASource : Int64; var VDest : TIdBytes; const ADestIndex : Integer)');
 CL.AddDelphiFunction('Procedure CopyTIdIPV6Address( const ASource : TIdIPv6Address; var VDest : TIdBytes; const ADestIndex : Integer)');
 CL.AddDelphiFunction('Procedure CopyTIdString( const ASource : String; var VDest : TIdBytes; const ADestIndex : Integer; ALength : Integer)');
 CL.AddDelphiFunction('Function CharIsInSet( const AString : string; const ACharPos : Integer; const ASet : String) : Boolean');
 CL.AddDelphiFunction('Function CharIsInEOF( const AString : string; ACharPos : Integer) : Boolean');
 CL.AddDelphiFunction('Function CurrentProcessId : TIdPID');
 CL.AddDelphiFunction('Procedure DebugOutput( const AText : string)');
 CL.AddDelphiFunction('Function Fetch( var AInput : string; const ADelim : string; const ADelete : Boolean; const ACaseSensitive : Boolean) : string');
 CL.AddDelphiFunction('Function FetchCaseInsensitive( var AInput : string; const ADelim : string; const ADelete : Boolean) : string');
 CL.AddDelphiFunction('Procedure FillBytes( var VBytes : TIdBytes; const ACount : Integer; const AValue : Byte)');
 CL.AddDelphiFunction('Function CurrentThreadId : TIdPID');
 CL.AddDelphiFunction('Function GetThreadHandle( AThread : TIdNativeThread) : THandle');
 CL.AddDelphiFunction('Function GetTickDiff( const AOldTickCount, ANewTickCount : Cardinal) : Cardinal');
 CL.AddDelphiFunction('Procedure IdDelete( var s : string; AOffset, ACount : Integer)');
 CL.AddDelphiFunction('Procedure IdInsert( const Source : string; var S : string; Index : Integer)');
 CL.AddDelphiFunction('Function IdPorts : TList');
 CL.AddDelphiFunction('Function iif( ATest : Boolean; const ATrue : Integer; const AFalse : Integer) : Integer;');
 CL.AddDelphiFunction('Function iif( ATest : Boolean; const ATrue : string; const AFalse : string) : string;');
 CL.AddDelphiFunction('Function iif( ATest : Boolean; const ATrue : Boolean; const AFalse : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function InMainThread : Boolean');
 CL.AddDelphiFunction('Function IPv6AddressToStr( const AValue : TIdIPv6Address) : string');
 CL.AddDelphiFunction('Procedure WriteMemoryStreamToStream( Src : TIdMemoryStream; Dest : TIdStream; Count : int64)');
 CL.AddDelphiFunction('Function IsCurrentThread( AThread : TIdNativeThread) : boolean');
 CL.AddDelphiFunction('Function IPv4ToDWord1( const AIPAddress : string) : Cardinal;');
 CL.AddDelphiFunction('Function IPv4ToDWord2( const AIPAddress : string; var VErr : Boolean) : Cardinal;');
 CL.AddDelphiFunction('Function IPv4ToHex( const AIPAddress : string; const ASDotted : Boolean) : string');
 CL.AddDelphiFunction('Function IPv4ToOctal( const AIPAddress : string) : string');
 CL.AddDelphiFunction('Function IPv6ToIdIPv6Address( const AIPAddress : String) : TIdIPv6Address');
 CL.AddDelphiFunction('Function IsASCII1( const AByte : Byte) : Boolean;');
 CL.AddDelphiFunction('Function IsASCII2( const ABytes : TIdBytes) : Boolean;');
 CL.AddDelphiFunction('Function IsASCIILDH1( const AByte : Byte) : Boolean;');
 CL.AddDelphiFunction('Function IsASCIILDH2( const ABytes : TIdBytes) : Boolean;');
 CL.AddDelphiFunction('Function IsHexidecimal1( AChar : Char) : Boolean;');
 CL.AddDelphiFunction('Function IsHexidecimal2( const AString : string) : Boolean;');
 CL.AddDelphiFunction('Function IsNumeric1( AChar : Char) : Boolean;');
 CL.AddDelphiFunction('Function IsNumeric2( const AString : string) : Boolean;');
 CL.AddDelphiFunction('Function IsOctal1( AChar : Char) : Boolean;');
 CL.AddDelphiFunction('Function IsOctal2( const AString : string) : Boolean;');
 CL.AddDelphiFunction('Function MakeCanonicalIPv4Address( const AAddr : string) : string');
 //CL.AddDelphiFunction('Function MakeCanonicalIPv6Address( const AAddr : string) : string');
 CL.AddDelphiFunction('Function MakeDWordIntoIPv4Address( const ADWord : Cardinal) : string');
 CL.AddDelphiFunction('Function Max( const AValueOne, AValueTwo : Int64) : Int64');
 CL.AddDelphiFunction('Function MemoryPos( const ASubStr : string; MemBuff : PChar; MemorySize : Integer) : Integer');
 CL.AddDelphiFunction('Function Min( const AValueOne, AValueTwo : Int64) : Int64');
 CL.AddDelphiFunction('Function PosIdx( const ASubStr, AStr : AnsiString; AStartPos : Cardinal) : Cardinal');
 CL.AddDelphiFunction('Function PosInSmallIntArray( const ASearchInt : SmallInt; AArray : array of SmallInt) : Integer');
 CL.AddDelphiFunction('Function PosInStrArray( const SearchStr : string; Contents : array of string; const CaseSensitive : Boolean) : Integer');
 CL.AddDelphiFunction('Function ServicesFilePath : string');
 CL.AddDelphiFunction('Procedure SetThreadPriority( AThread : TIdNativeThread; const APriority : TIdThreadPriority; const APolicy : IntegerMaxInt)');
 CL.AddDelphiFunction('Procedure SetThreadName( const AName : string)');
 CL.AddDelphiFunction('Procedure Sleep( ATime : cardinal)');
 CL.AddDelphiFunction('Procedure SplitColumnsNoTrim( const AData : string; AStrings : TIdStrings; const ADelim : string)');
 CL.AddDelphiFunction('Procedure SplitColumns( const AData : string; AStrings : TIdStrings; const ADelim : string)');
 CL.AddDelphiFunction('Function StartsWithACE( const ABytes : TIdBytes) : Boolean');
 CL.AddDelphiFunction('Function TextIsSame( const A1 : string; const A2 : string) : Boolean');
 CL.AddDelphiFunction('Function TextStartsWith( const S, SubS : string) : Boolean');
 CL.AddDelphiFunction('Function IndyUpperCase( const A1 : string) : string');
 CL.AddDelphiFunction('Function IndyLowerCase( const A1 : string) : string');
 CL.AddDelphiFunction('Function IndyCompareStr( const A1 : string; const A2 : string) : Integer');
 CL.AddDelphiFunction('Function Ticks : Cardinal');
 CL.AddDelphiFunction('Procedure ToDo');
 CL.AddDelphiFunction('Function TwoByteToWord( AByte1, AByte2 : Byte) : Word');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function IsOctal2_P( const AString : string) : Boolean;
Begin Result := IdGlobal.IsOctal(AString); END;

(*----------------------------------------------------------------------------*)
Function IsOctal1_P( AChar : Char) : Boolean;
Begin Result := IdGlobal.IsOctal(AChar); END;

(*----------------------------------------------------------------------------*)
Function IsNumeric2_P( const AString : string) : Boolean;
Begin Result := IdGlobal.IsNumeric(AString); END;

(*----------------------------------------------------------------------------*)
Function IsNumeric1_P( AChar : Char) : Boolean;
Begin Result := IdGlobal.IsNumeric(AChar); END;

(*----------------------------------------------------------------------------*)
Function IsHexidecimal2_P( const AString : string) : Boolean;
Begin Result := IdGlobal.IsHexidecimal(AString); END;

(*----------------------------------------------------------------------------*)
Function IsHexidecimal1_P( AChar : Char) : Boolean;
Begin Result := IdGlobal.IsHexidecimal(AChar); END;

(*----------------------------------------------------------------------------*)
Function IsASCIILDH2_P( const ABytes : TIdBytes) : Boolean;
Begin Result := IdGlobal.IsASCIILDH(ABytes); END;

(*----------------------------------------------------------------------------*)
Function IsASCIILDH1_P( const AByte : Byte) : Boolean;
Begin Result := IdGlobal.IsASCIILDH(AByte); END;

(*----------------------------------------------------------------------------*)
Function IsASCII2_P( const ABytes : TIdBytes) : Boolean;
Begin Result := IdGlobal.IsASCII(ABytes); END;

(*----------------------------------------------------------------------------*)
Function IsASCII1_P( const AByte : Byte) : Boolean;
Begin Result := IdGlobal.IsASCII(AByte); END;

(*----------------------------------------------------------------------------*)
Function IPv4ToDWord2_P( const AIPAddress : string; var VErr : Boolean) : Cardinal;
Begin Result := IdGlobal.IPv4ToDWord(AIPAddress, VErr); END;

(*----------------------------------------------------------------------------*)
Function IPv4ToDWord1_P( const AIPAddress : string) : Cardinal;
Begin Result := IdGlobal.IPv4ToDWord(AIPAddress); END;

(*----------------------------------------------------------------------------*)
Function iif_P( ATest : Boolean; const ATrue : Boolean; const AFalse : Boolean) : Boolean;
Begin Result := IdGlobal.iif(ATest, ATrue, AFalse); END;

(*----------------------------------------------------------------------------*)
Function iif_P( ATest : Boolean; const ATrue : string; const AFalse : string) : string;
Begin Result := IdGlobal.iif(ATest, ATrue, AFalse); END;

(*----------------------------------------------------------------------------*)
Function iif_P( ATest : Boolean; const ATrue : Integer; const AFalse : Integer) : Integer;
Begin Result := IdGlobal.iif(ATest, ATrue, AFalse); END;

(*----------------------------------------------------------------------------*)
Function BytesToString1_P( ABytes : TIdBytes; AStartIndex : Integer; AMaxCount : Integer) : string;
Begin Result := IdGlobal.BytesToString(ABytes, AStartIndex, AMaxCount); END;

(*----------------------------------------------------------------------------*)
Function ToHex2_P( const AValue : array of LongWord) : AnsiString;
Begin Result := IdGlobal.ToHex(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToHex1_P( const AValue : TIdBytes) : AnsiString;
Begin Result := IdGlobal.ToHex(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes9_P( const AValue : TIdBytes; const ASize : Integer) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue, ASize); END;

(*----------------------------------------------------------------------------*)
Function ToBytes8_P( const AValue : Int64) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes7_P( const AValue : Cardinal) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes6_P( const AValue : Byte) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes5_P( const AValue : Word) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes4_P( const AValue : Short) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes3_P( const AValue : Integer) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes2_P( const AValue : Char) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue); END;

(*----------------------------------------------------------------------------*)
Function ToBytes1_P( const AValue : string; const AEncoding : TIdEncoding) : TIdBytes;
Begin Result := IdGlobal.ToBytes(AValue, AEncoding); END;

(*----------------------------------------------------------------------------*)
Function TIdLocalEventWaitForEver_P(Self: TIdLocalEvent) : TWaitResult;
Begin Result := Self.WaitForEver; END;

(*----------------------------------------------------------------------------*)
Function TEventCreate_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TEvent.Create; END;

(*----------------------------------------------------------------------------*)
Function TEventCreate_P(Self: TClass; CreateNewInstance: Boolean;  EventAttributes : IntPtr; ManualReset, InitialState : Boolean; const Name : string):TObject;
Begin Result := TEvent.Create(EventAttributes, ManualReset, InitialState, Name); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdGlobal_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ToBytes1, 'ToBytes1', cdRegister);
 S.RegisterDelphiFunction(@ToBytes2, 'ToBytes2', cdRegister);
 S.RegisterDelphiFunction(@ToBytes3, 'ToBytes3', cdRegister);
 S.RegisterDelphiFunction(@ToBytes4, 'ToBytes4', cdRegister);
 S.RegisterDelphiFunction(@ToBytes5, 'ToBytes5', cdRegister);
 S.RegisterDelphiFunction(@ToBytes6, 'ToBytes6', cdRegister);
 S.RegisterDelphiFunction(@ToBytes7, 'ToBytes7', cdRegister);
 S.RegisterDelphiFunction(@ToBytes8, 'ToBytes8', cdRegister);
 S.RegisterDelphiFunction(@ToBytes9, 'ToBytes9', cdRegister);
 S.RegisterDelphiFunction(@BytesToCardinal, 'BytesToCardinal', cdRegister);
 S.RegisterDelphiFunction(@BytesToWord, 'BytesToWord', cdRegister);
 S.RegisterDelphiFunction(@ToHex1, 'ToHex1', cdRegister);
 S.RegisterDelphiFunction(@ToHex2, 'ToHex2', cdRegister);
 S.RegisterDelphiFunction(@BytesToChar, 'BytesToChar', cdRegister);
 S.RegisterDelphiFunction(@BytesToShort, 'BytesToShort', cdRegister);
 S.RegisterDelphiFunction(@BytesToInteger, 'BytesToInteger', cdRegister);
 S.RegisterDelphiFunction(@BytesToInt64, 'BytesToInt64', cdRegister);
 S.RegisterDelphiFunction(@BytesToIPv6, 'BytesToIPv6', cdRegister);
 S.RegisterDelphiFunction(@BytesToString1, 'BytesToString1', cdRegister);
 S.RegisterDelphiFunction(@AppendBytes, 'AppendBytes', cdRegister);
 S.RegisterDelphiFunction(@AppendByte, 'AppendByte', cdRegister);
 S.RegisterDelphiFunction(@AppendString, 'AppendString', cdRegister);
 S.RegisterDelphiFunction(@ReadLnFromStream, 'ReadLnFromStream', cdRegister);
 S.RegisterDelphiFunction(@ReadStringFromStream, 'ReadStringFromStream', cdRegister);
 S.RegisterDelphiFunction(@WriteStringToStream, 'WriteStringToStream', cdRegister);
 S.RegisterDelphiFunction(@ReadCharFromStream, 'ReadCharFromStream', cdRegister);
 S.RegisterDelphiFunction(@ReadTIdBytesFromStream, 'ReadTIdBytesFromStream', cdRegister);
 S.RegisterDelphiFunction(@WriteTIdBytesToStream, 'WriteTIdBytesToStream', cdRegister);
 S.RegisterDelphiFunction(@ByteToHex, 'ByteToHex', cdRegister);
 S.RegisterDelphiFunction(@ByteToOctal, 'ByteToOctal', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdBytes, 'CopyTIdBytes', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdByteArray, 'CopyTIdByteArray', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdWord, 'CopyTIdWord', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdLongWord, 'CopyTIdLongWord', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdCardinal, 'CopyTIdCardinal', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdInt64, 'CopyTIdInt64', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdIPV6Address, 'CopyTIdIPV6Address', cdRegister);
 S.RegisterDelphiFunction(@CopyTIdString, 'CopyTIdString', cdRegister);
 S.RegisterDelphiFunction(@CharIsInSet, 'CharIsInSet', cdRegister);
 S.RegisterDelphiFunction(@CharIsInEOF, 'CharIsInEOF', cdRegister);
 S.RegisterDelphiFunction(@CurrentProcessId, 'CurrentProcessId', cdRegister);
 S.RegisterDelphiFunction(@DebugOutput, 'DebugOutput', cdRegister);
 S.RegisterDelphiFunction(@Fetch, 'Fetch', cdRegister);
 S.RegisterDelphiFunction(@FetchCaseInsensitive, 'FetchCaseInsensitive', cdRegister);
 S.RegisterDelphiFunction(@FillBytes, 'FillBytes', cdRegister);
 S.RegisterDelphiFunction(@CurrentThreadId, 'CurrentThreadId', cdRegister);
 S.RegisterDelphiFunction(@GetThreadHandle, 'GetThreadHandle', cdRegister);
 S.RegisterDelphiFunction(@GetTickDiff, 'GetTickDiff', cdRegister);
 S.RegisterDelphiFunction(@IdDelete, 'IdDelete', cdRegister);
 S.RegisterDelphiFunction(@IdInsert, 'IdInsert', cdRegister);
 S.RegisterDelphiFunction(@IdPorts, 'IdPorts', cdRegister);
 S.RegisterDelphiFunction(@iif, 'iif', cdRegister);
 S.RegisterDelphiFunction(@iif, 'iif', cdRegister);
 S.RegisterDelphiFunction(@iif, 'iif', cdRegister);
 S.RegisterDelphiFunction(@InMainThread, 'InMainThread', cdRegister);
 S.RegisterDelphiFunction(@IPv6AddressToStr, 'IPv6AddressToStr', cdRegister);
 S.RegisterDelphiFunction(@WriteMemoryStreamToStream, 'WriteMemoryStreamToStream', cdRegister);
 S.RegisterDelphiFunction(@IsCurrentThread, 'IsCurrentThread', cdRegister);
 S.RegisterDelphiFunction(@IPv4ToDWord1, 'IPv4ToDWord1', cdRegister);
 S.RegisterDelphiFunction(@IPv4ToDWord2, 'IPv4ToDWord2', cdRegister);
 S.RegisterDelphiFunction(@IPv4ToHex, 'IPv4ToHex', cdRegister);
 S.RegisterDelphiFunction(@IPv4ToOctal, 'IPv4ToOctal', cdRegister);
 S.RegisterDelphiFunction(@IPv6ToIdIPv6Address, 'IPv6ToIdIPv6Address', cdRegister);
 S.RegisterDelphiFunction(@IsASCII1, 'IsASCII1', cdRegister);
 S.RegisterDelphiFunction(@IsASCII2, 'IsASCII2', cdRegister);
 S.RegisterDelphiFunction(@IsASCIILDH1, 'IsASCIILDH1', cdRegister);
 S.RegisterDelphiFunction(@IsASCIILDH2, 'IsASCIILDH2', cdRegister);
 S.RegisterDelphiFunction(@IsHexidecimal1, 'IsHexidecimal1', cdRegister);
 S.RegisterDelphiFunction(@IsHexidecimal2, 'IsHexidecimal2', cdRegister);
 S.RegisterDelphiFunction(@IsNumeric1, 'IsNumeric1', cdRegister);
 S.RegisterDelphiFunction(@IsNumeric2, 'IsNumeric2', cdRegister);
 S.RegisterDelphiFunction(@IsOctal1, 'IsOctal1', cdRegister);
 S.RegisterDelphiFunction(@IsOctal2, 'IsOctal2', cdRegister);
 S.RegisterDelphiFunction(@MakeCanonicalIPv4Address, 'MakeCanonicalIPv4Address', cdRegister);
 S.RegisterDelphiFunction(@MakeCanonicalIPv6Address, 'MakeCanonicalIPv6Address', cdRegister);
 S.RegisterDelphiFunction(@MakeDWordIntoIPv4Address, 'MakeDWordIntoIPv4Address', cdRegister);
 S.RegisterDelphiFunction(@Max, 'Max', cdRegister);
 S.RegisterDelphiFunction(@MemoryPos, 'MemoryPos', cdRegister);
 S.RegisterDelphiFunction(@Min, 'Min', cdRegister);
 S.RegisterDelphiFunction(@PosIdx, 'PosIdx', cdRegister);
 S.RegisterDelphiFunction(@PosInSmallIntArray, 'PosInSmallIntArray', cdRegister);
 S.RegisterDelphiFunction(@PosInStrArray, 'PosInStrArray', cdRegister);
 S.RegisterDelphiFunction(@ServicesFilePath, 'ServicesFilePath', cdRegister);
 S.RegisterDelphiFunction(@SetThreadPriority, 'SetThreadPriority', cdRegister);
 S.RegisterDelphiFunction(@SetThreadName, 'SetThreadName', cdRegister);
 S.RegisterDelphiFunction(@Sleep, 'Sleep', cdRegister);
 S.RegisterDelphiFunction(@SplitColumnsNoTrim, 'SplitColumnsNoTrim', cdRegister);
 S.RegisterDelphiFunction(@SplitColumns, 'SplitColumns', cdRegister);
 S.RegisterDelphiFunction(@StartsWithACE, 'StartsWithACE', cdRegister);
 S.RegisterDelphiFunction(@TextIsSame, 'TextIsSame', cdRegister);
 S.RegisterDelphiFunction(@TextStartsWith, 'TextStartsWith', cdRegister);
 S.RegisterDelphiFunction(@IndyUpperCase, 'IndyUpperCase', cdRegister);
 S.RegisterDelphiFunction(@IndyLowerCase, 'IndyLowerCase', cdRegister);
 S.RegisterDelphiFunction(@IndyCompareStr, 'IndyCompareStr', cdRegister);
 S.RegisterDelphiFunction(@Ticks, 'Ticks', cdRegister);
 S.RegisterDelphiFunction(@ToDo, 'ToDo', cdRegister);
 S.RegisterDelphiFunction(@TwoByteToWord, 'TwoByteToWord', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdBaseStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdBaseStream) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdExtList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdExtList) do
  begin
    RegisterMethod(@TIdExtList.Assign, 'Assign');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdCriticalSection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdCriticalSection) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdLocalEvent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdLocalEvent) do
  begin
    RegisterConstructor(@TIdLocalEvent.Create, 'Create');
    RegisterMethod(@TIdLocalEventWaitForEver_P, 'WaitForEver');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCriticalSection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCriticalSection) do
  begin
    RegisterVirtualMethod(@TCriticalSection.Acquire, 'Acquire');
    RegisterVirtualMethod(@TCriticalSection.Release, 'Release');
    RegisterMethod(@TCriticalSection.TryEnter, 'TryEnter');
    RegisterMethod(@TCriticalSection.Enter, 'Enter');
    RegisterMethod(@TCriticalSection.Leave, 'Leave');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEvent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEvent) do
  begin
    RegisterConstructor(@TEventCreate_P, 'Create');
    RegisterConstructor(@TEventCreate_P, 'Create');
    RegisterMethod(@TEvent.SetEvent, 'SetEvent');
    RegisterMethod(@TEvent.ResetEvent, 'ResetEvent');
    RegisterVirtualMethod(@TEvent.WaitFor, 'WaitFor');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFileCreateStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFileCreateStream) do
  begin
    RegisterConstructor(@TFileCreateStream.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TReadFileNonExclusiveStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TReadFileNonExclusiveStream) do
  begin
    RegisterConstructor(@TReadFileNonExclusiveStream.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TReadFileExclusiveStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TReadFileExclusiveStream) do
  begin
    RegisterConstructor(@TReadFileExclusiveStream.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAppendFileStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAppendFileStream) do
  begin
    RegisterConstructor(@TAppendFileStream.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdGlobal(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAppendFileStream(CL);
  RIRegister_TReadFileExclusiveStream(CL);
  RIRegister_TReadFileNonExclusiveStream(CL);
  RIRegister_TFileCreateStream(CL);
  RIRegister_TEvent(CL);
  RIRegister_TCriticalSection(CL);
  RIRegister_TIdLocalEvent(CL);
  RIRegister_TIdCriticalSection(CL);
  with CL.Add(EIdCorruptServicesFile) do
  with CL.Add(EIdEndOfStream) do
  with CL.Add(EIdInvalidIPv6Address) do
  RIRegister_TIdExtList(CL);
  with CL.Add(TIdExtList) do
  RIRegister_TIdBaseStream(CL);
end;

 
 
{ TPSImport_IdGlobal }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdGlobal.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdGlobal(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdGlobal.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdGlobal(ri);
  RIRegister_IdGlobal_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
