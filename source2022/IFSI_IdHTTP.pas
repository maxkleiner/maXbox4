unit IFSI_IdHTTP;
{
This file has been generated by UnitParser v0.6, written by M. Knight
just added http constructor!
expanded by max for Custom_HTTP inheritance, june 2010
}

{$I PascalScript.inc}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

type
(*----------------------------------------------------------------------------*)
  TPSImport_IdHTTP = class(TPSPlugin)
  protected
    procedure CompOnUses(CompExec: TPSScript); override;
    procedure ExecOnUses(CompExec: TPSScript); override;
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure CompileImport2(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
    procedure ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;



{ compile-time registration functions }
procedure SIRegister_EIdHTTPProtocolException(CL: TPSPascalCompiler);
procedure SIRegister_TIdCustomHTTP(CL: TPSPascalCompiler);  //change 3.1
procedure SIRegister_TIdHTTP(CL: TPSPascalCompiler);
procedure SIRegister_TIdHTTPProtocol(CL: TPSPascalCompiler);
procedure SIRegister_TIdHTTPRequest(CL: TPSPascalCompiler);
procedure SIRegister_TIdHTTPResponse(CL: TPSPascalCompiler);
procedure SIRegister_IdHTTP(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_EIdHTTPProtocolException(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdCustomHTTP(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdHTTP(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdHTTPProtocol(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdHTTPRequest(CL: TPSRuntimeClassImporter);
procedure RIRegister_TIdHTTPResponse(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdHTTP(CL: TPSRuntimeClassImporter);



implementation


uses
   IdException
  ,IdAssignedNumbers
  ,IdHeaderList
  ,IdHTTPHeaderInfo
  ,IdSSLOpenSSL
  ,IdTCPClient
  ,IdURI
  ,IdCookie
  ,IdCookieManager
  ,IdAuthentication
  ,IdAuthenticationManager
  ,IdMultipartFormData
  ,IdHTTP
  ;


{ compile-time importer function }
(*----------------------------------------------------------------------------
 Sometimes the CL.AddClassN() fails to correctly register a class,
 for unknown (at least to me) reasons
 So, you may use the below RegClassS() replacing the CL.AddClassN()
 of the various SIRegister_XXXX calls
 ----------------------------------------------------------------------------*)
function RegClassS(CL: TPSPascalCompiler; const InheritsFrom, Classname: string): TPSCompileTimeClass;
begin
  Result := CL.FindClass(Classname);
  if Result = nil then
    Result := CL.AddClassN(CL.FindClass(InheritsFrom), Classname)
  else Result.ClassInheritsFrom := CL.FindClass(InheritsFrom);
end;


(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function BoolToStr(value : boolean) : string;
Begin If value then Result := 'TRUE' else Result := 'FALSE' End;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EIdHTTPProtocolException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'EIdProtocolReplyError', 'EIdHTTPProtocolException') do
  with CL.AddClassN(CL.FindClass('EIdProtocolReplyError'),'EIdHTTPProtocolException') do
  begin
    RegisterMethod('Constructor CreateError( const anErrCode : Integer; const asReplyMessage : string; const asErrorMessage : string)');
    RegisterProperty('ErrorMessage', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHTTP(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdCustomHTTP', 'TIdHTTP') do
  with CL.AddClassN(CL.FindClass('TIdCustomHTTP'),'TIdHTTP') do begin
    RegisterPublishedProperties;
    RegisterProperty('CookieManager', 'TIdCookieManager', iptrw);
    RegisterProperty('RedirectMaximum', 'Integer', iptrw);
    RegisterProperty('ProxyParams', 'TIdProxyConnectionInfo', iptrw);
    RegisterProperty('Request', 'TIdHTTPRequest', iptrw);
    RegisterProperty('HTTPOptions', 'TIdHTTPOptions', iptrw);
    RegisterProperty('Host', 'String', iptrw);
    RegisterProperty('UserName', 'String', iptrw);
    RegisterProperty('Password', 'String', iptrw);
    RegisterProperty('Port', 'Integer', iptrw);
    RegisterProperty('HandleRedirects', 'Boolean', iptrw);
    RegisterProperty('AllowCookies', 'Boolean', iptrw);
    //RegisterProperty('HandleRedirects', 'Boolean', iptrw);
    RegisterProperty('ProtocolVersion', 'TIdHTTPProtocolVersion', iptrw);

  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdCustomHTTP(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPClient', 'TIdCustomHTTP') do
  with CL.AddClassN(CL.FindClass('TIdTCPClient'),'TIdCustomHTTP') do begin
   //after correction by max
   RegisterMethod('Constructor Create(AOwner: TComponent);');
   //RegisterMethod('Constructor Create(AParent: TIdCustomHTTP);');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure DoRequest( const AMethod : TIdHTTPMethod; AURL : string; const ASource, AResponseContent : TStream)');
    RegisterMethod('Procedure Options1( AURL : string);');
    RegisterMethod('Procedure Get1( AURL : string; const AResponseContent : TStream);');
    RegisterMethod('Function Get2( AURL : string) : string;');
    RegisterMethod('Function Get( AURL : string) : string;');
     RegisterMethod('Procedure Trace1( AURL : string; const AResponseContent : TStream);');
    RegisterMethod('Function Trace2( AURL : string) : string;');
    RegisterMethod('Procedure Head( AURL : string)');
    RegisterMethod('Function Post1( AURL : string; const ASource : TStrings) : string;');
    RegisterMethod('Function Post( AURL : string; const ASource : TStrings) : string;');
    RegisterMethod('Function Post2( AURL : string; const ASource : TStream) : string;');
    RegisterMethod('Function Post3( AURL : string; const ASource : TIdMultiPartFormDataStream) : string;');
    RegisterMethod('Procedure Post4( AURL : string; const ASource : TStrings; const AResponseContent : TStream);');
    RegisterMethod('Procedure Post5( AURL : string; const ASource, AResponseContent : TStream);');
    RegisterMethod('Procedure Post6( AURL : string; const ASource : TIdMultiPartFormDataStream; AResponseContent : TStream);');
    RegisterMethod('Function Put1( AURL : string; const ASource : TStream) : string;');
    RegisterMethod('Function Put( AURL : string; const ASource : TStream) : string;');
    RegisterMethod('Procedure Put2( AURL : string; const ASource, AResponseContent : TStream);');
    RegisterProperty('ResponseCode', 'Integer', iptr);
    RegisterProperty('ResponseText', 'string', iptr);
    RegisterProperty('Response', 'TIdHTTPResponse', iptr);
    RegisterProperty('URL', 'TIdURI', iptr);
    RegisterProperty('AuthRetries', 'Integer', iptrw);
    RegisterProperty('AllowCookies', 'Boolean', iptrw);
    RegisterProperty('HandleRedirects', 'Boolean', iptrw);
    RegisterProperty('ProtocolVersion', 'TIdHTTPProtocolVersion', iptrw);
    RegisterProperty('RedirectMaximum', 'Integer', iptrw);
    RegisterProperty('ProxyParams', 'TIdProxyConnectionInfo', iptrw);
    RegisterProperty('Request', 'TIdHTTPRequest', iptrw);
    RegisterProperty('HTTPOptions', 'TIdHTTPOptions', iptrw);
    RegisterProperty('OnRedirect', 'TIdHTTPOnRedirectEvent', iptrw);
    //RegisterProperty('OnSelectAuthorization', 'TIdOnSelectAuthorization', iptrw);
    //RegisterProperty('OnSelectProxyAuthorization', 'TIdOnSelectAuthorization', iptrw);
    RegisterProperty('OnAuthorization', 'TIdOnAuthorization', iptrw);
    RegisterProperty('OnProxyAuthorization', 'TIdOnAuthorization', iptrw);
    RegisterProperty('CookieManager', 'TIdCookieManager', iptrw);
    RegisterProperty('AuthenticationManager', 'TIdAuthenticationManager', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHTTPProtocol(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TIdHTTPProtocol') do
  with CL.AddClassN(CL.FindClass('TObject'),'TIdHTTPProtocol') do begin
    RegisterProperty('FHTTP', 'TIdCustomHTTP', iptrw);
    RegisterProperty('FRequest', 'TIdHTTPRequest', iptrw);
    RegisterProperty('FResponse', 'TIdHTTPResponse', iptrw);
    RegisterMethod('Constructor Create( AConnection : TIdCustomHTTP)');
    RegisterMethod('Procedure Free');
     RegisterMethod('Function ProcessResponse : TIdHTTPWhatsNext');
    RegisterMethod('Procedure BuildAndSendRequest( AURI : TIdURI)');
    RegisterMethod('Procedure RetrieveHeaders');
    RegisterProperty('Request', 'TIdHTTPRequest', iptr);
    RegisterProperty('Response', 'TIdHTTPResponse', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHTTPRequest(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdRequestHeaderInfo', 'TIdHTTPRequest') do
  with CL.AddClassN(CL.FindClass('TIdRequestHeaderInfo'),'TIdHTTPRequest') do begin
    RegisterMethod('Constructor Create( AHTTP : TIdCustomHTTP)');
    RegisterProperty('URL', 'string', iptrw);
    RegisterProperty('Method', 'TIdHTTPMethod', iptrw);
    RegisterProperty('Source', 'TStream', iptrw);
    RegisterProperty('UseProxy', 'TIdHTTPConnectionType', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdHTTPResponse(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdResponseHeaderInfo', 'TIdHTTPResponse') do
  with CL.AddClassN(CL.FindClass('TIdResponseHeaderInfo'),'TIdHTTPResponse') do begin
    RegisterMethod('Constructor Create( AParent : TIdCustomHTTP)');
    RegisterProperty('KeepAlive', 'Boolean', iptrw);
    RegisterProperty('ResponseText', 'string', iptrw);
    RegisterProperty('ResponseCode', 'Integer', iptrw);
    RegisterProperty('ResponseVersion', 'TIdHTTPProtocolVersion', iptrw);
    RegisterProperty('ContentStream', 'TStream', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdHTTP(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TIdHTTPMethod', '( hmHead, hmGet, hmPost, hmOptions, hmTrace, hm'
   +'Put, hmDelete, hmConnect )');
  CL.AddTypeS('TIdHTTPWhatsNext', '( wnGoToURL, wnJustExit, wnDontKnow, wnReadA'
   +'ndGo, wnAuthRequest )');
  CL.AddTypeS('TIdHTTPConnectionType', '(ctNormal, ctSSL, ctProxy, ctSSLProxy)');
  CL.AddTypeS('TIdHTTPOption', '( hoInProcessAuth, hoKeepOrigProtocol, hoForceEncodeParams )');
  CL.AddTypeS('TIdHTTPOptions', 'set of TIdHTTPOption');
  CL.AddTypeS('TIdHTTPProtocolVersion', '( pv1_0, pv1_1 )');
  CL.AddTypeS('TIdHTTPOnRedirectEvent', 'Procedure ( Sender : TObject; var dest'
   +' : string; var NumRedirect : Integer; var Handled : boolean; var VMethod : TIdHTTPMethod)');
  //CL.AddTypeS('TIdOnSelectAuthorization', 'Procedure ( Sender : TObject;'+
   //'var AuthenticationClass : TIdAuthenticationClass; AuthInfo : TIdHeaderList)');
  //CL.AddTypeS('TIdOnAuthorization', 'Procedure ( Sender : TObject; Authenticati'
  // +'on : TIdAuthentication; var Handled : boolean)');
 //CL.AddConstantN('Id_TIdHTTP_ProtocolVersion','string').setString( pv1_1);
  //CL.AddConstantN('Id_TIdHTTP_ProtocolVersion','TIdHTTPProtocolVersion').SetString( pv1_1);

  CL.AddConstantN('Id_TIdHTTP_RedirectMax','LongInt').SetInt( 15);
 //CL.AddConstantN('Id_TIdHTTP_HandleRedirects','Boolean').BoolToStr(False);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TIdCustomHTTP');
  SIRegister_TIdHTTPResponse(CL);
  SIRegister_TIdHTTPRequest(CL);
  SIRegister_TIdHTTPProtocol(CL);
  SIRegister_TIdCustomHTTP(CL);
  SIRegister_TIdHTTP(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EIdUnknownProtocol');
  SIRegister_EIdHTTPProtocolException(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure EIdHTTPProtocolExceptionErrorMessage_R(Self: EIdHTTPProtocolException; var T: string);
begin T := Self.ErrorMessage; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPAuthenticationManager_W(Self: TIdCustomHTTP; const T: TIdAuthenticationManager);
begin Self.AuthenticationManager := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPAuthenticationManager_R(Self: TIdCustomHTTP; var T: TIdAuthenticationManager);
begin T := Self.AuthenticationManager; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPCookieManager_W(Self: TIdCustomHTTP; const T: TIdCookieManager);
begin Self.CookieManager := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPCookieManager_R(Self: TIdCustomHTTP; var T: TIdCookieManager);
begin T := Self.CookieManager; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnProxyAuthorization_W(Self: TIdCustomHTTP; const T: TIdOnAuthorization);
begin Self.OnProxyAuthorization := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnProxyAuthorization_R(Self: TIdCustomHTTP; var T: TIdOnAuthorization);
begin T := Self.OnProxyAuthorization; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnAuthorization_W(Self: TIdCustomHTTP; const T: TIdOnAuthorization);
begin Self.OnAuthorization := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnAuthorization_R(Self: TIdCustomHTTP; var T: TIdOnAuthorization);
begin T := Self.OnAuthorization; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnSelectProxyAuthorization_W(Self: TIdCustomHTTP; const T: TIdOnSelectAuthorization);
begin Self.OnSelectProxyAuthorization := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnSelectProxyAuthorization_R(Self: TIdCustomHTTP; var T: TIdOnSelectAuthorization);
begin T := Self.OnSelectProxyAuthorization; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnSelectAuthorization_W(Self: TIdCustomHTTP; const T: TIdOnSelectAuthorization);
begin Self.OnSelectAuthorization := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnSelectAuthorization_R(Self: TIdCustomHTTP; var T: TIdOnSelectAuthorization);
begin T := Self.OnSelectAuthorization; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnRedirect_W(Self: TIdCustomHTTP; const T: TIdHTTPOnRedirectEvent);
begin Self.OnRedirect := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPOnRedirect_R(Self: TIdCustomHTTP; var T: TIdHTTPOnRedirectEvent);
begin T := Self.OnRedirect; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPHTTPOptions_W(Self: TIdCustomHTTP; const T: TIdHTTPOptions);
begin Self.HTTPOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPHTTPOptions_R(Self: TIdCustomHTTP; var T: TIdHTTPOptions);
begin T := Self.HTTPOptions; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPRequest_W(Self: TIdCustomHTTP; const T: TIdHTTPRequest);
begin Self.Request := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPRequest_R(Self: TIdCustomHTTP; var T: TIdHTTPRequest);
begin T := Self.Request; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPProxyParams_W(Self: TIdCustomHTTP; const T: TIdProxyConnectionInfo);
begin Self.ProxyParams := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPProxyParams_R(Self: TIdCustomHTTP; var T: TIdProxyConnectionInfo);
begin T := Self.ProxyParams; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPRedirectMaximum_W(Self: TIdCustomHTTP; const T: Integer);
begin Self.RedirectMaximum := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPRedirectMaximum_R(Self: TIdCustomHTTP; var T: Integer);
begin T := Self.RedirectMaximum; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPProtocolVersion_W(Self: TIdCustomHTTP; const T: TIdHTTPProtocolVersion);
begin Self.ProtocolVersion := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPProtocolVersion_R(Self: TIdCustomHTTP; var T: TIdHTTPProtocolVersion);
begin T := Self.ProtocolVersion; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPHandleRedirects_W(Self: TIdCustomHTTP; const T: Boolean);
begin Self.HandleRedirects := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPHandleRedirects_R(Self: TIdCustomHTTP; var T: Boolean);
begin T := Self.HandleRedirects; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPAllowCookies_W(Self: TIdCustomHTTP; const T: Boolean);
begin Self.AllowCookies := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPAllowCookies_R(Self: TIdCustomHTTP; var T: Boolean);
begin T := Self.AllowCookies; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPAuthRetries_W(Self: TIdCustomHTTP; const T: Integer);
begin //Self.AuthRetries := T;  d2007
 end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPAuthRetries_R(Self: TIdCustomHTTP; var T: Integer);
begin T := Self.AuthRetries; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPURL_R(Self: TIdCustomHTTP; var T: TIdURI);
begin T := Self.URL; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPResponse_R(Self: TIdCustomHTTP; var T: TIdHTTPResponse);
begin T := Self.Response; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPResponseText_R(Self: TIdCustomHTTP; var T: string);
begin T := Self.ResponseText; end;

(*----------------------------------------------------------------------------*)
procedure TIdCustomHTTPResponseCode_R(Self: TIdCustomHTTP; var T: Integer);
begin T := Self.ResponseCode; end;

(*----------------------------------------------------------------------------*)
Procedure TIdCustomHTTPPut2_P(Self: TIdCustomHTTP;  AURL : string; const ASource, AResponseContent : TStream);
Begin Self.Put(AURL, ASource, AResponseContent); END;

(*----------------------------------------------------------------------------*)
Function TIdCustomHTTPPut1_P(Self: TIdCustomHTTP;  AURL : string; const ASource : TStream) : string;
Begin Result := Self.Put(AURL, ASource); END;

(*----------------------------------------------------------------------------*)
Procedure TIdCustomHTTPPost6_P(Self: TIdCustomHTTP;  AURL : string; const ASource : TIdMultiPartFormDataStream; AResponseContent : TStream);
Begin Self.Post(AURL, ASource, AResponseContent); END;

(*----------------------------------------------------------------------------*)
Procedure TIdCustomHTTPPost5_P(Self: TIdCustomHTTP;  AURL : string; const ASource, AResponseContent : TStream);
Begin Self.Post(AURL, ASource, AResponseContent); END;

(*----------------------------------------------------------------------------*)
Procedure TIdCustomHTTPPost4_P(Self: TIdCustomHTTP;  AURL : string; const ASource : TStrings; const AResponseContent : TStream);
Begin Self.Post(AURL, ASource, AResponseContent); END;

(*----------------------------------------------------------------------------*)
Function TIdCustomHTTPPost3_P(Self: TIdCustomHTTP;  AURL : string; const ASource : TIdMultiPartFormDataStream) : string;
Begin Result := Self.Post(AURL, ASource); END;

(*----------------------------------------------------------------------------*)
Function TIdCustomHTTPPost2_P(Self: TIdCustomHTTP;  AURL : string; const ASource : TStream) : string;
Begin Result := Self.Post(AURL, ASource); END;

(*----------------------------------------------------------------------------*)
Function TIdCustomHTTPPost1_P(Self: TIdCustomHTTP;  AURL : string; const ASource : TStrings) : string;
Begin Result := Self.Post(AURL, ASource); END;

(*----------------------------------------------------------------------------*)
Function TIdCustomHTTPTrace2_P(Self: TIdCustomHTTP;  AURL : string) : string;
Begin Result := Self.Trace(AURL); END;

(*----------------------------------------------------------------------------*)
Procedure TIdCustomHTTPTrace1_P(Self: TIdCustomHTTP;  AURL : string; const AResponseContent : TStream);
Begin Self.Trace(AURL, AResponseContent); END;

(*----------------------------------------------------------------------------*)
Function TIdCustomHTTPGet2_P(Self: TIdCustomHTTP;  AURL : string) : string;
Begin Result := Self.Get(AURL); END;

(*----------------------------------------------------------------------------*)
Procedure TIdCustomHTTPGet1_P(Self: TIdCustomHTTP;  AURL : string; const AResponseContent : TStream);
Begin Self.Get(AURL, AResponseContent); END;

(*----------------------------------------------------------------------------*)
Procedure TIdCustomHTTPOptions1_P(Self: TIdCustomHTTP;  AURL : string);
Begin Self.Options(AURL); END;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolResponse_R(Self: TIdHTTPProtocol; var T: TIdHTTPResponse);
begin T := Self.Response; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolRequest_R(Self: TIdHTTPProtocol; var T: TIdHTTPRequest);
begin T := Self.Request; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolFResponse_W(Self: TIdHTTPProtocol; const T: TIdHTTPResponse);
Begin Self.FResponse := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolFResponse_R(Self: TIdHTTPProtocol; var T: TIdHTTPResponse);
Begin T := Self.FResponse; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolFRequest_W(Self: TIdHTTPProtocol; const T: TIdHTTPRequest);
Begin Self.FRequest := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolFRequest_R(Self: TIdHTTPProtocol; var T: TIdHTTPRequest);
Begin T := Self.FRequest; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolFHTTP_W(Self: TIdHTTPProtocol; const T: TIdCustomHTTP);
Begin Self.FHTTP := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPProtocolFHTTP_R(Self: TIdHTTPProtocol; var T: TIdCustomHTTP);
Begin T := Self.FHTTP; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPRequestUseProxy_R(Self: TIdHTTPRequest; var T: TIdHTTPConnectionType);
begin T := Self.UseProxy; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPRequestSource_W(Self: TIdHTTPRequest; const T: TStream);
begin Self.Source := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPRequestSource_R(Self: TIdHTTPRequest; var T: TStream);
begin T := Self.Source; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPRequestMethod_W(Self: TIdHTTPRequest; const T: TIdHTTPMethod);
begin Self.Method := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPRequestMethod_R(Self: TIdHTTPRequest; var T: TIdHTTPMethod);
begin T := Self.Method; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPRequestURL_W(Self: TIdHTTPRequest; const T: string);
begin Self.URL := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPRequestURL_R(Self: TIdHTTPRequest; var T: string);
begin T := Self.URL; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseContentStream_W(Self: TIdHTTPResponse; const T: TStream);
begin Self.ContentStream := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseContentStream_R(Self: TIdHTTPResponse; var T: TStream);
begin T := Self.ContentStream; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseResponseVersion_W(Self: TIdHTTPResponse; const T: TIdHTTPProtocolVersion);
begin Self.ResponseVersion := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseResponseVersion_R(Self: TIdHTTPResponse; var T: TIdHTTPProtocolVersion);
begin T := Self.ResponseVersion; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseResponseCode_W(Self: TIdHTTPResponse; const T: Integer);
begin Self.ResponseCode := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseResponseCode_R(Self: TIdHTTPResponse; var T: Integer);
begin T := Self.ResponseCode; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseResponseText_W(Self: TIdHTTPResponse; const T: string);
begin Self.ResponseText := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseResponseText_R(Self: TIdHTTPResponse; var T: string);
begin T := Self.ResponseText; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseKeepAlive_W(Self: TIdHTTPResponse; const T: Boolean);
begin Self.KeepAlive := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdHTTPResponseKeepAlive_R(Self: TIdHTTPResponse; var T: Boolean);
begin T := Self.KeepAlive; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EIdHTTPProtocolException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EIdHTTPProtocolException) do begin
    RegisterVirtualConstructor(@EIdHTTPProtocolException.CreateError, 'CreateError');
    RegisterPropertyHelper(@EIdHTTPProtocolExceptionErrorMessage_R,nil,'ErrorMessage');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdHTTP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHTTP) do begin  //v3.0
    RegisterVirtualConstructor(@TIdCustomHTTP.Create, 'Create');
    RegisterPropertyHelper(@TIdCustomHTTPProxyParams_R,@TIdCustomHTTPProxyParams_W,'ProxyParams');

  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdCustomHTTP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdCustomHTTP) do begin
    //RegisterVirtualMethod(@TIdCustomHTTP.DoRequest, 'DoRequest'); d2007
    RegisterVirtualConstructor(@TIdCustomHTTP.Create, 'Create');
    RegisterMethod(@TIdCustomHTTP.Destroy, 'Free');
    RegisterMethod(@TIdCustomHTTPOptions1_P, 'Options1');
    RegisterMethod(@TIdCustomHTTPGet1_P, 'Get1');
    RegisterMethod(@TIdCustomHTTPGet2_P, 'Get2');
    RegisterMethod(@TIdCustomHTTPGet2_P, 'Get');
     RegisterMethod(@TIdCustomHTTPTrace1_P, 'Trace1');
    RegisterMethod(@TIdCustomHTTPTrace2_P, 'Trace2');
    RegisterMethod(@TIdCustomHTTP.Head, 'Head');
    RegisterMethod(@TIdCustomHTTPPost1_P, 'Post1');
    RegisterMethod(@TIdCustomHTTPPost1_P, 'Post');
    RegisterMethod(@TIdCustomHTTPPost2_P, 'Post2');
    RegisterMethod(@TIdCustomHTTPPost3_P, 'Post3');
    RegisterMethod(@TIdCustomHTTPPost4_P, 'Post4');
    RegisterMethod(@TIdCustomHTTPPost5_P, 'Post5');
    RegisterMethod(@TIdCustomHTTPPost6_P, 'Post6');
    RegisterMethod(@TIdCustomHTTPPut1_P, 'Put1');
    RegisterMethod(@TIdCustomHTTPPut1_P, 'Put');
    RegisterMethod(@TIdCustomHTTPPut2_P, 'Put2');
    RegisterPropertyHelper(@TIdCustomHTTPResponseCode_R,nil,'ResponseCode');
    RegisterPropertyHelper(@TIdCustomHTTPResponseText_R,nil,'ResponseText');
    RegisterPropertyHelper(@TIdCustomHTTPResponse_R,nil,'Response');
    RegisterPropertyHelper(@TIdCustomHTTPURL_R,nil,'URL');
    RegisterPropertyHelper(@TIdCustomHTTPAuthRetries_R,@TIdCustomHTTPAuthRetries_W,'AuthRetries');
    RegisterPropertyHelper(@TIdCustomHTTPAllowCookies_R,@TIdCustomHTTPAllowCookies_W,'AllowCookies');
    RegisterPropertyHelper(@TIdCustomHTTPHandleRedirects_R,@TIdCustomHTTPHandleRedirects_W,'HandleRedirects');
    RegisterPropertyHelper(@TIdCustomHTTPProtocolVersion_R,@TIdCustomHTTPProtocolVersion_W,'ProtocolVersion');
    RegisterPropertyHelper(@TIdCustomHTTPRedirectMaximum_R,@TIdCustomHTTPRedirectMaximum_W,'RedirectMaximum');
    RegisterPropertyHelper(@TIdCustomHTTPProxyParams_R,@TIdCustomHTTPProxyParams_W,'ProxyParams');
    RegisterPropertyHelper(@TIdCustomHTTPRequest_R,@TIdCustomHTTPRequest_W,'Request');
    RegisterPropertyHelper(@TIdCustomHTTPHTTPOptions_R,@TIdCustomHTTPHTTPOptions_W,'HTTPOptions');
    RegisterPropertyHelper(@TIdCustomHTTPOnRedirect_R,@TIdCustomHTTPOnRedirect_W,'OnRedirect');
    RegisterPropertyHelper(@TIdCustomHTTPOnSelectAuthorization_R,@TIdCustomHTTPOnSelectAuthorization_W,'OnSelectAuthorization');
    RegisterPropertyHelper(@TIdCustomHTTPOnSelectProxyAuthorization_R,@TIdCustomHTTPOnSelectProxyAuthorization_W,'OnSelectProxyAuthorization');
    RegisterPropertyHelper(@TIdCustomHTTPOnAuthorization_R,@TIdCustomHTTPOnAuthorization_W,'OnAuthorization');
    RegisterPropertyHelper(@TIdCustomHTTPOnProxyAuthorization_R,@TIdCustomHTTPOnProxyAuthorization_W,'OnProxyAuthorization');
    RegisterPropertyHelper(@TIdCustomHTTPCookieManager_R,@TIdCustomHTTPCookieManager_W,'CookieManager');
    RegisterPropertyHelper(@TIdCustomHTTPAuthenticationManager_R,@TIdCustomHTTPAuthenticationManager_W,'AuthenticationManager');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdHTTPProtocol(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHTTPProtocol) do begin
    RegisterPropertyHelper(@TIdHTTPProtocolFHTTP_R,@TIdHTTPProtocolFHTTP_W,'FHTTP');
    RegisterPropertyHelper(@TIdHTTPProtocolFRequest_R,@TIdHTTPProtocolFRequest_W,'FRequest');
    RegisterPropertyHelper(@TIdHTTPProtocolFResponse_R,@TIdHTTPProtocolFResponse_W,'FResponse');
    RegisterConstructor(@TIdHTTPProtocol.Create, 'Create');
    RegisterMethod(@TIdHTTPProtocol.Destroy, 'Free');
    RegisterMethod(@TIdHTTPProtocol.ProcessResponse, 'ProcessResponse');
    RegisterMethod(@TIdHTTPProtocol.BuildAndSendRequest, 'BuildAndSendRequest');
    RegisterMethod(@TIdHTTPProtocol.RetrieveHeaders, 'RetrieveHeaders');
    RegisterPropertyHelper(@TIdHTTPProtocolRequest_R,nil,'Request');
    RegisterPropertyHelper(@TIdHTTPProtocolResponse_R,nil,'Response');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdHTTPRequest(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHTTPRequest) do begin
    RegisterVirtualConstructor(@TIdHTTPRequest.Create, 'Create');
    RegisterPropertyHelper(@TIdHTTPRequestURL_R,@TIdHTTPRequestURL_W,'URL');
    RegisterPropertyHelper(@TIdHTTPRequestMethod_R,@TIdHTTPRequestMethod_W,'Method');
    RegisterPropertyHelper(@TIdHTTPRequestSource_R,@TIdHTTPRequestSource_W,'Source');
    RegisterPropertyHelper(@TIdHTTPRequestUseProxy_R,nil,'UseProxy');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdHTTPResponse(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdHTTPResponse) do begin
    RegisterVirtualConstructor(@TIdHTTPResponse.Create, 'Create');
    RegisterPropertyHelper(@TIdHTTPResponseKeepAlive_R,@TIdHTTPResponseKeepAlive_W,'KeepAlive');
    RegisterPropertyHelper(@TIdHTTPResponseResponseText_R,@TIdHTTPResponseResponseText_W,'ResponseText');
    RegisterPropertyHelper(@TIdHTTPResponseResponseCode_R,@TIdHTTPResponseResponseCode_W,'ResponseCode');
    RegisterPropertyHelper(@TIdHTTPResponseResponseVersion_R,@TIdHTTPResponseResponseVersion_W,'ResponseVersion');
    RegisterPropertyHelper(@TIdHTTPResponseContentStream_R,@TIdHTTPResponseContentStream_W,'ContentStream');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdHTTP(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdCustomHTTP) do
  RIRegister_TIdHTTPResponse(CL);
  RIRegister_TIdHTTPRequest(CL);
  RIRegister_TIdHTTPProtocol(CL);
  RIRegister_TIdCustomHTTP(CL);
  RIRegister_TIdHTTP(CL);
  with CL.Add(EIdUnknownProtocol) do
  RIRegister_EIdHTTPProtocolException(CL);
end;

 
 
{ TPSImport_IdHTTP }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHTTP.CompOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHTTP.ExecOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHTTP.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdHTTP(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHTTP.CompileImport2(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHTTP.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdHTTP(ri);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdHTTP.ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  { nothing } 
end;
 
 
end.
