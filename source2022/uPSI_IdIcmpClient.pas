unit uPSI_IdIcmpClient;
{
This file has been generated by UnitParser v0.7, written by M. Knight
   add host, port and free by max    - fix to rawbase
}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdIcmpClient = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIdIcmpClient(CL: TPSPascalCompiler);
procedure SIRegister_IdIcmpClient(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdIcmpClient(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdIcmpClient(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IdGlobal
  ,IdRawBase
  ,IdRawClient
  ,IdStack
  ,IdStackConsts
  ,IdIcmpClient
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IdIcmpClient]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdIcmpClient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdRawClient', 'TIdIcmpClient') do
  with CL.AddClassN(CL.FindClass('TIdRawBase'),'TIdRawClient') do
  with CL.AddClassN(CL.FindClass('TIdRawClient'),'TIdIcmpClient') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Free;');
    RegisterMethod('Procedure Ping( ABuffer : String; SequenceID : word)');
    RegisterMethod('Function Receive( ATimeOut : Integer) : TReplyStatus');
    RegisterProperty('Host', 'String', iptrw);
    RegisterProperty('Port', 'Integer', iptrw);

    RegisterProperty('ReplyStatus', 'TReplyStatus', iptr);
    RegisterProperty('ReplyData', 'string', iptr);
    RegisterProperty('OnReply', 'TOnReplyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdIcmpClient(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('DEF_PACKET_SIZE','LongInt').SetInt( 32);
 CL.AddConstantN('MAX_PACKET_SIZE','LongInt').SetInt( 1024);
 CL.AddConstantN('ICMP_MIN','LongInt').SetInt( 8);
 CL.AddConstantN('iDEFAULTPACKETSIZE','LongInt').SetInt( 128);
 CL.AddConstantN('iDEFAULTREPLYBUFSIZE','LongInt').SetInt( 1024);
 CL.AddConstantN('Id_TIDICMP_ReceiveTimeout','LongInt').SetInt( 5000);
  CL.AddTypeS('TReplyStatusTypes', '( rsEcho, rsError, rsTimeOut, rsErrorUnreac'
   +'hable, rsErrorTTLExceeded )');
  CL.AddTypeS('TReplyStatus', 'record BytesReceived : integer; FromIpAddress : '
   +'string; MsgType : byte; SequenceId : word; MsRoundTripTime : longword; Tim'
   +'eToLive : byte; ReplyStatusType : TReplyStatusTypes; end');
  CL.AddTypeS('TOnReplyEvent', 'Procedure ( ASender : TComponent; const AReplyS'
   +'tatus : TReplyStatus)');
  SIRegister_TIdIcmpClient(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdIcmpClientOnReply_W(Self: TIdIcmpClient; const T: TOnReplyEvent);
begin Self.OnReply := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdIcmpClientOnReply_R(Self: TIdIcmpClient; var T: TOnReplyEvent);
begin T := Self.OnReply; end;

(*----------------------------------------------------------------------------*)
procedure TIdIcmpClientReplyData_R(Self: TIdIcmpClient; var T: string);
begin T := Self.ReplyData; end;

(*----------------------------------------------------------------------------*)
procedure TIdIcmpClientReplyStatus_R(Self: TIdIcmpClient; var T: TReplyStatus);
begin T := Self.ReplyStatus; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdIcmpClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdIcmpClient) do
  begin
    RegisterConstructor(@TIdIcmpClient.Create, 'Create');
    RegisterMethod(@TIdIcmpClient.Destroy, 'Free');

    RegisterMethod(@TIdIcmpClient.Ping, 'Ping');
    RegisterMethod(@TIdIcmpClient.Receive, 'Receive');
    RegisterPropertyHelper(@TIdIcmpClientReplyStatus_R,nil,'ReplyStatus');
    RegisterPropertyHelper(@TIdIcmpClientReplyData_R,nil,'ReplyData');
    RegisterPropertyHelper(@TIdIcmpClientOnReply_R,@TIdIcmpClientOnReply_W,'OnReply');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdIcmpClient(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdIcmpClient(CL);
end;

 
 
{ TPSImport_IdIcmpClient }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdIcmpClient.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdIcmpClient(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdIcmpClient.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdIcmpClient(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
