unit IFSI_IdTCPClient;
{
This file has been generated by UnitParser v0.6, written by M. Knight
and updated by NP. v/d Spek.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok''s conv unility
expanded by max for FTP inheritance, june 2010
constructor for tcpclient, november 2013

}
{$I PascalScript.inc}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IdTCPClient = class(TPSPlugin)
  protected
    procedure CompOnUses(CompExec: TPSScript); override;
    procedure ExecOnUses(CompExec: TPSScript); override;
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure CompileImport2(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
    procedure ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 

{ compile-time registration functions }
procedure SIRegister_TIdTCPClient(CL: TPSPascalCompiler);
procedure SIRegister_IdTCPClient(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIdTCPClient(CL: TPSRuntimeClassImporter);
procedure RIRegister_IdTCPClient(CL: TPSRuntimeClassImporter);



implementation


uses
   IdStack
  ,IdException
  ,IdGlobal
  ,IdTCPConnection
  ,IdTCPClient
  ;
 
 
{ compile-time importer function }
(*----------------------------------------------------------------------------
 Sometimes the CL.AddClassN() fails to correctly register a class,
 for unknown (at least to me) reasons
 So, you may use the below RegClassS() replacing the CL.AddClassN()
 of the various SIRegister_XXXX calls
 ----------------------------------------------------------------------------*)
function RegClassS(CL: TPSPascalCompiler; const InheritsFrom, Classname: string): TPSCompileTimeClass;
begin
  Result := CL.FindClass(Classname);
  if Result = nil then
    Result := CL.AddClassN(CL.FindClass(InheritsFrom), Classname)
  else Result.ClassInheritsFrom := CL.FindClass(InheritsFrom);
end;


(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIdTCPClient(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TIdTCPConnection', 'TIdTCPClient') do
  with CL.AddClassN(CL.FindClass('TIdTCPConnection'),'TIdTCPClient') do begin
    RegisterMethod('Constructor Create(AOwner: TComponent)');
     RegisterMethod('Procedure Free');
      RegisterMethod('Procedure Connect( const ATimeout : Integer)');
    RegisterMethod('Function ConnectAndGetAll : string');
    RegisterProperty('BoundPortMax', 'Integer', iptrw);
    RegisterProperty('BoundPortMin', 'Integer', iptrw);
    RegisterProperty('BoundIP', 'string', iptrw);
    RegisterProperty('BoundPort', 'Integer', iptrw);
    RegisterProperty('Host', 'string', iptrw);
    RegisterProperty('OnConnected', 'TNotifyEvent', iptrw);
    RegisterProperty('Port', 'integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IdTCPClient(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('BoundPortDefault','LongInt').SetInt( 0);
  SIRegister_TIdTCPClient(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TIdTCPClientPort_W(Self: TIdTCPClient; const T: integer);
begin Self.Port := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientPort_R(Self: TIdTCPClient; var T: integer);
begin T := Self.Port; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientOnConnected_W(Self: TIdTCPClient; const T: TNotifyEvent);
begin Self.OnConnected := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientOnConnected_R(Self: TIdTCPClient; var T: TNotifyEvent);
begin T := Self.OnConnected; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientHost_W(Self: TIdTCPClient; const T: string);
begin Self.Host := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientHost_R(Self: TIdTCPClient; var T: string);
begin T := Self.Host; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundPort_W(Self: TIdTCPClient; const T: Integer);
begin Self.BoundPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundPort_R(Self: TIdTCPClient; var T: Integer);
begin T := Self.BoundPort; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundIP_W(Self: TIdTCPClient; const T: string);
begin Self.BoundIP := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundIP_R(Self: TIdTCPClient; var T: string);
begin T := Self.BoundIP; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundPortMin_W(Self: TIdTCPClient; const T: Integer);
begin Self.BoundPortMin := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundPortMin_R(Self: TIdTCPClient; var T: Integer);
begin T := Self.BoundPortMin; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundPortMax_W(Self: TIdTCPClient; const T: Integer);
begin Self.BoundPortMax := T; end;

(*----------------------------------------------------------------------------*)
procedure TIdTCPClientBoundPortMax_R(Self: TIdTCPClient; var T: Integer);
begin T := Self.BoundPortMax; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIdTCPClient(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIdTCPClient) do begin
    RegisterVirtualMethod(@TIdTCPClient.Connect, 'Connect');
    RegisterConstructor(@TIdTCPClient.Create, 'Create');
    RegisterMethod(@TIdTCPClient.Destroy, 'Free');
    RegisterVirtualMethod(@TIdTCPClient.ConnectAndGetAll, 'ConnectAndGetAll');
    RegisterPropertyHelper(@TIdTCPClientBoundPortMax_R,@TIdTCPClientBoundPortMax_W,'BoundPortMax');
    RegisterPropertyHelper(@TIdTCPClientBoundPortMin_R,@TIdTCPClientBoundPortMin_W,'BoundPortMin');
    RegisterPropertyHelper(@TIdTCPClientBoundIP_R,@TIdTCPClientBoundIP_W,'BoundIP');
    RegisterPropertyHelper(@TIdTCPClientBoundPort_R,@TIdTCPClientBoundPort_W,'BoundPort');
    RegisterPropertyHelper(@TIdTCPClientHost_R,@TIdTCPClientHost_W,'Host');
    RegisterPropertyHelper(@TIdTCPClientOnConnected_R,@TIdTCPClientOnConnected_W,'OnConnected');
    RegisterPropertyHelper(@TIdTCPClientPort_R,@TIdTCPClientPort_W,'Port');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IdTCPClient(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIdTCPClient(CL);
end;



{ TPSImport_IdTCPClient }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTCPClient.CompOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTCPClient.ExecOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTCPClient.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IdTCPClient(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTCPClient.CompileImport2(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTCPClient.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IdTCPClient(ri);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IdTCPClient.ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  { nothing } 
end;
 
 
end.
